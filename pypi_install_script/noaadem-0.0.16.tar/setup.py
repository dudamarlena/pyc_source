#!/usr/bin/env python
# -*- coding: utf-8 -*-
from setuptools import setup
from setuptools.command.install import install
import os
import subprocess
from urllib2 import urlopen
import zipfile
import sys
import time


def parse_requirements(filename):
    return list(filter(lambda line: (line.strip())[0] != '#',
                       [line.strip() for line in open(filename).readlines()]))


def calculate_version():
    # Fetch version from git tags, and write to version.py.
    # Also, when git is not available (PyPi package), use stored version.py.
    version_py = os.path.join(os.path.dirname(__file__), 'version.py')
    try:
        git_version = subprocess.check_output(["git", "describe"]).rstrip()
    except Exception:
        with open(version_py, 'r') as filehandler:
            git_version = (open(version_py).read()
                           .strip().split('=')[-1].replace('"', ''))
    version_msg = ('# Do not edit this file, pipeline versioning is '
                   'governed by git tags')
    with open(version_py, 'w') as filehandler:
        filehandler.write(version_msg + os.linesep + "__version__=" +
                          git_version)
    return git_version


REQUIREMENTS = parse_requirements('requirements.txt')
VERSION_GIT = calculate_version()


def get_long_description():
    readme_file = 'README.md'
    if not os.path.isfile(readme_file):
        return ''
    # Try to transform the README from Markdown to reStructuredText.
    try:
        import pandoc
        pandoc.core.PANDOC_PATH = 'pandoc'
        doc = pandoc.Document()
        doc.markdown = open(readme_file).read()
        description = doc.rst
    except Exception:
        description = open(readme_file).read()
    return description


source = "http://www.ngdc.noaa.gov/mgg/topo/DATATILES/elev/all10g.zip"
localpath = os.path.expanduser('~/noaadem')
destiny = '%s/%s' % (localpath, source.split("/")[-1])


class DataInstaller(object):

    def create_path(self):
        if not os.path.exists(localpath):
            os.makedirs(localpath)

    def download(self, source, destiny):
        self.create_path()
        print "Downloading %s..." % source
        system = os.uname()[-1]
        self.chunk_size = 2048
        if system == 'armv6l':
            self.chunk_size = 16
        f = urlopen(source)
        CHUNK = self.chunk_size * 1024
        with open(destiny, "wb") as local_file:
            while True:
                chunk = f.read(CHUNK)
                if not chunk: break
                local_file.write(chunk)
                sys.stdout.write('.')
                sys.stdout.flush()
        print "The file was downloaded to %s." % destiny

    def unzip(self, source, path_destiny):
        print "Decompressing the file %s..." % source
        with zipfile.ZipFile(source) as zf:
		    for member in zf.infolist():
			    # Path traversal defense copied from
			    # http://hg.python.org/cpython/file/tip/Lib/http/server.py#l789
			    words = member.filename.split('/')
			    path = path_destiny
			    for word in words[:-1]:
				    word = os.path.splitdrive(word)[1]
				    word = os.path.split(word)[1]
				    if word in (os.curdir, os.pardir, ''): continue
				    path = os.path.join(path, word)
			    zf.extract(member, path)
        print "The file %s was decompressed." % destiny

    def obtain(self, source, destiny):
        if not os.path.exists(destiny):
            self.download(source, destiny)
            self.unzip(destiny, localpath+"/")

    def deploy(self):
        self.obtain(source, destiny)


class install_wrapper(install):

    def finalize_options(self):
        data_installer = DataInstaller()
        data_installer.deploy()
        sys.stdout.write("The noaadem package create the forlder %s to "
                         "save the DEM maps." % localpath)
        return install.finalize_options(self)


setup(
    name='noaadem',
    version=VERSION_GIT,
    author=u'Eloy Adonis Colell',
    author_email='gersolar.dev@gmail.com',
    packages=['noaadem'],
    url='https://github.com/gersolar/noaadem',
    license='MIT',
    description='A python library that simplify the access to the NOAA digital'
                'elevation map.',
    long_description=get_long_description(),
    zip_safe=True,
    install_requires=REQUIREMENTS,
    classifiers=[
        "Intended Audience :: Science/Research",
        "Programming Language :: Python",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 2.6",
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.2",
        "Programming Language :: Python :: 3.3",
        "Topic :: Scientific/Engineering :: Atmospheric Science",
        "Topic :: Scientific/Engineering :: Bio-Informatics",
        "Topic :: Scientific/Engineering :: GIS",
        "Topic :: Scientific/Engineering :: Information Analysis",
        "Topic :: Scientific/Engineering :: Physics",
    ],
    cmdclass={
        'install': install_wrapper
    },
)
