import setuptools
setuptools.setup(
    name="pykit3proc",
    packages=["pykit3proc"],
    version="0.2.0",
    license='MIT',
    description='easy to use `Popen`',
    long_description="<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n#   Table of Content\n\n- [Name](#name)\n- [Status](#status)\n- [Description](#description)\n- [Synopsis](#synopsis)\n- [Exceptions](#exceptions)\n  - [proc.CalledProcessError](#proccalledprocesserror)\n  - [proc.ProcError](#procprocerror)\n- [Methods](#methods)\n  - [proc.command](#proccommand)\n  - [proc.command_ex](#proccommand_ex)\n  - [proc.shell_script](#procshell_script)\n  - [proc.start_process](#procstart_process)\n- [Author](#author)\n- [Copyright and License](#copyright-and-license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n[![Build Status](https://travis-ci.com/drmingdrmer/pykit3proc.svg?branch=master)](https://travis-ci.com/drmingdrmer/pykit3proc)\n\n#   Name\n\nproc\n\n#   Status\n\nThis library is considered production ready.\n\n#   Description\n\nUtility to create sub process.\n\n#   Synopsis\n\n```python\nfrom pykit import proc\n\n# execute a shell script\n\nreturncode, out, err = proc.shell_script('ls / | grep bin')\nprint returncode\nprint out\n# output:\n# > 0\n# > bin\n# > sbin\n\n# Or run a command directly.\n# Unlike the above snippet, following statement does not start an sh process.\n\nreturncode, out, err = proc.command('ls', 'a*', cwd='/usr/local')\n```\n\n```python\n# a.py\nimport sys\n\nwith open('foo', 'w') as f:\n    f.write(str(sys.argv))\n\n# b.py\nimport time\nfrom pykit import proc\n\nproc.start_daemon('python', './a.py', 'test')\ntime.sleep(1)\ntry:\n    with open('foo', 'r') as f:\n        print repr(f.read())\nexcept Exception as e:\n    print repr(e)\n```\n\n#   Exceptions\n\n##  proc.CalledProcessError\n\n**syntax**:\n`proc.CalledProcessError(returncode, out, err, cmd, arguments, options)`\n\nIt is sub class of `subprocess.CalledProcessError`.\n\nIt is raised if a sub process return code is not `0`.\nBesides `CalledProcessError.args`, extended from super class `Exception`, it has 6\nother attributes.\n\n**attributes**:\n<!-- TODO env -->\n\n-   `CalledProcessError.returncode`:   process exit code.\n-   `CalledProcessError.out`:          stdout in one string.\n-   `CalledProcessError.err`:          stderr in one string.\n-   `CalledProcessError.cmd`:          the command a process `exec()`.\n-   `CalledProcessError.arguments`:    tuple of command arguments.\n-   `CalledProcessError.options`:      other options passed to this process. Such as `close_fds`, `cwd` etc.\n\n##  proc.ProcError\n\nIt is an alias to `proc.CalledProcessError`.\n\n#   Methods\n\n##  proc.command\n\n**syntax**:\n`proc.command(cmd, *arguments, **options)`\n\nRun a `command` with arguments `arguments` in a subprocess.\nIt blocks until sub process exit.\n\n**arguments**:\n\n-   `cmd`:\n    The path of executable to run.\n\n-   `arguments`:\n    is tuple or list of arguments passed to `cmd`.\n\n-   `options`:\n    is a dictionary of additional options, which are same as `subprocess.Popen`.\n    But with some different default value for easy use:\n\n    -   `encoding`: by default is the system default encoding.\n\n    -   `env`: by default inherit from parent process.\n\n    It also accept the following additional options:\n\n    -   `check=False`: if `True`, raise `CalledProcessError` if returncode is not 0.\n        By default it is `False`.\n\n    -   `capture=True`: whether to capture stdin, stdout and stderr.\n        Otherwise inherit these fd from current process.\n\n    -   `inherit_env=True`: whether to inherit evironment vars from current process.\n\n    -   `input=None`: input to send to stdin, if it is not None.\n\n    -   `timeout=None`: seconds to wait for sub process to exit.\n        By default it is None, for waiting for ever.\n\n    -   `tty=False`: whether to create a speudo tty to run sub process so that\n        the sub process believes it is in a tty(just like controlled by a\n        human).\n\n\n**return**:\na 3 element tuple that contains:\n\n-   `returncode`:   sub process exit code in `int`.\n-   `out`:  sub process stdout in a single string.\n-   `err`:  sub process stderr in a single string.\n\n##  proc.command_ex\n\n**syntax**:\n`proc.command_ex(cmd, *arguments, **options)`\n\nIt is the same as `proc.command` except that if sub process exit code is not\n0, it raises exception `proc.CalledProcessError`.\n\nSee `proc.CalledProcessError`.\n\n**return**:\na 3 element tuple of `returncode`, `out` and `err`, or raise exception\n`proc.CalledProcessError`.\n\n##  proc.shell_script\n\n**syntax**:\n`proc.shell_script(script_str, **options)`\n\nIt is just a shortcut of:\n```\noptions['stdin'] = script_str\nreturn command('sh', **options)\n```\n\n##  proc.start_process\n\n**syntax**:\n`proc.start_process(cmd, target, env, *args)`\n\nCreate a child process and replace it with `cmd`.\nBesides `stdin`, `stdout` and `stderr`, all file\ndescriptors from parent process will be closed in\nthe child process. The parent process waits for\nthe child process until it is completed.\n\n**arguments**:\n\n-   `cmd`:\n    The path of executable to run.\n    Such as `sh`, `bash`, `python`.\n\n-   `target`:\n    The path of the script.\n\n-   `env`:\n    It is a dictionary to pass environment variables\n    to the child process.\n\n-   `*args`:\n    Type is `tuple` or `list`.\n    The arguments passed to the script.\n    Type of every element must be `str`.\n\n**return**:\nnothing\n\n#   Author\n\nZhang Yanpo (张炎泼) <drdr.xp@gmail.com>\n\n#   Copyright and License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Zhang Yanpo (张炎泼) <drdr.xp@gmail.com>\n",
    long_description_content_type="text/markdown",
    author='Zhang Yanpo',
    author_email='drdr.xp@gmail.com',
    url='https://github.com/drmingdrmer/pykit3proc',
    keywords=['subprocess', 'popen'],
    python_requires='>=3.0',

    install_requires=['pykit3ut==0.1.5'],
    classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Libraries',
    ] + ['Programming Language :: Python :: 3.6', 'Programming Language :: Python :: 3.7', 'Programming Language :: Python :: 3.8', 'Programming Language :: Python :: Implementation :: PyPy'],
)
