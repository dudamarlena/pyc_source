{"info": {"author": "S. Domanskyi , A. Szedlak, N. T Hawkins, J. Wang, G. Paternostro, C. Piermarocchi", "author_email": "s.domanskyi@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Education", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Utilities"], "description": "# Digital Cell Sorter\n\n[![DOI](https://badge.fury.io/gh/sdomanskyi%2FDigitalCellSorter.svg)](https://badge.fury.io/gh/sdomanskyi%2FDigitalCellSorter)\n[![DOI](https://badge.fury.io/py/DigitalCellSorter.svg)](https://pypi.org/project/DigitalCellSorter)\n[![DOI](https://readthedocs.org/projects/digital-cell-sorter/badge/?version=latest)](https://digital-cell-sorter.readthedocs.io/en/latest/?badge=latest)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3749878.svg)](https://doi.org/10.5281/zenodo.3749878) \n\nDigital Cell Sorter (DCS): a single cell RNA-seq analysis toolkit for clustering, cell type identification, and anomaly detection.\n\n> **Note:** We are currently preparing a manuscript describing the toolkit located this repository.\n> If you want to access the package detailed in our latest publication of Polled Digital Cell Sorter\n> go to https://zenodo.org/record/2603265 and download the package (v1.1).\n\n\n> **The latest publication describing the methodology of cell types identification:**\n> [Polled Digital Cell Sorter (p-DCS): Automatic identification of hematological cell types from single cell RNA-sequencing clusters](\n> https://doi.org/10.1186/s12859-019-2951-x \n> \"Polled Digital Cell Sorter (p-DCS): Automatic identification of hematological cell types from single cell RNA-sequencing clusters\")\n> Sergii Domanskyi, Anthony Szedlak, Nathaniel T Hawkins, Jiayin Wang, Giovanni Paternostro & Carlo Piermarocchi, \n> *BMC Bioinformatics* volume 20, Article number: 369 (**2019**)\n\n\nThe documentation is available at https://digital-cell-sorter.readthedocs.io/.\n\n- [Getting Started](#getting-started)\n  * [Prerequisites](#prerequisites)\n  * [Loading the package](#loading-the-package)\n  * [Gene Expression Data Format](#gene-expression-data-format)\n  * [Other Data](#other-data)\n- [Functionality](#functionality)\n  * [Overall](#overall)\n  * [Visualization](#visualization)\n- [Demo](#demo)\n  * [Usage](#usage)\n    + [Main cell types](#main-cell-types)\n    + [Cell sub-types](#cell-sub-types)\n  * [Output](#output)\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your machine for data analysis, development or testing purposes.\n\n### Prerequisites\n\nThe code runs in Python >= 3.7 environment. \n\nIt is highly recommended to install Anaconda.\nInstallers are available at https://www.anaconda.com/distribution/\n\nIt uses packages ```numpy```, ```pandas```, ```matplotlib```, ```scikit-learn```, ```scipy```, \n```mygene```, ```fftw```, ```pynndescent```, ```networkx```, ```python-louvain```, ```fitsne```, \n```adjustText```, ```phate```, ```umap-learn```, ```plotly```\nand a few other standard Python packages. Most of these packages are installed with installation of the \nlatest release of ```DigitalCellSorter```:\n\n\tpip install DigitalCellSorter\n\nAlternatively, you can install this module directly from GitHub using:\n\n\tpip install git+https://github.com/sdomanskyi/DigitalCellSorter\n\nAlso one can create a local copy of this project for development purposes by running:\n\n\tgit clone https://github.com/sdomanskyi/DigitalCellSorter\n\nAfter cloning the package can also be installed from the cloned directory by:\n\n\tpython setup.py install\n\nTo install ```fftw``` from the ```conda-forge``` channel add ```conda-forge``` to your channels.\nOnce the conda-forge channel has been enabled, ```fftw``` can be installed as follows:\n\n\tconda config --add channels conda-forge\n\tconda install fftw\n\nTo use Sankey diagrams that are part of Digital Cell Sorter install ```orca```:\n\n    conda install -c plotly plotly-orca\n\n### Loading the package\n\nIn your script import the package:\n\n\timport DigitalCellSorter\n\nCreate an instance of class ```DigitalCellSorter```. Here, for simplicity, we use Default parameter values:\n\n\tDCS = DigitalCellSorter.DigitalCellSorter()\n\nDuring the initialization a number of parameters can be specified. For detailed list see documentation.\nMany of these parameters are transfered to DCS attributes thus can be modified after initialization using, e.g.:\n\n\tDCS.toggleMakeStackedBarplot = False\n\n\n\n### Gene Expression Data Format\n\nThe input gene expression data is expected in one of the following formats:\n\n1. Spreadsheet of comma-separated values ```csv``` containing condensed matrix in a form ```('cell', 'gene', 'expr')```. \nIf there are batches in the data the matrix has to be of the form ```('batch', 'cell', 'gene', 'expr')```. Columns order can be arbitrary.\n\n<details closed><summary>Examples:</summary><p>\n\n| cell | gene | expr |\n|------|------|------|\n| C1   | G1   | 3    |\n| C1   | G2   | 2    |\n| C1   | G3   | 1    |\n| C2   | G1   | 1    |\n| C2   | G4   | 5    |\n| ...  | ...  | ...  |\n\nor:\n\n| batch  | cell | gene | expr |\n|--------|------|------|------|\n| batch0 | C1   | G1   | 3    |\n| batch0 | C1   | G2   | 2    |\n| batch0 | C1   | G3   | 1    |\n| batch1 | C2   | G1   | 1    |\n| batch1 | C2   | G4   | 5    |\n| ...    | ...  | ...  | ...  |\n\n</p></details>\n\n\n2. Spreadsheet of comma-separated values ```csv``` where rows are genes, columns are cells with gene expression counts.\nIf there are batches in the data the spreadsheet the first row should be ```'batch'``` and the second ```'cell'```.\n\n<details closed><summary>Examples:</summary><p>\n\n| cell  | C1     | C2     | C3     | C4     |\n|-------|--------|--------|--------|--------|\n| G1    |        | 3      | 1      | 7      |\n| G2    | 2      | 2      |        | 2      |\n| G3    | 3      | 1      |        | 5      |\n| G4    | 10     |        | 5      | 4      |\n| ...   | ...    | ...    | ...    | ...    |\n\nor:\n\n| batch | batch0 | batch0 | batch1 | batch1 |\n|-------|--------|--------|--------|--------|\n| cell  | C1     | C2     | C3     | C4     |\n| G1    |        | 3      | 1      | 7      |\n| G2    | 2      | 2      |        | 2      |\n| G3    | 3      | 1      |        | 5      |\n| G4    | 10     |        | 5      | 4      |\n| ...   | ...    | ...    | ...    | ...    |\n\n</p></details>\n\n3. ```Pandas DataFrame``` where ```axis 0``` is genes and ```axis 1``` are cells.\nIf the are batched in the data then the index of ```axis 1``` should have two levels, e.g. ```('batch', 'cell')```, \nwith the first level indicating patient, batch or expreriment where that cell was sequenced, and the\nsecond level containing cell barcodes for identification.\n\n<details closed><summary>Examples:</summary><p>\n\n    df = pd.DataFrame(data=[[2,np.nan],[3,8],[3,5],[np.nan,1]], \n                      index=['G1','G2','G3','G4'], \n                      columns=pd.MultiIndex.from_arrays([['batch0','batch1'],['C1','C2']], names=['batch', 'cell']))    \n\n\n</p></details>\n\n4. ```Pandas Series ``` where index should have two levels, e.g. ```('cell', 'gene')```. If there are batched in the data\nthe first level should be indicating patient, batch or expreriment where that cell was sequenced, the second level cell barcodes for \nidentification and the third level gene names.\n\n<details closed><summary>Examples:</summary><p>\n\n    se = pd.Series(data=[1,8,3,5,5], \n                   index=pd.MultiIndex.from_arrays([['batch0','batch0','batch1','batch1','batch1'],\n                                                    ['C1','C1','C1','C2','C2'],\n                                                    ['G1','G2','G3','G1','G4']], names=['batch', 'cell', 'gene']))\n\n\n</p></details>\n\nAny of the data types outlined above need to be prepared/validated with a function ```prepare()```. \nLet us demonstrate this on the input of type 1:\n\n\tdf_expr = DCS.prepare('data/testData/dataFileCondensedWithBatches.tsv')\n\n### Other Data\n\n```markersDCS.xlsx```: An excel book with marker data. Rows are markers and columns are cell types. \n'1' means that the gene is a marker for that cell type, '-1' means that this gene is not expressed in this cell type, and '0' otherwise.\nThis gene marker file included in the package is used by Default. \nIf you use your own file it has to be prepared in the same format (including the two-line header). Note that only the first worksheet will be read,\nand its name can be arbitrary. The first column should contain gene names. The second row should contain cell types, and the first row how \nthose cell types are grouped. If any of the cell types need to be skipped, have \"NA\" in the corresponding cell of the first row of that cell type.\n\n<details closed><summary>Example:</summary><p>\n\n|A       |B            |C             |D           |E          |F                |G                         |H                           |I                        |J                         |K                  |L               |M                 |...      |\n|--------|-------------|--------------|------------|-----------|-----------------|--------------------------|----------------------------|-------------------------|--------------------------|-------------------|----------------|------------------|---------|\n|        |B cells      |B cells       |B cells     |T cells    |T cells          |T cells                   |T cells                     |T cells                  |T cells                   |T cells            |NK cells        |NK cells          |...      |\n|Marker  |B cells naive|B cells memory|Plasma cells|T cells CD8|T cells CD4 naive|T cells CD4 memory resting|T cells CD4 memory activated|T cells follicular helper|T cells regulatory (Tregs)|T cells gamma delta|NK cells resting|NK cells activated|...      |\n|ABCB4   |1            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ABCB9   |0            |0             |1           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ACAP1   |0            |0             |0           |0          |1                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ACHE    |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ACP5    |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ADAM28  |1            |1             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ADAMDEC1|0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ADAMTS3 |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ADRB2   |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|AIF1    |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|AIM2    |0            |1             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ALOX15  |0            |0             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ALOX5   |0            |1             |0           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|AMPD1   |0            |0             |1           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|ANGPT4  |0            |0             |1           |0          |0                |0                         |0                           |0                        |0                         |0                  |0               |0                 |...      |\n|...     |...          |...           |...         |...        |...              |...                       |...                         |...                      |...                       |...                |...             |...               |...      |\n\n</p></details>\n\n```Human.MitoCarta2.0.csv```: An ```csv``` spreadsheet with human mitochondrial genes, created within work \n[MitoCarta2.0: an updated inventory of mammalian mitochondrial proteins](https://doi.org/10.1093/nar/gkv1003 \"MitoCarta2.0\")\nSarah E. Calvo, Karl R. Clauser, Vamsi K. Mootha, *Nucleic Acids Research*, Volume 44, Issue D1, 4 January 2016.\n\n\n## Functionality\n\n### Overall\n\nThe main class, DigitalCellSorter, includes tools for:\n\n  1. **Pre-preprocessing**\n  2. **Quality control**\n  3. **Batch effects correction**\n  4. **Cells anomaly score evaluation**\n  4. **Dimensionality reduction**\n  5. **Clustering**\n  6. **Annotating cell types**\n  7. **Vizualization**  \n  8. **Post-processing**.\n\n\n### Visualization\n\nFunction ```visualize()``` will produce most of the necessary files for post-analysis of the data. \n\nSee examples of the visualization tools below.\n\n\n<details closed><summary>The visualization tools include:</summary><p>\n\n- ```makeMarkerExpressionPlot()```: a heatmap that shows all markers and their expression levels in the clusters, \nin addition this figure contains relative (%) and absolute (cell counts) cluster sizes\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_marker_expression.png?raw=true\" width=\"1000\"/>\n</p>\n\n- ```getIndividualGeneExpressionPlot()```:  2D layout colored by individual gene's expression\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/marker_subplots/BM1_CD19_(B4_CVID3_CD19).png?raw=true\" width=\"400\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/marker_subplots/BM1_CD33_(SIGLEC-3_CD33_p67_SIGLEC3).png?raw=true\" width=\"400\"/>\n</p>\n\n- ```makeVotingResultsMatrixPlot()```: z-scores of the voting results for each input cell type and each cluster, \nin addition this figure contains relative (%) and absolute (cell counts) cluster sizes\n\n<p align=\"middle\">\n <img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_scores_matrix.png?raw=true\" height=\"700\"/>\n</p>\n\n- ```makeHistogramNullDistributionPlot()```: null distribution for each cluster and each cell type illustrating \nthe \"machinery\" of the Digital Cell Sorter\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_null_distributions.png?raw=true\" width=\"800\"/>\n</p>\n\n- ```makeQualityControlHistogramPlot()```: Quality control histogram plots\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_number_of_genes_histogram.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_count_depth_histogram.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/QC_plots/BM1_fraction_of_mitochondrialGenes_histogram.png?raw=true\" width=\"250\"/>\n</p>\n\n- ```makeProjectionPlot()```: 2D layout colored by number of unique genes expressed, \nnumber of counts measured, and a faraction of mitochondrial genes..\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_number_of_genes.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_count_depth.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_fraction_of_mitochondrialGenes.png?raw=true\" width=\"250\"/>\n</p>\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_is_quality_cell.png?raw=true\" width=\"500\"/>\n</p>\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_clusters.png?raw=true\" width=\"375\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_patients.png?raw=true\" width=\"375\"/>\n</p>\n\nEffect of batch correction demostrated on combining BM1, BM2, BM3 and processing the data jointly without (left) and with (right) batch correction option:\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/BM123_no_corr_clusters_by_patients.png?raw=true\" width=\"375\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/BM123_with_corr_clusters_by_patients.png?raw=true\" width=\"375\"/>\n</p>\n\n- ```makeStackedBarplot()```: plot with fractions of various cell types\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_clusters_annotated.png?raw=true\" width=\"500\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_subclustering_stacked_barplot_BM1.png?raw=true\" height=\"500\"/>\n</p>\n\n\n- ```makeSankeyDiagram()```: river plot to compare various results \n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/Sankey_example.png?raw=true\" width=\"800\"/>\n</p>\n\n- ```getAnomalyScoresPlot()```: plot with anomaly scores per cell\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_All.png?raw=true\" width=\"750\"/>\n</p>\n\nCalculate and plot anomaly scores for an arbitrary cell type or cluster:\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_B_cells.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_T_cells.png?raw=true\" width=\"250\"/>\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_clusters_by_anomaly_score_cluster_7.0.0.png?raw=true\" width=\"250\"/>\n</p>\n\n\n- ```getIndividualGeneTtestPlot()```: Produce heatmap plot of t-test p-Values calculated gene-pair-wise\n        from the annotated clusters\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_ttest_CD4_(CD4_CD4mut).png?raw=true\" width=\"500\"/>\n</p>\n\n\n- ```makePlotOfNewMarkers()```: genes significantly expressed in the annotated cell types\n\n<p align=\"middle\">\n\t<img src=\"https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/output/BM1/BM1_new_markers.png?raw=true\" width=\"1000\"/>\n</p>\n\n</p></details>\n\n\n## Demo\n\n### Usage\n\nWe have made an example execution file ```demo.py``` that shows how to use ```DigitalCellSorter```.\n\nIn the demo, folder ```data``` is intentionally left empty. \nThe data file (cc95ff89-2e68-4a08-a234-480eca21ce79.homo_sapiens.mtx.zip) is about 2.4Gb in size and\nwill be downloaded with the ```demo.py``` script.\n\n> Previously the HCA preview data was consolidated in file ```ica_bone_marrow_h5.h5``` and downloadable  \n> from https://preview.data.humancellatlas.org/ (Raw Counts Matrix - Bone Marrow). \n> That file was ~485Mb and containing 378000 cells from 8 bone marrow donors (BM1-BM8). \n\nSee details of the script ```demo.py``` at:\n\n> [Example walkthrough of demo.py script](https://github.com/sdomanskyi/DigitalCellSorter/blob/master/docs/examples/ \"Examples\")\n\n\nTo execute the complete script ```demo.py``` run:\n\n\tpython demo.py\n\n*Note that the HCA BM1 data contains ~50000 sequenced cells, requiring more than 60Gb of RAM (we recommend to use High Performance Computers).\nIf you want to run our example on a regular PC or a laptop, you can use a randomly chosen number of cells:\n\n    df_expr.sample(n=5000, axis=1)\n\n\n### Output\n\nAll the output files are saved in ```output``` directory inside the directory where the ```demo.py``` script is. \nIf you specify any other directory, the results will be generetaed in it.\nIf you do not provide any directory the results will appear in the root where the script was executed.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/sdomanskyi/DigitalCellSorter/archive/1.3.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sdomanskyi/DigitalCellSorter", "keywords": "single cell RNA sequencing,cell type identification,biomarkers", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "DigitalCellSorter", "package_url": "https://pypi.org/project/DigitalCellSorter/", "platform": "", "project_url": "https://pypi.org/project/DigitalCellSorter/", "project_urls": {"Download": "https://github.com/sdomanskyi/DigitalCellSorter/archive/1.3.0.tar.gz", "Homepage": "https://github.com/sdomanskyi/DigitalCellSorter"}, "release_url": "https://pypi.org/project/DigitalCellSorter/1.3.1/", "requires_dist": ["numpy (>=1.16.4)", "pandas (>=0.24.2)", "tables (>=3.5.2)", "scipy (>=1.3.0)", "matplotlib (>=3.1.0)", "scikit-learn (>=0.21.2)", "plotly (>=4.1.1)", "mygene (>=3.1.0)", "pynndescent (>=0.3.3)", "networkx (>=2.3)", "python-louvain (>=0.13)", "adjustText (>=0.7.3)", "umap-learn (>=0.3.10)", "phate (>=1.0.3)", "fitsne (>=1.0.1) ; platform_system == \"Linux\" or platform_system == \"Darwin\""], "requires_python": "", "summary": "Toolkit for analysis and identification of cell types from heterogeneous single cell RNA-seq data", "version": "1.3.1"}, "last_serial": 7012597, "releases": {"1.2.1": [{"comment_text": "", "digests": {"md5": "05cbdc0e74cd27b5b154de9a4ac458ba", "sha256": "e91b968e8083a997d62003c710c75f99f2371c5eee96abd48b5ffc45db3af495"}, "downloads": -1, "filename": "DigitalCellSorter-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "05cbdc0e74cd27b5b154de9a4ac458ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6149910, "upload_time": "2019-10-02T15:17:43", "upload_time_iso_8601": "2019-10-02T15:17:43.208038Z", "url": "https://files.pythonhosted.org/packages/fb/96/dd6f02d1e398630d46026e5462fb4d87bf8873680efb7683a72ed2387b6a/DigitalCellSorter-1.2.1-py3-none-any.whl"}], "1.2.2": [{"comment_text": "", "digests": {"md5": "c2430d6342af71cc118d06761f60c6db", "sha256": "e65b605476773343e25059ea074b8f8f4f7a3c932e0e885734b6bc67e9a3e18c"}, "downloads": -1, "filename": "DigitalCellSorter-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c2430d6342af71cc118d06761f60c6db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6155532, "upload_time": "2019-10-02T16:43:42", "upload_time_iso_8601": "2019-10-02T16:43:42.886017Z", "url": "https://files.pythonhosted.org/packages/a2/85/5f4d1b9be17f9d297a6a157adce66f06ae440b25eca61fbd286b50fe7188/DigitalCellSorter-1.2.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0a62345d7fa1121b22853adc6d93d858", "sha256": "7b70e2d4438dba5c42d96b1f522f1196849cb689be4b413ad669e45886219f27"}, "downloads": -1, "filename": "DigitalCellSorter-1.2.2.tar.gz", "has_sig": false, "md5_digest": "0a62345d7fa1121b22853adc6d93d858", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6110178, "upload_time": "2019-10-02T16:54:23", "upload_time_iso_8601": "2019-10-02T16:54:23.354850Z", "url": "https://files.pythonhosted.org/packages/51/46/ce13a06945c3eaede9423cadbcb6ec1ca25dfc2f058fc70eeae5dec5678d/DigitalCellSorter-1.2.2.tar.gz"}], "1.2.3": [{"comment_text": "", "digests": {"md5": "bf378bd5afe1165f0602349b9dd11793", "sha256": "652fe04601c053860c6c136a89886342dc1ae460fd202253601ce6743e5a6d39"}, "downloads": -1, "filename": "DigitalCellSorter-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bf378bd5afe1165f0602349b9dd11793", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6184880, "upload_time": "2019-11-11T22:33:35", "upload_time_iso_8601": "2019-11-11T22:33:35.862445Z", "url": "https://files.pythonhosted.org/packages/64/39/3662634a071f41f45e7b16e7f451a6f7bac8d14d3541e12ae340b893e43c/DigitalCellSorter-1.2.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "e2f3cdc34d5b577fec650c9430b1dcbf", "sha256": "f76acd9d3ba65cfe1bbc10a2d97fc50303d1c47ecde954e6f9a2b14272d837d2"}, "downloads": -1, "filename": "DigitalCellSorter-1.2.3.tar.gz", "has_sig": false, "md5_digest": "e2f3cdc34d5b577fec650c9430b1dcbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6146800, "upload_time": "2019-11-11T22:33:38", "upload_time_iso_8601": "2019-11-11T22:33:38.833725Z", "url": "https://files.pythonhosted.org/packages/f9/f8/af4720622e53251f65ae6faaf51c787e81d4c700e5340c75688f895cd22c/DigitalCellSorter-1.2.3.tar.gz"}], "1.3.0": [{"comment_text": "", "digests": {"md5": "e64ea92399038da448c076279acd3dda", "sha256": "5b083113dbcb46cd14390a77874a492bd675d5032de3aa196137ba800ff8b09c"}, "downloads": -1, "filename": "DigitalCellSorter-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e64ea92399038da448c076279acd3dda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6442319, "upload_time": "2020-04-13T16:08:02", "upload_time_iso_8601": "2020-04-13T16:08:02.966178Z", "url": "https://files.pythonhosted.org/packages/54/70/b97fe77eb943e2cd11fd33b38a0b6947e367920804db1700b58cb1782f3b/DigitalCellSorter-1.3.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4af3257a607cc514ece6aa44d9079709", "sha256": "7ed766a52758761fbe3c989af72d0d003ad94119ced8172698fa209cc956a39a"}, "downloads": -1, "filename": "DigitalCellSorter-1.3.0.tar.gz", "has_sig": false, "md5_digest": "4af3257a607cc514ece6aa44d9079709", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6345565, "upload_time": "2020-04-13T16:08:26", "upload_time_iso_8601": "2020-04-13T16:08:26.442503Z", "url": "https://files.pythonhosted.org/packages/bc/30/fa17c773ad4a4f135bdbf0d0ba8567d7fa999281c89334093f914fa380cd/DigitalCellSorter-1.3.0.tar.gz"}], "1.3.1": [{"comment_text": "", "digests": {"md5": "f1e07cbc3fd7ad86a3c0121e5477876d", "sha256": "4191ce36ffffa25da81757b7b469a0adc78cc8d2295617d506960f38b1a9281d"}, "downloads": -1, "filename": "DigitalCellSorter-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f1e07cbc3fd7ad86a3c0121e5477876d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6442345, "upload_time": "2020-04-13T20:22:18", "upload_time_iso_8601": "2020-04-13T20:22:18.360836Z", "url": "https://files.pythonhosted.org/packages/90/61/bedf96cd4268413eb6ef8fe18a531d8bc833e1bbed1b44822d4d20ad350a/DigitalCellSorter-1.3.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a454d61e9e6eb39fe9966465ddf6366a", "sha256": "eabddcf26d0ee15b7cd150669967884333756304c0e2166d2b07285560cb1cd6"}, "downloads": -1, "filename": "DigitalCellSorter-1.3.1.tar.gz", "has_sig": false, "md5_digest": "a454d61e9e6eb39fe9966465ddf6366a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6345581, "upload_time": "2020-04-13T20:22:41", "upload_time_iso_8601": "2020-04-13T20:22:41.972307Z", "url": "https://files.pythonhosted.org/packages/29/06/e655ff0f5cff7eaafa4c8df744a7a6f0c7b503ea59947e58b81fa1c7a72a/DigitalCellSorter-1.3.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "f1e07cbc3fd7ad86a3c0121e5477876d", "sha256": "4191ce36ffffa25da81757b7b469a0adc78cc8d2295617d506960f38b1a9281d"}, "downloads": -1, "filename": "DigitalCellSorter-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f1e07cbc3fd7ad86a3c0121e5477876d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6442345, "upload_time": "2020-04-13T20:22:18", "upload_time_iso_8601": "2020-04-13T20:22:18.360836Z", "url": "https://files.pythonhosted.org/packages/90/61/bedf96cd4268413eb6ef8fe18a531d8bc833e1bbed1b44822d4d20ad350a/DigitalCellSorter-1.3.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a454d61e9e6eb39fe9966465ddf6366a", "sha256": "eabddcf26d0ee15b7cd150669967884333756304c0e2166d2b07285560cb1cd6"}, "downloads": -1, "filename": "DigitalCellSorter-1.3.1.tar.gz", "has_sig": false, "md5_digest": "a454d61e9e6eb39fe9966465ddf6366a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6345581, "upload_time": "2020-04-13T20:22:41", "upload_time_iso_8601": "2020-04-13T20:22:41.972307Z", "url": "https://files.pythonhosted.org/packages/29/06/e655ff0f5cff7eaafa4c8df744a7a6f0c7b503ea59947e58b81fa1c7a72a/DigitalCellSorter-1.3.1.tar.gz"}]}