{"info": {"author": "Kaustubh Pratap Chand", "author_email": "contact@kausalitylabs.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# FireService\n\nFireService is a simple library to create Python Services.\n\n* Declarative input fields.\n* Input validations.\n* Immutable fields.\n* Execution callbacks.\n* Less biolerplate.\n* Works with native Python objects wherever possible.\n* Extensible with custom field types and validators.\n* Provides an elegant superstructure for classes which work on any input.\n\n## Installation\n\nTo install FireService using pip, run: ```pip install fireservice```\n\nTo install FireService using pipenv, run: ```pipenv install fireservice```\n\n\n## Basic Usage\n\n```python\nfrom fireservice import IntegerField, StringField, FireService\nfrom fireservice.exceptions import SkipError, ValidationError\n\n\nCRAWLED_DB = []\n\ndef page_name_validator(name, value):\n    if not value.endswith('.html'):\n        raise ValidationError(name, 'I only know html pages!')\n\n\nclass Crawler(FireService):\n    # All fields are required by default\n    user_id = IntegerField(min_value=1)\n    page_name = StringField(validators=[page_name_validator])\n\n    def url(self):\n        # Fields are directly accessible using instance __dict__\n        return 'http://example.com/{}/{}'.format(self.user_id, self.page_name)\n\n    def pre_fire(self):\n        if self.url() in CRAWLED_DB:\n            # Control directly goes to post_fire method\n            raise SkipError('Page already crawled!')\n\n    def fire(self, **kwargs):\n        CRAWLED_DB.append(self.url())\n\n    def post_fire(self, fired, exc):\n        if fired:\n            print('I crawled!')\n        else:\n            print('I skipped crawling because: ', exc)\n\n\ncrawler = Crawler()\ncrawler.call({\n    'user_id': 1,\n    'page_name': 'about.html'\n})\n\n# Values are stored in native python types wherever possible:\nprint(type(crawler.user_id), type(crawler.page_name))  # <class 'int'> <class 'str'>\n\n# Raises ModificationError as all Fields are immutable\ncrawler.user_id = 2 \n```\n\nA slightly convoluted example to show nested field types:\n\n```python\nclass Service(FireService):\n    a = ListField(ListField(ListField(CharacterField())))\n\n    def fire(self, **kwargs):\n        print(self.a)\n\n\ns = Service()\ns.call({\n    'a': [[['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]]\n})\n\n```\n\n\n## What is a Service?\n\nServices are a part of the domain model which performs some business logic. Usually they work on a set of inputs and change some state or return a computed value. In languages like Python which are not type safe, input validation and a common interface for programs which work on dynamic inputs could be an issue.\n\nSome reading resources :\n* https://en.wikipedia.org/wiki/Service_layer_pattern\n* https://www.martinfowler.com/bliki/AnemicDomainModel.html\n\n\n## Docs\n\nView the Docs at: https://kpchand.github.io/fireservice/.\nIf redirection fails, then directly go [here](https://kpchand.github.io/fireservice/fireservice/index.html).\n\n\n## Extending FireService\n\nWe can also create custom fields. Suppose our application takes user ID with the pattern *xxx-yyy-zzz*. We can create a `StringField ` and use a custom *validator*. But it would be more convenient & declarative if we had a `Field` type which did this validation by default. Here is an example of such an implementation:\n\n\n```python\nclass IDField(StringField):\n    \"\"\"A Field which takes input in the pattern xxx-yyy-zzz.\n    \"\"\"\n    def default_validator(self, value):\n        # Use StringField validator to validate str\n        super().default_validator(value)\n        value = value.split('-')\n        if len(value) != 3 or not all([len(v) == 3 for v in value]):\n            raise ValidationError(self.name, 'Improper format')\n\n\nclass Service(FireService):\n    user_id = IDField()\n\n    def fire(self, **kwargs):\n        print('user_id: ', self.user_id)\n\n\ns = Service()\ns.call({\n    'user_id': 'foo-bar-baz'\n    }\n)\n```\n\n\n## Inspiration\n\nFireService was inspired from [django-service-objects](https://github.com/mixxorz/django-service-objects) but designed to work with any framework and as close to raw Python as possible. \n\n\n## Why is it called FireService?\n\nWhen you invoke `call()` it starts `fire()` which in turn starts the `FireService`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kpchand/fireservice", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fireservice", "package_url": "https://pypi.org/project/fireservice/", "platform": "", "project_url": "https://pypi.org/project/fireservice/", "project_urls": {"Homepage": "https://github.com/kpchand/fireservice"}, "release_url": "https://pypi.org/project/fireservice/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "FireService is a simple library to create Python Services", "version": "0.0.3"}, "last_serial": 6982004, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "bfed6c10117fed7f5b1fcca0edae3509", "sha256": "63638143bcd7716dbaaa9b698ee127f38928fcdf0a58bc42dfa68bd9d5da1b6d"}, "downloads": -1, "filename": "fireservice-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bfed6c10117fed7f5b1fcca0edae3509", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9601, "upload_time": "2020-04-08T22:23:08", "upload_time_iso_8601": "2020-04-08T22:23:08.459380Z", "url": "https://files.pythonhosted.org/packages/f8/66/886a0a709302d83012d099241ed9c5c08cbebd92c176abea0a18a7d4597a/fireservice-0.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "20a519e6640d38d40840446596f56737", "sha256": "225c77efab08997fa1f032d6a526b0ff81c57d59ee8f95146d554f05115fd803"}, "downloads": -1, "filename": "fireservice-0.0.3.tar.gz", "has_sig": false, "md5_digest": "20a519e6640d38d40840446596f56737", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8041, "upload_time": "2020-04-08T22:23:10", "upload_time_iso_8601": "2020-04-08T22:23:10.098792Z", "url": "https://files.pythonhosted.org/packages/cf/13/0d69fbcca23a6ecbc01d1458c8d814f9dd6aea3ddef8c7e52bbf2ca5db8a/fireservice-0.0.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "bfed6c10117fed7f5b1fcca0edae3509", "sha256": "63638143bcd7716dbaaa9b698ee127f38928fcdf0a58bc42dfa68bd9d5da1b6d"}, "downloads": -1, "filename": "fireservice-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bfed6c10117fed7f5b1fcca0edae3509", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9601, "upload_time": "2020-04-08T22:23:08", "upload_time_iso_8601": "2020-04-08T22:23:08.459380Z", "url": "https://files.pythonhosted.org/packages/f8/66/886a0a709302d83012d099241ed9c5c08cbebd92c176abea0a18a7d4597a/fireservice-0.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "20a519e6640d38d40840446596f56737", "sha256": "225c77efab08997fa1f032d6a526b0ff81c57d59ee8f95146d554f05115fd803"}, "downloads": -1, "filename": "fireservice-0.0.3.tar.gz", "has_sig": false, "md5_digest": "20a519e6640d38d40840446596f56737", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8041, "upload_time": "2020-04-08T22:23:10", "upload_time_iso_8601": "2020-04-08T22:23:10.098792Z", "url": "https://files.pythonhosted.org/packages/cf/13/0d69fbcca23a6ecbc01d1458c8d814f9dd6aea3ddef8c7e52bbf2ca5db8a/fireservice-0.0.3.tar.gz"}]}