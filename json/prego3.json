{"info": {"author": "David Villa Alises", "author_email": "David.Villa@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing"], "description": "Prego is a system/integration test framework running as Python unittest testcases.\n\nPrego is a library consisting on a set of clases and hamcrest matchers usefull\nto specify shell command interactions through files, environment variables,\nnetwork ports. It provides support to run shell commands on background, send\nsignal to processes, set assertions on command stdout or stderr, etc.\n\n\nConcepts\n========\n\n**First:** a Task() is a set of assertions.\n\nThree assertion checkers are available:\n\n- task.assert_that, for single shot checking.\n- task.wait_that, for polling recurrent checking.\n- task.command, to run arbitrary shell command.\n\nSubjects (and their associated assertions):\n\n- Task(desc='', detach=False)\n\n  - command(cmd_line, stdout, stderr, expected, timeout, signal, cwd, env)\n  - running()\n  - terminated()\n\n- File(path)\n\n  - exists()\n\n- File().content\n\n  - any hamcrest string matchers (ie: contains_string)\n\n- Variable\n\n  - exists()\n  - any hamcrest string matchers (ie: contains_string)\n\n- Command\n\n  - running()\n  - exits_with(value)\n  - killed_by(signal)\n\n- Host(hostname)\n\n  - listen_port(number, proto='tcp')\n  - reachable()\n\n\nExecution model\n===============\n\n\n\ncommand\n=======\n\n\ncontext\n=======\n\nThe ``context`` is an object whose attributes may be automatically interpolated in command\nand filename paths.\n\nSome of them are set as default values for command() parameters too. If ``context.cwd`` is\nset, all commands in the same test method will use that value as CWD (Current Working\nDirectory) unless you define a different value as ``command()`` keyarg.\n\nContext attributes that defaults command() parameters are ``cwd``, ``timeout``,\n``signal`` and ``expected``.\n\n\nInterpolation\n=============\n\nAvailable interpolation variables are:\n\n- $basedir: the directory where prego is executed (relative).\n- $fullbasedir: absolute path of $basedir.\n- $testdir: the directory where the running test file is.\n- $fulltestdir: absolute path of $testdir.\n- $testfilename: the file name of the running test.\n- $tmpbase: a safe directory (per user) to put temporary files.\n- $tmp: a safe directory (per user and prego instance) to put temporary files.\n- $pid: the prego instance PID.\n\n\nExamples\n========\n\nTesting ncat\n------------\n\n::\n\n  import hamcrest\n  from prego import Task, TestCase, context as ctx, running\n  from prego.net import localhost, listen_port\n  from prego.debian import Package, installed\n\n\n  class Net(TestCase):\n      def test_netcat(self):\n          ctx.port = 2000\n          server = Task(desc='ncat server', detach=True)\n          server.assert_that(Package('nmap'), installed())\n          server.assert_that(localhost,\n                             hamcrest.is_not(listen_port(ctx.port)))\n          cmd = server.command('ncat -l -p $port')\n          server.assert_that(cmd.stdout.content,\n                             hamcrest.contains_string('bye'))\n\n          client = Task(desc='ncat client')\n          client.wait_that(server, running())\n          client.wait_that(localhost, listen_port(ctx.port))\n          client.command('ncat -c \"echo bye\" localhost $port')\n\n\nThis test may be executed using nosetest::\n\n  $ nosetests examples/netcat.py\n  .\n  ----------------------------------------------------------------------\n  Ran 1 test in 1.414s\n\n  OK\n\n\nBut prego provides a wrapper (the ``prego`` command) that has some interesting options::\n\n  $ prego -h\n  usage: prego [-h] [-c FILE] [-k] [-d] [-o] [-e] [-v] [-p] ...\n\n  positional arguments:\n    nose-args\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -c FILE, --config FILE\n                          explicit config file\n    -k, --keep-going      continue even with failed assertion or tests\n    -d, --dirty           do not remove generated files\n    -o, --stdout          print tests stdout\n    -e, --stderr          print tests stderr\n    -v, --verbose         increase log verbosity\n\n\nSame ncat test invoking ``prego``::\n\n  [II] ------  Net.test_netcat BEGIN\n  [II] [ ok ]   B.0 wait that A is running\n  [II] [ ok ]   A.0 assert that nmap package is installed\n  [II] [ ok ]   A.1 assert that localhost not port 2000/tcp to be open\n  [II] [fail]   B.1 wait that localhost port 2000/tcp to be open\n  [II] [ ok ]   B.1 wait that localhost port 2000/tcp to be open\n  [II]          A.2.out| bye\n  [II] [ ok ]   B.2 Command 'ncat -c \"echo bye\" localhost 2000' code (0:0) time 5:1.28\n  [II] [ ok ]   B.3 assert that command B.2 returncode to be 0\n  [II] [ ok ]   B.4 assert that command B.2 execution time to be a value less than <5>s\n  [II] [ OK ]   B   Task end - elapsed: 1.17s\n  [II] [ ok ]   A.2 Command 'ncat -l -p 2000' code (0:0) time 5:1.33\n  [II] [ ok ]   A.3 assert that command A.2 returncode to be 0\n  [II] [ ok ]   A.4 assert that command A.2 execution time to be a value less than <5>s\n  [II] [ ok ]   A.5 assert that File '/tmp/prego-david/26245/A.2.out' content a string containing 'bye'\n  [II] [ OK ]   A   Task end - elapsed: 1.32s\n  [II] [ OK ]  Net.test_netcat END\n  ----------------------------------------------------------------------\n  Ran 1 test in 1.396s\n\n  OK\n\n\nTesting google.com reachability\n===============================\n\n::\n\n  import hamcrest\n  from prego import TestCase, Task\n  from prego.net import Host, reachable\n\n  class GoogleTest(TestCase):\n      def test_is_reachable(self):\n          link = Task(desc=\"Is interface link up?\")\n          link.command('ip link | grep wlan0 | grep \"state UP\"')\n\n          router = Task(desc=\"Is the local router reachable?\")\n          router.command(\"ping -c2 $(ip route | grep ^default | cut -d' ' -f 3)\")\n\n          for line in file('/etc/resolv.conf'):\n              if line.startswith('nameserver'):\n                  server = line.split()[1]\n                  test = Task(desc=\"Is DNS server {0} reachable?\".format(server))\n                  test.command('ping -c 2 {0}'.format(server))\n\n          resolve = Task(desc=\"may google name be resolved?\")\n          resolve.command('host www.google.com')\n\n          ping = Task(desc=\"Is google reachable?\")\n          ping.command('ping -c 1 www.google.com')\n          ping.assert_that(Host('www.google.com'), reachable())\n          ping.assert_that(Host('www.googlewrong.com'), hamcrest.is_not(reachable()))\n\n          web = Task(desc=\"get index.html\")\n          cmd = web.command('wget http://www.google.com/webhp?hl=en -O-')\n          web.assert_that(cmd.stdout.content,\n                          hamcrest.contains_string('value=\"I\\'m Feeling Lucky\"'))\n\n.. Local Variables:\n..  coding: utf-8\n..  mode: flyspell\n..  ispell-local-dictionary: \"american\"\n.. End:\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/arco_group/prego", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "prego3", "package_url": "https://pypi.org/project/prego3/", "platform": "", "project_url": "https://pypi.org/project/prego3/", "project_urls": {"Homepage": "https://bitbucket.org/arco_group/prego"}, "release_url": "https://pypi.org/project/prego3/0.20181031/", "requires_dist": null, "requires_python": "", "summary": "System test framework over POSIX shells", "version": "0.20181031"}, "last_serial": 5125251, "releases": {"0.20181031": [{"comment_text": "", "digests": {"md5": "992926cfa0bb197e62d0d0dd24bf6b42", "sha256": "811a0abfb11307867c23b833275d5469e195cdad44a0ca4e2af8c6011aefa0f9"}, "downloads": -1, "filename": "prego3-0.20181031.tar.gz", "has_sig": false, "md5_digest": "992926cfa0bb197e62d0d0dd24bf6b42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24569, "upload_time": "2019-04-10T17:51:09", "upload_time_iso_8601": "2019-04-10T17:51:09.262876Z", "url": "https://files.pythonhosted.org/packages/d7/d7/7df8dd7ebdab854c8e123c255c28962de8dc3e067b860ae545fd9ae4b6ae/prego3-0.20181031.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "992926cfa0bb197e62d0d0dd24bf6b42", "sha256": "811a0abfb11307867c23b833275d5469e195cdad44a0ca4e2af8c6011aefa0f9"}, "downloads": -1, "filename": "prego3-0.20181031.tar.gz", "has_sig": false, "md5_digest": "992926cfa0bb197e62d0d0dd24bf6b42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24569, "upload_time": "2019-04-10T17:51:09", "upload_time_iso_8601": "2019-04-10T17:51:09.262876Z", "url": "https://files.pythonhosted.org/packages/d7/d7/7df8dd7ebdab854c8e123c255c28962de8dc3e067b860ae545fd9ae4b6ae/prego3-0.20181031.tar.gz"}]}