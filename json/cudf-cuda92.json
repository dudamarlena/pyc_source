{"info": {"author": "NVIDIA Corporation", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# <div align=\"left\"><img src=\"img/rapids_logo.png\" width=\"90px\"/>&nbsp;cuDF - GPU DataFrames</div>\n\n[![Build Status](http://18.191.94.64/buildStatus/icon?job=cudf-master)](http://18.191.94.64/job/cudf-master/)&nbsp;&nbsp;[![Documentation Status](https://readthedocs.org/projects/cudf/badge/?version=latest)](https://cudf.readthedocs.io/en/latest/)\n\nThe [RAPIDS](https://rapids.ai) cuDF library is a GPU DataFrame manipulation library based on Apache Arrow that accelerates loading, filtering, and manipulation of data for model training data preparation. The RAPIDS GPU DataFrame provides a pandas-like API that will be familiar to data scientists, so they can now build GPU-accelerated workflows more easily.\n\n**NOTE:** For the latest stable [README.md](https://github.com/rapidsai/cudf/blob/master/README.md) ensure you are on the `master` branch.\n\n## Quick Start\n\nPlease see the [Demo Docker Repository](https://hub.docker.com/r/rapidsai/rapidsai/), choosing a tag based on the NVIDIA CUDA version you\u2019re running. This provides a ready to run Docker container with example notebooks and data, showcasing how you can utilize cuDF.\n\n## Install cuDF\n\n### Conda\n\nIt is easy to install cuDF using conda. You can get a minimal conda installation with [Miniconda](https://conda.io/miniconda.html) or get the full installation with [Anaconda](https://www.anaconda.com/download).\n\nInstall and update cuDF using the conda command:\n\n```bash\n# CUDA 9.2\nconda install -c nvidia -c rapidsai -c numba -c conda-forge -c defaults cudf\n\n# CUDA 10.0\nconda install -c nvidia/label/cuda10.0 -c rapidsai/label/cuda10.0 -c numba -c conda-forge -c defaults cudf\n```\n\nNote: This conda installation only applies to Linux and Python versions 3.6/3.7.\n\n### Pip\n\nIt is easy to install cuDF using pip. You must specify the CUDA version to ensure you install the right package.\n\n```bash\n# CUDA 9.2\npip install cudf-cuda92\n\n# CUDA 10.0.\npip install cudf-cuda100\n```\n\n## Development Setup\n\nThe following instructions are for developers and contributors to cuDF OSS development. These instructions are tested on Linux Ubuntu 16.04 & 18.04. Use these instructions to build cuDF from source and contribute to its development.  Other operatings systems may be compatible, but are not currently tested.\n\n### Get libcudf Dependencies\n\nCompiler requirements:\n\n* `gcc`     version 5.4+\n* `nvcc`    version 9.2+\n* `cmake`   version 3.12.4+\n\nCUDA/GPU requirements:\n\n* CUDA 9.2+\n* NVIDIA driver 396.44+\n* Pascal architecture or better\n\nPython requirements:\n\n* 3.6 or 3.7\n\nYou can obtain CUDA from [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)\n\nSince `cmake` will download and build Apache Arrow you may need to install Boost C++ (version 1.58+) before running\n`cmake`:\n\n```bash\n# Install Boost C++ for Ubuntu 16.04/18.04\n$ sudo apt-get install libboost-all-dev\n```\n\nor\n\n```bash\n# Install Boost C++ for Conda\n$ conda install -c conda-forge boost\n```\n\n## Script to build cuDF from source\n\n### Build from Source\n\nTo install cuDF from source, ensure the dependencies are met and follow the steps below:\n\n- Clone the repository and submodules\n```bash\nCUDF_HOME=$(pwd)/cudf\ngit clone https://github.com/rapidsai/cudf.git $CUDF_HOME\ncd $CUDF_HOME\ngit submodule update --init --remote --recursive\n```\n- Create the conda development environment `cudf_dev`\n```bash\n# create the conda environment (assuming in base `cudf` directory)\nconda env create --name cudf_dev --file conda/environments/cudf_dev_cuda9.2.yml # for CUDA 9.2\n# or\nconda env create --name cudf_dev --file conda/environments/cudf_dev_cuda10.0.yml # for CUDA 10.0\n# activate the environment\nsource activate cudf_dev\n```\n\n- Build and install `libcudf`. CMake depends on the `nvcc` executable being on your path or defined in `$CUDACXX`.\n```bash\n$ cd $CUDF_HOME/cpp                                                       # navigate to C/C++ CUDA source root directory\n$ mkdir build                                                             # make a build directory\n$ cd build                                                                # enter the build directory\n\n# CMake options:\n# -DCMAKE_INSTALL_PREFIX set to the install path for your libraries or $CONDA_PREFIX if you're using Anaconda, i.e. -DCMAKE_INSTALL_PREFIX=/install/path or -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX\n# -DCMAKE_CXX11_ABI set to ON or OFF depending on the ABI version you want, defaults to ON. When turned ON, ABI compability for C++11 is used. When OFF, pre-C++11 ABI compability is used.\n$ cmake .. -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_CXX11_ABI=ON      # configure cmake ...\n\n$ make -j                                                                 # compile the libraries librmm.so, libcudf.so ... '-j' will start a parallel job using the number of physical cores available on your system\n$ make install                                                            # install the libraries librmm.so, libcudf.so to the CMAKE_INSTALL_PREFIX\n```\n\n- To run tests (Optional):\n```bash\n$ make test\n```\n\n- Build, install, and test cffi bindings:\n```bash\n$ make python_cffi                                  # build CFFI bindings for librmm.so, libcudf.so\n$ make install_python                               # build & install CFFI python bindings. Depends on cffi package from PyPi or Conda\n$ cd python && py.test -v                           # optional, run python tests on low-level python bindings\n```\n\n- Build the `cudf` python package, in the `python` folder:\n```bash\n$ cd $CUDF_HOME/python\n$ python setup.py build_ext --inplace\n```\n\n- You will also need the following environment variables, including `$CUDA_HOME`.\n```bash\nNUMBAPRO_NVVM=$CUDA_HOME/nvvm/lib64/libnvvm.so\nNUMBAPRO_LIBDEVICE=$CUDA_HOME/nvvm/libdevice\n```\n\n- To run Python tests (Optional):\n```bash\n$ py.test -v                                        # run python tests on cudf python bindings\n```\n\n- Finally, install the Python package to your Python path:\n```bash\n$ python setup.py install                           # install cudf python bindings\n```\n\nDone! You are ready to develop for the cuDF OSS project.\n\n## Debugging cuDF\n\n### Building Debug mode from source\n\nFollow the [above instructions](#build-from-source) to build from source and add `-DCMAKE_BUILD_TYPE=Debug` to the `cmake` step. \n\nFor example:\n```bash\n$ cmake .. -DCMAKE_INSTALL_PREFIX=/install/path -DCMAKE_BUILD_TYPE=Debug     # configure cmake ... use -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX if you're using Anaconda\n```\n\nThis builds `libcudf` in Debug mode which enables some `assert` safety checks and includes symbols in the library for debugging.\n\nAll other steps for installing `libcudf` into your environment are the same.\n\n### Debugging with `cuda-gdb` and `cuda-memcheck`\n\nWhen you have a debug build of `libcudf` installed, debugging with the `cuda-gdb` and `cuda-memcheck` is easy.\n\nIf you are debugging a Python script, simply run the following:\n\n#### `cuda-gdb`\n\n```bash\ncuda-gdb -ex r --args python <program_name>.py <program_arguments>\n```\n\n#### `cuda-memcheck`\n\n```bash\ncuda-memcheck python <program_name>.py <program_arguments>\n```\n\n\n## Automated Build in Docker Container\n\nA Dockerfile is provided with a preconfigured conda environment for building and installing cuDF from source based off of the master branch.\n\n### Prerequisites\n\n* Install [nvidia-docker2](https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0)) for Docker + GPU support\n* Verify NVIDIA driver is `396.44` or higher\n* Ensure CUDA 9.2+ is installed\n\n### Usage\n\nFrom cudf project root run the following, to build with defaults:\n```bash\n$ docker build --tag cudf .\n```\nAfter the container is built run the container:\n```bash\n$ docker run --runtime=nvidia -it cudf bash\n```\nActivate the conda environment `cudf` to use the newly built cuDF and libcudf libraries:\n```\nroot@3f689ba9c842:/# source activate cudf\n(cudf) root@3f689ba9c842:/# python -c \"import cudf\"\n(cudf) root@3f689ba9c842:/#\n```\n\n### Customizing the Build\n\nSeveral build arguments are available to customize the build process of the\ncontainer. These are specified by using the Docker [build-arg](https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg)\nflag. Below is a list of the available arguments and their purpose:\n\n| Build Argument | Default Value | Other Value(s) | Purpose |\n| --- | --- | --- | --- |\n| `CUDA_VERSION` | 9.2 | 10.0 | set CUDA version |\n| `LINUX_VERSION` | ubuntu16.04 | ubuntu18.04 | set Ubuntu version |\n| `CC` & `CXX` | 5 | 7 | set gcc/g++ version; **NOTE:** gcc7 requires Ubuntu 18.04 |\n| `CUDF_REPO` | This repo | Forks of cuDF | set git URL to use for `git clone` |\n| `CUDF_BRANCH` | master | Any branch name | set git branch to checkout of `CUDF_REPO` |\n| `NUMBA_VERSION` | newest | >=0.40.0 | set numba version |\n| `NUMPY_VERSION` | newest | >=1.14.3 | set numpy version |\n| `PANDAS_VERSION` | newest | >=0.23.4 | set pandas version |\n| `PYARROW_VERSION` | 0.12.0 | Not supported | set pyarrow version |\n| `CMAKE_VERSION` | newest | >=3.12 | set cmake version |\n| `CYTHON_VERSION` | 0.29 | Not supported | set Cython version |\n| `PYTHON_VERSION` | 3.6 | 3.7 | set python version |\n\n---\n\n## <div align=\"left\"><img src=\"img/rapids_logo.png\" width=\"265px\"/></div> Open GPU Data Science\n\nThe RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA\u00ae CUDA\u00ae primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.\n\n<p align=\"center\"><img src=\"img/rapids_arrow.png\" width=\"80%\"/></p>\n\n### Apache Arrow on GPU\n\nThe GPU version of [Apache Arrow](https://arrow.apache.org/) is a common API that enables efficient interchange of tabular data between processes running on the GPU. End-to-end computation on the GPU avoids unnecessary copying and converting of data off the GPU, reducing compute time and cost for high-performance analytics common in artificial intelligence workloads. As the name implies, cuDF uses the Apache Arrow columnar data format on the GPU. Currently, a subset of the features in Apache Arrow are supported.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rapidsai/cudf", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "cudf-cuda92", "package_url": "https://pypi.org/project/cudf-cuda92/", "platform": "", "project_url": "https://pypi.org/project/cudf-cuda92/", "project_urls": {"Homepage": "https://github.com/rapidsai/cudf"}, "release_url": "https://pypi.org/project/cudf-cuda92/0.6.1/", "requires_dist": ["pandas (>=0.23.4)", "numba (<0.42,>=0.40.0)", "pycparser (==2.19)", "pyarrow (==0.12.1)", "cffi (>=1.0.0)", "cython (<0.30,>=0.29)", "numpy (>=1.14)", "nvstrings-cuda92"], "requires_python": ">=3.6,<3.8", "summary": "cuDF - GPU Dataframe", "version": "0.6.1"}, "last_serial": 4983803, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "6662af9dd78d887bacc579868e6cb54e", "sha256": "9e4c69deacddb6b0d582777397b614f801d61836fff704e705f720ef8e973d1f"}, "downloads": -1, "filename": "cudf_cuda92-0.5.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6662af9dd78d887bacc579868e6cb54e", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 15721535, "upload_time": "2019-01-29T04:19:59", "upload_time_iso_8601": "2019-01-29T04:19:59.269397Z", "url": "https://files.pythonhosted.org/packages/72/c0/fb7031284f63f732b494243cd4fa3d4a12c5b3c6b06b51a3d5de1a713ad3/cudf_cuda92-0.5.0-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "4c6dc81cf61ed82f206dcddf47256d56", "sha256": "261e67265fb8e81f33cc2e5c69486889ab36335a8791a3530e81b05455980d58"}, "downloads": -1, "filename": "cudf_cuda92-0.5.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4c6dc81cf61ed82f206dcddf47256d56", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 15726995, "upload_time": "2019-01-29T04:20:05", "upload_time_iso_8601": "2019-01-29T04:20:05.112349Z", "url": "https://files.pythonhosted.org/packages/54/48/7d550ed4426c367da552f577995cbe189acfb0ab3a3288e82e4b654c66c5/cudf_cuda92-0.5.0-cp37-cp37m-manylinux1_x86_64.whl"}], "0.5.0.post1": [{"comment_text": "", "digests": {"md5": "6e60fef3ebc06c4904859f0d83770ee9", "sha256": "4f0ec686ca3aa8bb1b27bcf9fac3b5c8be271eab899203a33bc5b1cbf777c2e9"}, "downloads": -1, "filename": "cudf_cuda92-0.5.0.post1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6e60fef3ebc06c4904859f0d83770ee9", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 16552953, "upload_time": "2019-01-31T06:33:12", "upload_time_iso_8601": "2019-01-31T06:33:12.524570Z", "url": "https://files.pythonhosted.org/packages/30/bd/dfad8f44833fd7bf83b7c1b27adc0254e6b4d87fd9bf7329889b476e6c12/cudf_cuda92-0.5.0.post1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "b1e78382f96a6645427518dba510ba80", "sha256": "99d98f3c5419480ad97becbbd638e2beeec60e57a37533c63adcf7e4ef3c5080"}, "downloads": -1, "filename": "cudf_cuda92-0.5.0.post1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "b1e78382f96a6645427518dba510ba80", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 16558918, "upload_time": "2019-01-31T06:33:18", "upload_time_iso_8601": "2019-01-31T06:33:18.674737Z", "url": "https://files.pythonhosted.org/packages/14/ae/bdab4180a64f8b24cb06e81c9aa36d8abcf5cf31e5a181fb5d82f5d6d6c8/cudf_cuda92-0.5.0.post1-cp37-cp37m-manylinux1_x86_64.whl"}], "0.5.1": [{"comment_text": "", "digests": {"md5": "ac6e1d88c120ed45d1f36bcc319c14d8", "sha256": "6c6a856a21985b898b0301875b95a8fd555c62997c5dea3239af3569991aa17b"}, "downloads": -1, "filename": "cudf_cuda92-0.5.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "ac6e1d88c120ed45d1f36bcc319c14d8", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 16718583, "upload_time": "2019-02-05T23:30:08", "upload_time_iso_8601": "2019-02-05T23:30:08.837904Z", "url": "https://files.pythonhosted.org/packages/64/63/cd580871aeacd01628e5c048c883858ba04ee601694c05b96867f7b316aa/cudf_cuda92-0.5.1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "bbba2b5781c72670cf429b791ac9ab5a", "sha256": "0d23a04fdae1470d8157333414ee7777560ca7ab48e5d2df1ba9dec5b38146a1"}, "downloads": -1, "filename": "cudf_cuda92-0.5.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "bbba2b5781c72670cf429b791ac9ab5a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 16722267, "upload_time": "2019-02-05T23:30:28", "upload_time_iso_8601": "2019-02-05T23:30:28.493234Z", "url": "https://files.pythonhosted.org/packages/6b/e1/c00b4f33d767ffa9e06ce23efcfe73952027e6a2ef34860297796d82b72c/cudf_cuda92-0.5.1-cp37-cp37m-manylinux1_x86_64.whl"}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a307bc48d5d9b49c213962360ee63bfd", "sha256": "359988ae632b41ff71c23c47e531b2d72a3dfbf7ccfe6631a660844ad3eafc0b"}, "downloads": -1, "filename": "cudf_cuda92-0.6.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a307bc48d5d9b49c213962360ee63bfd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 17189687, "upload_time": "2019-03-22T23:21:56", "upload_time_iso_8601": "2019-03-22T23:21:56.181253Z", "url": "https://files.pythonhosted.org/packages/2f/d2/4d4beefc331cfc8abb97d18c7cc1876c6bc20e2f82a1b2753cc21b0171dd/cudf_cuda92-0.6.0-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "d697b75652614a926316b8a6f707b30c", "sha256": "7cfee782c10ff38b6d6a58a781306943cab6099cb43ca160d479c69f15e72614"}, "downloads": -1, "filename": "cudf_cuda92-0.6.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d697b75652614a926316b8a6f707b30c", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 17195190, "upload_time": "2019-03-22T22:51:12", "upload_time_iso_8601": "2019-03-22T22:51:12.633506Z", "url": "https://files.pythonhosted.org/packages/28/b2/04da921fa171bea1e0894fda555ac2397eba6f59b0e9eb01acc0de219b43/cudf_cuda92-0.6.0-cp37-cp37m-manylinux1_x86_64.whl"}], "0.6.0.post1": [{"comment_text": "", "digests": {"md5": "7eb1531d3180b7a4004dd894976fb393", "sha256": "c45372393d80b3684a947c4ce709dbb4f5cfb77de6757aa7b17158b72aae52f2"}, "downloads": -1, "filename": "cudf_cuda92-0.6.0.post1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7eb1531d3180b7a4004dd894976fb393", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 17189201, "upload_time": "2019-03-23T00:20:05", "upload_time_iso_8601": "2019-03-23T00:20:05.637448Z", "url": "https://files.pythonhosted.org/packages/4f/6f/a235871360cd48b26a0f191fb49026e8e7b722e0c52ecd7ef365467eea59/cudf_cuda92-0.6.0.post1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "bfd5b23a613d92b43e474f31ec8d776f", "sha256": "647df3b0715a1efcf684337bd7cb69bbfb9958e91b5762031a1b5d057d424977"}, "downloads": -1, "filename": "cudf_cuda92-0.6.0.post1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "bfd5b23a613d92b43e474f31ec8d776f", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 17193341, "upload_time": "2019-03-23T00:30:37", "upload_time_iso_8601": "2019-03-23T00:30:37.767017Z", "url": "https://files.pythonhosted.org/packages/60/7c/2a67a2b93c2c682034e6e0d0fbe44de26a36ce5f01cf8ccc05a1051dbd40/cudf_cuda92-0.6.0.post1-cp37-cp37m-manylinux1_x86_64.whl"}], "0.6.1": [{"comment_text": "", "digests": {"md5": "2cec9247cbc38482f117584c7e77248d", "sha256": "dd86430b596e1ce3b4b96142e71f3ff7426991d5f8aebf3c5ba1fcb78955b9e4"}, "downloads": -1, "filename": "cudf_cuda92-0.6.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "2cec9247cbc38482f117584c7e77248d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 17190126, "upload_time": "2019-03-25T17:52:19", "upload_time_iso_8601": "2019-03-25T17:52:19.220906Z", "url": "https://files.pythonhosted.org/packages/7c/ac/b1d007628e33551edd95fb1b312397d34d9dcd34aa35fc60f15fd27b2fa5/cudf_cuda92-0.6.1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "e416c300735d1332d43446f4b71bda43", "sha256": "cc4f2c11033684500e0b91801cae4685f385dc59c15d3c3887fb816b9921e3fd"}, "downloads": -1, "filename": "cudf_cuda92-0.6.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e416c300735d1332d43446f4b71bda43", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 17195229, "upload_time": "2019-03-25T17:53:59", "upload_time_iso_8601": "2019-03-25T17:53:59.930235Z", "url": "https://files.pythonhosted.org/packages/1a/d8/fc36bd0abd707880502d39b7f49f063a59b74db78400abc4097cf809b9f2/cudf_cuda92-0.6.1-cp37-cp37m-manylinux1_x86_64.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "2cec9247cbc38482f117584c7e77248d", "sha256": "dd86430b596e1ce3b4b96142e71f3ff7426991d5f8aebf3c5ba1fcb78955b9e4"}, "downloads": -1, "filename": "cudf_cuda92-0.6.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "2cec9247cbc38482f117584c7e77248d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 17190126, "upload_time": "2019-03-25T17:52:19", "upload_time_iso_8601": "2019-03-25T17:52:19.220906Z", "url": "https://files.pythonhosted.org/packages/7c/ac/b1d007628e33551edd95fb1b312397d34d9dcd34aa35fc60f15fd27b2fa5/cudf_cuda92-0.6.1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "e416c300735d1332d43446f4b71bda43", "sha256": "cc4f2c11033684500e0b91801cae4685f385dc59c15d3c3887fb816b9921e3fd"}, "downloads": -1, "filename": "cudf_cuda92-0.6.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e416c300735d1332d43446f4b71bda43", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 17195229, "upload_time": "2019-03-25T17:53:59", "upload_time_iso_8601": "2019-03-25T17:53:59.930235Z", "url": "https://files.pythonhosted.org/packages/1a/d8/fc36bd0abd707880502d39b7f49f063a59b74db78400abc4097cf809b9f2/cudf_cuda92-0.6.1-cp37-cp37m-manylinux1_x86_64.whl"}]}