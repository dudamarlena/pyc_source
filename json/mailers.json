{"info": {"author": "alex.oleshkevich", "author_email": "alex.oleshkevich@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "<p align=\"center\">\n<a href=\"https://travis-ci.org/alex-oleshkevich/mailers\">\n    <img src=\"https://api.travis-ci.com/alex-oleshkevich/mailers.svg?branch=master\" alt=\"Build Status\">\n</a>\n<a href=\"https://codecov.io/gh/alex-oleshkevich/mailers\">\n    <img src=\"https://codecov.io/gh/alex-oleshkevich/mailers/branch/master/graph/badge.svg\" alt=\"Coverage\">\n</a>\n<a href=\"https://pypi.org/project/mailers/\">\n    <img src=\"https://badge.fury.io/py/mailers.svg\" alt=\"Package version\">\n</a>\n</p>\n\n---\n\n# Mailers for asyncio\n\n## Installation\n\n```bash\npip install mailers\n```\n\nIf you plan to use `FileTransport` you would also need to install \n[`aiofiles`](https://github.com/Tinche/aiofiles) extra:\n\n```bash\npip install mailers[aiofiles]\n```\n\nOr install all optional dependencies at once:\n\n```bash\npip install mailers[full]\n```\n\n\n## Usage\n\nThe package uses two main concepts: mailers and transports. \nThe mailer is a class which abstracts you from the underlying transport\nand the transport does the actual message delivery.\n\n```python\nfrom mailers import EmailMessage, configure, send_mail\n\nconfigure(mailers={\n    'default': 'smtp://user:password@localhost:25?timeout=2'\n})\n\nmessage = EmailMessage(\n    to='user@localhost', from_address='from@localhost',\n    subject='Hello', text_body='World!'\n)\nawait send_mail('user@localhost', message)\n```\n\nOr if you prefer more control on what is going one, take this more verbose path:\n\n```python\nfrom mailers import Mailer, SMTPTransport, EmailMessage\n\nmailer = Mailer(SMTPTransport('localhost', 25))\n\nmessage = EmailMessage(\n    to='user@localhost', from_address='from@localhost',\n    subject='Hello', text_body='World!'\n)\nawait mailer.send(message)\n``` \n\n### Shortcuts\n\nThe packages exports some utility methods to simplify the work: `configure` and `send_mail`.\n\n`configure` methods allows to configure multiple mailers and bind URL specs at once.\n\n```python\nfrom mailers import configure\n\nconfigure(\n    mailers={\n        'default': 'smtp://localhost',\n        'admin': 'smtp://localhost'   \n    },\n    transports={\n        'myproto': 'myproto.ImplementationClass'            \n    }\n)\n``` \n\nIn case you have multiple mailers, the `send_mail` shortcut accepts `mailer` argument to specify the mailer to use:\n```python\nsend_mail(to, message, mailer='admin')\n```\n\nWhen you dont't set `mailer` argument, the function will use mailer with name `default`.  \n\n\n## Compose messages\n\nThe arguments and methods of `EmailMessage ` class are self-explanatory so here is some basic example:\n\n```python\nfrom mailers import EmailMessage, Attachment\n\nmessage = EmailMessage(\n    to='user@localhost', \n    from_address='from@example.tld', \n    cc='cc@example.com', \n    bcc=['bcc@example.com'], \n    text_body='Hello world!',\n    html_body='<b>Hello world!</b>',\n    attachments=[\n        Attachment('CONTENTS', 'file.txt', 'text/plain'),    \n    ]   \n)\n\n# attachments can be added on demand:\n\nwith open('file.txt', 'r') as f:\n    message.attach(f.read(), f.name, 'text/plain')\n\n    # alternatively\n    message.add_attachment(\n        Attachment(f.read(), f.name, 'text/plain')\n    )\n```\n\n`cc`, `bcc`, `to`, `reply_to` can be either strings or lists of strings.\n\n### A note about attachments\n\nAccessing files is a blocking operation. You may want to use `aiofiles` or alternate library\nwhich reads files in non-blocking mode.\n\nThis package does not implement direct access to files at moment. \nThis is something to do at later stage. \n\n## Transports\n\n### Preinstalled transports\n\nAll transport classes can be found in `mailers.transports` module.\n\n| Class             | Example URL                                       | Description                                                       |\n|-------------------|---------------------------------------------------|-------------------------------------------------------------------|\n| SMTPTransport     | smtp://user:pass@hostname:port?timeout=&use_tls=1 | Sends mails using SMTP protocol.                                  |\n| InMemoryTransport | not available                                     | Stores sent messages in the local variable. See an example below. |\n| FileTransport     | file:///path/to/directory                         | Writes sent messages into directory.                              |\n| NullTransport     | null://                                           | Does not perform any sending.                                     |\n| StreamTransport   | not available                                     | Writes message to an open stream. See an example below.           |\n| ConsoleTransport  | console://                                        | Prints messages into stdout.                                      |\n| GMailTransport    | gmail://username:password                         | Sends via GMail.                                                  |\n| MailgunTransport  | mailgun://username:password                       | Sends via Mailgun.                                                |\n\n\n### Special notes\n\n#### InMemoryTransport\n\n`InMemoryTransport` takes a list and writes outgoing mail into it. \nRead this list to inspect the outbox.\n\n```python\nfrom mailers import InMemoryTransport, EmailMessage\n\nmessage = EmailMessage()\nmailbox = []\ntransport = InMemoryTransport(mailbox)\nawait transport.send(message)\n\nassert message in mailbox\n```\n\n#### StreamTransport\n\nWrites messages into the open stream.\n\n```python\nfrom mailers import StreamTransport, EmailMessage\nfrom io import TextIO\n\nmessage = EmailMessage()\n\ntransport = StreamTransport(output=TextIO())\nawait transport.send(message)\n```\n\n`output` is any IO compatible object.\n\n\n### Custom transports.\n\nEach transport must implement `async def send(self, message: EmailMessage) -> None` method. \nPreferably, inherit from `BaseTransport` class:\n\n```python\nfrom mailers import BaseTransport, Mailer, EmailMessage\n\nclass PrintTransport(BaseTransport):\n    async def send(self, message: EmailMessage) -> None\n        print(str(message))\n\nmailer = Mailer(PrintTransport())\n```\n\nIn order to make your transport to accept `EmailURL` instances, your transport class has to implement `from_url` \nclass method:\n\n```python\nfrom mailers import BaseTransport, EmailMessage, EmailURL\n\nclass PrintTransport(BaseTransport):\n    @classmethod\n    def from_url(cls, url: EmailURL) -> \"PrintTransport\":\n        return cls()\n```\n\n### Add custom transport protocols.\n\nOnce you build a custom transport you can add it's URL to enable URL-based configurations.\n```python\nfrom mailers import Transports, Mailer\n\nTransports.bind_url('myprotocol', 'my.transport.Name')\n\nmailer = Mailer('myprotocol://')\n``` \n\nNote that the transport must to implement `from_url` method to accept URL parameters.\nOtherwise it will be constructed without any arguments passed to the `__init__` method.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alex-oleshkevich/mailers", "keywords": "asyncio,email,mailer,mail", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mailers", "package_url": "https://pypi.org/project/mailers/", "platform": "", "project_url": "https://pypi.org/project/mailers/", "project_urls": {"Homepage": "https://github.com/alex-oleshkevich/mailers", "Repository": "https://github.com/alex-oleshkevich/mailers.git"}, "release_url": "https://pypi.org/project/mailers/0.0.2/", "requires_dist": ["aiosmtplib (>=1.1,<2.0)", "aiofiles (>=0.4.0,<0.5.0); extra == \"aiofiles\" or extra == \"full\""], "requires_python": ">=3.6,<4.0", "summary": "Email delivery for asyncio.", "version": "0.0.2"}, "last_serial": 6182410, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dabe3cc02b0f5526266fce7618900123", "sha256": "c72dd2d48c575c41410c7b5fea1306d3ab717cf4cf0e25b75f190803b0296f1b"}, "downloads": -1, "filename": "mailers-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dabe3cc02b0f5526266fce7618900123", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11394, "upload_time": "2019-11-22T16:35:41", "upload_time_iso_8601": "2019-11-22T16:35:41.421105Z", "url": "https://files.pythonhosted.org/packages/49/c0/4d801dbb1ff736e26ca57ecbca9030a7a60bb3f50eed63091862459e0dc9/mailers-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4b07306ad05073d1bb4e4df1305fbc25", "sha256": "d1ee2abdc334bead7f79d44b33537ea2af21a7909ee91b80a18a332445c5c96a"}, "downloads": -1, "filename": "mailers-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4b07306ad05073d1bb4e4df1305fbc25", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12135, "upload_time": "2019-11-22T16:35:43", "upload_time_iso_8601": "2019-11-22T16:35:43.625279Z", "url": "https://files.pythonhosted.org/packages/19/43/b4c2d829b7f9bb376ce79c36975b56baf1ed52806a9f1375ddd79ccf7bd8/mailers-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "61970bc37a46f9c185600a02ed3c7e52", "sha256": "5abbf96d46138aef71c81a5def96f6983d8a7f88dcc29f967d826d13e10af894"}, "downloads": -1, "filename": "mailers-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "61970bc37a46f9c185600a02ed3c7e52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11560, "upload_time": "2019-11-22T16:53:01", "upload_time_iso_8601": "2019-11-22T16:53:01.588387Z", "url": "https://files.pythonhosted.org/packages/6e/92/7449e390f5d1214d36b53f92d5ff37d6acb19ebfa9319b7033a5a0caaf51/mailers-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "6b30d00465cab1115e9c80a884cab9c5", "sha256": "5cce0be5e83b3fbae3c0e3d48864572db9c07e3521742b64642d31791675a4ce"}, "downloads": -1, "filename": "mailers-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6b30d00465cab1115e9c80a884cab9c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12503, "upload_time": "2019-11-22T16:53:03", "upload_time_iso_8601": "2019-11-22T16:53:03.150861Z", "url": "https://files.pythonhosted.org/packages/c6/e5/624ff5e063eca2d5d074306a7d0ad75fb3d0470f93f3cc04f84381baa3e4/mailers-0.0.2.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "61970bc37a46f9c185600a02ed3c7e52", "sha256": "5abbf96d46138aef71c81a5def96f6983d8a7f88dcc29f967d826d13e10af894"}, "downloads": -1, "filename": "mailers-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "61970bc37a46f9c185600a02ed3c7e52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11560, "upload_time": "2019-11-22T16:53:01", "upload_time_iso_8601": "2019-11-22T16:53:01.588387Z", "url": "https://files.pythonhosted.org/packages/6e/92/7449e390f5d1214d36b53f92d5ff37d6acb19ebfa9319b7033a5a0caaf51/mailers-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "6b30d00465cab1115e9c80a884cab9c5", "sha256": "5cce0be5e83b3fbae3c0e3d48864572db9c07e3521742b64642d31791675a4ce"}, "downloads": -1, "filename": "mailers-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6b30d00465cab1115e9c80a884cab9c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12503, "upload_time": "2019-11-22T16:53:03", "upload_time_iso_8601": "2019-11-22T16:53:03.150861Z", "url": "https://files.pythonhosted.org/packages/c6/e5/624ff5e063eca2d5d074306a7d0ad75fb3d0470f93f3cc04f84381baa3e4/mailers-0.0.2.tar.gz"}]}