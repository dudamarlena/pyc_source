{"info": {"author": "Adam J. Plowman", "author_email": "adam.plowman@manchester.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering"], "description": "[![PyPI version](https://badge.fury.io/py/formable.svg)](https://badge.fury.io/py/formable)\n\n`formable` provides tools for formability analysis in materials science.\n\n## Installation\n\n`pip install formable`\n\n## Getting Started\n\n### `LoadResponse` and `LoadResponseSet`\n\nThe response of a material to a load is represented by the `LoadResponse` class. Use the following code snippet create a `LoadResponse`, where the arguments passed represent incremental data (i.e. data for each of the \"steps\" in the loading):\n\n```python\nfrom formable import LoadResponse\n\nload_response = LoadResponse(true_stress=true_stress, equivalent_strain=equivalent_strain)\n\n```\n\n`true_stress` and `equivalent_strain` are Numpy arrays of shapes `(N, 3, 3)` and `(N,)`, respectively, for `N` increments within the load response.\n\nA collection of load responses that contain the same incremental data are represented by the `LoadResponseSet` class:\n\n```python\nfrom formable import LoadResponse, LoadResponseSet\n\nall_responses = [LoadResponse(...), LoadResponse(...), ...]\nload_set = LoadResponseSet(all_responses)\n\n```\n\n### Yield functions\n\nA number of yield functions as defined in the literature can be fitted and visualised. As an example, let's visualise the difference between the Von Mises and the Tresca yield criteria:\n\n```python\nfrom formable.yielding.yield_functions import VonMises, Tresca\n\nvon_mises = VonMises(equivalent_stress=70e6)\ntresca = Tresca(equivalent_stress=70e6)\n\nYieldFunction.compare_3D([von_mises, tresca])\n\n```\n\nIf run within a Jupyter environment, this code snippet will generated a 3D visualisation of the yield surfaces in principal stress space:\n\n![yield_function_3D_viz](https://raw.githubusercontent.com/LightForm-group/formable/master/img/yield_function_3D_viz.gif)\n\nTo look at a single plane within principal stress space, we can do this:\n\n```python\n\nYieldFunction.compare_2D([von_mises, tresca], plane=[0, 0, 1])\n\n```\n\nwhich generates a figure like this:\n\n![yield_function_2D_viz](https://raw.githubusercontent.com/LightForm-group/formable/master/img/yield_function_2D_viz.png)\n\nWe can choose any plane that intercepts the origin. For instance, we can also look at the \u03c0-plane (\u03c3<sub>1</sub> = \u03c3<sub>2</sub> = \u03c3<sub>3</sub>):\n\n```python\n\nYieldFunction.compare_2D([von_mises, tresca], plane=[1, 1, 1])\n\n```\n\nwhich generates a figure like this:\n\n![yield_function_2D_viz](https://raw.githubusercontent.com/LightForm-group/formable/master/img/yield_function_2D_viz_pi_plane.png)\n\n### Yield function fitting\n\nUsing experimental or simulated yielding tests, we can fit yield functions to the results. Consider a `LoadResponseSet` object that has a sufficiently large number of increments of `true_stress` and `equivalent_strain` data to enable such a fit. Using the Barlat \"Yld2000-2D\" anisotropic yield function as an example, we can perform a fit:\n\n```python\n\nfrom formable import LoadResponse, LoadResponseSet\nfrom formable.yielding import YieldPointCriteria\n\n# First generate a LoadResponseSet, using the results from experiment/simulation:\nall_responses = [LoadResponse(...), LoadResponse(...), ...]\nload_set = LoadResponseSet(all_responses)\n\n# Then define a yield point criterion:\nyield_point = YieldPointCriteria('equivalent_strain', 1e-3)\n\n# Now calculate yield stresses according to the yield point criteria:\nload_set.calculate_yield_stresses(yield_point)\n\n# Now we can fit to the resulting yield stresses:\nload_set.fit_yield_function('Barlat_Yld2000_2D', equivalent_stress=70e6)\n\n```\n\n#### Choosing the fitting parameters and initial guesses\n\nWe can specify which of the yield function parameters we would like to fit, and which should remain fixed. We can also pass initial values to the fitting procedure. A least squares fit is employed to fit yield functions in `formable`.\n\nTo fix a parameter during the fit, just pass it as a keyword argument to the `fit_yield_function` method, as we did in the above example, where we fixed the `equivalent_stress` parameter. To pass initial values for some of the parameters, we can pass a `initial_params` dictionary:\n\n```python\nload_set.fit_yield_function('Barlat_Yld2000_2D', initial_params={'a1': 1.4})\n```\n\nWe can see the available parameters of a given yield function by using the `PARAMETERS` attribute of a `YieldFunction` class:\n\n```python\n\nfrom formable.yielding.yield_functions import Barlat_Yld2000_2D\n\nprint(Barlat_Yld2000_2D.PARAMETERS)\n\n```\n\nwhich prints:\n\n```\n['a1',\n 'a2',\n 'a3',\n 'a4',\n 'a5',\n 'a6',\n 'a7',\n 'a8',\n 'equivalent_stress',\n 'exponent']\n ```\n\n Alternatively, if we have created a yield function object (from a fitting procedure, or directly), we can use the `get_parameters` method to get the parameters and their values:\n\n ```python\n print(von_mises.get_parameters())\n ```\n\n which prints:\n\n ```\n {'equivalent_stress': 70000000.0}\n ```\n\n#### Visualising the fit\n\nOnce a yield function has been fit to a load set, we can visualise the fitted yield function like this:\n\n```python\nload_set.show_yield_functions_3D()\n```\n\nor, in a similar way to above, we can visualise the fitted yield functions in a given principal stress plane, using:\n\n```python\nload_set.show_yield_functions_2D(plane=[0, 0, 1])\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "formable", "package_url": "https://pypi.org/project/formable/", "platform": "", "project_url": "https://pypi.org/project/formable/", "project_urls": {"Github": "https://github.com/LightForm-group/formable"}, "release_url": "https://pypi.org/project/formable/0.1.1/", "requires_dist": ["scipy", "numpy", "plotly", "vecmaths", "pyvista", "itkwidgets"], "requires_python": "", "summary": "Formability analysis in materials science.", "version": "0.1.1"}, "last_serial": 7005759, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "24a5ddfd947e616039c52596b9188126", "sha256": "467b6b274bfa541169ec31c2b4e64408173bef3e3671660e50117ce42e72ce34"}, "downloads": -1, "filename": "formable-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "24a5ddfd947e616039c52596b9188126", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30284, "upload_time": "2020-04-12T17:51:49", "upload_time_iso_8601": "2020-04-12T17:51:49.396474Z", "url": "https://files.pythonhosted.org/packages/7b/bb/69d91893f8aab7a1a9e8ea12c4c398c4df3543850af9327b0e56f0c941fb/formable-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "08863767820f9e4bf5742fd2a926e563", "sha256": "4b2a25a0fc2b73a3b3ab7cbfd51503bc569b57f1b81b4503a7a22dfe5ec60db8"}, "downloads": -1, "filename": "formable-0.1.0.tar.gz", "has_sig": false, "md5_digest": "08863767820f9e4bf5742fd2a926e563", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24378, "upload_time": "2020-04-12T17:51:51", "upload_time_iso_8601": "2020-04-12T17:51:51.873839Z", "url": "https://files.pythonhosted.org/packages/51/0b/53186fd6f8ddccfefda2eb4145226ca77b34cec73a6355c34ba5fff65e8e/formable-0.1.0.tar.gz"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3df9ef0f6d86552b95ff3e64dc2f7830", "sha256": "e8794450fd76c364216c821a83df7b3435b8571320171ad895aa4f4680ee4caa"}, "downloads": -1, "filename": "formable-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3df9ef0f6d86552b95ff3e64dc2f7830", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30305, "upload_time": "2020-04-12T18:41:21", "upload_time_iso_8601": "2020-04-12T18:41:21.546898Z", "url": "https://files.pythonhosted.org/packages/b1/19/2fa13a8e88b6c4ab7a66d541f3201ca929d6500262e6b50b5523b7a7de07/formable-0.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "80847c798eca3c1224eecb52b795f372", "sha256": "e7f68dac2c2c1e820f9d17038c3b8658ef71eb23f4c2ceb5a7d7b1b396656d89"}, "downloads": -1, "filename": "formable-0.1.1.tar.gz", "has_sig": false, "md5_digest": "80847c798eca3c1224eecb52b795f372", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24430, "upload_time": "2020-04-12T18:41:23", "upload_time_iso_8601": "2020-04-12T18:41:23.799948Z", "url": "https://files.pythonhosted.org/packages/9d/7b/d1047d6f695772430481129d3c557b335687589342edd4b06d5edcd69873/formable-0.1.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "3df9ef0f6d86552b95ff3e64dc2f7830", "sha256": "e8794450fd76c364216c821a83df7b3435b8571320171ad895aa4f4680ee4caa"}, "downloads": -1, "filename": "formable-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3df9ef0f6d86552b95ff3e64dc2f7830", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30305, "upload_time": "2020-04-12T18:41:21", "upload_time_iso_8601": "2020-04-12T18:41:21.546898Z", "url": "https://files.pythonhosted.org/packages/b1/19/2fa13a8e88b6c4ab7a66d541f3201ca929d6500262e6b50b5523b7a7de07/formable-0.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "80847c798eca3c1224eecb52b795f372", "sha256": "e7f68dac2c2c1e820f9d17038c3b8658ef71eb23f4c2ceb5a7d7b1b396656d89"}, "downloads": -1, "filename": "formable-0.1.1.tar.gz", "has_sig": false, "md5_digest": "80847c798eca3c1224eecb52b795f372", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24430, "upload_time": "2020-04-12T18:41:23", "upload_time_iso_8601": "2020-04-12T18:41:23.799948Z", "url": "https://files.pythonhosted.org/packages/9d/7b/d1047d6f695772430481129d3c557b335687589342edd4b06d5edcd69873/formable-0.1.1.tar.gz"}]}