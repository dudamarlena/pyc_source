{"info": {"author": "Diego-Zulu", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: Name Service (DNS)"], "description": "# orbi-dnsmasq\n\n[![PyPI version](https://badge.fury.io/py/orbi-dnsmasq.svg)](https://badge.fury.io/py/orbi-dnsmasq)\n\nPython command to set a hosted hosts file as dnsmasq on your orbi router.\n\n## Description\n\n### Inspiration\n\nIf you own a [Netgear Orbi](https://www.netgear.com/orbi/), you should know that its OS is based on [OpenWrt](https://openwrt.org/).\nThis means that we could use telnet to tap into some of the features that haven't been made available through the web GUI.\nI was really interested in the [`dnsmasq`](https://en.wikipedia.org/wiki/Dnsmasq) capabilities to set up \"Router based \nad-blocking\" to reduce ads on my whole network, so I decided to try and config that into my router after reading about it on \n[hackingthenetgearorbi](https://hackingthenetgearorbi.wordpress.com/).\n\nThere was just one problem: **Configs done to the orbi will be erased when it turns off**.\n\nBecause of this, I wanted to create a \"fire and forget\" command that I could run comfortably whenever I was feeling like it.\nI also thought it would be neat if people without technical knowledge would be able to run it too.\n\nAnd that's the reason I created `orbi-dnsmasq`, and why you are reading this now!\n\n### Steps this command takes\n\n- Asks for router password (note: the password is not stored in any way, you'll need to re-enter it every time).\n- Turns on telnet on the debug Orbi GUI if `-t` flag was supplied.\n- Telnet into Orbi.\n- Downloads hosts file (you can specify a custom url with the `-h` flag, or check the default one I'm using \non [someonewhocares.org](https://someonewhocares.org/hosts/)).\n- Deletes the `no-hosts` line to active dnsmasq.\n- Reboots Orbi's dns.\n- Turns off telnet  on the debug Orbi GUI if `-t` flag was supplied.\n\n## Getting Started\n\n### Prerequisites\n\nFirst, make sure python is already installed on your system by opening the interactive environment by running on your terminal:\n \n```\npython\n```\n\nI've tested both Python 2.7 and 3.7, so I believe any version from 2.7 onwards should work.\nIf you don't have Python installed, please [download it from the official website](https://www.python.org/downloads/). \n\nAfter that, any terminal or equivalent with telnet and vim should be enough to run this correctly, but do let me know \nif you find any problems!\n\n### Installing\n\nSimply run:\n\n```\npip install orbi-dnsmasq\n```\n\nAnd then if your Orbi has [telnet already on](https://oldwiki.archive.openwrt.org/toh/netgear/telnet.console), just run it with:\n```\norbi-dnsmasq\n```\n\nAfter this, just enter a site which would usually end up filled with ads and see if the config worked. I usually test \nthis step out with [Speedtest by Ookla](https://www.speedtest.net/), but you can use whichever one you want. _Note: \nNot every ad will be blocked, youtube ads still seem to be showing up for example. Nevertheless, a lot of dangerous sites and ads won't\n be shown._\n\nAlso, **don't worry if you end up running this command twice**. I made sure it does not fail if the config was already in place.\n\n#### Auto turn on telnet before command, and turn it off after\n\nI don't like leaving my telnet port open when I'm not using it, so I built in feature with selenium to toggle this option \non before running configs on the Orbi, and turning it off afterwards. If you want to use this feature, you'll first need to \n[download one of the selenium webdrivers](https://selenium-python.readthedocs.io/installation.html#introduction).\nAny will do, just make sure you also have that browser installed on your system.\n\nAfter that, run:\n\n```\norbi-dnsmasq -t -w path/to/downloaded/webdriver\n```\n\nYou can avoid the `-w` flag if you put the downloaded webdriver in your PATH.\n\n## Possible things to add:\n\n- Read password from ENV var, don't ask it if already found.\n- Flag option to set username to connect with, use admin as default (is this even necessary?).\n- Create Telnet object with telnet_write methods, cleaning up the code.\n- Flag option to indicate how much to wait for web elements to appear, and to indicate polling rate.\n- Use polling rate and selenium with expected condition wait.\n- Remove selenium's send keys TODO and `keyboard` dependency when [this issue is fixed](https://github.com/w3c/webdriver/issues/385).\n- Unit testing? (does it even makes sense? All telnet communications would need to be mocked)\n\n## Acknowledgments\n\n- This project wouldn't have been possible without [hackingthenetgearorbi](https://hackingthenetgearorbi.wordpress.com/), \nso please show them some love!\n- Also check out [hackingthenetgearorbi creator's github](https://github.com/tumescentrubor/Orbi-s-Non-Sufficit). \nThey are currently doing some really cool stuff with persistent modifications on the Orbi!\n- Thanks [someonewhocares' Dan Pollock](https://someonewhocares.org/hosts/) for the magnificent hosts file. This project \nwouldn't have been able without it.\n- Thanks [Joel Barmettler for teaching me how to upload this to PyPi](https://medium.com/@joel.barmettler/how-to-upload-your-python-package-to-pypi-65edc5fe9c56)!\n- Thanks [PurpleBooth for the README template](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2)!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Diego-Zulu/orbi-dnsmasq/archive/v1.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Diego-Zulu/orbi-dnsmasq", "keywords": "orbi,dnsmasq", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "orbi-dnsmasq", "package_url": "https://pypi.org/project/orbi-dnsmasq/", "platform": "", "project_url": "https://pypi.org/project/orbi-dnsmasq/", "project_urls": {"Download": "https://github.com/Diego-Zulu/orbi-dnsmasq/archive/v1.1.0.tar.gz", "Homepage": "https://github.com/Diego-Zulu/orbi-dnsmasq"}, "release_url": "https://pypi.org/project/orbi-dnsmasq/1.1.0/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Use selenium and telnet to automate orbi router's dnsmasq", "version": "1.1.0"}, "last_serial": 6152303, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "3cda32fa0cd3b7b7ee943cb8ba617e9c", "sha256": "f928f678c2b5d5139b3ad74305877b861d2f31f576ad4eaee83b54d3a3c32636"}, "downloads": -1, "filename": "orbi-dnsmasq-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3cda32fa0cd3b7b7ee943cb8ba617e9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5574, "upload_time": "2019-11-17T23:34:34", "upload_time_iso_8601": "2019-11-17T23:34:34.521996Z", "url": "https://files.pythonhosted.org/packages/0a/2c/e2ac755fa33b5ca3c8ced6995c5e9568c0265dbba91d1e555a72c75acdaa/orbi-dnsmasq-1.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "3cda32fa0cd3b7b7ee943cb8ba617e9c", "sha256": "f928f678c2b5d5139b3ad74305877b861d2f31f576ad4eaee83b54d3a3c32636"}, "downloads": -1, "filename": "orbi-dnsmasq-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3cda32fa0cd3b7b7ee943cb8ba617e9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5574, "upload_time": "2019-11-17T23:34:34", "upload_time_iso_8601": "2019-11-17T23:34:34.521996Z", "url": "https://files.pythonhosted.org/packages/0a/2c/e2ac755fa33b5ca3c8ced6995c5e9568c0265dbba91d1e555a72c75acdaa/orbi-dnsmasq-1.1.0.tar.gz"}]}