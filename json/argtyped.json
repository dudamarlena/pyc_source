{"info": {"author": "Zecong Hu", "author_email": "huzecong@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: System :: Shells", "Topic :: Utilities", "Typing :: Typed"], "description": "# `argtyped`: Command Line Argument Parser, with Types\n\n[![Build Status](https://github.com/huzecong/argtyped/workflows/Build/badge.svg)](https://github.com/huzecong/argtyped/actions?query=workflow%3ABuild+branch%3Amaster)\n[![CodeCov](https://codecov.io/gh/huzecong/argtyped/branch/master/graph/badge.svg?token=ELHfYJ2Ydq)](https://codecov.io/gh/huzecong/argtyped)\n[![PyPI](https://badge.fury.io/py/argtyped.svg)](https://pypi.org/project/argtyped/)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/huzecong/argtyped/blob/master/LICENSE)\n\n`argtyped` is an command line argument parser with that relies on type annotations. It is built on\n[`argparse`](https://docs.python.org/3/library/argparse.html), the command line argument parser library built into\nPython. Compared with `argparse`, this library gives you:\n\n- More concise and intuitive syntax, less boilerplate code.\n- Type checking and IDE auto-completion for command line arguments.\n- A drop-in replacement for `argparse` in most cases.\n\n\n## Installation\n\nInstall stable release from [PyPI](https://pypi.org/project/argtyped/):\n```bash\npip install argtyped\n```\n\nOr, install the latest commit from GitHub:\n```bash\npip install -e git+https://github.com/huzecong/argtyped.git\n```\n\n## Usage\n\nWith `argtyped`, you can define command line arguments in a syntax similar to\n[`typing.NamedTuple`](https://docs.python.org/3/library/typing.html#typing.NamedTuple). The syntax is intuitive and can\nbe illustrated with an example:\n```python\nfrom typing import Optional\n\nfrom argtyped import Arguments, Choices, Switch\nfrom argtyped import Enum, auto\n\nclass LoggingLevels(Enum):\n    Debug = auto()\n    Info = auto()\n    Warning = auto()\n    Error = auto()\n    Critical = auto()\n\nclass MyArguments(Arguments):\n    model_name: str         # required argument of `str` type\n    hidden_size: int = 512  # `int` argument with default value of 512\n\n    activation: Choices['relu', 'tanh', 'sigmoid'] = 'relu'  # argument with limited choices\n    logging_level: LoggingLevels = LoggingLevels.Info        # using `Enum` class as choices\n\n    use_dropout: Switch = True  # switch argument, enable with \"--use-dropout\" and disable with \"--no-use-dropout\"\n    dropout_prob: Optional[float] = 0.5  # optional argument, \"--dropout-prob=none\" parses into `None`\n\nargs = Arguments()\n```\n\nThis is equivalent to the following code with Python built-in `argparse`:\n```python\nimport argparse\nfrom enum import Enum\n\nclass LoggingLevels(Enum):\n    Debug = \"debug\"\n    Info = \"info\"\n    Warning = \"warning\"\n    Error = \"error\"\n    Critical = \"critical\"\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"--model-name\", type=str, required=True)\nparser.add_argument(\"--hidden-size\", type=int, default=512)\n\nparser.add_argument(\"--activation\", choices=[\"relu\", \"tanh\", \"sigmoid\"], default=\"relu\")\nparser.add_argument(\"--logging-level\", choices=list(LoggingLevels), type=LoggingLevels, default=\"info\")\n\nparser.add_argument(\"--use-dropout\", action=\"store_true\", dest=\"use_dropout\", default=True)\nparser.add_argument(\"--no-use-dropout\", action=\"store_false\", dest=\"use_dropout\")\nparser.add_argument(\"--dropout-prob\", type=lambda s: None if s.lower() == 'none' else float(s), default=0.5)\n\nargs = parser.parse_args()\n```\n\nSave the code into a file named `main.py`. Suppose the following arguments are provided:\n```bash\npython main.py \\\n    --model-name LSTM \\\n    --activation sigmoid \\\n    --logging-level debug \\\n    --no-use-dropout \\\n    --dropout-prob none\n```\nThen the parsed arguments will be equivalent to the following structured returned by `argparse`:\n```python\nargparse.Namespace(\n    model_name=\"LSTM\", hidden_size=512, activation=\"sigmoid\", logging_level=\"debug\",\n    use_dropout=False, dropout_prob=None)\n```\n\nArguments can also be pretty-printed with `print(args.to_string())`, which gives:\n```\n<class '__main__.MyArguments'>\n\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 Arguments       \u2502 Values                           \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 model_name      \u2502 'LSTM'                           \u2551\n\u2551 hidden_size     \u2502 512                              \u2551\n\u2551 activation      \u2502 'sigmoid'                        \u2551\n\u2551 logging_level   \u2502 <MyLoggingLevels.Debug: 'debug'> \u2551\n\u2551 use_dropout     \u2502 False                            \u2551\n\u2551 dropout_prob    \u2502 None                             \u2551\n\u2551 label_smoothing \u2502 0.1                              \u2551\n\u2551 some_true_arg   \u2502 True                             \u2551\n\u2551 some_false_arg  \u2502 False                            \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n```\n\n## Reference\n\n### The `argtyped.Arguments` Class\n\nThe `argtyped.Arguments` class is main class of the package, from which you should derive your custom class that holds\narguments. Each argument takes the form of a class attribute, with its type annotation and an optional default value.\n\nWhen an instance of your custom class is initialized, the command line arguments are parsed from `sys.argv` into values\nwith your annotated types. You can also provide the list of strings to parse by passing them as the parameter.\n\nThe parsed arguments are stored in an object of your custom type. This gives you arguments that can be auto-completed\nby the IDE, and type-checked by a static type checker like [`mypy`](http://mypy-lang.org/).\n\nThe following example illustrates the keypoints:\n```python\nclass MyArgs(argtyped.Arguments):\n    # name: type [= default_val]\n    value: int = 0\n\nargs = MyArgs()                    # equivalent to `parser.parse_args()`\nargs = MyArgs([\"--value\", \"123\"])  # equivalent to `parser.parse_args([\"--value\", \"123\"])\nassert isinstance(args, MyArgs)\n```\n\n### Argument Types\n\nTo summarize, whatever works for `argparse` works here. The following types are supported:\n\n- Built-in types such as `int`, `float`, `str`.\n- `bool` type. Accepted values (case-insensitive) for `True` are: `y`, `yes`, `true`, `ok`; accepted values for `False`\n  are: `n`, `no`, `false`.\n- Choice types `Choices[...]`. A choice argument is essentially an `str` argument with limited choice of values. The\n  ellipses can be filled with a tuple of `str`s, or an expression that evaluates to a list of `str`s:\n  ```python\n  from argtyped import Arguments, Choices\n  from typing import List\n\n  def logging_levels() -> List[str]:\n      return [\"debug\", \"info\", \"warning\", \"error\"]\n\n  class MyArgs(Arguments):\n      foo: Choices[\"debug\", \"info\", \"warning\", \"error\"]  # 4 choices\n      bar: Choices[logging_levels()]                     # the same 4 choices\n\n  # argv: [\"--foo=debug\", \"--bar=info\"] => foo=\"debug\", bar=\"info\"\n  ```\n  This is equivalent to the `choices` keyword in `argparse.add_argument`.\n- Enum types derived from `enum.Enum`. It is recommended to use `argtyped.Enum` which uses the instance names as values:\n  ```python\n  from argtyped import Enum\n\n  class MyEnum(Enum):\n      Debug = auto()    # \"debug\"\n      Info = auto()     # \"info\"\n      Warning = auto()  # \"warning\"\n  ```\n- Switch types `Switch`. `Switch` arguments are like `bool` arguments, but they don't take values. Instead, a switch\n  argument `switch` requires `--switch` to enable and `--no-switch` to disable:\n  ```python\n  from argtyped import Arguments, Switch\n\n  class MyArgs(Arguments):\n      switch: Switch = True\n      bool_arg: bool = False\n\n  # argv: []                                 => flag=True, bool_arg=False\n  # argv: [\"--switch\", \"--bool-arg=false\"]   => flag=True, bool_arg=False\n  # argv: [\"--no-switch\", \"--bool-arg=true\"] => flag=False, bool_arg=True\n  # argv: [\"--switch=false\"]                 => WRONG\n  # argv: [\"--no-bool-arg\"]                  => WRONG\n  ```\n- Optional types `Optional[T]`, where `T` is any supported type (except choices or switch). An optional argument will be\n  filled with `None` if no value is provided. It could also be explicitly set to `None` by using `none` as value in the\n  command line:\n  ```python\n  from argtyped import Arguments\n  from typing import Optional\n\n  class MyArgs(Arguments):\n      opt_arg: Optional[int]  # implicitly defaults to `None`\n\n  # argv: []                 => opt_arg=None\n  # argv: [\"--opt-arg=1\"]    => opt_arg=1\n  # argv: [\"--opt-arg=none\"] => opt_arg=None\n  ```\n- Any other type that takes a single `str` as `__init__` parameters. It is also theoretically possible to use a function\n  that takes an `str` as input, but it's not recommended as it's not type-safe.\n\n\n## Caveats\n\n- Advanced `argparse` features such as subparsers, groups, argument lists, and custom actions are not supported.\n- Using switch arguments may result in name clashes: if a switch argument has name `arg`, there can be no argument with\n  the name `no_arg`.\n- `Optional` cannot be used with `Choices`. You can add `\"none\"` as a valid choice to mimic a similar behavior.\n- `Optional[str]` would parse a value of `\"none\"` into `None`.\n\n## Under the Hood\n\nThis is what happens under the hood:\n1. When an instance of `argtyped.Arguments` (or any subclass) is initialized, type annotations and class-level\n   attributes (i.e., the default values) are collected to form argument declarations.\n2. After verifying the validity of declared arguments, an instance of `argparse.ArgumentParser` is created and arguments\n   are registered with the parser.\n3. The parser's `parse_args` method is invoked with either `sys.argv` or strings provided as parameters, returning\n   parsed arguments.\n4. The parsed arguments are assigned to `self` (the instance of `Arguments` subclass being initialized).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/huzecong/argtyped", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "argtyped", "package_url": "https://pypi.org/project/argtyped/", "platform": "any", "project_url": "https://pypi.org/project/argtyped/", "project_urls": {"Homepage": "https://github.com/huzecong/argtyped"}, "release_url": "https://pypi.org/project/argtyped/0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Command line arguments, with types", "version": "0.1"}, "last_serial": 6643308, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ead601d16eb1af56df7796f128fd4fd0", "sha256": "39f01d515879ba3bfe852ebe5df1220cee1ff524bce6645a8b06c85c436b501c"}, "downloads": -1, "filename": "argtyped-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ead601d16eb1af56df7796f128fd4fd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10778, "upload_time": "2020-02-17T00:57:18", "upload_time_iso_8601": "2020-02-17T00:57:18.594577Z", "url": "https://files.pythonhosted.org/packages/f1/bb/36e1d57d8b3822c05255a01694593848f7ee179b077b08ba6b973fee3215/argtyped-0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "fd99944c479d3c0d53a47f571431140d", "sha256": "7385edeb83eaf0dc998e2bb9ce30666dd0b6e9cd6d14d6170fdf6bb851f131a8"}, "downloads": -1, "filename": "argtyped-0.1.tar.gz", "has_sig": false, "md5_digest": "fd99944c479d3c0d53a47f571431140d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10223, "upload_time": "2020-02-17T00:57:20", "upload_time_iso_8601": "2020-02-17T00:57:20.426917Z", "url": "https://files.pythonhosted.org/packages/5c/0a/0387915f091eab3669bb0ef9468e146e86d0f938d34f0e7ddc29d6aa97d5/argtyped-0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "ead601d16eb1af56df7796f128fd4fd0", "sha256": "39f01d515879ba3bfe852ebe5df1220cee1ff524bce6645a8b06c85c436b501c"}, "downloads": -1, "filename": "argtyped-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ead601d16eb1af56df7796f128fd4fd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10778, "upload_time": "2020-02-17T00:57:18", "upload_time_iso_8601": "2020-02-17T00:57:18.594577Z", "url": "https://files.pythonhosted.org/packages/f1/bb/36e1d57d8b3822c05255a01694593848f7ee179b077b08ba6b973fee3215/argtyped-0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "fd99944c479d3c0d53a47f571431140d", "sha256": "7385edeb83eaf0dc998e2bb9ce30666dd0b6e9cd6d14d6170fdf6bb851f131a8"}, "downloads": -1, "filename": "argtyped-0.1.tar.gz", "has_sig": false, "md5_digest": "fd99944c479d3c0d53a47f571431140d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10223, "upload_time": "2020-02-17T00:57:20", "upload_time_iso_8601": "2020-02-17T00:57:20.426917Z", "url": "https://files.pythonhosted.org/packages/5c/0a/0387915f091eab3669bb0ef9468e146e86d0f938d34f0e7ddc29d6aa97d5/argtyped-0.1.tar.gz"}]}