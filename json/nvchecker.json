{"info": {"author": "lilydjwg", "author_email": "lilydjwg@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development", "Topic :: System :: Archiving :: Packaging", "Topic :: System :: Software Distribution", "Topic :: Utilities"], "description": "**nvchecker** (short for *new version checker*) is for checking if a new version of some software has been released.\n\n.. image:: https://travis-ci.org/lilydjwg/nvchecker.svg\n   :alt: Build Status\n   :target: https://travis-ci.org/lilydjwg/nvchecker\n.. image:: https://badge.fury.io/py/nvchecker.svg\n   :alt: PyPI version\n   :target: https://badge.fury.io/py/nvchecker\n\n|\n\n.. image:: https://repology.org/badge/vertical-allrepos/nvchecker.svg\n   :alt: Packaging status\n   :target: https://repology.org/metapackage/nvchecker/versions\n\nContents\n========\n\n* `Dependency <#dependency>`_\n* `Install and Run <#install-and-run>`_\n\n  * `JSON logging <#json-logging>`_\n\n* `Version Record Files <#version-record-files>`_\n\n  * `The nvtake Command <#the-nvtake-command>`_\n\n* `Version Source Files <#version-source-files>`_\n\n  * `Configuration Section <#configuration-section>`_\n  * `Global Optons <#global-options>`_\n  * `List Optons <#list-options>`_\n  * `Search in a Webpage <#search-in-a-webpage>`_\n  * `Find with a Command <#find-with-a-command>`_\n  * `Check AUR <#check-aur>`_\n  * `Check GitHub <#check-github>`_\n  * `Check BitBucket <#check-bitbucket>`_\n  * `Check GitLab <#check-gitlab>`_\n  * `Check PyPI <#check-pypi>`_\n  * `Check RubyGems <#check-rubygems>`_\n  * `Check NPM Registry <#check-npm-registry>`_\n  * `Check Hackage <#check-hackage>`_\n  * `Check CPAN <#check-cpan>`_\n  * `Check Packagist <#check-packagist>`_\n  * `Check Local Pacman Database <#check-local-pacman-database>`_\n  * `Check Arch Linux official packages <#check-arch-linux-official-packages>`_\n  * `Check Debian Linux official packages <#check-debian-linux-official-packages>`_\n  * `Check Ubuntu Linux official packages <#check-ubuntu-linux-official-packages>`_\n  * `Check Repology (repology.org) <#check-repology>`_\n  * `Check Anitya (release-monitoring.org) <#check-anitya>`_\n  * `Check Android SDK <#check-android-sdk>`_\n  * `Manually updating <#manually-updating>`_\n  * `Version Control System (VCS) (git, hg, svn, bzr) <#version-control-system-vcs-git-hg-svn-bzr>`_\n  * `Other <#other>`_\n\n* `Bugs <#bugs>`_\n\nDependency\n==========\n- Python 3.5+\n- Python library: structlog\n- One of these Python library combinations (ordered by preference):\n\n  * tornado + pycurl\n  * aiohttp\n  * tornado\n\n- All commands used in your version source files\n\nInstall and Run\n===============\nTo install::\n\n  pip3 install nvchecker\n\nTo use the latest code, you can also clone this repository and run::\n\n  python3 setup.py install\n\nTo see available options::\n\n  nvchecker --help\n\nRun with one or more software version source files::\n\n  nvchecker source_file\n\nYou normally will like to specify some \"version record files\"; see below.\n\nJSON logging\n------------\nWith ``--logger=json`` or ``--logger=both``, you can get a structured logging\nfor programmatically consuming. You can use ``--json-log-fd=FD`` to specify the\nfile descriptor to send logs to (take care to do line buffering). The logging\nlevel option (``-l`` or ``--logging``) doesn't take effect with this.\n\nThe JSON log is one JSON string per line. The following documented events and\nfields are stable, undocumented ones may change without notice.\n\nevent=updated\n  An update is detected. Fields ``name``, ``old_version`` and ``version`` are\n  available. ``old_version`` maybe ``null``.\n\nevent=up-to-date\n  There is no update. Fields ``name`` and ``version`` are available.\n\nevent=no-result\n  No version is detected. There may be an error. Fields ``name`` is available.\n\nlevel=error\n  There is an error. Fields ``name`` and ``exc_info`` may be available to give\n  further information.\n\nVersion Record Files\n====================\nVersion record files record which version of the software you know or is available. They are simple key-value pairs of ``(name, version)`` separated by a space::\n\n  fcitx 4.2.7\n  google-chrome 27.0.1453.93-200836\n  vim 7.3.1024\n\nSay you've got a version record file called ``old_ver.txt`` which records all your watched software and their versions, as well as some configuration entries. To update it using ``nvchecker``::\n\n  nvchecker source.ini\n\nSee what are updated with ``nvcmp``::\n\n  nvcmp source.ini\n\nManually compare the two files for updates (assuming they are sorted alphabetically; files generated by ``nvchecker`` are already sorted)::\n\n  comm -13 old_ver.txt new_ver.txt\n  # or say that in English:\n  comm -13 old_ver.txt new_ver.txt | awk '{print $1 \" has updated to version \" $2 \".\"}'\n  # show both old and new versions\n  join old_ver.txt new_ver.txt | awk '$2 != $3'\n\nThe ``nvtake`` Command\n----------------------\nThis command helps to manage version record files. It reads both old and new version record files, and a list of names given on the commandline. It then update the versions of those names in the old version record file.\n\nThis helps when you have known (and processed) some of the updated software, but not all. You can tell nvchecker that via this command instead of editing the file by hand.\n\nThis command will help most if you specify where you version record files are in your config file. See below for how to use a config file.\n\nVersion Source Files\n====================\nThe software version source files are in ini format. *Section names* is the name of the software. Following fields are used to tell nvchecker how to determine the current version of that software.\n\nSee ``sample_source.ini`` for an example.\n\nConfiguration Section\n---------------------\nA special section named ``__config__`` is special, it provides some configuration options.\n\nRelative path are relative to the source files, and ``~`` and environmental variables are expanded.\n\nCurrently supported options are:\n\noldver\n  Specify a version record file containing the old version info.\n\nnewver\n  Specify a version record file to store the new version info.\n\nproxy\n  The HTTP proxy to use. The format is ``proto://host:port``, e.g. ``http://localhost:8087``.\n\nmax_concurrent\n  Max number of concurrent jobs. Default: 20.\n\nkeyfile\n  Specify an ini config file containing key (token) information. This file should contain a ``keys`` section, mapping key names to key values. See specific source for the key name(s) to use.\n\nGlobal Options\n--------------\nThe following options apply to all check sources.\n\nprefix\n  Strip the prefix string if the version string starts with it. Otherwise the\n  version string is returned as-is.\n\nfrom_pattern, to_pattern\n  Both are Python-compatible regular expressions. If ``from_pattern`` is found\n  in the version string, it will be replaced with ``to_pattern``.\n\nmissing_ok\n  Suppress warnings and errors if a version checking module finds nothing.\n  Currently only ``regex`` supports it.\n\nIf both ``prefix`` and ``from_pattern``/``to_pattern`` are used,\n``from_pattern``/``to_pattern`` are ignored. If you want to strip the prefix\nand then do something special, just use ``from_pattern```/``to_pattern``. For\nexample, the transformation of ``v1_1_0`` => ``1.1.0`` can be achieved with\n``from_pattern = v(\\d+)_(\\d+)_(\\d+)`` and ``to_pattern = \\1.\\2.\\3``.\n\nList Options\n------------\n\nThe following options apply to sources that return a list. See individual\nsource sections to determine whether they are supported.\n\ninclude_regex\n  Only consider version strings that match the given regex. The whole string\n  should match the regex. Be sure to use ``.*`` when you mean it!\n\nexclude_regex\n  Don't consider version strings that match the given regex. The whole string\n  should match the regex. Be sure to use ``.*`` when you mean it! This option\n  has higher precedence that ``include_regex``; that is, if matched by this\n  one, it's excluded even it's also matched by ``include_regex``.\n\nsort_version_key\n  Sort the version string using this key function. Choose between\n  ``parse_version`` and ``vercmp``. Default value is ``parse_version``.\n  ``parse_version`` use ``pkg_resources.parse_version``. ``vercmp`` use\n  ``pyalpm.vercmp``.\n\nignored\n  Version strings that are explicitly ignored, separated by whitespace. This\n  can be useful to avoid some known mis-named versions, so newer ones won't be\n  \"overridden\" by the old broken ones.\n\nSearch in a Webpage\n-------------------\nSearch through a specific webpage for the version string. This type of version finding has these fields:\n\nurl\n  The URL of the webpage to fetch.\n\nencoding\n  (*Optional*) The character encoding of the webpage, if ``latin1`` is not appropriate.\n\nregex\n  A regular expression used to find the version string.\n\n  It can have zero or one capture group. The capture group or the whole match is the version string.\n\n  When multiple version strings are found, the maximum of those is chosen.\n\nproxy\n  The HTTP proxy to use. The format is ``host:port``, e.g. ``localhost:8087``.\n\nuser_agent\n  The ``User-Agent`` header value to use. Use something more like a tool (e.g. ``curl/7.40.0``) in Europe or the real web page won't get through because cookie policies (SourceForge has this issue).\n\nsort_version_key\n  Sort the version string using this key function. Choose between ``parse_version`` and \n  ``vercmp``. Default value is ``parse_version``. ``parse_version`` use \n  ``pkg_resources.parse_version``. ``vercmp`` use ``pyalpm.vercmp``.\n\nThis source supports `list options`_.\n\nFind with a Command\n-------------------\nUse a shell command line to get the version. The output is striped first, so trailing newlines do not bother.\n\ncmd\n  The command line to use. This will run with the system's standard shell (i.e. ``/bin/sh``).\n\nCheck AUR\n---------\nCheck `Arch User Repository <https://aur.archlinux.org/>`_ for updates.\n\naur\n  The package name in AUR. If empty, use the name of software (the *section name*).\n\nstrip-release\n  Strip the release part.\n\nuse_last_modified\n  Append last modified time to the version.\n\nCheck GitHub\n------------\nCheck `GitHub <https://github.com/>`_ for updates. The version returned is in\ndate format ``%Y%m%d.%H%M%S``, e.g. ``20130701.012212``, unless ``use_latest_release``\nor ``use_max_tag`` is used. See below.\n\ngithub\n  The github repository, with author, e.g. ``lilydjwg/nvchecker``.\n\nbranch\n  Which branch to track? Default: ``master``.\n\npath\n  Only commits containing this file path will be returned.\n\nuse_latest_release\n  Set this to ``true`` to check for the latest release on GitHub.\n  \n  GitHub releases are not the same with git tags. You'll see big version names \n  and descriptions in the release page for such releases, e.g.\n  `zfsonlinux/zfs's <https://github.com/zfsonlinux/zfs/releases>`_, and those\n  small ones like `nvchecker's <https://github.com/lilydjwg/nvchecker/releases>`_\n  are only git tags that should use ``use_max_tag`` below.\n  \n  Will return the release name instead of date.\n\nuse_max_tag\n  Set this to ``true`` to check for the max tag on GitHub. Unlike\n  ``use_latest_release``, this option includes both annotated tags and\n  lightweight ones, and return the largest one sorted by the\n  ``sort_version_key`` option. Will return the tag name instead of date.\n\nmax_page\n  How many pages do we search for the max tag? Default is 1. This works when\n  ``use_max_tag`` is set.\n\n  However, with current API in use, GitHub seems to always return all data in\n  one page, making this option obsolete.\n\nproxy\n  The HTTP proxy to use. The format is ``host:port``, e.g. ``localhost:8087``.\n\ninclude_tags_pattern, ignored_tags, sort_version_key\n  Deprecated. Use `list options`_ instead.\n\nAn environment variable ``NVCHECKER_GITHUB_TOKEN`` or a key named ``github``\ncan be set to a GitHub OAuth token in order to request more frequently than\nanonymously.\n\nThis source supports `list options`_ when ``use_max_tag`` is set.\n\nCheck BitBucket\n---------------\nCheck `BitBucket <https://bitbucket.org/>`_ for updates. The version returned\nis in date format ``%Y%m%d``, e.g. ``20130701``, unless ``use_max_tag`` is used. See below.\n\nbitbucket\n  The bitbucket repository, with author, e.g. ``lilydjwg/dotvim``.\n\nbranch\n  Which branch to track? Default is the repository's default.\n\nuse_max_tag\n  Set this to ``true`` to check for the max tag on BitBucket. Will return the biggest one\n  sorted by ``pkg_resources.parse_version``. Will return the tag name instead of date.\n\nignored_tags, sort_version_key\n  Deprecated. Use `list options`_ instead.\n\nmax_page\n  How many pages do we search for the max tag? Default is 3. This works when\n  ``use_max_tag`` is set.\n\nThis source supports `list options`_ when ``use_max_tag`` is set.\n\nCheck GitLab\n-------------\nCheck `GitLab <https://gitlab.com/>`_ for updates. The version returned is in date format ``%Y%m%d``, e.g. ``20130701``,\nunless ``use_max_tag`` is used. See below.\n\ngitlab\n  The gitlab repository, with author, e.g. ``Deepin/deepin-music``.\n\nbranch\n  Which branch to track? Default: ``master``.\n\nuse_max_tag\n  Set this to ``true`` to check for the max tag on GitLab. Will return the biggest one\n  sorted by ``pkg_resources.parse_version``. Will return the tag name instead of date.\n\nhost\n  Hostname for self-hosted GitLab instance.\n\ntoken\n  GitLab authorization token used to call the API.\n  \nignored_tags, sort_version_key\n  Deprecated. Use `list options`_ instead.\n\nTo set an authorization token, you can set:\n\n- a key named ``gitlab_{host}`` in the keyfile (where ``host`` is formed the\n  same as the environment variable, but all lowercased).\n- an environment variable ``NVCHECKER_GITLAB_TOKEN_{host}`` must provide that\n  token. The ``host`` part is the uppercased version of the ``host`` setting,\n  with dots (``.``) and slashes (``/``) replaced by underscores (``_``), e.g.\n  ``NVCHECKER_GITLAB_TOKEN_GITLAB_COM``.\n- the token option\n\nThis source supports `list options`_ when ``use_max_tag`` is set.\n\nCheck PyPI\n----------\nCheck `PyPI <https://pypi.python.org/>`_ for updates.\n\npypi\n  The name used on PyPI, e.g. ``PySide``.\n\nuse_pre_release\n  Whether to accept pre release. Default is false.\n\nCheck RubyGems\n--------------\nCheck `RubyGems <https://rubygems.org/>`_ for updates.\n\ngems\n  The name used on RubyGems, e.g. ``sass``.\n\nCheck NPM Registry\n------------------\nCheck `NPM Registry <https://registry.npmjs.org/>`_ for updates.\n\nnpm\n  The name used on NPM Registry, e.g. ``coffee-script``.\n\nCheck Hackage\n-------------\nCheck `Hackage <https://hackage.haskell.org/>`_ for updates.\n\nhackage\n  The name used on Hackage, e.g. ``pandoc``.\n\nCheck CPAN\n--------------\nCheck `MetaCPAN <https://metacpan.org/>`_ for updates.\n\ncpan\n  The name used on CPAN, e.g. ``YAML``.\n\nproxy\n  The HTTP proxy to use. The format is ``host:port``, e.g. ``localhost:8087``.\n\nCheck Packagist\n---------------\nCheck `Packagist <https://packagist.org/>`_ for updates.\n\npackagist\n  The name used on Packagist, e.g. ``monolog/monolog``.\n\nCheck Local Pacman Database\n---------------------------\nThis is used when you run ``nvchecker`` on an Arch Linux system and the program always keeps up with a package in your configured repositories for `Pacman`_.\n\npacman\n  The package name to reference to.\n\nstrip-release\n  Strip the release part.\n\nCheck Arch Linux official packages\n----------------------------------\nThis enables you to track the update of `Arch Linux official packages <https://www.archlinux.org/packages/>`_, without needing of pacman and an updated local Pacman databases.\n\narchpkg\n  Name of the Arch Linux package.\n\nstrip-release\n  Strip the release part, only return part before ``-``.\n\nprovided\n  Instead of the package version, return the version this package provides. Its value is what the package provides, and ``strip-release`` takes effect too. This is best used with libraries.\n\nCheck Debian Linux official packages\n------------------------------------\nThis enables you to track the update of `Debian Linux official packages <https://packages.debian.org>`_, without needing of apt and an updated local APT database.\n\ndebianpkg\n  Name of the Debian Linux source package.\n\nsuite\n  Name of the Debian release (jessie, wheezy, etc, defaults to sid)\n\nstrip-release\n  Strip the release part.\n\nCheck Ubuntu Linux official packages\n------------------------------------\nThis enables you to track the update of `Ubuntu Linux official packages <https://packages.ubuntu.com/>`_, without needing of apt and an updated local APT database.\n\nubuntupkg\n  Name of the Ubuntu Linux source package.\n\nsuite\n  Name of the Ubuntu release (xenial, zesty, etc, defaults to None, which means no limit on suite)\n\nstrip-release\n  Strip the release part.\n\nCheck Repology\n--------------\nThis enables you to track updates from `Repology <https://repology.org/>`_ (repology.org).\n\nrepology\n  Name of the ``project`` to check.\n\nrepo\n  Check the version in this repo. This field is required.\n\nCheck Anitya\n------------\nThis enables you to track updates from `Anitya <https://release-monitoring.org/>`_ (release-monitoring.org).\n\nanitya\n  ``distro/package``, where ``distro`` can be a lot of things like \"fedora\", \"arch linux\", \"gentoo\", etc. ``package`` is the package name of the chosen distribution.\n\nCheck Android SDK\n-----------------\nThis enables you to track updates of Android SDK packages listed in ``sdkmanager --list``.\n\nandroid_sdk\n  The package path prefix. This value is matched against the ``path`` attribute in all <remotePackage> nodes in an SDK manifest XML. The first match is used for version comparisons.\n\nrepo\n  Should be one of ``addon`` or ``package``. Packages in ``addon2-1.xml`` use ``addon`` and packages in ``repository2-1.xml`` use ``package``.\n\nManually updating\n-----------------\nThis enables you to manually specify the version (maybe because you want to approve each release before it gets to the script).\n\nmanual\n  The version string.\n\nVersion Control System (VCS) (git, hg, svn, bzr)\n------------------------------------------------\nCheck a VCS repo for new commits. The version returned is currently not related to the version of the software and will increase whenever the referred VCS branch changes. This is mainly for Arch Linux.\n\nvcs\n  The url of the remote VCS repo, using the same syntax with a VCS url in PKGBUILD (`Pacman`_'s build script). The first VCS url found in the source array of the PKGBUILD will be used if this is left blank. (Note: for a blank ``vcs`` setting to work correctly, the PKGBUILD has to be in a directory with the name of the software under the path where nvchecker is run. Also, all the commands, if any, needed when sourcing the PKGBUILD need to be installed).\n\nuse_max_tag\n  Set this to ``true`` to check for the max tag. Currently only supported for ``git``.\n  This option returns the biggest tag sorted by ``pkg_resources.parse_version``.\n\nignored_tags\n  Ignore certain tags while computing the max tag. Tags are separate by\n  whitespaces. This option must be used together with ``use_max_tag``. This can\n  be useful to avoid some known badly versioned tags, so the newer tags won't\n  be \"overridden\" by the old broken ones.\n\nThis source supports `list options`_ when ``use_max_tag`` is set.\n\nOther\n-----\nMore to come. Send me a patch or pull request if you can't wait and have written one yourself :-)\n\nBugs\n====\n* Finish writing results even on Ctrl-C or other interruption.\n\n.. _Pacman: https://wiki.archlinux.org/index.php/Pacman\n.. _list options: #list-options", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lilydjwg/nvchecker", "keywords": "new version build check", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nvchecker", "package_url": "https://pypi.org/project/nvchecker/", "platform": "any", "project_url": "https://pypi.org/project/nvchecker/", "project_urls": {"Homepage": "https://github.com/lilydjwg/nvchecker"}, "release_url": "https://pypi.org/project/nvchecker/1.6.post1/", "requires_dist": null, "requires_python": "", "summary": "New version checker for software", "version": "1.6.post1"}, "last_serial": 7007701, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "fa054b17fa48e9e5b0b6c5d0a51ccae8", "sha256": "4790140cd6eb6270daa95a3448b842a7b8794e393d8fbfbd6e55e6a94c394b54"}, "downloads": -1, "filename": "nvchecker-0.4.2.tar.gz", "has_sig": true, "md5_digest": "fa054b17fa48e9e5b0b6c5d0a51ccae8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18367, "upload_time": "2016-02-29T10:11:01", "upload_time_iso_8601": "2016-02-29T10:11:01.562265Z", "url": "https://files.pythonhosted.org/packages/90/cb/790dfbad781cdd26ef7f7428180cb2951b841c6e8026f7927156c2605dfe/nvchecker-0.4.2.tar.gz"}], "0.4.2": [], "0.5": [{"comment_text": "", "digests": {"md5": "dfea1989cfca64f3cf9092e8a129e7f2", "sha256": "73aeb65c301cb6cd99fafcba98c06d7f75bad27881bd62792eaa65afd618b072"}, "downloads": -1, "filename": "nvchecker-0.5-py3.6.egg", "has_sig": false, "md5_digest": "dfea1989cfca64f3cf9092e8a129e7f2", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 54124, "upload_time": "2017-07-11T06:16:25", "upload_time_iso_8601": "2017-07-11T06:16:25.094262Z", "url": "https://files.pythonhosted.org/packages/cb/2d/72828aff20f5266118e8549c0d0e1c283ffb276cf932e07918c1cfb879d9/nvchecker-0.5-py3.6.egg"}, {"comment_text": "", "digests": {"md5": "654a232d8d1e111881eb1c1a12ca6e95", "sha256": "180e72b63a8a53be91cdd5e323623f649fcb1c3083935863aeb4a5d71d0574a5"}, "downloads": -1, "filename": "nvchecker-0.5.tar.gz", "has_sig": false, "md5_digest": "654a232d8d1e111881eb1c1a12ca6e95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23626, "upload_time": "2017-07-11T06:16:16", "upload_time_iso_8601": "2017-07-11T06:16:16.091735Z", "url": "https://files.pythonhosted.org/packages/d1/00/a92ff6fdff8c7f13f200abe9cca8ddfbd0ccf1d1bbe9cfd1f312da51c429/nvchecker-0.5.tar.gz"}], "1.0": [{"comment_text": "", "digests": {"md5": "cfe40be45ca74fdb117c265a52acc101", "sha256": "bd50ec601dd3334e68cae4776e609ef328e7a61eb8f865652112df90937a94c0"}, "downloads": -1, "filename": "nvchecker-1.0-py3.6.egg", "has_sig": false, "md5_digest": "cfe40be45ca74fdb117c265a52acc101", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 59143, "upload_time": "2017-12-08T07:32:05", "upload_time_iso_8601": "2017-12-08T07:32:05.056348Z", "url": "https://files.pythonhosted.org/packages/20/19/1d33e8eb85ccbc5e0399c3aa1513ddc0bdea0090bd52ac40f9f228da3520/nvchecker-1.0-py3.6.egg"}], "1.1": [{"comment_text": "", "digests": {"md5": "d2f687c88923760c11c15c9d332f278b", "sha256": "71547176df0d7aff8180b34cbe2985759688410889127e76d926176d847369da"}, "downloads": -1, "filename": "nvchecker-1.1.tar.gz", "has_sig": true, "md5_digest": "d2f687c88923760c11c15c9d332f278b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30051, "upload_time": "2018-06-22T07:50:17", "upload_time_iso_8601": "2018-06-22T07:50:17.444930Z", "url": "https://files.pythonhosted.org/packages/0d/6c/03a5aa22bbf91212315e524e22aa4aac7d6cb1d9be9d105f87aa108644ad/nvchecker-1.1.tar.gz"}], "1.2": [{"comment_text": "", "digests": {"md5": "1661974ea9f2d5763905032f51ac1919", "sha256": "dc102e0bb759b6e4bbfe9183c3058a96882b9aad018bef4997a90ef2d5f54c46"}, "downloads": -1, "filename": "nvchecker-1.2.tar.gz", "has_sig": true, "md5_digest": "1661974ea9f2d5763905032f51ac1919", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30877, "upload_time": "2018-11-19T06:32:37", "upload_time_iso_8601": "2018-11-19T06:32:37.645949Z", "url": "https://files.pythonhosted.org/packages/1d/54/3df01d8c670251b06a9b197629c8a3824a36f9a227f238aaed112c10ca1b/nvchecker-1.2.tar.gz"}], "1.2.1": [{"comment_text": "", "digests": {"md5": "0a0df00ebf8f29e8c79e8f716df68b84", "sha256": "b7d66d4718ba983e13f0cd75a501c277aff6d9891cce84a60a554958ea084fe1"}, "downloads": -1, "filename": "nvchecker-1.2.1.tar.gz", "has_sig": true, "md5_digest": "0a0df00ebf8f29e8c79e8f716df68b84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24070, "upload_time": "2018-11-19T06:38:18", "upload_time_iso_8601": "2018-11-19T06:38:18.273862Z", "url": "https://files.pythonhosted.org/packages/94/d8/15e37e125c2c5b4d726af043f40f35baa7885a85f7d483f43fe7719231eb/nvchecker-1.2.1.tar.gz"}], "1.2.2": [{"comment_text": "", "digests": {"md5": "d8bcd136ece8a8592c3acf0eed44091c", "sha256": "d9f4d4fd156041ec8f40b71fcbe0c87e5442be8eba9d3e46273a974b80d5f693"}, "downloads": -1, "filename": "nvchecker-1.2.2.tar.gz", "has_sig": true, "md5_digest": "d8bcd136ece8a8592c3acf0eed44091c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30930, "upload_time": "2018-11-19T06:44:27", "upload_time_iso_8601": "2018-11-19T06:44:27.777677Z", "url": "https://files.pythonhosted.org/packages/b3/f2/d02e63c70af2af70def640260a6935b7712f0322d794979917bddda2574e/nvchecker-1.2.2.tar.gz"}], "1.2.3": [{"comment_text": "", "digests": {"md5": "5ab112f9f02901a2df0153214e129926", "sha256": "90321223edadb43f57aac90238f1172e579beb3c079af73fbea789092b55f038"}, "downloads": -1, "filename": "nvchecker-1.2.3.tar.gz", "has_sig": false, "md5_digest": "5ab112f9f02901a2df0153214e129926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30935, "upload_time": "2018-11-19T06:46:18", "upload_time_iso_8601": "2018-11-19T06:46:18.136910Z", "url": "https://files.pythonhosted.org/packages/19/84/a28ced3d0c6ad7951bc8b9df8861b331e9e0acb75a8092a023aa8b1b82af/nvchecker-1.2.3.tar.gz"}], "1.2.4": [{"comment_text": "", "digests": {"md5": "08866ed534e5ca7866da97c5f0574038", "sha256": "5e656311dfe25e80542f018dbe4135d0075b061c0a3b50982fdab0490d0dd4a9"}, "downloads": -1, "filename": "nvchecker-1.2.4.tar.gz", "has_sig": false, "md5_digest": "08866ed534e5ca7866da97c5f0574038", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30856, "upload_time": "2018-11-19T07:01:01", "upload_time_iso_8601": "2018-11-19T07:01:01.953119Z", "url": "https://files.pythonhosted.org/packages/de/3e/535a833342bc8b27221ac1d0dc47b4fe49075df403a657a97796a7bc082e/nvchecker-1.2.4.tar.gz"}], "1.2.5": [{"comment_text": "", "digests": {"md5": "b3ec353ec3552b068771994a4ad263cc", "sha256": "e13aabfc89546e7758a682b6c7d385923723418207824ab5020a67e3778fcb1f"}, "downloads": -1, "filename": "nvchecker-1.2.5.tar.gz", "has_sig": true, "md5_digest": "b3ec353ec3552b068771994a4ad263cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31175, "upload_time": "2018-11-19T07:03:35", "upload_time_iso_8601": "2018-11-19T07:03:35.799778Z", "url": "https://files.pythonhosted.org/packages/3d/f5/3985de995805004f8949f69da20de1baf9334986da08e1fd0156154c0c3c/nvchecker-1.2.5.tar.gz"}], "1.2.6": [{"comment_text": "", "digests": {"md5": "a43135cb53e4a5884cb4244be497b8cf", "sha256": "78559dbf816121b2c7212ffc42f727be57829c25d6e917d151463550b92f141a"}, "downloads": -1, "filename": "nvchecker-1.2.6.tar.gz", "has_sig": true, "md5_digest": "a43135cb53e4a5884cb4244be497b8cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31173, "upload_time": "2018-11-19T07:04:32", "upload_time_iso_8601": "2018-11-19T07:04:32.633262Z", "url": "https://files.pythonhosted.org/packages/ef/dc/763701be6445be9a500960b5b7c7ef626aaa8c547ade3fde113b342474c3/nvchecker-1.2.6.tar.gz"}], "1.2.7": [{"comment_text": "", "digests": {"md5": "ba715c7094e67d8812d2d81382ed574b", "sha256": "8024906a7f0da76785549841200c1e5f0a58b057e564927a0de0e43639170ca7"}, "downloads": -1, "filename": "nvchecker-1.2.7.tar.gz", "has_sig": true, "md5_digest": "ba715c7094e67d8812d2d81382ed574b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30998, "upload_time": "2018-11-19T07:07:03", "upload_time_iso_8601": "2018-11-19T07:07:03.192775Z", "url": "https://files.pythonhosted.org/packages/df/90/febd1dd9667031ad7a8031c50516e430212804fdc99a76fd738a580601f0/nvchecker-1.2.7.tar.gz"}], "1.3": [{"comment_text": "", "digests": {"md5": "f101f2a7128f2f084cedf51fd687ecf6", "sha256": "120c41405d6a1c2fc70f11051017b0fe6261cd7095ed2f9239ad84c20a60ec51"}, "downloads": -1, "filename": "nvchecker-1.3.tar.gz", "has_sig": true, "md5_digest": "f101f2a7128f2f084cedf51fd687ecf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37655, "upload_time": "2018-12-16T05:31:37", "upload_time_iso_8601": "2018-12-16T05:31:37.025162Z", "url": "https://files.pythonhosted.org/packages/d6/2d/f1cdb547a78e41dc8ee1dd6fb5f68870c2f87238a678c3b6c604075a8679/nvchecker-1.3.tar.gz"}], "1.4": [{"comment_text": "", "digests": {"md5": "ae316cf49ee62905cc3274722214cee1", "sha256": "9260f83b68d7d5f235b5fd7f44a1a0dd862cd0e4216e546af38a50573cf6cd35"}, "downloads": -1, "filename": "nvchecker-1.4.tar.gz", "has_sig": true, "md5_digest": "ae316cf49ee62905cc3274722214cee1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39179, "upload_time": "2019-03-16T13:31:18", "upload_time_iso_8601": "2019-03-16T13:31:18.562650Z", "url": "https://files.pythonhosted.org/packages/1c/d0/1fe0cf1b4d004fe644b8cc3e80fa3cbde5695ce5adf560506d5b7ba4487d/nvchecker-1.4.tar.gz"}], "1.4.2": [{"comment_text": "", "digests": {"md5": "328824ab1b505c373085dfa72920106d", "sha256": "ff98cc745f27d170fb9bb39b6a0d89a696ebe6646ef429a867b5f4fecbe697f7"}, "downloads": -1, "filename": "nvchecker-1.4.2.tar.gz", "has_sig": true, "md5_digest": "328824ab1b505c373085dfa72920106d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39207, "upload_time": "2019-03-22T13:04:36", "upload_time_iso_8601": "2019-03-22T13:04:36.988250Z", "url": "https://files.pythonhosted.org/packages/5f/e8/7abbe0a51bdb3fe755fdb7090a5b5c9e8517600f284c01bc069679749355/nvchecker-1.4.2.tar.gz"}], "1.4.3": [{"comment_text": "", "digests": {"md5": "4f05644192f3cfd5d87f13b2ff4e5f77", "sha256": "7bd9b9bb5c024ceda3b9c8c563b31d7662561135074079d9bec96a822707646c"}, "downloads": -1, "filename": "nvchecker-1.4.3.tar.gz", "has_sig": true, "md5_digest": "4f05644192f3cfd5d87f13b2ff4e5f77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39480, "upload_time": "2019-03-24T10:27:19", "upload_time_iso_8601": "2019-03-24T10:27:19.110478Z", "url": "https://files.pythonhosted.org/packages/ce/35/93374f27ac65f4135ecbb0eac532048dec09ec4c61991db8af73ced6a868/nvchecker-1.4.3.tar.gz"}], "1.4.4": [{"comment_text": "", "digests": {"md5": "167ebd2e6a433891f29a7619805163d3", "sha256": "6276ed2a897a30ccd71bfd7cf9e6b7842f37f3d5a86d7a70fe46f437c62b1875"}, "downloads": -1, "filename": "nvchecker-1.4.4.tar.gz", "has_sig": true, "md5_digest": "167ebd2e6a433891f29a7619805163d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40062, "upload_time": "2019-07-07T09:44:57", "upload_time_iso_8601": "2019-07-07T09:44:57.205116Z", "url": "https://files.pythonhosted.org/packages/25/8a/af4917feb7e50db2c66bc0dffb14a78d96f076af07551485833f399a76c6/nvchecker-1.4.4.tar.gz"}], "1.5": [{"comment_text": "", "digests": {"md5": "2c13877800c1c5c2b1ca56f67572a21a", "sha256": "0973f7c3ea5ad65fb19837e8915882a9f2c2f21f5c2589005478697391fea2fd"}, "downloads": -1, "filename": "nvchecker-1.5.tar.gz", "has_sig": true, "md5_digest": "2c13877800c1c5c2b1ca56f67572a21a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41430, "upload_time": "2019-11-04T09:48:39", "upload_time_iso_8601": "2019-11-04T09:48:39.467164Z", "url": "https://files.pythonhosted.org/packages/76/22/4019f93fcd295894e28907d7e488ec6b805f2cf676778422cd3d0873e3d2/nvchecker-1.5.tar.gz"}], "1.6": [{"comment_text": "", "digests": {"md5": "d42e94b4843b02351180e579306c050a", "sha256": "f4fbcdecc3a4cadc77d6720495d859e3774f4f4ad238b6e2807123cb688d55b7"}, "downloads": -1, "filename": "nvchecker-1.6.tar.gz", "has_sig": true, "md5_digest": "d42e94b4843b02351180e579306c050a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45076, "upload_time": "2020-04-09T14:00:28", "upload_time_iso_8601": "2020-04-09T14:00:28.454979Z", "url": "https://files.pythonhosted.org/packages/b5/f5/b54ac4df0bf30ebd6077de39418316d34b3692901ef5af078fe3a272dfd1/nvchecker-1.6.tar.gz"}], "1.6.post1": [{"comment_text": "", "digests": {"md5": "b22b29f048189f61e8eea828dc597023", "sha256": "7d2e889a4ba2eeb75dd6649ed5e99f8cbfed45b2194657e8f46c978ec58d4175"}, "downloads": -1, "filename": "nvchecker-1.6.post1.tar.gz", "has_sig": true, "md5_digest": "b22b29f048189f61e8eea828dc597023", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44134, "upload_time": "2020-04-13T04:44:07", "upload_time_iso_8601": "2020-04-13T04:44:07.703372Z", "url": "https://files.pythonhosted.org/packages/52/6b/9d9cf1ae74f257dce9464042c6f1b39e53329a823841cabd19e0da005b20/nvchecker-1.6.post1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "b22b29f048189f61e8eea828dc597023", "sha256": "7d2e889a4ba2eeb75dd6649ed5e99f8cbfed45b2194657e8f46c978ec58d4175"}, "downloads": -1, "filename": "nvchecker-1.6.post1.tar.gz", "has_sig": true, "md5_digest": "b22b29f048189f61e8eea828dc597023", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44134, "upload_time": "2020-04-13T04:44:07", "upload_time_iso_8601": "2020-04-13T04:44:07.703372Z", "url": "https://files.pythonhosted.org/packages/52/6b/9d9cf1ae74f257dce9464042c6f1b39e53329a823841cabd19e0da005b20/nvchecker-1.6.post1.tar.gz"}]}