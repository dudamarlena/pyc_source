{"info": {"author": "Darcy Jones", "author_email": "darcy.a.jones@postgrad.curtin.edu.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<img src=\"https://raw.githubusercontent.com/ccdmb/catastrophy/master/catastrophy_hero.png\" width=200 />\n\n# CATAStrophy\n\n[![PyPI version](https://badge.fury.io/py/catastrophy.svg)](https://badge.fury.io/py/catastrophy)\n[![Anaconda-Server Badge](https://anaconda.org/darcyabjones/catastrophy/badges/version.svg)](https://anaconda.org/darcyabjones/catastrophy)\n[![Build Status](https://travis-ci.org/ccdmb/catastrophy.svg?branch=master)](https://travis-ci.org/ccdmb/catastrophy)\n\n\nCATAStrophy is a classification method for describing lifestyles/trophic characteristics\nof filamentous plant pathogens using carbohydrate-active enzymes (CAZymes).\nThe name CATAStrophy is a backronym portmanteau hybrid where \"CATAS\" means\nCAZyme Assisted Training And Sorting.\n\nCATAStrophy takes HMMER3 files from searches against the [dbCAN](http://bcb.unl.edu/dbCAN2/) CAZyme database\nas input and returns a pseudo-probabilities called the relative centroid distance (RCD) of trophic class memberships for each file.\n\nTo train these models, we performed principal component analysis (PCA) on the frequencies of CAZymes for a set of curated proteomes with literature support for their trophic lifestyles.\nFor each class in our classification system, we find the center/geometric mean of the class in the first 16 principal components.\n\nNew proteomes are classified by transforming the CAZyme frequencies using the same PCA loadings as in the training set.\nWe then find the closest class center in PCA space, and set that RCD score to 1.\nThen for each of the other classes we find the distance between the new proteome and the class center divided (i.e. relative to) by the distance to the closest class center.\nIf a new proteome is equidistant between two class centroids and they are closer than any other class, then both RCD scores will be one, so the RCD method is a _kind_ of multi-label classifier.\nThis is useful when evaluating your organism, because it might have characteristics of multiple classes (or be so dissimilar to any class that the distance is meaningless).\n\n\n## Installing\n\nCATAStrophy is a python program which can be used as a python module or via a command-line interface.\nIt can be installed from PyPI <https://pypi.org/project/catastrophy/> using [pip](https://pip.pypa.io/en/stable/), or from anaconda <https://anaconda.org/darcyabjones/catastrophy> using [conda](https://docs.conda.io/en/latest/).\n\nUsers that are less familiar with python and pip might like to read our [INSTALL.md](INSTALL.md) document, which explains things in more detail, including where this will be installed and using virtual environments.\nFor details on installing and using conda see their [getting-started guide](https://docs.conda.io/projects/conda/en/latest/user-guide/overview.html).\n\nCATAStrophy is tested to work with python 3.6+, and it depends on [numpy](http://www.numpy.org/) and [BioPython](https://biopython.org/).\n\nTo install CATAStrophy and dependencies with pip:\n\n```bash\n# Windows users may need to subtitute \"Python\" instead of \"python3\"\npython3 -m pip install --user catastrophy\n```\n\nTo install CATAStrophy and dependencies using conda:\n\n```bash\nconda install -c darcyabjones catastrophy\n```\n\n## Using CATAStrophy\n\nTo run CATAStrophy you need to supply the input files and where to put the output.\nCatastrophy uses [HMMER3](http://hmmer.org/) `hmmscan` searches against dbCAN as input.\nEither the plain text (stdout) and \"domain table\" (`--domtblout`) can be used.\n\nThe easiest way to get a HMMER3 plain text file is to annotate your proteome using\nthe dbCAN online tool at <http://bcb.unl.edu/dbCAN2/blast.php> (make sure the HMMER tool is selected to run), and\nsave the HMMER3 raw text (Select the HMMER tab, then \"Download Raw HMMER output\") results locally.\n\n> **WARNING**: Before you run any dbCAN searches, please [read the section below on database versions](#database-versions).\n\n\nAssuming that you have this file locally you can run CATAStrophy like so:\n\n```bash\ncatastrophy -f hmmer -o my_catastrophy_results.csv my_dbcan_results.txt\n```\n\nThe output will be a tab-delimited file (which you can open in excel) with\nthe first row containing column headers and subsequent rows containing a\nlabel and the pseudo-probabilities of membership to each trophic class.\nThe `-f/--format` flag specified the format of the input file and defaults to `hmmer`.\n\n\nMultiple input files can be provided using spaces to separate them:\n\n```bash\ncatastrophy -i dbcan_1.txt dbcan_2.txt -o my_catastrophy_results.csv\n```\n\nNote that standard bash \"globbing\" patterns expand into a space delimited array,\nso you can easily use `*` or subshells if you like (eg. `$(find . -type f -name *.txt)` etc).\n\n\n### Database versions\n\nCATAStrophy models are specific to the different versions of [dbCAN](http://bcb.unl.edu/dbCAN2/).\nCAZyme family frequencies are at the core of the CATAStrophy method, so adding, removing, or changing the database HMMs will necessarily affect the results.\nCATAStrophy will attempt to check for mismatched model versions and alert you, but could potentially give inaccurate results if a mismatch isn't detected.\n\n**It is very important that you match the database version with the CATAStrophy model.**\n\nTo specify the version of the model to use, include the `-m/--model`\nflag with one of the valid options (`v4`, `v5`, `v6`, `v7`, or `v8`;see `catastrophy -h` for the available model versions in your installation).\n\n```bash\ncatastrophy --model v7 -o my_catastrophy_results.csv my_dbcan_results.txt\n```\n\nThe model versions just reflect the version of dbCAN that the model was trained against (i.e. dbCAN 7 would use CATAStrophy model v7).\n\n>> NOTE:\n>> The dbCAN2 web-server will always search against the latest version of dbCAN.\n>> To find the latest version number, go to <http://bcb.unl.edu/dbCAN2/download/Databases/> and find the file with the highest number with the pattern `dbCAN-HMMdb-V8.txt`.\n>> If we haven't yet trained a model for the latest version of dbCAN please contact us.\n>> Otherwise you may need to [run HMMER yourself](#running-dbcan-locally).\n\nThe CATAStrophy paper used version 6 of dbCAN, you may get slightly different results with different database versions.\n\n\n### Output\n\nOutput will be as a tab-separated values file, with the columns for the filename, nomenclature, nomenclature class, and the RCD value.\nEach possible combination of label, nomenclature and class is listed in a [long format](https://en.wikipedia.org/wiki/Wide_and_narrow_data).\n\nFor example, part of the table might look like this:\n\n```bash\ncatastrophy infile1.txt infile2.txt\n```\n\n| label       | nomenclature | class | value |\n| :---        | ---:         | ---:  | ---:  |\n| infile1.txt | nomenclature1 | saprotroph | 0.9 |\n| infile2.txt | nomenclature1 | monomertroph1 | 0.2 |\n\n\n### Labels\n\nBy default the filenames (including directories and extensions) are used as the label in the output, but you can explicitly specify\na label using the `-l/--label` flag. The output from the command above will\nhave two lines, one containing the column headers and the other containing\nresults for the file `my_dbcan_results.txt` which will have the label\n\"my_dbcan_results.txt\".\nIf you don't specify a label for stdin input the label will be \"<stdin>\".\n\nTo give it a nicer label you can run this.\n\n```bash\ncatastrophy -i my_dbcan_results.txt -l prettier_label -o my_catastrophy_results.csv\n```\n\nWhich would give the output line for `my_dbcan_results.txt` the label \"prettier_label\".\nLabels cannot contain spaces unless you explicitly escape them (quotes will not work).\n\nTo label multiple input files you can again supply the label flag with the space separated labels.\n\n```bash\ncatastrophy -l label1 label2 -o my_catastrophy_results.csv dbcan_1.txt dbcan_2.txt\n```\n\nNote that if you do use the label flag, the number of labels **must** be the same as the number of input files.\n\n\nIf you provide the `--label` as the last argument before the input positional arguments (`infiles`) you may need to use `--`\nto tell when you're done and that infiles should start.\nThis is because both `--label` and infiles can take multiple arguments.\n\n```bash\ncatastrophy -l mylabel1 mylabel2 -o results.csv infile1.txt infile2.txt  # Fine\ncatastrophy -o results.csv -l mylabel1 mylabel2 infile1.txt infile2.txt  # Dangerous\n\n# Do this instead to tell where labels stops and infiles starts.\ncatastrophy -o results.csv -l mylabel1 mylabel2 -- infile1.txt infile2.txt\n```\n\n\n## Running dbCAN locally\n\nIf you have lots of proteomes to run or CATAStrophy hasn't been trained on the latest version of dbCAN yet, then you probably don't want to use the web interface.\nIn that case you can run the dbCAN pipeline locally using [HMMER](http://hmmer.org/).\n\nThere is a pipeline available at [https://github.com/ccdmb/catastrophy-pipeline](https://github.com/ccdmb/catastrophy-pipeline) that can automate much of the following steps for you.\n\nThe following steps assume that you've installed [HMMER](http://hmmer.org/) and are using a unix-like OS.\n\n#### Step 1. Download dbCAN.\n\nWe first need to download the dbCAN database (HMMs) to search against.\nYou will need to make sure that you download a version of dbCAN that it compatible with CATAStrophy.\nTo get a list of databases versions that is supported, you can use the `--help` flag and look for the `--nomenclature` help section.\n\n```bash\ncatastrophy --help\n```\n\nOnce you've identified the version you want to use, download the database from <http://bcb.unl.edu/dbCAN2/download/Databases/>.\nAlternatively you can use the bash commands below to download it, setting the value of `DBCAN_VERSION` to the desired version (NB. the full url **must** match one of the file names in <http://bcb.unl.edu/dbCAN2/download/Databases/>).\n\n\n```bash\nDBCAN_VERSION=\"V7\"\n\nmkdir -p ./data\nwget -qc -P ./data \"http://bcb.unl.edu/dbCAN2/download/Databases/dbCAN-HMMdb-${DBCAN_VERSION}.txt\"\n```\n\n\n#### Step 2. Prepare the dbCAN HMM database\n\nNow we can convert the file containing HMM definitions into a HMMER database.\n\n```bash\nhmmpress ./data/dbCAN-HMMdb-V7.txt\n```\n\nThis will create several files at the same location as the `.txt` file, so it's good to do this\ninside a separate folder (as we've done here).\n\n\n#### Step 3. Search your proteomes against the dbCAN HMMs.\n\nNow we can run HMMER `hmmscan` to find matches to the dbCAN HMMs.\nFor demonstration, we'll save both the domain table and plain text outputs.\n\n```bash\nhmmscan --domtblout my_fasta_hmmer.csv ./data/dbCAN-HMMdb-V7.txt my_fasta.fasta > my_fasta_hmmer.txt\n```\n\nThe domain table is now in the file `my_fasta_hmmer.csv` and the plain hmmer\ntext output is in `my_fasta_hmmer.txt`.\nEither one of these files is appropriate for use with CATAStrophy, (just\nremember to specify the `--format` flag).\n\n\n#### Step 4. Classify your proteomes using CATAStrophy.\n\nNow we can finally find out what CATAStrophy thinks our organism is!\n\nTo use the files created in step 3, you can run either of the following commands.\nRemember to match the version of dbCAN with the model version in catastrophy.\n\n```bash\ncatastrophy --model v7 --format domtab -o my_catastrophy_results.csv my_fasta_hmmer.csv\n\n# or\ncatastrophy --model v7 --format hmmer -o my_catastrophy_results.csv my_fasta_hmmer.txt\n```\n\n\n## Command line arguments\n\nOnly the input files are required and are provided as positional arguments.\nOther optional parameters are below:\n\n| Parameter | default | description |\n| :---      | :---    | :---        |\n| `-h`/`--help` | flag | Show help text and exit. |\n| `--version` | flag | Show program version information and exit. |\n| `-f`/`--format` | \"hmmer_text\" | The format that the input is provided in. All input files must be in the same format. HMMER raw (hmmer_text, default) and domain table (hmmer_domtab) formatted files are accepted. Files processed by the dbCAN formatter `hmmscan-parser.sh` are also accepted using the `dbcan` option. |\n| `-l`/`--label` | filenames | Label to give the prediction for the input file(s). Specify more than one label by separating them with a space. The number of labels should be the same as the number of input files.  By default, the filenames are used as labels. |\n| `-o`/`--outfile` | stdout | File path to write tab delimited output to. |\n| `-c`/`--counts` | Not written | Write the CAZyme counts to this tab delimited file. |\n| `-p`/`--pca` | Not written | Write the PCA results and best scoring RCD classes to this tab separated file. This will include the training data results in the table for comparison. Useful for plotting your data.\n| `-m`/`--model` | latest | The version of the model (matching the dbCAN database version) to use. The latest version is used by default. See `catastrophy -h` for list of valid options. |\n\n\nBasic usage:\n\n```bash\n# To stdout aka \"-o -\"\ncatastrophy infile1.txt infile2.txt > results.csv\n\n# To specify an output filename\ncatastrophy -o results.csv infile1.txt infile2.txt\n\n# To take input from stdin use a \"-\"\ncat infile1.txt | catastrophy - > results.csv\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ccdmb/catastrophy", "keywords": "fungi machine-learning bioinformatics", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "catastrophy", "package_url": "https://pypi.org/project/catastrophy/", "platform": "", "project_url": "https://pypi.org/project/catastrophy/", "project_urls": {"Homepage": "https://github.com/ccdmb/catastrophy"}, "release_url": "https://pypi.org/project/catastrophy/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "A fungal trophy classifier based on CAZymes", "version": "0.0.3"}, "last_serial": 6450236, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "05f6efda277e24fcd9d7a159e911f3c8", "sha256": "2673a306c416066de49a57c72afeba2a9f924917b5c811e1ac8b721efc7d8ab6"}, "downloads": -1, "filename": "catastrophy-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "05f6efda277e24fcd9d7a159e911f3c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 214960, "upload_time": "2019-04-25T04:06:47", "upload_time_iso_8601": "2019-04-25T04:06:47.021301Z", "url": "https://files.pythonhosted.org/packages/35/b6/6f0e72d28235f71b68f628fdf86e09de1aa303e57dc2acdc0d76c70b247c/catastrophy-0.0.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a2ae29ef9d7c76119683862e2d7e6051", "sha256": "820ba8b60ef6027f11da6c63fe94ca54c7a2b5fbed8c7be1fe9a897086798353"}, "downloads": -1, "filename": "catastrophy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a2ae29ef9d7c76119683862e2d7e6051", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23876, "upload_time": "2019-04-25T04:06:49", "upload_time_iso_8601": "2019-04-25T04:06:49.739770Z", "url": "https://files.pythonhosted.org/packages/16/5e/d5990373a52e715e8c758bbd3d00a2accebf9d05c82db85702691374fd56/catastrophy-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "30e8862fe1848b7c2a37d92d8f30ddf2", "sha256": "17d61daea6063bc21e8483031f74f7fda289118bf39a35d4f51ac6d328b5a320"}, "downloads": -1, "filename": "catastrophy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "30e8862fe1848b7c2a37d92d8f30ddf2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29251, "upload_time": "2019-12-10T06:54:51", "upload_time_iso_8601": "2019-12-10T06:54:51.266087Z", "url": "https://files.pythonhosted.org/packages/5b/a6/6e165ddb2583619c5a30cb20333084f458e4d67e41b4d95688ae5c5f4ff1/catastrophy-0.0.2.tar.gz"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "536901f8cc5a838e9252b457f176a14d", "sha256": "37251a8279d54b546f0076802a96ae4fba712f93922e96771f5fa373e1d38f48"}, "downloads": -1, "filename": "catastrophy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "536901f8cc5a838e9252b457f176a14d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31788, "upload_time": "2020-01-14T08:19:16", "upload_time_iso_8601": "2020-01-14T08:19:16.812080Z", "url": "https://files.pythonhosted.org/packages/cd/cd/7669533ddc578f51aea695386d0507bb8249378e7467640bfd7a1ec854aa/catastrophy-0.0.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "536901f8cc5a838e9252b457f176a14d", "sha256": "37251a8279d54b546f0076802a96ae4fba712f93922e96771f5fa373e1d38f48"}, "downloads": -1, "filename": "catastrophy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "536901f8cc5a838e9252b457f176a14d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31788, "upload_time": "2020-01-14T08:19:16", "upload_time_iso_8601": "2020-01-14T08:19:16.812080Z", "url": "https://files.pythonhosted.org/packages/cd/cd/7669533ddc578f51aea695386d0507bb8249378e7467640bfd7a1ec854aa/catastrophy-0.0.3.tar.gz"}]}