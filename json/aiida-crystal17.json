{"info": {"author": "Chris Sewell", "author_email": "chrisj_sewell@hotmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Physics"], "description": "[![Build Status](https://travis-ci.org/chrisjsewell/aiida-crystal17.svg?branch=master)](https://travis-ci.org/chrisjsewell/aiida-crystal17)\n[![Coverage Status](https://coveralls.io/repos/github/chrisjsewell/aiida-crystal17/badge.svg?branch=master)](https://coveralls.io/github/chrisjsewell/aiida-crystal17?branch=master)\n[![Docs status](https://readthedocs.org/projects/aiida-crystal17/badge)](http://aiida-crystal17.readthedocs.io/) \n[![PyPI](https://img.shields.io/pypi/v/aiida-crystal17.svg)](https://pypi.python.org/pypi/aiida-crystal17/)\n\n# aiida-crystal17\n\nAiiDA plugin for running the [CRYSTAL17](http://www.crystal.unito.it/) code. \nThe code is principally tested against CRYSTAL17, \nbut the output parsing has also been tested against CRYSTAL14.\n\n**Documentation**: https://readthedocs.org/projects/aiida-crystal17\n\n## Installation\n\nTo install from pypi:\n\n```shell\n>> pip install aiida-crystal17\n```\n\nTo install the development version:\n\n```shell\n>> git clone https://github.com/chrisjsewell/aiida-crystal17 .\n>> cd aiida-crystal17\n>> pip install -e .  # also installs aiida, if missing (but not postgres)\n>> #pip install -e .[pre-commit,testing] # install extras for more features\n>> verdi quicksetup  # set up a new profile\n>> verdi calculation plugins  # should now show the calclulation plugins (with prefix crystal17.)\n```\n\n## Usage\n\n### Basic Calculation\n\nThe `crystal17.basic` is the simplest calculation plugin. \nIt takes a pre-written .d12 file as input \nand (optionally) a .gui file with geometry, for .d12 inputs containing the `EXTERNAL` keyword.\nAssuming AiiDA is configured and your database is running:\n\n```shell\n>> verdi daemon start         # make sure the daemon is running\n>> cd examples\n>> verdi run test_submit_basic.py       # submit test calculation\nsubmitted calculation; calc=Calculation(PK=5)\n>> verdi calculation list -a  # check status of calculation\n  PK  Creation    State           Sched. state    Computer    Type\n----  ----------  --------------  -------------  ----------  ---------------------------\n5     1m ago      WITHSCHEDULER                  localhost   crystal17.basic\n>> verdi calculation list -a  # after a few seconds\n  PK  Creation    State           Sched. state    Computer    Type\n----  ----------  --------------  -------------  ----------  ---------------------------\n5     1m ago      FINISHED        DONE           localhost   crystal17.basic\n```\n\nOnce the calculation has run, it will be linked to the input nodes and a number of output nodes:\n\n```shell\n>> verdi calculation show 5\n-----------  ---------------------------------------------------\ntype         CryBasicCalculation\npk           5\nuuid         3d9f804b-84db-443a-b6f8-69c15d96d244\nlabel        aiida_crystal17 test\ndescription  Test job submission with the aiida_crystal17 plugin\nctime        2018-08-27 15:23:38.670705+00:00\nmtime        2018-08-27 15:24:26.516127+00:00\ncomputer     [2] localhost\ncode         runcry17\n-----------  ---------------------------------------------------\n##### INPUTS:\nLink label       PK    Type\n---------------  ----  --------------\ninput_external   3     SinglefileData\ninput_file       4     SinglefileData\n##### OUTPUTS:\nLink label           PK  Type\n-----------------  ----  -------------\nremote_folder      6     RemoteData\nretrieved          7     FolderData\noutput_parameters  8     ParameterData\noutput_settings    9     StructSettingsData\noutput_structure   10    StructureData\n##### LOGS:\nThere are 1 log messages for this calculation\nRun 'verdi calculation logshow 5' to see them\n```\n\nThe outputs represent:\n\n-  ``remote_folder`` provides a symbolic link to the work directory\n   where the computation was run.\n-  ``retrieved`` stores a folder containing the full main output of\n   ``runcry17`` (as main.out)\n-  ``output_parameters`` stores a dictionary of key parameters in the\n   database, for later querying.\n-  ``output_structure`` stores the final geometry from the calculation\n-  ``output_settings`` stores additional information on the structure,\n    such as the symmetry operations.\n\nFor compatibility, parameters are named with the same convention as\n``aiida-quantumespresso``:\n\n.. code:: shell\n\n    >> verdi data parameter show 8\n    {\n      \"calculation_spin\": false, \n      \"calculation_type\": \"restricted closed shell\", \n      \"ejplugins_version\": \"0.9.7\", \n      \"energy\": -7380.22160519032, \n      \"energy_units\": \"eV\", \n      \"errors\": [], \n      \"mulliken_charges\": [\n        0.776999999999999, \n        -0.776999999999999\n      ], \n      \"mulliken_electrons\": [\n        11.223, \n        8.777\n      ], \n      \"number_of_assymetric\": 2, \n      \"number_of_atoms\": 2, \n      \"parser_class\": \"CryBasicParser\", \n      \"parser_version\": \"0.3.0a0\", \n      \"parser_warnings\": [\n        \"no initial structure available, creating new kinds for atoms\"\n      ], \n      \"scf_iterations\": 7, \n      \"volume\": 18.65461525, \n      \"wall_time_seconds\": 5, \n      \"warnings\": []\n    }\n\nYou can view the structure settings content by\n(use ``-c`` to view the symmetry operations):\n\n```shell\n>> verdi data cry17-settings show 9\ncentring_code: 1\ncrystal_type:  1\nnum_symops:    48\nspace_group:   1\n```\n\nThe final structure can be directly viewed by a number of different\nprograms (assuming the executables are available):\n\n```shell\n>> verdi data structure show --format xcrysden 10\n```\n\n### Main Calculation\n\nThe ``crystal17.main`` plugin is designed with a more programmatic\ninput interface. It creates the input ``.d12`` and ``.gui`` files,\nfrom a set of AiiDa nodes.\n\n```shell\n>> verdi daemon start         # make sure the daemon is running\n>> cd examples\n>> verdi run test_submit_main.py       # submit test calculation\nsubmitted calculation; calc=Calculation(PK=1)\n>> verdi calculation list -a  # check status of calculation\nPK  Creation    State           Sched. state    Computer       Type\n----  ----------  --------------  -------------  --------------  -----------------\n1     1m ago      WITHSCHEDULER   RUNNING        localhost-test  crystal17.main\n>> verdi calculation list -a  # after completion (~30 minutes if using runcry17)\nPK  Creation    State           Sched. state    Computer       Type\n----  ----------  --------------  -------------  --------------  -----------------\n1     4m ago      FINISHED        DONE           localhost-test  crystal17.main\n```\n\nOnce the calculation has run, it will be linked to the input nodes and a\nnumber of output nodes:\n\n```shell\nverdi calculation show 1\n-----------  ---------------------------------------------------\ntype         CryMainCalculation\npk           1\nuuid         3d9f804b-84db-443a-b6f8-69c15d96d244\nlabel        aiida_crystal17 test\ndescription  Test job submission with the aiida_crystal17 plugin\nctime        2018-08-27 15:23:38.670705+00:00\nmtime        2018-08-27 15:24:26.516127+00:00\ncomputer     [1] localhost-test\ncode         runcry17\n-----------  ---------------------------------------------------\n##### INPUTS:\nLink label      PK  Type\n------------  ----  -------------\nparameters    4     ParameterData\nsettings      5     StructSettingsData\nbasis_Ni      2     BasisSetData\nbasis_O       3     BasisSetData\nstructure     6     StructureData\n##### OUTPUTS:\nLink label           PK  Type\n-----------------  ----  -------------\nremote_folder      7     RemoteData\nretrieved          8     FolderData\noutput_parameters  9     ParameterData\noutput_structure   10    StructureData\n##### LOGS:\nThere are 1 log messages for this calculation\nRun 'verdi calculation logshow 1' to see them\n```\n\nThe inputs represent:\n\n-  `parameters` is a dictionary of (structure independent) data,\n    used to create the main.d12 file.\n-  `structure` stores the initial atomic configuration for the calculation.\n-  `settings` stores additional data related to the initial atomic\n    configuration, such as symmetry operations and initial spin.\n-  `basis_` store the basis set for each element.\n\n\n## Tests\n\nThe following will discover and run all unit test:\n\n```shell\n>> pip install -e .[testing]\n>> reentry scan -r aiida\n>> pytest -v\n```\n\nTo omit tests which call `runcry17`:\n\n```shell\n>> pytest -v -m \"not process_execution\"\n```\n\nor alternatively to call the `mock_runcry17` executable, \nfirst set the global environmental variable:\n\n```shell\n>> export MOCK_EXECUTABLES=true\n```\n\n## Development and Testing Notes\n\nThe original plugin template was created from the \n[aiida-plugin-cutter\n](https://github.com/aiidateam/aiida-plugin-cutter/tree/e614256377a4ac0c03f0ffca1dfe7bd9bb618983).\n\n### Coding Style Requirements\n\nThe code style is tested using [prospector](https://prospector.readthedocs.io/en/master/),\nwith the configuration set in `.prospector.yaml`, and [yapf](https://github.com/google/yapf).\n\nInstalling with `aiida-crystal17[pre-commit]` makes the [pre-commit](https://pre-commit.com/)\npackage available, which will ensure these tests are passed by reformatting the code \nand testing for lint errors before submitting a commit.\nIt can be setup by:\n\n```shell\n>> cd aiida-crystal17\n>> pre-commit install\n```\n\nOptionally you can run `yapf` and `prospector` separately:\n\n```shell\n>> yapf -r -i .  # recusivel find and format files in-place\n>> prospector \n```\n\nEditors like PyCharm also have automatic code reformat utilities, which should adhere to this standard.\n\n### Testing against mock CRYSTAL17 executables\n\nBecause CRYSTAL17 is a licensed software, it is not possible to source a copy of the executable on Travis CI.\nTherefore, a mock executable (`mock_runcry17`) has been created for testing purposes (which also speeds up test runs). \n\nThis executable computes the md5 hash of the supplied input file and tries to match it against a dictionary of \nprecomputed hashes. If found, the executable will write the matching output (from `test/output_files`) to stdout.\n\nTo use this mock executable when running tests, set the global variable `MOCK_EXECUTABLES=true`.\n\n### Setting up CRYSTAL17 locally\n\nTo set up local version of CRYSTAL17 on a mac (after downloading a copy from the distributor), I had to:\n\n1. Remove the quarantine from the executable permissions:\n\n    ```shell\n    xattr -c crystal \n    xattr -c properties\n    ```\n\n2. Create versions of the lapack/blas libraries in the expected folders:\n\n    ```shell\n    sudo port install lapack\n    sudo cp /opt/local/lib/lapack/liblapack.3.dylib /usr/local/opt/lapack/lib/liblapack.3.dylib\n    sudo cp /opt/local/lib/lapack/libblas.3.dylib /usr/local/opt/lapack/lib/libblas.3.dylib\n    ```\n\n3. Define environmental variables in `~/.bashrc`, as detailed in `cry17_scripts/cry17.bashrc`\n4. Copy or symlink the `cry17_scripts/runcry17` script into `/usr/local/bin/`\n\n## License\n\nMIT\n\n## Contact\n\nchrisj_sewell@hotmail.com\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chrisjsewell/aiida-crystal17", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aiida-crystal17", "package_url": "https://pypi.org/project/aiida-crystal17/", "platform": "", "project_url": "https://pypi.org/project/aiida-crystal17/", "project_urls": {"Homepage": "https://github.com/chrisjsewell/aiida-crystal17"}, "release_url": "https://pypi.org/project/aiida-crystal17/0.4.0/", "requires_dist": ["aiida-core (==0.12.2)", "ejplugins (>=0.9.7)", "packaging (==19.0)", "spglib (==1.10.3.65)", "ase (==3.12.0)", "sphinx (>=1.6) ; extra == 'docs'", "pre-commit (==1.10.5) ; extra == 'pre-commit'", "yapf (==0.22.0) ; extra == 'pre-commit'", "prospector (==1.1.2) ; extra == 'pre-commit'", "pylint (==1.8.4) ; extra == 'pre-commit'", "mock (==2.0.0) ; extra == 'testing'", "pgtest (==1.1.0) ; extra == 'testing'", "sqlalchemy-diff (==0.1.3) ; extra == 'testing'", "pytest (==3.6.3) ; extra == 'testing'", "wheel (>=0.31) ; extra == 'testing'", "coverage ; extra == 'testing'", "pytest-cov ; extra == 'testing'", "pytest-timeout ; extra == 'testing'", "jsonextended ; extra == 'testing'"], "requires_python": "", "summary": "AiiDA plugin for running the CRYSTAL17 code", "version": "0.4.0"}, "last_serial": 5996084, "releases": {"0.10.0b5": [{"comment_text": "", "digests": {"md5": "7ddde77f1ce669c2746395ed101dd600", "sha256": "5d50941d106834dfacafc3e28d54363c548a4006ceb3439e30f7514416a5063f"}, "downloads": -1, "filename": "aiida_crystal17-0.10.0b5-py3-none-any.whl", "has_sig": false, "md5_digest": "7ddde77f1ce669c2746395ed101dd600", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1625846, "upload_time": "2019-10-18T15:01:12", "upload_time_iso_8601": "2019-10-18T15:01:12.666800Z", "url": "https://files.pythonhosted.org/packages/66/fd/1c12b2c465d7a367028039669e0106506197c67958f4b4e6158dea44fe92/aiida_crystal17-0.10.0b5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "c93004a42a3b1033b15daa856561936d", "sha256": "764b3be1f6fdadf9ef633bbee4ff98c8a6847bff3c914605578295ec1da2a6a5"}, "downloads": -1, "filename": "aiida-crystal17-0.10.0b5.tar.gz", "has_sig": false, "md5_digest": "c93004a42a3b1033b15daa856561936d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1459550, "upload_time": "2019-10-18T15:01:14", "upload_time_iso_8601": "2019-10-18T15:01:14.831638Z", "url": "https://files.pythonhosted.org/packages/74/f9/e2074493d4d1b530d5ebb92779258865c88e4e60a69eafa01e1f4d4ec494/aiida-crystal17-0.10.0b5.tar.gz"}], "0.3.0a1": [{"comment_text": "", "digests": {"md5": "2506579510f176d60d4f69b0ce25125c", "sha256": "b3795f8ac0cee889b0fb13b41873971011aa4442230cdcdaf8e4826c631b1a1e"}, "downloads": -1, "filename": "aiida_crystal17-0.3.0a1-py2-none-any.whl", "has_sig": false, "md5_digest": "2506579510f176d60d4f69b0ce25125c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 221716, "upload_time": "2018-09-14T21:31:54", "upload_time_iso_8601": "2018-09-14T21:31:54.262860Z", "url": "https://files.pythonhosted.org/packages/25/60/e4f0a61497729226076a48c1a5984800afa30aff2cd5ea4d5912b0515479/aiida_crystal17-0.3.0a1-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8e5a998f854daacc647c2ff3fbb02d86", "sha256": "f6497d619452dc7c501824e5cef231eed9fcbdc28eb3c9c8774a97c6481cd88e"}, "downloads": -1, "filename": "aiida-crystal17-0.3.0a1.tar.gz", "has_sig": false, "md5_digest": "8e5a998f854daacc647c2ff3fbb02d86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64952, "upload_time": "2018-09-14T21:31:56", "upload_time_iso_8601": "2018-09-14T21:31:56.299689Z", "url": "https://files.pythonhosted.org/packages/d1/65/f92d534c3347035075ae296fd5b30f7744c84cb1134024499d7054a3d366/aiida-crystal17-0.3.0a1.tar.gz"}], "0.3.2a1": [{"comment_text": "", "digests": {"md5": "c6bcbdca780c3428b30699a113a9b7a0", "sha256": "2936e6f5a603756e55a648284c5d79b3ddaa7a1fcb67b9521e57054fcbb42462"}, "downloads": -1, "filename": "aiida_crystal17-0.3.2a1-py2-none-any.whl", "has_sig": false, "md5_digest": "c6bcbdca780c3428b30699a113a9b7a0", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 146265, "upload_time": "2018-09-15T00:39:57", "upload_time_iso_8601": "2018-09-15T00:39:57.391390Z", "url": "https://files.pythonhosted.org/packages/dc/18/de1228e4ed2ff780db0e52b14c0e89fb2fb83d1c5f4749b2f8a0d3c96c6a/aiida_crystal17-0.3.2a1-py2-none-any.whl"}], "0.4.0": [{"comment_text": "", "digests": {"md5": "af7878e569b092c04d1b466d96a5c021", "sha256": "a5eefbd0c9af0c1e31f3bd639d67f91b13a8ff874166328a7b1c3fca197795be"}, "downloads": -1, "filename": "aiida_crystal17-0.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "af7878e569b092c04d1b466d96a5c021", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 147167, "upload_time": "2019-03-02T08:49:10", "upload_time_iso_8601": "2019-03-02T08:49:10.771742Z", "url": "https://files.pythonhosted.org/packages/d3/7c/696cdc9ffa769a2135f895e09570a397bb9986acd15d49eb555c003374fd/aiida_crystal17-0.4.0-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f29ab3915d9f67e078b62d1c55862338", "sha256": "03b8bf0dd46a6ef506e2894d4b403cfd97fac8a41421262dcabf72247c3d6974"}, "downloads": -1, "filename": "aiida-crystal17-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f29ab3915d9f67e078b62d1c55862338", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120759, "upload_time": "2019-03-02T08:49:12", "upload_time_iso_8601": "2019-03-02T08:49:12.592189Z", "url": "https://files.pythonhosted.org/packages/a6/dc/b5644d63ded36dc6d299b69a13e85bb5ee1f4a46c71ea0aae35d5edffe89/aiida-crystal17-0.4.0.tar.gz"}], "0.5.0b3": [{"comment_text": "", "digests": {"md5": "be190848a48f2fdb123c094dd3c40649", "sha256": "2c32772e3939a520847a68d9e9030388d7e61df14efbe3776c2dfaaf014d5bad"}, "downloads": -1, "filename": "aiida_crystal17-0.5.0b3-py2-none-any.whl", "has_sig": false, "md5_digest": "be190848a48f2fdb123c094dd3c40649", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 260849, "upload_time": "2019-06-13T21:43:09", "upload_time_iso_8601": "2019-06-13T21:43:09.232101Z", "url": "https://files.pythonhosted.org/packages/14/35/8b944abe61c39b773f1a67032b04ee0320f8307e3b85c8bba4cc78107fe2/aiida_crystal17-0.5.0b3-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "aa73eac562324b100480fcc9dc34a2af", "sha256": "d86de4bca4f7f75f72ebcb5bd0e2c561aaeb95bea615681fb493b3fed27aa8ed"}, "downloads": -1, "filename": "aiida_crystal17-0.5.0b3-py3-none-any.whl", "has_sig": false, "md5_digest": "aa73eac562324b100480fcc9dc34a2af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 260848, "upload_time": "2019-06-13T21:43:02", "upload_time_iso_8601": "2019-06-13T21:43:02.960691Z", "url": "https://files.pythonhosted.org/packages/a8/58/0476b8bd3e96e8dbfe46db94a5a2dca81da7e195e905b827299928703cb5/aiida_crystal17-0.5.0b3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "82ff0a68183f43f9163c1449f0d40273", "sha256": "bc1f4abb4acc15ed58ef034c57aee585ac58bee69cb64fae969f68fde8853173"}, "downloads": -1, "filename": "aiida-crystal17-0.5.0b3.tar.gz", "has_sig": false, "md5_digest": "82ff0a68183f43f9163c1449f0d40273", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 204206, "upload_time": "2019-06-13T21:43:04", "upload_time_iso_8601": "2019-06-13T21:43:04.787308Z", "url": "https://files.pythonhosted.org/packages/34/d1/4aec208f9dc2cd3e9fdcbc616c2289052ad45338cd598b802b69f221e5fc/aiida-crystal17-0.5.0b3.tar.gz"}], "0.6.0b3": [{"comment_text": "", "digests": {"md5": "044e412856e534e9c4ed55ba384ca22c", "sha256": "95cd150894c4a3f1f6b3e4775a71afc362144ded44b4df9c5a7c579e29debe54"}, "downloads": -1, "filename": "aiida_crystal17-0.6.0b3-py3-none-any.whl", "has_sig": false, "md5_digest": "044e412856e534e9c4ed55ba384ca22c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 328979, "upload_time": "2019-06-22T22:05:15", "upload_time_iso_8601": "2019-06-22T22:05:15.213353Z", "url": "https://files.pythonhosted.org/packages/72/9d/1748b26258443851288c659c27092ee9254a585df27a0d040130a2e8f968/aiida_crystal17-0.6.0b3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3b8166a6fb2f27e0d0abf4e1b5c9b7ba", "sha256": "0ffc7681e52329d6a53c220d9064d4cf10875e319000d9564efed23d5036d979"}, "downloads": -1, "filename": "aiida-crystal17-0.6.0b3.tar.gz", "has_sig": false, "md5_digest": "3b8166a6fb2f27e0d0abf4e1b5c9b7ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 263646, "upload_time": "2019-06-22T22:05:17", "upload_time_iso_8601": "2019-06-22T22:05:17.009718Z", "url": "https://files.pythonhosted.org/packages/90/74/22ea5d4f684c8c99b47d5a0da41cd55ac12c865b356ea29cc863fa1cf1bb/aiida-crystal17-0.6.0b3.tar.gz"}], "0.9.0b5": [{"comment_text": "", "digests": {"md5": "2f01a365f48d9a3add980a38000dd6f7", "sha256": "1968ad41db1f48fe9ff44b313e934f1b31f6efe8c82706f910c6b59d7095907d"}, "downloads": -1, "filename": "aiida_crystal17-0.9.0b5-py3-none-any.whl", "has_sig": false, "md5_digest": "2f01a365f48d9a3add980a38000dd6f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1306893, "upload_time": "2019-07-18T15:11:58", "upload_time_iso_8601": "2019-07-18T15:11:58.144814Z", "url": "https://files.pythonhosted.org/packages/0b/bf/8409383e81287b69ccb8852b5e05447eea27c8f95a9d1e293ee439517d9d/aiida_crystal17-0.9.0b5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d8d6e40d189209f384c8f6151d719f73", "sha256": "bcd74ab89b801c16e6f41401f203ad108723f08667f6f46d1bf750754e3459b7"}, "downloads": -1, "filename": "aiida-crystal17-0.9.0b5.tar.gz", "has_sig": false, "md5_digest": "d8d6e40d189209f384c8f6151d719f73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1185912, "upload_time": "2019-07-18T15:12:00", "upload_time_iso_8601": "2019-07-18T15:12:00.502784Z", "url": "https://files.pythonhosted.org/packages/f3/c1/5fe12e1b7b036cd07b12e787c60231c26770cba91daf2b9d82a82bb05701/aiida-crystal17-0.9.0b5.tar.gz"}], "0.9.1b5": [{"comment_text": "", "digests": {"md5": "8bc56cde92955089453c1c4822088109", "sha256": "f0fe0c299e6880aefafe3a866e9db6f589254ef6e61bbf42b2718e6d3da66255"}, "downloads": -1, "filename": "aiida_crystal17-0.9.1b5-py3-none-any.whl", "has_sig": false, "md5_digest": "8bc56cde92955089453c1c4822088109", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1326502, "upload_time": "2019-07-25T05:44:20", "upload_time_iso_8601": "2019-07-25T05:44:20.247406Z", "url": "https://files.pythonhosted.org/packages/07/b4/9a584eb330eef54b74c5f798d278540bb96265126f4b323f1a005ca6a3c1/aiida_crystal17-0.9.1b5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7f8b5c46c2e3ad576803b112365a8a43", "sha256": "7773f0dd9b5c86f48b5331a34b36e55d26f5bdd5f9de32b20901c423128922e7"}, "downloads": -1, "filename": "aiida-crystal17-0.9.1b5.tar.gz", "has_sig": false, "md5_digest": "7f8b5c46c2e3ad576803b112365a8a43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1209295, "upload_time": "2019-07-25T05:44:22", "upload_time_iso_8601": "2019-07-25T05:44:22.347106Z", "url": "https://files.pythonhosted.org/packages/a4/da/25eeefbce96d8c55a027e1f3f63af13719b8eb7ea6ee95f2a8b188c34f10/aiida-crystal17-0.9.1b5.tar.gz"}], "0.9.2b5": [{"comment_text": "", "digests": {"md5": "bb7df0195eb76cd6d46bb1aee7420d59", "sha256": "7ff5296614cda8aab7293c25f4b3cb8403dbfe632215ed6ebfecf5d3daf5127a"}, "downloads": -1, "filename": "aiida_crystal17-0.9.2b5-py3-none-any.whl", "has_sig": false, "md5_digest": "bb7df0195eb76cd6d46bb1aee7420d59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1362126, "upload_time": "2019-08-01T08:37:12", "upload_time_iso_8601": "2019-08-01T08:37:12.017978Z", "url": "https://files.pythonhosted.org/packages/25/24/bf2edda34f05ec94ca4f7643676b25d1a6093ddacf9f4765e924f434c119/aiida_crystal17-0.9.2b5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "9fa45230db933c8a18847365df1ba2c5", "sha256": "203cea484190dea9c11c4f94230715615b3d3724a54d3a535b83f35c36b77eeb"}, "downloads": -1, "filename": "aiida-crystal17-0.9.2b5.tar.gz", "has_sig": false, "md5_digest": "9fa45230db933c8a18847365df1ba2c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1216088, "upload_time": "2019-08-01T08:37:14", "upload_time_iso_8601": "2019-08-01T08:37:14.446863Z", "url": "https://files.pythonhosted.org/packages/f3/5b/7b6a12d7a51d04ab12284f6506550372d1dad389408d91abf2f1ca31786b/aiida-crystal17-0.9.2b5.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "af7878e569b092c04d1b466d96a5c021", "sha256": "a5eefbd0c9af0c1e31f3bd639d67f91b13a8ff874166328a7b1c3fca197795be"}, "downloads": -1, "filename": "aiida_crystal17-0.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "af7878e569b092c04d1b466d96a5c021", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 147167, "upload_time": "2019-03-02T08:49:10", "upload_time_iso_8601": "2019-03-02T08:49:10.771742Z", "url": "https://files.pythonhosted.org/packages/d3/7c/696cdc9ffa769a2135f895e09570a397bb9986acd15d49eb555c003374fd/aiida_crystal17-0.4.0-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f29ab3915d9f67e078b62d1c55862338", "sha256": "03b8bf0dd46a6ef506e2894d4b403cfd97fac8a41421262dcabf72247c3d6974"}, "downloads": -1, "filename": "aiida-crystal17-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f29ab3915d9f67e078b62d1c55862338", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120759, "upload_time": "2019-03-02T08:49:12", "upload_time_iso_8601": "2019-03-02T08:49:12.592189Z", "url": "https://files.pythonhosted.org/packages/a6/dc/b5644d63ded36dc6d299b69a13e85bb5ee1f4a46c71ea0aae35d5edffe89/aiida-crystal17-0.4.0.tar.gz"}]}