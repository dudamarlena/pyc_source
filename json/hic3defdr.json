{"info": {"author": "Thomas Gilgenast", "author_email": "thomasgilgenast@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "hic3defdr\r\n=========\r\n\r\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/hic3defdr.svg)\r\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/hic3defdr.svg)](https://pypi.org/project/hic3defdr)\r\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/hic3defdr.svg)](https://pypi.org/project/hic3defdr)\r\n[![Bitbucket Pipelines](https://img.shields.io/bitbucket/pipelines/creminslab/3defdr-hic.svg)](https://bitbucket.org/creminslab/3defdr-hic/addon/pipelines/home)\r\n[![Read the Docs (version)](https://img.shields.io/readthedocs/hic3defdr/stable.svg)](https://hic3defdr.readthedocs.io/en/stable)\r\n\r\nA genome-scale differential loop finder.\r\n\r\nFor the latest source, discussion, etc, please visit the Bitbucket repository at\r\nhttps://bitbucket.org/creminslab/hic3defdr\r\n\r\nInstallation\r\n------------\r\n\r\nWe require Python 2.7.11+ or 3.6+ and the dependencies listed in `setup.py`.\r\n\r\nA typical quick install process should be:\r\n\r\n    $ virtualenv venv\r\n    $ source venv/bin/activate\r\n    (venv)$ pip install hic3defdr\r\n\r\nA typical dev-mode install process should be:\r\n\r\n    $ git clone https://bitbucket.org/creminslab/hic3defdr.git\r\n    $ cd hic3defdr\r\n    $ virtualenv venv\r\n    $ source venv/bin/activate\r\n    (venv)$ pip install -e .\r\n\r\nIf installation succeeded then `hic3defdr.HiC3DeFDR` should be importable from\r\nan interactive shell started in some other directory:\r\n\r\n    (venv)$ cd <some other directory>\r\n    (venv)$ python\r\n    >>> from hic3defdr import HiC3DeFDR\r\n\r\n### Optional dependencies\r\n\r\nEvaluating simulations requires scikit-learn:\r\n\r\n    (venv)$ pip install scikit-learn\r\n\r\nTo display progress bars during selected steps of the analysis, install [tqdm](https://github.com/tqdm/tqdm):\r\n\r\n    (venv)$ pip install tqdm\r\n\r\nBasic walkthrough\r\n-----------------\r\n\r\nBefore we start, we'll seed numpy's random number generator for reproducibility:\r\n\r\n    >>> import numpy as np\r\n    >>> np.random.seed(42)\r\n\r\nTo analyze the ES_1, ES_3, NPC_1, and NPC_2 reps of the dataset dataset from\r\n[Bonev et al. 2017](https://www.ncbi.nlm.nih.gov/pubmed/29053968) with default\r\nparameters, we would first describe the dataset in terms of replicate names,\r\nchromosome names, and a design matrix. We will just analyze chromosomes 18 and\r\n19 here for illustrative purposes.\r\n\r\n    >>> import pandas as pd\r\n    >>>\r\n    >>> repnames = ['ES_1', 'ES_3', 'NPC_1', 'NPC_2']\r\n    >>> #chroms = ['chr%i' % i for i in range(1, 20)] + ['chrX']\r\n    >>> chroms = ['chr18', 'chr19']\r\n    >>> design = pd.DataFrame({'ES': [1, 1, 0, 0], 'NPC': [0, 0, 1, 1]},\r\n    ...                       dtype=bool, index=repnames)\r\n\r\nIf you're following along, you can download the data like this:\r\n\r\n    $ python -m hic3defdr.util.demo_data\r\n\r\nor from inside an interactive shell:\r\n\r\n    >>> from hic3defdr.util.demo_data import ensure_demo_data\r\n    >>> ensure_demo_data()\r\n\r\nThe data will be downloaded to a folder called `hic3defdr-demo-data` under your\r\nhome directory.\r\n\r\nThe required input files consist of:\r\n\r\n - upper triangular, raw contact matrices in `scipy.sparse` NPZ format,\r\n - bias vectors in plain-text `np.savetxt()` format, and\r\n - loop cluster files in sparse JSON format (see below for more details),\r\n   specifying the locations of loops present in each condition\r\n\r\nTODO: explain how to import data from common Hi-C analysis tools into this\r\nformat\r\n\r\nWe would next describe the location of the input data files and use those to\r\nconstruct a `HiC3DeFDR` object:\r\n\r\n    >>> import os.path\r\n    >>> from hic3defdr import HiC3DeFDR\r\n    >>>\r\n    >>> base_path = os.path.expanduser('~/hic3defdr-demo-data/')\r\n    >>> h = HiC3DeFDR(\r\n    ...     raw_npz_patterns=[base_path + '<rep>/<chrom>_raw.npz'.replace('<rep>', repname) for repname in repnames],\r\n    ...     bias_patterns=[base_path + '<rep>/<chrom>_kr.bias'.replace('<rep>', repname) for repname in repnames],\r\n    ...     chroms=chroms,\r\n    ...     design=design,\r\n    ...     outdir='output',\r\n    ...     loop_patterns={c: base_path + 'clusters/%s_<chrom>_clusters.json' % c for c in ['ES', 'NPC']},\r\n    ...     res=10000\r\n    ... )\r\n    creating directory output\r\n\r\nThis object saves itself to disk, so it can be re-loaded at any time:\r\n\r\n    >>> h = HiC3DeFDR.load('output')\r\n\r\nTo run the analysis for all chromosomes through q-values, run:\r\n\r\n    >>> h.run_to_qvalues()\r\n\r\nTo threshold, cluster, and classify the significantly differential loops, and\r\ncollect all the results into a single TSV output file, run:\r\n\r\n    >>> h.collect()\r\n\r\nThe output file will be written to `output/results_0.01_3.tsv`, where \"output\"\r\nrefers to the `outdir` we passed when constructing the `HiC3DeFDR` object,\r\n\"0.01\" refers to the default FDR of 1%, and \"3\" refers to the default cluster\r\nsize threshold of 3.\r\n\r\n    >>> import pandas as pd\r\n    >>> pd.read_csv('output/results_0.05_3.tsv', sep='\\t', index_col=0).head()\r\n                                                us_chrom  ...  classification\r\n    loop_id                                               ...                \r\n    chr18:3480000-3500000_chr18:4680000-4710000    chr18  ...    constitutive\r\n    chr18:3490000-3510000_chr18:3790000-3810000    chr18  ...              ES\r\n    chr18:3490000-3510000_chr18:3970000-3990000    chr18  ...    constitutive\r\n    chr18:3490000-3510000_chr18:4170000-4200000    chr18  ...    constitutive\r\n    chr18:3490000-3520000_chr18:4120000-4150000    chr18  ...    constitutive\r\n    <BLANKLINE>\r\n    [5 rows x 9 columns]\r\n\r\nSee the section \"TSV output format\" below for more details about the output\r\nformat.\r\n\r\nStep-by-step walkthrough\r\n------------------------\r\n\r\nCalling `h.run_to_qvalues()` runs the four main steps of the analysis in\r\nsequence. These four steps are described in further detail below. Any kwargs\r\npassed to `h.run_to_qvalues()` will be passed along to the appropriate step; see\r\n`help(HiC3DeFDR.run_to_qvalues)` for details.\r\n\r\n### Step 1: Preparing input data\r\n\r\nThe function call `h.prepare_data()` prepares the input raw contact matrices and\r\nbias vectors specified by `h.raw_npz_patterns` and `h.bias_patterns` for all\r\nchromosomes specified in `h.chroms`, performs library size normalization, and\r\ndetermines what points should be considered for dispersion estimation. This\r\ncreates intermediate files in the output directory `h.outdir` that represent the\r\nraw and scaled values, as well as the estimated size factors, and a boolean\r\nvector `disp_idx` indicating which points will be used for dispersion\r\nestimation. If `loop_patterns` was passed to the constructor, an additional\r\nboolean vector `loop_idx` is created to mark which points that pass `disp_idx`\r\nlie within looping interactions specified by `h.loop_patterns`. The raw and\r\nscaled data are stored in a rectangular matrix format where each row is a pixel\r\nof the contact matrix and each column is a replicate. If the size factors are\r\nestimated as a function of distance, the estimated size factors are also stored\r\nin this format. Two separate vectors called `row` and `col` are used to store\r\nthe row and column index of the pixel represented by each row of the rectangular\r\nmatrices. Together, the `row` and `col` vectors plus any of the rectangular\r\nmatrices represent a generalization of a COO format sparse matrix to multiple\r\nreplicates (in the standard COO format the `row` and `col` vectors are\r\ncomplemented by a single `value` vector).\r\n\r\nThe size factors can be estimated with a variety of methods defined in the\r\n`hic3defdr.scaling` module. The method to use is specified by the `norm` kwarg\r\npassed to `h.prepare_data()`. Some of these methods estimate size factors as a\r\nfunction of interaction distance, instead of simply estimating one size factor\r\nfor each replicate as is common in RNA-seq differential expression analysis.\r\nWhen these methods are used, the number of bins to use when binning distances\r\nfor distance-based estimation of the size factors can be specified with the\r\n`n_bins` kwarg. The defaults for this function use the conditional median of\r\nratios approach (`hic3defdr.scaling.conditional_mor`) and an\r\nautomatically-selected number of bins.\r\n\r\n### Step 2: Estimating dispersions\r\n\r\nThe function call `h.estimate_disp()` estimates the dispersion parameters at\r\neach distance scale in the data and fits a lowess curve through the graph of\r\ndistance versus dispersion to obtain final smoothed dispersion estimates for\r\neach pixel.\r\n\r\nThe `estimator` kwarg on `h.estimate_disp()` specifies which dispersion\r\nestimation method to use, out of a selection of options defined in the\r\n`hic3defdr.dispersion` module. The default is to use quantile-adjusted\r\nconditional maximum likelihood (qCML).\r\n\r\n### Step 3: Likelihood ratio test\r\n\r\nThe function call `h.lrt()` performs a likelihood ratio test (LRT) for each\r\npixel. This LRT compares a null model of no differential expression (fitting one\r\ntrue mean parameter shared by all replicates irrespective of condition) to an\r\nalternative model in which the two conditions have different true mean\r\nparameters.\r\n\r\n### Step 4: False discovery rate (FDR) control\r\n\r\nThe function call `h.bh()` performs Benjamini-Hochberg FDR correction on the\r\np-values called via the LRT in the previous step, considering only a subset of\r\npixels that are involved in looping interactions (as specified by\r\n`h.loop_patterns`; if `loop_patterns` was not passed to the constructor then all\r\npixels are included in the BH-FDR correction). This results in final q-values\r\nfor each loop pixel.\r\n\r\n### Thresholding, clustering, and classification\r\n\r\nWe can threshold, cluster, classify, and collect the significantly differential\r\nloops:\r\n\r\n    >>> h.collect(fdr=0.05, cluster_size=3)\r\n\r\nWe can also sweep across FDR and/or cluster size thresholds:\r\n\r\n    >>> h.collect(fdr=[0.01, 0.05], cluster_size=[3, 4])\r\n\r\nThe final output file for each combination of thresholding parameters will be\r\nwritten to `<h.outdir>/results_<fdr>_<cluster_size>.tsv`.\r\n\r\nThis example walkthrough should take less than 5 minutes for the two chromosomes\r\nincluded in the demo data. Run time for a whole-genome analysis will depend on\r\nparallelization as discussed in the next section.\r\n\r\nParallelization\r\n---------------\r\n\r\nThe functions `run_to_qvalues()`, `prepare_data()`, `lrt()`, `threshold()`,\r\n`classify()`, and `simulate()` operate in a per-chromosome manner. By default,\r\neach chromosome in the dataset will be processed in series. If multiple cores\r\nand sufficient memory are available, you can use the `n_threads` kwarg on these\r\nfunctions to use multiple subprocesses to process multiple chromosomes in\r\nparallel. Pass either a desired number of subprocesses to use, or pass\r\n`n_threads=-1` to use all available cores. The output logged to stderr will be\r\ntruncated to reduce clutter from multiple subprocesses printing to stderr at the\r\nsame time. This truncation is controlled by the `verbose` kwarg which is\r\navailable on some of these parallelized functions.\r\n\r\nThe function `estimate_disp()` also accepts an `n_threads` kwarg, using it to\r\nparallelize itself across distance scales.\r\n\r\nThe function `run_to_qvalues()` passes the `n_threads` kwarg through to all the\r\nsteps it calls.\r\n\r\nIntermediates and final output files\r\n------------------------------------\r\n\r\nAll intermediates used in the computation will be saved to the disk inside the\r\n`outdir` folder as `<intermediate>_<chrom>.npy` (most intermediates),\r\n`<intermediate>_<chrom>.json`/`<intermediate>_<chrom>.tsv` (thresholded or\r\nclassified clusters).\r\n\r\nTwo intermediates are not generated per chromosome. These are\r\n`disp_fn_<c>.pickle` (dispersion function estimated across all chromosomes for\r\ncondition `<c>`) and `results_<f>_<s>.tsv` (final combined results from all\r\nchromosomes).\r\n\r\n| Step              | Intermediate      | Shape                               | Description                                 |\r\n|-------------------|-------------------|-------------------------------------|---------------------------------------------|\r\n| `prepare_data()`  | `row`             | `(n_pixels,)`                       | Top-level row index                         |\r\n| `prepare_data()`  | `col`             | `(n_pixels,)`                       | Top-level column index                      |\r\n| `prepare_data()`  | `bias`            | `(n_bins, n_reps)`                  | Bias vectors                                |\r\n| `prepare_data()`  | `raw`             | `(n_pixels, n_reps)`                | Raw count values                            |\r\n| `prepare_data()`  | `size_factors`    | `(n_reps,)` or `(n_pixels, n_reps)` | Size factors                                |\r\n| `prepare_data()`  | `scaled`          | `(n_pixels, n_reps)`                | Normalized count values                     |\r\n| `prepare_data()`  | `disp_idx`        | `(n_pixels,)`                       | Marks pixels for which dispersion is fitted |\r\n| `prepare_data()`  | `loop_idx`        | `(disp_idx.sum(),)`                 | Marks pixels which lie in loops             |\r\n| `estimate_disp()` | `cov_per_bin`     | `(n_bins, n_conds)`                 | Average mean count or distance in each bin  |\r\n| `estimate_disp()` | `disp_per_bin`    | `(n_bins, n_conds)`                 | Pooled dispersion estimates in each bin     |\r\n| `estimate_disp()` | `disp_fn_<c>`     | pickled function                    | Fitted dispersion function                  |\r\n| `estimate_disp()` | `disp`            | `(disp_idx.sum(), n_conds)`         | Smoothed dispersion estimates               |\r\n| `lrt()`           | `mu_hat_null`     | `(disp_idx.sum(),)`                 | Null model mean parameters                  |\r\n| `lrt()`           | `mu_hat_alt`      | `(disp_idx.sum(), n_conds)`         | Alternative model mean parameters           |\r\n| `lrt()`           | `llr`             | `(disp_idx.sum(),)`                 | Log-likelihood ratio                        |\r\n| `lrt()`           | `pvalues`         | `(disp_idx.sum(),)`                 | LRT-based p-value                           |\r\n| `bh()`            | `qvalues`         | `(loop_idx.sum(),)`                 | BH-corrected q-values                       |\r\n| `threshold()`     | `sig_<f>_<s>`     | JSON/TSV                            | Significantly differential clusters         |\r\n| `threshold()`     | `insig_<f>_<s>`   | JSON/TSV                            | Constitutive clusters                       |\r\n| `classify()`      | `<c>_<f>_<s>`     | JSON/TSV                            | Classified differential clusters            |\r\n| `collect()`       | `results_<f>_<s>` | TSV                                 | Final results table                         |\r\n\r\nThe table uses these abbreviations to refer to variable parts of certain\r\nintermediate names:\r\n\r\n - `<f>`: FDR threshold\r\n - `<s>`: cluster size threshold\r\n - `<c>`: condition/class label\r\n\r\nSparse JSON cluster format\r\n--------------------------\r\n\r\nThis is the format used both for supplying pre-identified, per-condition loop\r\nclusters as input to HiC3DeFDR as well as the format in which differential and\r\nconstitutive interaction clusters are reported as output.\r\n\r\nThe format describes the clusters on each chromosome in a separate JSON file.\r\nThis JSON file contains a single JSON object, which is a list of list of list of\r\nintegers. The inner lists are all of length 2 and represent specific pixels of\r\nthe heatmap for that chromosome in terms of there row and column coordinates in\r\nzero-indexed bin units. The outer middle lists can be of any length and\r\nrepresent groups of pixels that belong to the same cluster. The length of the\r\nouter list corresponds to the number of clusters on that chromosome.\r\n\r\nThese clusters can be loaded into and written from the corresponding plain\r\nPython objects using `hic3defdr.clusters.load_clusters()` and\r\n`hic3defdr.clusters.save_clusters()`, respectively. The plain Python objects can\r\nbe converted to and from scipy sparse matrix objects using\r\n`hic3defdr.clusters.clusters_to_coo()` and\r\n`hic3defdr.clusters.convert_cluster_array_to_sparse()`, respectively.\r\n\r\nTSV output format\r\n-----------------\r\n\r\nThe final TSV output file `results_<f>_<s>.tsv` has as its first column a\r\n`loop_id`, a string of the form\r\n`<us_chrom>:<us_start>-<us_end>_<ds_chrom>:<ds_start>-<ds_end>` specifying a\r\nrectangle that surrounds the cluster of pixels that make up the loop. The next\r\nsix columns are the six individual pieces of this `loop_id`. This is followed\r\nby:\r\n - `cluster_size`: the number of pixels in the cluster\r\n - `cluster`: a list of the exact (row, col) indices of the pixels in the\r\n   cluster\r\n - `classification`: this will be \"constitutive\" if the loop is not\r\n   differential, or the name of the condition the loop is specific to (i.e.,\r\n   strongest in) if it is differential\r\n\r\nVisualizations\r\n--------------\r\n\r\nThe `HiC3DeFDR` object can be used to draw visualizations of the analysis.\r\n\r\nThe visualization functions are wrapped with the [@plotter decorator](https://lib5c.readthedocs.io/en/latest/plotting/)\r\nand therefore all support the convenience kwargs provided by that decorator\r\n(such as `outfile`).\r\n\r\n### Distance dependence curves before and after scaling\r\n\r\n    >>> _ = h.plot_dd_curves('chr18', outfile='images/dd.png')\r\n\r\n![](images/dd.png)\r\n\r\n### Simple heatmap plotting\r\n\r\n    >>> _ = h.plot_heatmap('chr18', slice(1000, 1100), slice(1000, 1100), rep='ES_1',\r\n    ...                    outfile='images/heatmap.png')\r\n\r\n![](images/heatmap.png)\r\n\r\nBy default, this plots data at the \"scaled\" stage (normalized for bias and\r\nsequencing depth differences), but you can plot any stage of the data by passing\r\na `stage` kwarg.\r\n\r\n### Condition-average heatmap plotting\r\n\r\nTo plot a within-condition average heatmap, pass a `stage` name with a '_mean'\r\nsuffix appended and `cond` to specify the condition to average within:\r\n\r\n    >>> _ = h.plot_heatmap('chr18', slice(1000, 1100), slice(1000, 1100),\r\n    ...                    stage='scaled_mean', cond='ES',\r\n    ...                    outfile='images/heatmap_mean.png')\r\n\r\n![](images/heatmap_mean.png)\r\n\r\n### Loop zoomin heatmap plotting\r\n\r\nWe can combine `h.plot_heatmap()` with the `load_clusters()` and\r\n`cluster_to_slices()` utility functions in `hic3defdr.util.clusters` to plot\r\nzoomins around specific loops:\r\n\r\n    >>> from hic3defdr.util.clusters import load_clusters, cluster_to_slices\r\n    >>> chrom = 'chr18'\r\n    >>> clusters = load_clusters(h.loop_patterns['ES'].replace('<chrom>', chrom))\r\n    >>> slices = cluster_to_slices(clusters[23])\r\n    >>> _ = h.plot_heatmap(chrom, *slices, rep='ES_1', outfile='images/zoomin.png')\r\n\r\n![](images/zoomin.png)\r\n\r\n### Per-pixel significance plotting\r\n\r\nWe can pass `stage='qvalues'` to `h.plot_heatmap()` to draw heatmaps showing the\r\nsignificance of each pixel:\r\n\r\n    >>> _ = h.plot_heatmap('chr18', slice(1310, 1370), slice(1310, 1370),\r\n    ...                    stage='qvalues', cmap='bwr_r', vmin=0.099, vmax=0.101,\r\n    ...                    outfile='images/heatmap_sig.png')\r\n\r\n![](images/heatmap_sig.png)\r\n\r\nBy passing `cmap='bwr_r'` we ensure that significant, low q-value pixels will be\r\nred while insignificant, high q-value pixels will be blue. By passing\r\n`vmin=0.099, vmax=0.101`, we ensure that the colorbar is focused on a narrow\r\nrange around an FDR threshold of 10%, allowing us to more easily tell the\r\ndifference between significant and insignificant pixels.\r\n\r\n### Correlation matrices\r\n\r\n    >>> _ = h.plot_correlation_matrix(outfile='images/correlation.png')\r\n\r\n![](images/correlation.png)\r\n\r\n### Dispersion fitting\r\n\r\n    >>> _ = h.plot_dispersion_fit('ES', outfile='images/ddr.png')\r\n\r\n![](images/ddr.png)\r\n\r\nIt's possible to use the the one-dimensional distance dependence curve to\r\nconvert distances to means. Doing so allows plotting the y-axis in terms of\r\nvariance. You can do this by passing `yaxis='var'`:\r\n\r\n    >>> _ = h.plot_dispersion_fit('ES', yaxis='var', outfile='images/dvr.png')\r\n\r\n![](images/dvr.png)\r\n\r\nUsing the same trick, you can plot the x-axis in terms of mean by passing\r\n`xaxis='mean'`:\r\n\r\n    >>> _ = h.plot_dispersion_fit('ES', xaxis='mean', yaxis='var',\r\n    ...                           outfile='images/mvr.png')\r\n\r\n![](images/mvr.png)\r\n\r\nAt low mean and high distance, the distance dependence curve flattens out and\r\nthe data become more noisy, making this conversion unreliable.\r\n\r\nIt's also possible to show the dispersion fitted at just one distance scale,\r\noverlaying the sample mean and sample variance across replicates for each pixel\r\nas a blue hexbin plot:\r\n\r\n    >>> _ = h.plot_dispersion_fit('ES', distance=25, hexbin=True, xaxis='mean',\r\n    ...                           yaxis='var', logx=True, logy=True,\r\n    ...                           outfile='images/mvr_25.png')\r\n\r\n![](images/mvr_25.png)\r\n\r\nIf dispersion was fitted against distance rather than mean, pass `xaxis='dist'`\r\nto plot dispersion/variance versus distance.\r\n\r\n### Comparing dispersion fits\r\n\r\nIt's possible to compare different dispersion fits using the function\r\n`compare_disp_fits()` as shown here:\r\n\r\n    >>> from hic3defdr import compare_disp_fits\r\n    >>>\r\n    >>> _ = compare_disp_fits(\r\n    ...     [h.load_disp_fn(cond) for cond in h.design.columns],\r\n    ...     h.design.columns,\r\n    ...     max_dist=100,\r\n    ...     outfile='images/disp_comparison.png'\r\n    ... )\r\n\r\n![](images/disp_comparison.png)\r\n\r\n### P-value distribution\r\n\r\n    >>> _ = h.plot_pvalue_distribution(outfile='images/pvalue_dist.png')\r\n\r\n![](images/pvalue_dist.png)\r\n\r\nBy default, this plots the p-value distribution over all pixels for which\r\ndispersion was estimated. To plot the p-value distribution only over points in\r\nloops, pass `idx='loop'`.\r\n\r\n### Q-value distribution\r\n\r\n    >>> _ = h.plot_qvalue_distribution(outfile='images/qvalue_dist.png')\r\n\r\n![](images/qvalue_dist.png)\r\n\r\n### MA plot\r\n\r\n    >>> _ = h.plot_ma(outfile='images/ma.png')\r\n\r\n![](images/ma.png)\r\n\r\n### Pixel detail grid\r\n\r\n    >>> _ = h.plot_grid('chr18', 2218, 2236, 20, outfile='images/grid.png')\r\n\r\n![](images/grid.png)\r\n\r\nThe upper right heatmaps show the balanced and scaled values in each replicate,\r\nwith each condition on its own row.\r\n\r\nThe upper left heatmaps show the alternative model mean parameter estimates for\r\neach condition. Significantly differential clusters are purple while\r\nconstitutive ones are gray.\r\n\r\nThe lower left heatmap shows the q-values. Significantly differential clusters\r\nare orange while constitutive ones are gray.\r\n\r\nThe stripplots in the lower left show details information about the specific\r\npixel in the center of the heatmaps (in this example `(2218, 2236)`). The dots\r\nshow the values at that pixel for each replicate in normalized and raw space,\r\nrepsectively. The solid and dashed lines represent the mean parameters under the\r\nalt and null models, repsectively.\r\n\r\nGreen points in the heatmaps represent points that have been filtered out. For\r\nthe per-replicate heatmaps in the upper right of the grid, the only filters\r\napplied are the zero filter, bias filter, and distance filter. For the alt model\r\nmean heatmaps in the upper left, this additionally includes the dispersion\r\nfilter. For the q-value heatmap in the lower left, it additionally includes the\r\nloop filter if loop locations were supplied.\r\n\r\n### Interactive thresholding\r\n\r\nIn a Jupyter notebook environment with `ipywidgets` installed, you can play with\r\nthresholds on a live-updating plot by running:\r\n\r\n    %matplotlib notebook\r\n\r\n    from ipywidgets import interact\r\n    from hic3defdr import HiC3DeFDR\r\n\r\n    h = HiC3DeFDR.load('output')\r\n    _, _, outline_clusters = h.plot_grid('chr18', 2218, 2236, 50)\r\n    _ = interact(outline_clusters, fdr=[0.01, 0.05, 0.1, 0.2],\r\n                 cluster_size=[3, 4])\r\n\r\nSimulation\r\n----------\r\n\r\nAfter the `estimate_disp()` step has been run, a HiC3DeFDR object can be used to\r\ngenerate simulations of differential looping.\r\n\r\n### Generating simulations\r\n\r\nTo create an ES-based simulation over all chromosomes listed in `h.chroms`, we\r\nrun\r\n\r\n    >>> from hic3defdr import HiC3DeFDR\r\n    >>>\r\n    >>> h = HiC3DeFDR.load('output')\r\n    >>> h.simulate('ES')\r\n\r\nIf we passed `trend='dist'` to `h.estimate_disp()`, we need to pass it to\r\n`h.simulate()` as well to ensure that the simulation function knows to treat the\r\npreviously-fitted dispersion function as a function of distance.\r\n\r\nThis takes the mean of the real scaled data across the ES replicates and\r\nperturbs the loops specified in `h.loop_patterns['ES']` up or down at random to\r\ngenerate two new conditions called \"A\" and \"B\". The scaled mean matrices for\r\nthese conditions are then biased and scaled by the bias vectors and size factors\r\ntaken from the real experimental replicates, and the ES dispersion function\r\nfitted to the real ES data is applied to the biased and scaled means to obtain\r\ndispersion values. These means and dispersions are used to draw an NB random\r\nvariable for each pixel of each simulated replicate. The number of replicates in\r\neach of the simulated conditions \"A\" and \"B\" will match the design of the real\r\nanalysis.\r\n\r\nThe simulated raw contact matrices will be written to disk in CSR format as\r\n`<cond><rep>_<chrom>_raw.npz` where `<cond>` is \"A\" or \"B\" and `<rep>` is the\r\nrep number within the condition. The design matrix will also be written to disk\r\nas `design.csv`.\r\n\r\nThe true labels used to perturb the loops will also be written to disk as\r\n`labels_<chrom>.txt`. This file contains as many lines as there are clusters in\r\n`h.loop_patterns['ES']`, with the `i`th line providing the label for the `i`th\r\ncluster. This file can be loaded with `np.loadtxt(..., dtype='|S7')`.\r\n\r\n### Evaluating simulations\r\n\r\nAfter generating simulated data, HiC3DeFDR can be run on the simulated data.\r\nThen, the true labels can be used to evaluate the performance of HiC3DeFDR on\r\nthe simulated data.\r\n\r\nEvaluation of simulated data requires scikit-learn. To install this package, run\r\n\r\n    (venv)$ pip install scikit-learn\r\n\r\nIn order to run HiC3DeFDR on the simulated data, we first need to balance the\r\nsimulated raw contact matrices to obtain bias vectors for each simulated\r\nreplicate and chromosome. We will assume are saved next to the raw contact\r\nmatrices and named `<rep>_<chrom>_kr.bias`. One example of how this can be done\r\nis shown in the following script:\r\n\r\n    >>> import sys\r\n    >>>\r\n    >>> import numpy as np\r\n    >>> import scipy.sparse as sparse\r\n    >>>\r\n    >>> from hic3defdr.util.filtering import filter_sparse_rows_count\r\n    >>> from hic3defdr.util.balancing import kr_balance\r\n    >>> from hic3defdr.util.printing import eprint\r\n    >>>\r\n    >>>\r\n    >>> infile_pattern = 'sim/<rep>_<chrom>_raw.npz'\r\n    >>> repnames = ['A1', 'A2', 'B1', 'B2']\r\n    >>> chroms = ['chr18', 'chr19']\r\n    >>>\r\n    >>> for repname in repnames:\r\n    ...     for chrom in chroms:\r\n    ...         eprint('balancing rep %s chrom %s' % (repname, chrom))\r\n    ...         infile = infile_pattern.replace('<rep>', repname)\\\r\n    ...             .replace('<chrom>', chrom)\r\n    ...         outfile = infile.replace('_raw.npz', '_kr.bias')\r\n    ...         _, bias, _ = kr_balance(\r\n    ...             filter_sparse_rows_count(sparse.load_npz(infile)), fl=0)\r\n    ...         np.savetxt(outfile, bias)\r\n\r\nNext, we create a new HiC3DeFDR object to analyze the simulated data and run the\r\nanalysis through to q-values:\r\n\r\n    >>> import os.path\r\n    >>> from hic3defdr import HiC3DeFDR\r\n    >>>\r\n    >>> repnames = ['A1', 'A2', 'B1', 'B2']\r\n    >>> chroms = ['chr18', 'chr19']\r\n    >>> sim_path = 'sim/'\r\n    >>> base_path = os.path.expanduser('~/hic3defdr-demo-data/')\r\n    >>> h_sim = HiC3DeFDR(\r\n    ...     raw_npz_patterns=[sim_path + '<rep>_<chrom>_raw.npz'.replace('<rep>', repname) for repname in repnames],\r\n    ...     bias_patterns=[sim_path + '<rep>_<chrom>_kr.bias'.replace('<rep>', repname) for repname in repnames],\r\n    ...     chroms=chroms,\r\n    ...     design=sim_path + 'design.csv',\r\n    ...     outdir='output-sim',\r\n    ...     loop_patterns={'ES': base_path + 'clusters/ES_<chrom>_clusters.json'}\r\n    ... )\r\n    creating directory output-sim\r\n    >>> h_sim.run_to_qvalues()\r\n\r\nNext, we can evaluate the simulation against the clusters in\r\n`h_sim.loop_patterns['ES']` with true labels from `sim/labels_<chrom>.txt`:\r\n\r\n    >>> h_sim.evaluate('ES', 'sim/labels_<chrom>.txt')\r\n\r\nThis writes a file in `h_sim`'s output directory called `eval.npz`. This file\r\ncan be loaded with `np.load()` and has four keys whose values are all one\r\ndimensional vectors:\r\n\r\n - `'thresh'`: the thresholds (in `1 - qvalue` space) which make up the convex\r\n   edge of the ROC curve; all other vectors are parallel to this one\r\n - `'fdr'`: the observed false discovery rate at each threshold\r\n - `'tpr'`: the observed true positive rate at each threshold\r\n - `'fpr'`: the observed false positive rate at each threshold\r\n\r\n`eval.npz` files (possibly across many runs) can be visualized as ROC curves and\r\nFDR control curves by running:\r\n\r\n    >>> import numpy as np\r\n    >>> from hic3defdr import plot_roc, plot_fdr\r\n    >>>\r\n    >>> _ = plot_roc([np.load('output-sim/eval.npz')], ['hic3defdr'], outfile='images/roc.png')\r\n    >>> _ = plot_fdr([np.load('output-sim/eval.npz')], ['hic3defdr'], outfile='images/fdr.png')\r\n\r\n![](images/roc.png)\r\n![](images/fdr.png)\r\n\r\nMultiple `eval.npz` files can be compared in the same plot by simply adding\r\nelements to the lists in these function calls.\r\n\r\nThe ROC plot shows FPR versus TPR, with the gray diagonal line representing the\r\nperformance of random guessing. The AUROC for each curve is shown in the legend.\r\nIf only one curve is plotted, selected thresholds (in units of FDR threshold)\r\nare annotated with black arrows.\r\n\r\nThe FDR control plot shows the observed FDR as a function of the FDR threshold.\r\nPoints below the gray diagonal line represent points at which FDR is\r\nsuccessfully controlled.\r\n\r\nAs an added bonus, it's also possible to evaluate the performance on specific\r\nsubsets of distance scales by using the `min_dist` and `max_dist` kwargs on\r\n`HiC3DeFDR.evaluate()` as illustrated below:\r\n\r\n    >>> dist_bins = [\r\n    ...    ('short', (None, 15)),  # distances in bin units\r\n    ...    ('mid', (16, 30)),\r\n    ...    ('long', (31, None))\r\n    ... ]\r\n    >>> for _, (min_dist, max_dist) in dist_bins:\r\n    ...     h_sim.evaluate('ES', 'sim/labels_<chrom>.txt', min_dist=min_dist,\r\n    ...                    max_dist=max_dist)\r\n    >>> _ = plot_roc([np.load('output-sim/eval_%s_%s.npz' % (min_dist, max_dist))\r\n    ...               for _, (min_dist, max_dist) in dist_bins],\r\n    ...              [label for label, _ in dist_bins],\r\n    ...              outfile='images/roc_by_dist.png')\r\n    >>> _ = plot_fdr([np.load('output-sim/eval_%s_%s.npz' % (min_dist, max_dist))\r\n    ...               for _, (min_dist, max_dist) in dist_bins],\r\n    ...              [label for label, _ in dist_bins],\r\n    ...              outfile='images/fdr_by_dist.png')\r\n\r\n![](images/roc_by_dist.png)\r\n![](images/fdr_by_dist.png)\r\n\r\nIt's also possible to compare the FPR and FNR at the different subsets:\r\n\r\n    >>> from hic3defdr import plot_fn_vs_fp\r\n    >>>\r\n    >>> _ = plot_fn_vs_fp([np.load('output-sim/eval_%s_%s.npz' % (min_dist, max_dist))\r\n    ...                    for _, (min_dist, max_dist) in dist_bins],\r\n    ...                   [label for label, _ in dist_bins], xlabel='distance subset',\r\n    ...                   outfile='images/fn_vs_fp.png')\r\n\r\n![](images/fn_vs_fp.png)\r\n\r\nOther visualizations\r\n--------------------\r\n\r\n### Distance bias\r\n\r\nWe can visualize and compare the distance bias of different simulations (the\r\ndegree to which low p-values are enriched or depleted in different distance\r\nscales) using the `plot_distance_bias()` function as shown below:\r\n\r\n    >>> from hic3defdr import plot_distance_bias\r\n    >>>\r\n    >>> dist_bins = [\r\n    ...    ('short', (None, 15)),  # distances in bin units\r\n    ...    ('mid', (16, 30)),\r\n    ...    ('long', (31, None))\r\n    ... ]\r\n    >>> _ = plot_distance_bias([h, h_sim], [b for _, b in dist_bins], labels=['real', 'sim'], outfile='images/distance_bias.png')\r\n\r\n![](images/distance_bias.png)\r\n\r\nPackage structure\r\n-----------------\r\n\r\nThe `hic3defdr` package is layed out in three parts:\r\n\r\n 1. `hic3defdr.util`: library of re-usable functions for performing computations\r\n    related to differential loop calling\r\n 2. `hic3defdr.plotting`: library of re-usable functions to plotting\r\n    visualizations related to differential loop calling\r\n 3. `hic3defdr.analysis`: a module that defines the HiC3DeFDR class, which\r\n    provides an implementation of stitching together all the computational steps\r\n    and visualizations in an easy-to-use way\r\n\r\nThe HiC3DeFDR class includes many methods, so to keep things organized these\r\nmethods are defined in four separate mixin classes which are combined to form\r\nthe full HiC3DeFDR class in `hic3defdr/analysis/constructor.py`:\r\n\r\n - `hic3defdr.analysis.core.CoreHiC3DeFDR`\r\n - `hic3defdr.analysis.analysis.AnalyzingHiC3DeFDR`\r\n - `hic3defdr.analysis.simulation.SimulatingHiC3DeFDR`\r\n - `hic3defdr.analysis.plotting.PlottingHiC3DeFDR`\r\n\r\nWe recommend that most users simply import the HiC3DeFDR class and interact with\r\nthis package through that interface, but the functions defined in\r\n`hic3efdr.util` and `hic3defdr.plotting` may also be useful to some users and\r\nare designed to be somewhat re-usable.\r\n\r\nThe complete layout of the package is summarized below:\r\n\r\n```\r\nhic3defdr/                      # package root\r\n\u251c\u2500\u2500 _version.py                 # version configuration\r\n\u251c\u2500\u2500 analysis/                   # HiC3DeFDR class and alternatives\r\n\u2502   \u251c\u2500\u2500 alternatives.py         # defines alternative analysis models\r\n\u2502   \u251c\u2500\u2500 analysis.py             # HiC3DeFDR's pipeline methods\r\n\u2502   \u251c\u2500\u2500 constructor.py          # HiC3DeFDR's class definition and constructor\r\n\u2502   \u251c\u2500\u2500 core.py                 # HiC3DeFDR's core save/load methods\r\n\u2502   \u251c\u2500\u2500 plotting.py             # HiC3DeFDR's plotting methods\r\n\u2502   \u2514\u2500\u2500 simulation.py           # HiC3DeFDR's simulation/evaluation methods\r\n\u251c\u2500\u2500 plotting/                   # library of plotting functions\r\n\u2502   \u251c\u2500\u2500 dispersion.py           # dispersion/variance fit visualizations\r\n\u2502   \u251c\u2500\u2500 distance_bias.py        # distance bias comparison barplots\r\n\u2502   \u251c\u2500\u2500 distance_dependence.py  # distance dependence curve comparison\r\n\u2502   \u251c\u2500\u2500 fdr.py                  # FDR control curve plotting\r\n\u2502   \u251c\u2500\u2500 fn_vs_fp.py             # FN vs FP tradeoff barplots\r\n\u2502   \u251c\u2500\u2500 grid.py                 # \"pixel detail grid\" combination visualization\r\n\u2502   \u251c\u2500\u2500 heatmap.py              # simple contact matrix heatmap plotting\r\n\u2502   \u251c\u2500\u2500 histograms.py           # p-value/q-value histograms\r\n\u2502   \u251c\u2500\u2500 ma.py                   # MA plots\r\n\u2502   \u2514\u2500\u2500 roc.py                  # ROC curve plots\r\n\u2514\u2500\u2500 util/                       # library of utility functions \r\n    \u251c\u2500\u2500 binning.py              # creating groups of points\r\n    \u251c\u2500\u2500 balancing.py            # KR matrix balancing\r\n    \u251c\u2500\u2500 banded_matrix.py        # BandedMatrix class (used for filtering)\r\n    \u251c\u2500\u2500 classification.py       # classifying differential loop pixels\r\n    \u251c\u2500\u2500 cluster_table.py        # creating tables summarizing cluster info\r\n    \u251c\u2500\u2500 clusters.py             # interacting with called loop clusters\r\n    \u251c\u2500\u2500 demo_data.py            # utilities for downloading the demo dataset\r\n    \u251c\u2500\u2500 dispersion.py           # estimating dispersions in NB data\r\n    \u251c\u2500\u2500 evaluation.py           # evaluating results of simulations\r\n    \u251c\u2500\u2500 filtering.py            # filtering (applied before balancing)\r\n    \u251c\u2500\u2500 lowess.py               # lowess fitting\r\n    \u251c\u2500\u2500 lrt.py                  # NB likelihood ratio testing\r\n    \u251c\u2500\u2500 matrices.py             # interacting with sparse matrices\r\n    \u251c\u2500\u2500 parallelization.py      # parallelizing work across cores\r\n    \u251c\u2500\u2500 printing.py             # printing updates and info to the console\r\n    \u251c\u2500\u2500 progress.py             # showing progress bars\r\n    \u251c\u2500\u2500 scaled_nb.py            # dealing with scaling factors in NB\r\n    \u251c\u2500\u2500 scaling.py              # scaling reps to account for sequencing depth\r\n    \u251c\u2500\u2500 simulation.py           # simulating pseudoreplicates\r\n    \u2514\u2500\u2500 thresholding.py         # thresholding differential pixels/clusters\r\n```\r\n\r\nAdditional options\r\n------------------\r\n\r\nAdditional options are exposed as kwargs on the functions in this library. Use\r\n`help(<function>)` to get detailed information about the options available for\r\nany function and what these options may be used for.\r\n\r\nTesting\r\n-------\r\n\r\nWe run our tests with [tox](https://tox.readthedocs.io). To execute tests,\r\ninstall tox (`pip install tox`) and then run `tox` to run all tests or\r\n`tox -e <testenv>` to run a specific test environment. See `tox.ini` for the\r\nfull specification of all test environments.\r\n\r\n\r\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/creminslab/hic3defdr", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "hic3defdr", "package_url": "https://pypi.org/project/hic3defdr/", "platform": "", "project_url": "https://pypi.org/project/hic3defdr/", "project_urls": {"Homepage": "https://bitbucket.org/creminslab/hic3defdr"}, "release_url": "https://pypi.org/project/hic3defdr/0.2.0/", "requires_dist": ["numpy (>=1.14.0)", "scipy (>=1.2.0)", "matplotlib (>=2.1.1)", "mpl-scatter-density (>=0.6)", "seaborn (>=0.8.0)", "pandas (>=0.21.0)", "lib5c (>=0.6.0)", "dill (>=0.2.9)", "importlib-metadata (>=1.5.0) ; python_version < \"3.8\"", "Sphinx (>=1.8.5) ; extra == 'complete'", "doctest-ignore-unicode (>=0.1.2) ; extra == 'complete'", "flake8 (>=3.4.1) ; extra == 'complete'", "m2r (>=0.2.1) ; extra == 'complete'", "nose-exclude (>=0.5.0) ; extra == 'complete'", "nose (>=1.3.7) ; extra == 'complete'", "scikit-learn (>=0.20.3) ; extra == 'complete'", "sphinx-rtd-theme (>=0.4.3) ; extra == 'complete'", "sphinxcontrib-apidoc (>=0.3.0) ; extra == 'complete'", "tqdm (>=4.32.2) ; extra == 'complete'", "Sphinx (>=1.8.5) ; extra == 'docs'", "sphinx-rtd-theme (>=0.4.3) ; extra == 'docs'", "sphinxcontrib-apidoc (>=0.3.0) ; extra == 'docs'", "m2r (>=0.2.1) ; extra == 'docs'", "scikit-learn (>=0.20.3) ; extra == 'evaluation'", "tqdm (>=4.32.2) ; extra == 'progress'", "nose (>=1.3.7) ; extra == 'test'", "nose-exclude (>=0.5.0) ; extra == 'test'", "doctest-ignore-unicode (>=0.1.2) ; extra == 'test'", "flake8 (>=3.4.1) ; extra == 'test'"], "requires_python": "", "summary": "a genome-scale differential loop finder", "version": "0.2.0"}, "last_serial": 6805634, "releases": {"0.0.9": [{"comment_text": "", "digests": {"md5": "783017a83eb4ad66e901907f79aae87f", "sha256": "b9ec820d73a386055af9ac399684dc90a9a20dd982168dc6f63c620345fef791"}, "downloads": -1, "filename": "hic3defdr-0.0.9-py2-none-any.whl", "has_sig": false, "md5_digest": "783017a83eb4ad66e901907f79aae87f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 88872, "upload_time": "2020-02-12T06:25:38", "upload_time_iso_8601": "2020-02-12T06:25:38.150256Z", "url": "https://files.pythonhosted.org/packages/f8/c9/da6db7682c60b7ee7517460c53b07507e31b3e3e64cd4098cd9fb3df94d3/hic3defdr-0.0.9-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3a11dc7c61ceb0dbb245afd609fb1ec8", "sha256": "fba2ae4a800b6ea254dc2734205aa24f8398d64deadb460500bbeb6a944976c7"}, "downloads": -1, "filename": "hic3defdr-0.0.9.tar.gz", "has_sig": false, "md5_digest": "3a11dc7c61ceb0dbb245afd609fb1ec8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79084, "upload_time": "2020-02-12T06:25:36", "upload_time_iso_8601": "2020-02-12T06:25:36.003059Z", "url": "https://files.pythonhosted.org/packages/7c/e9/d537834f33596b360e8c1c3f88533bfb6e1b01db3c6689481fe76f97a72d/hic3defdr-0.0.9.tar.gz"}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b69c2b4439af59d90682b107bbad47b2", "sha256": "835c3793ef01e7a4bd2165d3756506c477fdf2ad1433dae74c7669397effb2c9"}, "downloads": -1, "filename": "hic3defdr-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "b69c2b4439af59d90682b107bbad47b2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 103676, "upload_time": "2020-02-12T06:36:41", "upload_time_iso_8601": "2020-02-12T06:36:41.928856Z", "url": "https://files.pythonhosted.org/packages/f4/d1/82c0156223ee30bb55c7273229daa58ee36e23064b236b0a21cc52e28639/hic3defdr-0.1.0-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f6be1b9dc0be1c13d7829e86e299cf1a", "sha256": "3bed47c5e14f1681298aa5c22490bb45d31c8c641588f77cf685f346c6779a2c"}, "downloads": -1, "filename": "hic3defdr-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f6be1b9dc0be1c13d7829e86e299cf1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98568, "upload_time": "2020-02-12T06:36:43", "upload_time_iso_8601": "2020-02-12T06:36:43.436993Z", "url": "https://files.pythonhosted.org/packages/1f/79/9894960a4a64825123ad1d2cd572539bd2e38a95f6e4c5a2df616b6d5982/hic3defdr-0.1.0.tar.gz"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "59dffd8a4f32f687b62a29e94ae844e8", "sha256": "65e668036dd8e6f223d524f064bab213ca516509118f16cf0d878373359483f9"}, "downloads": -1, "filename": "hic3defdr-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "59dffd8a4f32f687b62a29e94ae844e8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 79369, "upload_time": "2020-03-13T10:49:12", "upload_time_iso_8601": "2020-03-13T10:49:12.587240Z", "url": "https://files.pythonhosted.org/packages/4e/55/aa4b7a4aaa494adcc48c69da88d865347d37dfe9d64ef4afe28aa67c48fa/hic3defdr-0.1.1-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "b4234e73991ba8d4cac66ab85afae52c", "sha256": "a65a119d7c97e8f3f036175b6c2c61c26388fc28e27ea806e2da69596abf8ae4"}, "downloads": -1, "filename": "hic3defdr-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b4234e73991ba8d4cac66ab85afae52c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 790818, "upload_time": "2020-03-13T10:49:14", "upload_time_iso_8601": "2020-03-13T10:49:14.412893Z", "url": "https://files.pythonhosted.org/packages/2f/2d/37ccc0804499e4e8b84a06f5b92f8c9c0956d1344fbdd1735548d3c6fb71/hic3defdr-0.1.1.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a2efa67727451661bf44f18a4de43bf5", "sha256": "d1e3d1a8b73b6acf8133a46ae2c757f6c155c86dc49e9af33c3cba3f9e491542"}, "downloads": -1, "filename": "hic3defdr-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a2efa67727451661bf44f18a4de43bf5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 91590, "upload_time": "2020-03-13T12:42:11", "upload_time_iso_8601": "2020-03-13T12:42:11.546833Z", "url": "https://files.pythonhosted.org/packages/b5/9f/b255b422f93228de8c04a2543b234265698bc52027b11b9004d9e37d67fc/hic3defdr-0.2.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0b71a9f3e227bbc2be3ed4c103e57657", "sha256": "9bd6a00d90a0119deaca945476686a719742761668499803b84843eec6a009b2"}, "downloads": -1, "filename": "hic3defdr-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0b71a9f3e227bbc2be3ed4c103e57657", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98056, "upload_time": "2020-03-13T12:42:13", "upload_time_iso_8601": "2020-03-13T12:42:13.096900Z", "url": "https://files.pythonhosted.org/packages/50/82/809c66918ee620690b24083c7dadf9ca8962e6f5b629c2680f3b4ab3cad2/hic3defdr-0.2.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2efa67727451661bf44f18a4de43bf5", "sha256": "d1e3d1a8b73b6acf8133a46ae2c757f6c155c86dc49e9af33c3cba3f9e491542"}, "downloads": -1, "filename": "hic3defdr-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a2efa67727451661bf44f18a4de43bf5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 91590, "upload_time": "2020-03-13T12:42:11", "upload_time_iso_8601": "2020-03-13T12:42:11.546833Z", "url": "https://files.pythonhosted.org/packages/b5/9f/b255b422f93228de8c04a2543b234265698bc52027b11b9004d9e37d67fc/hic3defdr-0.2.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0b71a9f3e227bbc2be3ed4c103e57657", "sha256": "9bd6a00d90a0119deaca945476686a719742761668499803b84843eec6a009b2"}, "downloads": -1, "filename": "hic3defdr-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0b71a9f3e227bbc2be3ed4c103e57657", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98056, "upload_time": "2020-03-13T12:42:13", "upload_time_iso_8601": "2020-03-13T12:42:13.096900Z", "url": "https://files.pythonhosted.org/packages/50/82/809c66918ee620690b24083c7dadf9ca8962e6f5b629c2680f3b4ab3cad2/hic3defdr-0.2.0.tar.gz"}]}