{"info": {"author": "Neha Gupta", "author_email": "nrg18@duke.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n<!-- Comment hi.  -->\n# DAME (Dynamic Almost Matching Exactly) and FLAME (Fast Large-scale Almost Matching Exactly)\n--------------------------------------------------\n\n## Overview of the DAME and FLAME algorithms\n\nThe **FLAME** algorithm provides a fast and large-scale matching approach to causal inference. **FLAME** quickly creates matches that include as many covariates as possible by iteratively dropping covariates that are successively less useful for predicting outcomes based on matching quality. \n\nThe **DAME** algorithm provides high-quality interpretable matches in causal inference. **DAME** creates matches of units that include as many covariates as possible by creating a heirarchy of covariate combinations on which to match, in the process solving an optimization problem for each unit in order to construct optimal matches. \n\nBoth **DAME** and **FLAME** are available for categorical covariates only. \n\nA **Hybrid FLAME-DAME** algorithm will use FLAME to quickly remove less relevant features, and then switch to DAME for its high-quality interpretable matches. This is recommended for datasets with many features. It scales well, without noticable loss in the quality of matches. \n\nBoth algorithms work well for data that fits in memory, and have thus far been tested on data sized up to 30,000 rows and 15 columns, which takes roughly 30 seconds on `FLAME` and roughly 45 seconds on `DAME`. An implementation for extremely large data sets will be provided at a later time. This implementation does include a variety of options for missing data handling.\n\nFor more details about these algorithms, please refer to their papers: [FLAME: A Fast Large-scale Almost Matching Exactly Approach to Causal Inference](https://arxiv.org/pdf/1707.06315.pdf) and [Interpretable Almost-Exact Matching for Causal Inference](https://arxiv.org/abs/1806.06802)\n\n## Installation\n\nInstall using the commandline tool of your choice from the  PyPi repository. \n$ pip install dame_flame\n\n``` Python\n\n# import package\nimport dame_flame\n\n# Run DAME\nx = dame_flame.DAME_FLAME.DAME(input_data=r\"dame_flame/data/sample.csv\",treatment_column_name='treated', outcome_column_name='outcome', adaptive_weights='ridge', holdout_data=1.0)\n```\n\n## Required data format\n\nThe `DAME-FLAME` package requires input data to have specific format. The input data can be either a file, or a **Python Pandas Data Frame**. However, all covariates in the input data should be categorical covariates, represented as an *integer* data type. If there are continuous covariates, please consider regrouping. In addition to input data columns, the input data must contain (1) A column indicating the outcome variable as an *integer* or *float* data type, and (2) A column specifying whether a unit is treated or control (treated = 1, control = 0) as an *integer* data type. There are no requirements for input data column names or order of columns. Below is an example of input data with n units and m covariates.\n\n\n*Column-name / unit-id*  | x_1 | x_2 |...| x_m | outcome | treated\n--- | --- | --- | --- | --- | --- | --- |\n**1** | 2 | 3 | ... | 4 | 9 | 0\n**2** | 1 | 3 | ... | 3 | 5.5 | 1\n**3** | 1 | 4 | ... | 5 | -1 | 0\n... | ... | ... | ... | ... | ... | ...\n**n** | 0 | 5 | ... | 0 | 1 | 1\n*Data Type*| *integer* | *integer* | *integer* | *integer* |  *numeric* | *0 or 1* |\n\nThe holdout training set, if provided, should also follow the same format.\n\n\n## Other requirements\n\n1.  `DAME-FLAME` requires installation of python, specifically with at least python 3.* version. If your computer system does not have python 3.*, install from [here](https://www.python.org/downloads/).\n\n2. Dependencies on the following packages: Pandas, Scikit learn, Numpy. If your python version does not have these packages, install from [here](https://packaging.python.org/tutorials/installing-packages/)\n\n## Example\n\nWe run the DAME function with the following basic command. In this example, we provide only the basic inputs: (1) input data as a dataframe or file, (2) the name of the outcome column, and (3) the name of the treatment column.\n\nThus the model defaults to a ridge regression  computation of the best covariate set to match on, with an alpha of 0.1, and uses 10% of the input data as the holdout data. \n\n```Python\nimport pandas as pd\nimport dame_flame\n\ndf = pd.read_csv(\"dame_flame/data/sample.csv\")\nresult = dame_flame.DAME_FLAME.DAME(input_data=df, treatment_column_name=\"treated\", outcome_column_name=\"outcome\", holdout_data=1.0)\nprint(result[0])\n#>   one two\n#> 1   1   1\n#> 2   1   *\n#> 3   1   1\n```\nresult is a list of size 2 or 3, where the first element in the list is of type **Data Frame**. The dataframe contains all of the units that were matched, and the covariates and corresponding values, that it was matched on. The covariates that each unit was not matched on is denoted with a \" * \" character. The list 'result' will have additional values based on additional optional parameters, detailed in additional documentation below. \n\nTo find the main matched group of a particular unit after DAME has been run, use the function *mmg_of_unit*\n\n```Python\nmmg = dame_flame.DAME_FLAME.mmg_of_unit(return_df=result[0], unit_id=2, input_data=df)\nprint(mmg)\n\n#>   one  outcome  treated\n#> 1    1        2        0\n#> 2    1        1        1\n#> 3    1        1        1\n```\n\nTo find the treatment effect of a unit, use the function *te_of_unit*\n\n\n```Python\nte = dame_flame.DAME_FLAME.te_of_unit(return_df=result[0], unit_id=2, input_data=df, treatment_column_name='treated', outcome_column_name='outcome')\nprint(te)\n#> -1.0\n```\n\n\n## DAME and FLAME Parameters and Defaults\n\n```Python\nDAME(input_data,\n         treatment_column_name = 'treated', weight_array = False,\n         outcome_column_name='outcome',\n         adaptive_weights='ridge', alpha = 0.1, holdout_data=False,\n         repeats=True, verbose=2, want_pe=True, early_stop_iterations=False, \n         stop_unmatched_c=False, early_stop_un_c_frac = 0.1, \n         stop_unmatched_t=False, early_stop_un_t_frac = 0.1,\n         early_stop_pe = False, early_stop_pe_frac = 0.01,\n         want_bf=False, early_stop_bf=False, early_stop_bf_frac = 0.01,\n         missing_indicator=numpy.nan, missing_data_replace=0,\n         missing_holdout_replace=0, missing_holdout_imputations = 10,\n         missing_data_imputations=0)\n\nFLAME(input_data,\n         treatment_column_name = 'treated', weight_array = False,\n         outcome_column_name='outcome',\n         adaptive_weights=False, alpha = 0.1, holdout_data=False,\n         repeats=True, verbose=2, want_pe=True, early_stop_iterations=False, \n         stop_unmatched_c=False, early_stop_un_c_frac = 0.1, \n         stop_unmatched_t=False, early_stop_un_t_frac = 0.1,\n         early_stop_pe = False, early_stop_pe_frac = 0.01,\n         want_bf=False, early_stop_bf=False, early_stop_bf_frac = 0.01, \n         pre_dame=False, missing_indicator=numpy.nan, missing_data_replace=0,\n         missing_holdout_replace=0, missing_holdout_imputations = 10,\n         missing_data_imputations=0, pre_dame=False)\n```\n\n### Key parameters\n\n**input_data**: file, DataFrame, required  \nThis is the data being matched. This is henceforth referred to as the matching data. \n\n**treatment_column_name**: string, optional (default=\"treated\")  \nThis is the name of the column with a binary indicator for whether a row is a treatment or control unit\n\n**outcome_column_name**: string, optional (default=\"outcome\")  \nThis is the name of the column with the outcome variable of each unit. \n\n**adaptive_weights**: bool, \"ridge\", \"decision tree\", optional (default=\"ridge\")  \nThe method used to decide what covariate set is optimal to drop.\n\n**weight_array**: array, optional  \nIf adaptive_weights = False, these are the weights to the covariates in the dataframe, for the non-adaptive version of DAME. Must sum to 1. \n\n**alpha**: float, optional (default=0.1)  \nIf adaptive_weights version is ridge, this is the alpha for ridge regression.\n\n**holdout_data**: file, DataFrame, float between 0 and 1, optional (Default = 0.1)\nIf doing an adaptive_weights version of DAME, this is used to decide what covariates to drop. The default is to use 10% of the input_data set. Users can specify a percentage of the matching data set to use, or use a different file. If using a different file, that file needs to have all of the same column labels, including treatment and outcome columns.\n\n**repeats**: Bool, optional (default=False)  \nWhether or not values for whom a main matched has been found can be used again, and placed in an auxiliary matched group  \n\n\n**verbose**: int 0,1,2,3 (default=2)  \nStyle of printout while algorithm runs.\nIf 0, no output \nIf 1, provides iteration number \n2 provides iteration number and number of units left to match on every 10th iteration\n3 does this print on every iteration. \n\n\n**want_pe**: bool, optional (default=False)  \nIf true, the output of the algorithm will include the predictive error of the covariate sets matched on in each iteration.\n\n\n**want_bf**: bool, optional (default=False)  \nIf true, the output will include the balancing factor of each iteration.\n\n\n**pre_dame**: bool, integer, optional (default=False)  \nThis is only an option for FLAME, and will allow a user to run the Hybrid-FLAME-DAME algorithm. If an integer n is provided, then after n iterations of FLAME, the algorithm will switch to DAME.\nIf the user enters 'True', then one iteration of FLAME will happen before switching to DAME. \n\n\n### Parameters related to missing data handling\n\nA variety of built-in options for missing data handling functionality is available to users.\n\nThe fastest option is to exclude missing values for each unit in the matching dataset, and drop missing units entirely from the holdout dataset.\nThe units with missing values would still be placed in a group, but the covariates for which they\nhave missing data wouldn't be used to find their group. Holdout missing data would\nbe dropped.  These are parameters missing_holdout_replace=1, missing_data_replace=2. \n\nIf missing data is detected, but the user has not specified a handling technique, then\n(does it quit?) \n\n**missing_indicator**: character, integer, numpy.nan, optional (default=numpy.nan)  \nThis is the indicator for missing data in the dataset. \n\n**missing_holdout_replace**: int 0,1,2, optional (default=0)  \nif 0, assume no missing holdout data and proceed\nif 1, removes all units with a missing value from the holdout dataset\nif 2, do MICE on holdout dataset. This is not recommended. If this option is selected, it will be done for a number of iterations equal to missing_holdout_imputations.\n\n**missing_data_replace**: int 0,1,2,3, optional, (default=0)  \nif 0, assume no missing data in matching data and proceed\nif 1, units that have missing values are not matched on, and therefore will not have their own main matched group, or be placed in other units' groups.\nif 2, units that have missing values are still matched on, but the covariates they are missing are not used in computing their match. \nif 3, do MICE on matching dataset for the number of iterations equal to missing_data_imputatations\n\n**missing_holdout_imputatations**: int, optional (default=10)  \nIf missing_holdout_replace=2, the number of imputations\n\n**missing_data_imputations**: int, optional (default=0)  \nIf missing_data_replace=3, the number of imputations. \n\n\n###  Parameters related to early stopping criteria\n\n\n**early_stop_iterations**: int, optional  (default=0)  \nIf provided, a number of iterations after which to hard stop the algorithm\n\n**stop_unmatched_c**: bool, optional (default=False)  \nIf True, then the algorithm terminates when there are no more control units to match. \n\n**stop_unmatched_t**: bool, optional (default=True)  \nIf True, then the algorithm terminates when there are no more treatment units to match. \n\n**early_stop_un_c_frac**: float from 0.0 to 1.0, optional (default=0.1)  \nThis provides a fraction of unmatched control units. When the threshold is met, the algorithm will stop iterating. \nFor example, an input dataset with 100 control units will stop when 10 control units are ummatched but 90 are matched.\n\n**early_stop_un_t_frac**: float from 0.0 to 1.0, optional (default=0.1)\nThis provides a fraction of unmatched treatment units. When the threshold is met, the algorithm will stop iterating. \nFor example, an input dataset with 100 treatment units will stop when 10 control units are ummatched but 90 are matched.\n\n\n**early_stop_pe**: bool, optional (default=False)  \nIf this is true, then if the covariate set chosen to match on has a predictive error lower than the parameter early_stop_pe_frac, the algorithm will stop. \n\n**early_stop_pe_frac**: float, optional (default=0.01)  \nIf early_stop_pe is true, then if the covariate set chosen to match on has a predictive error lower than this value, the algorithm will stop.  \n\n**early_stop_bf**: bool, optional (default=False)  \nIf this is true, then if the covariate set chosen to match on has a balancing factor lower than early_stop_bf_frac, then the algorithm will stop.\n\n**early_stop_bf_frac**: float, optional (default=0.01)  \nIf early_stop_bf is true, then if the covariate set chosen to match on has a balancing factor lower than this value, then the algorithm will stop.\n\n## Additional Functions Parameters and Defaults\n\n\n```Python\n# The main matched group of a unit\nmmg_of_unit(return_df, unit_id, input_data, output_style=1)\n\n# The treatment effect of a unit\nte_of_unit(return_df, unit_id, input_data, treatment_column_name, outcome_column_name)\n\n# Both the main matched group and the treatment effect of a unit \nmmg_and_te_of_unit(return_df, unit_id, input_data, treatment_column_name, outcome_column_name, return_vals=0)\n```\n\n### Parameters \n\n**return_df**: Python Pandas Dataframe, required (no default).\nThis is the dataframe containing all of the matches, or the first and main output from `FLAME` or `DAME`\n\n**unit_id**: int, required (no default).\nThis is the unit for which the main matched group or treatment effect is being calculated\n\n**output_style**: int, optional (default=1):\nIn the mmg_of_unit function, if this is 1 then the main matched group will only display covariates that were used in matching for each unit. The output dataframe will have a ' * ' character in the column for each unit that was not matched on that covariate.\nIf this value is 2, then the dataframe will contain complete values and no ' * ' characters.\n\n**return_vals**: int, optional (default=0):\nIn mmg_and_te_of_unit, if this is 1 then the values will print in a pretty way rather than outputting. \n\n## Additional Technical Notes\n\n### Missing Data Handling\n\nFor details on the MICE algorithm, see : [this paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3074241/)\nThe underlying MICE implementation is done using scikit learn's experimental IterativeImpute package, \nand relies on DecisionTreeRegressions in the imputation process, to ensure that the data generated\nis fit for unordered categorical data. In addition to this, users are welcome to pre-process their datsets with other data handling techniques\nprior to using MICE. It is not recommended to use MICE on the holdout dataset, as this would be very slow.  \n\nOne option is to have the parameter missing_data_replace=2, where units that have missing values are still matched on, but the covariates they are missing are not used in computing their match. \nIn this option, the underlying algorithm works by replacing each missing value with a unique value, so that in the matching procedure, those covariates simply don't have a match because their\nvalues are not equl to any other values.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/almost-matching-exactly/DAME-Python-Package", "keywords": "Causal Inference Matching Covariates FLAME DAME", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dame-flame", "package_url": "https://pypi.org/project/dame-flame/", "platform": "", "project_url": "https://pypi.org/project/dame-flame/", "project_urls": {"Homepage": "https://github.com/almost-matching-exactly/DAME-Python-Package"}, "release_url": "https://pypi.org/project/dame-flame/0.1/", "requires_dist": ["scikit-learn (>=0.21.3)", "scipy (>=0.14)", "pandas (>=0.11.0)", "numpy (>=1.6.1)"], "requires_python": ">=3.6", "summary": "Causal Inference Covariate Matching", "version": "0.1"}, "last_serial": 6966523, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4e181744fa527deac330968c101ace6b", "sha256": "0c97a1b84473fb8fd2efc8fbf33d7c88ad590049918a34f528f9938219449a5a"}, "downloads": -1, "filename": "dame_flame-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e181744fa527deac330968c101ace6b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29278, "upload_time": "2020-04-07T04:53:14", "upload_time_iso_8601": "2020-04-07T04:53:14.730872Z", "url": "https://files.pythonhosted.org/packages/d2/bb/25f1887bb6849d9037ac884e43861e0c476dcae2f5505438268d10e9f7fa/dame_flame-0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "9949771ba9c192403be944ed798fd6a2", "sha256": "8fcd30f54c76e5086de1c6e09f8b6369bd9c406564d51a83f50a7f38d77a9e98"}, "downloads": -1, "filename": "dame_flame-0.1.tar.gz", "has_sig": false, "md5_digest": "9949771ba9c192403be944ed798fd6a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24227, "upload_time": "2020-04-07T04:53:16", "upload_time_iso_8601": "2020-04-07T04:53:16.949520Z", "url": "https://files.pythonhosted.org/packages/d6/3a/e476db6fbd062baf633b786eae15596e027d7652001e8eb780ffbf58fe52/dame_flame-0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e181744fa527deac330968c101ace6b", "sha256": "0c97a1b84473fb8fd2efc8fbf33d7c88ad590049918a34f528f9938219449a5a"}, "downloads": -1, "filename": "dame_flame-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e181744fa527deac330968c101ace6b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29278, "upload_time": "2020-04-07T04:53:14", "upload_time_iso_8601": "2020-04-07T04:53:14.730872Z", "url": "https://files.pythonhosted.org/packages/d2/bb/25f1887bb6849d9037ac884e43861e0c476dcae2f5505438268d10e9f7fa/dame_flame-0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "9949771ba9c192403be944ed798fd6a2", "sha256": "8fcd30f54c76e5086de1c6e09f8b6369bd9c406564d51a83f50a7f38d77a9e98"}, "downloads": -1, "filename": "dame_flame-0.1.tar.gz", "has_sig": false, "md5_digest": "9949771ba9c192403be944ed798fd6a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24227, "upload_time": "2020-04-07T04:53:16", "upload_time_iso_8601": "2020-04-07T04:53:16.949520Z", "url": "https://files.pythonhosted.org/packages/d6/3a/e476db6fbd062baf633b786eae15596e027d7652001e8eb780ffbf58fe52/dame_flame-0.1.tar.gz"}]}