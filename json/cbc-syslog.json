{"info": {"author": "Carbon Black Developer Network", "author_email": "cb-developer-network@vmware.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "# Carbon Black Cloud Syslog Connector\n\nThis connector allows you to forward alert notifications and audit logs from your Carbon Black Cloud instance \ninto local, on-premise systems that accept industry standard syslog notifications. By default, it will generate \npipe-delimited syslog messages containing the key metadata associated with any alert identified by the Cb Defense \nstreaming prevention system.\n\nThe syslog connector will aggregate data from one or more Carbon Black Cloud organizations into a single syslog stream.\nThe connector can be configured to use UDP, TCP, or encrypted (TCP over TLS) syslog protocols.\n\nThis connector is distributed as a pip package compatible with Python 2.7, running on a 64-bit Intel platform.\n\n## System Requirments:\n\n1. Python 2.7\n2. pip \n\n## Installation\n\n1. Navigate to the Python 2.7 package location `/python2.7/site-packages/cbc_syslog`\n\n2. Copy and paste the Configuration File example shown below into your own `.conf` file and modify it to your own \nspecifications. Below is a table of all the configurable inputs that can be used in the syslog connector.\n\n    | Input      | Required | Description |     \n    | ----------- | ----------- | ----------- | \n    | template      | Y       | Template for syslog output.      |\n    | back_up_dir      | Y       | Location of the Backup Directory. This will be the location of back up files in the event that results fail to send to Syslog      |\n    | policy_action_severity      | Y       | This sets the default severity level for POLICY_ACTION notifications. By default it is 4.      |\n    | output_format      | Y       | Output format of the data sent. Currently support json, leef, and cef formats      |\n    | output_type      | Y       | Configures the specific output. Valid options are: 'udp', 'tcp', 'tcp+tls', 'http'      |\n    | tcpout      | Y       | Output Type: IP:port      |\n    | udp_out      | Y       | Output Type: IP:port      |\n    | http_out      | Y       | Output Type: http/https endpoint - ie https://server.company.com/endpoint      |\n    | http_headers      | Y       | Required if using http: {'key1': 'value1', 'key2': 'value2'}     |\n    | https_ssl_verify      | Y       | Required if using http: True or False      |\n    | requests_ca_cert      | N       | Override ca file for self signed certificates when using https      |\n    | ca_cert      | N       | Specifies a file containing PEM-encoded CA certificates for verifying the peer server when using TLS+TCP syslog      |\n    | cert      | N       | Specifies a file containing PEM-encoded client certificate for verifying this client when using TLS+TCP syslog      |\n    | key      | N       | Specifies a file containing PEM-encoded private key for verifying this client when using TLS+TCP syslog      |\n    | key_password      | N       | Specifies the password to decrypt the given private key when using TLS+TCP syslog      |\n    | tls_verify      | N       |  True or False      |\n    | api_connector_id      | Y       | API Connector ID      |\n    | api_key      | Y       | API Key      |\n    | siem_connector_id      | Y       | SIEM Connector ID      |\n    | siem_api_key      | Y       |  SIEM Key      |\n    | server_url      | Y       | Server URL      |\n\n3. Create a `.txt` file for Logs.\n\n4. Test the new connector.:\n\n    Verify that you are running Python 2.7:\n\n    ```\n    python --version \n    ```\n\n   Then run the following command:\n\n    ```\n    python cb_defense_syslog.py -l [LOG_FILE_LOCATION] -c [CONFIG_FILE_LOCATION]\n    ```\n\n    A successful run will look like:\n\n    ```\n    INFO:__main__:CB Defense Syslog 1.0\n    INFO:__main__:Number of files in store forward: 0\n    INFO:__main__:Found 2 Cb Defense Servers in config file\n    INFO:__main__:Handling notifications for https://defense-test03.cbdtest.io\n    INFO:notifications:Attempting to connect to url: https://defense-test03.cbdtest.io\n    INFO:notifications:<Response [200]>\n    INFO:notifications:successfully connected, no alerts at this time\n    INFO:__main__:Sending Notifications\n    INFO:__main__:There are no messages to forward to host\n    INFO:__main__:Done Sending Notifications\n    INFO:__main__:Sending Audit Logs\n    INFO:__main__:Sending 18 messages to 00.00.000.00:000\n    INFO:__main__:Done Sending Audit Logs\n    INFO:__main__:Handling notifications for https://defense-eap01.conferdeploy.net\n    INFO:notifications:Attempting to connect to url: https://defense-eap01.conferdeploy.net\n    INFO:notifications:<Response [200]>\n    INFO:__main__:Sending Notifications\n    INFO:__main__:Sending 3 messages to 00.00.000.00:000\n    INFO:__main__:Done Sending Notifications\n    INFO:__main__:Sending Audit Logs\n    INFO:__main__:Sending 24 messages to 00.00.000.00:000\n    INFO:__main__:Done Sending Audit Logs\n    ```\n## Sample Config File\n\n    [general]\n\n    #\n    # Template for syslog output.\n    # This is a jinja 2 template\n    # NOTE: The source variable corresponds to the Cb Defense Server used to retrieve results\n    #\n    template = {{source}} {{version}}|{{vendor}}|{{product}}|{{dev_version}}|{{signature}}|{{name}}|{{severity}}|{{extension}}\n\n    #\n    #Location of the Backup Directory\n    #This will be the location of back up files in the event that results fail to send to Syslog\n    #\n\n    back_up_dir = /Users/jdoe/Documents/\n\n    #\n    # This sets the default severity level for POLICY_ACTION notifications.  By default it is 4.\n    #\n    # 0 - Emergency: System is unusable.\n    #\n    # 1 - Alert: Action must be taken immediately.\n    #\n    # 2 - Critical: Critical conditions.\n    #\n    # 3 - Error: Error conditions.\n    #\n    # 4 - Warning: Warning conditions.\n    #\n    # 5 - Notice: Normal but significant condition.\n    #\n    # 6 - Informational: Informational messages.\n    #\n    # 7 - Debug: Debug-level messages.\n    #\n    policy_action_severity = 4\n\n\n    #\n    # Output format of the data sent. Currently support json or cef formats\n    #\n    # Warning: if using json output_format, we recommend NOT using UDP output_type\n    #\n    output_format=cef\n\n    #\n    # Configure the specific output.\n    # Valid options are: 'udp', 'tcp', 'tcp+tls', 'http'\n    #\n    #  udp     - Have the events sent over a UDP socket\n    #  tcp     - Have the events sent over a TCP socket\n    #  tcp+tls - Have the events sent over a TLS+TCP socket\n    #  http    - Have the events sent over a HTTP connection\n    #\n    output_type=tcp\n\n    #\n    # tcpout=IP:port - ie 1.2.3.5:514\n    #\n    tcp_out=\n\n    #\n    # udpout=IP:port - ie 1.2.3.5:514\n    #\n    udp_out=\n\n    #\n    # httpout=http/https endpoint - ie https://server.company.com/endpoint\n    # http_headers= {'key1': 'value1', 'key2': 'value2'} - ie {'content-type': 'application/json'}\n    # https_ssl_verify = True or False\n    #\n    http_out=\n    http_headers= {'content-type': 'application/json'}\n    https_ssl_verify=True\n\n    #\n    # Override ca file for self signed certificates when using https\n    # This is typically a .pem file\n    #\n    #requests_ca_cert=/usr/share/cb/integrations/cb-defense-syslog/cert.pem\n\n    [tls]\n\n    #\n    # Specify a file containing PEM-encoded CA certificates for verifying the peer server when using TLS+TCP syslog\n    #\n    #ca_cert = /etc/cb/integrations/cb-defense/ca.pem\n\n    #\n    # Optionally specify a file containing PEM-encoded client certificate for verifying this client when using TLS+TCP syslog\n    # If cert is specified, key is a required parameter\n    #\n    #cert = /etc/cb/integrations/cb-defense/cert.pem\n\n    #\n    # Optionally specify a file containing PEM-encoded private key for verifying this client when using TLS+TCP syslog\n    # If key is specified, cert is a required parameter\n    #\n    #key = /etc/cb/integrations/cb-defense/cert.key\n\n    #\n    # Optionally specify the password to decrypt the given private key when using TLS+TCP syslog\n    #\n    #key_password = p@ssw0rd1\n\n    #\n    # Uncomment tls_verify and set to \"false\" in order to disable verification of the peer server certificate\n    #\n    #tls_verify = true\n\n    [cbdefense1]\n\n    #\n    # Cb Defense API Connector ID\n    #\n    api_connector_id = GO5M953111\n\n    #\n    # Cb Defense API Key\n    #\n    api_key = BYCRM7BRNSH0CXZR5V1Y3111\n\n    #\n    # Cb Defense SIEM Connector ID\n    #\n    siem_connector_id = UEUWR4U111\n\n    #\n    # Cb Defense SIEM Key\n    #\n    siem_api_key = XNS5UKWZXZMCC3CYC7DFM111\n\n    #\n    # Cb Defense Server URL\n    # NOTE: this is not the url to the web ui, but to the API URL (for example, https://api-prod05.conferdeploy.net)\n    #\n    server_url = https://server1.yourcompany.com\n\n    #\n    # For more than one Cb Defense Server, add another server using the following template including the stanza\n    #\n    #[cbdefenseserver2]\n    #api_connector_id = KJARWBZ111\n    #api_key = CQF35EIH2WDF69PTWKGC4111\n    #server_url = https://server2.yourcompany.com\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/carbonblack/cb-defense-syslog-tls", "keywords": "carbonblack", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cbc-syslog", "package_url": "https://pypi.org/project/cbc-syslog/", "platform": "", "project_url": "https://pypi.org/project/cbc-syslog/", "project_urls": {"Homepage": "https://github.com/carbonblack/cb-defense-syslog-tls"}, "release_url": "https://pypi.org/project/cbc-syslog/1.0.0/", "requires_dist": ["Jinja2 (>=2.8.1)", "MarkupSafe (==1.1.1)", "requests (==2.22.0)", "Flask (==1.1.1)"], "requires_python": "", "summary": "Syslog Connector for the Carbon Black Cloud", "version": "1.0.0"}, "last_serial": 6612111, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a376c03432a788279a4c634a466cc9c7", "sha256": "d6a58fcefe7880abd1782eac7f486d986ebe63d958d3a8c4792d2a4dea959c0b"}, "downloads": -1, "filename": "cbc_syslog-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "a376c03432a788279a4c634a466cc9c7", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 398751, "upload_time": "2020-02-11T21:10:46", "upload_time_iso_8601": "2020-02-11T21:10:46.702699Z", "url": "https://files.pythonhosted.org/packages/b1/59/d6b76ddc19d9d2e4e819a0ef7262c72ae2a9c971aa2a0061a98273f805ea/cbc_syslog-1.0.0-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "572a545ce9dcd89e7d5f7f449127ebed", "sha256": "0a1d87fb55bce35f874ff8c837279646fd59a82de2b5d33ba2424a2c0d5f84e1"}, "downloads": -1, "filename": "cbc_syslog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "572a545ce9dcd89e7d5f7f449127ebed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236176, "upload_time": "2020-02-11T21:10:48", "upload_time_iso_8601": "2020-02-11T21:10:48.510784Z", "url": "https://files.pythonhosted.org/packages/69/c9/9383e145afc3411e64e85ab40efbfbc5981e6c8d64695d6407d2302a8085/cbc_syslog-1.0.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a376c03432a788279a4c634a466cc9c7", "sha256": "d6a58fcefe7880abd1782eac7f486d986ebe63d958d3a8c4792d2a4dea959c0b"}, "downloads": -1, "filename": "cbc_syslog-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "a376c03432a788279a4c634a466cc9c7", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 398751, "upload_time": "2020-02-11T21:10:46", "upload_time_iso_8601": "2020-02-11T21:10:46.702699Z", "url": "https://files.pythonhosted.org/packages/b1/59/d6b76ddc19d9d2e4e819a0ef7262c72ae2a9c971aa2a0061a98273f805ea/cbc_syslog-1.0.0-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "572a545ce9dcd89e7d5f7f449127ebed", "sha256": "0a1d87fb55bce35f874ff8c837279646fd59a82de2b5d33ba2424a2c0d5f84e1"}, "downloads": -1, "filename": "cbc_syslog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "572a545ce9dcd89e7d5f7f449127ebed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236176, "upload_time": "2020-02-11T21:10:48", "upload_time_iso_8601": "2020-02-11T21:10:48.510784Z", "url": "https://files.pythonhosted.org/packages/69/c9/9383e145afc3411e64e85ab40efbfbc5981e6c8d64695d6407d2302a8085/cbc_syslog-1.0.0.tar.gz"}]}