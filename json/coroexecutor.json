{"info": {"author": "Caleb Hattingh", "author_email": "caleb.hattingh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": ".. image:: https://github.com/cjrh/coroexecutor/workflows/Python%20application/badge.svg\n    :target: https://github.com/cjrh/coroexecutor/actions\n\n.. image:: https://img.shields.io/badge/stdlib--only-yes-green.svg\n    :target: https://img.shields.io/badge/stdlib--only-yes-green.svg\n\n.. image:: https://coveralls.io/repos/github/cjrh/coroexecutor/badge.svg?branch=master\n    :target: https://coveralls.io/github/cjrh/coroexecutor?branch=master\n\n.. image:: https://img.shields.io/pypi/pyversions/coroexecutor.svg\n    :target: https://pypi.python.org/pypi/coroexecutor\n\n.. image:: https://img.shields.io/github/tag/cjrh/coroexecutor.svg\n    :target: https://img.shields.io/github/tag/cjrh/coroexecutor.svg\n\n.. image:: https://img.shields.io/badge/install-pip%20install%20coroexecutor-ff69b4.svg\n    :target: https://img.shields.io/badge/install-pip%20install%20coroexecutor-ff69b4.svg\n\n.. image:: https://img.shields.io/pypi/v/coroexecutor.svg\n    :target: https://img.shields.io/pypi/v/coroexecutor.svg\n\n.. image:: https://img.shields.io/badge/calver-YYYY.MM.MINOR-22bfda.svg\n    :target: http://calver.org/\n\n**ALPHA**\n\ncoroexecutor\n============\n\nProvides an ``Executor`` interface for running a group of coroutines\ntogether in asyncio-native applications.\n\nDemo\n----\n\n.. code-block:: python3\n\n    import asyncio\n    from coroexecutor import CoroutineExecutor\n\n    async def f(dt):\n        await asyncio.sleep(dt)\n\n    async def main():\n        async with CoroutineExecutor() as exe:\n            t1 = exe.submit(f, 0.01)\n            t2 = exe.submit(f, 0.05)\n\n        assert t1.done()\n        assert t2.done()\n\n    asyncio.run(main())\n\nDiscussion\n----------\n\nThe ``Executor`` interface can't be exactly matched because\nsome functions in this interface need to be ``async`` functions. But we\ncan get close.\n\nSome ideas from Trio's *nurseries* have been used as inspiration:\n\n- The ``CoroutineExecutor`` waits until all submitted jobs are complete.\n- If any jobs raise an exception, all other unfinished jobs are cancelled\n  (they with have `CancelledError` raised inside them), and\n  ``CoroutineExecutor`` re-raises that same exception.\n\nExamples\n--------\n\nUsing ``map``\n^^^^^^^^^^^^^\n\nThe ``concurrent.futures.Executor`` interface also defines ``map()`` which\nreturns an iterator. However, it makes for sense for us to use an\n*asynchronous generator* for this purpose. Here's an example from the tests:\n\n.. code-block:: python3\n\n    times = [0.01, 0.02, 0.03]\n\n    async def f(dt):\n        await asyncio.sleep(dt)\n        return dt\n\n    async def main():\n        async with CoroutineExecutor() as exe:\n            results = exe.map(f, times)\n            assert [v async for v in results] == times\n\n    run(main())\n\nYou can see how ``async for`` is used to asynchronously loop over the\nresult from calling ``map``.\n\nIf one of the function calls raises an error, all unfinished calls will\nbe cancelled, but you may still have received partial results. Here's\nanother example from the tests:\n\n.. code-block:: python3\n\n    times = [0.01, 0.02, 0.1, 0.2]\n    results = []\n\n    async def f(dt):\n        await asyncio.sleep(dt)\n        if dt == 0.1:\n            raise Exception('oh noes')\n        return dt\n\n    async def main():\n        async with CoroutineExecutor() as exe:\n            async for r in exe.map(f, times):\n                results.append(r)\n\n    with pytest.raises(Exception):\n        run(main())\n\n    assert results == [0.01, 0.02]\n\nThe first two values of the batch finish quickly, and I saved these to the\n``results`` list in the outer scope. Then, one of the jobs fails with\nan exception. This results in the other pending jobs being cancelled (i.e.,\nthe \"0.2\" case in this example), the ``CoroutineExecutor`` instance\nre-raising the exception, and in this example, the exception raises all\nthe way out to the invocation of the ``run()`` function itself. However,\nnote that we still have the results from jobs that succeeded.\n\nTimeouts\n^^^^^^^^\n\nIt seems convenient to let the ``CoroutineExecutor`` also apply timeouts\nto the batch of jobs it manages. After all, it already manages the jobs,\nso cancelling them all when a timeout is triggered seems like little\nextra work.\n\nThis is how timeouts look (again, taken from one of the tests):\n\n.. code-block:: python3\n\n    tasks = []\n\n    async def f(dt):\n        await asyncio.sleep(dt)\n\n    async def main():\n        async with CoroutineExecutor(timeout=0.05) as exe:\n            t1 = exe.submit(f, 0.01)\n            t2 = exe.submit(f, 5)\n            tasks.extend([t1, t2])\n\n    with pytest.raises(asyncio.TimeoutError):\n        run(main())\n\n    t1, t2 = tasks\n    assert t1.done() and not t1.cancelled()\n    assert t2.done() and t2.cancelled()\n\nInside the executor, there is a fast job and a slow job. The timeout will\nbe applied after the fast one completes, but before the slow one completes.\nThe raised ``TimeoutError`` will cancel the slow job, and will be raised\nout of the executor, and indeed all the way to the ``run()`` function (in\nthis example).\n\nNesting\n^^^^^^^\n\nYou don't always have to submit tasks to the executor in a single function.\nThe executor instance can be passed around and work can be added to it\nfrom several different places.\n\n.. code-block:: python3\n\n    from random import random\n\n    async def f(dt):\n        await asyncio.sleep(dt)\n\n    async def producer1(executor: CoroutineExecutor):\n        executor.submit(f, random())\n        executor.submit(f, random())\n        executor.submit(f, random())\n\n    async def producer2(executor: CoroutineExecutor):\n        executor.submit(f, random())\n        executor.submit(f, random())\n        executor.submit(f, random())\n\n    async def main():\n        async with CoroutineExecutor(timeout=0.5) as executor:\n            executor.submit(f, random())\n            executor.submit(f, random())\n            executor.submit(f, random())\n\n            executor.submit(producer1, executor)\n            executor.submit(producer2, executor)\n\n    run(main())\n\nYou can not only submit jobs within the executor context manager, but also\npass the instance around and collect jobs from other functions too. And the\ntimeout set when creating the ``CoroutineExecutor`` instance will still\nbe applied.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cjrh/coroexecutor", "keywords": "asyncio executor", "license": "", "maintainer": "", "maintainer_email": "", "name": "coroexecutor", "package_url": "https://pypi.org/project/coroexecutor/", "platform": "", "project_url": "https://pypi.org/project/coroexecutor/", "project_urls": {"Homepage": "https://github.com/cjrh/coroexecutor"}, "release_url": "https://pypi.org/project/coroexecutor/2019.11.1/", "requires_dist": ["check-manifest ; extra == 'dev'", "pygments ; extra == 'dev'", "wheel ; extra == 'dev'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": "", "summary": "A coroutine-based Executor implementation", "version": "2019.11.1"}, "last_serial": 6223177, "releases": {"2019.11.1": [{"comment_text": "", "digests": {"md5": "0f254f6f11022aced2129323c571cab8", "sha256": "f9eda2bf5a3589282d4f508585b4c879e247c637cb865ae086dcb0e75c0a06cc"}, "downloads": -1, "filename": "coroexecutor-2019.11.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0f254f6f11022aced2129323c571cab8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8715, "upload_time": "2019-12-01T03:04:57", "upload_time_iso_8601": "2019-12-01T03:04:57.001705Z", "url": "https://files.pythonhosted.org/packages/27/52/83b23e56fbe34485056f5a2a0813c832cf161740ef297d9eff8a9e371d8f/coroexecutor-2019.11.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "afbf866e47bf134b3197d99ce78668d2", "sha256": "edf947d3a44bc81f11d2eb71fdea22e9630695a9ae7c7a6524f65956b8214837"}, "downloads": -1, "filename": "coroexecutor-2019.11.1.tar.gz", "has_sig": false, "md5_digest": "afbf866e47bf134b3197d99ce78668d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8773, "upload_time": "2019-12-01T03:04:59", "upload_time_iso_8601": "2019-12-01T03:04:59.754129Z", "url": "https://files.pythonhosted.org/packages/db/12/63c31aba4896918ab9d3d57d252eb06cec198b697c2c137c94222d052665/coroexecutor-2019.11.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f254f6f11022aced2129323c571cab8", "sha256": "f9eda2bf5a3589282d4f508585b4c879e247c637cb865ae086dcb0e75c0a06cc"}, "downloads": -1, "filename": "coroexecutor-2019.11.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0f254f6f11022aced2129323c571cab8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8715, "upload_time": "2019-12-01T03:04:57", "upload_time_iso_8601": "2019-12-01T03:04:57.001705Z", "url": "https://files.pythonhosted.org/packages/27/52/83b23e56fbe34485056f5a2a0813c832cf161740ef297d9eff8a9e371d8f/coroexecutor-2019.11.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "afbf866e47bf134b3197d99ce78668d2", "sha256": "edf947d3a44bc81f11d2eb71fdea22e9630695a9ae7c7a6524f65956b8214837"}, "downloads": -1, "filename": "coroexecutor-2019.11.1.tar.gz", "has_sig": false, "md5_digest": "afbf866e47bf134b3197d99ce78668d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8773, "upload_time": "2019-12-01T03:04:59", "upload_time_iso_8601": "2019-12-01T03:04:59.754129Z", "url": "https://files.pythonhosted.org/packages/db/12/63c31aba4896918ab9d3d57d252eb06cec198b697c2c137c94222d052665/coroexecutor-2019.11.1.tar.gz"}]}