{"info": {"author": "Mikhail Grankin", "author_email": "mv.grankin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# TabNet for fastai\n> This is an adaptation of TabNet (Attention-based network for tabular data) for fastai (>=2.0) library. The original paper https://arxiv.org/pdf/1908.07442.pdf. The implementation is taken from here https://github.com/dreamquark-ai/tabnet\n\n\n## Install\n\n`pip install fast_tabnet`\n\n## How to use\n\n`model = TabNetModel(emb_szs, n_cont, out_sz, embed_p=0., y_range=None, \n                     n_d=8, n_a=8,\n                     n_steps=3, gamma=1.3, \n                     n_independent=2, n_shared=2, epsilon=1e-15,\n                     virtual_batch_size=128, momentum=0.02)`\n\nParameters `emb_szs, n_cont, out_sz, embed_p, y_range` are the same as for fastai TabularModel.\n\n- n_d : int\n    Dimension of the prediction  layer (usually between 4 and 64)\n- n_a : int\n    Dimension of the attention  layer (usually between 4 and 64)\n- n_steps: int\n    Number of sucessive steps in the newtork (usually betwenn 3 and 10)\n- gamma : float\n    Float above 1, scaling factor for attention updates (usually betwenn 1.0 to 2.0)\n- momentum : float\n    Float value between 0 and 1 which will be used for momentum in all batch norm\n- n_independent : int\n    Number of independent GLU layer in each GLU block (default 2)\n- n_shared : int\n    Number of independent GLU layer in each GLU block (default 2)\n- epsilon: float\n    Avoid log(0), this should be kept very low\n\n\n## Example\n\nBelow is an example from fastai library, but the model in use is TabNet\n\n```python\nfrom fastai2.basics import *\nfrom fastai2.tabular.all import *\nfrom fast_tabnet.core import *\n```\n\n```python\npath = untar_data(URLs.ADULT_SAMPLE)\ndf = pd.read_csv(path/'adult.csv')\ndf_main,df_test = df.iloc[:10000].copy(),df.iloc[10000:].copy()\ndf_main.head()\n```\n\n\n\n\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>workclass</th>\n      <th>fnlwgt</th>\n      <th>education</th>\n      <th>education-num</th>\n      <th>marital-status</th>\n      <th>occupation</th>\n      <th>relationship</th>\n      <th>race</th>\n      <th>sex</th>\n      <th>capital-gain</th>\n      <th>capital-loss</th>\n      <th>hours-per-week</th>\n      <th>native-country</th>\n      <th>salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>49</td>\n      <td>Private</td>\n      <td>101320</td>\n      <td>Assoc-acdm</td>\n      <td>12.0</td>\n      <td>Married-civ-spouse</td>\n      <td>NaN</td>\n      <td>Wife</td>\n      <td>White</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>1902</td>\n      <td>40</td>\n      <td>United-States</td>\n      <td>&gt;=50k</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>44</td>\n      <td>Private</td>\n      <td>236746</td>\n      <td>Masters</td>\n      <td>14.0</td>\n      <td>Divorced</td>\n      <td>Exec-managerial</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>Male</td>\n      <td>10520</td>\n      <td>0</td>\n      <td>45</td>\n      <td>United-States</td>\n      <td>&gt;=50k</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38</td>\n      <td>Private</td>\n      <td>96185</td>\n      <td>HS-grad</td>\n      <td>NaN</td>\n      <td>Divorced</td>\n      <td>NaN</td>\n      <td>Unmarried</td>\n      <td>Black</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>0</td>\n      <td>32</td>\n      <td>United-States</td>\n      <td>&lt;50k</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>38</td>\n      <td>Self-emp-inc</td>\n      <td>112847</td>\n      <td>Prof-school</td>\n      <td>15.0</td>\n      <td>Married-civ-spouse</td>\n      <td>Prof-specialty</td>\n      <td>Husband</td>\n      <td>Asian-Pac-Islander</td>\n      <td>Male</td>\n      <td>0</td>\n      <td>0</td>\n      <td>40</td>\n      <td>United-States</td>\n      <td>&gt;=50k</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>42</td>\n      <td>Self-emp-not-inc</td>\n      <td>82297</td>\n      <td>7th-8th</td>\n      <td>NaN</td>\n      <td>Married-civ-spouse</td>\n      <td>Other-service</td>\n      <td>Wife</td>\n      <td>Black</td>\n      <td>Female</td>\n      <td>0</td>\n      <td>0</td>\n      <td>50</td>\n      <td>United-States</td>\n      <td>&lt;50k</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n```python\ncat_names = ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race']\ncont_names = ['age', 'fnlwgt', 'education-num']\nprocs = [Categorify, FillMissing, Normalize]\nsplits = RandomSplitter()(range_of(df_main))\n```\n\n```python\nto = TabularPandas(df_main, procs, cat_names, cont_names, y_names=\"salary\", splits=splits)\n```\n\n```python\ndbch = to.dataloaders()\n```\n\n```python\ndbch.valid.show_batch()\n```\n\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>workclass</th>\n      <th>education</th>\n      <th>marital-status</th>\n      <th>occupation</th>\n      <th>relationship</th>\n      <th>race</th>\n      <th>education-num_na</th>\n      <th>age</th>\n      <th>fnlwgt</th>\n      <th>education-num</th>\n      <th>salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Private</td>\n      <td>5th-6th</td>\n      <td>Never-married</td>\n      <td>Handlers-cleaners</td>\n      <td>Other-relative</td>\n      <td>White</td>\n      <td>False</td>\n      <td>27.000000</td>\n      <td>150025.000146</td>\n      <td>3.0</td>\n      <td>&lt;50k</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Private</td>\n      <td>Bachelors</td>\n      <td>Married-civ-spouse</td>\n      <td>Prof-specialty</td>\n      <td>Wife</td>\n      <td>White</td>\n      <td>False</td>\n      <td>39.000000</td>\n      <td>327435.004950</td>\n      <td>13.0</td>\n      <td>&gt;=50k</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Private</td>\n      <td>HS-grad</td>\n      <td>Married-civ-spouse</td>\n      <td>Sales</td>\n      <td>Wife</td>\n      <td>White</td>\n      <td>False</td>\n      <td>44.000000</td>\n      <td>111502.003165</td>\n      <td>9.0</td>\n      <td>&lt;50k</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Private</td>\n      <td>Assoc-voc</td>\n      <td>Never-married</td>\n      <td>Prof-specialty</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>True</td>\n      <td>30.000000</td>\n      <td>198183.000128</td>\n      <td>10.0</td>\n      <td>&lt;50k</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>?</td>\n      <td>7th-8th</td>\n      <td>Divorced</td>\n      <td>?</td>\n      <td>Not-in-family</td>\n      <td>White</td>\n      <td>True</td>\n      <td>65.999999</td>\n      <td>270460.001937</td>\n      <td>10.0</td>\n      <td>&lt;50k</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Private</td>\n      <td>Prof-school</td>\n      <td>Married-civ-spouse</td>\n      <td>Sales</td>\n      <td>Husband</td>\n      <td>White</td>\n      <td>False</td>\n      <td>47.000000</td>\n      <td>175957.999723</td>\n      <td>15.0</td>\n      <td>&gt;=50k</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Private</td>\n      <td>Assoc-voc</td>\n      <td>Married-civ-spouse</td>\n      <td>Prof-specialty</td>\n      <td>Husband</td>\n      <td>White</td>\n      <td>False</td>\n      <td>40.000000</td>\n      <td>119224.999863</td>\n      <td>11.0</td>\n      <td>&lt;50k</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Private</td>\n      <td>HS-grad</td>\n      <td>Never-married</td>\n      <td>Other-service</td>\n      <td>Own-child</td>\n      <td>White</td>\n      <td>False</td>\n      <td>21.000000</td>\n      <td>249727.002866</td>\n      <td>9.0</td>\n      <td>&lt;50k</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Self-emp-not-inc</td>\n      <td>Assoc-acdm</td>\n      <td>Married-civ-spouse</td>\n      <td>Craft-repair</td>\n      <td>Husband</td>\n      <td>White</td>\n      <td>False</td>\n      <td>47.000000</td>\n      <td>107230.997489</td>\n      <td>12.0</td>\n      <td>&lt;50k</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Private</td>\n      <td>HS-grad</td>\n      <td>Never-married</td>\n      <td>Handlers-cleaners</td>\n      <td>Own-child</td>\n      <td>Amer-Indian-Eskimo</td>\n      <td>False</td>\n      <td>20.000001</td>\n      <td>27337.000096</td>\n      <td>9.0</td>\n      <td>&lt;50k</td>\n    </tr>\n  </tbody>\n</table>\n\n\n```python\nto_tst = to.new(df_test)\nto_tst.process()\nto_tst.all_cols.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>workclass</th>\n      <th>education</th>\n      <th>marital-status</th>\n      <th>occupation</th>\n      <th>relationship</th>\n      <th>race</th>\n      <th>education-num_na</th>\n      <th>age</th>\n      <th>fnlwgt</th>\n      <th>education-num</th>\n      <th>salary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10000</th>\n      <td>5</td>\n      <td>10</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0.457196</td>\n      <td>1.348643</td>\n      <td>1.183973</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10001</th>\n      <td>5</td>\n      <td>12</td>\n      <td>3</td>\n      <td>15</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1</td>\n      <td>-0.936750</td>\n      <td>1.260802</td>\n      <td>-0.427149</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10002</th>\n      <td>5</td>\n      <td>2</td>\n      <td>1</td>\n      <td>9</td>\n      <td>2</td>\n      <td>5</td>\n      <td>1</td>\n      <td>1.044121</td>\n      <td>0.147752</td>\n      <td>-1.232709</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10003</th>\n      <td>5</td>\n      <td>12</td>\n      <td>7</td>\n      <td>2</td>\n      <td>5</td>\n      <td>5</td>\n      <td>1</td>\n      <td>0.530562</td>\n      <td>-0.289427</td>\n      <td>-0.427149</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10004</th>\n      <td>6</td>\n      <td>9</td>\n      <td>3</td>\n      <td>5</td>\n      <td>1</td>\n      <td>5</td>\n      <td>1</td>\n      <td>0.750659</td>\n      <td>1.452142</td>\n      <td>0.378412</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n```python\nemb_szs = get_emb_sz(to); print(emb_szs)\n```\n\n    [(10, 6), (17, 8), (8, 5), (16, 8), (7, 5), (6, 4), (3, 3)]\n\n\nThat's the use of the model\n\n```python\nmodel = TabNetModel(emb_szs, len(to.cont_names), 1, n_d=8, n_a=32, n_steps=1); \n```\n\n```python\nopt_func = partial(Adam, wd=0.01, eps=1e-5)\nlearn = Learner(dbch, model, MSELossFlat(), opt_func=opt_func, lr=3e-2, metrics=[accuracy])\n```\n\n```python\nlearn.lr_find()\n```\n\n\n\n\n\n\n\n\n    SuggestedLRs(lr_min=0.33113112449646, lr_steep=7.585775847473997e-07)\n\n\n\n\n![png](docs/images/output_19_2.png)\n\n\n```python\nlearn.fit_one_cycle(10)\n```\n\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: left;\">\n      <th>epoch</th>\n      <th>train_loss</th>\n      <th>valid_loss</th>\n      <th>accuracy</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.216066</td>\n      <td>0.171518</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>0.146902</td>\n      <td>0.130240</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.133306</td>\n      <td>0.122532</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.129681</td>\n      <td>0.118359</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.127575</td>\n      <td>0.117743</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>5</td>\n      <td>0.126002</td>\n      <td>0.116654</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>6</td>\n      <td>0.123125</td>\n      <td>0.113976</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>7</td>\n      <td>0.118564</td>\n      <td>0.113369</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>8</td>\n      <td>0.118185</td>\n      <td>0.111743</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n    <tr>\n      <td>9</td>\n      <td>0.115925</td>\n      <td>0.112126</td>\n      <td>0.754000</td>\n      <td>00:03</td>\n    </tr>\n  </tbody>\n</table>\n\n\n## Example with Bayesian Optimization\n\nI like to tune hyperparameters for tabular models with Bayesian Optimization. You can optimize directly your metric using this approach if the metric is sensitive enough (in our example it is not and we use validation loss instead). Also, you should create the second validation set, because you will use the first as a training set for Bayesian Optimization. \n\n\nYou may need to install the optimizer `pip install bayesian-optimization`\n\n```python\nfrom functools import lru_cache\n```\n\n```python\n# The function we'll optimize\n@lru_cache(1000)\ndef get_accuracy(n_d:Int, n_a:Int, n_steps:Int):\n    model = TabNetModel(emb_szs, len(to.cont_names), 1, n_d=n_d, n_a=n_a, n_steps=n_steps);\n    learn = Learner(dbch, model, MSELossFlat(), opt_func=opt_func, lr=3e-2, metrics=[accuracy])\n    learn.fit_one_cycle(5)\n    return -float(learn.validate(dl=learn.dls.valid)[0])\n```\n\nThis implementation of Bayesian Optimization doesn't work naturally with descreet values. That's why we use wrapper with `lru_cache`.\n\n```python\ndef fit_accuracy(pow_n_d, pow_n_a, pow_n_steps):\n    pow_n_d, pow_n_a, pow_n_steps = map(int, (pow_n_d, pow_n_a, pow_n_steps))\n    return get_accuracy(2**pow_n_d, 2**pow_n_a, 2**pow_n_steps)\n```\n\n```python\nfrom bayes_opt import BayesianOptimization\n\n# Bounded region of parameter space\npbounds = {'pow_n_d': (0, 8), 'pow_n_a': (0, 8), 'pow_n_steps': (0, 4)}\n\noptimizer = BayesianOptimization(\n    f=fit_accuracy,\n    pbounds=pbounds,\n)\n```\n\n```python\noptimizer.maximize(\n    init_points=15,\n    n_iter=100,\n)\n```\n\n```python\noptimizer.max\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mgrankin/fast_tabnet", "keywords": "attention fastai", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "fast-tabnet", "package_url": "https://pypi.org/project/fast-tabnet/", "platform": "", "project_url": "https://pypi.org/project/fast-tabnet/", "project_urls": {"Homepage": "https://github.com/mgrankin/fast_tabnet"}, "release_url": "https://pypi.org/project/fast-tabnet/0.0.7/", "requires_dist": ["pytorch-tabnet (>=1.0.5)"], "requires_python": ">=3.6", "summary": "TabNet for fastai", "version": "0.0.7"}, "last_serial": 6919655, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c446a15a7b7d9146f2a6185b3d1649af", "sha256": "146cb0caba4030fcb7c5beb7455f40cadbdd5da631a760136591ba8d5a0126c0"}, "downloads": -1, "filename": "fast_tabnet-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c446a15a7b7d9146f2a6185b3d1649af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12134, "upload_time": "2020-01-31T17:11:21", "upload_time_iso_8601": "2020-01-31T17:11:21.738958Z", "url": "https://files.pythonhosted.org/packages/f0/4e/07937611715b034a61eb0995eec90ef2cdd36853314ebfe9a6f7c07950a6/fast_tabnet-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "66b9962bb84db6557eae7fb86bf47127", "sha256": "d69b9358f1197d3ad8a39d70ab5e7b4c36b86e3cd3da4c90eefae8f13848bdf0"}, "downloads": -1, "filename": "fast_tabnet-0.0.1.tar.gz", "has_sig": false, "md5_digest": "66b9962bb84db6557eae7fb86bf47127", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12500, "upload_time": "2020-01-31T17:11:23", "upload_time_iso_8601": "2020-01-31T17:11:23.939464Z", "url": "https://files.pythonhosted.org/packages/ea/54/0375b0a5ddff39452bcec97d60d4e8d1d3b52d2096024edc4743b7929486/fast_tabnet-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e7b06daf2b419b85bd50ddab912c3fc8", "sha256": "20e81e8eebd203a951b0303105d2ed4bb1eefb4e7c7be01c464bf98ba2ce5976"}, "downloads": -1, "filename": "fast_tabnet-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e7b06daf2b419b85bd50ddab912c3fc8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15481, "upload_time": "2020-01-31T18:14:19", "upload_time_iso_8601": "2020-01-31T18:14:19.429077Z", "url": "https://files.pythonhosted.org/packages/e6/11/ce1c01e191218dc39b14dd49dc4086d561adef61747f0e010b62ade92d0a/fast_tabnet-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "6f9e7a9714a8de63eec913a0e0990a13", "sha256": "000d792d943f5252fb8775ecfef9a0461643c6d17a6c433d009981ca83485408"}, "downloads": -1, "filename": "fast_tabnet-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6f9e7a9714a8de63eec913a0e0990a13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20238, "upload_time": "2020-01-31T18:14:20", "upload_time_iso_8601": "2020-01-31T18:14:20.882013Z", "url": "https://files.pythonhosted.org/packages/10/fd/96504c1aa1572df9645f0a380711ea97d00d51f64c73e38680da2fe19317/fast_tabnet-0.0.2.tar.gz"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "51669cde2f7edeecab3316ec9d2d815d", "sha256": "d92e879e0c6108678151be3b6fd19d7ea0b3c718e0ba2d3cbf0ec037189ed2e8"}, "downloads": -1, "filename": "fast_tabnet-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "51669cde2f7edeecab3316ec9d2d815d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15466, "upload_time": "2020-02-05T15:14:23", "upload_time_iso_8601": "2020-02-05T15:14:23.787576Z", "url": "https://files.pythonhosted.org/packages/20/87/249fc9803d989b82c8078655c6021a9ef2f9e06a0dc6e4aa60dfc68428a7/fast_tabnet-0.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a9384d0d9d7ae704d77abaa4bbe415fb", "sha256": "8cdee49a8ca0dc135d09be32f8c6851c67ebe400bd52c97b3cbe1ae865db20d3"}, "downloads": -1, "filename": "fast_tabnet-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a9384d0d9d7ae704d77abaa4bbe415fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20223, "upload_time": "2020-02-05T15:14:26", "upload_time_iso_8601": "2020-02-05T15:14:26.062971Z", "url": "https://files.pythonhosted.org/packages/ea/f2/7220969838403de644d91bd24be5b4c42f15936d18989fbff4842f8c3678/fast_tabnet-0.0.3.tar.gz"}], "0.0.4": [{"comment_text": "", "digests": {"md5": "90a7f8e685da30a95cf5d0b996bb0faf", "sha256": "57ca99876c441de75637dced9130349db675d39c2abf0f15fdf8dd784e181a56"}, "downloads": -1, "filename": "fast_tabnet-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "90a7f8e685da30a95cf5d0b996bb0faf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15478, "upload_time": "2020-02-06T14:39:06", "upload_time_iso_8601": "2020-02-06T14:39:06.426779Z", "url": "https://files.pythonhosted.org/packages/53/db/5edc5c202a085f2877ea1a40ba468da2e9741bd0b3e385749a2eb878a50d/fast_tabnet-0.0.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "caf83d48a917d3f9690665a244bde63a", "sha256": "cf6e1c8b7da3cfff864397e8705aafc69dddbeeb7654787f58e07164d77a29ef"}, "downloads": -1, "filename": "fast_tabnet-0.0.4.tar.gz", "has_sig": false, "md5_digest": "caf83d48a917d3f9690665a244bde63a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20232, "upload_time": "2020-02-06T14:39:07", "upload_time_iso_8601": "2020-02-06T14:39:07.991691Z", "url": "https://files.pythonhosted.org/packages/a3/27/4a82f050e71f1b8f0585c1f0a64db283d9615718147fc9e2aed25155bdaf/fast_tabnet-0.0.4.tar.gz"}], "0.0.5": [{"comment_text": "", "digests": {"md5": "a850a18ff4809928b3a262170c835fce", "sha256": "09920da37577e0eeddbadd82452c49bee0049976b0dc558afab4783a34b0ff44"}, "downloads": -1, "filename": "fast_tabnet-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a850a18ff4809928b3a262170c835fce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17209, "upload_time": "2020-02-08T08:25:20", "upload_time_iso_8601": "2020-02-08T08:25:20.267103Z", "url": "https://files.pythonhosted.org/packages/ea/2f/d2d9d86086050309dc8040e4d0edc48307edc433eb598e6ac656fb366711/fast_tabnet-0.0.5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "eb25ac92233676757683c4191d29f854", "sha256": "45bbad0c6647197e226fe2f2fb876676d72093187fff64cab364d110553190a6"}, "downloads": -1, "filename": "fast_tabnet-0.0.5.tar.gz", "has_sig": false, "md5_digest": "eb25ac92233676757683c4191d29f854", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25953, "upload_time": "2020-02-08T08:25:22", "upload_time_iso_8601": "2020-02-08T08:25:22.197114Z", "url": "https://files.pythonhosted.org/packages/f2/3e/a0454ed98d5d2fc5dada01e01b7f9dee118d1ff46f0a5ee89a86b9abf2af/fast_tabnet-0.0.5.tar.gz"}], "0.0.6": [{"comment_text": "", "digests": {"md5": "43a332f7d58bfbf6a46a5ba96e130572", "sha256": "332f3d3a69e5c9b59b2dda5c47c5976b15bcd2bed7391aaa21412a270f71da0a"}, "downloads": -1, "filename": "fast_tabnet-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "43a332f7d58bfbf6a46a5ba96e130572", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10556, "upload_time": "2020-03-06T08:32:04", "upload_time_iso_8601": "2020-03-06T08:32:04.806807Z", "url": "https://files.pythonhosted.org/packages/74/02/2029bf4b102b1d3db903b5b4916d55f3a6091f62eb4e331aa07a83459f1d/fast_tabnet-0.0.6-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "5701849fabbfa73cc59d7a9c1edfd687", "sha256": "7119634a29145e599eff024d34c3e53ea15ba8c126c0d474283dc08f87fd61c1"}, "downloads": -1, "filename": "fast_tabnet-0.0.6.tar.gz", "has_sig": false, "md5_digest": "5701849fabbfa73cc59d7a9c1edfd687", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15078, "upload_time": "2020-03-06T08:32:06", "upload_time_iso_8601": "2020-03-06T08:32:06.398946Z", "url": "https://files.pythonhosted.org/packages/d1/d4/a4517ef6233a596ab45169409a3f2c2da4c00afeb26728a1725bdc62c53e/fast_tabnet-0.0.6.tar.gz"}], "0.0.7": [{"comment_text": "", "digests": {"md5": "157a2e545e550cd3a37f917a2de1281e", "sha256": "ff469baeeead0be3143b1805673cd24863f0ff0f7f6f893e325b1804dfbf2e30"}, "downloads": -1, "filename": "fast_tabnet-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "157a2e545e550cd3a37f917a2de1281e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10473, "upload_time": "2020-03-31T11:47:30", "upload_time_iso_8601": "2020-03-31T11:47:30.681525Z", "url": "https://files.pythonhosted.org/packages/57/09/30cc89063050cf6bc6d2bc9c4352ea9cabd97061a0a9c046ba589c16ad76/fast_tabnet-0.0.7-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1d2bdef64f43facc9b406f1a1c34d703", "sha256": "fdd49a7bdb4badda6ab97e451e27b2b0dc1c96d17b2e9ffbfab05c4242e37d82"}, "downloads": -1, "filename": "fast_tabnet-0.0.7.tar.gz", "has_sig": false, "md5_digest": "1d2bdef64f43facc9b406f1a1c34d703", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14999, "upload_time": "2020-03-31T11:47:31", "upload_time_iso_8601": "2020-03-31T11:47:31.888237Z", "url": "https://files.pythonhosted.org/packages/9d/8c/92b387109ee4d8c72ff1ca83bdd18a6460b577222321ae113aea465da9d7/fast_tabnet-0.0.7.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "157a2e545e550cd3a37f917a2de1281e", "sha256": "ff469baeeead0be3143b1805673cd24863f0ff0f7f6f893e325b1804dfbf2e30"}, "downloads": -1, "filename": "fast_tabnet-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "157a2e545e550cd3a37f917a2de1281e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10473, "upload_time": "2020-03-31T11:47:30", "upload_time_iso_8601": "2020-03-31T11:47:30.681525Z", "url": "https://files.pythonhosted.org/packages/57/09/30cc89063050cf6bc6d2bc9c4352ea9cabd97061a0a9c046ba589c16ad76/fast_tabnet-0.0.7-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1d2bdef64f43facc9b406f1a1c34d703", "sha256": "fdd49a7bdb4badda6ab97e451e27b2b0dc1c96d17b2e9ffbfab05c4242e37d82"}, "downloads": -1, "filename": "fast_tabnet-0.0.7.tar.gz", "has_sig": false, "md5_digest": "1d2bdef64f43facc9b406f1a1c34d703", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14999, "upload_time": "2020-03-31T11:47:31", "upload_time_iso_8601": "2020-03-31T11:47:31.888237Z", "url": "https://files.pythonhosted.org/packages/9d/8c/92b387109ee4d8c72ff1ca83bdd18a6460b577222321ae113aea465da9d7/fast_tabnet-0.0.7.tar.gz"}]}