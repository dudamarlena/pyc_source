{"info": {"author": "Tobias O. Stannius", "author_email": "stannius@sund.ku.dk", "bugtrack_url": null, "classifiers": [], "description": "[![PyPI version shields.io](https://img.shields.io/pypi/v/cellex.svg)](https://pypi.python.org/pypi/cellex/)\n\n# CELLEX\nCELLEX (CELL-type EXpression-specificity) is a tool for computing cell-type Expression Specificity (ES) profiles. It employs a \"wisdom of the crowd\"-approach by integrating multiple ES metrics, thus combining complementary cell-type ES profiles, to capture multiple aspects of ES and obtain improved robustness.\n\n![CELLEX_overview](https://user-images.githubusercontent.com/5487016/72679348-9662cf80-3aae-11ea-9d07-c4cea1daec5f.png)\n\nSee [Timshel (bioRxiv, 2020): Mapping heritability of obesity by cell types](https://www.biorxiv.org/content/10.1101/2020.01.27.920033v1) for further details on the CELLEX method. See also the [CELLEX Wiki](https://github.com/perslab/CELLEX/wiki).\n\n# Quick start\nThis brief tutorial showcases the core features of CELLEX.\n\n## TL;DR\n```python\nimport numpy as np\nimport pandas as pd\nimport cellex\n\ndata = pd.read_csv(\"./data.csv\", index_col=0)\nmetadata = pd.read_csv(\"./metadata.csv\", index_col=0)\n\neso = cellex.ESObject(data=data, annotation=metadata, verbose=True)\neso.compute(verbose=True)\neso.results[\"esmu\"].to_csv(\"mydataset.esmu.csv.gz\")\n```\n\n## Walkthrough\n### Setup\n#### Option A: Install the latest release from PyPi\n```\npip install cellex\n```\n\n#### Option B: Install the development version from this repo\nClone the development repo and install from source using `pip`. The development version may contain bug fixes that have not been released, as well as experimental features.\n\n```\ngit clone https://github.com/perslab/CELLEX.git --branch develop --single-branch\ncd CELLEX\npip install -e .\n```\n\n### Import modules\n```python\nimport numpy as np # needed for formatting data for this tutorial\nimport pandas as pd # needed for formatting data for this tutorial\nimport cellex\n```\n\n### Load input data and metadata\n```python\ndata = pd.read_csv(\"./data.csv\", index_col=0)\nmetadata = pd.read_csv(\"./metadata.csv\", index_col=0)\n```\n\n#### Data format\nData may consist of UMI counts (integer) for each **gene** and **cell**.\n\n|               | cell_1                | ... | cell_9                 |\n|---------------|-----------------------|-----|------------------------|\n| gene_x        | 0                     | ... | 4                      |\n| ...           | ...                   | ... | ...                    |\n| gene_z        | 3                     | ... | 1                      |\n\nShape: *m* genes by *n* cells.\n\n#### Metadata format\nMetadata should consist of *unique* cell id's and matching annotation (string).\n\n| cell_id                | cell_type |\n|------------------------|-----------|\n| cell_1                 | type_A    |\n| ...                    | ...       |\n| cell_9                 | type_C    |\n\nShape: *n* cells by 2.\n\n### Create ESObject and compute ESmu\n\n```python\neso = cellex.ESObject(data=data, annotation=metadata, verbose=True)\n\neso.compute(verbose=True)\n```\n\n### View Expression Specificity scores\nAll results are accessible via the `results` attribute of the `ESObject`.\n\n```python\neso.results[\"esmu\"]\n```\n\n### Save result(s)\n#### Pro-tip: Using CELLEX with CELLECT\nThe ESmu scores may be used with **[CELLECT](https://github.com/perslab/CELLECT)**. CELLECT requires that genes are in the *Human Ensembl Gene ID* format. CELLEX provides a simple renaming utility for this purpose:\n\n```python\ncellex.utils.mapping.ens_mouse_to_ens_human(eso.results[\"esmu\"], drop_unmapped=True, verbose=True)\n```\n\n#### Save ESmu\n\n```python\neso.results[\"esmu\"].to_csv(\"mydataset.esmu.csv.gz\")\n```\n\n#### Save all or specific results\n\n```python\neso.save_as_csv(keys=[\"all\"], verbose=True)\n```\n\n#### Output format\nOutput consist of Expression Specificity Weights (float) for each **gene** and **cell-type**. ESmu values lie in the range [0,1].\n\n|               | type_A                | ... | type_C                 |\n|---------------|-----------------------|-----|------------------------|\n| gene_x        | 0.0                   | ... | 0.9                    |\n| ...           | ...                   | ... | ...                    |\n| gene_z        | 0.1                   | ... | 0.2                    |\n\nShape: *m* genes by *x* unique annotations. N.B. a number of genes may be removed during preprocessing.\n\n\n\n# Tutorials\nVarious tutorials and walkthroughs will be made available here, while the Wiki is in the making. These Jupyter Notebooks cover everything from downloading CELLEX and data to analysis and plotting.\n\n* [Demo: Downloading and running CELLEX with sample Mousebrain Atlas data](docs/tutorials/demo_mousebrain_vascular_cells.ipynb)\n* [Demo: Downloading and running CELLEX with sample MOCA data](docs/tutorials/demo_moca_100k.ipynb)\n\n\n# About\n\n## Developers\n- Tobias Overlund Stannius (University of Copenhagen) [@TobiasStannius](https://twitter.com/TobiasStannius)\n- Pascal Nordgren Timshel (University of Copenhagen) [@ptimshel](https://twitter.com/ptimshel)\n\n## Contact\nPlease create an issue in this repo, if you encounter any problems using CELLEX. Alternatively, you may write an email to timshel(at)sund.ku.dk\n\n## References\n\nIf you find CELLEX useful for your research, please consider citing: \n**[Timshel (bioRxiv, 2020): _Mapping heritability of obesity by cell types_](https://www.biorxiv.org/content/10.1101/2020.01.27.920033v1)**\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/perslab/CELLEX", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cellex", "package_url": "https://pypi.org/project/cellex/", "platform": "", "project_url": "https://pypi.org/project/cellex/", "project_urls": {"Homepage": "https://github.com/perslab/CELLEX"}, "release_url": "https://pypi.org/project/cellex/1.1.1/", "requires_dist": ["setuptools (>=41.2.0)", "setuptools-scm (>=3.3.3)", "numpy (>=1.17.0)", "scipy (>=1.3.1)", "pandas (>=0.25.0)", "h5py (>=2.9.0)", "loompy (>=3.0.6)", "adjustText (>=0.7.3)", "plotnine (>=0.6.0)"], "requires_python": "", "summary": "Compute single-cell cell-type expression specificity", "version": "1.1.1"}, "last_serial": 6780582, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "747b4dcaff2589063684e53e247cacff", "sha256": "15144c6723ab6327d96a6f4f434eb6c4a9ea347ca7b8f032ba307b3ffab917ae"}, "downloads": -1, "filename": "cellex-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "747b4dcaff2589063684e53e247cacff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41266, "upload_time": "2019-09-24T16:04:25", "upload_time_iso_8601": "2019-09-24T16:04:25.246840Z", "url": "https://files.pythonhosted.org/packages/b7/16/af3ed51a3d0be39211e9b72579023aa9f871e5338de073ea7698155904e2/cellex-1.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "cc89f10da51a72e08333369d6c78333a", "sha256": "45eecfe45dcb164208b489bdcb54cffe989cee6f6b2805934a333640fd017f0e"}, "downloads": -1, "filename": "cellex-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cc89f10da51a72e08333369d6c78333a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6220283, "upload_time": "2019-09-24T16:04:29", "upload_time_iso_8601": "2019-09-24T16:04:29.242797Z", "url": "https://files.pythonhosted.org/packages/96/7f/f249cb96898b68c384490125bf900ce4fd14b000c0b5608e70932790ffcf/cellex-1.0.0.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8536dc35239327d0ff33ca8ccf697cf1", "sha256": "f33913b89609a933d397f0ec3478b9d2db6fe8de37e758b45134de3e0e537a09"}, "downloads": -1, "filename": "cellex-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8536dc35239327d0ff33ca8ccf697cf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 44339, "upload_time": "2020-02-27T10:24:16", "upload_time_iso_8601": "2020-02-27T10:24:16.585985Z", "url": "https://files.pythonhosted.org/packages/a5/68/b3014c00f61edbd94a662dfabd306c1cdfcff845a7f4f99fd0f1bcc69266/cellex-1.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "e06020bf9d4818cb00cc1bfedd61b9b8", "sha256": "a3b138163944a9569872b02ae5e23daaca65be86dd1502323519a4f3fc60870b"}, "downloads": -1, "filename": "cellex-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e06020bf9d4818cb00cc1bfedd61b9b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6490027, "upload_time": "2020-02-27T10:24:19", "upload_time_iso_8601": "2020-02-27T10:24:19.479591Z", "url": "https://files.pythonhosted.org/packages/d7/44/a1e4017412565962cb086cd07a6df5915a0545a2681007a3b8d85976281d/cellex-1.1.0.tar.gz"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "f8514d306bc9bfc8e3d6a7c073f8e854", "sha256": "b23d4805247078ef15d389069cf84f589c748fdab3b003199267668b26feecfc"}, "downloads": -1, "filename": "cellex-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f8514d306bc9bfc8e3d6a7c073f8e854", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1568824, "upload_time": "2020-03-09T21:23:43", "upload_time_iso_8601": "2020-03-09T21:23:43.750070Z", "url": "https://files.pythonhosted.org/packages/9b/ed/8a6023fa7c4436d544b5603ecffd33003d68b6de4e288a79bdbefe74a911/cellex-1.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8915bd404371708cdaaaac4ebd12ec1e", "sha256": "eb0b7859a8fd3275d8091613dbfa896a44d53fefed01adba8bb23791480ccb16"}, "downloads": -1, "filename": "cellex-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8915bd404371708cdaaaac4ebd12ec1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6131902, "upload_time": "2020-03-09T21:23:46", "upload_time_iso_8601": "2020-03-09T21:23:46.347411Z", "url": "https://files.pythonhosted.org/packages/5e/0e/b8ba4b42a727530ed2e20b5838eb2e91045536197e23c23a2d7a9edc1c81/cellex-1.1.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8514d306bc9bfc8e3d6a7c073f8e854", "sha256": "b23d4805247078ef15d389069cf84f589c748fdab3b003199267668b26feecfc"}, "downloads": -1, "filename": "cellex-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f8514d306bc9bfc8e3d6a7c073f8e854", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1568824, "upload_time": "2020-03-09T21:23:43", "upload_time_iso_8601": "2020-03-09T21:23:43.750070Z", "url": "https://files.pythonhosted.org/packages/9b/ed/8a6023fa7c4436d544b5603ecffd33003d68b6de4e288a79bdbefe74a911/cellex-1.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8915bd404371708cdaaaac4ebd12ec1e", "sha256": "eb0b7859a8fd3275d8091613dbfa896a44d53fefed01adba8bb23791480ccb16"}, "downloads": -1, "filename": "cellex-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8915bd404371708cdaaaac4ebd12ec1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6131902, "upload_time": "2020-03-09T21:23:46", "upload_time_iso_8601": "2020-03-09T21:23:46.347411Z", "url": "https://files.pythonhosted.org/packages/5e/0e/b8ba4b42a727530ed2e20b5838eb2e91045536197e23c23a2d7a9edc1c81/cellex-1.1.1.tar.gz"}]}