{"info": {"author": "Valentin BELYN", "author_email": "valentin-hello@gmx.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "<br>\n<img src=\"https://raw.githubusercontent.com/ValentinBELYN/configpilot/master/media/configpilot-logo.png\" height=\"80\" width=\"185\" alt=\"ConfigPilot\">\n<br>\nConfigPilot is a lightweight and powerful configuration parser for Python that automates checks and typecasting.<br>\nDo everything you did in fewer lines of code!\n\n## Features\n- Simple and concise syntax.\n- Lightweight and fast.\n- Automatic type casting.\n- Automation of value checks.\n- Support for primitive Python types and user-defined types.\n- Support for multi-line values and lists.\n- No dependency.\n\n## Installation\n\nThe recommended way to install ConfigPilot is to use `pip3`:\n\n```shell\n$ pip3 install configpilot\n```\n\nConfigPilot requires Python 3.6 or later.\n\nImport ConfigPilot into your project:\n\n```python\nfrom configpilot import ConfigPilot, OptionSpec\n\n# Exceptions (optional)\nfrom configpilot import ConfigPilotError, NoSectionError, \\\n                        NoOptionError, IllegalValueError\n```\n\n## Examples\n### 1. A simple example\n#### Configuration file\n```ini\n# This is a comment\n[author]\n name      = 'John DOE' # This is an inline comment\n age       = 27\n github    = 'https://github.com'\n skills    = 'sleep well on airplanes'\n             'have a terrific family recipe for brownies'\n             'always up for dessert'\n```\n*Quotes are optional for strings (unless you put special characters).*\n\nFor this first example, we want to retrieve:\n- The `name` as a string.\n- The `age` as an integer between `0` and `100`.\n- The `github` option as a string.\n- The `skills` as a list of strings.\n\nTo achieve this, we have to:\n- Define the desired file structure.\n- Instantiate a `ConfigPilot` object and indicate the structure of the file.\n- Read the file and check that it does not contain any errors in terms of format or content.\n- Retrieve values.\n\n#### Python code\n```python\noptions = [\n    OptionSpec(\n        section='author',\n        option='name'\n    ),\n\n    OptionSpec(\n        section='author',\n        option='age',\n        allowed=range(0, 100),\n        type=int\n    ),\n\n    OptionSpec(\n        section='author',\n        option='github'\n    ),\n\n    OptionSpec(\n        section='author',\n        option='skills',\n        type=[str]\n    )\n]\n\nconfig = ConfigPilot()\nconfig.register(*options)\nconfig.read('/path/file.conf')\n\nif not config.is_opened:\n    print('Error: unable to read the configuration file.')\n    exit(1)\n\nif config.errors:\n    print('Error: some options are incorrect.')\n    exit(1)\n\nname = config.author.name      # 'John DOE'\nage = config.author.age        # 27\ngithub = config.author.github  # 'https://github.com'\nskills = config.author.skills  # ['sleep well on airplanes',\n                               #  'have a terrific family recipe for brownies',\n                               #  'always up for dessert']\n\n# Alternative syntax\nname = config['author']['name']\nage = config['author']['age']\ngithub = config['author']['github']\nskills = config['author']['skills']\n```\n\n### 2. Use more complex types\n#### Configuration file\n```ini\n[general]\n mode:       master\n interface:  ens33\n port:       5000\n initDelay:  0.5\n\n[logging]\n enabled:    false\n\n[nodes]\n slaves:     10.0.0.1\n             10.0.0.2\n             10.0.0.3\n```\n\nWhat we want to retrieve:\n- The `mode` option as a string. Two values will be possible: `master` or `slave`.\n- The `interface` as a string. If the option is not specified, we will use the default value `ens33`.\n- The `port` as an integer between `1024` and `49151`. The default value will be `4000`.\n- The `initDelay` option as a float. The default value will be `0.0`.\n- The `enabled` option, from the `logging` section, as a boolean.\n- The `slaves`, from the `nodes` section, as a list of `IPv4Address` (from the `ipaddress` module).\n\n#### Python code\n```python\nfrom ipaddress import IPv4Address\n\noptions = [\n    OptionSpec(\n        section='general',\n        option='mode',\n        allowed=('master', 'slave')\n    ),\n\n    OptionSpec(\n        section='general',\n        option='interface',\n        default='ens33'\n    ),\n\n    OptionSpec(\n        section='general',\n        option='port',\n        allowed=range(1024, 49151),\n        default=4000,\n        type=int\n    ),\n\n    OptionSpec(\n        section='general',\n        option='initDelay',\n        default=0.0,\n        type=float\n    ),\n\n    OptionSpec(\n        section='logging',\n        option='enabled',\n        type=bool\n    ),\n\n    OptionSpec(\n        section='nodes',\n        option='slaves',\n        type=[IPv4Address]\n    )\n]\n\nconfig = ConfigPilot()\nconfig.register(*options)\nconfig.read('/path/file.conf')\n\nif not config.is_opened:\n    print('Error: unable to read the configuration file.')\n    exit(1)\n\nif config.errors:\n    print('Error: some options are incorrect.')\n    exit(1)\n\nmode = config.general.mode             # 'master'\ninterface = config.general.interface   # 'ens33'\nport = config.general.port             # 5000\ninit_delay = config.general.initDelay  # 0.5\nlogs_enabled = config.logging.enabled  # False\nslaves = config.nodes.slaves           # [IPv4Address('10.0.0.1'),\n                                       #  IPv4Address('10.0.0.2'),\n                                       #  IPv4Address('10.0.0.3')]\n```\n\n### 3. Use functions and lambda functions\n#### Configuration file\n```ini\n[boot]\n hexCode:    0x2A\n\n[statistics]\n lastBoot:   2020-02-01 10:27:00\n lastCrash:  2019-12-10 09:00:00\n```\n\nWhat we want to retrieve:\n- The `hexCode` option as an integer (base 16).\n- The `lastBoot` option as a `datetime` object.\n- The `lastCrash` option as a `datetime` object.\n\nWe cannot set the `type` parameter of the `OptionSpec` objects to `datetime` because the constructor of `datetime` expects several parameters. The values contained in the configuration file are strings with a specific format. So, we have to process these data with a dedicated function.\n\n#### Python code\n```python\nfrom datetime import datetime\n\n\ndef string_to_datetime(value):\n    '''\n    Cast a string to a datetime object.\n\n    '''\n    # Do not handle any exceptions that can be raised in this function.\n    # They are processed by ConfigPilot: the option, which called the\n    # function, is considered wrong if an exception is thrown.\n    return datetime.strptime(value, '%Y-%m-%d %H:%M:%S')\n\n\noptions = [\n    OptionSpec(\n        section='boot',\n        option='hexCode',\n        type=lambda x: int(x, 16)\n    ),\n\n    OptionSpec(\n        section='statistics',\n        option='lastBoot',\n        type=string_to_datetime\n    ),\n\n    OptionSpec(\n        section='statistics',\n        option='lastCrash',\n        type=string_to_datetime\n    )\n]\n\nconfig = ConfigPilot()\nconfig.register(*options)\nconfig.read('/path/file.conf')\n\nif not config.is_opened:\n    print('Error: unable to read the configuration file.')\n    exit(1)\n\nif config.errors:\n    print('Error: some options are incorrect.')\n    exit(1)\n\nboot_hex_code = config.boot.hexCode       # 42\nlast_boot = config.statistics.lastBoot    # datetime.datetime(2020, 2, 1, 10, 27)\nlast_crash = config.statistics.lastCrash  # datetime.datetime(2019, 12, 10, 9, 0)\n```\n\n## Classes\n### OptionSpec\nA user-created object that represents the constraints that an option must meet to be considered valid.\n\n#### Definition\n```python\nOptionSpec(section, option, allowed=None, default=None, type=str)\n```\n\n#### Parameters / Getters\n- `section`\n\n  The name of a section in the file.\n\n  - Type: `str`\n\n- `option`\n\n  The name of an option in the specified section.\n\n  - Type: `str`\n\n- `allowed`\n\n  The list or range of allowed values.\n\n  - Type: `object that supports the 'in' operator (membership)`\n  - Default: `None`\n\n- `default`\n\n  The default value of the option if it does not exist.<br>\n  Must be an object of the same type as the value obtained after the cast (see the `type` parameter).\n\n  - Type: `object`\n  - Default: `None`\n\n- `type`\n\n  The expected value type for this option.<br>\n  Set it to `int`, `float`, `bool`, `str` (default) or any other type of object.<br>\n  If you expect a list of values, use instead `[int]`, `[float]`, `[bool]`, `[str]` (equivalent of `list`) or even `[MyClass]`.\n\n  - Type: `type` or `list`\n  - Default: `str`\n\n### ConfigPilot\n#### Definition\n```python\nConfigPilot()\n```\n\n#### Methods\n- `register(*specifications)`\n\n  Register one or several specifications. You can call this method multiple times.<br>\n  Each option in the configuration file must have its own specification. Call the `read` method next.\n\n  - `*specifications` parameter: one or several `OptionSpec`.\n\n- `read(filename)`\n\n  Read and parse a configuration file according to the registered specifications.\n\n  - `filename` parameter: the name of the configuration file to read.\n\n#### Getters\n- `filename`\n\n  The name of the last opened file.\n\n  - Type: `str`\n\n- `is_opened`\n\n  Return a boolean that indicates whether the file is opened or not.\n\n  - Type: `bool`\n\n- `errors`\n\n  Return a dictionary containing sections and options that do not meet the specifications.\n\n  - Type: `dict`\n\n## Contributing\n\nComments and enhancements are welcome.\n\nAll development is done on [GitHub](https://github.com/ValentinBELYN/configpilot). Use [Issues](https://github.com/ValentinBELYN/configpilot/issues) to report problems and submit feature requests. Please include a minimal example that reproduces the bug.\n\n## Donate\n\nConfigPilot is completely free and open source. It has been fully developed on my free time. If you enjoy it, please consider donating to support the development.\n\n- [\ud83c\udf89 Donate via PayPal](https://paypal.me/ValentinBELYN)\n\n## License\n\nCopyright 2017-2020 Valentin BELYN.\n\nCode released under the MIT license. See the [LICENSE](https://github.com/ValentinBELYN/configpilot/blob/master/LICENSE) for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ValentinBELYN/configpilot", "keywords": "lightweight,configuration,parser,ini,python3", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "configpilot", "package_url": "https://pypi.org/project/configpilot/", "platform": "", "project_url": "https://pypi.org/project/configpilot/", "project_urls": {"Homepage": "https://github.com/ValentinBELYN/configpilot"}, "release_url": "https://pypi.org/project/configpilot/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A lightweight and powerful configuration parser for Python that automates checks and typecasting.", "version": "1.0.1"}, "last_serial": 6385540, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "400d68a43336a216fcec98c976aa0e08", "sha256": "c48603dccaea15d63a43742cc76af7bcfe3e381ff7baf69a78c5f79942b91a40"}, "downloads": -1, "filename": "configpilot-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "400d68a43336a216fcec98c976aa0e08", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16700, "upload_time": "2019-12-26T11:33:18", "upload_time_iso_8601": "2019-12-26T11:33:18.026585Z", "url": "https://files.pythonhosted.org/packages/75/03/b8c012cb940e247999820f09ffd33fa5f491d8041d926d8b8fcf2767fdc7/configpilot-1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a2800335f41f3d05bd20abd88da59f2a", "sha256": "578a3a3f60b8d7e885929bccca2680750e30f4b116ac557e6a4998dd59c94198"}, "downloads": -1, "filename": "configpilot-1.0.tar.gz", "has_sig": false, "md5_digest": "a2800335f41f3d05bd20abd88da59f2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13056, "upload_time": "2019-12-26T11:33:20", "upload_time_iso_8601": "2019-12-26T11:33:20.748271Z", "url": "https://files.pythonhosted.org/packages/df/4e/3b658bd6a654e329ac05082504c3010014402329b0a2e9f38f8c5b07aa92/configpilot-1.0.tar.gz"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9c49bdeb34d83d48fa9140b6c293d1a2", "sha256": "5856fc92e886b8dff9f4caf0c52c2607c3a78698b222bda8f6ba969ac962663e"}, "downloads": -1, "filename": "configpilot-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9c49bdeb34d83d48fa9140b6c293d1a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16755, "upload_time": "2020-01-02T11:03:19", "upload_time_iso_8601": "2020-01-02T11:03:19.909133Z", "url": "https://files.pythonhosted.org/packages/1d/31/c128c7c2684296d42f776824d36a57585e17e078705b5c364d56cc682a68/configpilot-1.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3cc1094f28b9dadfd9dd45d81255743b", "sha256": "9a843d16433540ba27384c3e32e86a98a1c1c7e47044706d353709a9cceb815a"}, "downloads": -1, "filename": "configpilot-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3cc1094f28b9dadfd9dd45d81255743b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13094, "upload_time": "2020-01-02T11:03:21", "upload_time_iso_8601": "2020-01-02T11:03:21.705757Z", "url": "https://files.pythonhosted.org/packages/5e/a0/52c0ee7b5cde11066b5767e7065a416715ba599713bbf4409eee22cda935/configpilot-1.0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c49bdeb34d83d48fa9140b6c293d1a2", "sha256": "5856fc92e886b8dff9f4caf0c52c2607c3a78698b222bda8f6ba969ac962663e"}, "downloads": -1, "filename": "configpilot-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9c49bdeb34d83d48fa9140b6c293d1a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16755, "upload_time": "2020-01-02T11:03:19", "upload_time_iso_8601": "2020-01-02T11:03:19.909133Z", "url": "https://files.pythonhosted.org/packages/1d/31/c128c7c2684296d42f776824d36a57585e17e078705b5c364d56cc682a68/configpilot-1.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3cc1094f28b9dadfd9dd45d81255743b", "sha256": "9a843d16433540ba27384c3e32e86a98a1c1c7e47044706d353709a9cceb815a"}, "downloads": -1, "filename": "configpilot-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3cc1094f28b9dadfd9dd45d81255743b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13094, "upload_time": "2020-01-02T11:03:21", "upload_time_iso_8601": "2020-01-02T11:03:21.705757Z", "url": "https://files.pythonhosted.org/packages/5e/a0/52c0ee7b5cde11066b5767e7065a416715ba599713bbf4409eee22cda935/configpilot-1.0.1.tar.gz"}]}