{"info": {"author": "Lijo Varghese", "author_email": "lijoev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Session"], "description": "django-rest-knox\n================\n\n[![image](https://travis-ci.org/James1345/django-rest-knox.svg?branch=develop)](https://travis-ci.org/James1345/django-rest-knox)\n\nAuthentication Module for django rest auth\n\nKnox provides easy to use authentication for [Django REST\nFramework](http://www.django-rest-framework.org/) The aim is to allow\nfor common patterns in applications that are REST based, with little\nextra effort; and to ensure that connections remain secure.\n\nKnox authentication is token based, similar to the `TokenAuthentication`\nbuilt in to DRF. However, it overcomes some problems present in the\ndefault implementation:\n\n-   DRF tokens are limited to one per user. This does not facilitate\n    securely signing in from multiple devices, as the token is shared.\n    It also requires *all* devices to be logged out if a server-side\n    logout is required (i.e. the token is deleted).\n\n    Knox provides one token per call to the login view - allowing each\n    client to have its own token which is deleted on the server side\n    when the client logs out.\n\n    Knox also provides an option for a logged in client to remove *all*\n    tokens that the server has - forcing all clients to re-authenticate.\n\n-   DRF tokens are stored unencrypted in the database. This would allow\n    an attacker unrestricted access to an account with a token if the\n    database were compromised.\n\n    Knox tokens are only stored in an encrypted form. Even if the\n    database were somehow stolen, an attacker would not be able to log\n    in with the stolen credentials.\n\n-   DRF tokens track their creation time, but have no inbuilt mechanism\n    for tokens expiring. Knox tokens can have an expiry configured in\n    the app settings (default is 10 hours.)\n\nMore information can be found in the\n[Documentation](https://github.com/lijoev/django-knox-rest/)\n\n# Run the tests locally\n\nIf you need to debug a test locally and if you have [docker](https://www.docker.com/) installed:\n\nsimply run the ``./docker-run-test.sh`` script and it will run the test suite in every Python /\nDjango versions.\n\nYou could also simply run regular ``tox`` in the root folder as well, but that would make testing the matrix of\nPython / Django versions a bit more tricky.\n\n# Work on the documentation\n\nOur documentation is generated by [Mkdocs](https://www.mkdocs.org).\n\nYou can refer to their documentation on how to install it locally.\n\nAnother option is to use `mkdocs.sh` in this repository.\nIt will run mkdocs in a [docker](https://www.docker.com/) container.\n\nRunning the script without any params triggers the `serve` command.\nThe server is exposed on localhost on port 8000.\n\nTo configure the port the `serve` command will be exposing the server to, you\ncan use the following env var:\n\n```\nMKDOCS_DEV_PORT=\"8080\"\n```\n\nYou can also pass any `mkdocs` command like this:\n\n```\n./mkdocs build\n./mkdocs --help\n```\n\nCheck the [Mkdocs documentation](https://www.mkdocs.org/) for more.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lijoev/django-knox-rest", "keywords": "django rest authentication login", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-knox-rest", "package_url": "https://pypi.org/project/django-knox-rest/", "platform": "", "project_url": "https://pypi.org/project/django-knox-rest/", "project_urls": {"Homepage": "https://github.com/lijoev/django-knox-rest"}, "release_url": "https://pypi.org/project/django-knox-rest/4.1.0/", "requires_dist": null, "requires_python": "", "summary": "Authentication for django rest framework", "version": "4.1.0"}, "last_serial": 6567825, "releases": {"4.1.0": [{"comment_text": "", "digests": {"md5": "f4f17864da1a2318ce29cbab72774a84", "sha256": "f8956c6190fd0f9d0ed38d6aee372b307473f1f9e434f718d4c0be0f36dda4df"}, "downloads": -1, "filename": "django-knox-rest-4.1.0.tar.gz", "has_sig": false, "md5_digest": "f4f17864da1a2318ce29cbab72774a84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12144, "upload_time": "2020-02-04T10:24:43", "upload_time_iso_8601": "2020-02-04T10:24:43.715210Z", "url": "https://files.pythonhosted.org/packages/55/da/beb96ef78c21de93718b28a7f0090ab1c253f25072dc7b7074dc0099e204/django-knox-rest-4.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4f17864da1a2318ce29cbab72774a84", "sha256": "f8956c6190fd0f9d0ed38d6aee372b307473f1f9e434f718d4c0be0f36dda4df"}, "downloads": -1, "filename": "django-knox-rest-4.1.0.tar.gz", "has_sig": false, "md5_digest": "f4f17864da1a2318ce29cbab72774a84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12144, "upload_time": "2020-02-04T10:24:43", "upload_time_iso_8601": "2020-02-04T10:24:43.715210Z", "url": "https://files.pythonhosted.org/packages/55/da/beb96ef78c21de93718b28a7f0090ab1c253f25072dc7b7074dc0099e204/django-knox-rest-4.1.0.tar.gz"}]}