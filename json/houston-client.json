{"info": {"author": "James Watkinson, Matt Simmons & Ivan Nedjalkov", "author_email": "james.watkinson@datasparq.ai", "bugtrack_url": null, "classifiers": [], "description": "![Houston logo](https://storage.googleapis.com/gcs-callhouston-asset/houston-title.png)\n\nHouston Python Client Library (https://callhouston.io), links components to a simple workflow api.\n\n## Installation\n\nThis client can be easily installed via pip:\n\n```commandline\npip install houston-client\n```\n\n## Requirements\n\n- Python 3.7\n\n## Proxy\n\nShould you need to use a proxy for your Houston requests, please set them as an environment variable:\n\n```bash\n# windows\nset https_proxy=10.0.0.1 \n\n# linux\nexport https_proxy=10.0.0.1\n\n```\n\n## Usage\n\nPlease read the documentation before getting started: https://callhouston.io/docs\n\nNow ready, you'll need to initialise the Houston object with both an api_key and a mission \n(either the name if already saved or dict of new plan):\n\n```python\nfrom houston.client import Houston\n\nhouston = Houston(api_key=\"H...\", plan=\"test-plan\")\n```\n\n### Plan\n\nA plan is the description of your workflow, to set a new plan please load the json to a dict. \nThis can now be easily saved:\n\n\n```python\nfrom houston.client import Houston\n\nhouston = Houston(api_key=\"H...\", plan=dict())\nhouston.save_plan()\n```\n\nTo return the plan in dictionary format, enter the plan name as a string:\n\n```python\nfrom houston.client import Houston\n\nhouston = Houston(api_key=\"H...\", plan=dict() or str())\nhouston.get_plan()\n```\n\nTo remove the plan from Houston:\nNote: Extra parameter [safe] available to ignore any invalid responses e.g. 400 - plan does not exist\n      True, ignores any errors | False (default), raises any invalid responses \n\n```python\nfrom houston.client import Houston\n\nhouston = Houston(api_key=\"H...\", plan=dict())\nhouston.delete_plan(safe=True)\n```\n\n### Mission\n\nA mission is an instance of a plan, a workflow. To start a mission, first use the methods create_mission to get a \nmission UUID.\n\n```python\nfrom houston.client import Houston\n\nhouston = Houston(api_key=\"H...\", plan=dict())\nmission_id = houston.create_mission()\n```\n\n### Stage\n\nOnce a mission has been created, the client can be used to modify a state's status and progress through the workflow. \nStart / end stage return the JSON response from the api as a dict for downstream use. \n\nResponse keys include: \n\n- next: list, of downstream stages available to be started\n- complete: boolean, True if mission is complete\n- params: dict, contains key / value parameters if stage starting or stage names as keys and params as values if ending\n\nExample of stage starting & ending:\n\n```python\nfrom houston.client import Houston\n\nhouston = Houston(api_key=\"H...\", plan=\"test-plan\")\nmission_id = houston.create_mission()\nhouston_start_response = houston.start_stage(\"test-stage\", mission_id=mission_id)\n\n# Note: only current task parameters returned as dict\nstage_parameters = houston_start_response[\"params\"]\n\n# perform task, handle errors\n\nhouston_end_response = houston.end_stage(\"test-stage\", mission_id=mission_id)\n\n# Note: all available downstream task parameters returned as dict, keys are names of stages, values are dict of params \nnext_task_parameters = houston_end_response[\"params\"][\"next-task\"]\n\n```\n\n## Plugins\n\nPlugins allow for Houston to easily integrate with external tools\n\n### Google Cloud Pub/Sub\n\n[Google Cloud Pub/Sub Documentation](https://cloud.google.com/pubsub/docs/overview)\n\nGoogle Cloud Pub/Sub plugin publishes Houston responses to Topics, using Pub/Sub as a message bus between subscribing \nservices.\n\nTo use this plugin, each stage must have a parameter named \"psq\" which defines the Pub/Sub Topic the stage service is \nlistening to. \n\nNote: stage parameters must NOT include protected keys: \"topic\" & \"data\"\n\nBefore this plugin can be used, you must first create a Pub/Sub Topic and a Subscribing service which carries out your \nstage operations. When complete - the function call_stage_via_pubsub can be used to easily trigger downstream \nstages via Pub/Sub. For example:\n\n```python\n# import GCP Houston plugin\nfrom houston.plugin.gcp import GCPHouston\n\nhouston = GCPHouston(api_key=\"H...\", plan=\"test-plan\")\nmission_id = houston.create_mission()\nhouston.start_stage(\"test-stage\", mission_id=mission_id)\n\n# perform task, handle errors\n\nresponse = houston.end_stage(\"test-stage\", mission_id=mission_id)\nhouston.call_stage_via_pubsub(response, mission_id=mission_id)\n```\n\nStage information and parameters are encoded via both the message body & attributes:\n\n#### Message Body\n\nThe message body (base64 encoded) contains a JSON object of the key stage information:\n\n```json\n{\"stage\":  \"name of stage\",\n \"mission_id\":  \"id of current mission\",\n \"plan\":  \"name of plan\"}\n```\n\nFor convenience, a method \"extract_stage_information\" is provided in the plugin to decode the message body: \n\n```python\nfrom houston.plugin.gcp import GCPHouston\n\ndef main(event, context):\n    \"\"\"Triggered from a message on a Cloud Pub/Sub topic. Calls Houston to start stage named in event payload, executes\n    task function, calls Houston to finish stage.\n\n    :param dict event: Event payload - expected to contain Houston 'stage' and 'mission_id'.\n    :param google.cloud.functions.Context context: Metadata for the event.\n    \"\"\"\n    houston = GCPHouston(api_key=\"H...\", plan=\"test-plan\")\n    houston.extract_stage_information(event[\"data\"])\n```\n\n\n### Message Attributes\n\nThe message attributes contain the key: value pairs of the parameters of the stage (JSON encoded). They can be loaded \nvia the event attributes: \n\n```python\nimport json\n\ndef main(event, context):\n    \"\"\"Triggered from a message on a Cloud Pub/Sub topic. Calls Houston to start stage named in event payload, executes\n    task function, calls Houston to finish stage.\n\n    :param dict event: Event payload - expected to contain Houston 'stage' and 'mission_id'.\n    :param google.cloud.functions.Context context: Metadata for the event.\n    \"\"\"\n    parameters = json.loads(event[\"attributes\"])\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/datasparq-intelligent-products/houston-python", "keywords": "houston", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "houston-client", "package_url": "https://pypi.org/project/houston-client/", "platform": "", "project_url": "https://pypi.org/project/houston-client/", "project_urls": {"Homepage": "https://github.com/datasparq-intelligent-products/houston-python"}, "release_url": "https://pypi.org/project/houston-client/1.0.0/", "requires_dist": ["requests (==2.22.0)", "requests[security] (==2.22.0)", "google-cloud-pubsub (==1.2.0) ; extra == 'gcp'"], "requires_python": "", "summary": "Houston Python Client", "version": "1.0.0"}, "last_serial": 6821406, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "385d88f3ad3b693a5aa4299d8604604d", "sha256": "3e3dab3e7513dd03a34bb37f1f090ab1483ca76828b76823312123b00bcbceca"}, "downloads": -1, "filename": "houston_client-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "385d88f3ad3b693a5aa4299d8604604d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11075, "upload_time": "2020-03-16T13:33:20", "upload_time_iso_8601": "2020-03-16T13:33:20.588855Z", "url": "https://files.pythonhosted.org/packages/1a/3f/0042ef939b0f81817c997bdbed88142992fa05627764d067bae1a4ad41eb/houston_client-1.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "e226d66333db8b7fb6ae29a0b7f88952", "sha256": "06a5b51282fda1042f27be6cfcb008e054f60a563a0fb669ee1f57fdb639034b"}, "downloads": -1, "filename": "houston-client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e226d66333db8b7fb6ae29a0b7f88952", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8799, "upload_time": "2020-03-16T13:33:22", "upload_time_iso_8601": "2020-03-16T13:33:22.902873Z", "url": "https://files.pythonhosted.org/packages/6f/99/303451392b43429d5697c8b6ce0e5ef03cda62f05f4b5add17dd9e80c332/houston-client-1.0.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "385d88f3ad3b693a5aa4299d8604604d", "sha256": "3e3dab3e7513dd03a34bb37f1f090ab1483ca76828b76823312123b00bcbceca"}, "downloads": -1, "filename": "houston_client-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "385d88f3ad3b693a5aa4299d8604604d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11075, "upload_time": "2020-03-16T13:33:20", "upload_time_iso_8601": "2020-03-16T13:33:20.588855Z", "url": "https://files.pythonhosted.org/packages/1a/3f/0042ef939b0f81817c997bdbed88142992fa05627764d067bae1a4ad41eb/houston_client-1.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "e226d66333db8b7fb6ae29a0b7f88952", "sha256": "06a5b51282fda1042f27be6cfcb008e054f60a563a0fb669ee1f57fdb639034b"}, "downloads": -1, "filename": "houston-client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e226d66333db8b7fb6ae29a0b7f88952", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8799, "upload_time": "2020-03-16T13:33:22", "upload_time_iso_8601": "2020-03-16T13:33:22.902873Z", "url": "https://files.pythonhosted.org/packages/6f/99/303451392b43429d5697c8b6ce0e5ef03cda62f05f4b5add17dd9e80c332/houston-client-1.0.0.tar.gz"}]}