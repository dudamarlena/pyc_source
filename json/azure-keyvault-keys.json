{"info": {"author": "Microsoft Corporation", "author_email": "azurekeyvault@microsoft.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Azure Key Vault Keys client library for Python\nAzure Key Vault helps solve the following problems:\n- Cryptographic key management (this library) - create, store, and control\naccess to the keys used to encrypt your data\n- Secrets management\n([azure-keyvault-secrets](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-secrets)) -\nsecurely store and control access to tokens, passwords, certificates, API keys,\nand other secrets\n- Certificate management\n([azure-keyvault-certificates](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-certificates)) -\ncreate, manage, and deploy public and private SSL/TLS certificates\n\n[Source code][key_client_src] | [Package (PyPI)][pypi_package_keys] | [API reference documentation][reference_docs] | [Product documentation][keyvault_docs] | [Samples][key_samples]\n\n## Getting started\n### Install packages\nInstall [azure-keyvault-keys][pypi_package_keys] and\n[azure-identity][azure_identity_pypi] with [pip][pip]:\n```Bash\npip install azure-keyvault-keys azure-identity\n```\n[azure-identity][azure_identity] is used for Azure Active Directory\nauthentication as demonstrated below.\n\n### Prerequisites\n* An [Azure subscription][azure_sub]\n* Python 2.7, 3.5.3, or later\n* A Key Vault. If you need to create one, you can use the\n[Azure Cloud Shell][azure_cloud_shell] to create one with these commands\n(replace `\"my-resource-group\"` and `\"my-key-vault\"` with your own, unique\nnames):\n\n  (Optional) if you want a new resource group to hold the Key Vault:\n  ```sh\n  az group create --name my-resource-group --location westus2\n  ```\n\n  Create the Key Vault:\n  ```Bash\n  az keyvault create --resource-group my-resource-group --name my-key-vault\n  ```\n\n  Output:\n  ```json\n  {\n      \"id\": \"...\",\n      \"location\": \"westus2\",\n      \"name\": \"my-key-vault\",\n      \"properties\": {\n          \"accessPolicies\": [...],\n          \"createMode\": null,\n          \"enablePurgeProtection\": null,\n          \"enableSoftDelete\": null,\n          \"enabledForDeployment\": false,\n          \"enabledForDiskEncryption\": null,\n          \"enabledForTemplateDeployment\": null,\n          \"networkAcls\": null,\n          \"provisioningState\": \"Succeeded\",\n          \"sku\": { \"name\": \"standard\" },\n          \"tenantId\": \"...\",\n          \"vaultUri\": \"https://my-key-vault.vault.azure.net/\"\n      },\n      \"resourceGroup\": \"my-resource-group\",\n      \"type\": \"Microsoft.KeyVault/vaults\"\n  }\n  ```\n\n  > The `\"vaultUri\"` property is the `vault_url` used by [KeyClient][key_client_docs]\n\n### Authenticate the client\nThis document demonstrates using [DefaultAzureCredential][default_cred_ref]\nto authenticate as a service principal. However, [KeyClient][key_client_docs]\naccepts any [azure-identity][azure_identity] credential. See the\n[azure-identity][azure_identity] documentation for more information about other\ncredentials.\n\n#### Create a service principal (optional)\nThis [Azure Cloud Shell][azure_cloud_shell] snippet shows how to create a\nnew service principal. Before using it, replace \"your-application-name\" with\na more appropriate name for your service principal.\n\nCreate a service principal:\n```Bash\naz ad sp create-for-rbac --name http://my-application --skip-assignment\n```\n\n> Output:\n> ```json\n> {\n>     \"appId\": \"generated app id\",\n>     \"displayName\": \"my-application\",\n>     \"name\": \"http://my-application\",\n>     \"password\": \"random password\",\n>     \"tenant\": \"tenant id\"\n> }\n> ```\n\nUse the output to set **AZURE_CLIENT_ID** (\"appId\" above), **AZURE_CLIENT_SECRET**\n(\"password\" above) and **AZURE_TENANT_ID** (\"tenant\" above) environment variables.\nThe following example shows a way to do this in Bash:\n```Bash\nexport AZURE_CLIENT_ID=\"generated app id\"\nexport AZURE_CLIENT_SECRET=\"random password\"\nexport AZURE_TENANT_ID=\"tenant id\"\n```\n\nAuthorize the service principal to perform key operations in your Key Vault:\n```Bash\naz keyvault set-policy --name my-key-vault --spn $AZURE_CLIENT_ID --key-permissions backup delete get list create update decrypt encrypt\n```\n> Possible permissions:\n> - Key management: backup, delete, get, list, purge, recover, restore, create, update, import\n> - Cryptographic operations: decrypt, encrypt, unwrapKey, wrapKey, verify, sign\n\n\n#### Create a client\nOnce the **AZURE_CLIENT_ID**, **AZURE_CLIENT_SECRET** and\n**AZURE_TENANT_ID** environment variables are set,\n[DefaultAzureCredential][default_cred_ref] will be able to authenticate the\n[KeyClient][key_client_docs].\n\nConstructing the client also requires your vault's URL, which you can\nget from the Azure CLI or the Azure Portal. In the Azure Portal, this URL is\nthe vault's \"DNS Name\".\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n```\n\n## Key concepts\n### Keys\nAzure Key Vault can create and store RSA and elliptic curve keys. Both can\noptionally be protected by hardware security modules (HSMs). Azure Key Vault\ncan also perform cryptographic operations with them. For more information about\nkeys and supported operations and algorithms, see the\n[Key Vault documentation](https://docs.microsoft.com/en-us/azure/key-vault/about-keys-secrets-and-certificates#key-vault-keys).\n\n[KeyClient][key_client_docs] can create keys in the vault, get existing keys\nfrom the vault, update key metadata, and delete keys, as shown in the\n[examples](#examples \"examples\") below.\n\n## Examples\nThis section contains code snippets covering common tasks:\n* [Create a Key](#create-a-key \"Create a Key\")\n* [Retrieve a Key](#retrieve-a-key \"Retrieve a Key\")\n* [Update an existing Key](#update-an-existing-key \"Update an existing Key\")\n* [Delete a Key](#delete-a-key \"Delete a Key\")\n* [List Keys](#list-keys \"List Keys\")\n* [Asynchronously create a Key](#asynchronously-create-a-key \"Asynchronously create a Key\")\n* [Asynchronously list Keys](#asynchronously-list-keys \"Asynchronously list Keys\")\n* [Perform cryptographic operations](#cryptographic-operations)\n\n### Create a Key\n[create_rsa_key](https://aka.ms/azsdk-python-keyvault-keys-create-rsa-key-ref) and\n[create_ec_key](https://aka.ms/azsdk-python-keyvault-keys-create-ec-key-rf) create RSA and elliptic curve keys in the\nvault, respectively. If a key with the same name already exists, a new version\nof that key is created.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# Create an RSA key\nrsa_key = key_client.create_rsa_key(\"rsa-key-name\", size=2048)\nprint(rsa_key.name)\nprint(rsa_key.key_type)\n\n# Create an elliptic curve key\nec_key = key_client.create_ec_key(\"ec-key-name\", curve=\"P-256\")\nprint(ec_key.name)\nprint(ec_key.key_type)\n```\n\n### Retrieve a Key\n[get_key](https://aka.ms/azsdk-python-keyvault-keys-get-key-ref) retrieves a key previously stored in the vault.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkey = key_client.get_key(\"key-name\")\nprint(key.name)\n```\n\n### Update an existing Key\n[update_key_properties](https://aka.ms/azsdk-python-keyvault-keys-update-key-ref) updates the properties of a key previously stored in the Key Vault.\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# we will now disable the key for further use\nupdated_key = key_client.update_key_properties(\"key-name\", enabled=False)\n\nprint(updated_key.name)\nprint(updated_key.properties.enabled)\n```\n\n### Delete a Key\n[begin_delete_key](https://aka.ms/azsdk-python-keyvault-keys-begin-delete-key-ref) requests Key Vault delete a key, returning a poller which allows you to\nwait for the deletion to finish. Waiting is helpful when the vault has [soft-delete][soft_delete]\nenabled, and you want to purge (permanently delete) the key as soon as possible.\nWhen [soft-delete][soft_delete] is disabled, `begin_delete_key` itself is permanent.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\ndeleted_key = key_client.begin_delete_key(\"key-name\").result()\n\nprint(deleted_key.name)\nprint(deleted_key.deleted_date)\n```\n### List keys\n[list_properties_of_keys](https://aka.ms/azsdk-python-keyvault-keys-list-properties-keys-ref) lists the\nproperties of all of the keys in the client's vault.\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\n\ncredential = DefaultAzureCredential()\n\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkeys = key_client.list_properties_of_keys()\n\nfor key in keys:\n    # the list doesn't include values or versions of the keys\n    print(key.name)\n```\n\n### Cryptographic operations\n[CryptographyClient][crypto_client_docs] enables cryptographic operations (encrypt/decrypt,\nwrap/unwrap, sign/verify) using a particular key.\n\n```py\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nfrom azure.keyvault.keys.crypto import CryptographyClient, EncryptionAlgorithm\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\nkey = key_client.get_key(\"key-name\")\ncrypto_client = CryptographyClient(key, credential=credential)\nplaintext = b\"plaintext\"\n\nresult = crypto_client.encrypt(EncryptionAlgorithm.rsa_oaep, plaintext)\ndecrypted = crypto_client.decrypt(result.algorithm, result.ciphertext)\n```\n\nSee the\n[package documentation](https://aka.ms/azsdk-python-keyvault-keys-crypto-ref)\nfor more details of the cryptography API.\n\n### Async API\nThis library includes a complete async API supported on Python 3.5+. To use it, you must\nfirst install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/).\nSee\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/core/azure-core/README.md#transport)\nfor more information.\n\nAsync clients should be closed when they're no longer needed. Each async\nclient is an async context manager and defines an async `close` method. For\nexample:\n\n```py\nfrom azure.keyvault.keys import KeyClient\n\n# call close when the client is no longer needed\nclient = KeyClient()\n...\nawait client.close()\n\n# alternatively, use the client as an async context manager\nclient = KeyClient()\nasync with client:\n  ...\n```\n\n### Asynchronously create a Key\n[create_rsa_key](https://aka.ms/azsdk-python-keyvault-keys-async-create-rsa-key-ref) and\n[create_ec_key](https://aka.ms/azsdk-python-keyvault-keys-async-create-ec-key-ref) create RSA and elliptic curve keys in the vault, respectively.\nIf a key with the same name already exists, a new version of the key is created.\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\n# Create an RSA key\nrsa_key = await key_client.create_rsa_key(\"rsa-key-name\", size=2048)\nprint(rsa_key.name)\nprint(rsa_key.key_type)\n\n# Create an elliptic curve key\nec_key = await key_client.create_ec_key(\"ec-key-name\", curve=\"P-256\")\nprint(ec_key.name)\nprint(ec_key.key_type)\n```\n\n### Asynchronously list keys\n[list_properties_of_keys](https://aka.ms/azsdk-python-keyvault-keys-async-list-properties-keys-ref) lists the\nproperties of all of the keys in the client's vault.\n\n```python\nfrom azure.identity.aio import DefaultAzureCredential\nfrom azure.keyvault.keys.aio import KeyClient\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\nkeys = key_client.list_properties_of_keys()\n\nasync for key in keys:\n    print(key.name)\n```\n\n## Troubleshooting\n### General\nKey Vault clients raise exceptions defined in [azure-core][azure_core_exceptions].\nFor example, if you try to get a key that doesn't exist in the vault, [KeyClient][key_client_docs]\nraises [ResourceNotFoundError](https://aka.ms/azsdk-python-core-exceptions-resource-not-found-error):\n\n```python\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nfrom azure.core.exceptions import ResourceNotFoundError\n\ncredential = DefaultAzureCredential()\nkey_client = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential)\n\ntry:\n    key_client.get_key(\"which-does-not-exist\")\nexcept ResourceNotFoundError as e:\n    print(e.message)\n```\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3.5/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```py\nfrom azure.identity import DefaultAzureCredential\nfrom azure.keyvault.keys import KeyClient\nimport sys\nimport logging\n\n# Create a logger for the 'azure' SDK\nlogger = logging.getLogger('azure')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\ncredential = DefaultAzureCredential()\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nclient = KeyClient(vault_url=\"https://my-key-vault.vault.azure.net/\", credential=credential, logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```py\nclient.get_key(\"my-key\", logging_enable=True)\n```\n\n## Next steps\nSeveral samples are available in the Azure SDK for Python GitHub repository.\nThese provide example code for additional Key Vault scenarios:\n* [hello_world.py][hello_world_sample] and\n[hello_world_async.py][hello_world_async_sample] - create/get/update/delete keys\n* [list_operations.py][list_operations_sample] and\n[list_operations_async.py][list_operations_async_sample] - basic list operations for keys\n* [backup_restore_operations.py][backup_operations_sample] and\n[backup_restore_operations_async.py][backup_operations_async_sample] - backup and\nrecover keys\n* [recover_purge_operations.py][recover_purge_sample] and\n[recover_purge_operations_async.py][recover_purge_async_sample] - recovering and purging keys\n\n###  Additional Documentation\nFor more extensive documentation on Azure Key Vault, see the\n[API reference documentation][reference_docs].\n\n## Contributing\nThis project welcomes contributions and suggestions. Most contributions require\nyou to agree to a Contributor License Agreement (CLA) declaring that you have\nthe right to, and actually do, grant us the rights to use your contribution.\nFor details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether\nyou need to provide a CLA and decorate the PR appropriately (e.g., label,\ncomment). Simply follow the instructions provided by the bot. You will only\nneed to do this once across all repos using our CLA.\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct][code_of_conduct]. For more information,\nsee the Code of Conduct FAQ or contact opencode@microsoft.com with any\nadditional questions or comments.\n\n[azure_cloud_shell]: https://shell.azure.com/bash\n[azure_core_exceptions]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/core/azure-core#azure-core-library-exceptions\n[azure_identity]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/identity/azure-identity\n[azure_identity_pypi]: https://pypi.org/project/azure-identity/\n[azure_sub]: https://azure.microsoft.com/free/\n[default_cred_ref]: https://aka.ms/azsdk-python-identity-default-cred-ref\n[code_of_conduct]: https://opensource.microsoft.com/codeofconduct/\n[hello_world_sample]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/samples/hello_world.py\n[hello_world_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/samples/hello_world_async.py\n[backup_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/samples/backup_restore_operations.py\n[backup_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/samples/backup_restore_operations_async.py\n[list_operations_sample]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/samples/list_operations.py\n[list_operations_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/samples/list_operations_async.py\n[recover_purge_sample]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/samples/recover_purge_operations.py\n[recover_purge_async_sample]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/samples/recover_purge_operations_async.py\n[keyvault_docs]: https://docs.microsoft.com/en-us/azure/key-vault/\n[pip]: https://pypi.org/project/pip/\n[pypi_package_keys]: https://pypi.org/project/azure-keyvault-keys/\n[reference_docs]: https://aka.ms/azsdk-python-keyvault-keys-docs\n[key_client_docs]: https://aka.ms/azsdk-python-keyvault-keys-keyclient\n[crypto_client_docs]: https://aka.ms/azsdk-python-keyvault-keys-cryptographyclient\n[key_client_src]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-keys/azure/keyvault/keys\n[key_samples]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-keys/samples\n[soft_delete]: https://docs.microsoft.com/en-us/azure/key-vault/key-vault-ovw-soft-delete\n[test_examples_keys]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/tests/test_samples_keys.py\n[test_example_keys_async]: https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/keyvault/azure-keyvault-keys/tests/test_samples_keys_async.py\n\n![Impressions](https://azure-sdk-impressions.azurewebsites.net/api/impressions/azure-sdk-for-python%2Fsdk%2Fkeyvault%2Fazure-keyvault-keys%2FFREADME.png)\n\n\n# Release History\n\n## 4.1.0 (2020-03-10)\n- `KeyClient` instances have a `close` method which closes opened sockets. Used\nas a context manager, a `KeyClient` closes opened sockets on exit.\n([#9906](https://github.com/Azure/azure-sdk-for-python/pull/9906))\n- Pollers no longer sleep after operation completion\n([#9991](https://github.com/Azure/azure-sdk-for-python/pull/9991))\n\n## 4.0.1 (2020-02-11)\n- `azure.keyvault.keys` defines `__version__`\n- Challenge authentication policy preserves request options\n([#8999](https://github.com/Azure/azure-sdk-for-python/pull/8999))\n- Updated `msrest` requirement to >=0.6.0\n- Challenge authentication policy requires TLS\n([#9457](https://github.com/Azure/azure-sdk-for-python/pull/9457))\n- Methods no longer raise the internal error `KeyVaultErrorException`\n([#9690](https://github.com/Azure/azure-sdk-for-python/issues/9690))\n- Fix `AttributeError` in async CryptographyClient when verifying signatures remotely\n([#9734](https://github.com/Azure/azure-sdk-for-python/pull/9734))\n\n## 2019-10-31 4.0.0\n### Breaking changes:\n- Removed `KeyClient.get_cryptography_client()` and `CryptographyClient.get_key()`\n- Moved the optional parameters of several methods into kwargs (\n[docs](https://azure.github.io/azure-sdk-for-python/ref/azure.keyvault.keys.html)\ndetail the new keyword arguments):\n  - `create_key` now has positional parameters `name` and `key_type`\n  - `create_ec_key` and `create_rsa_key` now have one positional parameter, `name`\n  - `update_key_properties` now has two positional parameters, `name` and\n     (optional) `version`\n  - `import_key` now has positional parameters `name` and `key`\n- `CryptographyClient` operations return class instances instead of tuples and renamed the following\nproperties\n    - Renamed the `decrypted_bytes` property of `DecryptResult` to `plaintext`\n    - Renamed the `unwrapped_bytes` property of `UnwrapResult` to `key`\n    - Renamed the `result` property of `VerifyResult` to `is_valid`\n- Renamed the `UnwrapKeyResult` and `WrapKeyResult` classes to `UnwrapResult` and `WrapResult`\n- Renamed `list_keys` to `list_properties_of_keys`\n- Renamed `list_key_versions` to `list_properties_of_key_versions`\n- Renamed sync method `delete_key` to `begin_delete_key`\n- The sync method `begin_delete_key` and async `delete_key` now return pollers that return a `DeletedKey`\n- Renamed `Key` to `KeyVaultKey`\n- `KeyVaultKey` properties `created`, `expires`, and `updated` renamed to `created_on`,\n`expires_on`, and `updated_on`\n- The `vault_endpoint` parameter of `KeyClient` has been renamed to `vault_url`\n- The property `vault_endpoint` has been renamed to `vault_url` in all models\n\n### New features:\n- Now all `CryptographyClient` returns include `key_id` and `algorithm` properties\n\n\n## 4.0.0b4 (2019-10-08)\n- Enums `JsonWebKeyCurveName`, `JsonWebKeyOperation`, and `JsonWebKeyType` have\nbeen renamed to `KeyCurveName`, `KeyOperation`, and `KeyType`, respectively.\n- `Key` now has attribute `properties`, which holds certain properties of the\nkey, such as `version`. This changes the shape of the returned `Key` type,\nas certain properties of `Key` (such as `version`) have to be accessed\nthrough the `properties` property. See the updated [docs](https://azure.github.io/azure-sdk-for-python/ref/azure.keyvault.keys.html)\nfor details.\n- `update_key` has been renamed to `update_key_properties`\n- The `vault_url` parameter of `KeyClient` has been renamed to `vault_endpoint`\n- The property `vault_url` has been renamed to `vault_endpoint` in all models\n\n### Fixes and improvements:\n- The `key` argument to `import_key` should be an instance of `azure.keyvault.keys.JsonWebKey`\n([#7590](https://github.com/Azure/azure-sdk-for-python/pull/7590))\n\n\n## 4.0.0b3 (2019-09-11)\n### Breaking changes:\n- `CryptographyClient` methods `wrap` and `unwrap` are renamed `wrap_key` and\n`unwrap_key`, respectively.\n\n### New features:\n- `CryptographyClient` performs encrypt, verify and wrap operations locally\nwhen its key's public material is available (i.e., when it has keys/get\npermission).\n\n## 4.0.0b2 (2019-08-06)\n### Breaking changes:\n- Removed `azure.core.Configuration` from the public API in preparation for a\nrevamped configuration API. Static `create_config` methods have been renamed\n`_create_config`, and will be removed in a future release.\n- Removed `wrap_key` and `unwrap_key` from `KeyClient`. These are now available\nthrough `CryptographyClient`.\n- This version of the library requires `azure-core` 1.0.0b2\n  - If you later want to revert to a version requiring azure-core 1.0.0b1,\n  of this or another Azure SDK library, you must explicitly install azure-core\n  1.0.0b1 as well. For example:\n  `pip install azure-core==1.0.0b1 azure-keyvault-keys==4.0.0b1`\n\n### New features:\n- Added `CryptographyClient`, a client for performing cryptographic operations\n(encrypt/decrypt, wrap/unwrap, sign/verify) with a key.\n- Distributed tracing framework OpenCensus is now supported\n- Added support for HTTP challenge based authentication, allowing clients to\ninteract with vaults in sovereign clouds.\n\n### Other changes:\n- Async clients use [aiohttp](https://pypi.org/project/aiohttp/) for transport\nby default. See\n[azure-core documentation](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/core/azure-core/README.md/#transport)\nfor more information about using other transports.\n\n## 4.0.0b1 (2019-06-28)\nVersion 4.0.0b1 is the first preview of our efforts to create a user-friendly\nand Pythonic client library for Azure Key Vault. For more information about\npreview releases of other Azure SDK libraries, please visit\nhttps://aka.ms/azure-sdk-preview1-python.\n\nThis library is not a direct replacement for `azure-keyvault`. Applications\nusing that library would require code changes to use `azure-keyvault-keys`.\nThis package's\n[documentation](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-keys/README.md)\nand\n[samples](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-keys/samples)\ndemonstrate the new API.\n\n### Major changes from `azure-keyvault`\n- Packages scoped by functionality\n    - `azure-keyvault-keys` contains a client for key operations,\n    `azure-keyvault-secrets` contains a client for secret operations\n- Client instances are scoped to vaults (an instance interacts with one vault\nonly)\n- Asynchronous API supported on Python 3.5.3+\n    - the `azure.keyvault.keys.aio` namespace contains an async equivalent of\n    the synchronous client in `azure.keyvault.keys`\n- Authentication using `azure-identity` credentials\n  - see this package's\n  [documentation](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-keys/README.md)\n  , and the\n  [Azure Identity documentation](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/identity/azure-identity/README.md)\n  for more information\n\n### `azure-keyvault` features not implemented in this release\n- Certificate management APIs\n- Cryptographic operations, e.g. sign, un/wrap_key, verify, en- and\ndecrypt\n- National cloud support. This release supports public global cloud vaults,\n    e.g. https://{vault-name}.vault.azure.net\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-keys", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "azure-keyvault-keys", "package_url": "https://pypi.org/project/azure-keyvault-keys/", "platform": "", "project_url": "https://pypi.org/project/azure-keyvault-keys/", "project_urls": {"Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/keyvault/azure-keyvault-keys"}, "release_url": "https://pypi.org/project/azure-keyvault-keys/4.1.0/", "requires_dist": ["azure-core (<2.0.0,>=1.2.1)", "cryptography (>=2.1.4)", "msrest (>=0.6.0)", "azure-keyvault-nspkg ; python_version<'3.0'", "enum34 (>=1.0.4) ; python_version<'3.4'", "typing ; python_version<'3.5'"], "requires_python": "", "summary": "Microsoft Azure Key Vault Keys Client Library for Python", "version": "4.1.0"}, "last_serial": 6786250, "releases": {"4.0.0": [{"comment_text": "", "digests": {"md5": "5cf5ba979464e0d267f03679a38bd5aa", "sha256": "2983fa42e20a0e6bf6b87976716129c108e613e0292d34c5b0f0c8dc1d488e89"}, "downloads": -1, "filename": "azure_keyvault_keys-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5cf5ba979464e0d267f03679a38bd5aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 185726, "upload_time": "2019-10-31T23:15:00", "upload_time_iso_8601": "2019-10-31T23:15:00.448230Z", "url": "https://files.pythonhosted.org/packages/ff/26/b793a0eec89e54378f88194a4f9cf7c463ca244a44392aeca028fa9e019c/azure_keyvault_keys-4.0.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "9d444869107eef311a771f50fe7f7fb8", "sha256": "38c27322637a2c52620a8b96da1942ad6a8d22d09b5a01f6fa257f7a51e52ed0"}, "downloads": -1, "filename": "azure-keyvault-keys-4.0.0.zip", "has_sig": false, "md5_digest": "9d444869107eef311a771f50fe7f7fb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 452481, "upload_time": "2019-10-31T23:15:02", "upload_time_iso_8601": "2019-10-31T23:15:02.115437Z", "url": "https://files.pythonhosted.org/packages/84/ec/4e8dae677aa2e2570bb7bec676687a661a29292fc07b1eb80f053243f692/azure-keyvault-keys-4.0.0.zip"}], "4.0.0b1": [{"comment_text": "", "digests": {"md5": "a2807af1471fd663bff6e67af58e3fb4", "sha256": "a8061422e2fce598241a318f9e642d67e311ed35143a48d17a7ec7f3695f2cc7"}, "downloads": -1, "filename": "azure_keyvault_keys-4.0.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a2807af1471fd663bff6e67af58e3fb4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 150119, "upload_time": "2019-06-28T23:40:01", "upload_time_iso_8601": "2019-06-28T23:40:01.626276Z", "url": "https://files.pythonhosted.org/packages/34/94/1e1ee5be5e8b29d637ddda186e0e2cc17d99bc08ce18a85208021f7f9372/azure_keyvault_keys-4.0.0b1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4567fa11817c844980a4769e8b1475ea", "sha256": "f69e74d06ed53878b99d3cf63e990c95cc62017e12c0483023c0e2283977e222"}, "downloads": -1, "filename": "azure-keyvault-keys-4.0.0b1.zip", "has_sig": false, "md5_digest": "4567fa11817c844980a4769e8b1475ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167420, "upload_time": "2019-06-28T23:40:07", "upload_time_iso_8601": "2019-06-28T23:40:07.296494Z", "url": "https://files.pythonhosted.org/packages/9b/5c/76dbfeb3e05d886832a29cb0904fc16f99b76eeea3a8181cb3ffd7c286bb/azure-keyvault-keys-4.0.0b1.zip"}], "4.0.0b2": [{"comment_text": "", "digests": {"md5": "c1e5474479212228e14f533385601b93", "sha256": "145e5f25c45334076518b44fa7cfb45919398e4b633fa2430ae9a75a41837a4c"}, "downloads": -1, "filename": "azure_keyvault_keys-4.0.0b2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c1e5474479212228e14f533385601b93", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 161060, "upload_time": "2019-08-07T01:38:03", "upload_time_iso_8601": "2019-08-07T01:38:03.036875Z", "url": "https://files.pythonhosted.org/packages/0d/63/3fc58f4d9f064d126708cae1c3f572d0296604be67ebeed3e28b3bffd9a5/azure_keyvault_keys-4.0.0b2-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "134c71880fbdc0c8f45db4e999e252b2", "sha256": "09ec1d364fc0405c832b3e74df3ffae9360b22930e8a4c30efc9e77a0d6078c5"}, "downloads": -1, "filename": "azure-keyvault-keys-4.0.0b2.zip", "has_sig": false, "md5_digest": "134c71880fbdc0c8f45db4e999e252b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 181573, "upload_time": "2019-08-07T01:38:04", "upload_time_iso_8601": "2019-08-07T01:38:04.899786Z", "url": "https://files.pythonhosted.org/packages/3f/76/c73e2ba53c30b72eaaa7dfd433003f2db9b46104ba777d5412a4ec49d71f/azure-keyvault-keys-4.0.0b2.zip"}], "4.0.0b3": [{"comment_text": "", "digests": {"md5": "c3f423880ede1d52d205063dc73ceff8", "sha256": "744e7559fd79ab80473750c8e9488011952612c3dc94e72c4828655e14971b17"}, "downloads": -1, "filename": "azure_keyvault_keys-4.0.0b3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c3f423880ede1d52d205063dc73ceff8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 178185, "upload_time": "2019-09-11T17:56:09", "upload_time_iso_8601": "2019-09-11T17:56:09.051002Z", "url": "https://files.pythonhosted.org/packages/44/7d/038ee0939520494a0e7c26672fed4ecb745084c879bd0ff01dcfeb2942ff/azure_keyvault_keys-4.0.0b3-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "03dd3082657483958b4d0eee52c8974d", "sha256": "04552f2956b71fac496433e9cdd9b2b9f7b477a4f7ea96fc6228239d9dab3191"}, "downloads": -1, "filename": "azure-keyvault-keys-4.0.0b3.zip", "has_sig": false, "md5_digest": "03dd3082657483958b4d0eee52c8974d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 199607, "upload_time": "2019-09-11T17:56:10", "upload_time_iso_8601": "2019-09-11T17:56:10.951813Z", "url": "https://files.pythonhosted.org/packages/c5/fe/45f806980f8e3ebe808a347ad368aa92d081f6b67264561abcd9ad5327ff/azure-keyvault-keys-4.0.0b3.zip"}], "4.0.0b4": [{"comment_text": "", "digests": {"md5": "9bdc4461afbd5090177d3d323236fb62", "sha256": "57218f2cbd313cd00882aae84cdc0dac4ccc3ef267093f698d86bbe0f2fa1cba"}, "downloads": -1, "filename": "azure_keyvault_keys-4.0.0b4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9bdc4461afbd5090177d3d323236fb62", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 180109, "upload_time": "2019-10-08T20:16:55", "upload_time_iso_8601": "2019-10-08T20:16:55.139963Z", "url": "https://files.pythonhosted.org/packages/99/37/9b3581c00653ba635ec0dffe995b3dcf4f151478606ba4d74145cb505210/azure_keyvault_keys-4.0.0b4-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "602adfa7a9fe539f1d41e568bf588c62", "sha256": "ce4b88503bebc3a2863cc6bed44976b4f9669958320450fd3dec5045393958cb"}, "downloads": -1, "filename": "azure-keyvault-keys-4.0.0b4.zip", "has_sig": false, "md5_digest": "602adfa7a9fe539f1d41e568bf588c62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 423018, "upload_time": "2019-10-08T20:16:57", "upload_time_iso_8601": "2019-10-08T20:16:57.327308Z", "url": "https://files.pythonhosted.org/packages/69/55/3050000b3207c9dccd5f33271351f52969000130371dad0b6cd7bea6925e/azure-keyvault-keys-4.0.0b4.zip"}], "4.0.1": [{"comment_text": "", "digests": {"md5": "5ff0cc83e2884abc43d80f3674cd454f", "sha256": "1c230c052b9f0b9ecaee97347fe4ebf3fcc798f92edbfd618ea264efc61ad554"}, "downloads": -1, "filename": "azure_keyvault_keys-4.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5ff0cc83e2884abc43d80f3674cd454f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 187832, "upload_time": "2020-02-11T20:08:35", "upload_time_iso_8601": "2020-02-11T20:08:35.770046Z", "url": "https://files.pythonhosted.org/packages/50/19/11b41577a8b7c9b52acd2802556657035dbeef753d2e30b389712dfaa6b7/azure_keyvault_keys-4.0.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "27774645acccf3fcecdf006552c6f720", "sha256": "711af402a0000ac329406253470c1198cc452adc8638608461ae54c8dce92afc"}, "downloads": -1, "filename": "azure-keyvault-keys-4.0.1.zip", "has_sig": false, "md5_digest": "27774645acccf3fcecdf006552c6f720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 261878, "upload_time": "2020-02-11T20:08:37", "upload_time_iso_8601": "2020-02-11T20:08:37.870330Z", "url": "https://files.pythonhosted.org/packages/62/25/384621c0183e788c67d73ffa6d50d06ad54f302bfc171da86f2f533bc309/azure-keyvault-keys-4.0.1.zip"}], "4.1.0": [{"comment_text": "", "digests": {"md5": "7f800a081d1510c4f8384dfefd3ef66d", "sha256": "baf18c6a4b1724a783531ae222a83a5c4600d7fbb581e4d694f3ee759ef18579"}, "downloads": -1, "filename": "azure_keyvault_keys-4.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7f800a081d1510c4f8384dfefd3ef66d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 186481, "upload_time": "2020-03-10T14:48:04", "upload_time_iso_8601": "2020-03-10T14:48:04.375704Z", "url": "https://files.pythonhosted.org/packages/bd/11/2b9f1b1dd59337f844b9f857e1bcd1db87af28f84716b6e44fbd48cffea6/azure_keyvault_keys-4.1.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4d41043992a8b8d2d621af167b8434a4", "sha256": "f9967b4deb48e619f6c40558f69e48978779cc09c8a7fad33d536cfc41cd68f9"}, "downloads": -1, "filename": "azure-keyvault-keys-4.1.0.zip", "has_sig": false, "md5_digest": "4d41043992a8b8d2d621af167b8434a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 264045, "upload_time": "2020-03-10T14:48:06", "upload_time_iso_8601": "2020-03-10T14:48:06.474512Z", "url": "https://files.pythonhosted.org/packages/27/d3/0ac6f31a401dde965a3b3fce9015b043bd27c87b9203554967acf37ca4a9/azure-keyvault-keys-4.1.0.zip"}], "4.2.0b1": [{"comment_text": "", "digests": {"md5": "49dbe61e115ea9a03847d2393689f7cf", "sha256": "d24b5df6f895cbc73f5b125b53169340630d073354903bf290b2d77c2391eadd"}, "downloads": -1, "filename": "azure_keyvault_keys-4.2.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "49dbe61e115ea9a03847d2393689f7cf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 253543, "upload_time": "2020-03-10T16:37:16", "upload_time_iso_8601": "2020-03-10T16:37:16.489316Z", "url": "https://files.pythonhosted.org/packages/80/40/3fd3a6471523faf295beb648cc2b22dfcd3bff092c7e86d573ce3ebccd1c/azure_keyvault_keys-4.2.0b1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3c532335698d611d3a06e8fafc51bc8e", "sha256": "883d70e42beb9a35fcfd481886411363a844eb8d16e6c832559621bb4659dd8c"}, "downloads": -1, "filename": "azure-keyvault-keys-4.2.0b1.zip", "has_sig": false, "md5_digest": "3c532335698d611d3a06e8fafc51bc8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 334208, "upload_time": "2020-03-10T16:37:18", "upload_time_iso_8601": "2020-03-10T16:37:18.759759Z", "url": "https://files.pythonhosted.org/packages/06/88/4e392541e590f341174d0f3af5f84ba75fc4a5955f676659fa49fb73ec02/azure-keyvault-keys-4.2.0b1.zip"}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f800a081d1510c4f8384dfefd3ef66d", "sha256": "baf18c6a4b1724a783531ae222a83a5c4600d7fbb581e4d694f3ee759ef18579"}, "downloads": -1, "filename": "azure_keyvault_keys-4.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7f800a081d1510c4f8384dfefd3ef66d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 186481, "upload_time": "2020-03-10T14:48:04", "upload_time_iso_8601": "2020-03-10T14:48:04.375704Z", "url": "https://files.pythonhosted.org/packages/bd/11/2b9f1b1dd59337f844b9f857e1bcd1db87af28f84716b6e44fbd48cffea6/azure_keyvault_keys-4.1.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4d41043992a8b8d2d621af167b8434a4", "sha256": "f9967b4deb48e619f6c40558f69e48978779cc09c8a7fad33d536cfc41cd68f9"}, "downloads": -1, "filename": "azure-keyvault-keys-4.1.0.zip", "has_sig": false, "md5_digest": "4d41043992a8b8d2d621af167b8434a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 264045, "upload_time": "2020-03-10T14:48:06", "upload_time_iso_8601": "2020-03-10T14:48:06.474512Z", "url": "https://files.pythonhosted.org/packages/27/d3/0ac6f31a401dde965a3b3fce9015b043bd27c87b9203554967acf37ca4a9/azure-keyvault-keys-4.1.0.zip"}]}