{"info": {"author": "Robin Palkovits", "author_email": "robin.palkovits@5minds.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# GDrive Tools\n\n## Goal of this Project\n\nThe automated managing of google drive documents is quite laborious.\nThis is because of the Google Drive API v3, which does not allow to pass\na directory path of a document that should be created.\nInstead, documents are only ordered using the parents node id.\n\nSince its more common for us to _think_ in directory trees, its\neasier to specify a full path.\n\nThis Project offers methods to manage document by providing _real_ path\nspecifications rather then a child - parent relationship for each document.\n(For example: Its way more convenient to specify a path by writing something\nlike _path/to/my/document_ than searching for the parent Id of the document).\n\n## Usage\n\nThe usage of this library should be straight forward.\n\nFirstly, you have to create a `GDriveToolsClient` - Object which only needs your\ncredentials. This can be archived like so:\n\n```Python\nimport gdrive_tools.gdrive_tools as gt\nimport gdrive_tools.google_auth as ga\nfrom gdrive_tools.google_filetypes import GoogleFiletypes\n\nSCOPES = [\n  'https://www.googleapis.com/auth/drive',\n  'https://www.googleapis.com/auth/documents',\n  'https://www.googleapis.com/auth/spreadsheets',\n  'https://www.googleapis.com/auth/presentations'\n  ]\n\n# Create a google auth object which wraps the authentication on the google\n# drive api.\nauth = ga.GoogleAuth(SCOPES)\ncredentials = auth.createCredentials()\n\n# Create the api client and pass the read credentials.\ngoogleDriveToolsClient = gt.GoogleDriveTools(credentials)\n```\n\n## Capabilities\n\nWith the GDrive tools library, you can do the following things:\n\n### Create a new Document\n\nA new document can be created using the `createFile()` method. The created\ndocument will be placed inside a directory with the given path. Any nonexisting\ndirectories will be created.\n\n_Directories which are placed in the drives trash folder will be ignored._\n\nThe following\nparameters are needed:\n\n* `destination(str)`: Full path, where the document should be moved to.\n  All directories are delimited by a simple slash (`/`).\n  If the document should be created inside a shared drive, the name of the shared\n  drive should be provided first. (Its basically seen as the root directory.)\n  Example:\n  ```\n  MySharedDrive/subdirectory/anotherSubdirectory\n  ```\n\n  If you want to create a new document on your local drive, the first\n  entry is also the first sub folder. For example:\n  ```\n  subdirectory/anotherSubdirectory\n  ```\n\n* `documentName(str)`: Name of the Document that should be created.\n* `fileType(int)`: Type of the document. Currently, the following types are\n  supported:\n    * `GoogleFiletypes.DOCUMENT`: Google Docs file\n    * `GoogleFiletypes.SHEET`: Google Sheets file\n    * `GoogleFiletypes.SLIDE`: Google Slides file\n* There are also different keyword arguments which can be used, to modify the\n  created documents. The following ones are currently supported:\n    * `sheetTableName(str): Specify a custom name which should be used for the first Sheet,\n      when creating a new sheet.\n\nThe return value is the id of the created document.\n\n### Move a Document\n\nA document can be moved from one directory to another, either inside your\nlocal, shared drive or between shared drives, using the `moveDocument()` method.\n\nThe following parameters are needed.\n\n* `sourcePath(str)`: Full path, of the document, which should be moved.\n  All directories are delimited by a simple slash (`/`).\n  If the document should be moved inside or to a shared drive, the name of the shared\n  drive should be provided first.\n  Example:\n  ```\n  MySharedDrive/subdirectory/anotherSubdirectory/targetFilename\n  ```\n\n  If you want to create a new document on your local drive, the first\n  entry is seen as the first subdirectory. Example:\n  ```\n  subdirectory/anotherSubdirectory/targetFilename\n  ```\n* `destinationPath(str)`: The target path where the document should be\n  moved to. The described syntax of the `sourcePath` parameter also applies here.\n\nThe method returns the id of the moved document.\n\n### Copy a Document\n\nIts also possible to copy a document into another directory and/or to another\nteam drive. This can\nbe done by using the `copyDocument()` - Method.\n\nThe following Parameters are required:\n\n* `sourcePath(str)`: The full source path of the document that should be copied.\n  The syntax is equivalent to the syntax of the `moveDocument()` Method.\n* `destinationPath(str)`: The path which defines where the copy of the source\n  document should be created.\n\nThe method returns the id of the copied document.\n\n### Fill a Sheet\n\nIf you want to fill a google documents sheet, you can use the `fillSheet()` Method.\n**Keep in mind that any existing data inside the sheet will be overwritten.**\n\nThe method takes the following parameters:\n\n* `sheetId(str)`: The Id of the sheet which should be filled.\n* `data(List[dict])` The data which should be inserted into the sheet as a list\n  of dictionaries.\n  The Columns are therefore defined by the keys of the dictionaries, whereas\n  all dictionaries must have the same keys.\n* `[sheetTableName(str)='']` The name of the table inside the given sheet, where the data should\n  be inserted.\n  If the table does not exists, a `ValueError` will be thrown.\n\n### Read Data from a Sheet\n\nWith the `readSheet()` method you can read the data from a sheet. The method\nwill return a list of dictionaries which contains the sheet's rows and columns.\n\nThe target sheet has to contain only a single table without extra cells. Its assumed\nthat the first row defines the names of the columns.\nHowever, its possible to specify a custom range in the A1 notation. This range\ndefines, which data should be read.\n\nThe method takes the following parameters:\n * `sheetId(str)`: The id of the target sheet.\n * `sheetName(str)`: The name of the table/sheet which should be used.\n * `[a1Range(str)]`: A custom range which points to the data which should be read.\n    Since the sheet name is already passed with the sheetName property, you can't\n    also specify it here.\n* `[placeholder(dict)]`: A dictionary which contains placeholder values for each\n  column, which is not defined.\n  _A column is also considered as \"not defined\" if the value is an empty string._\n\n### Grant Permissions\n\nYou can grant Permissions to a given document by using the `grandApproval()` Method.\n\nThe method takes the following parameters:\n* `sheetId(str)`: The Id of the document, that should be shared with a user.\n* `email(str)`: The EMail address of the user, which should gain access to the document.\n* `accessLevel(GoogleAccessLevel)`: The type of permission which should be grant to the\n  user.\n* `[grantType(GoogleGrantTypes)]`: You can set a custom grant type by using this property.\n  _Please note that if you are using the grant type `DOMAIN`, the `email` parameter has to contain the name of the target domain._\n* `[emailText(str)='']`: An optional text which should be embedded inside the\n  email notification which is automatically send by google, if a user gained access to a document.\n\n### Read all Files from a Directory\n\nIf you want to retrieve a list of all files in a given directory, you can use\nthe `readDirectory()` method. As the name suggests, this method returns a\nlist of all files which are included in this directory.\n\n\nThe return value of this method is a directory, which has the following keys:\n  * `directory_id`: ID of the directory\n  * `files`: List of files, found inside this directory.\n\nWhereas each file - directory has the following properties:\n  * `name`: Name of the file\n  * `id`: ID of the file\n  * `type`: filetype\n\n\nThe method only needs one parameter:\n* `path(str)`: The path of the directory which should be read. The syntax is the\n  same as in the `moveDocument()` or `copyDocument()` methods.\n\nThis method returns the dictionary, which is described above.\n\nA _ValueError_ is thrown, if the given directory does\nnot exists.\n\n### Return the Id of a Document\n\nIf you just want to know the Id of a document which is saved in a given path,\nyou can query it by using the `getDocumentId()` method.\n\nThis method only takes one parameter:\n\nArgs:\n  * `path(str)`: The path to the document, whose Id should be\n    returned.\n\nReturns:\n  The Id of the document, which is stored on the provided path, or an empty\n  string, if the document does not exists.\n\n## Example\n\nYou can test the library using the given `example.py` script.\n\n### Enable the Google Drive and Docs Api and Download the Client Configuration\n\nIn order for the script to work, its required to have a valid `credentials.json` file.\nThe example script only needs an activated GoogleDrive and GoogleSheets api.\n\n1. Navigate to https://developers.google.com/drive/api/v3/quickstart/python\n2. Click on the _Enable the Drive Api_ Button\n3. Navigate to https://developers.google.com/docs/api/quickstart/python\n4. Click on the _Enable the Docs Api_ Button\n5. Click on _Download Client Configuration_ Button\n6. Move the downloaded `credentials.json` file to this directory.\n\n### Install the Dependencies\n\nThere are two ways how to install the dependencies.\n\n#### Using Pip\n\nIf you use pip natively, you can simply install the dependencies from\nthe `requirements.txt` file using `pip install -r requirements.txt`.\n\n#### Using Pipenv\n\nThis project's dependencies can also be managed with Pipenv. To use Pipenv, make\nsure its installed on your system (if not it can be done so by executing `pip install pipenv`).\nThen you can install the dependencies using `pipenv install`.\n\nTo run the example script in the virtual environnement which was created by pipenv, you can\nrun `pipenv run python example.py`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/5minds/GDrive-Tools", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "gdrive-tools", "package_url": "https://pypi.org/project/gdrive-tools/", "platform": "", "project_url": "https://pypi.org/project/gdrive-tools/", "project_urls": {"Homepage": "https://github.com/5minds/GDrive-Tools"}, "release_url": "https://pypi.org/project/gdrive-tools/1.2.0/", "requires_dist": ["google-api-python-client", "google-auth-httplib2", "google-auth-oauthlib"], "requires_python": ">=3.6", "summary": "A collection of usefull tools to interact with the google drive/google docs api.", "version": "1.2.0"}, "last_serial": 6644963, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "56fc5058037fa8adaecf0c5833e73a0f", "sha256": "4c6f625fd4be858d32575b1c1276053706be696afa611a0a5df1b05b17d6d66d"}, "downloads": -1, "filename": "gdrive_tools-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "56fc5058037fa8adaecf0c5833e73a0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8224, "upload_time": "2019-11-29T12:58:45", "upload_time_iso_8601": "2019-11-29T12:58:45.627723Z", "url": "https://files.pythonhosted.org/packages/f0/39/5408d62bedfd434c97d98e8b9f33072658c48113e5ae9d39062b6ac272a1/gdrive_tools-1.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8ccfcc68d1fbe1eab913c6fd795d9b48", "sha256": "46407c74101c5692ae852a9164b3a946fc4f65f0e13a0c4062e7a626926f3b05"}, "downloads": -1, "filename": "gdrive-tools-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8ccfcc68d1fbe1eab913c6fd795d9b48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6743, "upload_time": "2019-11-29T12:58:46", "upload_time_iso_8601": "2019-11-29T12:58:46.891463Z", "url": "https://files.pythonhosted.org/packages/d4/38/7c7c3f6af5ad681abab7372a0a09491f64c13da4d3af37798d844cddeefd/gdrive-tools-1.0.1.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "90765f040e7f43bbc789caa41a628d20", "sha256": "6f72dfb35013b2c4173e63f79a8bd03e1c700c6f37e27624adf50058adae4dc1"}, "downloads": -1, "filename": "gdrive_tools-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "90765f040e7f43bbc789caa41a628d20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11832, "upload_time": "2020-01-24T09:28:00", "upload_time_iso_8601": "2020-01-24T09:28:00.459615Z", "url": "https://files.pythonhosted.org/packages/80/9b/33ca0b651bef573ceda0fc203cbe4e5b8773b8895ba9168505f263b401cf/gdrive_tools-1.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "aba4e84cf7c032bf99f1e6aa6b359227", "sha256": "aa4c1e40cc3f1c2e993bf4880c485d3172ad6e64adf0767ade4bd678318041ab"}, "downloads": -1, "filename": "gdrive-tools-1.1.0.tar.gz", "has_sig": false, "md5_digest": "aba4e84cf7c032bf99f1e6aa6b359227", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12433, "upload_time": "2020-01-24T09:28:02", "upload_time_iso_8601": "2020-01-24T09:28:02.068090Z", "url": "https://files.pythonhosted.org/packages/0c/f2/f8461ea019753cf8ac38ab833b8ee5ddcf3a023c90cb08d5a6c43f5b8c38/gdrive-tools-1.1.0.tar.gz"}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bde94d25420d7c4699c3a9aa2776747e", "sha256": "3fee22a26c3e3db7c40acb76ab93f396139f7387645d7d43c62e01a3b4460e58"}, "downloads": -1, "filename": "gdrive_tools-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bde94d25420d7c4699c3a9aa2776747e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13607, "upload_time": "2020-02-17T09:35:07", "upload_time_iso_8601": "2020-02-17T09:35:07.772688Z", "url": "https://files.pythonhosted.org/packages/a0/f7/6846f701c06ff648b36c5600510170cf68a0399230c62440a53862b56c50/gdrive_tools-1.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0459aee5e707f41d55f99ea90898d5d0", "sha256": "99afdbc64bf25ccdd14d8ae79d1db9ee476fde9685d08396fa4a3620c1f80776"}, "downloads": -1, "filename": "gdrive-tools-1.2.0.tar.gz", "has_sig": false, "md5_digest": "0459aee5e707f41d55f99ea90898d5d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14810, "upload_time": "2020-02-17T09:35:09", "upload_time_iso_8601": "2020-02-17T09:35:09.486778Z", "url": "https://files.pythonhosted.org/packages/88/9f/32ebaaf34427fa86def88978d80daf925294d7e54093e08cf81d175e0a89/gdrive-tools-1.2.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "bde94d25420d7c4699c3a9aa2776747e", "sha256": "3fee22a26c3e3db7c40acb76ab93f396139f7387645d7d43c62e01a3b4460e58"}, "downloads": -1, "filename": "gdrive_tools-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bde94d25420d7c4699c3a9aa2776747e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13607, "upload_time": "2020-02-17T09:35:07", "upload_time_iso_8601": "2020-02-17T09:35:07.772688Z", "url": "https://files.pythonhosted.org/packages/a0/f7/6846f701c06ff648b36c5600510170cf68a0399230c62440a53862b56c50/gdrive_tools-1.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0459aee5e707f41d55f99ea90898d5d0", "sha256": "99afdbc64bf25ccdd14d8ae79d1db9ee476fde9685d08396fa4a3620c1f80776"}, "downloads": -1, "filename": "gdrive-tools-1.2.0.tar.gz", "has_sig": false, "md5_digest": "0459aee5e707f41d55f99ea90898d5d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14810, "upload_time": "2020-02-17T09:35:09", "upload_time_iso_8601": "2020-02-17T09:35:09.486778Z", "url": "https://files.pythonhosted.org/packages/88/9f/32ebaaf34427fa86def88978d80daf925294d7e54093e08cf81d175e0a89/gdrive-tools-1.2.0.tar.gz"}]}