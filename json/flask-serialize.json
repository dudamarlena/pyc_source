{"info": {"author": "Andrew Rowe", "author_email": "rowe.andrew.d@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Flask", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "flask-serialize\n===============\n\n|PyPI Version|\n\nDB Model JSON serialization with PUT, POST write for Flask applications using SQLAlchemy\n========================================================================================\n\nInstallation\n------------\n\n.. code:: bash\n\n    pip install flask-serialize\n\nSimple and quick to get going in two steps.\n-------------------------------------------------\n\n.1. Import and add the FlaskSerializeMixin mixin to a model:\n\n.. code:: python\n\n    from flask_serialize import FlaskSerializeMixin\n\n    class Item(db.Model, FlaskSerializeMixin):\n        id = db.Column(db.Integer, primary_key=True)\n        # other fields ...\n\n.2. Configure the route with the do all mixin method:\n\n.. code:: python\n\n    @app.route('/item/<int:item_id>')\n    @app.route('/items')\n    def items(item_id=None):\n        return Item.get_delete_put_post(item_id)\n\n.3. Done!  Returns JSON as a single item or a list with only a single route.\n\nFlask-serialize is intended for joining a Flask SQLAlchemy Python backend with\na JavaScript Web client.  It allows read JSON serialization\nfrom the db and easy to use write back of models using PUT and POST.\n\n4 times faster than marshmallow for simple dict serialization.\n\nIt is not suitable for two way serialization.  Use\n`marshmallow` or similar for more complicated systems.\n\nExample:\n========\n\nModel setup:\n------------\n\n.. code:: python\n\n    # example database model\n    from flask_serialize import FlaskSerializeMixin\n\n    # required to set class var db for writing to a database\n    from app import db\n\n    FlaskSerializeMixin.db = db\n\n    class Setting(FlaskSerializeMixin, db.Model):\n        id = db.Column(db.Integer, primary_key=True)\n\n        setting_type = db.Column(db.String(120), index=True, default='misc')\n        key = db.Column(db.String(120), index=True)\n        value = db.Column(db.String(30000), default='')\n        active = db.Column(db.String(1), default='y')\n        created = db.Column(db.DateTime, default=datetime.utcnow)\n        updated = db.Column(db.DateTime, default=datetime.utcnow)\n\n        # serializer fields\n        create_fields = update_fields = ['setting_type', 'value', 'key', 'active']\n\n        # checks if Flask-Serialize can delete\n        def can_delete(self):\n            if self.value == '1234':\n                raise Exception('Deletion not allowed.  Magic value!')\n\n        # checks if Flask-Serialize can create/update\n        def verify(self, create=False):\n            if len(self.key or '') < 1:\n                raise Exception('Missing key')\n\n            if len(self.setting_type or '') < 1:\n                raise Exception('Missing setting type')\n\n        def __repr__(self):\n            return '<Setting %r %r %r>' % (self.id, self.setting_type, self.value)\n\nRoutes setup:\n---------------\n\nGet a single item as json.\n\n.. code:: python\n\n    @app.route('/get_setting/<item_id>', methods=['GET'])\n    def get_setting( item_id ):\n        return Setting.get_delete_put_post(item_id)\n\n    Returns a Flask response with a json object, example:\n\n.. code:: JavaScript\n\n    {id:1, value: \"hello\"}\n\nPut an update to a single item as json.\n\n.. code:: python\n\n    @app.route('/update_setting/<item_id>', methods=['PUT'])\n    def update_setting( item_id ):\n        return Setting.get_delete_put_post(item_id)\n\n    Returns a Flask response with the result as a json object:\n\n.. code:: JavaScript\n\n    {message: \"success message\"}\n\n\nDelete a single item.\n\n.. code:: python\n\n    @app.route('/delete_setting/<item_id>', methods=['DELETE'])\n    def delete_setting( item_id ):\n        return Setting.get_delete_put_post(item_id)\n\n    Returns a Flask response with the result and item deleted as a json response:\n\n.. code:: JavaScript\n\n    {message: \"success message\", item: {\"id\":5, name: \"gone\"}}\n\nGet all items as a json list.\n\n.. code:: python\n\n    @app.route('/get_setting_all', methods=['GET'])\n    def get_setting_all():\n        return Setting.get_delete_put_post()\n\n    Returns a Flask response with a list of json objects, example:\n\n.. code:: JavaScript\n\n    [{id:1, value: \"hello\"},{id:2, value: \"there\"},{id:3, value: \"programmer\"}]\n\nAll of: get-all, get, put, post, and delete can be combined in one route.\n\n.. code:: python\n\n    @app.route('/setting/<int:item_id>', methods=['GET', 'PUT', 'DELETE', 'POST'])\n    @app.route('/setting', methods=['GET', 'POST'])\n    def route_setting_all(item_id=None):\n        return Setting.get_delete_put_post(item_id)\n\nUpdating from a json object in the flask put request\n\nJQuery example:\n\n.. code:: javascript\n\n    function put(setting_id) {\n            return $.ajax({\n                url: `/update_setting/${setting_id}`,\n                method: 'PUT',\n                contentType: \"application/json\",\n                data: {setting_type:\"x\",value:\"100\"},\n            }).then(response => {\n                alert(\"OK:\"+response.message);\n            }).fail((xhr, textStatus, errorThrown) => {\n                alert(`Error: ${xhr.responseText}`);\n            });\n        }\n    }\n\nFlask route:  \n\n.. code:: python\n\n    @app.route('/update_setting/<int:item_id>', methods=['PUT'])\n    def update_setting(item_id):\n        return Setting.get_delete_put_post(item_id)\n\nCreate or update from a WTF form:\n\n.. code:: python\n\n        @app.route('/setting_edit/<int:item_id>', methods=['POST'])\n        @app.route('/setting_add', methods=['POST'])    \n        def setting_edit(item_id=None):\n            if item_id:\n                item = Setting.query.get_or_404(item_id)\n            else:\n                item = {}\n            form = EditForm(obj=item)\n\n            if form.validate_on_submit():\n                if item_id:\n                    try:\n                        item.request_update_form()\n                        flash('Your changes have been saved.')\n                    except Exception as e:\n                        flash(str(e), category='danger')\n                    return redirect(url_for('setting_edit', item_id=item_id))\n                else:\n                    try:\n                        new_item = Setting.request_create_form()\n                        flash('Setting created.')\n                        return redirect(url_for('setting_edit', item_id=new_item.id))\n                    except Exception as e:\n                        flash('Error creating item: ' + str(e))\n\n            return render_template(\n                    'setting_edit.html',\n                    item=item,\n                    title='Edit or Create item',\n                    form=form\n                )\n\n\nCreate a child database object:\n\nAs example: add a `Stat` object to a Survey object using the `request_create_form` convenience method.  The foreign key\nto the parent `Survey` is provided as a `kwargs` parameter to the method.\n\n.. code:: python\n\n        @app.route('/stat/<int:survey_id>', methods=['POST'])\n        def stat_add(survey_id=None):\n            survey = Survey.query.get_or_404(survey_id)\n            return Stat.request_create_form(survey_id=survey.id).as_dict\n\nWriting and creating\n====================\n\nVerify write and create\n-----------------------\n\n.. code:: python\n\n    def verify(self, create=False):\n        \"\"\"\n        raise exception if item is not valid for put/patch/post\n        :param: create - True if verification is for a new item\n        \"\"\"\n\nOverride the mixin verify method to provide control and verification\nwhen updating and creating model items.  Simply raise an exception\nwhen there is a problem.  You can also modify `self` data before writing. See model example.\n\nDelete\n------\n\n.. code:: python\n\n    def can_delete(self):\n        \"\"\"\n        raise exception if item cannot be deleted\n        \"\"\"\n\nOverride the mixin can_delete to provide control over when an\nitem can be deleted.  Simply raise an exception\nwhen there is a problem.  See model example.\n\nUpdating fields list\n--------------------\n\nList of model fields to be read from a form or JSON when updating an object.  Normally\nadmin fields such as login_counts or security fields are excluded.  Do not put foreign keys or primary\nkeys here.\n\n.. code:: python\n\n    update_fields = []\n\nUpdate Properties\n-----------------\n\nWhen returning a success code from a put or post update a dict\ncomposed of the property values from the update_properties list is returned\nas \"properties\".\n\n.. code:: python\n\n    update_properties = []\n\nExample return JSON:\n\n.. code:: python\n\n    class ExampleModel(db.Model, FlaskSerializeMixin):\n        head_size = db.Column(db.Integer())\n        ear_width = db.Column(db.Integer())\n        update_fields = ['head_size', 'ear_width']\n        update_properties = ['hat_size']\n\n        @property\n        def hat_size(self):\n            return self.head_size * self.ear_width\n\n.. code:: JavaScript\n\n    // result update return message\n    {message: \"Updated\", properties: {hat_size: 45.67} }\n\nThis can be used to communicate from the model on the server to the JavaScript code\ninteresting things from updates\n\nCreation fields used when creating specification\n------------------------------------------------\n\nList of model fields to be read from a form or json when creating an object.  Do not put foreign keys or primary\nkeys here.  This is usually the same as update_fields.\n\n.. code:: python\n\n    create_fields = []\n\nUpdate DateTime fields specification\n-------------------------------------\n\nThe class methods: `request_update_form`, `request_create_form`, `request_update_json` will automatically stamp your\nmodel's timestamp fields using the `update_timestamp` class method.\n\n`timestamp_fields` is a list of fields on the model to be set when updating or creating\nwith the value of `datetime.datetime.utcnow()`.  The default field names to update are: `['timestamp', 'updated']`.\n\nExample:\n\n.. code:: python\n\n\n    class ExampleModel(db.Model, FlaskSerializeMixin):\n        # ....\n        modified = db.Column(db.DateTime, default=datetime.utcnow)\n        timestamp_fields = ['modified']\n\nOverride the timestamp default of `utcnow()` by replacing the `timestamp_stamper` class property with your\nown.  Example:\n\n.. code:: python\n\n    class ExampleModel(db.Model, FlaskSerializeMixin):\n        # ....\n        timestamp_stamper = datetime.datetime.now\n\nFiltering and sorting\n=====================\n\nExclude fields\n--------------\n\nList of model field names to not serialize at all.\n\n.. code:: python\n\n    exclude_serialize_fields = []\n\nList of model field names to not serialize when return as json.\n\n.. code:: python\n\n    exclude_json_serialize_fields = []\n\nFiltering json list results\n---------------------------\n\nJson result lists can be filtered by using the `prop_filters` on either\nthe `get_delete_put_post` method or the `json_list` method.\n\nThe filter consists of one or more properties in the json result and\nthe value that it must match.  Filter items will match against the\nfirst prop_filter property to exactly equal the value.\n\nExample:\n\n.. code:: python\n\n    result = get_delete_put_post(prop_filters = {'key':'dogs'})\n\nSorting json list results\n-------------------------\n\nJson result lists can be sorted by using the `order_by_field` or the `order_by_field_desc` properties.  To sort by id\nascending use this example:\n\n.. code:: python\n\n    order_by_field = 'id'\n\nRelationships list of property names that are to be included in serialization\n-----------------------------------------------------------------------------\n\n.. code:: python\n\n    relationship_fields = []\n\nIn default operation relationships in models are not serialized.  Add any\nrelationship property name here to be included in serialization.\n\nSerialization converters\n========================\nThere are three built in converters to convert data from the database\nto a good format for serialization:\n\n* DATETIME - Removes the fractional second part and makes it a string\n* PROPERTY - Enumerates and returns model added properties\n* RELATIONSHIP - Deals with children model items.\n\nSet one of these to None or a value to remove or replace it's behaviour.\n\nAdding and overriding converter behaviour\n-----------------------------------------\n\nAdd values to the class property:\n\n.. code:: python\n\n    column_type_converters = {}\n\nWhere the key is the column type name of the database column \nand the value is a method to provide the conversion.\n\nExample:\n\nTo convert VARCHAR(100) to a string:\n\n.. code:: python\n\n    column_type_converters['VARCHAR(100)'] = lambda v: str(v)\n\nTo change DATETIME conversion behaviour, either change the DATETIME column_type_converter or\noverride the ``to_date_short`` method of the mixin.  Example:\n\n.. code:: python\n\n    import time\n\n    class Model(db.model, FlaskSerializeMixin):\n        # ...\n        # ...\n        def to_date_short(self, date_value):\n            \"\"\"\n            convert a datetime.datetime type to\n            a unix like milliseconds since epoch\n            :param date_value: datetime.datetime {object}\n            :return: number\n            \"\"\"\n            if not date_value:\n                return 0\n\n            return int(time.mktime(date_value.timetuple())) * 1000\n\n\nConversion types when writing to database during update and create\n------------------------------------------------------------------\n\nAdd or replace to db conversion methods by using a list of dicts that specify conversions for SQLAlchemy columns.\n\nDefault is:\n\n.. code:: python\n\n    convert_types = [{'type': bool, 'method': lambda v: 'y' if v else 'n'}]\n\n* type: a python object type  \n* method: a lambda or method to provide the conversion to a database acceptable value.\n\nFirst the correct conversion will be attempted to be determined from the type of the updated or\nnew field value.  Then, an introspection from the destination column type will be used to get the\ncorrect value converter type.\n\n@property values are converted using the `property_converter` class method.  Override or extend it\nfor unexpected types.\n\nNotes:\n\n* The order of convert types will have an effect. For example Python boolean type is derived from an int.  Make sure\n  boolean appears in the list before any int convert type.\n\n* To undertake a more specific column conversion use the `verify` method to explicitly set the class instance value.  The\n  `verify` method is always called before a create or update to the database.\n\n* When converting values from query strings or form values the type will always be `str`.\n\n* To add or modify values from a Flask request object before they are applied to the instance use the ``before_update`` hook.\n  ``verify`` is called after ``before_update``.\n\n\nMixin Helper methods and properties\n===================================\n\n``get_delete_put_post(item_id, user, prop_filters)``\n\nPut, get, delete, post and get-all magic method handler.\n\n* `item_id`: the primary key of the item - if none and method is 'GET' returns all items\n* `user`: user to user as query filter.\n* `prop_filters`: dictionary of key:value pairs to limit results when returning get-all.\n\n====== ==============================================================================================================================\nMethod Operation\n====== ==============================================================================================================================\nGET    returns one item when `item_id` is a primary key.\nGET    returns all items when `item_id` is None.\nPUT    updates item using `item_id` as the id from request json data.  Calls the model verify before updating.\nDELETE removes the item with primary key of `item_id` if self.can_delete does not throw an error. Returns the item removed.\nPOST   creates and returns a Flask response with a new item as json from form body data or JSON body data when `item_id` is None. Calls the model verify method before creating.\nPOST   updates an item from form data using `item_id`. Returns json response of {'message':'something'}.  Calls the model verify method before updating.\n====== ==============================================================================================================================\n\nOn error returns a response of 'error message' with http status code of 400.\n\nSet the `user` parameter to restrict a certain user.  Assumes that a model\nrelationship of user exists.\n\nProp filters is a dictionary of `property name`:`value` pairs.  Ie: {'group': 'admin'} to restrict list to the\nadmin group.  Properties or database fields can be used as the property name.\n\n``as_dict``\n\n.. code:: python\n\n    @property\n    def as_dict(self):\n        \"\"\"\n        the sql object as a dict without the excluded fields\n        :return: dict\n        \"\"\"\n\n``as_json``\n\n.. code:: python\n\n    @property\n    def as_json(self):\n        \"\"\"\n        the sql object as a json object without the excluded dict and json fields\n\n        :return: json object\n        \"\"\"\n\n``before_update``\n\n.. code:: python\n\n    def before_update(cls, data_dict):\n        \"\"\"\n        param: data_dict: a dictionary of new data to apply to the item\n        return: the new data_dict to use when updating\n        \"\"\"\n\nHook to call before any of `update_from_dict`, `request_update_form`, `request_update_json` is called so that\nyou may alter or add update values before the item is written to self in preparation for update to db.  NOTE: copy data_dict to\na normal dict as it may be an Immutable type from the request object.\n\nExample, make sure active is 'n' if no value from a request.\n\n.. code:: python\n\n    def before_update(self, data_dict):\n        d = dict(data_dict)\n        d['active'] = d.get('active', 'n')\n        return d\n\n\n``dict_list()``\n\n.. code:: python\n\n    def dict_list(cls, query_result):\n        \"\"\"\n        return a list of dictionary objects from the sql query result\n        :param query_result: sql alchemy query result\n        :return: list of dict objects\n        \"\"\"\n\n``json_list(query_result)``\n\nReturn a flask response in json format from a sql alchemy query result.\n\n.. code:: python\n\n    @classmethod\n    def json_list(cls, query_result):\n        \"\"\"\n        return a list in json format from the query_result\n        :param query_result: sql alchemy query result\n        :return: flask response with json list of results\n        \"\"\"\n\nExample:\n\n.. code:: python\n\n    @bp.route('/address/list', methods=['GET'])\n    @login_required\n    def address_list():\n        items = Address.query.filter_by(user=current_user)\n        return Address.json_list(items)\n\n``json_filter_by(**kw_args)``\n\nReturn a flask list response in json format using a filter_by query.\n\n.. code:: python\n\n    @classmethod\n    def json_filter_by(cls, **kwargs):\n        \"\"\"\n        return a list in json format using the filter_by arguments\n        :param kwargs: SQLAlchemy query.filter_by arguments\n        :return: flask response with json list of results\n        \"\"\"\n\nExample:\n\n.. code:: python\n\n    @bp.route('/address/list', methods=['GET'])\n    @login_required\n    def address_list():\n        return Address.filter_by(user=current_user)\n\n``json_first(**kwargs)``\n\nReturn the first result in json format using filter_by arguments.\n\nExample:\n\n.. code:: python\n\n    @bp.route('/score/<course>', methods=['GET'])\n    @login_required\n    def score(course):\n        return Score.json_first(class_name=course)\n\n``previous_field_value``\n\nA dictionary of the previous field values before an update is applied from a dict, form or json update operation. Helpful\nin the `verify` method to see if field values are to be changed.\n\nExample:\n\n.. code:: python\n\n    def verify(self, create=False):\n        previous_value = self.previous_field_value.get('value')\n        if previous_value != self.value:\n            current_app.logger.warning(f'value is changing from {previous_value}')\n\n``request_create_form(**kwargs)``\n\nUse the contents of a Flask request form or request json data to create a item\nin the database.   Calls verify(create=True).  Returns the new item or throws error.\nUse kwargs to set the object properties of the newly created item.\n\nExample:\n\nCreate a score item with the parent being a course.\n\n.. code:: python\n\n    @bp.route('/score/<course_id>', methods=['POST'])\n    @login_required\n    def score(course_id):\n        course = Course.query.get_or_404(course_id)\n        return Score.request_create_form(course_id=course.id).as_dict\n\n``request_update_form()``\n\nUse the contents of a Flask request form or request json data to update an item\nin the database.   Calls verify().  Returns True on success.\n\nExample:\n\nUpdate a score item.\n\n/score/6?value=23.4\n\n.. code:: python\n\n    @bp.route('/score/<int:score_id>', methods=['PUT'])\n    @login_required\n    def score(score_id):\n        score = Score.query.get_or_404(score_id)\n        if Score.request_update_form():\n            return 'ok'\n        else:\n            return 'update failed'\n\nFormPageMixin\n=============\n\nEasily add WTF form page handling by including the FormPageMixin.\n\nExample:\n\n.. code:: python\n\n    from flask_serialize.form_page import FormPageMixin\n\n    class Setting(FlaskSerializeMixin, FormPageMixin, db.Model):\n        # ....\n\n\nThis provides a method and class properties to quickly add a standard way of dealing with WTF forms on a Flask page.\n\n``form_page(cls, item_id=None)``\n\nDo all the work for creating and editing items using a template and a wtf form.\n\nPrerequisites.\n\nSetup the class properties to use your form items.\n\n============================= =============================================================================================================================\nProperty                      Usage\n============================= =============================================================================================================================\nform_page_form                **Required**. WTForm Class name\nform_page_route_create        **Required**. Name of the method to redirect after create, uses: url_for(cls.form_route_create, item_id=id)\nform_page_route_update        **Required**. Name of the method to redirect after updating, uses: url_for(cls.form_route_update, item_id=id)\nform_page_template            **Required**. Location of the template file to allow edit/add\nform_page_update_format       Format string to format flash message after update. `item` (the model instance) is passed as the only parameter.  Set to '' or None to suppress flash.\nform_page_create_format       Format string to format flash message after create. `item` (the model instance) is passed as the only parameter.  Set to '' or None to suppress flash.\nform_page_update_title_format Format string to format title template value when editing. `item` (the model instance) is passed as the only parameter.\nform_page_create_title_format Format string to format title template value when creating. `cls` (the model class) is passed as the only parameter.\n============================= =============================================================================================================================\n\nThe routes must use item_id as the parameter for editing. Use no parameter when creating.\n\nExample:\n\nTo allow the Setting class to use a template and WTForm to create and edit items.  In this example after create the index page is\nloaded, using the method `page_index`.  After update, the same page is reloaded with the new item values in the form.\n\nAdd these property overrides to the Setting Class.\n\n.. code:: python\n\n    # form_page\n    form_page_form = EditForm\n    form_page_route_update = 'route_setting_form'\n    form_page_route_create = 'page_index'\n    form_page_template = 'setting_edit.html'\n    form_page_new_title_format = 'New Setting'\n\nAdd this form.\n\n.. code:: python\n\n    class EditForm(FlaskForm):\n        value = StringField('value')\n\nSetup these routes.\n\n.. code:: python\n\n    @app.route('/setting_form_edit/<int:item_id>', methods=['POST', 'GET'])\n    @app.route('/setting_form_add', methods=['POST'])\n    def route_setting_form(item_id=None):\n        return Setting.form_page(item_id)\n\nTemplate.\n\nThe template file needs to use WTForms to render the given form. `form`, `item`, `item_id` and `title` are passed as template\nvariables.\n\nExample to update using POST, NOTE: only POST and GET are supported by form submit:\n\n.. code:: html\n\n    <h3>{{title}}</h3>\n    <form method=\"POST\" submit=\"{{url_for('route_setting_form', item_id=item.id)}}\">\n      <input name=\"value\" value=\"{{form.value.data}}\">\n      <input type=\"submit\">\n    </form>\n\nExample to create using POST:\n\n.. code:: html\n\n    <h3>{{title}}</h3>\n    <form method=\"POST\" submit=\"{{url_for('route_setting_form')}}\">\n      <input name=\"value\" value=\"{{form.value.data}}\">\n      <input type=\"submit\">\n    </form>\n\n\nRelease Notes\n-------------\n\n* 1.1.9 - Allow FlaskSerializeMixin to be converted when a property value.\n* 1.1.8 - Move form_page to separate MixIn.  Slight refactoring.  Add support for complex type to db.\n* 1.1.6 - Make sure all route returns use jsonify as required for older Flask versions.  Add before_update hook.\n* 1.1.5 - Add previous_field_value array that is set during update.  Allows comparing new and previous values during verify.\n* 1.1.4 - Fix doco typos and JavaScript examples.  Add form_page method.  Improve test and example apps.  Remove Python 2, 3.4 testing and support.\n* 1.1.3 - Fix duplicate db writes.  Return item on delete.  Remove obsolete code structures.  Do not update with non-existent fields.\n* 1.1.2 - Add 400 http status code for errors, remove error dict.  Improve documentation.\n* 1.1.0 - Suppress silly errors. Improve documentation.\n* 1.0.9 - Add kwargs to request_create_form to pass Object props to be used when creating the Object instance\n* 1.0.8 - Cache introspection to improve performance.  All model definitions are cached after first use.  It is no longer possible to alter model definitions dynamically.\n* 1.0.7 - Add json request body support to post update.\n* 1.0.5 - Allow sorting of json lists.\n\nLicensing\n---------\n\n- Apache 2.0\n\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/flask-serialize.svg\n   :target: https://pypi.python.org/pypi/flask-serialize\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "https://github.com/Martlark/flask-serialize/archive/1.1.9.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Martlark/flask-serialize", "keywords": "flask sqlalchemey serialize serialization serialise", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "flask-serialize", "package_url": "https://pypi.org/project/flask-serialize/", "platform": "", "project_url": "https://pypi.org/project/flask-serialize/", "project_urls": {"Download": "https://github.com/Martlark/flask-serialize/archive/1.1.9.tar.gz", "Homepage": "https://github.com/Martlark/flask-serialize"}, "release_url": "https://pypi.org/project/flask-serialize/1.1.9/", "requires_dist": ["EasyDict"], "requires_python": "", "summary": "Easy to use JSON serialization and update/create for Flask and SQLAlchemey.", "version": "1.1.9"}, "last_serial": 6695519, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1c21b048e7938fdcb8d09c8864be63ef", "sha256": "f6e5e9ca204763fe75467e3efcc3db59c724147f349f7f84a34101eec16333c4"}, "downloads": -1, "filename": "flask_serialize-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c21b048e7938fdcb8d09c8864be63ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8404, "upload_time": "2019-07-27T09:45:02", "upload_time_iso_8601": "2019-07-27T09:45:02.425702Z", "url": "https://files.pythonhosted.org/packages/f0/f2/269c789c7acb0fb66443432aeec0a26f98830b2352a7da1ae32e8b4eb98f/flask_serialize-0.0.1-py2.py3-none-any.whl"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a54f7ec4f2db554dab6d5333c20c3c62", "sha256": "c46cf7a845a7924eec80a82fbac2594054ef02bb3889d2389562170512544fa0"}, "downloads": -1, "filename": "flask_serialize-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a54f7ec4f2db554dab6d5333c20c3c62", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9026, "upload_time": "2019-07-27T09:51:42", "upload_time_iso_8601": "2019-07-27T09:51:42.110550Z", "url": "https://files.pythonhosted.org/packages/6d/41/05feae2fb48134b8d56eb885feaa2fb5952221c8011e432855c5c1dd0210/flask_serialize-0.0.2-py2.py3-none-any.whl"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d4316b9686962cc907597c9906b6256e", "sha256": "9f5c915c01c908f89adb2702ade869a8da9ba58405b496491dae9bafe981dc2d"}, "downloads": -1, "filename": "flask_serialize-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d4316b9686962cc907597c9906b6256e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9036, "upload_time": "2019-07-28T02:59:12", "upload_time_iso_8601": "2019-07-28T02:59:12.718375Z", "url": "https://files.pythonhosted.org/packages/cf/3d/098e5bfeb255a201d4aad6fccdafb873147595ef6ef02c393965afb95cab/flask_serialize-0.0.3-py2.py3-none-any.whl"}], "0.0.4": [{"comment_text": "", "digests": {"md5": "811b6426bb2a97041bf86611509004e3", "sha256": "7451df22a0eb52d704ddab1d71592c75da330c12e1b294b82c7f333273de5650"}, "downloads": -1, "filename": "flask_serialize-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "811b6426bb2a97041bf86611509004e3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9035, "upload_time": "2019-07-28T04:08:52", "upload_time_iso_8601": "2019-07-28T04:08:52.853470Z", "url": "https://files.pythonhosted.org/packages/90/a3/699c58ddadf1469e7c4f30338f6af8b6ab5baabd9a43674335054a6c93e2/flask_serialize-0.0.4-py2.py3-none-any.whl"}], "0.0.5": [{"comment_text": "", "digests": {"md5": "5d51c303890fc197b79689b6a2d1008a", "sha256": "06b3db0a645dcb388e756e8cee568c2abd7eaa718f04eb39ab79405fafb2a019"}, "downloads": -1, "filename": "flask_serialize-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5d51c303890fc197b79689b6a2d1008a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9034, "upload_time": "2019-07-28T04:40:49", "upload_time_iso_8601": "2019-07-28T04:40:49.144104Z", "url": "https://files.pythonhosted.org/packages/cb/9f/4c07bbb4e38329003e9fb9765d78f14912d5bf143ca00b9096d912ac7563/flask_serialize-0.0.5-py2.py3-none-any.whl"}], "0.0.6": [{"comment_text": "", "digests": {"md5": "ff1af40271d1adbd9b6da328c1501632", "sha256": "23ed5b7631187814beddc68e1a497c69d0a20c184dcd387fa6966d8955621ac5"}, "downloads": -1, "filename": "flask_serialize-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff1af40271d1adbd9b6da328c1501632", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11691, "upload_time": "2019-07-28T05:44:42", "upload_time_iso_8601": "2019-07-28T05:44:42.006815Z", "url": "https://files.pythonhosted.org/packages/a0/f6/ff935669a5223f862673b2a3372674c20d5835744721d3d6e7eb931654f9/flask_serialize-0.0.6-py2.py3-none-any.whl"}], "0.0.7": [{"comment_text": "", "digests": {"md5": "1aa6c25727dbb54da3ccdf220ed06a20", "sha256": "58ec5b7fcc5a98a5cf53ab2ec8d11ba8d8cbb845048c5cc89fbec45374e1e2f4"}, "downloads": -1, "filename": "flask_serialize-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1aa6c25727dbb54da3ccdf220ed06a20", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11810, "upload_time": "2019-07-28T23:37:50", "upload_time_iso_8601": "2019-07-28T23:37:50.885391Z", "url": "https://files.pythonhosted.org/packages/ca/23/5d6de5e92fd2fadbb14dd2e0487ce98161ad37b95bbd7ac9efb0fec33662/flask_serialize-0.0.7-py2.py3-none-any.whl"}], "0.0.8": [{"comment_text": "", "digests": {"md5": "1f2ad8af31aee2a46479621fc4099541", "sha256": "dbc7f319e764dcce8211ebc501c91cd9959ee216c4f9f19f0a2680159fd82702"}, "downloads": -1, "filename": "flask_serialize-0.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1f2ad8af31aee2a46479621fc4099541", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12625, "upload_time": "2019-07-29T12:29:43", "upload_time_iso_8601": "2019-07-29T12:29:43.367137Z", "url": "https://files.pythonhosted.org/packages/c3/9c/d10edddfc64f84cb48d5ec9d5a3f61ca19231541c9f9d5e027f614abbb62/flask_serialize-0.0.8-py2.py3-none-any.whl"}], "0.0.9": [{"comment_text": "", "digests": {"md5": "923e735ffd8a7043c159604f0acc361e", "sha256": "74cffd2a26a9a5fba7d75e287d50a49db4cca7a97499e8dd0ce6d088764c8e0c"}, "downloads": -1, "filename": "flask_serialize-0.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "923e735ffd8a7043c159604f0acc361e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12845, "upload_time": "2019-07-30T02:07:40", "upload_time_iso_8601": "2019-07-30T02:07:40.878333Z", "url": "https://files.pythonhosted.org/packages/c0/55/2837236e8515b5355ba52c73959abadb599b495190c68841dcec693df5ee/flask_serialize-0.0.9-py2.py3-none-any.whl"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0edfb07782bd951bdecd6816fd14dc8e", "sha256": "3537f97950cbbb13b61ec2d5b0f1f939f3203aa799d8c345162c5f03b416c7ac"}, "downloads": -1, "filename": "flask_serialize-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0edfb07782bd951bdecd6816fd14dc8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13157, "upload_time": "2019-08-07T02:51:27", "upload_time_iso_8601": "2019-08-07T02:51:27.837959Z", "url": "https://files.pythonhosted.org/packages/5e/1c/72fb37eda51ccd4fbea81d62a15be80d14ea90addf7ded540fb678b6f841/flask_serialize-1.0.1-py2.py3-none-any.whl"}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bf2e06e0061bb7eafaed96731e8119ef", "sha256": "b639c84494a6ce906f7805a7d514f48341833d69d32188427c5a40f9dccdf04b"}, "downloads": -1, "filename": "flask_serialize-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bf2e06e0061bb7eafaed96731e8119ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13616, "upload_time": "2019-08-07T10:40:27", "upload_time_iso_8601": "2019-08-07T10:40:27.685653Z", "url": "https://files.pythonhosted.org/packages/c3/88/73abeac986eb686f59ed158ecd33d752a4ef55db22d033a0af6f64b6c23c/flask_serialize-1.0.2-py2.py3-none-any.whl"}], "1.0.3": [{"comment_text": "", "digests": {"md5": "fec22c64335dd7dc41e524bcb5a78632", "sha256": "79fa4eeba30cb3d760c7d39837d185452932152a7d6d918f7ced251d68bce8a9"}, "downloads": -1, "filename": "flask_serialize-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fec22c64335dd7dc41e524bcb5a78632", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13746, "upload_time": "2019-08-10T00:15:17", "upload_time_iso_8601": "2019-08-10T00:15:17.762206Z", "url": "https://files.pythonhosted.org/packages/c0/a2/8dee65107061e1ef1dcc70e6d65836ef58f45ecd9e51bef646a4f7281325/flask_serialize-1.0.3-py2.py3-none-any.whl"}], "1.0.4": [{"comment_text": "", "digests": {"md5": "3c843b63033705a6bf48c238facc7c59", "sha256": "fd04b22679c564390f13d57596342e50bdc361c62e8a6c3f9e61f88eeee531b6"}, "downloads": -1, "filename": "flask_serialize-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c843b63033705a6bf48c238facc7c59", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14185, "upload_time": "2019-08-11T10:50:53", "upload_time_iso_8601": "2019-08-11T10:50:53.845418Z", "url": "https://files.pythonhosted.org/packages/55/dd/cdcc4ba9115dc3741b2cce2be8d221ff508275a8a4d0320e22d32885b546/flask_serialize-1.0.4-py2.py3-none-any.whl"}], "1.0.5": [{"comment_text": "", "digests": {"md5": "fa34aa43bd1fdc2776a7c8c2a9ffbfc8", "sha256": "f8629aa983a6314d9bd0d0dd8c06a099f66e1812416a466b0c6db9a908d705d9"}, "downloads": -1, "filename": "flask_serialize-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa34aa43bd1fdc2776a7c8c2a9ffbfc8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14401, "upload_time": "2019-08-25T09:04:52", "upload_time_iso_8601": "2019-08-25T09:04:52.977024Z", "url": "https://files.pythonhosted.org/packages/9f/1b/b481a782a6b0568090ce02441034c7e526ef2e5498eed64ab96f5f72be99/flask_serialize-1.0.5-py2.py3-none-any.whl"}], "1.0.6": [{"comment_text": "", "digests": {"md5": "edfe15ab3d6c4b9aa015e251f958e411", "sha256": "987b38737527c2cf08726bfd58a00db5c73cc07c45656b887796fcddf130a181"}, "downloads": -1, "filename": "flask_serialize-1.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "edfe15ab3d6c4b9aa015e251f958e411", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14406, "upload_time": "2019-09-11T10:59:00", "upload_time_iso_8601": "2019-09-11T10:59:00.378602Z", "url": "https://files.pythonhosted.org/packages/cb/b2/3d59c48b5948119c97a709ecbdc20d64255e0d406f01b7c736fc90eb7858/flask_serialize-1.0.6-py2.py3-none-any.whl"}], "1.0.7": [{"comment_text": "", "digests": {"md5": "e7379b0d8fbbc8b2fd379d01b3f45a12", "sha256": "03dfd39401f0a72546228ef60008ca2a5ec67d6163b26b64c87bcf7f942aea5e"}, "downloads": -1, "filename": "flask_serialize-1.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e7379b0d8fbbc8b2fd379d01b3f45a12", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14713, "upload_time": "2019-10-12T01:51:23", "upload_time_iso_8601": "2019-10-12T01:51:23.741176Z", "url": "https://files.pythonhosted.org/packages/32/c0/b9abbd15229cffbcc5c41b9be1afd526973a59f3a64881b7e957d2603ec2/flask_serialize-1.0.7-py2.py3-none-any.whl"}], "1.0.8": [{"comment_text": "", "digests": {"md5": "9af6b00105eeb51b250c370ea7cc9339", "sha256": "4da6adfa5a77e80cb2281b1200e681a405f5cde097cf58ad2806b88a31ad8620"}, "downloads": -1, "filename": "flask_serialize-1.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9af6b00105eeb51b250c370ea7cc9339", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15085, "upload_time": "2019-11-30T22:04:57", "upload_time_iso_8601": "2019-11-30T22:04:57.255357Z", "url": "https://files.pythonhosted.org/packages/ea/4c/35e0b4754b2c5ded3093b8d4701a520cdfc72125f6be33e0d6e3cf0cc0d8/flask_serialize-1.0.8-py2.py3-none-any.whl"}], "1.0.9": [{"comment_text": "", "digests": {"md5": "0fab697e648a028df50403f05c9da55a", "sha256": "4a0030902a9581badca2016fcf48de87b8476c345fb8b7448309e9242b18503c"}, "downloads": -1, "filename": "flask_serialize-1.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0fab697e648a028df50403f05c9da55a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15381, "upload_time": "2019-12-14T21:21:49", "upload_time_iso_8601": "2019-12-14T21:21:49.998783Z", "url": "https://files.pythonhosted.org/packages/05/37/03ddeb4cbc18509af221ddfab9946a6d241c8fe5d750835886cfd54a3f2a/flask_serialize-1.0.9-py2.py3-none-any.whl"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "7853e2d97329863f45c1e1a6e80ffa69", "sha256": "01eb17df6a7449aba6bc66f568d9cd447574a1b261cde18a46a7113af72f69d3"}, "downloads": -1, "filename": "flask_serialize-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7853e2d97329863f45c1e1a6e80ffa69", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15570, "upload_time": "2019-12-20T06:19:39", "upload_time_iso_8601": "2019-12-20T06:19:39.692609Z", "url": "https://files.pythonhosted.org/packages/4a/af/ad901218ff41a003271f6460fe84ab4361e823d92488b113b8cc809eac31/flask_serialize-1.1.0-py2.py3-none-any.whl"}], "1.1.2": [{"comment_text": "", "digests": {"md5": "4ea9670d53a6a15b5b72177882589e5f", "sha256": "eb7c1487f6a149631fc3cbd3696af4c1235b0ba2323fdf8d7d64ffe4845905ef"}, "downloads": -1, "filename": "flask_serialize-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4ea9670d53a6a15b5b72177882589e5f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15688, "upload_time": "2019-12-26T20:40:35", "upload_time_iso_8601": "2019-12-26T20:40:35.698877Z", "url": "https://files.pythonhosted.org/packages/b4/90/0f7622fe4499467e34272b3b5a27c62542256991231b2a8ebd9470a8bb2b/flask_serialize-1.1.2-py2.py3-none-any.whl"}], "1.1.3": [{"comment_text": "", "digests": {"md5": "a5ab3c2c645ff4dad77f7e669fbf0592", "sha256": "74673a616dd258219d88e4f4f7ad7db0c9e28b01104d065fb4c9aac8db677669"}, "downloads": -1, "filename": "flask_serialize-1.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a5ab3c2c645ff4dad77f7e669fbf0592", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15795, "upload_time": "2020-01-09T11:59:20", "upload_time_iso_8601": "2020-01-09T11:59:20.635893Z", "url": "https://files.pythonhosted.org/packages/57/71/86e725a4902b7c7a7dbfc67f7ccc4e53daaa0caacfd31e63b6f13bea95d3/flask_serialize-1.1.3-py2.py3-none-any.whl"}], "1.1.4": [{"comment_text": "", "digests": {"md5": "45aad6dfd27155f1c3623b83b264f92c", "sha256": "250a2f606618ad6c4dcd0c71fd2b4fbb18c6cf86599d65bb930d00c8caedc73e"}, "downloads": -1, "filename": "flask_serialize-1.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "45aad6dfd27155f1c3623b83b264f92c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17882, "upload_time": "2020-01-31T23:41:39", "upload_time_iso_8601": "2020-01-31T23:41:39.854703Z", "url": "https://files.pythonhosted.org/packages/ce/dc/adf1573b0667c98b0aab45de62fd15b6e75689cf7f78b42bb2ec9352afd0/flask_serialize-1.1.4-py2.py3-none-any.whl"}], "1.1.5": [{"comment_text": "", "digests": {"md5": "69776d4961bd60f55fa1757eaacd1b99", "sha256": "5ad5f7892c768dc22989b3fcdc8a0daa65c4041e7334d96d555809ad23ff3826"}, "downloads": -1, "filename": "flask_serialize-1.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "69776d4961bd60f55fa1757eaacd1b99", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18133, "upload_time": "2020-02-01T03:53:39", "upload_time_iso_8601": "2020-02-01T03:53:39.944271Z", "url": "https://files.pythonhosted.org/packages/f5/56/353920b2aaa5955bc2971ee4996d012262b63b0b3ab6e2d530fe6c27b241/flask_serialize-1.1.5-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a14d9e9916105266dbebd1c445cf249f", "sha256": "6be49ba90bf0dcf1e693ddfce7f4be5939305c647d07be91ddf8889102b1a2d4"}, "downloads": -1, "filename": "flask-serialize-1.1.5.tar.gz", "has_sig": false, "md5_digest": "a14d9e9916105266dbebd1c445cf249f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27653, "upload_time": "2020-02-01T03:53:41", "upload_time_iso_8601": "2020-02-01T03:53:41.918691Z", "url": "https://files.pythonhosted.org/packages/31/41/3f1b528d2a3386b184698723e873fc483b4002ee2d57c5d5cd1c5906b579/flask-serialize-1.1.5.tar.gz"}], "1.1.6": [{"comment_text": "", "digests": {"md5": "22b75109f226f11b37e575d1dade90f0", "sha256": "a0ce1bdafe91a6da847a51b0ab387346d458ecc628a2554837c68f1d7cb589cd"}, "downloads": -1, "filename": "flask_serialize-1.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "22b75109f226f11b37e575d1dade90f0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18510, "upload_time": "2020-02-11T10:45:15", "upload_time_iso_8601": "2020-02-11T10:45:15.238542Z", "url": "https://files.pythonhosted.org/packages/e0/c0/980864c10fd95181b9ca7455f5f87a7d4bcba8751a6327c6b54973f7aa5f/flask_serialize-1.1.6-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "72661c5e9b6da4648b89f96c218af484", "sha256": "b78016f36beb93c12c8365b4035f3f28e4b9aa28f29d61eefa2fe06c4b840383"}, "downloads": -1, "filename": "flask-serialize-1.1.6.tar.gz", "has_sig": false, "md5_digest": "72661c5e9b6da4648b89f96c218af484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29260, "upload_time": "2020-02-11T10:45:17", "upload_time_iso_8601": "2020-02-11T10:45:17.677364Z", "url": "https://files.pythonhosted.org/packages/69/f7/7b25bdb347c6900fe9c03e77f7d5b63d39715cafaa7236fb25bb8a4f5010/flask-serialize-1.1.6.tar.gz"}], "1.1.8": [{"comment_text": "", "digests": {"md5": "f3ad0959ed6dc1bae88a61ffb4063b58", "sha256": "a57520fe381cd9308a9094c9afca458d1b49305148a75ebdc0dbc7cceba46e5d"}, "downloads": -1, "filename": "flask_serialize-1.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3ad0959ed6dc1bae88a61ffb4063b58", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19346, "upload_time": "2020-02-15T05:48:40", "upload_time_iso_8601": "2020-02-15T05:48:40.233962Z", "url": "https://files.pythonhosted.org/packages/fa/2e/179b7ac58f7c51c93a04d767c17fe344bb7d15b731a6cef5f4e9f15307d5/flask_serialize-1.1.8-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "5156930ae73e5487081c63389044dd29", "sha256": "cc21165815d973068288a5e6cabaa2136d1e09484d66b591a9f2a4e87e4ef2b6"}, "downloads": -1, "filename": "flask-serialize-1.1.8.tar.gz", "has_sig": false, "md5_digest": "5156930ae73e5487081c63389044dd29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31324, "upload_time": "2020-02-15T05:48:42", "upload_time_iso_8601": "2020-02-15T05:48:42.605825Z", "url": "https://files.pythonhosted.org/packages/d3/ed/09fafa804322bcd78728ca9f9a233d87e644656c7d12e4938bffd1521347/flask-serialize-1.1.8.tar.gz"}], "1.1.9": [{"comment_text": "", "digests": {"md5": "63a77fdcf26763f7f6feb2c9f53fd880", "sha256": "d0edf9997ed1c20749620fdfe56143de12b0b2384ab155cbb06406c158652f7d"}, "downloads": -1, "filename": "flask_serialize-1.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63a77fdcf26763f7f6feb2c9f53fd880", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19374, "upload_time": "2020-02-25T09:45:21", "upload_time_iso_8601": "2020-02-25T09:45:21.118775Z", "url": "https://files.pythonhosted.org/packages/4d/3b/8c7330c20e6a685712d29c346419ea00d3e51ebca7b89521f18df39b428d/flask_serialize-1.1.9-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "990e40929ef1bafb31caf77b06b49118", "sha256": "ab3c43f17a0ff3692cd61e4c06319c07332f3404b3616c6909cecba3e2d145d2"}, "downloads": -1, "filename": "flask-serialize-1.1.9.tar.gz", "has_sig": false, "md5_digest": "990e40929ef1bafb31caf77b06b49118", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31894, "upload_time": "2020-02-25T09:45:24", "upload_time_iso_8601": "2020-02-25T09:45:24.423543Z", "url": "https://files.pythonhosted.org/packages/a0/9d/be5c6af228b674540d3257f69967b08f54d6d421f83f0fe8efd6cdefbf2b/flask-serialize-1.1.9.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "63a77fdcf26763f7f6feb2c9f53fd880", "sha256": "d0edf9997ed1c20749620fdfe56143de12b0b2384ab155cbb06406c158652f7d"}, "downloads": -1, "filename": "flask_serialize-1.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63a77fdcf26763f7f6feb2c9f53fd880", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19374, "upload_time": "2020-02-25T09:45:21", "upload_time_iso_8601": "2020-02-25T09:45:21.118775Z", "url": "https://files.pythonhosted.org/packages/4d/3b/8c7330c20e6a685712d29c346419ea00d3e51ebca7b89521f18df39b428d/flask_serialize-1.1.9-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "990e40929ef1bafb31caf77b06b49118", "sha256": "ab3c43f17a0ff3692cd61e4c06319c07332f3404b3616c6909cecba3e2d145d2"}, "downloads": -1, "filename": "flask-serialize-1.1.9.tar.gz", "has_sig": false, "md5_digest": "990e40929ef1bafb31caf77b06b49118", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31894, "upload_time": "2020-02-25T09:45:24", "upload_time_iso_8601": "2020-02-25T09:45:24.423543Z", "url": "https://files.pythonhosted.org/packages/a0/9d/be5c6af228b674540d3257f69967b08f54d6d421f83f0fe8efd6cdefbf2b/flask-serialize-1.1.9.tar.gz"}]}