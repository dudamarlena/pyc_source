{"info": {"author": "Covera Health", "author_email": "engineering@coverahealth.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries"], "description": "\n# Data Spec\n\n[![PyPI](https://img.shields.io/pypi/v/dataspec.svg?style=flat-square)](https://pypi.org/project/dataspec/) [![python](https://img.shields.io/pypi/pyversions/dataspec.svg?style=flat-square)](https://pypi.org/project/dataspec/) [![pyimpl](https://img.shields.io/pypi/implementation/dataspec.svg?style=flat-square)](https://pypi.org/project/dataspec/) [![CircleCI](\thttps://img.shields.io/circleci/project/github/coverahealth/dataspec/master.svg?style=flat-square)](https://circleci.com/gh/coverahealth/dataspec) [![license](https://img.shields.io/github/license/coverahealth/dataspec.svg?style=flat-square)](https://github.com/coverahealth/dataspec/blob/master/LICENSE)\n\n## What are Specs?\n\nSpecs are declarative data specifications written in pure Python code. Specs can be\ncreated using the Spec utility function `s`. Specs provide two useful and related\nfunctions. The first is to evaluate whether an arbitrary data structure satisfies\nthe specification. The second function is to conform (or normalize) valid data\nstructures into a canonical format.\n\nThe simplest Specs are based on common predicate functions, such as\n`lambda x: isinstance(x, str)` which asks \"Is the object x an instance of `str`?\".\nFortunately, Specs are not limited to being created from single predicates. Specs can\nalso be created from groups of predicates, composed in a variety of useful ways, and\neven defined for complex data structures. Because Specs are ultimately backed by\npure Python code, any question that you can answer about your data in code can be\nencoded in a Spec.\n\n## How to Use\n\nTo begin using the `spec` library, you can simply import the `s` object:\n\n```python\nfrom dataspec import s\n```\n\nNearly all of the useful functionality in `spec` is packed into `s`.\n\n### Spec API\n\n`s` is a generic Spec constructor, which can be called to generate new Specs from\na variety of sources:\n\n * Enumeration specs:\n     * Using a Python `set` or `frozenset`: `s({\"a\", \"b\", ...})`, or\n     * Using a Python `Enum` like `State`, `s(State)`.\n * Collection specs:\n     * Using a Python `list`: `s([State])`\n * Mapping type specs:\n     * Using a Python `dict`: `s({\"name\": s.is_str})`\n * Tuple type specs:\n     * Using a Python `tuple`: `s((s.is_str, s.is_num))`\n * Specs based on:\n     * Using a standard Python predicate: `s(lambda x: x > 0)`\n     * Using a Python function yielding `ErrorDetails`\n\nSpecs are designed to be composed, so each of the above spec types can serve as the\nbase for more complex data definitions. For collection, mapping, and tuple type Specs,\nSpecs will be recursively created for child elements if they are types understood\nby `s`.\n\nSpecs may also optionally be created with \"tags\", which are just string names provided\nin `ErrorDetails` objects emitted by Spec instance `validate` methods. Specs are\nrequired to have tags and all builtin Spec factories will supply a default tag if\none is not given.\n\nThe `s` API also includes several Spec factories for common Python types such as\n`bool`, `bytes`, `date`, `datetime` (via `s.inst`), `float` (via `s.num`), `int`\n(via `s.num`), `str`, `time`, and `uuid`.\n\n`s` also includes several pre-built Specs for basic types which are useful if you\nonly want to verify that a value is of a specific type. All the pre-built Specs\nare supplied as `s.is_{type}` on `s`.\n\nAll Specs provide the following API:\n\n * `Spec.is_valid(x)` returns a `bool` indicating if `x` is valid according to the\n   Spec definition\n * `Spec.validate(x)` yields consecutive `ErrorDetails` describing every spec\n   violation for `x`. By definition, if `next(Spec.validate(x))` returns an\n   empty generator, then `x` satisfies the Spec.\n * `Spec.validate_ex(x)` throws a `ValidationError` containing the full list of\n   `ErrorDetails` of errors occurred validating `x` if any errors are encountered.\n   Otherwise, returns `None`.\n * `Spec.conform(x)` attempts to conform `x` according to the Spec conformer iff\n   `x` is valid according to the Spec. Otherwise returns `INVALID`.\n * `Spec.conform_valid(x)` conforms `x` using the Spec conformer, without checking\n   first if `x` is valid. Useful if you wish to check your data for validity and\n   conform it in separate steps without incurring validation costs twice.\n * `Spec.with_conformer(c)` returns a new Spec instance with the Conformer `c`.\n   The old Spec instance is not modified.\n * `Spec.with_tag(t)` returns a new Spec instance with the Tag `t`. The old Spec\n   instance is not modified.\n\n### Scalar Specs\n\nThe simplest data specs are those which evaluate Python's builtin scalar types:\nstrings, integers, floats, and booleans.\n\nYou can create a spec which validates strings with `s.str()`. Common string\nvalidations can be specified as keyword arguments, such as the min/max length or a\nmatching regex. If you are only interested in validating that a value is a string\nwithout any further validations, spec features the predefined spec `s.is_str` (note\nno function call required).\n\nLikewise, numeric specs can be created using `s.num()`, with several builtin\nvalidations available as keyword arguments such as min/max value and narrowing down\nthe specific numeric types. If you are only interested in validating that a value is\nnumeric, you can use the builtin `s.is_num` or `s.is_int` or `s.is_float` specs.\n\n### Predicate Specs\n\nYou can define a spec using any simple predicate you may have by passing the predicate\ndirectly to the `s` function, since not every valid state of your data can be specified\nusing existing specs.\n\n```python\nspec = s(lambda id_: uuid.UUID(id_).version == 4)\nspec.is_valid(\"4716df50-0aa0-4b7d-98a4-1f2b2bcb1c6b\")  # True\nspec.is_valid(\"b4e9735a-ee8c-11e9-8708-4c327592fea9\")  # False\n```\n\n### Validator Specs\n\nSimple predicates make fine specs, but are unable to provide more details to the caller\nabout exactly why the input value failed to validate. Validator specs directly yield\n`ErrorDetails` objects which can indicate more precisely why the input data is failing\nto validate.\n\n```python\ndef _is_positive_int(v: Any) -> Iterable[ErrorDetails]:\n    if not isinstance(v, int):\n        yield ErrorDetails(\n            message=\"Value must be an integer\", pred=_is_positive_int, value=v\n        )\n    elif v < 1:\n        yield ErrorDetails(\n            message=\"Number must be greater than 0\", pred=_is_positive_int, value=v\n        )\n\nspec = s(_is_positive_int)\nspec.is_valid(5)      # True\nspec.is_valid(0.5)    # False\nspec.validate_ex(-1)  # ValidationError(errors=[ErrorDetails(message=\"Number must be greater than 0\", ...)])\n```\n\nSimple predicates can be converted into validator functions using the builtin\n`pred_to_validator` decorator:\n\n```python\n@pred_to_validator(\"Number must be greater than 0\")\ndef _is_positive_num(v: Union[int, float]) -> bool:\n    return v > 0\n\nspec = s(_is_positive_num)\nspec.is_valid(5)      # True\nspec.is_valid(0.5)    # True\nspec.validate_ex(-1)  # ValidationError(errors=[ErrorDetails(message=\"Number must be greater than 0\", ...)])\n```\n\n### UUID Specs\n\nIn the previous section, we used a simple predicate to check that a UUID was a certain\nversion of an RFC 4122 variant UUID. However, `spec` includes builtin UUID specs which\ncan simplify the logic here:\n\n```python\nspec = s.uuid(versions={4})\nspec.is_valid(\"4716df50-0aa0-4b7d-98a4-1f2b2bcb1c6b\")  # True\nspec.is_valid(\"b4e9735a-ee8c-11e9-8708-4c327592fea9\")  # False\n```\n\nAdditionally, if you are only interested in validating that a value is a UUID, the\nbuilting spec `s.is_uuid` is available.\n\n### Date Specs\n\n`spec` includes some builtin Specs for Python's `datetime`, `date`, and `time` classes.\nWith the builtin specs, you can validate that any of these three class types are before\nor after a given. Suppose you want to verify that someone is 18 by checking their date\nof birth:\n\n```python\nspec = s.date(after=date.today() - timedelta(years=18))\nspec.is_valid(date.today() - timedelta(years=21))  # True\nspec.is_valid(date.today() - timedelta(years=12))  # False\n```\n\nFor datetimes (instants) and times, you can also use `is_aware=True` to specify that\nthe instance be timezone-aware (e.g. not naive).\n\nYou can use the builtins `s.is_date`, `s.is_inst`, and `s.is_time` if you only want to\nvalidate that a value is an instance of any of those classes.\n\n### Set (Enum) Specs\n\nCommonly, you may be interested in validating that a value is one of a constrained set\nof known values. In Python code, you would use an `Enum` type to model these values.\nTo define an enumermation spec, you can use either pass an existing `Enum` value into\nyour spec:\n\n```python\nclass YesNo(Enum):\n    YES = \"Yes\"\n    NO = \"No\"\n\ns(YesNo).is_valid(\"Yes\")    # True\ns(YesNo).is_valid(\"Maybe\")  # False\n```\n\nAny valid representation of the `Enum` value would satisfy the spec, including the\nvalue, alias, and actual `Enum` value (like `YesNo.NO`).\n\nAdditionally, for simpler cases you can specify an enum using Python `set`s (or\n`frozenset`s):\n\n```python\ns({\"Yes\", \"No\"}).is_valid(\"Yes\")    # True\ns({\"Yes\", \"No\"}).is_valid(\"Maybe\")  # False\n```\n\n### Collection Specs\n\nSpecs can be defined for values in homogenous collections as well. Define a spec for\na homogenous collection as a list passed to `s` with the first element as the Spec\nfor collection elements:\n\n```python\ns([s.num(min_=0)]).is_valid([1, 2, 3, 4])  # True\ns([s.num(min_=0)]).is_valid([-11, 2, 3])   # False\n```\n\nYou may also want to assert certain conditions that apply to the collection as a whole.\nSpec allows you to specify an _optional_ dictionary as the second element of the list\nwith a few possible rules applying to the collection as a whole, such as length and\ncollection type.\n\n```python\ns([s.num(min_=0), {\"kind\": list}]).is_valid([1, 2, 3, 4])  # True\ns([s.num(min_=0), {\"kind\": list}]).is_valid({1, 2, 3, 4})  # False\n```\n\nCollection specs conform input collections by applying the element conformer(s) to each\nelement of the input collection. Callers can specify an `\"into\"` key in the collection\noptions dictionary as part of the spec to specify which type of collection is emitted\nby the collection spec default conformer. Collection specs which do not specify the\n`\"into\"` collection type will conform collections into the same type as the input\ncollection.\n\n### Tuple Specs\n\nSpecs can be defined for heterogenous collections of elements, which is often the use\ncase for Python's `tuple` type. To define a spec for a tuple, pass a tuple of specs for\neach element in the collection at the corresponding tuple index:\n\n```python\ns(\n    (\n        s.str(\"id\", format_=\"uuid\"),\n        s.str(\"first_name\"),\n        s.str(\"last_name\"),\n        s.str(\"date_of_birth\", format_=\"iso-date\"),\n        s(\"gender\", {\"M\", \"F\"}),\n    )\n)\n```\n\nTuple specs conform input tuples by applying each field's conformer(s) to the fields of\nthe input tuple to return a new tuple. If each field in the tuple spec has a unique tag\nand the tuple has a custom tag specified, the default conformer will yield a\n`namedtuple` with the tuple spec tag as the type name and the field spec tags as each\nfield name. The type name and field names will be munged to be valid Python\nidentifiers.\n\n### Mapping Specs\n\nSpecs can be defined for mapping/associative types and objects. To define a spec for a\nmapping type, pass a dictionary of specs to `s`. The keys should be the expected key\nvalue (most often a string) and the value should be the spec for values located in that\nkey. If a mapping spec contains a key, the spec considers that key _required_. To\nspecify an _optional_ key in the spec, wrap the key in `s.opt`. Optional keys will\nbe validated if they are present, but allow the map to exclude those keys without\nbeing considered invalid.\n\n```python\ns(\n    {\n        \"id\": s.str(\"id\", format_=\"uuid\"),\n        \"first_name\": s.str(\"first_name\"),\n        \"last_name\": s.str(\"last_name\"),\n        \"date_of_birth\": s.str(\"date_of_birth\", format_=\"iso-date\"),\n        \"gender\": s(\"gender\", {\"M\", \"F\"}),\n        s.opt(\"state\"): s(\"state\", {\"CA\", \"GA\", \"NY\"}),\n    }\n)\n```\n\nAbove the key `\"state\"` is optional in tested  values, but if it is provided it must\nbe one of `\"CA\"`, `\"GA\"`, or `\"NY\"`.\n\n*Note:* Mapping specs do not validate that input values _only_ contain the expected\nset of keys. Extra keys will be ignored. This is intentional behavior.\n\nMapping specs conform input dictionaries by applying each field's conformer(s) to\nthe fields of the input map to return a new dictionary. As a consequence, the value\nreturned by the mapping spec default conformer will not include any extra keys\nincluded in the input. Optional keys will be included in the conformed value if they\nappear in the input map.\n\n### Combination Specs\n\nIn most of the previous examples, we used basic builtin Specs. However, real world\ndata often more nuanced specifications for data. Fortunately, Specs were designed\nto be composed. In particular, Specs can be composed using standard boolean logic.\nTo specify an `or` spec, you can use `s.any(...)` with any `n` specs.\n\n```python\nspec = s.any(s.str(format_=\"uuid\"), s.str(maxlength=0))\nspec.is_valid(\"4716df50-0aa0-4b7d-98a4-1f2b2bcb1c6b\")  # True\nspec.is_valid(\"\")            # True\nspec.is_valid(\"3837273723\")  # False\n```\n\nSimilarly, to specify an `and` spec, you can use `s.all(...)` with any `n` specs:\n\n```python\nspec = s.all(s.str(format_=\"uuid\"), s(lambda id_: uuid.UUID(id_).version == 4))\nspec.is_valid(\"4716df50-0aa0-4b7d-98a4-1f2b2bcb1c6b\")  # True\nspec.is_valid(\"b4e9735a-ee8c-11e9-8708-4c327592fea9\")  # False\n```\n\n`and` Specs apply each child Spec's conformer to the value during validation,\nso you may assume the output of the previous Spec's conformer in subsequent\nSpecs.\n\n### Examples\n\nSuppose you'd like to define a Spec for validating that a string is at least 10\ncharacters long (ignore encoding nuances), you could define that as follows:\n\n```python\nspec = s.str(minlength=10)\nspec.is_valid(\"a string\")         # False\nspec.is_valid(\"London, England\")  # True\n```\n\nOr perhaps you'd like to check that every number in a list is above a certain value:\n\n```python\nspec = s([s.num(min_=70), {\"kind\": list}])\nspec.is_valid([70, 83, 92, 99])  # True\nspec.is_valid({70, 83, 92, 99})  # False, as the input collection is a set\nspec.is_valid([43, 66, 80, 93])  # False, not all numbers above 70\n```\n\nA more realistic case for a Spec is validating incoming data at the application\nboundaries. Suppose you're accepting a user profile submission as a JSON object over\nan HTTP endpoint, you could validate the data like so:\n\n```python\nspec = s(\n    \"user-profile\",\n    {\n        \"id\": s.str(\"id\", format_=\"uuid\"),\n        \"first_name\": s.str(\"first_name\"),\n        \"last_name\": s.str(\"last_name\"),\n        \"date_of_birth\": s.str(\"date_of_birth\", format_=\"iso-date\"),\n        \"gender\": s(\"gender\", {\"M\", \"F\"}),\n        s.opt(\"state\"): s.str(\"state\", minlength=2, maxlength=2),\n    }\n)\nspec.is_valid(  # True\n    {\n        \"id\": \"e1bc9fb2-a4d3-4683-bfef-3acc61b0edcc\",\n        \"first_name\": \"Carl\",\n        \"last_name\": \"Sagan\",\n        \"date_of_birth\": \"1996-12-20\",\n        \"gender\": \"M\",\n        \"state\": \"CA\",\n    }\n)\nspec.is_valid(  # True; note that extra keys _are ignored_\n    {\n        \"id\": \"958e2f55-5fdf-4b84-a522-a0765299ba4b\",\n        \"first_name\": \"Marie\",\n        \"last_name\": \"Curie\",\n        \"date_of_birth\": \"1867-11-07\",\n        \"gender\": \"F\",\n        \"occupation\": \"Chemist\",\n    }\n)\nspec.is_valid(  # False; missing \"gender\" key\n    {\n        \"id\": \"958e2f55-5fdf-4b84-a522-a0765299ba4b\",\n        \"first_name\": \"Marie\",\n        \"last_name\": \"Curie\",\n        \"date_of_birth\": \"1867-11-07\",\n    }\n)\n```\n\n## Concepts\n\n### Predicates\n\nPredicates are functions of one argument which return a boolean. Predicates answer\nquestions such as \"is `x` an instance of `str`?\" or \"is `n` greater than `0`?\".\nFrequently in Python, predicates are simply expressions used in an `if` statement.\nIn functional programming languages (and particularly in Lisps), it is more common\nto encode these predicates in functions which can be combined using lambdas or\npartials to be reused. Spec encourages that functional paradigm and benefits\ndirectly from it.\n\nPredicate functions should satisfy the `PredicateFn` type and can be wrapped in the\n`PredicateSpec` spec type.\n\n### Validators\n\nValidators are like predicates in that they answer the same fundamental questions about\ndata that predicates do. However, Validators are a Spec concept that allow us to\nretrieve richer error data from Spec failures than we can natively with a simple\npredicate. Validators are functions of one argument which return 0 or more `ErrorDetails`\ninstances (typically `yield`ed as a generator) describing the error.\n\nValidator functions should satisfy the `ValidatorFn` type and can be wrapped in the\n`ValidatorSpec` spec type.\n\n### Conformers\n\nConformers are functions of one argument, `x`, that return either a conformed value,\nwhich may be `x` itself, a new value based on `x`, or the special Spec value\n`INVALID` if the value cannot be conformed.\n\nAll specs may include conformers. Scalar spec types such as `PredicateSpec` and\n`ValidatorSpec` simply return their argument if it satisfies the spec. Specs for\nmore complex data structures supply a default conformer which produce new data\nstructures after applying any child conformation functions to the data structure\nelements.\n\n### Tags\n\nAll Specs can be created with optional tags, specified as a string in the first\npositional argument of any spec creation function. Tags are useful for providing\nuseful names for specs in debugging and validation messages.\n\n## Patterns\n\n### Factories\n\nOften when validating documents such as a CSV or a JSON blob, you'll find yourself\nwriting a series of similar specs again and again. In situations like these, it is\nrecommended to create a factory function for generating specs consistently. `dataspec`\nuses this pattern for many of the common spec types described above. This encourages\nreuse of commonly used specs and should help enforce consistency across your domain.\n\n### Reuse\n\nSpecs are designed to be immutable, so they may be reused in many different contexts.\nOften, the only the that changes between uses is the tag or conformer. Specs provide a\nconvenient API for generating copies of themselves (not modifying the original) which\nupdate only the relevant attribute. Additionally, Specs can be combined in many useful\nways to avoid having to redefine common validations repeatedly.\n\n## License\n\nMIT License\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/coverahealth/dataspec", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "dataspec", "package_url": "https://pypi.org/project/dataspec/", "platform": "", "project_url": "https://pypi.org/project/dataspec/", "project_urls": {"Homepage": "http://github.com/coverahealth/dataspec"}, "release_url": "https://pypi.org/project/dataspec/0.2.5/", "requires_dist": ["attrs", "python-dateutil ; extra == 'dates'", "phonenumbers ; extra == 'phonenumbers'"], "requires_python": ">=3.6.0", "summary": "Data specification and normalization toolkit", "version": "0.2.5"}, "last_serial": 6996091, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "aed289706ca5b7ce827cc7b2b62fea0f", "sha256": "897c2974ca2146690160ee51bff7f08c57630fec4820e9ead0c295889fe33705"}, "downloads": -1, "filename": "dataspec-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aed289706ca5b7ce827cc7b2b62fea0f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 16850, "upload_time": "2019-10-21T20:56:59", "upload_time_iso_8601": "2019-10-21T20:56:59.154221Z", "url": "https://files.pythonhosted.org/packages/52/88/96787535011b8375ecdf5f00e231bdaf01b4407ba17abdd5890f8901300f/dataspec-0.1.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "68cd874ec64c7a743bd404f88c839891", "sha256": "83c1535e4f720928b068fe9a5446a53a508f54ab8a54d517dfb9a2e97e0e9368"}, "downloads": -1, "filename": "dataspec-0.1.0.tar.gz", "has_sig": false, "md5_digest": "68cd874ec64c7a743bd404f88c839891", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 19615, "upload_time": "2019-10-21T20:57:02", "upload_time_iso_8601": "2019-10-21T20:57:02.326783Z", "url": "https://files.pythonhosted.org/packages/25/36/818634897a44ddcc4696391bb1441615bbe8c684bbcffb70d938a87b56b6/dataspec-0.1.0.tar.gz"}], "0.1.post0": [{"comment_text": "", "digests": {"md5": "ace3fa2826154d0d36d14a106e3de329", "sha256": "4e2994a471d9cd2f9f081a9c95e09928430adec36318b90857f0c3f611b1dbde"}, "downloads": -1, "filename": "dataspec-0.1.post0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ace3fa2826154d0d36d14a106e3de329", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 17086, "upload_time": "2019-10-21T21:04:17", "upload_time_iso_8601": "2019-10-21T21:04:17.966099Z", "url": "https://files.pythonhosted.org/packages/f0/95/bbcd9aecaa0f20762c1c8045f65d488c6aa39d9a3bf40cee92affbe9a226/dataspec-0.1.post0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "e7f4ecbec6578294cb6c374bc72b844a", "sha256": "88cd61d51d39b744082603af6407c5de434eebc51eff15f414894b27f2b4ea24"}, "downloads": -1, "filename": "dataspec-0.1.post0.tar.gz", "has_sig": false, "md5_digest": "e7f4ecbec6578294cb6c374bc72b844a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 19810, "upload_time": "2019-10-21T21:04:19", "upload_time_iso_8601": "2019-10-21T21:04:19.776681Z", "url": "https://files.pythonhosted.org/packages/27/bf/f1e759414953a11e59d9f1adaa1fe7a2ea7d5ec249277b32976cd8928657/dataspec-0.1.post0.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4aa9cb746f4aace7215291200803a64b", "sha256": "e5c7391a2aa5996ea39bbefb4c510011accadd5ac4a6c2e5f5fe434870c17aec"}, "downloads": -1, "filename": "dataspec-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4aa9cb746f4aace7215291200803a64b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 49547, "upload_time": "2019-10-28T17:12:50", "upload_time_iso_8601": "2019-10-28T17:12:50.242545Z", "url": "https://files.pythonhosted.org/packages/46/a7/f9bb85234008eeb827c66f2f4dbbd300cfecefdc7d040088aa82f7f14aee/dataspec-0.2.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "85bdc19d723b0f214aa84618833e8154", "sha256": "27002d482c25e077ba6c34e4025ecd679c20c06ddc450403212c593281b53ddb"}, "downloads": -1, "filename": "dataspec-0.2.0.tar.gz", "has_sig": false, "md5_digest": "85bdc19d723b0f214aa84618833e8154", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 49312, "upload_time": "2019-10-28T17:12:51", "upload_time_iso_8601": "2019-10-28T17:12:51.754777Z", "url": "https://files.pythonhosted.org/packages/bf/2a/81bc52ff269a0d48a4a68981ca2a9df38bb341ad50645762a7bc3b46d2bc/dataspec-0.2.0.tar.gz"}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c87902cdffadb91376042d55008d4928", "sha256": "9e49778b9e0e2f38c9890c4331f7a6d431223f5766e51cc090db05b0404c1e94"}, "downloads": -1, "filename": "dataspec-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c87902cdffadb91376042d55008d4928", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 114835, "upload_time": "2019-11-15T14:12:05", "upload_time_iso_8601": "2019-11-15T14:12:05.987248Z", "url": "https://files.pythonhosted.org/packages/b7/bd/38de386d938918e347060bacb5d4c9107117a72de2d3df71e52a4aadf0b7/dataspec-0.2.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "aeb70a3b8ce2c2071ee7399c75a02417", "sha256": "0730fc1bce4bdc3cb234ef9b6c6ae03d369728ebb34e5e0faddde1b5951fea14"}, "downloads": -1, "filename": "dataspec-0.2.1.tar.gz", "has_sig": false, "md5_digest": "aeb70a3b8ce2c2071ee7399c75a02417", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 95792, "upload_time": "2019-11-15T14:12:07", "upload_time_iso_8601": "2019-11-15T14:12:07.802120Z", "url": "https://files.pythonhosted.org/packages/74/94/8c212ae0d18152374a9d44456e8bc4f086bc91fa976b51786ed53dd4084d/dataspec-0.2.1.tar.gz"}], "0.2.2": [{"comment_text": "", "digests": {"md5": "fe70f0464dc18cdc1f7d80e0b1c4be9e", "sha256": "c616c131457e8fad2057f390e45d0432447bcfbccd5fdeea914e3884d31babf2"}, "downloads": -1, "filename": "dataspec-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fe70f0464dc18cdc1f7d80e0b1c4be9e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 115706, "upload_time": "2019-11-27T20:48:34", "upload_time_iso_8601": "2019-11-27T20:48:34.019981Z", "url": "https://files.pythonhosted.org/packages/89/df/626f15e5d6c6b89b0ddddac3c8a2d6dc2bd6c8464f769d76a179b9d4854b/dataspec-0.2.2-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a1666276772e495dab9813f069e244cb", "sha256": "8ccf4bdce979d9892b7e1a2243e16ee9eba7b5d7ed1dd40beb5c04791b628f97"}, "downloads": -1, "filename": "dataspec-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a1666276772e495dab9813f069e244cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 96923, "upload_time": "2019-11-27T20:48:35", "upload_time_iso_8601": "2019-11-27T20:48:35.542396Z", "url": "https://files.pythonhosted.org/packages/36/a7/c2a81e10b3ecac033b831848689678695e7f6361b1f207bf875cedbb3817/dataspec-0.2.2.tar.gz"}], "0.2.3": [{"comment_text": "", "digests": {"md5": "f2aa05252715d91abf79fccbdfa0c941", "sha256": "3b084b8d04ff7364531c442244f385a00e6cde89e698b8d301d2a54faf88677b"}, "downloads": -1, "filename": "dataspec-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f2aa05252715d91abf79fccbdfa0c941", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 115824, "upload_time": "2019-11-27T21:56:36", "upload_time_iso_8601": "2019-11-27T21:56:36.302849Z", "url": "https://files.pythonhosted.org/packages/65/94/e389bc83e1e57dd433556bc95028137581c69c2642f5053f53ff91ad1d80/dataspec-0.2.3-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f08086fca0796cc1230701d99d25d8b4", "sha256": "97660bbfac7823cf08896c7dac1dc6c6aacbf18329d5f0ab514cac7be0eb1d85"}, "downloads": -1, "filename": "dataspec-0.2.3.tar.gz", "has_sig": false, "md5_digest": "f08086fca0796cc1230701d99d25d8b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 97023, "upload_time": "2019-11-27T21:56:37", "upload_time_iso_8601": "2019-11-27T21:56:37.878904Z", "url": "https://files.pythonhosted.org/packages/9e/ee/efb573020a93ef1d8773cc9ec95ce7f63a16ee03abecd63f26fd1528054d/dataspec-0.2.3.tar.gz"}], "0.2.4": [{"comment_text": "", "digests": {"md5": "687026a2a0262b34c01065d3d8b50c9f", "sha256": "02d0b779116baf98d6e084d89e343c9ed87c3b45b2144071e4567980ef9812d7"}, "downloads": -1, "filename": "dataspec-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "687026a2a0262b34c01065d3d8b50c9f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 116126, "upload_time": "2019-12-19T20:55:35", "upload_time_iso_8601": "2019-12-19T20:55:35.072644Z", "url": "https://files.pythonhosted.org/packages/67/8b/8bd3f2aa4a0c7a277179ad1558df595b5ef25a56ccf41b82b17e8968ebf2/dataspec-0.2.4-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "76b96d7967946da05a4d15e963cfbf69", "sha256": "cd71a862007c45636efff09503dfd437ea087fc52d7f6f49668f8b64c2960d99"}, "downloads": -1, "filename": "dataspec-0.2.4.tar.gz", "has_sig": false, "md5_digest": "76b96d7967946da05a4d15e963cfbf69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 97301, "upload_time": "2019-12-19T20:55:36", "upload_time_iso_8601": "2019-12-19T20:55:36.993433Z", "url": "https://files.pythonhosted.org/packages/d3/e7/275069dd584fa7dd6db0e450558ad2812667670fe8844176fdac615888d6/dataspec-0.2.4.tar.gz"}], "0.2.5": [{"comment_text": "", "digests": {"md5": "a599f8671477d6d57c340ae3ef051be4", "sha256": "33e2d1efba0ed06dc8a338864346f54bea81dcd147b0847d17a3627f311abe73"}, "downloads": -1, "filename": "dataspec-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a599f8671477d6d57c340ae3ef051be4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 59940, "upload_time": "2020-04-10T19:54:21", "upload_time_iso_8601": "2020-04-10T19:54:21.147235Z", "url": "https://files.pythonhosted.org/packages/f3/32/07a961747dd1373b3c7aa3085bb5ac13d96a683169401f6cd14dddcf21e9/dataspec-0.2.5-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "710da877af26013fdf95937af5adfead", "sha256": "7109a39df67425a939bbe0586190439fb0a2d960052b2966d74d1f86f4122a5d"}, "downloads": -1, "filename": "dataspec-0.2.5.tar.gz", "has_sig": false, "md5_digest": "710da877af26013fdf95937af5adfead", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 59985, "upload_time": "2020-04-10T19:54:25", "upload_time_iso_8601": "2020-04-10T19:54:25.797910Z", "url": "https://files.pythonhosted.org/packages/a3/f7/0a524579a1a97155b3f21f2ab97607d8a9577bbcc61194ff52ba7577b5fa/dataspec-0.2.5.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a599f8671477d6d57c340ae3ef051be4", "sha256": "33e2d1efba0ed06dc8a338864346f54bea81dcd147b0847d17a3627f311abe73"}, "downloads": -1, "filename": "dataspec-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a599f8671477d6d57c340ae3ef051be4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 59940, "upload_time": "2020-04-10T19:54:21", "upload_time_iso_8601": "2020-04-10T19:54:21.147235Z", "url": "https://files.pythonhosted.org/packages/f3/32/07a961747dd1373b3c7aa3085bb5ac13d96a683169401f6cd14dddcf21e9/dataspec-0.2.5-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "710da877af26013fdf95937af5adfead", "sha256": "7109a39df67425a939bbe0586190439fb0a2d960052b2966d74d1f86f4122a5d"}, "downloads": -1, "filename": "dataspec-0.2.5.tar.gz", "has_sig": false, "md5_digest": "710da877af26013fdf95937af5adfead", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 59985, "upload_time": "2020-04-10T19:54:25", "upload_time_iso_8601": "2020-04-10T19:54:25.797910Z", "url": "https://files.pythonhosted.org/packages/a3/f7/0a524579a1a97155b3f21f2ab97607d8a9577bbcc61194ff52ba7577b5fa/dataspec-0.2.5.tar.gz"}]}