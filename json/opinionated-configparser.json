{"info": {"author": "Fabien MARTY", "author_email": "fabien.marty@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "## What is it?\n\nThis is an opinionated Python2/Python3 thin layer over the [Python configparser library](https://docs.python.org/3/library/configparser.html) to deal with:\n\n- configuration variants (PROD, DEV...) expressed as alternative keys in ini file\n- [jinja2](https://jinja.palletsprojects.com/) as (optional) interpolation method for configuration values\n\nFor Python2, we use [Python3 configparser backport](https://pypi.org/project/configparser/).\n\n\n## Concepts\n\n### Configuration variants\n\n#### Basic\n\nWith this example:\n\n```ini\n[group1]\ndebug=0\ndebug[DEV]=1\n```\n\nWe have two default configuration variant for the `debug` key: the `DEV` one and the default one.\n\nIf you don't do anything special, the `debug` value will be `0` (standard default value).\n\nBut if you initialize the library with `DEV` as *configuration name*, the `debug` value will be `1`.\n\nNow, if you use `PROD` as *configuration name*, as there is no `debug[PROD]` line/variant,\nthe debug value will fallback to standard value: `0` (in this example).\n\n#### Inheritance\n\nStill with the same example:\n\n```ini\n[group1]\ndebug=0\ndebug[DEV]=1\n```\n\nWhat about if we use `DEV_JOHN_MONDAY` as *configuration name* when initializing the library?\n\nAs there is no `debug[DEV_JOHN_MONDAY]` line,\none might think that the retained value would be the default one: `0`.\n\nIn fact, the retrained value will be `1`! Why? Because `_` (underscore) has a special meaning\nin configuration names. This is a kind of inheritance mark.\n\nSo `DEV_JOHN_MONDAY` means as a configuration name:\n\n- use `DEV_JOHN_MONDAY` if there is a variant with this exact name\n- (else) use `DEV_JOHN` (first level of inheritance) if there is a variant with this name: `DEV_JOHN`\n- (else) use `DEV` (second level of inheritance) if there is a variant with this name: `DEV`\n- (else) use standard/default value\n\nSo with this example:\n\n```ini\n[group1]\ndebug=0\ndebug[DEV]=1\ndebug[DEV_JOHN]=2\ndebug[DEV_PETER]=3\ndebug[DEV_JOHN_MONDAY]=4\ndebug[DEV_JOHN_TUESDAY]=5\ndebug[QA]=6\n```\n\nWe get this table:\n\nConfiguration name | selected value for `debug` key | comment\n--- | --- | ---\n`FOO` | `0` | standard value is used\n`DEV` | `1` | exact variant\n`DEV_JOHN_MONDAY` | `4` | exact variant\n`DEV_JOHN_FRIDAY` | `2` | `DEV_JOHN` level of inheritance is used\n`DEV_PETER` | `3` | exact variant\n`DEV_KATE` | `1` | `DEV` level of inheritance is used\n`DEV_SMITH_FOO_BAR_1` | `1` | `DEV` level of inheritance is used\n`DEV_JOHN_QA` | `2` | `DEV_JOHN` level of inheritance is used\n`FOO_QA` | `0` | the `QA` level can be used only if the configuration name begins with `QA`\n`QA5` | `0` | the `QA5` variant does not exist and there is no inheritance because there is no `underscore`\n`QA_5` | `6` | `QA` level of inheritance\n\n### jinja2 usage inside configuration values\n\nBy default, we use [jinja2](https://jinja.palletsprojects.com/) as interpolation method\nfor configuration values. The Jinja2 context is initialized with environment variables.\n\nSo with this example:\n```ini\n[group1]\nkey=This is a Jinja2 test value: {{HOME}}\n```\n\nYou will get the `{{HOME}}` placeholder replaced by the corresponding environment variable value.\n\nMissing variables will be replaced by the empty string (without errors).\n\nYou can define your own Jinja2 context by adding `interpolation=opinionated_configparser.Jinja2Interpolation(jinja2_context)` to the `OpinionatedConfigParser` constructor call.\n\n## Usage\n\n`opinionated_configparser` is just a thin layer over [Python configparser library](https://docs.python.org/3/library/configparser.html). So you use it exactly in the same way.\n\nJust an example:\n\n```python\nfrom opinionated_configparser import OpinionatedConfigParser\n\n\nTEST_DICT = {\n    \"section1\": {\n        \"key1\": \"value1\",\n        \"key1[foo]\": \"value2\",\n        \"key1[foo_bar]\": \"value3\",\n        \"key2\": \"value4\"\n    },\n    \"section2\": {\n        \"key3\": \"value5\"\n    }\n}\n\n\nparser = OpinionatedConfigParser(configuration_name=\"foo\")\nparser.read_dict(TEST_DICT)\n\n# will output: value2\nprint(parser.get(\"section1\", \"key1\"))\n\n# [...]\n# use the parser object exactly as configparser.ConfigParser one\n# [...]\n```\n\n## FAQ\n\n### What about if I don't want to use Jinja2 as interpolation method?\n\nJust pass `interpolation=None` keyword argument in `OpinionatedConfigParser`\nconstructor.\n\nOr use `interpolation=configparser.BasicInterpolation()` to get the default\ninterpolation method of `configparser` API.\n\n### What about if I want to use different jinja2 template options?\n\nJust pass `interpolation=opinionated_configparser.Jinja2Interpolation(jinja2_context, **jinja2_template_kwargs)` keyword argument in `OpinionatedConfigParser` constructor.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/metwork-framework/opinionated_configparser", "keywords": "configparser extension", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "opinionated-configparser", "package_url": "https://pypi.org/project/opinionated-configparser/", "platform": "", "project_url": "https://pypi.org/project/opinionated-configparser/", "project_urls": {"Homepage": "https://github.com/metwork-framework/opinionated_configparser"}, "release_url": "https://pypi.org/project/opinionated-configparser/0.0.3/", "requires_dist": ["jinja2"], "requires_python": ">=2.7", "summary": "opinionated python configparser library override to deal with configuration variants (PROD, DEV...) and jija2 interpolation", "version": "0.0.3"}, "last_serial": 6549563, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "6b6d969b8a538d56db60a5bea1383f64", "sha256": "d5199b5af60e0ce1944a18ce4ff934b0bc6e307400a839361f58d2ca9c5bafeb"}, "downloads": -1, "filename": "opinionated_configparser-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6b6d969b8a538d56db60a5bea1383f64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 5365, "upload_time": "2020-01-27T14:33:00", "upload_time_iso_8601": "2020-01-27T14:33:00.282772Z", "url": "https://files.pythonhosted.org/packages/04/da/bb4d210d62e97dc7671257cc2d537fd3cf93c4f0c81d65c35b52e09055d5/opinionated_configparser-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "5186f9a93f49d95f3de254ff3f087e3d", "sha256": "8ef44ad19fe192048f974f969ec27ce2f9127ebb18d402f444d6df0764d4d987"}, "downloads": -1, "filename": "opinionated_configparser-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5186f9a93f49d95f3de254ff3f087e3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5275, "upload_time": "2020-01-27T14:33:02", "upload_time_iso_8601": "2020-01-27T14:33:02.884450Z", "url": "https://files.pythonhosted.org/packages/fb/18/488c61dfe9d74d455d6111359465b4a55b10a1635c29f3262d3774f58040/opinionated_configparser-0.0.2.tar.gz"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2d9a6190d1bedb3a376130fcc97af2c9", "sha256": "3772b928f74f8b6d74cdb5d7aca413aca98e49a9c1be003e038ed575a639924e"}, "downloads": -1, "filename": "opinionated_configparser-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2d9a6190d1bedb3a376130fcc97af2c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 5364, "upload_time": "2020-01-31T14:12:57", "upload_time_iso_8601": "2020-01-31T14:12:57.592570Z", "url": "https://files.pythonhosted.org/packages/b1/a5/3aa4f88daa2416375a1592916ccb056449f5886bf9a1c8ddba7f9285c1ba/opinionated_configparser-0.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "219dd36fb127db408de98ca0391573f3", "sha256": "464725ca25504a2ecab7e0f59558ed575c47bf48697182780f19d3dfa96763e6"}, "downloads": -1, "filename": "opinionated_configparser-0.0.3.tar.gz", "has_sig": false, "md5_digest": "219dd36fb127db408de98ca0391573f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5667, "upload_time": "2020-01-31T14:12:59", "upload_time_iso_8601": "2020-01-31T14:12:59.033267Z", "url": "https://files.pythonhosted.org/packages/9e/49/7ccfada20a29817887fa89439dcdeadb40ff141adbcaf21553b83ef4eba9/opinionated_configparser-0.0.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d9a6190d1bedb3a376130fcc97af2c9", "sha256": "3772b928f74f8b6d74cdb5d7aca413aca98e49a9c1be003e038ed575a639924e"}, "downloads": -1, "filename": "opinionated_configparser-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2d9a6190d1bedb3a376130fcc97af2c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 5364, "upload_time": "2020-01-31T14:12:57", "upload_time_iso_8601": "2020-01-31T14:12:57.592570Z", "url": "https://files.pythonhosted.org/packages/b1/a5/3aa4f88daa2416375a1592916ccb056449f5886bf9a1c8ddba7f9285c1ba/opinionated_configparser-0.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "219dd36fb127db408de98ca0391573f3", "sha256": "464725ca25504a2ecab7e0f59558ed575c47bf48697182780f19d3dfa96763e6"}, "downloads": -1, "filename": "opinionated_configparser-0.0.3.tar.gz", "has_sig": false, "md5_digest": "219dd36fb127db408de98ca0391573f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5667, "upload_time": "2020-01-31T14:12:59", "upload_time_iso_8601": "2020-01-31T14:12:59.033267Z", "url": "https://files.pythonhosted.org/packages/9e/49/7ccfada20a29817887fa89439dcdeadb40ff141adbcaf21553b83ef4eba9/opinionated_configparser-0.0.3.tar.gz"}]}