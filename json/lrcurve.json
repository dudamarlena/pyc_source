{"info": {"author": "Andreas Madsen", "author_email": "amwebdk@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# lrcurve\n\n**Creates a learning-curve plot for Jupyter/Colab notebooks that is\nupdated in real-time.**\n\nThere is a framework agnostic interface `lrcurve.PlotLearningCurve`\nthat works well with PyTorch and Tensorflow and a keras wrapper\n`lrcurve.KerasLearningCurve` that uses the keras callback interface.\n\n`lrcurve` works with python 3.6 or newer and is distributed under the\nMIT license.\n\n![Gif of learning-curve](gifs/readme_header.gif)\n\n## Install\n\n```bash\npip install -U lrcurve\n```\n\n## API\n\n* [`lrcurve.PlotLearningCurve`](lrcurve/plot_learning_curve.py)\n* [`lrcurve.KerasLearningCurve`](lrcurve/keras_learning_curve.py)\n\n## Examples\n\n* [Keras example](#keras-example)\n* [Framework agnostic example](#framework-agnostic-example)\n* [PyTorch example](#pytorch-example)\n\n### Keras example\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/AndreasMadsen/python-lrcurve/blob/master/notebooks/keras_example.ipynb)\n\n```python\nfrom lrcurve import KerasLearningCurve\n\nmodel.compile(optimizer=keras.optimizers.Adam(),\n              loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=[keras.metrics.SparseCategoricalAccuracy()])\n\nmodel.fit(train.x, train.y,\n          epochs=100,\n          verbose=0,\n          validation_data=(validation.x, validation.y),\n          callbacks=[KerasLearningCurve()])\n```\n\n![Gif of learning-curve for keras example](gifs/keras_example.gif)\n\n### Framework agnostic example\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/AndreasMadsen/python-lrcurve/blob/master/notebooks/emulated_training.ipynb)\n\n```python\nwith PlotLearningCurve() as plot:\n    for i in range(100):\n        plot.append(i, {\n            'loss': {\n                'train': math.exp(-(i+1)/10),\n                'validation': math.exp(-i/10)\n            }\n        })\n        plot.draw()\n        time.sleep(0.1)\n```\n\n![Gif of learning-curve for simple example](gifs/simple_example.gif)\n\n### PyTorch example\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/AndreasMadsen/python-lrcurve/blob/master/notebooks/pytorch_example.ipynb)\n\n```python\nfrom lrcurve import PlotLearningCurve\n\nplot = PlotLearningCurve(\n    facet_config = {\n        'loss': { 'name': 'Cross-Entropy', 'limit': [0, None] },\n        'accuracy': { 'name': 'Accuracy', 'limit': [0, 1] }\n    },\n    xaxis_config = { 'name': 'Epoch', 'limit': [0, 500] }\n)\n\nwith plot:\n    # optimize model\n    for epoch in range(500):\n        # compute loss\n        z_test = network(x_test)\n        loss_test = criterion(z_test, y_test)\n\n        optimizer.zero_grad()\n        z_train = network(x_train)\n        loss_train = criterion(z_train, y_train)\n        loss_train.backward()\n        optimizer.step()\n\n        # compute accuacy\n        accuacy_test = sklearn.metrics.accuracy_score(torch.argmax(z_test, 1).numpy(), y_test)\n        accuacy_train = sklearn.metrics.accuracy_score(torch.argmax(z_train, 1).numpy(), y_train)\n\n        # append and update\n        plot.append(epoch, {\n            'loss': {\n                'train': loss_train,\n                'validation': loss_test\n            },\n            'accuracy': {\n                'train': accuacy_train,\n                'validation': accuacy_test\n            }\n        })\n        plot.draw()\n```\n\n![Gif of learning-curve for pytorch example](gifs/pytorch_example.gif)\n\n## Sponsor\n\nSponsored by <a href=\"https://www.nearform.com/research/\">NearForm Research</a>.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AndreasMadsen/lrcurve", "keywords": "learning curve pytorch keras tensorflow jupyter colab interactive live real-time", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lrcurve", "package_url": "https://pypi.org/project/lrcurve/", "platform": "", "project_url": "https://pypi.org/project/lrcurve/", "project_urls": {"Homepage": "https://github.com/AndreasMadsen/lrcurve"}, "release_url": "https://pypi.org/project/lrcurve/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Real-time learning curve for Jupiter notebooks", "version": "1.1.0"}, "last_serial": 6829668, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c51d0550da3844483fd5796b92ad86e4", "sha256": "eb946dea6a4da851c4c53a356d2df42bfc46f1820d56d41756e4d43d213a5e6b"}, "downloads": -1, "filename": "lrcurve-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c51d0550da3844483fd5796b92ad86e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7126, "upload_time": "2019-11-28T18:51:21", "upload_time_iso_8601": "2019-11-28T18:51:21.228559Z", "url": "https://files.pythonhosted.org/packages/68/56/35c03b4c37bb7ce38c41d732657c26ab3c480013a53913769a66871aebac/lrcurve-1.0.0.tar.gz"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "744b1bd2cc7639bf55e98df5b31f9d25", "sha256": "8c5f21a62cdce74d69db937c4a2e2d17b9b71e052fb33aefc9eaaaf9688c38bb"}, "downloads": -1, "filename": "lrcurve-1.0.1.tar.gz", "has_sig": false, "md5_digest": "744b1bd2cc7639bf55e98df5b31f9d25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66931, "upload_time": "2019-11-28T19:11:49", "upload_time_iso_8601": "2019-11-28T19:11:49.909687Z", "url": "https://files.pythonhosted.org/packages/30/d3/0ec680e56fb0a9a4644475269d2b8ca34962610fb273c243de83f2c83a62/lrcurve-1.0.1.tar.gz"}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ed67efa5f5899609c09d4d295bfa59b6", "sha256": "523db10e5fd602921c2a13e5b5020e25206268c60f9f7871b8940068e8653a5d"}, "downloads": -1, "filename": "lrcurve-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ed67efa5f5899609c09d4d295bfa59b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66971, "upload_time": "2019-12-15T15:06:55", "upload_time_iso_8601": "2019-12-15T15:06:55.798255Z", "url": "https://files.pythonhosted.org/packages/08/89/696b6aba4c295ee1fa2a09faf08b2b00dcfd21a27fbf02c3cd31195d82af/lrcurve-1.0.2.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "e0b9aab241b92bdec648cc5e039e7736", "sha256": "9b23215cfb8b2b4c5727a976990130aa80d218ba71ac329a4065fbdfdf4b1971"}, "downloads": -1, "filename": "lrcurve-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e0b9aab241b92bdec648cc5e039e7736", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67153, "upload_time": "2020-03-17T16:16:21", "upload_time_iso_8601": "2020-03-17T16:16:21.967242Z", "url": "https://files.pythonhosted.org/packages/ac/80/f030c4124d3d15996d58031fdf7b909b6780d482e147ba07e674dece1003/lrcurve-1.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "e0b9aab241b92bdec648cc5e039e7736", "sha256": "9b23215cfb8b2b4c5727a976990130aa80d218ba71ac329a4065fbdfdf4b1971"}, "downloads": -1, "filename": "lrcurve-1.1.0.tar.gz", "has_sig": false, "md5_digest": "e0b9aab241b92bdec648cc5e039e7736", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67153, "upload_time": "2020-03-17T16:16:21", "upload_time_iso_8601": "2020-03-17T16:16:21.967242Z", "url": "https://files.pythonhosted.org/packages/ac/80/f030c4124d3d15996d58031fdf7b909b6780d482e147ba07e674dece1003/lrcurve-1.1.0.tar.gz"}]}