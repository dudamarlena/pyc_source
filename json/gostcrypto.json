{"info": {"author": "Evgeny Drobotun", "author_email": "drobotun@xakep.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.7"], "description": "GOST cryptographic functions\n============================\n\n.. image:: https://img.shields.io/github/license/drobotun/virustotalapi3?style=flat\n    :target: http://doge.mit-license.org\n.. image:: https://img.shields.io/travis/drobotun/gostcrypto\n    :target: https://travis-ci.org/drobotun/gostcrypto\n.. image:: https://ci.appveyor.com/api/projects/status/3inl1huy5unq1q60?svg=true\n    :target: https://ci.appveyor.com/project/drobotun/gostcrypto\n.. image:: https://img.shields.io/coveralls/github/drobotun/gostcrypto\n    :target: https://coveralls.io/github/drobotun/gostcrypto\n.. image:: https://api.codacy.com/project/badge/Grade/774f6fd50f224286ac1e566d752bd9c6\n    :target: https://app.codacy.com/manual/drobotun/gostcrypto/dashboard\n.. image:: https://readthedocs.org/projects/gostcrypto/badge/?version=latest\n    :target: https://gostcrypto.readthedocs.io/en/latest/?badge=latest\n.. image:: https://img.shields.io/pypi/pyversions/gostcrypto.svg?logo=python&logoColor=FBE072\n    :target: https://pypi.org/project/gostcrypto/\n.. image:: https://img.shields.io/pypi/v/gostcrypto\n    :target: https://pypi.org/project/gostcrypto/\n.. image:: https://img.shields.io/pypi/format/gostcrypto\n    :target: https://pypi.org/project/gostcrypto/\n\nThe package implements various cryptographic functions defined in the State standards of the Russian Federation. It includes the following modules:\n\n- **gosthash**: The module implements functions for calculating hash amounts in accordance with GOST R 34.11-2012.\n- **gostcipher**: The module implements block encryption functions in accordance with GOST R 34.12-2015 and their use modes in accordance with GOST R 34.13-2015.\n- **gostsignature**: The module implements the functions of forming and verifying an electronic digital signature in accordance with GOST R 34.10-2012.\n- **gostrandom**: The module implements functions for generating pseudo-random sequences in accordance with R 1323565.1.006-2017.\n- **gosthmac**: The module implements the functions of calculating the HMAC message authentication code in accordance with R 50.1.113-2016.\n- **gostpbkdf**: The module implements the password-based key derivation function in accordance with R 50.1.111-2016.\n\nInstallation\n\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: bash\n\n    $ pip install gostcrypto\n\nUsage gosthash module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nGetting a hash for a string\n---------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    hash_string = u'\u0421\u0435 \u0432\u0435\u0442\u0440\u0438, \u0421\u0442\u0440\u0438\u0431\u043e\u0436\u0438 \u0432\u043d\u0443\u0446\u0438, \u0432\u0435\u044e\u0442\u044a \u0441 \u043c\u043e\u0440\u044f \u0441\u0442\u0440\u0435\u043b\u0430\u043c\u0438 \u043d\u0430 \u0445\u0440\u0430\u0431\u0440\u044b\u044f \u043f\u043b\u044a\u043a\u044b \u0418\u0433\u043e\u0440\u0435\u0432\u044b'.encode('cp1251')\n    hash_obj = gostcrypto.gosthash.new('streebog256', data=hash_string))\n    hash_result = hash_obj.hexdigest()\n\nGetting a hash for a file\n-------------------------\n\nIn this case the 'buffer_size' value must be a multiple of the 'block_size' value.\n\n.. code-block:: python\n\n    import gostcrypto\n\n    file_path = 'hash_file.txt'\n    buffer_size = 128\n    hash_obj = gostcrypto.gosthash.new('streebog512')\n    with open(file_path, 'rb') as file:\n        buffer = file.read(buffer_size)\n        while len(buffer) > 0:\n            hash_obj.update(buffer)\n            buffer = file.read(buffer_size)\n    hash_result = hash_obj.hexdigest()\n\nUsage gostcipher module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nString encryption in ECB mode\n-----------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray([\n        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n    ])\n\n    plain_text = bytearray([\n        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88,\n        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a,\n        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00,\n        0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xee, 0xff, 0x0a, 0x00, 0x11,\n    ])\n\n    cipher_obj = gostcrypto.gostcipher.new('kuznechik',\n                                            key,\n                                            gostcrypto.gostcipher.MODE_ECB,\n                                            pad_mode=gostcrypto.gostcipher.PAD_MODE_1)\n\n    cipher_text = cipher_obj.encrypt(plain_text)\n\nFile encryption in CTR mode\n---------------------------\n\nIn this case the 'buffer_size' value must be a multiple of the 'block_size' value.\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray([\n        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n    ])\n\n    init_vect = bytearray([\n        0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xce, 0xf0,\n    ])\n\n    plain_file_path = 'plain_file.txt'\n    cipher_file_path = 'cipher_file.txt'\n    cipher_obj = gostcrypto.gostcipher.new('kuznechik',\n                                            key,\n                                            gostcrypto.gostcipher.MODE_CTR,\n                                            init_vect=init_vect)\n\n    buffer_size = 128\n\n    plain_file = open(plain_file_path, 'rb')\n    cipher_file = open(cipher_file_path, 'wb')\n    buffer = plain_file.read(buffer_size)\n    while len(buffer) > 0:\n        cipher_data = cipher_obj.encrypt(buffer)\n        cipher_file.write(cipher_data)\n        buffer = plain_file.read(buffer_size))\n\nCalculating MAC of the file\n---------------------------\n\nIn this case the 'buffer_size' value must be a multiple of the 'block_size' value.\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray([\n        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n    ])\n\n    plain_file_path = 'plain_file.txt'\n    cipher_obj = gostcrypto.gostcipher.new('kuznechik',\n                                            key,\n                                            gostcrypto.gostcipher.MODE_MAC)\n\n    buffer_size = 128\n\n    plain_file = open(plain_file_path, 'rb')\n    buffer = plain_file.read(buffer_size)\n    while len(buffer) > 0:\n        cipher_obj.update(buffer)\n        buffer = plain_file.read(buffer_size)\n    mac_result = cipher_obj.digest(8)\n\nUsage gostsignature module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nSigning\n-------\n\n.. code-block :: python\n\n    import gostcrypto\n\n    private_key = bytearray.fromhex('7a929ade789bb9be10ed359dd39a72c11b60961f49397eee1d19ce9891ec3b28')\n    digest = bytearray.fromhex('2dfbc1b372d89a1188c09c52e0eec61fce52032ab1022e8e67ece6672b043ee5')\n\n    sign_obj = gostcrypto.gostsignature.new(gostcrypto.gostsignature.MODE_256,\n                                            gostcrypto.gostsignature.CURVES_R_1323565_1_024_2019['id-tc26-gost-3410-2012-256-paramSetB'])\n    \n    signature = sign_obj.sign(private_key, digest)\n\nVerify\n------\n\n.. code-block:: python\n\n    public_key = bytearray.fromhex('fd21c21ab0dc84c154f3d218e9040bee64fff48bdff814b232295b09d0df72e45026dec9ac4f07061a2a01d7a2307e0659239a82a95862df86041d1458e45049')\n    digest = bytearray.fromhex('2dfbc1b372d89a1188c09c52e0eec61fce52032ab1022e8e67ece6672b043ee5')\n    signature = bytearray.fromhex('4b6dd64fa33820e90b14f8f4e49ee92eb2660f9eeb4e1b313517b6ba173979656df13cd4bceaf606ed32d410f48f2a5c2596c146e8c2fa4455d08cf68fc2b2a7')\n\n    sign_obj = gostcrypto.gostsignature.new(gostcrypto.gostsignature.MODE_256,\n                                            gostcrypto.gostsignature.CURVES_R_1323565_1_024_2019['id-tc26-gost-3410-2012-256-paramSetB'])\n\n    if sign_obj.verify(public_key, digest, signature):\n        print('Signature is correct')\n    else:\n        print('Signature is not correct')\n\nGenerating a public key\n-----------------------\n\n.. code-block:: python\n\n    private_key = bytearray.fromhex('7a929ade789bb9be10ed359dd39a72c11b60961f49397eee1d19ce9891ec3b28')\n\n    sign_obj = gostcrypto.gostsignature.new(gostcrypto.gostsignature.MODE_256,\n                                            gostcrypto.gostsignature.CURVES_R_1323565_1_024_2019['id-tc26-gost-3410-2012-256-paramSetB'])\n\n    public_key = sign_obj.public_key_generate(private_key)\n\nUsage gostrandom module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n    import gostcrypto\n\n    rand_k = bytearray([\n        0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,\n        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,\n        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,\n        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,\n    ])\n\n    random_obj = gostcrypto.gostrandom.new(32,\n                                       rand_k=rand_k,\n                                       size_s=gostcrypto.gostrandom.SIZE_S_256)\n    random_result = random_obj.random()\n    random_obj.clear()\n\nUsage gosthmac module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nGetting a HMAC for a string\n---------------------------\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray.fromhex('000102030405060708090a0b0c0d0e0f1011121315161718191a1b1c1d1e1f')\n    data = bytearray.fromhex('0126bdb87800af214341456563780100')\n\n    hmac_obj = gostcrypto.gosthmac.new('HMAC_GOSTR3411_2012_256', key, data=data)\n    hmac_result = hmac_obj.digest()\n\nGetting a HMAC for a file\n-------------------------\n\nIn this case the 'buffer_size' value must be a multiple of the 'block_size' value.\n\n.. code-block:: python\n\n    import gostcrypto\n\n    key = bytearray.fromhex('000102030405060708090a0b0c0d0e0f1011121315161718191a1b1c1d1e1f')\n    data = bytearray.fromhex('0126bdb87800af214341456563780100')\n\n    hmac_obj = gostcrypto.gosthmac.new('HMAC_GOSTR3411_2012_256', key, data=data)\n    hmac_result = hmac_obj.digest()\n\nUsage gostpbkdf module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n    import gostcrypto\n\n    password = b'password'\n    salt = b'salt'\n\n    pbkdf_obj = gostcrypto.gostpbkdf.new(password, salt=salt, counter=4096)\n    pbkdf_result = pbkdf_obj.derive(32)\n\nLicense\n\"\"\"\"\"\"\"\n\nMIT Copyright (c) 2020 Evgeny Drobotun\n\nDocumentation\n\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDocumentation for using this package: https://gostcrypto.readthedocs.io/\n\n\nRelease History\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. rubric:: 1.1.1 (20.04.2020)\n\n- Use ``**kvargs`` in the ``new`` function with default parameters (**gostrandom**, **gosthash**, **gosthmac**, **gostpbkdf**)\n- Add the ability to pass data to the ``new`` function from **gosthmac**\n- Fixed some minor bugs in the **gostrandom** module\n\n.. rubric:: 1.1.0 (15.04.2020)\n\n- Refactoring code **gostcipher** module (changed the class structure)\n- Each module has its own exception class added\n- In the ``new`` function of the **gostcipher** module for MAC mode, it is now possible to pass data for MAC calculation, followed by calling the ``digest`` method without first calling the ``update`` method\n- In the ``new`` function of the **gosthash** module, it is now possible to pass data for hash calculation, followed by calling the ``digest`` method without first calling the ``update`` method\n- Added new exceptions for various conflict situations\n- Fixed some minor bugs\n\n.. rubric:: 1.0.0 (08.04.2020)\n\n- First release of **'gostcrypto'**", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/drobotun/gostcrypto", "keywords": "cryptography", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gostcrypto", "package_url": "https://pypi.org/project/gostcrypto/", "platform": "", "project_url": "https://pypi.org/project/gostcrypto/", "project_urls": {"Homepage": "https://github.com/drobotun/gostcrypto"}, "release_url": "https://pypi.org/project/gostcrypto/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "GOST cryptographic functions", "version": "1.1.1"}, "last_serial": 7056470, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c7741e7e9aabc569bf77e39db895d1da", "sha256": "632b6fcd17c0378be24199a9af47f7a28036beda106adaf152528b5ef73927a5"}, "downloads": -1, "filename": "gostcrypto-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c7741e7e9aabc569bf77e39db895d1da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41311, "upload_time": "2020-04-08T23:47:00", "upload_time_iso_8601": "2020-04-08T23:47:00.687183Z", "url": "https://files.pythonhosted.org/packages/26/5d/b144251e458fbfc44617d7fad25ece7c4b2098946e70c56e3550458b6e47/gostcrypto-1.0.0.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6e5af7b5960f9ab4bdca447f9d219fc4", "sha256": "a0ec8e44c97a578540681721ff379b08855c21f2a642dbbb4f51be2a6fa8cb29"}, "downloads": -1, "filename": "gostcrypto-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6e5af7b5960f9ab4bdca447f9d219fc4", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 49511, "upload_time": "2020-04-14T23:27:46", "upload_time_iso_8601": "2020-04-14T23:27:46.323495Z", "url": "https://files.pythonhosted.org/packages/c3/29/4fe636877d00cd28ffa3cd675c078cef973cf2aaa5098cf21b02c0169275/gostcrypto-1.1.0-py3-none-any.whl"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "a953806e4813ff55a6e9f37b6e50dc2b", "sha256": "27d98b400d368758aa9488a340b6d5bc45c1ec22ba54f167bfd432e27d814643"}, "downloads": -1, "filename": "gostcrypto-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a953806e4813ff55a6e9f37b6e50dc2b", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 49668, "upload_time": "2020-04-19T23:36:39", "upload_time_iso_8601": "2020-04-19T23:36:39.461090Z", "url": "https://files.pythonhosted.org/packages/05/c7/af56a69ab800eb53fe5a6157967903a7c84e6456977c18329efbd8e706e1/gostcrypto-1.1.1-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a953806e4813ff55a6e9f37b6e50dc2b", "sha256": "27d98b400d368758aa9488a340b6d5bc45c1ec22ba54f167bfd432e27d814643"}, "downloads": -1, "filename": "gostcrypto-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a953806e4813ff55a6e9f37b6e50dc2b", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 49668, "upload_time": "2020-04-19T23:36:39", "upload_time_iso_8601": "2020-04-19T23:36:39.461090Z", "url": "https://files.pythonhosted.org/packages/05/c7/af56a69ab800eb53fe5a6157967903a7c84e6456977c18329efbd8e706e1/gostcrypto-1.1.1-py3-none-any.whl"}]}