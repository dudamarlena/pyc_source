{"info": {"author": "Thibault B\u00e9tr\u00e9mieux", "author_email": "thibault.betremieux@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![CircleCI](https://circleci.com/gh/ThibTrip/npdoc_to_md/tree/master.svg?style=svg&circle-token=e33f9d9e628fde342e9acd4c43c2c939780bf1f0)](https://circleci.com/gh/ThibTrip/npdoc_to_md/tree/master) [![codecov](https://codecov.io/gh/ThibTrip/npdoc_to_md/branch/master/graph/badge.svg)](https://codecov.io/gh/ThibTrip/npdoc_to_md) [![PyPI version](https://img.shields.io/pypi/v/npdoc_to_md)](https://img.shields.io/pypi/v/npdoc_to_md)\n\n# npdoc_to_md\n\nTurns numpy docstrings to pretty markdown.\n\n# Table of contents\n\n[Features](#Features)\n\n[Caveats](#Caveats)\n\n[Installation](#Installation)\n\n[Demos](#Demos)\n\n[Usage](#Usage)\n\n[Contributing](#Contributing)\n\n[Testing](#Testing)\n\n# Features\n\n* Very easy to use\n* Flexible rendering for example outputs (render a markdown table, python code, raw code etc.) on a per-example basis or a per-docstring basis\n* Provides file rendering with very simple placeholders\n\n# Caveats\n\n* GitHub does not support colors for markdown \ud83d\ude3f\n\n# Installation\n\n<code>pip install npdoc_to_md</code>.\n\n# Demos\n\n## First demo: Demonstration with the docstring of pandas.Series.\n\n### Before\n\n```\nTwo-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       for Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input.\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv\nread_table\nread_clipboard\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9\n```\n\n### After\n\n**<span style=\"color:purple\">pd.DataFrame</span>_(data=None, index: Union[Collection, NoneType] = None, columns: Union[Collection, NoneType] = None, dtype: Union[str, numpy.dtype, ForwardRef('ExtensionDtype'), NoneType] = None, copy: bool = False)_**\n\n\nTwo-dimensional, size-mutable, potentially heterogeneous tabular data.\n\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\n#### Parameters\n* data : <b><i>ndarray (structured or homogeneous), Iterable, dict, or DataFrame</i></b>  Dict can contain Series, arrays, constants, or list-like objects.\n\t\n\t.. versionchanged:: 0.23.0\n\t   If data is a dict, column order follows insertion-order for\n\t   Python 3.6 and later.\n\t\n\t.. versionchanged:: 0.25.0\n\t   If data is a list of dicts, column order follows insertion-order\n\t   for Python 3.6 and later.\n* index : <b><i>Index or array-like</i></b>  Index to use for resulting frame. Will default to RangeIndex if\n\tno indexing information part of input data and no index provided.\n* columns : <b><i>Index or array-like</i></b>  Column labels to use for resulting frame. Will default to\n\tRangeIndex (0, 1, 2, ..., n) if no column labels are provided.\n* dtype : <b><i>dtype, default None</i></b>  Data type to force. Only a single dtype is allowed. If None, infer.\n* copy : <b><i>bool, default False</i></b>  Copy data from inputs. Only affects DataFrame / 2d ndarray input.\n\n#### See Also\n* DataFrame.from_records : Constructor from tuples, also record arrays.\n* DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n* read_csv\n* read_table\n* read_clipboard\n\n#### Examples\nConstructing DataFrame from a dictionary.\n\n```python\nd = {'col1': [1, 2], 'col2': [3, 4]}\ndf = pd.DataFrame(data=d)\ndf\n```\n```\ncol1  col2\n0     1     3\n1     2     4\n```\n\nNotice that the inferred dtype is int64.\n\n```python\ndf.dtypes\n```\n```\ncol1    int64\ncol2    int64\ndtype: object\n```\n\nTo enforce a single dtype:\n\n```python\ndf = pd.DataFrame(data=d, dtype=np.int8)\ndf.dtypes\n```\n```\ncol1    int8\ncol2    int8\ndtype: object\n```\n\nConstructing DataFrame from numpy ndarray:\n\n```python\ndf2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n                   columns=['a', 'b', 'c'])\ndf2\n```\n```\na  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9\n```\n\n## Second demo: the library pangres (also from me) which uses markdown tables in examples!\n\nSee https://github.com/ThibTrip/pangres/wiki/Upsert#examples\n\n# Usage\n\nHead over to npdoc_to_md's [wiki](https://github.com/ThibTrip/npdoc_to_md/wiki)!\n\n# Contributing\n\nPull requests/issues are welcome.\n\n# Testing\n\nClone npdoc_to_md then set your curent working directory to the root of the cloned repository folder. Then use the commands below:\n\n```\n# 1. Create and activate the build environment\nconda env create -f environment.yml\nconda activate npdoc_to_md-dev\n# 2. Install npdoc_to_md in editable mode (changes are reflected upon reimporting)\npip install -e .\n# 3. Run pytest\n# -s prints stdout\n# -v prints test parameters\n# --cov=./npdoc_to_md shows coverage only for npdoc_to_md\npytest -s -vv npdoc_to_md --cov=./npdoc_to_md --doctest-modules\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ThibTrip/npdoc_to_md/archive/v0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ThibTrip/npdoc_to_md", "keywords": "numpydoc,documentation,docstrings,python", "license": "The Unlicense", "maintainer": "", "maintainer_email": "", "name": "npdoc-to-md", "package_url": "https://pypi.org/project/npdoc-to-md/", "platform": "", "project_url": "https://pypi.org/project/npdoc-to-md/", "project_urls": {"Download": "https://github.com/ThibTrip/npdoc_to_md/archive/v0.3.tar.gz", "Homepage": "https://github.com/ThibTrip/npdoc_to_md"}, "release_url": "https://pypi.org/project/npdoc-to-md/0.3/", "requires_dist": null, "requires_python": "", "summary": "Easy conversion of Python docstrings in numpy style to markdown! Includes a Markdown renderer.", "version": "0.3"}, "last_serial": 6984463, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9cb5580a92cd6726b54c360eecda0c8b", "sha256": "0b0c4cfa4bff7ddf13ec731461e2424b84e255a4bae698ef6e7eb972b6ceedb0"}, "downloads": -1, "filename": "npdoc_to_md-0.1.tar.gz", "has_sig": false, "md5_digest": "9cb5580a92cd6726b54c360eecda0c8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16966, "upload_time": "2020-04-07T12:59:08", "upload_time_iso_8601": "2020-04-07T12:59:08.245378Z", "url": "https://files.pythonhosted.org/packages/ba/eb/ec6a0e6000f96c2a6b2bb11183a6abe8e2b642ec07497bf2eadaf1790332/npdoc_to_md-0.1.tar.gz"}], "0.2": [{"comment_text": "", "digests": {"md5": "62c1aacadc5c325e771adffad4c4be04", "sha256": "9b0688e2cae67a402c8b79659593243ec3520916985f9e5eeb2d92ffbfdc5c2b"}, "downloads": -1, "filename": "npdoc_to_md-0.2.tar.gz", "has_sig": false, "md5_digest": "62c1aacadc5c325e771adffad4c4be04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16919, "upload_time": "2020-04-07T13:12:23", "upload_time_iso_8601": "2020-04-07T13:12:23.922553Z", "url": "https://files.pythonhosted.org/packages/1b/bc/3fa3c61166964ece0c50f67a0919870edbf44beadf4e5f6cfdd97e43594f/npdoc_to_md-0.2.tar.gz"}], "0.3": [{"comment_text": "", "digests": {"md5": "b1e2431ad365bc24870959deb9db3efb", "sha256": "c9835e5c3fab7c8c2d9b6843fc1a0a82951f301f6e9bbefd7c3859dbe6247566"}, "downloads": -1, "filename": "npdoc_to_md-0.3.tar.gz", "has_sig": false, "md5_digest": "b1e2431ad365bc24870959deb9db3efb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16965, "upload_time": "2020-04-09T09:10:50", "upload_time_iso_8601": "2020-04-09T09:10:50.408667Z", "url": "https://files.pythonhosted.org/packages/a3/a7/2eac4aa73dd578719eefa37bd4cf4f6a41ae35676337ae970d7635caea9c/npdoc_to_md-0.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1e2431ad365bc24870959deb9db3efb", "sha256": "c9835e5c3fab7c8c2d9b6843fc1a0a82951f301f6e9bbefd7c3859dbe6247566"}, "downloads": -1, "filename": "npdoc_to_md-0.3.tar.gz", "has_sig": false, "md5_digest": "b1e2431ad365bc24870959deb9db3efb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16965, "upload_time": "2020-04-09T09:10:50", "upload_time_iso_8601": "2020-04-09T09:10:50.408667Z", "url": "https://files.pythonhosted.org/packages/a3/a7/2eac4aa73dd578719eefa37bd4cf4f6a41ae35676337ae970d7635caea9c/npdoc_to_md-0.3.tar.gz"}]}