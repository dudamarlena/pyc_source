{"info": {"author": "Andre Tocci", "author_email": "andre.tocci@dp6.com.br", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Marketing Attribution Models\n\n## 1. Sobre a Classe\nClasse em Python desenvolvida para solu\u00e7\u00f5es de problemas de atribui\u00e7\u00e3o de m\u00eddia em Marketing Digital.\n\n## 2. Sobre Atribui\u00e7\u00e3o Multicanal\nNo contexto digital, antes de convers\u00e3o, o usu\u00e1rio \u00e9 impactado por diversos pontos de contato, podendo gerar jornadas cada vez mais longas e complexas. \n\n*Como atribuir os cr\u00e9ditos das convers\u00f5es e otimizar o investimento em m\u00eddia online?*\n\nPara resolver esse problema, utilizamos **Modelos de Atribui\u00e7\u00e3o**.\n\n\n### 2.1 Tipos de Modelos\n\n#### Modelos Heur\u00edsticos\n\n- **Last Interaction**:\n    - Modelo padr\u00e3o de atribui\u00e7\u00e3o tanto do Google Analytics, quanto de ferramentas de m\u00eddia como Google Ads e Facebook Business manager;\n    - Atribui todo o resultado da convers\u00e3o para o \u00faltimo ponto de contato.\n\n- **Last non-Direct Click**:\n    - Todo o tr\u00e1fego direto \u00e9 ignorado, e 100% do cr\u00e9dito da venda vai para o \u00faltimo canal por meio do qual o cliente chegou ao site antes de concluir a convers\u00e3o.\n\n- **First Interaction**:\n    - Atribui todo o resultado da convers\u00e3o para o primeiro ponto de contato.\n\n- **Linear**:\n    - Cada ponto de contato no caminho de convers\u00e3o.\n\n- **Time Decay**:\n    - Os pontos de contato mais pr\u00f3ximos em termos de tempo da venda ou convers\u00e3o recebem a maior parte do cr\u00e9dito. \n\n- **Position Based**:\n    - No modelo de atribui\u00e7\u00e3o Com base na posi\u00e7\u00e3o, 40% do cr\u00e9dito \u00e9 atribu\u00eddo a cada primeira e \u00faltima intera\u00e7\u00e3o, e os 20% de cr\u00e9dito restantes s\u00e3o distribu\u00eddos uniformemente para as intera\u00e7\u00f5es intermedi\u00e1rias.\n\n\n#### Modelos Algor\u00edtmicos\n\n#### **Shapley Value**\n\nConceito vindo da Teoria dos Jogos, para distribuir a contribui\u00e7\u00e3o de cada jogador em um jogo de coopera\u00e7\u00e3o.\n\nAtribui os cr\u00e9ditos das convers\u00f5es calculando a contribui\u00e7\u00e3o de cada canal presente na jornada, utilizando permuta\u00e7\u00f5es de jornadas com e sem o canal em quest\u00e3o.\n\n\n**Por exemplo**, como podemos atribuir as 19 convers\u00f5es na jornada abaixo?\n\nNatural Search > Facebook > Direto > **$19** \n\n\nO Shapley Value de cada canal \u00e9 calculado com base em observa\u00e7\u00f5es, isto \u00e9, para cada jornada, \u00e9 preciso ter o valores de convers\u00e3o para todas as combina\u00e7\u00f5es que a comp\u00f5e. \n\n\nNatural Search > **$7** <br/>\nFacebook > **$6** <br/>\nDireto > **$4** <br/>\nNatural Search > Facebook > **$15** <br/>\nNatural Search > Direto > **$7** <br/>\nFacebook > Direto > **$9** <br/>\nNatural Search > Facebook > Direto > **$19** <br/>\n\n\nO n\u00famero de itera\u00e7\u00f5es aumenta exponencialmente com o n\u00famero de canais: da ordem de 2^N, sendo N o n\u00famero de canais.\n\nAssim, para uma jornada com 3 canais s\u00e3o necess\u00e1rias 8 c\u00e1lculos. **Para jornadas com mais de 15 canais, se torna praticamente invi\u00e1vel.**\n\n\nO Shapley Value por padr\u00e3o n\u00e3o considera a ordem dos canais,mas sim a contribui\u00e7\u00e3o da presen\u00e7a dele na jornada.\nPara levar isso em considera\u00e7\u00e3o \u00e9 preciso aumentar a ordem do numero de combina\u00e7\u00f5es. \n\nDisso vem a dificuldade em usar um m\u00e9todo que considere a *ordem dos canais* para um grande n\u00famero N, pois, al\u00e9m das 2^N intera\u00e7\u00f5es para o c\u00e1lculo do Shapley Value de um determinado canal i, **precisamos da *observa\u00e7\u00e3o* do canal i em todas as poss\u00edveis posi\u00e7\u00f5es.**\n\n\n**Pontos negativos do Shapley Value**\n- Limita o n\u00famero de pontos de contato uma vez que o n\u00famero de itera\u00e7\u00e3o \u00e9 da ordem de 2^N;\n- Se n\u00e3o ordenado, o Shapley Value considera que a contribui\u00e7\u00e3o de um canal A \u00e9 a mesma se antecedido por B ou por C;\n- Se ordenado, o n\u00famero de combina\u00e7\u00f5es cresce muito e as jornadas devem estar dispon\u00edveis, caso contr\u00e1rio atribui-se zero \u00e0quela jornada;\n- Canais que est\u00e3o poucos presentes ou presentes em jornadas longas v\u00e3o ter pequenas contribui\u00e7\u00f5es;\n\n\n#### **Cadeias de Markov**\nUma cadeia de Markov \u00e9 um caso particular de processo estoc\u00e1stico com a propriedade de que a distribui\u00e7\u00e3o de probabilidade do pr\u00f3ximo estado depende apenas do estado atual e n\u00e3o na sequ\u00eancia de eventos que o precederam.\n\n\nUtilizando cadeias de markov no contexto de atribui\u00e7\u00e3o multicanal, podemos calcular a probalidade de intera\u00e7\u00f5es entre os canais de m\u00eddia por meio da **Matriz de Transi\u00e7\u00e3o**.\n\n\nPara encontrar a contribui\u00e7\u00e3o de cada canal, utilizamos o **Removal Effect**: remove-se o canal em quest\u00e3o da jornada e calcula-se a probabilidade de convers\u00e3o.\n\nA atribui\u00e7\u00e3o \u00e9 dada pela raz\u00e3o entre a diferen\u00e7a da probabilidade total de convers\u00e3o e a probabilidade de convers\u00e3o sem o canal, e a probabilidade total de convers\u00e3o original.\n\nQuanto maior o removal effect, maior a contribui\u00e7\u00e3o do canal para a convers\u00e3o.\n\n\n**Os processos markovianos n\u00e3o possuem nenhum tipo de restri\u00e7\u00e3o em rela\u00e7\u00e3o a quantidade ou ordem dos canais e\nconsidera a sequ\u00eancia de canais como uma parte fundamental do algoritmo**.\n\n\n### 2.2 Refer\u00eancias\n- [Attribution Models in Marketing](https://data-science-blog.com/blog/2019/04/18/attribution-models-in-marketing/)\n- [Attribution Theory: The Two Best Models for Algorithmic Marketing Attribution \u2013 Implemented in Apache Spark and R](http://datafeedtoolbox.com/attribution-theory-the-two-best-models-for-algorithmic-marketing-attribution-implemented-in-apache-spark-and-r/)\n- [Game Theory Attribution: The Model You\u2019ve Probably Never Heard Of](https://clearcode.cc/blog/game-theory-attribution/)\n- [Marketing Channel Attribution With Markov Models In R](https://www.bounteous.com/insights/2016/06/30/marketing-channel-attribution-markov-models-r/?ns=l)\n- [Multi-Channel Funnels Data-Driven Attribution](https://support.google.com/analytics/topic/3180362?hl=en&ref_topic=3205717)\n- [Marketing Multi-Channel Attribution model with R (part 1: Markov chains concept)](https://analyzecore.com/2016/08/03/attribution-model-r-part-1/)\n- [Marketing Multi-Channel Attribution model with R (part 2: practical issues)](https://analyzecore.com/2017/05/31/marketing-multi-channel-attribution-model-r-part-2-practical-issues/)\n- [ml-book/shapley](https://christophm.github.io/interpretable-ml-book/shapley.html)\n- [Overview of Attribution modeling in MCF](https://support.google.com/analytics/answer/1662518?hl=en)\n\n## 3. Importando a Classe\n\n\n```python\n>> pip install marketing_attribution_models\n```\n\n\n```python\nfrom marketing_attribution_models import MAM\n```\n\n## 4. Demonstra\u00e7\u00e3o\n\n### **Criando o objeto MAM**\n\n**A cria\u00e7\u00e3o do objeto MAM** \u00e9 baseado em **dois formatos de Data Frame** e que \u00e9 guiado pelo par\u00e2metro group_channels:\n\n*   **group_channels = True**. Espera-se receber uma base na qual **cada linha seria uma sess\u00e3o da jornada do usu\u00e1rio**.\n  * Esse data frame deve conter colunas representando ID do Usu\u00e1rio, indica\u00e7\u00e3o booleana se houve ou n\u00e3o transa\u00e7\u00e3o durante a sess\u00e3o, timestamp da sess\u00e3o e o canal na qual o usu\u00e1rio gerou a sess\u00e3o;\n*   **group_channels = False**. Recebe a base na qual a **jornada j\u00e1 foi agrupada** e que cada linha representa uma jornada completa de determinado usu\u00e1rio at\u00e9 a convers\u00e3o. Para os usu\u00e1rios do Google Analytics, essa base pode ser gerada atrav\u00e9s da exporta\u00e7\u00e3o do relat\u00f3rio de Top Conversion Paths na aba de Conversions.\n  * Nesse caso a coluna de canais e time_till_conv_colname receberiam em cada linha uma jornada separada por um separador, ' > ' como padr\u00e3o e que pode ser alterado no par\u00e2metro path_separator.\n\nNo nosso caso, iremos apresentar um exemplo na qual as jornadas ainda n\u00e3o est\u00e3o agrupadas, que cada linha representa uma jornada e que ainda n\u00e3o temos um ID de Cada Jornada.\n\n**Ponto de Aten\u00e7\u00e3o:**\nA classe j\u00e1 contempla uma fun\u00e7\u00e3o representada pelo par\u00e2metro create_journey_id_based_on_conversion, que caso seja True, ser\u00e1 criado um ID da Jornada baseado nas colunas de ID do Usu\u00e1rio, passada no par\u00e2metro group_channels_id_list e a coluna que representa se houve ou n\u00e3o convers\u00e3o, passada no par\u00e2metro journey_with_conv_colname.\n\nNesse caso, ser\u00e3o ordenadas as sess\u00f5es de cada usu\u00e1rio e a cada transa\u00e7\u00e3o ser\u00e1 criado um novo ID da Jornada. Entretanto, **encorajamos que seja criado um ID da Jornada com base no conhecimento de neg\u00f3cio de cada base explorada**. Podendo criar condi\u00e7\u00f5es expec\u00edficas de tempo para que haja uma quebra de jornada, como por explempo se identificado que a jornada m\u00e9dia de determidado neg\u00f3cio dura 1 semana at\u00e9 a convers\u00e3o, podemos adotar um crit\u00e9rio que se determinado usu\u00e1rio n\u00e3o interagir com o site por uma semana, sua jornada ser\u00e1 quebrada, pois pode haver uma quebra de interesse.\n\n\n\nExemplificando como seria a configura\u00e7\u00e3o dos parametros no cen\u00e1rio descrito acima com group_channels = True. \n\n1. Deve ser passado o **Pandas Data Frame** contendo a base de dados a ser analisada;\n2. Indicar o formato da base em **group_channels**=True\n3. Nome da coluna que contem os agrupamentos de canais em **channels_colname**;\n4. Coluna Booleana indicando se houve ou n\u00e3o convers\u00e3o na sess\u00e3o em **journey_with_conv_colname**;\n5. Lista contendo os nomes das colunas que representam o ID da Jornada, podendo ser uma combina\u00e7\u00e3o de colunas em **group_channels_by_id_list**. Mas nesse caso como estamos indicando que iremos criar um ID da Jornada no par\u00e2metro **create_journey_id_based_on_conversion = True**, basta indicar a coluna de ID do Usu\u00e1rio; \n6. Coluna representando a data em que ocorreu a sess\u00e3o em **group_timestamp_colname**. Coluna que pode receber al\u00e9m dos dias do ano, o hor\u00e1rio em que a sess\u00e3o ocorreu;\n7. Por fim, em nosso caso, indicamos que iremos gerar um ID da Jornada a partir das colunas indicadas nos par\u00e2metros group_channels_by_id_list e journey_with_conv_colname, em **create_journey_id_based_on_conversion** = True\n\n\n\n```python\nattributions = MAM(df,\n    group_channels=True,\n    channels_colname = 'channels',\n    journey_with_conv_colname= 'has_transaction',\n    group_channels_by_id_list=['user_id'],\n    group_timestamp_colname = 'visitStartTime',\n    create_journey_id_based_on_conversion = True)\n```\n\nPara fins explorat\u00f3rios e de aprendizado, implementamos uma forma de gerar uma **base de dados aleat\u00f3ria** atrav\u00e9s do par\u00e2metro **random_df=True**. N\u00e3o sendo necess\u00e1rio o preenchimento dos demais.\n\n\n```python\nattributions = MAM(random_df=True)\n```\n\nAssim que o objeto foi criado, podemos checar como ficou a **base ap\u00f3s a cria\u00e7\u00e3o do journey_id e o agrupamento das sess\u00f5es** em joranadas atrav\u00e9s do **atributo .DataFrame.**\n\n\n```python\nattributions.DataFrame\n```\n|  | journey_id | channels_agg | time_till_conv_agg | converted_agg | conversion_value |\n| - | - | - | - | - | - |\n| 0 | id:0_J:0 | Facebook | 0.0 | True | 1 |\n| 1 | id:0_J:1 | Google Search | 0.0 | True | 1 |\n| 2 | id:0_J:10 | Google Search > Organic > Email Marketing | 72.0 > 24.0 > 0.0 | True | 1 |\n| 3 | id:0_J:11 | Organic | 0.0 | True | 1 |\n| 4 | id:0_J:12 | Email Marketing > Facebook | 432.0 > 0.0 | True | 1 |\n| ... | ... | ... | ... | ... | ... |\n| 20341 | id:9_J:5 | Direct > Facebook | 120.0 > 0.0 | True | 1 |\n| 20342 | id:9_J:6 | Google Search > Google Search > Google Search | 48.0 > 24.0 > 0.0 | True | 1 |\n| 20343 | id:9_J:7 | Organic > Organic > Google Search > Google Search | 480.0 > 480.0 > 288.0 > 0.0 | True | 1 |\n| 20344 | id:9_J:8 | Direct > Organic | 168.0 > 0.0 | True | 1 |\n| 20345 | id:9_J:9 | Google Search > Organic > Google Search > Emai... | 528.0 > 528.0 > 408.0 > 240.0 > 0.0 | True | 1 |\n\nEsse **atributo \u00e9 atualizado para cada modelo gerado** e nos casos dos resultados heur\u00edsticos, ser\u00e1 adicionado uma coluna contendo a atribui\u00e7\u00e3o dada por determinado modelo no final.\n\n**Aten\u00e7\u00e3o:**\nOs c\u00e1lculos dos modelos n\u00e3o s\u00e3o calculados com base no par\u00e2metro .DataFrame, caso ele seja alterado, os resultados n\u00e3o ser\u00e3o afetados.\n\n\n```python\nattributions.attribution_last_click()\nattributions.DataFrame\n```\n\n| | journey_id | channels_agg | time_till_conv_agg | converted_agg | conversion_value |\n| - | - | - | - | - | - |\n| 0 | id:0_J:0 | Facebook | 0.0 | True | 1 |\n| 1 | id:0_J:1 | Google Search | 0.0 | True | 1 |\n| 2 | id:0_J:10 | Google Search > Organic > Email Marketing | 72.0 > 24.0 > 0.0 | True | 1 |\n| 3 | id:0_J:11 | Organic | 0.0 | True | 1 |\n| 4 | id:0_J:12 | Email Marketing > Facebook | 432.0 > 0.0 | True | 1 |\n| ... | ... | ... | ... | ... | ... |\n| 20341 | id:9_J:5 | Direct > Facebook | 120.0 > 0.0 | True | 1 |\n| 20342 | id:9_J:6 | Google Search > Google Search > Google Search | 48.0 > 24.0 > 0.0 | True | 1 |\n| 20343 | id:9_J:7 | Organic > Organic > Google Search > Google Search | 480.0 > 480.0 > 288.0 > 0.0 | True | 1 |\n| 20344 | id:9_J:8 | Direct > Organic | 168.0 > 0.0 | True | 1 |\n| 20345 | id:9_J:9 | Google Search > Organic > Google Search > Emai... | 528.0 > 528.0 > 408.0 > 240.0 > 0.0 | True | 1 |\n\n\nComo trabalhamos com um grande volume de dados, sabemos que n\u00e3o \u00e9 possivel avaliar os resultados atribu\u00eddos para cada jornada que resultou em uma transa\u00e7\u00e3o. Assim, atrav\u00e9s da consulta do **atributo group_by_channels_models trazemos os resultados dos modelos agrupados por cada canal**. \n\n**Aten\u00e7\u00e3o:**\nOs resultados agrupados n\u00e3o se sobrescrevem caso o mesmo modelo seja calculado mais de uma vez e ambos resultados estar\u00e3o presentes no atributo group_by_channels_models.\n\n\n```python\nattributions.group_by_channels_models\n```\n\n\n\n\n<div>\n\n| channels | attribution_last_click_heuristic |\n| -- | -- |\n| Direct | 2133 |\n| Email Marketing | 1033 |\n| Facebook | 3168 |\n| Google Display | 1073 |\n| Google Search | 4255 |\n| Instagram | 1028 |\n| Organic | 6322 |\n| Youtube | 1093 |\n\n\n\nE como acontece com o .DataFrame, o **group_by_channels_models tamb\u00e9m \u00e9 atualizado para cada novo modelo rodado** e sem a limita\u00e7\u00e3o de n\u00e3o trazer os resultados algor\u00edtimicos\n\n\n```python\nattributions.attribution_shapley()\nattributions.group_by_channels_models\n```\n\n| | channels | attribution_last_click_heuristic | attribution_shapley_size4_conv_rate_algorithmic |\n| - | - | - | - |\n| 0 | Direct | 109 | 74.926849 |\n| 1 | Email Marketing | 54 | 70.558428 |\n| 2 | Facebook | 160 | 160.628945 |\n| 3 | Google Display | 65 | 110.649352 |\n| 4 | Google Search | 193 | 202.179519 |\n| 5 | Instagram | 64 | 72.982433 |\n| 6 | Organic | 315 | 265.768549 |\n| 7 | Youtube | 58 | 60.305925 |\n\n### **Sobre os modelos**\n\nTodos os modelos heur\u00edsticos apresentam o mesmo comportamento quanto \u00e0 atualiza\u00e7\u00e3o dos **atributos .DataFrame e .group_by_channels_models** e tamb\u00e9m quanto ao **output do m\u00e9todo** que ir\u00e1 retornar uma **tupla contendo dois pandas Series**.\n\n\n```python\nattribution_first_click = attributions.attribution_first_click()\n```\n\n**O primeiro output** da tupla corresponde aos resultados na **granularidade de jornada**, similar ao resultado encontrado no .DataFrame\n\n\n```python\nattribution_first_click[0]\n```\n\n\n\n\n    0                          [1, 0, 0, 0, 0]\n    1                                      [1]\n    2              [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    3                                   [1, 0]\n    4                                      [1]\n                           ...                \n    20512                               [1, 0]\n    20513                            [1, 0, 0]\n    20514    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    20515                            [1, 0, 0]\n    20516                         [1, 0, 0, 0]\n    Length: 20517, dtype: object\n\n\n\n**J\u00e1 o segundo** corresponde aos resultados na **granularidade de canal**, similar ao resultado encontrado no .DataFrame\n\n\n```python\nattribution_first_click[1]\n```\n\n|  | channels | attribution_first_click_heuristic |\n| - | - | - |\n| 0 | Direct | 2078 |\n| 1 | Email Marketing | 1095 |\n| 2 | Facebook | 3177 |\n| 3 | Google Display | 1066 |\n| 4 | Google Search | 4259 |\n| 5 | Instagram | 1007 |\n| 6 | Organic | 6361 |\n| 7 | Youtube | 1062 |\n\n#### **Customiza\u00e7\u00e3o dos modelos**\n\nDentre os modelos presentes na classe apenas o Last Click, o First Click e Linear n\u00e3o possuem parametros customiz\u00e1veis al\u00e9m do **parametro group_by_channels_models**, que recebe um **valor booleano** e que caso **falso**, **n\u00e3o ir\u00e1 retornar os resultados dos modelos agrupados por canais**.\n\n##### **Modelo Last Click Non** \n\nFoi criado para replicar o comportamento padr\u00e3o do Google Analytics na qual o **tr\u00e1fego Direto \u00e9 sobreposto** caso ocorra ap\u00f3s alguma intera\u00e7\u00e3o de outra origem dentro de determinado per\u00edodo.\n\nPor padr\u00e3o o par\u00e2metro but_not_this_channel recebe o valor 'Direct', mas pode ser alterado para outros canais / valores de acordo com os seus canais e agrupamentos.\n\n\n\n\n```python\nattributions.attribution_last_click_non(but_not_this_channel='Direct')[1]\n```\n\n| channels | attribution_last_click_non_Direct_heuristic |\n| - | - | - |\n| 0 | Direct | 11 |\n| 1 | Email Marketing | 60 |\n| 2 | Facebook | 172 |\n| 3 | Google Display | 69 |\n| 4 | Google Search | 224 |\n| 5 | Instagram | 67 |\n| 6 | Organic | 350 |\n| 7 | Youtube | 65 |\n\n##### **Modelo Position Based** \n\nPode receber uma lista no par\u00e2metro **list_positions_first_middle_last** determinando os percentuais que ser\u00e3o atribu\u00eddos para o \u00ednicio, meio e fim da jornada de acordo com o contexto de neg\u00f3cio do seu cliente/dado. E que **por padr\u00e3o** \u00e9 distribu\u00eddo com os percentu\u00e1is **40% para o canal introdutor, 20% distribu\u00eddo para os canais intermedi\u00e1rios e 40% para o conversor.**\n\n\n```python\nattributions.attribution_position_based(list_positions_first_middle_last=[0.3, 0.3, 0.4])[1]\n```\n\n|  | channels | attribution_position_based_0.3_0.3_0.4_heuristic |\n| - | - | - |\n| 0 | Direct | 95.685085 |\n| 1 | Email Marketing | 57.617191 |\n| 2 | Facebook | 145.817501 |\n| 3 | Google Display | 56.340693 |\n| 4 | Google Search | 193.282305 |\n| 5 | Instagram | 54.678557 |\n| 6 | Organic | 288.148896 |\n| 7 | Youtube | 55.629772 |\n\n##### **Modelo Time Decay** \n\nPode ser curtomizado quanto ao **percentual de decaimento** no par\u00e2metro **decay_over_time** e quanto ao **tempo em horas na qual esse percentual ser\u00e1 aplicado** no par\u00e2metro **frequency**.\n\nContudo, vale salientar que caso haja mais pontos de contato entre os espa\u00e7os de tempo do decaimento, o valor ser\u00e1 distribu\u00eddo igualmente para esses canais;\n\nExemplo de funcionamento do modelo:\n- **Canais:** Facebook > Organic > Paid Search\n- **Tempo at\u00e9 a Convers\u00e3o:** 14 > 12 > 0\n- **Frequ\u00eancia do decaimento:** 7\n- **Resultados atribu\u00eddos:**\n  - 25% para Facebook;\n  - 25% para Organic;\n  - 50% para Paid Search;\n\n\n\n```python\nattributions.attribution_time_decay(\n    decay_over_time=0.6,\n    frequency=7)[1]\n```\n\n|  | channels | attribution_time_decay0.6_freq7_heuristic |\n| - | - | - |\n| 0 | Direct | 108.679538 |\n| 1 | Email Marketing | 54.425914 |\n| 2 | Facebook | 159.592216 |\n| 3 | Google Display | 64.350107 |\n| 4 | Google Search | 192.838884 |\n| 5 | Instagram | 64.611414 |\n| 6 | Organic | 314.920082 |\n| 7 | Youtube | 58.581845 |\n\n##### **Markov Chains**\n\n**Modelo de Atribui\u00e7\u00e3o** baseado em **Cadeias de Markov** nos auxilia a solucionar o problema de atribui\u00e7\u00e3o de m\u00eddia com uma **abordagem algor\u00edtimica** baseada em dados que calcula a probabilidade de transi\u00e7\u00e3o entre canais.\n\nEsse modelo se comporta como os demais quanto a atualiza\u00e7\u00e3o do .DataFrame e do .group_by_channels_models, al\u00e9m de **retornar uma tupla** com os dois primeiros resultados representando os mesmos descritos anteriormente nos modelos heur\u00edsticos. Contudo, obtemos dois outputs, a **matriz de transi\u00e7\u00e3o** e o **removal effect**.\n\nComo par\u00e2metro de entrada temos, a princ\u00edpio, como indicar se ir\u00e1 ser considerado ou n\u00e3o a probabilidade de transi\u00e7\u00e3o para o mesmo estado.\n\n\n```python\nattribution_markov = attributions.attribution_markov(transition_to_same_state=False)\n```\n\n|  | channels | attribution_markov_algorithmic |\n| - | - | - |\n| 0 | Direct | 2305.324362 |\n| 1 | Email Marketing | 1237.400774 |\n| 2 | Facebook | 3273.918832 |\n| 3 | Youtube | 1231.183938 |\n| 4 | Google Search | 4035.260685 |\n| 5 | Instagram | 1205.949095 |\n| 6 | Organic | 5358.270644 |\n| 7 | Google Display | 1213.691671 |\n\nEssa configura\u00e7\u00e3o **n\u00e3o afeta os resultados agregados** e que s\u00e3o atribu\u00eddos para cada canal, **mas sim os valores observados na matriz de transi\u00e7\u00e3o**. E como inficamos **transition_to_same_state=False** a linha diagonal, que representa a auto-transi\u00e7\u00e3o, aparece zerada.\n\n\n```python\nax, fig = plt.subplots(figsize=(15,10))\nsns.heatmap(attribution_markov[2].round(3), cmap=\"YlGnBu\", annot=True, linewidths=.5)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/DP6/Marketing-Attribution-Models/master/readme-images/output_37_1.png)\n\n\n**Removal Effect**, quarto output dos resultados attribution_markov, \u00e9 dada pela raz\u00e3o entre a diferen\u00e7a da probabilidade total de convers\u00e3o e a probabilidade de convers\u00e3o sem o canal, e a probabilidade total de convers\u00e3o original.\n\n\n```python\nax, fig = plt.subplots(figsize=(2,5))\nsns.heatmap(attribution_markov[3].round(3), cmap=\"YlGnBu\", annot=True, linewidths=.5)\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/DP6/Marketing-Attribution-Models/master/readme-images/output_39_1.png)\n\n\n##### **Shapley Value**\n\nPor fim, temos o segundo modelo algor\u00edtmico da classe MAM o **Shapley Value**, conceito vindo da **Teoria dos Jogos**, para distribuir a contribui\u00e7\u00e3o de cada jogador em um jogo de coopera\u00e7\u00e3o.\n\nModelo atribui os cr\u00e9ditos das convers\u00f5es calculando a contribui\u00e7\u00e3o de cada canal presente na jornada, utilizando combina\u00e7\u00f5es de jornadas com e sem o canal em quest\u00e3o. \n\nPar\u00e2metro **size limita quantidade de canais \u00fanicos na jornada**, por **padr\u00e3o** \u00e9 definido como os **4 \u00faltimos**. Isso ocorre pois o n\u00famero de itera\u00e7\u00f5es aumenta exponencialmente com o n\u00famero de canais. Da ordem de 2N, sendo N o n\u00famero de canais.   \n\nA metodologia do c\u00e1lculo das contribui\u00e7\u00f5es marginais pode variar atrav\u00e9s do **par\u00e2metro order**, que por padr\u00e3o calcula a contribui\u00e7\u00e3o da **combina\u00e7\u00e3o dos canais independende da ordem em que aparecem** nas diferentes jornadas.\n\n\n\n```python\nattributions.attribution_shapley(size=4, order=True, values_col='conv_rate')[0]\n```\n\n|  | combinations | conversions | total_sequences | conversion_value | conv_rate | attribution_shapley_size4_conv_rate_order_algorithmic |\n| - | - | - | - | - | - | - |\n| 0 | Direct | 909 | 926 | 909 | 0.981641 | [909.0] |\n| 1 | Direct > Email Marketing | 27 | 28 | 27 | 0.964286 | [13.948270234099155, 13.051729765900845] |\n| 2 | Direct > Email Marketing > Facebook | 5 | 5 | 5 | 1.000000 | [1.6636366232390172, 1.5835883671498818, 1.752... |\n| 3 | Direct > Email Marketing > Facebook > Google D... | 1 | 1 | 1 | 1.000000 | [0.2563402919193473, 0.2345560799963515, 0.259... |\n| 4 | Direct > Email Marketing > Facebook > Google S... | 1 | 1 | 1 | 1.000000 | [0.2522517802130265, 0.2401286956930936, 0.255... |\n| ... | ... | ... | ... | ... | ... | ... |\n| 1278 | Youtube > Organic > Google Search > Google Dis... | 1 | 2 | 1 | 0.500000 | [0.2514214624662836, 0.24872101523605275, 0.24... |\n| 1279 | Youtube > Organic > Google Search > Instagram | 1 | 1 | 1 | 1.000000 | [0.2544401477637237, 0.2541071889956603, 0.253... |\n| 1280 | Youtube > Organic > Instagram | 4 | 4 | 4 | 1.000000 | [1.2757196742326997, 1.4712839059493295, 1.252... |\n| 1281 | Youtube > Organic > Instagram > Facebook | 1 | 1 | 1 | 1.000000 | [0.2357631944623868, 0.2610913781266248, 0.247... |\n| 1282 | Youtube > Organic > Instagram > Google Search | 3 | 3 | 3 | 1.000000 | [0.7223482210689489, 0.7769049003203142, 0.726... |\n\nPor fim, par\u00e2metro na qual o Shapley Value ser\u00e1 calculado pode ser alterado em **values_col**, que por padr\u00e3o utiliza a **taxa de convers\u00e3o** que \u00e9 uma forma de **considerarmos as n\u00e3o convers\u00f5es no c\u00e1lculo do modelo**. Contudo, tamb\u00e9m podemos considerar no c\u00e1lculo o total de convers\u00f5es ou o valor gerados pelas convers\u00f5es, como demostrado abaixo. \n\n\n```python\nattributions.attribution_shapley(size=3, order=False, values_col='conversions')[0]\n```\n\n|  | combinations | conversions | total_sequences | conversion_value | conv_rate | attribution_shapley_size3_conversions_algorithmic |\n| - | - | - | - | - | - | - |\n| 0 | Direct | 11 | 18 | 18 | 0.611111 | [11.0] |\n| 1 | Direct > Email Marketing | 4 | 5 | 5 | 0.800000 | [2.0, 2.0] |\n| 2 | Direct > Email Marketing > Google Search | 1 | 2 | 2 | 0.500000 | [-3.1666666666666665, -7.666666666666666, 11.8... |\n| 3 | Direct > Email Marketing > Organic | 4 | 6 | 6 | 0.666667 | [-7.833333333333333, -10.833333333333332, 22.6... |\n| 4 | Direct > Facebook | 3 | 4 | 4 | 0.750000 | [-8.5, 11.5] |\n| ... | ... | ... | ... | ... | ... | ... |\n| 75 | Instagram > Organic > Youtube | 46 | 123 | 123 | 0.373984 | [5.833333333333332, 34.33333333333333, 5.83333... |\n| 76 | Instagram > Youtube | 2 | 4 | 4 | 0.500000 | [2.0, 0.0] |\n| 77 | Organic | 64 | 92 | 92 | 0.695652 | [64.0] |\n| 78 | Organic > Youtube | 8 | 11 | 11 | 0.727273 | [30.5, -22.5] |\n| 79 | Youtube | 11 | 15 | 15 | 0.733333 | [11.0] |\n\n### Visualiza\u00e7\u00e3o\nE agora que temos os resultados atribu\u00eddos pelos diferentes modelos guardados em nosso objeto **.group_by_channels_models** de acordo com o nosso contexto de neg\u00f3cio podemos plotar um gr\u00e1fico e comparar os resultados.\n\n\n```python\nattributions.plot()\n```\n\n\n\n![png](https://raw.githubusercontent.com/DP6/Marketing-Attribution-Models/master/readme-images/output_45_1.png)\n\n\nCaso queira selecionar apenas os modelos algor\u00edtimicos, podemos especifica-lo no **par\u00e2metro model_type**.\n\n\n```python\nattributions.plot(model_type='algorithmic')\n```\n\n\n\n\n![png](https://raw.githubusercontent.com/DP6/Marketing-Attribution-Models/master/readme-images/output_47_1.png)\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DP6/Marketing-Attribution-Models", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "marketing-attribution-models", "package_url": "https://pypi.org/project/marketing-attribution-models/", "platform": "", "project_url": "https://pypi.org/project/marketing-attribution-models/", "project_urls": {"Homepage": "https://github.com/DP6/Marketing-Attribution-Models"}, "release_url": "https://pypi.org/project/marketing-attribution-models/1.0.4/", "requires_dist": ["numpy", "pandas", "matplotlib", "seaborn"], "requires_python": ">=3.5", "summary": "Metodos de atribuicao de midia", "version": "1.0.4"}, "last_serial": 6718588, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "48d9d98210a408353e3b2571cd44aff5", "sha256": "68b6362116b32e563ad2cdb8a4445e4634096e510c6fc853cfceda40ce03e376"}, "downloads": -1, "filename": "marketing_attribution_models-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48d9d98210a408353e3b2571cd44aff5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11830, "upload_time": "2020-02-03T16:32:32", "upload_time_iso_8601": "2020-02-03T16:32:32.702898Z", "url": "https://files.pythonhosted.org/packages/fb/57/e223be478a8b7316917590c399c4b983b30e8e1878fd3ccd254ce262baa9/marketing_attribution_models-1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8f9db6cbd8702bc8c1b8771203080c25", "sha256": "4876e3fca94fde5d50221bd5301c68f34549ffd0f7129ffcb06f4f5efbf37fa6"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.tar.gz", "has_sig": false, "md5_digest": "8f9db6cbd8702bc8c1b8771203080c25", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11336, "upload_time": "2020-02-03T16:32:35", "upload_time_iso_8601": "2020-02-03T16:32:35.233428Z", "url": "https://files.pythonhosted.org/packages/98/a5/2d8101a98136a15273c4a4037388542b9a33eeed2096ad82960ddf85b972/marketing_attribution_models-1.0.tar.gz"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4a666772a7c3827ddc909d08271cdf82", "sha256": "77dc0b6355711430b8274faa3255f7efc0603879042fd3ce3674cf2bce833410"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a666772a7c3827ddc909d08271cdf82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12075, "upload_time": "2020-02-03T18:21:31", "upload_time_iso_8601": "2020-02-03T18:21:31.283570Z", "url": "https://files.pythonhosted.org/packages/b5/d3/a1b3b61fbdc63fecdbbed90daceac283e42b0022c158e3fc67373d17e2d8/marketing_attribution_models-1.0.1-py3-none-any.whl"}], "1.0.2": [{"comment_text": "", "digests": {"md5": "7a23fbab0682e881b7a3f57391784d09", "sha256": "34ba8fcd4471eadfcf732c12fb7546f6e6c173c5a00bbfd6140e6ca7ef616f61"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7a23fbab0682e881b7a3f57391784d09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19897, "upload_time": "2020-02-03T19:49:39", "upload_time_iso_8601": "2020-02-03T19:49:39.962028Z", "url": "https://files.pythonhosted.org/packages/51/aa/fc142c9af2cc71a7fc3099ac65b0ad14d35adc1ad47236f35da753290e80/marketing_attribution_models-1.0.2-py3-none-any.whl"}], "1.0.3": [{"comment_text": "", "digests": {"md5": "dd9c7b8268a7c3032d4a3165bfd20186", "sha256": "6fbf1a3d194d26de26aacc83be64702346761d6e4ec9f026aec3f90e91aef6b2"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "dd9c7b8268a7c3032d4a3165bfd20186", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19921, "upload_time": "2020-02-04T13:52:39", "upload_time_iso_8601": "2020-02-04T13:52:39.876433Z", "url": "https://files.pythonhosted.org/packages/e9/6c/0ddc8d528ebb5bd2929a10fadad71e62a7a86060dc5f274bc22b535aaf36/marketing_attribution_models-1.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "cecd7cee54917d5bdded4405b5338159", "sha256": "f04c4d67a8e8d495fb3e0431b61de8211378b7af1f01691cca6e055ba27ef2df"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.3.tar.gz", "has_sig": false, "md5_digest": "cecd7cee54917d5bdded4405b5338159", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 160019, "upload_time": "2020-02-10T11:30:50", "upload_time_iso_8601": "2020-02-10T11:30:50.086962Z", "url": "https://files.pythonhosted.org/packages/da/5d/61a59a3b53eb81ec321cd10807819e928e8b474fd995a5cc1357ae888eb1/marketing_attribution_models-1.0.3.tar.gz"}], "1.0.4": [{"comment_text": "", "digests": {"md5": "a2fb23bd5c069ae9d9b8fa356355874b", "sha256": "7ac02e20ca92d971e419ed922e583e205afadd998b07bc4f6c7f70bc93d23a47"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a2fb23bd5c069ae9d9b8fa356355874b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20101, "upload_time": "2020-02-10T11:33:26", "upload_time_iso_8601": "2020-02-10T11:33:26.081048Z", "url": "https://files.pythonhosted.org/packages/bb/6a/9b823906de4bee0f380a59a04ae4a2d2bc4a986bfc40147ba74b8ff8bb3d/marketing_attribution_models-1.0.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "03df57959632fe722d634b7f42cbd97b", "sha256": "e91f1fa57e84c5840dd3102ef29549300771314be8254080f2a6b1958f322942"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.4.tar.gz", "has_sig": false, "md5_digest": "03df57959632fe722d634b7f42cbd97b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 160021, "upload_time": "2020-02-10T11:33:28", "upload_time_iso_8601": "2020-02-10T11:33:28.590763Z", "url": "https://files.pythonhosted.org/packages/d2/ef/eb1887be6637c641b970324a4e4e39ba14408db791cc6d3c3cf0908800c8/marketing_attribution_models-1.0.4.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2fb23bd5c069ae9d9b8fa356355874b", "sha256": "7ac02e20ca92d971e419ed922e583e205afadd998b07bc4f6c7f70bc93d23a47"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a2fb23bd5c069ae9d9b8fa356355874b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20101, "upload_time": "2020-02-10T11:33:26", "upload_time_iso_8601": "2020-02-10T11:33:26.081048Z", "url": "https://files.pythonhosted.org/packages/bb/6a/9b823906de4bee0f380a59a04ae4a2d2bc4a986bfc40147ba74b8ff8bb3d/marketing_attribution_models-1.0.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "03df57959632fe722d634b7f42cbd97b", "sha256": "e91f1fa57e84c5840dd3102ef29549300771314be8254080f2a6b1958f322942"}, "downloads": -1, "filename": "marketing_attribution_models-1.0.4.tar.gz", "has_sig": false, "md5_digest": "03df57959632fe722d634b7f42cbd97b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 160021, "upload_time": "2020-02-10T11:33:28", "upload_time_iso_8601": "2020-02-10T11:33:28.590763Z", "url": "https://files.pythonhosted.org/packages/d2/ef/eb1887be6637c641b970324a4e4e39ba14408db791cc6d3c3cf0908800c8/marketing_attribution_models-1.0.4.tar.gz"}]}