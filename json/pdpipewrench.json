{"info": {"author": "Blake Naccarato", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "PdPipeWrench\n============\n\nYAML-configurable Pandas pipelines.\n\nThe `pdpipewrench` package reads input data, generates pipeline stages, and writes\noutput data entirely from the information supplied in a YAML configuration file. In\naddition, custom-made or module-specific functions may be wrapped into pipeline stages\nas specified in the YAML. Keyword arguments to such functions are also specified in\nYAML, which sidesteps the problem of hard coding parameters into numerous `*.py` files\nfor different datasets, each slightly different than the last.\n\nInstallation\n------------\n\n    pip install pdpipewrench\n\nRequirements\n------------\n\nThis package manages YAML configurations with `confuse`, which itself depends on\n`pyYAML`. Pipeline stages and pipelines are generated with `pdpipe`, and `engarde` is an\noptional dependency for `verify_all`-, `verify_any`-, and `engarde`-type stages.\n\nDetails\n-------\n\nAll aspects of a pipeline are defined in `config.yaml`. This file contains information\nabout `sources`, files from which the data is drawn, `pipelines` and their stages, and\nthe `sinks`, files to which the transformed data is written. Custom-made functions may\nbe defined in a standard `*.py` file/module, which must take a `pandas.DataFrame` as\ninput and return a `pandas.DataFrame` as output. Pipeline stages are generated from\nthese custom functions by specifying them and their keyword arguments in `config.yaml`.\n\nThe file `config.yaml` controls all aspects of the pipeline, from data discovery, to\npipeline stages, to data output. If the environment variable `PDPIPEWRENCHDIR` is not\nspecified, then then it will be set to the current working directory. The file\n`config.yaml` should be put in the `PDPIPEWRENCHDIR`, and data to be processed should be\nin that directory or its subdirectories.\n\nExample\n-------\n\nThe directory structure of this example is as follows:\n\n    example/\n        config.yaml\n        custom_functions.py\n        example.py\n        raw\n            products_storeA.csv\n            products_storeB.csv\n        output\n            products_storeA_processed.csv\n            products_storeB_processed.csv\n\nThe contents of `config.yaml` is as follows (paths are relative to the location of\n`config.yaml`, i.e. the `PDPIPEWRENCHDIR`):\n\n    sources:\n      example_source:\n        file: raw/products*.csv\n        kwargs:\n          usecols:\n            - items\n            - prices\n            - inventory\n        index_col: items\n\n    sinks:\n      example_sink:\n        file: output/*_processed.csv\n\n    pipelines:\n      example_pipeline:\n\n      - type: transform\n          function: add_to_col\n          kwargs:\n            col_name: prices\n            val: 1.5\n          staging:\n            desc: Adds $1.5 to column 'prices'\n            exmsg: Couldn't add to 'prices'.\n\n        - type: pdpipe\n          function: ColDrop\n          kwargs:\n            columns: inventory\n          staging:\n            exraise: false\n\n        - type: verify_all\n          check: high_enough\n          kwargs:\n            col_name: prices\n            val: 19\n          staging:\n            desc: Checks whether all 'prices' are over $19.\n\nThe module `custom_functions.py` contains:\n\n    custom_functions.py\n\n        def add_to_col(df, col_name, val):\n            df.loc[:, col_name] = df.loc[:, col_name] + val\n            return df\n\n        def high_enough(df, col_name, val):\n            return df.loc[:, col_name] > val\n\nFinally, the contents of the file `example.py`:\n\n    import custom_functions\n    import pdpipewrench as pdpw\n\n    src = pdpw.Source(\"example_source\")  # generate the source from `config.yaml`\n    snk = pdpw.Sink(\"example_sink\")  # generate the sink from `config.yaml`.\n\n    # generate the pipeline from `config.yaml`.\n    line = pdpw.Line(\"example_pipeline\", custom_functions)\n\n    # connect the source and sink to the pipeline, print what the pipeline will do, then run\n    # the pipeline, writing the output to disk. capture the input/output dataframes if desired.\n    pipeline = line.connect(src, snk)\n    print(pipeline)\n    (dfs_in, dfs_out) = line.run()\n\nRunning `example.py` generates `src`, `snk`, and `line` objects. Then, the `src` and\n`snk` are connected to an internal `pipeline`, which is a `pdpipe.PdPipeLine` object.\nWhen this pipeline is printed, the following output is displayed:\n\n    A pdpipe pipeline:\n    [ 0]  Adds $1.5 to column 'prices'\n    [ 1]  Drop columns inventory\n    [ 2]  Checks whether all 'prices' are over $19.\n\nThe function of this pipeline is apparent from the descriptions of each stage. Some\nstages have custom descriptions specified in the `desc` key of `config.yaml`. Stages\nof type `pdpipe` have their descriptions auto-generated from the keyword arguments.\n\nThe command `line.run()` pulls data from `src`, passes it through `pipeline`, and\ndrains it to `snk`. The returns `dfs_in` and `dfs_out` show that came in from `src`\nand what went to `snk`. In addition to `line.run()`, the first `n` stages of the\npipeline can be tested on file `m` from the source with `line.test(m,n)`.\n\nOutput from Example\n-------\n\nThis is  `.\\raw\\products_storeA.csv` before it is drawn into the source:\n\n| items   |   prices |   inventory | color |\n|:--------|---------:|------------:|------:|\n| foo     |       19 |           5 |   red |\n| bar     |       24 |           3 | green |\n| baz     |       22 |           7 |  blue |\n\nThis is  `.\\raw\\products_storeA.csv` after it is drawn into the source with the argument\n`usecols = [\"items\", \"prices\", \"inventory\"]` specified in `config.yaml`:\n\n| items   |   prices |   inventory |\n|:--------|---------:|------------:|\n| foo     |       19 |           5 |\n| bar     |       24 |           3 |\n| baz     |       22 |           7 |\n\nThe output from the pipeline is sent to `.\\products_storeA_processed.csv`. The arguments\nspecified by `config.yaml` have been applied. Namely, `prices` have been incremented by\n`1.5`, the `inventory` column has been dropped, and then a check has been made that all\n`prices` are over `19`.\n\n| items   |   prices |\n|:--------|---------:|\n| foo     |     20.5 |\n| bar     |     25.5 |\n| baz     |     23.5 |\n\nIf the `verify_all` step had failed, an exception would be raised, and the items that\ndid not pass the check would be returned in the exception message. Say, for example,\nthat the `val` argument was `21` instead of `19`:\n\n    AssertionError: ('high_enough not true for all',\n    prices  items        \n    foo      20.5)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/blakeNaccarato/pdpipewrench", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pdpipewrench", "package_url": "https://pypi.org/project/pdpipewrench/", "platform": "", "project_url": "https://pypi.org/project/pdpipewrench/", "project_urls": {"Homepage": "https://github.com/blakeNaccarato/pdpipewrench"}, "release_url": "https://pypi.org/project/pdpipewrench/1.1.1/", "requires_dist": ["pandas", "pdpipe", "engarde", "confuse", "setuptools ; extra == 'dev'", "wheel ; extra == 'dev'", "twine ; extra == 'dev'", "numpy ; extra == 'dev'", "scipy ; extra == 'dev'", "doc8 ; extra == 'dev'", "jupyter ; extra == 'dev'", "black ; extra == 'dev'", "flake8 ; extra == 'dev'", "mypy ; extra == 'dev'", "pylint ; extra == 'dev'", "matplotlib ; extra == 'dev'", "PyQt5 ; extra == 'dev'", "rope ; extra == 'dev'"], "requires_python": ">=3.7", "summary": "YAML-configurable Pandas pipelines.", "version": "1.1.1"}, "last_serial": 6765728, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "8f29e2ace5bd05cc2de3001d3bc21ed2", "sha256": "98b0ee140b631a2aa30690d2609d04bc24c4bf0e001a08660ea505a9581b5a73"}, "downloads": -1, "filename": "pdpipewrench-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8f29e2ace5bd05cc2de3001d3bc21ed2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8445, "upload_time": "2020-03-04T17:18:12", "upload_time_iso_8601": "2020-03-04T17:18:12.238510Z", "url": "https://files.pythonhosted.org/packages/8b/7c/73db446efe0b9f15ec2a70ef39dd5f4da41135c2b2cfecd0de7918aac443/pdpipewrench-1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a51015297448faea0c26b90daddfd633", "sha256": "3943fce89e261fe997053f2e23426c6f409651389ad7a761138372a96672711d"}, "downloads": -1, "filename": "pdpipewrench-1.0.tar.gz", "has_sig": false, "md5_digest": "a51015297448faea0c26b90daddfd633", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6634, "upload_time": "2020-03-04T17:18:13", "upload_time_iso_8601": "2020-03-04T17:18:13.522057Z", "url": "https://files.pythonhosted.org/packages/8b/65/397ed83f032d02c076552a2994abb374bb5e73e779eef1f44121ae7a3e6f/pdpipewrench-1.0.tar.gz"}], "1.1": [{"comment_text": "", "digests": {"md5": "fb311ae425d729cb6f19364fc3ac4978", "sha256": "3446b76377e90e0b29f4603b734bbef016a488fe08df7fe7442adb459deae0e9"}, "downloads": -1, "filename": "pdpipewrench-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fb311ae425d729cb6f19364fc3ac4978", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10717, "upload_time": "2020-03-05T17:43:54", "upload_time_iso_8601": "2020-03-05T17:43:54.012609Z", "url": "https://files.pythonhosted.org/packages/4a/13/111bcf161db640645cf2f09427ad85beb06622ba941eda50f2f5c013a705/pdpipewrench-1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "79571e10342b7570e4884eba18768507", "sha256": "f368d91e79159adabd7612b84d93916db09771e5c7df3a6dcc4c7f1f078c60ad"}, "downloads": -1, "filename": "pdpipewrench-1.1.tar.gz", "has_sig": false, "md5_digest": "79571e10342b7570e4884eba18768507", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10062, "upload_time": "2020-03-05T17:43:55", "upload_time_iso_8601": "2020-03-05T17:43:55.623842Z", "url": "https://files.pythonhosted.org/packages/92/29/6e53e3d7ddbc27e087e61b6c024cbada958173c254c51a1c385e9f9c5f65/pdpipewrench-1.1.tar.gz"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "042ce67db78f1dd4845e231bda28d7a7", "sha256": "c602360c1628ffe537d17c0bf5c8286969e3b81df821b5079250dc8ad61051da"}, "downloads": -1, "filename": "pdpipewrench-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "042ce67db78f1dd4845e231bda28d7a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10787, "upload_time": "2020-03-06T23:23:06", "upload_time_iso_8601": "2020-03-06T23:23:06.524462Z", "url": "https://files.pythonhosted.org/packages/61/28/bcfbfe5a43ae56e546e657472bfe4801436cbf26560e07b67e0a7569079b/pdpipewrench-1.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "eea7790e9c4eb0ea0c2c46c4017dcbdc", "sha256": "e9c4f6b98071a3cbb7da09a74e231e73c64bee4984e51879095714dacba9b950"}, "downloads": -1, "filename": "pdpipewrench-1.1.1.tar.gz", "has_sig": false, "md5_digest": "eea7790e9c4eb0ea0c2c46c4017dcbdc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10129, "upload_time": "2020-03-06T23:23:07", "upload_time_iso_8601": "2020-03-06T23:23:07.945301Z", "url": "https://files.pythonhosted.org/packages/43/ec/268bec571494a8f0c639ae93b29905c68634ca1e04581ae93a54c281bc2b/pdpipewrench-1.1.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "042ce67db78f1dd4845e231bda28d7a7", "sha256": "c602360c1628ffe537d17c0bf5c8286969e3b81df821b5079250dc8ad61051da"}, "downloads": -1, "filename": "pdpipewrench-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "042ce67db78f1dd4845e231bda28d7a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10787, "upload_time": "2020-03-06T23:23:06", "upload_time_iso_8601": "2020-03-06T23:23:06.524462Z", "url": "https://files.pythonhosted.org/packages/61/28/bcfbfe5a43ae56e546e657472bfe4801436cbf26560e07b67e0a7569079b/pdpipewrench-1.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "eea7790e9c4eb0ea0c2c46c4017dcbdc", "sha256": "e9c4f6b98071a3cbb7da09a74e231e73c64bee4984e51879095714dacba9b950"}, "downloads": -1, "filename": "pdpipewrench-1.1.1.tar.gz", "has_sig": false, "md5_digest": "eea7790e9c4eb0ea0c2c46c4017dcbdc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10129, "upload_time": "2020-03-06T23:23:07", "upload_time_iso_8601": "2020-03-06T23:23:07.945301Z", "url": "https://files.pythonhosted.org/packages/43/ec/268bec571494a8f0c639ae93b29905c68634ca1e04581ae93a54c281bc2b/pdpipewrench-1.1.1.tar.gz"}]}