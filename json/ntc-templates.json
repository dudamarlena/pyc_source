{"info": {"author": "network.toCode()", "author_email": "info@networktocode.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/networktocode/ntc-templates.svg?branch=master)](https://travis-ci.org/networktocode/ntc-templates)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nNTC TEMPLATES\n=============\n\nRepository of TextFSM Templates for Network Devices, and Python wrapper for TextFSM's CliTable.\n\n[TextFSM](https://github.com/google/textfsm/wiki) is a project built by Google that takes CLI string output and passes each line through a series of regular expressions until it finds a match. The regular expressions use named capture groups to build a text table out of the significant text. The names of the capture groups are used as column headers, and the captured values are stored as rows in the table.\n\nThis project provides a large collection of TextFSM Templates (text parsers) for a variety of Networking Vendors. In addition to the templates, there is a function that will convert the CLI output into a CliTable object; the resulting text table is converted into a list of dictionaries mapping the column headers with each row in the table.\n\n\nInstallation and Usage\n----------------------\nThe project can be installed using either Git or PyPI; if you would like to use the templates outside of this project, then Git is the recommended approach.\n\n#### Git\n\n```shell\n$ git clone git@github.com:networktocode/ntc-templates.git\n$ \n# Optional steps to install ntc-templates as a python package\n$ pip install -e ntc-templates/\n$ \n```\n\nThe install can also include the required dev packages, which can be useful for adding or editing templates:\n\n```shell\n$ git clone git@github.com:networktocode/ntc-templates.git\n$ \n# Optional steps to install ntc-templates as a python package\n$ pip install -e ntc-templates/[dev]\n$ \n```\n\n#### PyPI\n\n```shell\n$ pip install ntc_templates\n$ \n```\n\nTo include the dev packages:\n```\n$ pip install ntc_templates[dev]\n$ \n```\n\n#### Usage\n\n```python\n>>> from ntc_templates.parse import parse_output\n>>> vlan_output = (\n        \"VLAN Name                             Status    Ports\\n\"\n        \"---- -------------------------------- --------- -------------------------------\\n\"\n        \"1    default                          active    Gi0/1\\n\"\n        \"10   Management                       active    \\n\"\n        \"50   VLan50                           active    Fa0/1, Fa0/2, Fa0/3, Fa0/4, Fa0/5,\\n\"\n        \"                                                Fa0/6, Fa0/7, Fa0/8\\n\"\n    )\n>>> vlan_parsed = parse_output(platform=\"cisco_ios\", command=\"show vlan\", data=vlan_output)\n>>> vlan_parsed\n[\n    {\n        'vlan_id': '1',\n        'name': 'default',\n        'status': 'active',\n        'interfaces': ['Gi0/1']\n    },\n    {\n        'vlan_id': '10',\n        'name': 'Management',\n        'status': 'active',\n        'interfaces': []\n    },\n    {\n        'vlan_id': '50',\n        'name': 'VLan50', 'status': 'active',\n        'interfaces': ['Fa0/1', 'Fa0/2', 'Fa0/3', 'Fa0/4', 'Fa0/5', 'Fa0/6', 'Fa0/7', 'Fa0/8']\n    }\n]\n>>> \n```\n\nContributing\n------------\n\nPull requests are welcomed and automatically built and tested through TravisCI.\n\n### New Templates\nTo contribute new templates, each new pull request must include the following:\n\n- TextFSM template\n- Modified version of the **index** file\n- Tests\n  * Raw version of text to be parsed\n  * YAML file containing the expected parsed dictionary\n\n#### TextFSM Template\n\nTextFSM templates should be placed in the `./templates` directory and should adhere to the following NTC-Templates style.\nThe TextFSM template name should be in the following format:\n\n##### Naming\n\nThe template should be named using: `{{ vendor_os }}_{{ command_with_underscores }}.textfsm`\n> Ex: cisco_ios_show_cdp_neighbors.textfsm\n\nNote: The vendor name must be valid from the [os_choices](https://github.com/networktocode/ntc-templates/blob/master/tests/test_index_order.py#L59) tests, which is primarily based on [Netmiko](https://github.com/ktbyers/netmiko/tree/master/netmiko) list of supported vendors. New vendors added should adhere to **vendor_os**.\n> Ex: vmware_nsx\n\n##### Values\n\nThe capture group names should be in UPPERCASE.\n\nAn example of the proper format is shown below.\n\n```\nValue TIME (\\d+:\\d+:\\d+)\nValue TIMEZONE (\\S+)\nValue DAYWEEK (\\w+)\nValue MONTH (\\d+)\nValue DAY (\\d+)\nValue YEAR (\\d+)\n\nStart\n  ^${TIME}\\s+${TIMEZONE}\\s+${DAYWEEK}\\s+${DAY}/${MONTH}/${YEAR} -> Record\n  ^. -> Error\n```\n##### States\n\nIf the raw output has a heading, the `Start` state should match on the column headings and then transition to another state that will match the device's output table with the capture groups. This helps ensure the regex patterns for the capture groups are attempting to match the correct information, and allows templates to easily add additional States for tables that have different headings. Example:\n\n*Raw Output*\n```\n... omitted\nNetwork Next Hop Metric LocPrf Weight Path\n*> 111.111.111.111/32 112.112.112.112 4294967295 4294967295 65535 1000 1000 1000 i\n```\n\n*Sample Template*\n```\nStart\n# Checking for header\n^\\s*Network\\s+Next(?:\\s+|-)[Hh]op\\s+Metric\\s+LocPrf\\s+Weight\\s+Path\\s*$$ -> BGPTable\n\nBGPTable\n ... omitted\n```\n\nEach **state** should end with `^. -> Error`. This helps to ensure we're accounting for every line within the raw output for the command. This doesn't mean we have to capture all the data as a **Value**, but we do have to account for it. In addition, it is also good to provide an expression to match blank lines, `^\\s*$$`\n\nAn example would be the following raw output:\n```\nNAME: \"3640 chassis\", DESCR: \"3640 chassis\"\nPID: , VID: 0xFF, SN: FF1045C5\n```\n\nThe template would be the following:\n```\nValue NAME (.*)\nValue DESCRIPTION (.*)\n\nStart\n  ^NAME:\\s+\"${NAME}\",\\s*DESCR:\\s+\"${DESCRIPTION}\"\n  ^PID:\\s*,\\s*VID:\\s*\\S+,\\s*SN:\\s*\\S+\n  ^\\s*$$\n  ^. -> Error\n```\n\nTaking a look at the example template above, you notice that we're using **\\s*** and **\\s+**. These are the preferred way to match space characters, and should be used over the literal space character. For example, `This\\s+is\\s+preferred\\s*$$` vs `This is not preferred$$`\n\n- **\\s*** accounts for zero or more spaces (use when the output may or may not have a space between characters)\n- **\\s+** accounts for one or more spaces (use when output will have a space, but could have more than one space)\n\n#### Index File\n\nThe Index file binds the templates to the commands being run. Special care has been taken on ordering, as there is potential for issues. e.g. `show ip route` picking up for `show ip router vrf <vrf-name>`. We have used a combination of ordering, as defined:\n\n - OS in alphabetical order\n - Template name in length order\n - When length is the same, use alphabetical order of command name\n - Keep space between OS's\n\nExample:\n\n```\nTemplate, Hostname, Platform, Command\n\n# same os, same length, used alphabetical order of command name\narista_eos_show_mlag.textfsm, .*, arista_eos, sh[[ow]] ml[[ag]]\narista_eos_show_vlan.textfsm, .*, arista_eos, sh[[ow]] vl[[an]]\n\n# os in alphabetical order and space between cisco_asa and arista_eos\ncisco_asa_dir.textfsm,  .*, cisco_asa, dir\n\n# same os, template name length different and space between cisco_asa and cisco_ios\ncisco_ios_show_capability_feature_routing.textfsm,  .*, cisco_ios, sh[[ow]] cap[[ability]] f[[eature]] r[[outing]]\ncisco_ios_show_interface_transceiver.textfsm, .*, cisco_ios, sh[[ow]] int[[erface]] trans[[ceiver]]\ncisco_ios_show_cdp_neighbors_detail.textfsm, .*, cisco_ios, sh[[ow]] c[[dp]] neig[[hbors]] det[[ail]]\n```\n\n#### Tests\nTests will be located in `./tests` with the following hierarchy:\n- `./tests/{{ vendor_os }}/{{ command_name }}/`\n\nThe `{{ command_name }}` directory should include the `.raw` file that includes the raw output of the command to be parsed, and the `.yml` file of the returned structured data.\n```bash\n$ ls tests/cisco_ios/show_clock/\ncisco_ios_show_clock.yml\ncisco_ios_show_clock.raw\n$ \n```\n\n##### Raw version of input text\n\nThe raw text file should contain **only** the output of the CLI command to be parsed. It should **not** contain the CLI command itself.\n\nAn example of the proper format is shown below:\n\n```bash\n$ cat tests/cisco_ios/show_clock/cisco_ios_show_clock.raw\n*18:57:38.347 UTC Mon Oct 19 2015\n$ \n```\n\n##### YAML file containing expected parsed dictionary\n\nThe parsed file should match the data that is returned from the `parse_output` function discussed in the beginning. Dictionary keys should be in lowercase.\n\nThe parsed text file should be placed in a directory in the `./tests` directory with the same name as the template file but replace `.textfsm` file extension with `.yml`. The raw text file and the parsed text file should be in the same directory.\n**ex. ./tests/cisco_ios/show_clock/**\n\nThere are available helpers to create the parsed file in the correct format (See _Development Helper Scripts_ below).\n\nAn example of the proper format is shown below:\n```bash\n$ cat ./tests/cisco_ios/show_clock/cisco_ios_show_clock.yml\n---\nparsed_sample:\n  - time: \"18:57:38.347\"\n    timezone: \"UTC\"\n    dayweek: \"Mon\"\n    month: \"Oct\"\n    day: \"19\"\n    year: \"2015\"\n$ \n```\n\nMultiple `raw` and `parsed` files are supported per directory, and are encouraged, as there are differences depending on version, length, etc. Additional test files and more real life data helps ensure backwards compatibility is maintained as each template is updated and merged into the repo.\n\nAll YAML files must adhere to the YAML standards defined in the `.yamllint` file in the root directory. Yamllint provides thorough documentation of their configuration settings [here](https://yamllint.readthedocs.io/en/stable/rules.html). \n\n##### Development Helper Scripts\n\nA cli utility is provided to assist with properly building the parsed files. This utility depends on some packages listed in the dev install requirements; see _Install and Usage_ for directions on installing the dev requirements. All arguments that can be passed to the script are mutually exclusive (i.e. you can only pass one argument). The file can be made executable with the `chmod +x development_scripts.py` command. The arguments are:\n\n  * `-y`: Takes the path to a YAML file and ensures that the file adheres to the .yamllint settings\n  * `-yd`: Takes a glob path to a directory or directories that will ensure all files ending in `.yml` adhere to the .yamllint settings\n  * `-c`: Takes the path to a `.raw` file, and generates the parsed data and saves the results adjacent to the `.raw` file following the defined standards in .yamllint.\n  * `-cd`: Takes a glob path to a directory or directories containing `.raw` files, and creates the appropriate parsed files in the appropriate directory.\n\n  The `-y` and `-yd` arguments are designed to allow developers to generate the expected parsed file how they want, and ensure that the formatting adheres to the defined standard for this project.\n\n  The `-c` and `-cd` arguments use `lib.ntc_templates.parse.parse_output()` to generate the parsed data; this means that you can use these arguments to auto-generate the test `.yml` file(s) for new templates; just be sure that the template's parsing behavior meets expectations. In order for the data to be parsed, the template must be placed in `templates/` and the `templates/index` file must be updated to correctly point to the template file(s).\n\n```bash\n$ /development_scripts.py -yd tests/cisco_ios/show_mac-address-table\ntests/cisco_ios/show_mac-address-table/cisco_ios_show_mac-address-table2.yml\ntests/cisco_ios/show_mac-address-table/cisco_ios_show_mac-address-table3.yml\ntests/cisco_ios/show_mac-address-table/cisco_ios_show_mac-address-table5.yml\ntests/cisco_ios/show_mac-address-table/cisco_ios_show_mac-address-table4.yml\ntests/cisco_ios/show_mac-address-table/cisco_ios_show_mac-address-table.yml\n$\n$ ls tests/arista_eos/show_version/\narista_eos_show_version.raw\n$\n$ ./development_scripts.py -c tests/arista_eos/show_version/arista_eos_show_version.txt\n$ ls tests/arista_eos/show_version/\narista_eos_show_version.raw   arista_eos_show_version.yml\n$\n```\n\n### Updating/Fixing Existing Templates\nWhen either fixing a bug within a template or adding additional **Values** to be captured, additional test files should be added to ensure backwards compatibility and that the new data is being parsed correctly.\n\nTo add additional raw/parsed tests for a command:\n- Navigate to `./tests/{{ vendor_os }}/{{ command_name }}/`\n- Create new `.raw` and `.yml` files within the directory, preferrably with a name identifying why the data is unique:\n  * Existing raw: `./tests/cisco_ios/show_version/cisco_ios_show_version.raw`\n  * New raw: `./tests/cisco_ios/show_version/cisco_ios_show_version_stack_platforms.raw`\n  * Existing parsed: `./tests/cisco_ios/show_version/cisco_ios_show_version.yml`\n  * New parsed: `./tests/cisco_ios/show_version/cisco_ios_show_version_stack_platforms.yml`\n\n#### Testing\nYou can test your changes locally within your Git branch before submitting a PR. If you do not have **tox** already installed, you can do that using pip or your systems package manager. Tox should be ran inside the **ntc-templates** root directory. The tox file is configured to run against python3.6, so either python3.6 needs to be available, or the tox.ini file will need to be updated with an available Python version.\n```bash\n$ tox\nGLOB sdist-make: /home/admin/ntc-templates/setup.py\npy36 inst-nodeps: /home/admin/ntc-templates/.tox/dist/ntc_templates-1.3.0.zip\npy36 installed: appdirs==1.4.3,atomicwrites==1.3.0,attrs==19.3.0,black==19.10b0,Click==7.0,future==0.18.2,importlib-metadata==0.23,more-itertools==7.2.0,ntc-templates==1.3.0,packaging==19.2,pathspec==0.6.0,pluggy==0.13.0,py==1.8.0,pyparsing==2.4.5,pytest==5.2.4,PyYAML==5.1.2,regex==2019.11.1,six==1.13.0,terminal==0.4.0,textfsm==1.1.0,toml==0.10.0,typed-ast==1.4.0,wcwidth==0.1.7,yamllint==1.18.0,zipp==0.6.0\npy36 runtests: PYTHONHASHSEED='3677750645'\npy36 runtests: commands[0] | black ./ --diff --check\nAll done! \u2728 \ud83c\udf70 \u2728\n8 files would be left unchanged.\npy36 runtests: commands[1] | yamllint tests/\npy36 runtests: commands[2] | pytest -vv\n================================================================ test session starts =================================================================\nplatform linux -- Python 3.6.8, pytest-5.2.4, py-1.8.0, pluggy-0.13.0 -- /home/jmcgill/repos/ntc-templates/.tox/py36/bin/python3.6\ncachedir: .pytest_cache\nrootdir: /home/jmcgill/repos/ntc-templates\ncollected 428 items                                                                                                                                  \n\ntests/test_index_order.py::test_index_ordering PASSED                                                                                          [  0%]\ntests/test_structured_data_against_parsed_reference_files.py::test_raw_data_against_mock[tests/alcatel_sros/oam_mac-ping/alcatel_sros_oam_mac-ping.raw] PASSED [  0%]\ntests/test_structured_data_against_parsed_reference_files.py::test_raw_data_against_mock[tests/alcatel_sros/show_service_id_base/alcatel_sros_show_service_id_base.raw] PASSED [  0%]\ntests/test_structured_data_against_parsed_reference_files.py::test_raw_data_against_mock[tests/alcatel_sros/show_router_bgp_routes_vpn-ipv4/alcatel_sros_show_router_bgp_routes_vpn-ipv4.raw] PASSED [  0%]\ntests/test_structured_data_against_parsed_reference_files.py::test_raw_data_against_mock[tests/brocade_fastiron/show_lldp_neighbors/brocade_fastiron_show_lldp_neighbors.raw] PASSED [  1%]\n...\ntests/test_structured_data_against_parsed_reference_files.py::test_raw_data_against_mock[tests/cisco_nxos/show_ip_interface_brief/cisco_nxos_show_ip_interface_brief.raw] PASSED [ 99%]\ntests/test_testcases_exists.py::test_verify_parsed_and_reference_data_exists PASSED                                                            [100%]\n\n================================================================ 428 passed in 43.84s ================================================================\n______________________________________________________________________ summary _______________________________________________________________________\n  py36: commands succeeded\n  congratulations :)\n$\n```\n\nQuestions\n---------\n\nFor any questions or comments, please feel free to swing by the [networktocode slack channel](https://networktocode.slack.com).\n\nSign up [here](http://slack.networktocode.com/)\n\n\n## [1.4.0]\n### Fixed\n- [#548] IOS show mac address-table: Account for Total Mac Addresses\n- [#565] IOS show license: Avoid trailing spaces for features\n- [#575] NXOS show version: Match N5K PLATFORM & LAST_REBOOT captures split words\n- [#574] ASA show failover: Account for new output (IPS)\n- [#577] IOS show mac address-table: Account for Multicast Entries\n- [#582] NXOS show interface transceiver: Remove requirement for TYPE\n- [#585] IOS show mac address-table: Fixed ordering for TYPE2\n- [#587] IOS show interfaces switchport: Account for Vepa Enabled and Operational Dot1q Ethertype\n- [#584] IOS show switch detail: Account for Mac persistency wait time\n- [#589] EOS show ip route: Filldown for DISTANCE and METRIC - Added new data formats for VRF and NEXT_HOP and INTERFACE\n- [#592] Fortinet get router info bgp summary: Account for more data, fix UP_DOWN regex from word to non-whitespace\n- [#603] IOS show ip access-list: Update PROTOCOL to capture numbered protocols\n- [610] Aruba os show arp: Fix tests to have the full output from the command and device\n- [#608] Vyatta VyOS show interfaces: Capture IP_ADDRESS with or without netmask\n- [#614] IOS show interfaces status: Remove reliance on whitespaces\n### Added\n- [#406] Testing: Add yamllint to test suite\n- [#407] Testing: Add python black to test suite\n- [#553] IOS show lldp neighbors: Added CAPABILITIES capture group\n- [#554] IOS show logging: New template\n- [#563] IOS show interfaces switchport: Added ADMIN_MDOE capture group\n- [#562] ASA show logging: New template\n- [#564] NXOS show interface transceiver: New template\n- [#567] XR show arp: New template\n- [#572] IOS show lldp neighbors detail: Added SERIAL capture group\n- [#573] ASA show arp: New template\n- [#578] Fortinet get system interface: New template\n- [#576] Huawei VRP display lldp neighbor: New template\n- [#581] Cisco WLC show vlan sum: New template\n- [#580] XR show interfaces summary: New template\n- [#590] IOS show ip bgp neighbors: New template\n- [#591] NXOS show vdc: New template\n- [#595] Checkpoint GAIA show arp dynamic all: New template\n- [#593] IOS show module: New template\n- [#597] Huwai VRP display version: New template\n- [#602] NXOS show vrf interface: New template\n- [#598] IOS show running-config partition access list: Added TCP_FLAG capture group\n- [#598] IOS show running-config partition access list: Convert COMMENT to list\n- [#598] IOS show running-config partition access list: Update PROTOCOL to include numbered protocols\n- [#596] XR admin show environment power: New template\n- [#594] Aruba os show arp: New template\n- [#605] SG300 show version: New template\n- [#604] NXOS show vlan: Added INTERFACES capture group, Require VLAN_ID\n- [#600] IOS show mpls interfaces: New template\n- [#599] IOS show etherchannel summary: New template\n- [#611] NXOS show interface: Added MODE capture group\n- [#612] NXOS show interfaces switchport: Added ACCESS_VLAN_NAME and NATIVE_VLAN_NAME capture groups\n- [#609] HP Comware display ip interface: New template\n- [#606] IOS show ip ospf database router: New template\n### Changed\n- [#406] Helpers: Added development_helpers cli utility to replace existing helpers\n### Deprecated\n### Removed\n\n## [1.3.0]\n### Fixed\n- [#401] ASA show route: Fix `UPTIME` to account for additional output formats\n- [#445] IOS show ip eigrp topology: Fix `FD` to allow value to be \"Inaccessible\"\n- [#465] ASA show failover: Add line to match FirePOWER module\n- [#466] PAN show arp: Fix `MAC` capture group to account for entries that are \"incomplete\"\n- [#471] Procurve show arp: Fix `IP` capture group to account for IP Adresses that are \"Incomplete\"\n- [#471] Procurve show arp: Fix `PORT` capture group to account for interfaces that contain more than just digits\n- [#474] IOS show ip mroute: Fix `Value UP_TIME`, `EXPIRATION_TIME`, `OUTGOING_MULTICAST_UP_TIME (\\S+)`, and `OUTGOING_MULTICAST_EXPIRATION_TIME` to account for additional time formats\n- [#479] NXOS show interface brief: Fix capturing `MODE` values of \"pvlan\" and \"fabric\"\n- [#480] IOS show cdp neighbors: Allow for table data to have leading spaces but not require it\n- [#485] IOS show mac-address-table: Allow for table data to have leading spaces but not require it (VLAN IDs are left adjusted so VLANs from 1000 on do not have a leading space)\n- [#487] IOS show authentication sessions: Add match for lines separating output with a \"-\" in order to avoid capturing them as part of normal table data\n- [#488] EOS show interfaces status: Fix `NAME` and `STATUS` capture groups to support disabled interfaces\n- [#494] IOS show ip interface: Add matches for additional output lines\n- [#495] IOS show ip interface: Add matches for additional output lines\n- [#497] ASA show version: Fix `MAX_INTF` capture group to account for `Unlimited`\n- [#497] ASA show version: Fix `HARDWARE` capture group to account for trailing commas\n- [#499] ASA show inventory: Add matches for additional output lines\n- [#503] IOS show standby: Fix output that spread across two lines\n- [#505] NXOS show ip bgp neighbors: Fix matching entries accurately when neighbors are in a \"down\" state; move to `Continue.Record` to record on new entries instead of \"last expected line\" of output data\n- [#516] IOS show ip interface: Add matches for additional output lines\n- [#517] EOS show ip bgp summary: Fix capturing entries with more explicit match line\n- [#519] XR show version - Fix `VERSION`, `UPTIME`, and `HARDWARE` to account for CRS syntax\n- [#525] IOS: Added matches for vty timestamp lines\n- [#532] IOS show snmp user: Fix capture groups to support all non-whitespace characters (e.g. \"-\" in string values)\n- [#538] IOS show interfaces switchport: Added matches for additional output lines\n### Added\n- [#378] XR show ip route: Added `VRF` capture group\n- [#391] WLC show client detail: Added new template\n- [#419] ASA dir: Added `TOTAL_PERCENT_FREE` capture group for capturing percentage of bytes free\n- [#425] WLC show exclusionlist: Added new template\n- [#445] IOS show ip eigrp topology: Added `SOURCE` capture group\n- [#446] ASA show asp drop: Added `FLOW_DROP_IPSEC_SELECTOR_FAILURE`, `FLOW_LAST_CLEARED`, `MP_SVC_BAD_LENGTH`, and `SSL_FIRST_RECORD_INVALID` capture groups\n- [#464] Comware display counters bound interface: Added new template\n- [#468] Firebox show arp: Added new template\n- [#476] IOS show ip bgp summary: Added `UP_DOWN` capture group\n- [#478] NXOS show ip interface brief: Added new template\n- [#481] NXOS show ip bgp neighbor: Added `INBOUND_ROUTEMAP` and `OUTBOUND_ROUTEMAP` capture groups\n- [#482] XR admin show inventory: Added new template\n- [#486] NXOS show route-map: Added new template\n- [#489] NXOS show forwarding ipv4 route: Added new template\n- [#491] IOS show switch detail: Added new template\n- [#492] XR show ipv6 neighbors: Added new template\n- [#493] Fastiron show arp: Added new template\n- [#496] EOS show ip helper-address: Added new template\n- [#501] WLC show 802.11a|b: Added new template\n- [#510] WLC show 802.11 cleanair config: Added new template\n- [#512] VRP display interface brief: Added new template\n- [#512] VRP display temperature: Added new template\n- [#513] WLC show rf profile-summary: Added new template\n- [#514] IOS show process memory sorted: Added new template\n- [#515] WLC show inventory: Added new template\n- [#518] Ciena software show: Added new template\n- [#521] IOS show ip route: Added `VRF` capture group\n- [#524] EOS show vrf: Added new template\n- [#526] WLC show advanced 802.11 channel: Added new template\n- [#527] IOS show interfaces switchport: Added `VOICE_VLAN` capture group\n- [#527] NXOS show interfaces switchport: Added `VOICE_VLAN` capture group\n- [#529] Fortios get router info bgp summary: Added new template\n- [#531] NXOS show interface: Added `LAST_LINK_FLAPPED` capture group\n- [#533] IOS show license: Added new template\n- [#539] WLC show interface summary: Added new template\n- [#540] IOS show environment temperature: Added new template\n### Changed\n- [#378] XR show ip route: Update index to allow syntax of \"show ip route\" or \"show route\"\n- [#497] ASA show version: Change `SERIAL` to be a list for clusters\n- [#503] IOS show standby: Update index to allow syntax including specifying an interface\n- [#520] IOS show ip bgp summary: Update template and index to support VRF syntax\n- [#520] EOS show ip bgp summary: Update template and index to support VRF syntax\n- [#521] IOS show ip route: Add `Error` for unmatched lines to ensure accurate data collection\n- [#522] EOS show bgp summary: Update index to allow syntax of \"show bgp evpn summary\"\n- [#523] IOS show mac-address-table: Add `Error` for unmatched lines to ensure accurate data collection\n- [#528] IOS show interfaces switchport: Update template to use `Continue.Record` syntax to record on new entries instead of \"last expected line\" of output data\n- [#528] NXOS show interfaces switchport: Update template to use `Continue.Record` syntax to record on new entries instead of \"last expected line\" of output data\n### Deprecated\n### Removed\n\n## [1.2.1]\n### Fixed\n- Bumped `__version__` in `__init__` file\n### Added\n### Changed\n### Deprecated\n### Removed\n\n## [1.2.0]\n### Fixed\n- [#389] IOS-XR show interfaces: Fixed matching speed and duplex for bundle-ethernet interfaces\n- [#442] IOS-XR show version: Fixed matching `build_host` field that uses both \"Build\" and \"Built\" keywords\n- [#455][#456] Template files were inaccessable when installing from local directory; now works when using `pip -e`\n### Added\n- [#470] ASA show version: Add capturing `compiled_date` field\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/networktocode/ntc-templates", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ntc-templates", "package_url": "https://pypi.org/project/ntc-templates/", "platform": "", "project_url": "https://pypi.org/project/ntc-templates/", "project_urls": {"Homepage": "https://github.com/networktocode/ntc-templates"}, "release_url": "https://pypi.org/project/ntc-templates/1.4.0/", "requires_dist": ["textfsm", "terminal", "pytest ; extra == 'dev'", "PyYAML ; extra == 'dev'", "black ; extra == 'dev'", "yamllint ; extra == 'dev'", "ruamel.yaml ; extra == 'dev'"], "requires_python": "", "summary": "Package to return structured data from the output of network devices.", "version": "1.4.0"}, "last_serial": 6774748, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4e560111bde8d19e5dcf59f04ceaa222", "sha256": "b9a5a8f843e85ec4078271b3320e3a397529f3044b5d49030830041821fa586f"}, "downloads": -1, "filename": "ntc_templates-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4e560111bde8d19e5dcf59f04ceaa222", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 110500, "upload_time": "2018-07-05T12:53:25", "upload_time_iso_8601": "2018-07-05T12:53:25.129307Z", "url": "https://files.pythonhosted.org/packages/2d/8b/763724f71832002b4f9800515501c2bf3384dec8f283bf7d1fd987245e83/ntc_templates-1.0.0.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d8045996811ef720cb20afd358c804d7", "sha256": "3b1648121047e2c6fd861427cc1c9acd8c18a912d5a19f2bd54037930a958e1d"}, "downloads": -1, "filename": "ntc_templates-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d8045996811ef720cb20afd358c804d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 172157, "upload_time": "2019-04-24T20:58:27", "upload_time_iso_8601": "2019-04-24T20:58:27.462778Z", "url": "https://files.pythonhosted.org/packages/18/6a/c2bd05ab032319063034f337bc2e7b457beaa5896a6a7aac927f3fc34f53/ntc_templates-1.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0733712c83432ff05da63629e2c71488", "sha256": "40bcc2f922baefcdebff37908b090971e120d685788470d2d62b4dc2fef3c7f4"}, "downloads": -1, "filename": "ntc_templates-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0733712c83432ff05da63629e2c71488", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88828, "upload_time": "2019-04-24T20:58:29", "upload_time_iso_8601": "2019-04-24T20:58:29.754941Z", "url": "https://files.pythonhosted.org/packages/a8/fe/8dc71398b1b47fbe94e689f9d8d1fc35e80984e5041ed837d134b69d50a9/ntc_templates-1.1.0.tar.gz"}], "1.2.1": [{"comment_text": "", "digests": {"md5": "a97dc210b28139add8c35d289d41ad3d", "sha256": "17ecc972803667ddb856bd141e3a9ca22507a758757b8a79ec53483c24d66fc0"}, "downloads": -1, "filename": "ntc_templates-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a97dc210b28139add8c35d289d41ad3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 179277, "upload_time": "2019-09-26T01:35:57", "upload_time_iso_8601": "2019-09-26T01:35:57.847128Z", "url": "https://files.pythonhosted.org/packages/7f/a9/13e5998fb651027567b904ee1be11a304a76fa6fd9a42f9cb4003e45ccd4/ntc_templates-1.2.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4574e39eb1cac44a8627ef645916e51b", "sha256": "e8afcddde4bc08f0ba8ab6f964be097c848bc2162467490f502e80827dd4bf4d"}, "downloads": -1, "filename": "ntc_templates-1.2.1.tar.gz", "has_sig": false, "md5_digest": "4574e39eb1cac44a8627ef645916e51b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98527, "upload_time": "2019-09-26T01:36:00", "upload_time_iso_8601": "2019-09-26T01:36:00.762779Z", "url": "https://files.pythonhosted.org/packages/a4/9c/7103d3d22d9d874eef578bdd32e942e0c820d9d7f533352ac14a9aa20f93/ntc_templates-1.2.1.tar.gz"}], "1.3.0": [{"comment_text": "", "digests": {"md5": "4bf0092513b538995fb577a0bbb4e136", "sha256": "3ccefa7c9fe9e55fad584c3290498a09098d4f7ac1fd85df5774cadd899800db"}, "downloads": -1, "filename": "ntc_templates-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4bf0092513b538995fb577a0bbb4e136", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 204105, "upload_time": "2019-11-18T03:31:59", "upload_time_iso_8601": "2019-11-18T03:31:59.944532Z", "url": "https://files.pythonhosted.org/packages/23/07/4b86d81ecee5711ceab9d9317bda06d4a94712a0de7dce92245005a21879/ntc_templates-1.3.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7e1a7cd67b3bbc77e70482bc4a2a50ea", "sha256": "dccd0cbe52b28bde2d9b29c236508f723a69a2fc4c13c3f0ba6c8a3cf50ea195"}, "downloads": -1, "filename": "ntc_templates-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7e1a7cd67b3bbc77e70482bc4a2a50ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114536, "upload_time": "2019-11-18T03:32:02", "upload_time_iso_8601": "2019-11-18T03:32:02.783617Z", "url": "https://files.pythonhosted.org/packages/48/a8/0d75c07fc4ba9bd8e9790c37a44c3e8042ddfc54e2e869bc9f03f2c41fd9/ntc_templates-1.3.0.tar.gz"}], "1.4.0": [{"comment_text": "", "digests": {"md5": "6469268e39528e08a333d7db1d75c401", "sha256": "f6308c51b35d3559736611659100577ef08a468b08ae4c136364225f27afd67a"}, "downloads": -1, "filename": "ntc_templates-1.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "6469268e39528e08a333d7db1d75c401", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 221891, "upload_time": "2020-03-09T04:14:20", "upload_time_iso_8601": "2020-03-09T04:14:20.848173Z", "url": "https://files.pythonhosted.org/packages/0b/4e/ff0d05e30961de94bf2b17d8fe72a16dca1dd23ebe5a1ed590f228527e19/ntc_templates-1.4.0-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "96f97a7375f33e9f86d82fcf3bad4bcf", "sha256": "cf92cd17940f9e775c30614702f345e6fa488833041d6c85971077a9edf9343e"}, "downloads": -1, "filename": "ntc_templates-1.4.0.tar.gz", "has_sig": false, "md5_digest": "96f97a7375f33e9f86d82fcf3bad4bcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 636620, "upload_time": "2020-03-09T04:14:23", "upload_time_iso_8601": "2020-03-09T04:14:23.885864Z", "url": "https://files.pythonhosted.org/packages/ee/cc/869f8bd85e63972f3873d82372a59f3408633f0634362af27e0a3aec3444/ntc_templates-1.4.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "6469268e39528e08a333d7db1d75c401", "sha256": "f6308c51b35d3559736611659100577ef08a468b08ae4c136364225f27afd67a"}, "downloads": -1, "filename": "ntc_templates-1.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "6469268e39528e08a333d7db1d75c401", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 221891, "upload_time": "2020-03-09T04:14:20", "upload_time_iso_8601": "2020-03-09T04:14:20.848173Z", "url": "https://files.pythonhosted.org/packages/0b/4e/ff0d05e30961de94bf2b17d8fe72a16dca1dd23ebe5a1ed590f228527e19/ntc_templates-1.4.0-py2-none-any.whl"}, {"comment_text": "", "digests": {"md5": "96f97a7375f33e9f86d82fcf3bad4bcf", "sha256": "cf92cd17940f9e775c30614702f345e6fa488833041d6c85971077a9edf9343e"}, "downloads": -1, "filename": "ntc_templates-1.4.0.tar.gz", "has_sig": false, "md5_digest": "96f97a7375f33e9f86d82fcf3bad4bcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 636620, "upload_time": "2020-03-09T04:14:23", "upload_time_iso_8601": "2020-03-09T04:14:23.885864Z", "url": "https://files.pythonhosted.org/packages/ee/cc/869f8bd85e63972f3873d82372a59f3408633f0634362af27e0a3aec3444/ntc_templates-1.4.0.tar.gz"}]}