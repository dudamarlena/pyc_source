{"info": {"author": "NinjaSnail1080", "author_email": "innuganti.ashwin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "===========\nakinator.py\n===========\n\n**An API wrapper for the online game, Akinator, written in Python**\n\n.. image:: https://img.shields.io/badge/pypi-v2.1.0-blue.svg\n    :target: https://pypi.python.org/pypi/akinator.py/\n\n.. image:: https://img.shields.io/badge/python-%E2%89%A53.5.3-yellow.svg\n    :target: https://www.python.org/downloads/\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nCopyright \u00a9 2019 NinjaSnail1080\n\nLicensed under the MIT License (see ``LICENSE.txt`` for details).\n\n`Akinator.com <https://www.akinator.com>`_ is an online game where you think of a character, real or fiction, and by asking you questions the site will try to guess who you're thinking of. This library allows for easy access to the Akinator API and makes writing programs that use it much simpler.\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n**********\nInstalling\n**********\n\nTo install the regular library without async support, just run the following command::\n\n  python3 -m pip install -U akinator.py\n\nOtherwise, to get asynchronous support, do::\n\n  python3 -m pip install -U akinator.py[async]\n\nTo get async support plus faster performance (via the ``aiodns`` and ``cchardet`` libraries), do::\n\n  python3 -m pip install -U akinator.py[fast_async]\n\nRequirements\n============\n\n- Python \u22653.5.3\n\n- ``requests``\n\n- ``aiohttp`` (Optional, for async)\n\n- ``aiodns`` and ``cchardet`` (Optional, for faster performance with async)\n\nUsually ``pip`` will handle these for you.\n\n**************\nQuick Examples\n**************\n\nHere's a quick little example of the library being used to make a simple, text-based Akinator game:\n\n.. code-block:: python\n\n  import akinator\n\n  aki = akinator.Akinator()\n\n  try:\n      q = aki.start_game()\n  except (akinator.AkiServerDown, akinator.AkiTechnicalError):\n      try:\n          q = aki.start_game(\"en2\")\n      except (akinator.AkiServerDown, akinator.AkiTechnicalError):\n          q = aki.start_game(\"en3\")\n\n  while aki.progression <= 80:\n      a = input(q + \"\\n\\t\")\n      if a == \"b\":\n          try:\n              q = aki.back()\n          except akinator.CantGoBackAnyFurther:\n              pass\n      else:\n          q = aki.answer(a)\n  aki.win()\n\n  correct = input(f\"It's {aki.name} ({aki.description})! Was I correct?\\n{aki.picture}\\n\\t\")\n  if correct.lower() == \"yes\" or correct.lower() == \"y\":\n      print(\"Yay\\n\")\n  else:\n      print(\"Oof\\n\")\n\nHere's the same game as above, but using the async version of the library instead:\n\n.. code-block:: python\n\n  from akinator.async_aki import Akinator\n  import akinator\n  import asyncio\n\n  aki = Akinator()\n\n  async def main():\n      try:\n          q = await aki.start_game()\n      except (akinator.AkiServerDown, akinator.AkiTechnicalError):\n          try:\n              q = await aki.start_game(\"en2\")\n          except (akinator.AkiServerDown, akinator.AkiTechnicalError):\n              q = await aki.start_game(\"en3\")\n\n      while aki.progression <= 80:\n          a = input(q + \"\\n\\t\")\n          if a == \"b\":\n              try:\n                  q = await aki.back()\n              except akinator.CantGoBackAnyFurther:\n                  pass\n          else:\n              q = await aki.answer(a)\n      await aki.win()\n\n      correct = input(f\"It's {aki.name} ({aki.description})! Was I correct?\\n{aki.picture}\\n\\t\")\n      if correct.lower() == \"yes\" or correct.lower() == \"y\":\n          print(\"Yay\\n\")\n      else:\n          print(\"Oof\\n\")\n\n  loop = asyncio.get_event_loop()\n  loop.run_until_complete(main())\n  loop.close()\n\n*************\nDocumentation\n*************\n\nBecause this library is relatively simple and only has a few functions to keep track of, all the documentation is going to go here in the README, instead of on a separate site like `readthedocs.io <https://readthedocs.org/>`_ or something.\n\nThe async version of this library works almost exactly the same as the regular, non-async one. Both have the same classes, names of functions, etc. Any differences will be noted.\n\n**Version Information**::\n\n  >>> import akinator\n  >>> akinator.__version__\n\nAlternatively, you can view the ``VERSION.txt`` file\n\n*class* Akinator()\n==================\n\nA class that represents an Akinator game.\n\nThe first thing you want to do after creating an instance of this class is to call ``Akinator.start_game()``.\n\nTo get the **regular** Akinator class, make sure you've put ``import akinator`` at the top of your code. From there you can easily access the class via ``akinator.Akinator()``.\n\nTo get the **async** version of the class, make sure you have ``import akinator.async_aki`` or ``from akinator.async_aki import Akinator`` in your code and you'll be able to get the async Akinator class just as easily (Refer to the code examples above).\n\nFunctions\n=========\n\n**Note**: In the async version, all the below functions are coroutines and must be awaited\n\nstart_game(*language=None*)\n  Start an Akinator game. Run this function first before the others. Returns a string containing the first question\n\n  The ``language`` parameter can be left as None for English, the default language, or it can be set to one of the following (case-insensitive):\n\n  - ``en``: English (default)\n  - ``en2``: Second English server. Use if the main one is down\n  - ``en3``: Third English server. Use if the other two are down\n  - ``en_animals``: English server for guessing animals. Here, Akinator will attempt to guess the animal you're thinking instead of a character\n  - ``en_objects``: English server for guessing objects. Here, Akinator will attempt to guess the object you're thinking instead of a character\n  - ``ar``: Arabic\n  - ``cn``: Chinese\n  - ``de``: German\n  - ``de_animals``: German server for guessing animals\n  - ``es``: Spanish\n  - ``es2``: Second Spanish server. Use if the main one is down\n  - ``es_animals``: Spanish server for guessing animals\n  - ``fr``: French\n  - ``fr2``: Second French server. Use if the main one is down\n  - ``fr_animals``: French server for guessing animals\n  - ``fr_objects``: French server for guessing objects\n  - ``il``: Hebrew\n  - ``it``: Italian\n  - ``it_animals``: Italian server for guessing animals\n  - ``jp``: Japanese\n  - ``jp_animals``: Japanese server for guessing animals\n  - ``kr``: Korean\n  - ``nl``: Dutch\n  - ``pl``: Polish\n  - ``pt``: Portuguese\n  - ``ru``: Russian\n  - ``tr``: Turkish\n\n  You can also put the name of the language spelled out, like ``spanish``, ``korean``, ``french_animals``, etc.\n\n  If you put something else entirely, then then the ``InvalidLanguageError`` exception will be raised\n\nanswer(*ans*)\n  Answer the current question, which you can find with ``Akinator.question``. Returns a string containing the next question\n\n  The ``ans`` parameter must be one of these (case-insensitive):\n\n  - ``yes`` or ``y`` or ``0`` for YES\n  - ``no`` or ``n`` or ``1`` for NO\n  - ``i`` or ``idk`` or ``i dont know`` or ``i don't know`` or ``2`` for I DON'T KNOW\n  - ``probably`` or ``p`` or ``3`` for PROBABLY\n  - ``probably not`` or ``pn`` or ``4`` for PROBABLY NOT\n\n  If it's something else, then the ``InvalidAnswerError`` exception will be raised\n\nback()\n  Goes back to the previous question. Returns a string containing that question\n\n  If you're on the first question and you try to go back, the ``CantGoBackAnyFurther`` exception will be raised\n\nwin()\n  Get Aki's first guess for who the character you're thinking of is based on your answers to the questions so far.\n\n  This function defines 3 new class variables:\n\n  - ``name``: The name of the character Aki guessed\n  - ``description``: A short description of that character\n  - ``picture``: A direct link to an image of the character\n\n  This function will also return a dictionary containing the above values plus some additional ones. Here's an example of what the dict looks like:\n\n  .. code-block:: javascript\n\n    {'absolute_picture_path': 'https://photos.clarinea.fr/BL_15_en/600/partenaire/y/2367495__1053312468.jpg',\n     'corrupt': '0',\n     'description': 'Entrepreneur',\n     'flag_photo': 0,\n     'id': '52848',\n     'id_base': '2367495',\n     'name': 'Elon Musk',\n     'picture_path': 'partenaire/y/2367495__1053312468.jpg',\n     'proba': '0.804791',\n     'pseudo': 'X',\n     'ranking': '605',\n     'relative': '0',\n     'valide_contrainte': '1'}\n\n  It's recommended that you call this function when Aki's progression is above 80%. You can get his current progression via ``Akinator.progression``\n\nVariables\n=========\n\nThese variables contain important information about the Akinator game. Please don't change any of these values in your program. It'll definitely break things.\n\nserver\n  The server this Akinator game is using. Depends on what you put for the language param in ``Akinator.start_game()`` (e.g., ``\"srv2.akinator.com:9162\"``, ``\"srv6.akinator.com:9127\"``, etc.)\n\nsession\n  A number, usually in between 0 and 100, that represents the game's session\n\nsignature\n  A usually 9 or 10 digit number that represents the game's signature\n\nuid\n  The game's UID (unique identifier) for authentication purposes\n\nfrontaddr\n  An IP address encoded in Base64; also for authentication purposes\n\ntimestamp\n  A POSIX timestamp for when ``Akinator.start_game()`` was called\n\nquestion\n  The current question that Akinator is asking the user. Examples of questions asked by Aki include: ``Is your character's gender female?``, ``Is your character more than 40 years old?``, ``Does your character create music?``, ``Is your character real?``, ``Is your character from a TV series?``, etc.\n\nprogression\n  A floating point number that represents a percentage showing how close Aki thinks he is to guessing your character. I recommend keeping track of this value and calling ``Akinator.win()`` when it's above 80 or 90. In most cases, this is about when Aki will have it narrowed down to one choice, which will hopefully be the correct one.\n\nstep\n  An integer that tells you what question Akinator is on. This will be 0 on the first question, 1 on the second question, 2 on the third, 3 on the fourth, etc.\n\nThe first 6 variables\u2014``server``, ``session``, ``signature``, ``uid``, ``frontaddr``, and ``timestamp``\u2014will remain unchanged, but the last 3\u2014``question``, ``progression``, and ``step``\u2014will change as you go on.\n\n**Note**: There are 3 more variables that will be defined when the function ``Akinator.win()`` is called for the first time. These variables are documented above, underneath that function in the **Functions** section\n\nExceptions\n==========\n\nExceptions that are thrown by the library\n\nInvalidAnswerError\n  Raised when the user inputs an invalid answer into ``Akinator.answer(ans)``. Subclassed from ``ValueError``\n\nInvalidLanguageError\n  Raised when the user inputs an invalid language into ``Akinator.start_game(language=None)``. Subclassed from ``ValueError``\n\nAkiConnectionFailure\n  Raised if the Akinator API fails to connect for some reason. Base class for ``AkiTimedOut``, ``AkiNoQuestions``, ``AkiServerDown``, and ``AkiTechnicalError``\n\nAkiTimedOut\n  Raised if the Akinator session times out. Derived from ``AkiConnectionFailure``\n\nAkiNoQuestions\n  Raised if the Akinator API runs out of questions to ask. This will happen if ``Akinator.step`` is at 79 and the ``answer`` function is called again. Derived from ``AkiConnectionFailure``\n\nAkiServerDown\n  Raised if Akinator's servers are down for the region you're running on. If this happens, try again later or use a different language. Derived from ``AkiConnectionFailure``\n\nAkiTechnicalError\n  Raised if Aki's servers had a technical error. If this happens, try again later or use a different language. Derived from ``AkiConnectionFailure``\n\nCantGoBackAnyFurther:\n  Raised when the user is on the first question and tries to go back further by calling ``Akinator.back()``\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. image:: https://img.shields.io/badge/Enjoy%20this%20library%3F-Say%20Thanks!-brightgreen.svg\n    :target: https://saythanks.io/to/NinjaSnail1080\n\n.. image:: https://img.shields.io/badge/Having%20problems%3F-Issues%20Tracker-blueviolet.svg\n    :target: https://github.com/NinjaSnail1080/akinator.py/issues\n\n.. image:: https://img.shields.io/badge/License-MIT-red.svg\n    :target: https://opensource.org/licenses/MIT\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NinjaSnail1080/akinator.py", "keywords": "akinator api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "akinator.py", "package_url": "https://pypi.org/project/akinator.py/", "platform": "", "project_url": "https://pypi.org/project/akinator.py/", "project_urls": {"Documentation": "https://github.com/NinjaSnail1080/akinator.py/blob/master/README.rst", "Homepage": "https://github.com/NinjaSnail1080/akinator.py", "Say Thanks!": "https://saythanks.io/to/NinjaSnail1080", "Source": "https://github.com/NinjaSnail1080/akinator.py", "Tracker": "https://github.com/NinjaSnail1080/akinator.py/issues"}, "release_url": "https://pypi.org/project/akinator.py/2.1.0/", "requires_dist": ["requests", "aiohttp ; extra == 'async'", "aiohttp ; extra == 'fast_async'", "cchardet ; extra == 'fast_async'", "aiodns ; extra == 'fast_async'"], "requires_python": ">=3.5.3", "summary": "An API wrapper for the online game, Akinator, written in Python", "version": "2.1.0"}, "last_serial": 6612456, "releases": {"2.1.0": [{"comment_text": "", "digests": {"md5": "bb13355d3e5709897ea1b387ebef1c48", "sha256": "e0d8a0f4a368a08772d5c7729ec28897bfaf1955e4339d7254d1029117a04aa1"}, "downloads": -1, "filename": "akinator.py-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb13355d3e5709897ea1b387ebef1c48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 17906, "upload_time": "2020-02-11T22:13:41", "upload_time_iso_8601": "2020-02-11T22:13:41.852279Z", "url": "https://files.pythonhosted.org/packages/c6/35/bd4a62e94e94b6784ee62d96ae1f109205ae794762d1d877261da7d1f699/akinator.py-2.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "16e75a1e7098d1a42da6d73c7c24ed09", "sha256": "a594d51aa2b89438794180b28c4e5b97a31c04161d565b12d6f5cc7c4a4a4c27"}, "downloads": -1, "filename": "akinator.py-2.1.0.tar.gz", "has_sig": false, "md5_digest": "16e75a1e7098d1a42da6d73c7c24ed09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 15255, "upload_time": "2020-02-11T22:13:44", "upload_time_iso_8601": "2020-02-11T22:13:44.056004Z", "url": "https://files.pythonhosted.org/packages/21/60/410b9ad93e0ee69eb59bd877443fdb7e282e518b1c51982d51ec1bc9e62a/akinator.py-2.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb13355d3e5709897ea1b387ebef1c48", "sha256": "e0d8a0f4a368a08772d5c7729ec28897bfaf1955e4339d7254d1029117a04aa1"}, "downloads": -1, "filename": "akinator.py-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb13355d3e5709897ea1b387ebef1c48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 17906, "upload_time": "2020-02-11T22:13:41", "upload_time_iso_8601": "2020-02-11T22:13:41.852279Z", "url": "https://files.pythonhosted.org/packages/c6/35/bd4a62e94e94b6784ee62d96ae1f109205ae794762d1d877261da7d1f699/akinator.py-2.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "16e75a1e7098d1a42da6d73c7c24ed09", "sha256": "a594d51aa2b89438794180b28c4e5b97a31c04161d565b12d6f5cc7c4a4a4c27"}, "downloads": -1, "filename": "akinator.py-2.1.0.tar.gz", "has_sig": false, "md5_digest": "16e75a1e7098d1a42da6d73c7c24ed09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 15255, "upload_time": "2020-02-11T22:13:44", "upload_time_iso_8601": "2020-02-11T22:13:44.056004Z", "url": "https://files.pythonhosted.org/packages/21/60/410b9ad93e0ee69eb59bd877443fdb7e282e518b1c51982d51ec1bc9e62a/akinator.py-2.1.0.tar.gz"}]}