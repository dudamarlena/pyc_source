{"info": {"author": "MylesMor", "author_email": "hello@mylesmor.dev", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![PyPI version](https://badge.fury.io/py/nanoleafapi.svg)](https://badge.fury.io/py/nanoleafapi)\n\n# nanoleafapi\n__nanoleafapi__ is a Python 3 wrapper for the Nanoleaf OpenAPI. It provides an easy way to use many of the functions available in the API. It supports both the Light Panels (previously Aurora) and Canvas.\n\n__Nanoleaf API__: https://forum.nanoleaf.me/docs/openapi\n\n__Detailed package documentation__: https://mylesmor.dev/modules/nanoleafapi.html\n\n## Updates\n\n__Current version__: `1.1.0`\n\n__31/12/19__: As of package version `1.0.2`, the issue regarding not installing the correct dependencies has been fixed. Please upgrade your version with `pip install nanoleafapi --upgrade`.\n\n__01/01/20__: As of package version `1.0.3`, there is now a connection check to determine whether the given IP is a valid Nanoleaf device. An exception will be raised if it is not found.\n\n__05/01/20__: As of package version `1.0.5`, the bug described in issue #1 by [vadichi](https://github.com/vadichi) relating to the function `set_effect()` has been resolved.\n\n__13/01/20__: As of package version `1.1.0`, added a discovery module to identify Nanoleaf devices on your network and a test class.\n\n# Table of Contents\n1. [Installation](#Installation)\n2. [Prerequisites](#Prerequisites)\n3. [Usage](#Usage)\n   * [Methods](#Methods)\n   * [Effects](#Effects)\n   * [Events](#Events)\n\n## Installation\nTo install the latest stable release:\n\n`pip install nanoleafapi`\n\n## Prerequisites\n\nYou must know the IP address of the Nanoleaf device. This can be either be done using your own methods or by using the disovery module. This module uses SSDP and should work __but__ I have found cases of this method not functioning properly. If it doesn't work, and gives an empty dictionary please identify the IP of the Nanoleaf device yourself.\n\nTo use this module:\n\n```\nfrom nanoleafapi import discovery\n\nnanoleaf_dict = discover_devices()\n```\n\nThis will return a dictionary in the format: `{name: ip}`.\n\n\n## Usage\n\nThere is just one class that contains all relevant functions for controlling the lights. To get started:\n\n`from nanoleafapi import Nanoleaf`\n\nNext, a Nanoleaf object can be created with:\n\n`nl = Nanoleaf(ip)`\n\nNext, if you don't have an authentication token, hold the power button on the lights for 5-7 seconds and then run:\n\n`nl.generate_auth_token()`\n\n__IMPORTANT__: Once this has been run, it will print your authentication token to the console. Please save this and in future runs of your program, initialise the Nanoleaf object with the authentication token:\n\n`auth_token = XXXXXXXXXXXXXXXX`\n\n`nl = nanoleaf(ip, auth_token)`\n\n## Methods\n\nAll of the following methods can be called with the Nanoleaf object you created.\n\nFor more information about the Nanoleaf API: https://forum.nanoleaf.me/docs/openapi\n\nFor more in-depth documentation about this package visit: https://mylesmor.dev/modules/nanoleafapi.html\n\n#### User Management\n```\ngenerate_auth_token()     # Generates new authentication token (hold power for 5-7 before running)\ndelete_user(auth_token)   # Deletes an authentication token from the device\n```\n\n#### Power\n```\nget_power()               # Returns True if lights are on, otherwise False\npower_off()               # Powers off the lights\npower_on()                # Powers on the lights\ntoggle_power()            # Toggles light on/off\n```\n\n#### Colour\nColours are generated using HSV (or HSB) in the API, and these individual values can be adjusted using methods which are as described, [hue](#Hue), [saturation](#Saturation), [brightness/value](#Brightness). The method in this section uses RGB (0-255) and converts this to HSV.\n\nThere are already some pre-set colours which can be imported to be used with the ``set_color()`` method:\n\n```\nfrom nanoleafapi import RED, ORANGE, YELLOW, GREEN, LIGHT_BLUE, BLUE, PINK, PURPLE, WHITE\n```\n\nThe `set_color()` method can then be called, passing in either a pre-set colour or your own RGB colour in the form of a tuple: `(r, g, b)`.\n\n```\nset_color((r, g, b))      # Set all lights to RGB colour. Pass the colour as a tuple.\nset_color(RED)            # Same result but using a pre-set colour.\n```\n\n#### Brightness\n```\nset_brightness(brightness, duration)     # Sets the brightness of the lights (accepts values between 0-100)\nincrement_brightness(value)              # Increments the brightness by set amount (can also be negative)\nget_brightness()                         # Returns current brightness\n```\n\n#### Hue\nUse these if you want to change the HSV values manually, otherwise use `set_color()` for colour change using RGB.\n```\nset_hue(value)            # Sets the hue of the lights (accepts values between 0-360)\nincrement_hue(value)      # Increments the hue by set amount (can also be negative)\nget_hue()                 # Returns current hue\n```\n\n#### Saturation\nUse these if you want to change the HSV values manually, otherwise use `set_color()` for colour change using RGB.\n\n```\nset_saturation(value)            # Sets the saturation of the lights (accepts value between 0-100)\nincrement_saturation(value)      # Increments the saturation by set amount (can also be negative)\nget_saturation()                 # Returns current saturation\n```\n\n#### Identify\nThis is usually used to identify the current lights by flashing them on and off.\n```\nidentify()\n```\n\n#### Colour Temperature\n```\nset_color_temp(value)            # Sets the colour temperature of the lights (accepts between 1200-6500)\nincrement_color_temp(value)      # Increments the colour temperature by set amount (can also be negative)\nget_color_temp()                 # Returns current colour temperature\n```\n\n#### Colour Mode\nNot really sure what this is for, but included it anyway.\n```\nget_color_mode()      # Returns current colour mode\n```\n\n### Effects\n```\nget_current_effect()    # Returns either name of current effect if available or *Solid*/*Static*/*Dynamic*.\nlist_effects()          # Returns a list of names of all available effects.\neffect_exists(name)     # Helper method which determines whether the given string exists as an effect.\nset_effect(name)        # Sets the current effect.\n```\n\n### Events\nCreates an event listener for the different types of events.\n\n```\nregister_event(function, event_types)\n```\nYou should pass your own function with one argument (event as a dictionary). This function will run every time a new event is received.\n\n__IMPORTANT__: You cannot currently call ```register_event()``` more than __once__ due to API limitations. Instead, distinguish between the events in your function using the dictionary data.\n\nA list of event types you would like to listen for should also be passed. You can register up to 4 events (all of them), and these are listed below:\n\nEvent IDs:\n```\nState (changes in power/brightness): 1\nLayout: 2\nEffects: 3\nTouch (canvas only): 4\n```\n\n#### Example Usage\n\n```\ndef event_function(event):\n    print(event)\n\n# Register for all events\nnl.register_event(event_function, [1, 2, 3, 4])\n```\n\n#### Example Output\n\nWhen an event occurs, the `event_function()` will run and therefore in this case, print the event dictionary.\n\n```\n{\"events\":[{\"attr\":2,\"value\":65}]}                 # Example of state event (1)\n{\"events\":[{\"attr\":1,\"value\":\"Falling Whites\"}]}   # Example of effects event (3)\n{\"events\":[{\"panelId\":7397,\"gesture\":0}]}          # Example of touch event (4)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MylesMor/nanoleafapi", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nanoleafapi", "package_url": "https://pypi.org/project/nanoleafapi/", "platform": "", "project_url": "https://pypi.org/project/nanoleafapi/", "project_urls": {"Homepage": "https://github.com/MylesMor/nanoleafapi"}, "release_url": "https://pypi.org/project/nanoleafapi/1.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A Python 3 wrapper for the Nanoleaf OpenAPI, for use when controlling both Light Panels and Canvas.", "version": "1.1.0"}, "last_serial": 6445829, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "79117b19729bd0de227aea98a094602e", "sha256": "5a48d16a3c95b4a4247dec4600465a78147c28ccde5ba8551912a415880a8218"}, "downloads": -1, "filename": "nanoleafapi-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "79117b19729bd0de227aea98a094602e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8213, "upload_time": "2019-12-30T02:46:44", "upload_time_iso_8601": "2019-12-30T02:46:44.622948Z", "url": "https://files.pythonhosted.org/packages/12/f5/fb2cd019b8fd3ed38b3d56d8ff1f0afeab231cfb7bd6e92f8682f723c16c/nanoleafapi-1.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a1caec5acfdb80af8ca535cc8dc44c67", "sha256": "c10b65fac44fbab2e1d87d130846a383ec535cb7a327c9f1ec5ef771808233d1"}, "downloads": -1, "filename": "nanoleafapi-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a1caec5acfdb80af8ca535cc8dc44c67", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7806, "upload_time": "2019-12-30T02:46:46", "upload_time_iso_8601": "2019-12-30T02:46:46.789013Z", "url": "https://files.pythonhosted.org/packages/45/51/25687b1e2b724d585c7f8fe125d9e78442d1def6e264b3d82ccfe9396cfd/nanoleafapi-1.0.0.tar.gz"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "33e4e6d186de97e9c28a7ae0c6f5335d", "sha256": "c4a98308141248c77182fbae9fa993e3994fa08396514b6636ed2609ad343dcf"}, "downloads": -1, "filename": "nanoleafapi-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "33e4e6d186de97e9c28a7ae0c6f5335d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8211, "upload_time": "2019-12-30T02:50:32", "upload_time_iso_8601": "2019-12-30T02:50:32.156139Z", "url": "https://files.pythonhosted.org/packages/95/e6/79a85f4f90302c1bc75d5d50d9e0fd8b9399b2512885ec2050ca526add8f/nanoleafapi-1.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "337940019c1e10fcf8284149352a1ddb", "sha256": "3b39e6848fbd4de020569d505afd1514143248255907d97ba31fcc85b5a481ec"}, "downloads": -1, "filename": "nanoleafapi-1.0.1.tar.gz", "has_sig": false, "md5_digest": "337940019c1e10fcf8284149352a1ddb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7804, "upload_time": "2019-12-30T02:50:33", "upload_time_iso_8601": "2019-12-30T02:50:33.606851Z", "url": "https://files.pythonhosted.org/packages/00/51/0eb71e047ab66d1850a836bcd26c8ea33083ebc92cd819a702c196d69911/nanoleafapi-1.0.1.tar.gz"}], "1.0.2": [{"comment_text": "", "digests": {"md5": "884eda4b7ebe161ca6dba444c80ab00c", "sha256": "f34b17bbf31aa67d455caaa62b0670c46ea3ca50f9724ba2a05f671c56f7233d"}, "downloads": -1, "filename": "nanoleafapi-1.0.2.tar.gz", "has_sig": false, "md5_digest": "884eda4b7ebe161ca6dba444c80ab00c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7897, "upload_time": "2019-12-31T18:08:05", "upload_time_iso_8601": "2019-12-31T18:08:05.471702Z", "url": "https://files.pythonhosted.org/packages/34/22/b924900760a6b87ff550f1d06c1bb54d63013b8a639c758512ed354f5198/nanoleafapi-1.0.2.tar.gz"}], "1.0.3": [{"comment_text": "", "digests": {"md5": "080716f41638fecc00a00868ed669daf", "sha256": "f11c4827a49c0ce5f537906582f016ba43fdd9669b3475014feff6448323d94e"}, "downloads": -1, "filename": "nanoleafapi-1.0.3.tar.gz", "has_sig": false, "md5_digest": "080716f41638fecc00a00868ed669daf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8103, "upload_time": "2020-01-01T16:58:02", "upload_time_iso_8601": "2020-01-01T16:58:02.193123Z", "url": "https://files.pythonhosted.org/packages/c4/37/530f8e35216606b746687971e24bc13764e8321d4c45a98a1d541cedc770/nanoleafapi-1.0.3.tar.gz"}], "1.0.4": [{"comment_text": "", "digests": {"md5": "99c1c82e176eec0e6c9d638973735fe3", "sha256": "c92e1b1f5820b3df24a8e65ee388478a03e0c2ce5ae9582e3d797d1374779d1f"}, "downloads": -1, "filename": "nanoleafapi-1.0.4.tar.gz", "has_sig": false, "md5_digest": "99c1c82e176eec0e6c9d638973735fe3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8166, "upload_time": "2020-01-02T00:00:03", "upload_time_iso_8601": "2020-01-02T00:00:03.104635Z", "url": "https://files.pythonhosted.org/packages/8d/3e/a0a2669c4abc103c39975b9943392f69d25d9f80a15564dd58fae5153616/nanoleafapi-1.0.4.tar.gz"}], "1.0.5": [{"comment_text": "", "digests": {"md5": "ff3dbdff4470df7712565f2eca0fc898", "sha256": "a1d26e042110d6e5bbc4d91099194e2d6d667534a892fb4c8edb04c2072a6f4f"}, "downloads": -1, "filename": "nanoleafapi-1.0.5.tar.gz", "has_sig": false, "md5_digest": "ff3dbdff4470df7712565f2eca0fc898", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8248, "upload_time": "2020-01-05T17:57:27", "upload_time_iso_8601": "2020-01-05T17:57:27.750722Z", "url": "https://files.pythonhosted.org/packages/7c/9a/96b5f3757a371bb4e85494e93c261d61df8cb25443b95f25390acb92a3d2/nanoleafapi-1.0.5.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a9363bc2ab45799eec73b5dae31bf504", "sha256": "a4270fb6216318ab9d51c8ca1c9ca5b227b66df759dd8af854d728dbb1de0a96"}, "downloads": -1, "filename": "nanoleafapi-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a9363bc2ab45799eec73b5dae31bf504", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11721, "upload_time": "2020-01-13T17:54:07", "upload_time_iso_8601": "2020-01-13T17:54:07.732441Z", "url": "https://files.pythonhosted.org/packages/7d/db/ab45f96a3e86849159f5070be60c2c1f2f587740ae76830de1047239e492/nanoleafapi-1.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a9363bc2ab45799eec73b5dae31bf504", "sha256": "a4270fb6216318ab9d51c8ca1c9ca5b227b66df759dd8af854d728dbb1de0a96"}, "downloads": -1, "filename": "nanoleafapi-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a9363bc2ab45799eec73b5dae31bf504", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11721, "upload_time": "2020-01-13T17:54:07", "upload_time_iso_8601": "2020-01-13T17:54:07.732441Z", "url": "https://files.pythonhosted.org/packages/7d/db/ab45f96a3e86849159f5070be60c2c1f2f587740ae76830de1047239e492/nanoleafapi-1.1.0.tar.gz"}]}