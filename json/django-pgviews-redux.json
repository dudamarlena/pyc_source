{"info": {"author": "Mikul\u00e1\u0161 Poul", "author_email": "mikulaspoul@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Framework :: Django :: 2.0", "Framework :: Django :: 3.0", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "# SQL Views for Postgres\n\n[![Circle CI](https://circleci.com/gh/mikicz/django-pgviews.png)](https://circleci.com/gh/mikicz/django-pgviews)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nAdds first-class support for [PostgreSQL Views][pg-views] in the Django ORM.\nFor of the original [django-pgviews][django-pgviews] by [mypebble][mypebble] with support for Django 2.2+.\n\n[pg-views]: http://www.postgresql.org/docs/9.1/static/sql-createview.html\n[django-pgviews]: https://github.com/mypebble/django-pgviews\n[mypebble]: https://github.com/mypebble\n\n## Installation\n\nInstall via pip:\n\n    pip install django-pgviews-redux\n\nAdd to installed applications in settings.py:\n\n```python\nINSTALLED_APPS = (\n  # ...\n  'django_pgviews',\n)\n```\n\n## Examples\n\n```python\nfrom django.db import models\n\nfrom django_pgviews import view as pg\n\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n    is_preferred = models.BooleanField(default=False)\n\n    class Meta:\n        app_label = 'myapp'\n\nclass PreferredCustomer(pg.View):\n    projection = ['myapp.Customer.*',]\n    dependencies = ['myapp.OtherView',]\n    sql = \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE;\"\"\"\n\n    class Meta:\n      app_label = 'myapp'\n      db_table = 'myapp_preferredcustomer'\n      managed = False\n```\n\n**NOTE** It is important that we include the `managed = False` in the `Meta` so\nDjango 1.7 migrations don't attempt to create DB tables for this view.\n\nThe SQL produced by this might look like:\n\n```postgresql\nCREATE VIEW myapp_preferredcustomer AS\nSELECT * FROM myapp_customer WHERE is_preferred = TRUE;\n```\n\nTo create all your views, run ``python manage.py sync_pgviews``\n\nYou can also specify field names, which will map onto fields in your View:\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\n\nclass PreferredCustomer(pg.View):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n\n    sql = VIEW_SQL\n```\n\n## Usage\n\nTo map onto a View, simply extend `pg_views.view.View`, assign SQL to the\n`sql` argument and define a `db_table`. You must _always_ set `managed = False`\non the `Meta` class.\n\nViews can be created in a number of ways:\n\n1. Define fields to map onto the VIEW output\n2. Define a projection that describes the VIEW fields\n\n### Define Fields\n\nDefine the fields as you would with any Django Model:\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\n\nclass PreferredCustomer(pg.View):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n\n    sql = VIEW_SQL\n\n    class Meta:\n      managed = False\n      db_table = 'my_sql_view'\n```\n\n### Define Projection\n\n`django-pgviews` can take a projection to figure out what fields it needs to\nmap onto for a view. To use this, set the `projection` attribute:\n\n```python\nfrom django_pgviews import view as pg\n\n\nclass PreferredCustomer(pg.View):\n    projection = ['myapp.Customer.*',]\n    sql = \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE;\"\"\"\n\n    class Meta:\n      db_table = 'my_sql_view'\n      managed = False\n```\n\nThis will take all fields on `myapp.Customer` and apply them to\n`PreferredCustomer`\n\n## Features\n\n### Updating Views\n\nSometimes your models change and you need your Database Views to reflect the new\ndata. Updating the View logic is as simple as modifying the underlying SQL and\nrunning:\n\n```\npython manage.py sync_pgviews --force\n```\n\nThis will forcibly update any views that conflict with your new SQL.\n\n### Dependencies\n\nYou can specify other views you depend on. This ensures the other views are\ninstalled beforehand. Using dependencies also ensures that your views get\nrefreshed correctly when using `sync_pgviews --force`.\n\n**Note:** Views are synced after the Django application has migrated and adding\nmodels to the dependency list will cause syncing to fail.\n\nExample:\n\n```python\nfrom django_pgviews import view as pg\n\nclass PreferredCustomer(pg.View):\n    dependencies = ['myapp.OtherView',]\n    sql = \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE;\"\"\"\n\n    class Meta:\n      app_label = 'myapp'\n      db_table = 'myapp_preferredcustomer'\n      managed = False\n```\n\n### Materialized Views\n\nPostgres 9.3 and up supports [materialized views](http://www.postgresql.org/docs/current/static/sql-creatematerializedview.html)\nwhich allow you to cache the results of views, potentially allowing them\nto load faster.\n\nHowever, you do need to manually refresh the view. To do this automatically,\nyou can attach [signals](https://docs.djangoproject.com/en/1.8/ref/signals/)\nand call the refresh function.\n\nExample:\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n    is_preferred = models.BooleanField(default=True)\n\n\nclass PreferredCustomer(pg.MaterializedView):\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n\n    sql = VIEW_SQL\n\n\n@receiver(post_save, sender=Customer)\ndef customer_saved(sender, action=None, instance=None, **kwargs):\n    PreferredCustomer.refresh()\n```\n\nPostgres 9.4 and up allow materialized views to be refreshed concurrently, without blocking reads, as long as a\nunique index exists on the materialized view. To enable concurrent refresh, specify the name of a column that can be\nused as a unique index on the materialized view. Unique index can be defined on more than one column of a materialized \nview. Once enabled, passing `concurrently=True` to the model's refresh method will result in postgres performing the \nrefresh concurrently. (Note that the refresh method itself blocks until the refresh is complete; concurrent refresh is \nmost useful when materialized views are updated in another process or thread.)\n\nExample:\n\n```python\nfrom django_pgviews import view as pg\n\n\nVIEW_SQL = \"\"\"\n    SELECT id, name, post_code FROM myapp_customer WHERE is_preferred = TRUE\n\"\"\"\n\nclass PreferredCustomer(pg.MaterializedView):\n    concurrent_index = 'id, post_code'\n    sql = VIEW_SQL\n\n    name = models.CharField(max_length=100)\n    post_code = models.CharField(max_length=20)\n\n\n@receiver(post_save, sender=Customer)\ndef customer_saved(sender, action=None, instance=None, **kwargs):\n    PreferredCustomer.refresh(concurrently=True)\n```\n\n### Custom Schema\n\nYou can define any table name you wish for your views. They can even live inside your own custom\n[PostgreSQL schema](http://www.postgresql.org/docs/current/static/ddl-schemas.html).\n\n```python\nfrom django_pgviews import view as pg\n\n\nclass PreferredCustomer(pg.View):\n    sql = \"\"\"SELECT * FROM myapp_customer WHERE is_preferred = TRUE;\"\"\"\n\n    class Meta:\n      db_table = 'my_custom_schema.preferredcustomer'\n      managed = False\n```\n\n### Sync Listeners\n\ndjango-pgviews 0.5.0 adds the ability to listen to when a `post_sync` event has\noccurred.\n\n#### `view_synced`\n\nFired every time a VIEW is synchronised with the database.\n\nProvides args:\n* `sender` - View Class\n* `update` - Whether the view to be updated\n* `force` - Whether `force` was passed\n* `status` - The result of creating the view e.g. `EXISTS`, `FORCE_REQUIRED`\n* `has_changed` - Whether the view had to change\n\n#### `all_views_synced`\n\nSent after all Postgres VIEWs are synchronised.\n\nProvides args:\n* `sender` - Always `None`\n\n\n## Django Compatibility\n\n<table>\n  <thead>\n    <tr>\n      <th>Django Version</th>\n      <th>Django-PGView Version</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1.4 and down</td>\n      <td>Unsupported</td>\n    </tr>\n    <tr>\n      <td>1.5</td>\n      <td>0.0.1</td>\n    </tr>\n    <tr>\n      <td>1.6</td>\n      <td>0.0.3</td>\n    </tr>\n    <tr>\n      <td>1.7</td>\n      <td>0.0.4</td>\n    </tr>\n    <tr>\n      <td>1.9</td>\n      <td>0.1.0</td>\n    </tr>\n    <tr>\n      <td>1.10</td>\n      <td>0.2.0</td>\n    </tr>\n    <tr>\n      <td>2.2</td>\n      <td>0.6.0</td>\n    </tr>\n    <tr>\n      <td>3.0</td>\n      <td>0.6.0</td>\n    </tr>\n  </tbody>\n</table>\n\n### Django 1.7 Note\n\nDjango 1.7 changed how models are loaded so that it's no longer possible to do\n`sql = str(User.objects.all().query)` because the dependent models aren't\nyet loaded by Django.\n\n### Django 1.9 Note\n\nYou now have to use the `.view` module directly.\n\n### Django 1.10 Note\n\nWhen updating to Django 1.10, if you see `AttributeError: can't set attribute`\nwhen you try to migrate or run tests, you need to check your migrations for\nwhere `_base_manager` or `_default_manager` get set on the model and replace it\nwith `objects` inside the migration.\n\nThis also applies to [Django MPTT](https://django-mptt.github.io/django-mptt/upgrade.html#id1)\nwho have covered this in a bit more detail.\n\n## Python 3 Support\n\nDjango PGViews Redux only supports Python 3.6+.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mikicz/django-pgviews", "keywords": "", "license": "Public Domain", "maintainer": "", "maintainer_email": "", "name": "django-pgviews-redux", "package_url": "https://pypi.org/project/django-pgviews-redux/", "platform": "", "project_url": "https://pypi.org/project/django-pgviews-redux/", "project_urls": {"Homepage": "https://github.com/mikicz/django-pgviews"}, "release_url": "https://pypi.org/project/django-pgviews-redux/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "Create and manage Postgres SQL Views in Django", "version": "0.6.0"}, "last_serial": 6761174, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "c79b21dfaa8a117cc30f622e79f9a4f3", "sha256": "0008a50e4df49d5eea2e5428f23fa11bc425c47fb4c844ce017c0189e3578b99"}, "downloads": -1, "filename": "django_pgviews_redux-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c79b21dfaa8a117cc30f622e79f9a4f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13160, "upload_time": "2020-03-06T11:06:02", "upload_time_iso_8601": "2020-03-06T11:06:02.537487Z", "url": "https://files.pythonhosted.org/packages/33/c4/e725cba5c55565df1d272d2992d97be497f08f7a9de6d810aa75d02f2cbb/django_pgviews_redux-0.6.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1f3c20a8f3e6bb51d7a784fae65bd5b4", "sha256": "1e870c8274b3eca3492d0eb39e00924426d6896ec44612de0a2e9f36fe455b9a"}, "downloads": -1, "filename": "django-pgviews-redux-0.6.0.tar.gz", "has_sig": false, "md5_digest": "1f3c20a8f3e6bb51d7a784fae65bd5b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13285, "upload_time": "2020-03-06T11:06:04", "upload_time_iso_8601": "2020-03-06T11:06:04.842763Z", "url": "https://files.pythonhosted.org/packages/eb/c6/693ac962b69ee1cdcc3325bae0ec0b6860ae489d35710a38d5d179843f3f/django-pgviews-redux-0.6.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "c79b21dfaa8a117cc30f622e79f9a4f3", "sha256": "0008a50e4df49d5eea2e5428f23fa11bc425c47fb4c844ce017c0189e3578b99"}, "downloads": -1, "filename": "django_pgviews_redux-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c79b21dfaa8a117cc30f622e79f9a4f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13160, "upload_time": "2020-03-06T11:06:02", "upload_time_iso_8601": "2020-03-06T11:06:02.537487Z", "url": "https://files.pythonhosted.org/packages/33/c4/e725cba5c55565df1d272d2992d97be497f08f7a9de6d810aa75d02f2cbb/django_pgviews_redux-0.6.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1f3c20a8f3e6bb51d7a784fae65bd5b4", "sha256": "1e870c8274b3eca3492d0eb39e00924426d6896ec44612de0a2e9f36fe455b9a"}, "downloads": -1, "filename": "django-pgviews-redux-0.6.0.tar.gz", "has_sig": false, "md5_digest": "1f3c20a8f3e6bb51d7a784fae65bd5b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13285, "upload_time": "2020-03-06T11:06:04", "upload_time_iso_8601": "2020-03-06T11:06:04.842763Z", "url": "https://files.pythonhosted.org/packages/eb/c6/693ac962b69ee1cdcc3325bae0ec0b6860ae489d35710a38d5d179843f3f/django-pgviews-redux-0.6.0.tar.gz"}]}