{"info": {"author": "Cameron Simpson", "author_email": "cs@cskk.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "*Latest release 20200318*:\n*Note that the TagsOntology stuff is in flux and totally alpha.*\nTag.prefix_name factory returning a new tag if prefix is not empty, ptherwise self.\nTagSet.update: accept an optional prefix for inserting \"foreign\" tags with a distinguishing name prefix.\nTag.as_json: turn sets and tuples into lists for encoding.\nBackport for Python < 3.7 (no fromisoformat functions).\nTagSet: drop unused and illplaced .titleify, .episode_title and .title methods.\nTagSet: remove \"defaults\", unused.\nMake TagSet a direct subclass of dict, adjust uses of .update etc.\nNew ExtendedNamespace class which is a SimpleNamespace with some inferred attributes and a partial mapping API (keys and __getitem__).\nNew TagSet.ns() returning the Tags as an ExtendedNamespace, which doubles as a mapping for str.format_map; TagSet.format_kwargs is now an alias for this.\nNew Tag.from_string factory to parse a str into a Tag.\nNew TagsOntology and TypedTag classes to provide type and value-detail information; very very alpha and subject to change.\n\nTags and sets of tags.\n\n## Class `ExtendedNamespace(types.SimpleNamespace)`\n\nSubclass `SimpleNamespace` with inferred attributes.\nThis also presents attributes as `[]` elements via `__getitem__`.\n\n## Class `Tag(Tag,builtins.tuple)`\n\nA Tag has a `.name` (`str`) and a `.value`.\n\nThe `name` must be a dotted identifier.\n\nA \"bare\" `Tag` has a `value` of `None`.\n\n## Class `TagChoice(TagChoice,builtins.tuple)`\n\nA \"tag choice\", an apply/reject flag and a `Tag`,\nused to apply changes to a `TagSet`\nor as a criterion for a tag search.\n\nAttributes:\n* `spec`: the source text from which this choice was parsed,\n  possibly `None`\n* `choice`: the apply/reject flag\n* `tag`: the `Tag` representing the criterion\n\n## Class `TagSet(builtins.dict,cs.lex.FormatableMixin)`\n\nA setlike class associating a set of tag names with values.\n\n### Method `TagSet.__init__(self)`\n\nInitialise the `TagSet`.\n\n## Class `TagsOntology(cs.obj.SingletonMixin)`\n\nAn ontology for tag names.\n\nThis is based around a mapping of tag names\nto ontological information expressed as a `TagSet`.\n\nA `cs.fstags.FSTags` uses ontologies initialised from `TagFile`s\ncontaining ontology mappings.\n\n## Class `TypedTag(cs.lex.FormatableMixin)`\n\nA `Tag`like object linked to a `TagOntology`,\nproviding associated detail about a `Tag`.\n\nLike `Tag`, this has a `.name` and `.value`.\n\nAdditionally it has the following attributes:\n* `ontology`: the supporting `TagOntology`\n* `tag`: the originating `Tag`\n  (computed from the `(name,value)` tuple if supplied)\n* `defn`: the `TagSet` from `.ontology`\n  which defines this\n* `type`: `defn['type']`\n* `member_type`: `defn['member_type']` if present;\n  we expect `type` to be a list or mapping type name\n\nIndexing a `TypedTag` indexes its `.value`\nand returns a tuple `(element,TagSet)`\nwhere the `TagSet` is information from the ontology\nabout the element's value (if `element` is a `str`).\n\nIf the `.value` looks like a mapping\n.ie. it has a `.keys()` method\nthen a `TypedTag` has `.keys()` and `.items()` methods.\nThe `.keys()` call returns `.value.keys()`.\nThe `.items()` call yields `(key,self[key])`\nfor each of `self.keys()`.\n\nIterating over a `TypedTag`\nyields its keys if it has a `.keys()` method,\notherwise values from `range(len(self.value))`.\n\n### Method `TypedTag.__init__(self, name, value=None, *, ontology)`\n\nPrepare the `TypedTag` from a `Tag` or `(name,value)` tuple.\n\n\n\n# Release Log\n\n*Release 20200318*:\n*Note that the TagsOntology stuff is in flux and totally alpha.*\nTag.prefix_name factory returning a new tag if prefix is not empty, ptherwise self.\nTagSet.update: accept an optional prefix for inserting \"foreign\" tags with a distinguishing name prefix.\nTag.as_json: turn sets and tuples into lists for encoding.\nBackport for Python < 3.7 (no fromisoformat functions).\nTagSet: drop unused and illplaced .titleify, .episode_title and .title methods.\nTagSet: remove \"defaults\", unused.\nMake TagSet a direct subclass of dict, adjust uses of .update etc.\nNew ExtendedNamespace class which is a SimpleNamespace with some inferred attributes and a partial mapping API (keys and __getitem__).\nNew TagSet.ns() returning the Tags as an ExtendedNamespace, which doubles as a mapping for str.format_map; TagSet.format_kwargs is now an alias for this.\nNew Tag.from_string factory to parse a str into a Tag.\nNew TagsOntology and TypedTag classes to provide type and value-detail information; very very alpha and subject to change.\n\n*Release 20200229.1*:\nInitial release: pull TagSet, Tag, TagChoice from cs.fstags for independent use.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all", "keywords": "python3", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "cs.tagset", "package_url": "https://pypi.org/project/cs.tagset/", "platform": "", "project_url": "https://pypi.org/project/cs.tagset/", "project_urls": {"Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all"}, "release_url": "https://pypi.org/project/cs.tagset/20200318/", "requires_dist": null, "requires_python": "", "summary": "Tags and sets of tags.", "version": "20200318"}, "last_serial": 6832148, "releases": {"20200229.1": [{"comment_text": "", "digests": {"md5": "9712b7a37bc14169ea137362825ce19a", "sha256": "28f7bb21383e8a26b5f568ab6ba67466b62eaa6b09b39baab700fc853ffe4128"}, "downloads": -1, "filename": "cs.tagset-20200229.1.tar.gz", "has_sig": false, "md5_digest": "9712b7a37bc14169ea137362825ce19a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5337, "upload_time": "2020-02-29T04:46:50", "upload_time_iso_8601": "2020-02-29T04:46:50.220007Z", "url": "https://files.pythonhosted.org/packages/ae/85/23c1872c76dceb62b5b50ea0f907b1412e465b6e584d7495b691bcd8194a/cs.tagset-20200229.1.tar.gz"}], "20200318": [{"comment_text": "", "digests": {"md5": "0db5c840cbb226abe45e592b33667f9d", "sha256": "4637c6b0198ec60cdcda260beaa541ef7673f4cf982c82e764059024b818a7ab"}, "downloads": -1, "filename": "cs.tagset-20200318.tar.gz", "has_sig": false, "md5_digest": "0db5c840cbb226abe45e592b33667f9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10385, "upload_time": "2020-03-17T23:11:36", "upload_time_iso_8601": "2020-03-17T23:11:36.925303Z", "url": "https://files.pythonhosted.org/packages/db/63/d2645b65a42bf62a7341200f887c5b47646727f8b36821778ad1ec676073/cs.tagset-20200318.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "0db5c840cbb226abe45e592b33667f9d", "sha256": "4637c6b0198ec60cdcda260beaa541ef7673f4cf982c82e764059024b818a7ab"}, "downloads": -1, "filename": "cs.tagset-20200318.tar.gz", "has_sig": false, "md5_digest": "0db5c840cbb226abe45e592b33667f9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10385, "upload_time": "2020-03-17T23:11:36", "upload_time_iso_8601": "2020-03-17T23:11:36.925303Z", "url": "https://files.pythonhosted.org/packages/db/63/d2645b65a42bf62a7341200f887c5b47646727f8b36821778ad1ec676073/cs.tagset-20200318.tar.gz"}]}