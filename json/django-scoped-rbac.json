{"info": {"author": "David Charboneau", "author_email": "david@adadabase.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "==================\ndjango_scoped_rbac\n==================\n\n.. image:: https://github.com/Quansight/django-scoped-rbac/workflows/Django%20CI/badge.svg\n   :target: Django CI\n\nA rich and flexible Django application for role-based access control within\ndistinct access control scopes supporting Django Rest Framework.\n\nMotivation\n----------\n\n* Support multiple security contexts within an application, rather than having the\n  application serve as the single security context.\n* Support a model of security context that can be enforced at the query level within the\n  database. For example - list all resources within the contexts the user is authorized\n  to list resources.\n* Support assignment of roles within a security context.\n* Support an extensible mechanism for conditional policy expressions for permissions.\n* Support a JSON representation of the total permissions granted to a user for all\n  security contexts that can be shared with browser and other clients to enable\n  permissions-informed disclosure UI and UX\n\n\nSupport multiple security contexts within an application\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMost RBAC systems provide a simple permission model to answer permissions. For example,\nis the user authorized to POST a comment. In an application that supports multiple\nsecurity contexts the relevant context is an additional parameter required to determine\nif the user is authorised; that is is the user authorized to POST a comment to this\nproject vs another project. A user may be authorized to POST a comment to one project,\nbut not another.\n\n\nSupport for security contexts at the query level\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf every object has a security context property it's possible to always secure the\nqueries executed for a user request by adding the user's authorized security contexts as\nan \"IN\" condition restricting the scope of the query.\n\n\nSupport assignment of roles within a security context\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn most RBAC systems a user is assigned a role that is applicable across the entire\napplication. For example, a user may have a `Commenter` role granting the user the\npermission to post comments anywhere comments may be posted within the application. An\napplication that supports the assignment of a role within the scope of a specific\nsecurity context can restrict the assignment of the `Commenter` role to specific areas\nof an application. For example, a user may be assigned the `Commenter` role in `Project\n1` but not `Project 2`.\n\n\nSupport an extensible mechanism for conditional policy expressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAnother limitation of most RBAC systems is the simplicity of their permissions - you are\neither authorized to perform an action or not. Supporting an extensible mechanism for\nconditional policy expression means that a permission may be conditionally granted\ndependant upon a variety of factors. For example, you may be granted the permission to\ncomment within a project only when a target resource within the scope of that project is\n\"open for community comments\" vs \"open for drafter comments\".\n\n\nSupport JSON representation of total permissions granted\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf a user has permission to perform an action, such as update a resource, it should be\npossible for a client to determine that this is the case and be able to decide whether\nto disclose editing capabilty for the resource to the user. That is, if I'm not\nauthorised to edit a resource the UI shouldn't offer me the opportunity to edit the\nresource.\n\nProviding a JSON representation of the user's total permissions, and a Javascript\nimplementation of the permissions policy engine, can provide a much richer user\nexperience.\n\n\nNote\n====\n\nThis project has been set up using PyScaffold 3.2.3. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyscaffold/pyscaffold/", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "django-scoped-rbac", "package_url": "https://pypi.org/project/django-scoped-rbac/", "platform": "any", "project_url": "https://pypi.org/project/django-scoped-rbac/", "project_urls": {"Documentation": "https://pyscaffold.org/", "Homepage": "https://github.com/pyscaffold/pyscaffold/"}, "release_url": "https://pypi.org/project/django-scoped-rbac/0.0.1/", "requires_dist": ["django", "pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": ">=3.7.6", "summary": "Add a short description here!", "version": "0.0.1"}, "last_serial": 7018338, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8999ef2cddb0a754a053d1b39f6ee266", "sha256": "3576494e77c18397dad9c36f2a97c757d6cc5d62596420f4a58a32aac8986127"}, "downloads": -1, "filename": "django_scoped_rbac-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8999ef2cddb0a754a053d1b39f6ee266", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7.6", "size": 16391, "upload_time": "2020-04-14T16:24:36", "upload_time_iso_8601": "2020-04-14T16:24:36.704983Z", "url": "https://files.pythonhosted.org/packages/ae/e9/6448030f29d9957252d0105955fd193f2129d5b518333689c61bcb065bde/django_scoped_rbac-0.0.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "75de81cf0055b45413a4c467cd3f6b30", "sha256": "14fb7fa5c165b62c3ad3c08166c08cf8ad82ca2550cf00e3466f3031b3dbbd15"}, "downloads": -1, "filename": "django_scoped_rbac-0.0.1.tar.gz", "has_sig": false, "md5_digest": "75de81cf0055b45413a4c467cd3f6b30", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.6", "size": 39006, "upload_time": "2020-04-14T16:24:38", "upload_time_iso_8601": "2020-04-14T16:24:38.752478Z", "url": "https://files.pythonhosted.org/packages/65/75/bd1f19ecaea2a673f31ccba888a2ae008f4ff09dff596225a77b291fd7fe/django_scoped_rbac-0.0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "8999ef2cddb0a754a053d1b39f6ee266", "sha256": "3576494e77c18397dad9c36f2a97c757d6cc5d62596420f4a58a32aac8986127"}, "downloads": -1, "filename": "django_scoped_rbac-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8999ef2cddb0a754a053d1b39f6ee266", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.7.6", "size": 16391, "upload_time": "2020-04-14T16:24:36", "upload_time_iso_8601": "2020-04-14T16:24:36.704983Z", "url": "https://files.pythonhosted.org/packages/ae/e9/6448030f29d9957252d0105955fd193f2129d5b518333689c61bcb065bde/django_scoped_rbac-0.0.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "75de81cf0055b45413a4c467cd3f6b30", "sha256": "14fb7fa5c165b62c3ad3c08166c08cf8ad82ca2550cf00e3466f3031b3dbbd15"}, "downloads": -1, "filename": "django_scoped_rbac-0.0.1.tar.gz", "has_sig": false, "md5_digest": "75de81cf0055b45413a4c467cd3f6b30", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.6", "size": 39006, "upload_time": "2020-04-14T16:24:38", "upload_time_iso_8601": "2020-04-14T16:24:38.752478Z", "url": "https://files.pythonhosted.org/packages/65/75/bd1f19ecaea2a673f31ccba888a2ae008f4ff09dff596225a77b291fd7fe/django_scoped_rbac-0.0.1.tar.gz"}]}