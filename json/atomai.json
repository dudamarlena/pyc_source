{"info": {"author": "Maxim Ziatdinov", "author_email": "maxim.ziatdinov@ai4microcopy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Scientific/Engineering"], "description": "[![Build Status](https://travis-ci.com/ziatdinovmax/atomai.svg?branch=master)](https://travis-ci.com/ziatdinovmax/atomai)\n[![Documentation Status](https://readthedocs.org/projects/atomai/badge/?version=latest)](https://atomai.readthedocs.io/en/latest/?badge=latest)\n[![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/Quickstart_AtomAI_in_the_Cloud.ipynb)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/8fa8829627f040dda46e2dc30e48aca1)](https://app.codacy.com/manual/ziatdinovmax/atomai?utm_source=github.com&utm_medium=referral&utm_content=ziatdinovmax/atomai&utm_campaign=Badge_Grade_Dashboard)\n\n# AtomAI\n\n## What is AtomAI?\n\nAtomAI is a simple Python package for machine learning-based analysis of experimental atom-resolved data from electron and scanning probe microscopes, which doesn't require any advanced knowledge of Python (or machine learning). It is the next iteration of the [AICrystallographer project](https://github.com/pycroscopy/AICrystallographer).\n\n## How to use it?\n\nAtomAI has two main modules: *atomnet* and *atomstat*. The *atomnet* is for training neural networks (with just one line of code) and for applying trained models to finding atoms and defects in image data (which also takes  a single line of code). The *atomstat* allows taking the *atomnet* predictions and performing the statistical analysis on the local image descriptors associated with the identified atoms and defects (e.g., principal component analysis of atomic distortions in a single image or computing gaussian mixture model components with the transition probabilities for movies).\n\nHere is an example of how one can train a neural network for atom/defect finding with essentially one line of code:\n\n```python\nfrom atomai import atomnet\n\n# Here you load your training data\ndataset = np.load('training_data.npz')\nimages_all = dataset['X_train']\nlabels_all = dataset['y_train']\nimages_test_all = dataset['X_test']\nlabels_test_all = dataset['y_test']\n\n# Train a model\ntrained_model = atomnet.trainer(\n    images_all, labels_all, \n    images_test_all, labels_test_all,\n    training_cycles=500).run()   \n```\n\nTrained models can be used to find atoms/defects in the previously unseen (by a model) experimental data:\n```python\n# Here you load new experimental data (as 2D or 3D numpy array)\nexpdata = np.load('expdata-test.npy')\n\n# Get model's \"raw\" prediction, atomic coordinates and classes\nnn_input, (nn_output, coordinates) = atomnet.predictor(expdata, trained_model, refine=False).run()\n```\n\nOne can then perform statistical analysis using the information extracted by *atomnet*. For example, for a single image, one can identify domains with different ferroic distortions:\n\n```python\nfrom atomai import atomstat\n\n# Get local descriptors\nimstack = atomstat.imlocal(nn_output, coordinates, crop_size=32, coord_class=1)\n\n# Compute distortion \"eigenvectors\" with associated loading maps and plot results:\nnmf_results = imstack.imblock_nmf(n_components=4, plot_results=True)\n```\n\nFor movies, one can extract trajectories of individual defects and calculate the transition probabilities between different classes:\n\n```python\n# Get local descriptors (such as subimages centered around impurities)\nimstack = atomstat.imlocal(nn_output, coordinates, crop_size=32, coord_class=1)\n\n# Calculate Gaussian mixture model (GMM) components\ncomponents, imgs, coords = imstack.gmm(n_components=10, plot_results=True)\n\n# Calculate GMM components and transition probabilities for different trajectories\ntraj_all, trans_all, fram_all = imstack.transition_matrix(n_components=10, rmax=10)\n\n# and more\n```\n\n## Quickstart: AtomAI in the Cloud\n\nThe easiest way to start using AtomAI is via [Google Colab](https://colab.research.google.com/notebooks/intro.ipynb) \n\n1) [Use AtomAI to train a deep NN for atom finding](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_atomnet.ipynb)\n\n2) [Analyze distortion domains in a single atomic image](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_atomstat.ipynb)\n\n3) Analyze trajectories of atomic defects in atomic movie - TBA\n\n4) [Prepare training data from experimental image with atomic coordinates (beta)](https://colab.research.google.com/github/ziatdinovmax/atomai/blob/master/examples/notebooks/atomai_training_data.ipynb)\n\n## Installation\nFirst, install [PyTorch](https://pytorch.org/get-started/locally/). Then, install AtomAI via\n\n```bash\npip install atomai\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ziatdinovmax/atomai", "keywords": "", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "atomai", "package_url": "https://pypi.org/project/atomai/", "platform": "", "project_url": "https://pypi.org/project/atomai/", "project_urls": {"Homepage": "https://github.com/ziatdinovmax/atomai"}, "release_url": "https://pypi.org/project/atomai/0.2.0/", "requires_dist": ["torch (>=1.0.0)", "numpy (>=1.16.4)", "scipy (>=1.3.0)", "scikit-learn (>=0.22.1)", "scikit-image (==0.16.2)", "opencv-python (>=4.1.0)"], "requires_python": ">=3.6", "summary": "Deep and machine learning for atom-resolved data", "version": "0.2.0"}, "last_serial": 6878025, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "ea8eeb2da0bd70f00f75c8718b3277c6", "sha256": "495f212b53c021d9a8dab3c2dce645a0ab487954e8ef80818a661e5c83e01e87"}, "downloads": -1, "filename": "atomai-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ea8eeb2da0bd70f00f75c8718b3277c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34610, "upload_time": "2020-03-25T03:14:12", "upload_time_iso_8601": "2020-03-25T03:14:12.672131Z", "url": "https://files.pythonhosted.org/packages/bb/6d/de1939b54e443c28cf6ce9d8baf8edb2ca5a42a93bd8dee768f22002ac52/atomai-0.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7fa96a446b20548760d28368dbab7094", "sha256": "3dce907748a465e3b57674e828d953f1e2afa7f774b7a02bc0f2bc6bbfbe1e99"}, "downloads": -1, "filename": "atomai-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7fa96a446b20548760d28368dbab7094", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34395, "upload_time": "2020-03-25T03:14:15", "upload_time_iso_8601": "2020-03-25T03:14:15.325488Z", "url": "https://files.pythonhosted.org/packages/97/bc/48216f6645d5f9c72d74c366cffb07679c05a36d98164f16ee79684e696f/atomai-0.2.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea8eeb2da0bd70f00f75c8718b3277c6", "sha256": "495f212b53c021d9a8dab3c2dce645a0ab487954e8ef80818a661e5c83e01e87"}, "downloads": -1, "filename": "atomai-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ea8eeb2da0bd70f00f75c8718b3277c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34610, "upload_time": "2020-03-25T03:14:12", "upload_time_iso_8601": "2020-03-25T03:14:12.672131Z", "url": "https://files.pythonhosted.org/packages/bb/6d/de1939b54e443c28cf6ce9d8baf8edb2ca5a42a93bd8dee768f22002ac52/atomai-0.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7fa96a446b20548760d28368dbab7094", "sha256": "3dce907748a465e3b57674e828d953f1e2afa7f774b7a02bc0f2bc6bbfbe1e99"}, "downloads": -1, "filename": "atomai-0.2.0.tar.gz", "has_sig": false, "md5_digest": "7fa96a446b20548760d28368dbab7094", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 34395, "upload_time": "2020-03-25T03:14:15", "upload_time_iso_8601": "2020-03-25T03:14:15.325488Z", "url": "https://files.pythonhosted.org/packages/97/bc/48216f6645d5f9c72d74c366cffb07679c05a36d98164f16ee79684e696f/atomai-0.2.0.tar.gz"}]}