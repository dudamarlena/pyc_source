{"info": {"author": "Nanne van Noord", "author_email": "n.j.e.vannoord@uva.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3"], "description": "# Distributed Annotation 'n' Enrichment (DANE) \n\nThe DANE ecosystem is designed to enable easy deployment and rapid prototyping of compute intensive workers,\nin an environment where batch processing is not feasible and compute resources are either limited or distributed. \n\n![DANE-eco](https://docs.google.com/drawings/d/e/2PACX-1vRCjKm3O5cqbF5LRlUyC6icAbQ3xmedKvArlY_8h31PJqAu3iZe6Q5qcVbs3rujVoGpzesD00Ck9-Hw/pub?w=953&amp;h=438)\n\nIn essence the DANE ecosystem consists of three parts, 1) The back-end (DANE-server), 2) The compute workers, 3) A client. \nThe format of the communication between these components follows the [job specification format](https://dane.readthedocs.io/en/latest/DANE/jobs.html)\nwhich details the source material to process, the tasks which should be performed, as well as information about the task results.\nUtil code to build workers, clients, or work with a job specification is included in the [DANE](https://github.com/CLARIAH/DANE) package.\n\n## DANE-server\nDANE-server is the back-end, component of DANE and takes care of job routing as well as the (meta)data storage. A job submitted to \nDANE-server is registered in a database, and then its `.run()` function is called. Running a job involves iterating over the tasks, and depending\non the structure of the tasks executing them sequentially or in parallel. \n\nA specific task is run by publishing the job to a [RabbitMQ Topic Exchange](https://www.rabbitmq.com/tutorials/tutorial-five-python.html),\non this exchange the task is routed based on its Task Key. The task key corresponds to the `binding_key` of a worker,\nand each worker with this binding_key listens to a shared queue. Once a worker is available it will take the next job from the queue and process it.\n\nDANE-server depends on the [DANE](https://github.com/CLARIAH/DANE) package for the logic of how to iterate over tasks, and how to interpret a job\nin general.\n\n# Installation\n\nDANE-server has been tested with Python 3 and is installable through pip:\n\n    pip install dane-server\n\nBesides the python base, the DANE-server also relies on a [MariaDB](https://mariadb.org/) SQL server (version 10.4) for persistent storage, \nand [RabbitMQ](https://www.rabbitmq.com/) (tested with version 3.7) for messaging.\n\nOn Ubuntu 18.04, the MariaDB version in the repo is too low (10.1), so you will need to take measures to install a more recent version.\nAdditionally, MariaDB for some reason pretends to be an early version of MySQL, so if you get the error:\n\n```\nMySQL version 5.7.2 and earlier does not support COM_RESET_CONNECTION.\n```\n\nThen you can fix this by adding the following to the `mysqld` block in `/etc/mysql/my.cnf`:\n\n```\nversion=5.7.99-10.4.10-MariaDB\n```\n\nAfter installing all dependencies it is necessary to configure the DANE server, how to do this is described here: https://dane.readthedocs.io/en/latest/intro.html#configuration\n\nThe base config for DANE-server consists of the following parameters, which you might want to overwrite:\n\n```\nMARIADB: \n    USER: 'new_user'\n    PASSWORD: 'new_password'\n    HOST: 'localhost'\n    PORT: '3306'\n    DATABASE: 'DANE-sql-store'\nLOGGING: \n    DIR: \"./dane-server-logs/\"\n    LEVEL: \"DEBUG\"\nDANE_SERVER:\n    TEMP_FOLDER: \"/home/DANE/DANE-data/TEMP/\"\n    OUT_FOLDER: \"/home/DANE/DANE-data/OUT/\"\n```\n\n# Usage\n\n*NOTE: DANE-server is still in development, as such authorisation (amongst other featueres) has not yet been added. Use at your own peril.*\n\nRun the DANE-server server as follows (this starts a Gunicorn HTTP server):\n\n    dane-server\n\nIf no errors occur then this should start a Flask server (at port 5500) which will handle API requests, and in the background the server will handle interaction with the DB and RabbitMQ.\n\n## API\n\nDANE-server can be interacted with via a small API that supports a small number of essential calls:\n\n    /DANE/job/\n\nVia POST a new job can be submitted. It expects a JSON object which is a serialised job specification.\n\n    /DANE/job/<job_id>\n\nGet information about an existing job.\n\n    /DANE/job/<job_id>/retry\n\nResume a job, if it has crashed.\n\n    /DANE/job/<job_id>/delete\n\nDeletes the job\n \n    /DANE/search/<source_id>\n\nReturn the job_id's for all jobs that have this source_id.\n\n    /DANE/job/inprogress\n\nReturns a list of job_id's for in progress jobs, or jobs which have errored.\n\n    /DANE/task/<task_id>\n\nGet information about this task\n\n    /DANE/task/<task_id>/forceretry\n\nThis will force the DANE-server to retry this task, even if it completed successfully or is already queued.\n\n    /DANE/task/<task_id>/reset\n\nReset the task state to `201`\n\n## Examples\n\nExamples of how to work with DANE can be found at: https://dane.readthedocs.io/en/latest/examples.html", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CLARIAH/DANE-server", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "dane-server", "package_url": "https://pypi.org/project/dane-server/", "platform": "", "project_url": "https://pypi.org/project/dane-server/", "project_urls": {"Homepage": "https://github.com/CLARIAH/DANE-server"}, "release_url": "https://pypi.org/project/dane-server/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Back-end for the Distributed Annotation 'n' Enrichment (DANE) system", "version": "0.1.2"}, "last_serial": 6936790, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b0533260831834da0c082b0a27b9d18f", "sha256": "33ea5edb4ece9d6a397fb220fe4e8a18af4100143b0a34020b3e025e42d0b39e"}, "downloads": -1, "filename": "dane-server-0.1.tar.gz", "has_sig": false, "md5_digest": "b0533260831834da0c082b0a27b9d18f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20748, "upload_time": "2020-04-02T13:05:59", "upload_time_iso_8601": "2020-04-02T13:05:59.039469Z", "url": "https://files.pythonhosted.org/packages/22/41/ffcf38891a96b49c18914012d23c02f26b0457d257d592fca00390470175/dane-server-0.1.tar.gz"}], "0.1.2": [{"comment_text": "", "digests": {"md5": "700e31988817b899c598d60b6b28377b", "sha256": "19fb6e099549a3c2e657e498b3dd7c10a5df868d0ba2898011591a5862873226"}, "downloads": -1, "filename": "dane-server-0.1.2.tar.gz", "has_sig": false, "md5_digest": "700e31988817b899c598d60b6b28377b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21290, "upload_time": "2020-04-02T16:06:21", "upload_time_iso_8601": "2020-04-02T16:06:21.163742Z", "url": "https://files.pythonhosted.org/packages/27/c6/835067a8db8f89a76fad20c7109e42b10e7f6d8e6630d35e7ef240ec9ba9/dane-server-0.1.2.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "700e31988817b899c598d60b6b28377b", "sha256": "19fb6e099549a3c2e657e498b3dd7c10a5df868d0ba2898011591a5862873226"}, "downloads": -1, "filename": "dane-server-0.1.2.tar.gz", "has_sig": false, "md5_digest": "700e31988817b899c598d60b6b28377b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21290, "upload_time": "2020-04-02T16:06:21", "upload_time_iso_8601": "2020-04-02T16:06:21.163742Z", "url": "https://files.pythonhosted.org/packages/27/c6/835067a8db8f89a76fad20c7109e42b10e7f6d8e6630d35e7ef240ec9ba9/dane-server-0.1.2.tar.gz"}]}