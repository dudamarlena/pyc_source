{"info": {"author": "Justin Engel", "author_email": "jtengel08@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "====================\ncontinuous_threading\n====================\n\nThis library provides several classes to help manage threads that run continuously.\n\nThere are some problems with threads runing continuously in a loop. Calculation threads are greedy and keep running \nwhich starves other threads. Another problem is if you don't exit an infinite loop in a thread it may keep running \nafter python has tried to exit. Daemon threads will close, but resources/variables may not be cleaned up properly. \nMostly, I needed to finish writing data to a file before the thread closed. This library aims to solve those problems.\n\nThis library provides 4 main thread utilities:\n  * Thread - threading with context manager support\n  * ContinuousThread - Run a function continuously in a loop (It is suggested sleep is called periodically if no I/O)\n  * PausableThread - Continuous thread that can be stopped and started again.\n  * OperationThread - Thread that will run a calculation in a separate thread with different data.\n  * PeriodicThread - Thread that runs a function periodically at a given interval.\n\n\nThread context manager\n----------------------\nThis library turns threads into a context manager which automatically starts and stops threads.\n\n.. code-block:: python\n\n    import continuous_threading\n\n    thread_success = [False]\n\n    def do_something():\n        print('here')\n        thread_success[0] = True\n\n\n    with continuous_threading.Thread(target=do_something):\n        print('in context')\n\n    assert thread_success[0] is True\n\n\nContinuousThread\n----------------\nThe ContinuousThread is a simple thread in an infinite while loop. The while loop keeps looping while the thread \nalive Event is set. Call `thread.stop()`, `thread.close()`, or `thread.join()` to stop the thread. The thread should \nalso stop automatically when the python program is exiting/closing.\n\n.. code-block:: python\n\n    import continuous_threading\n\n    class CountingThread(continuous_threading.ContinuousThread):\n        def __init__(self):\n            super().__init__()\n            self.counter = 0\n\n        def _run(self):\n            self.counter += 1\n\n\n    with CountingThread() as th:\n        print('in context')\n\n    assert th.counter > 0\n    print(\"Simple context manager print caused %d thread iterations\" % th.counter)\n\n\nExample of start and stop methods.\n.. code-block:: python\n\n    import time\n    import continuous_threading\n\n    class CountingThread(continuous_threading.ContinuousThread):\n        def __init__(self):\n            super().__init__()\n            self.counter = 0\n\n        def _run(self):\n            self.counter += 1\n\n    th = CountingThread()\n    th.start()\n    time.sleep(0.1)\n    th.stop()  # or th.close() or th.join()\n\n    assert th.counter > 0\n    print(\"Simple context manager print caused %d thread iterations\" % th.counter)\n\n\nPausableThread\n--------------\nA continuous thread that can be stopped and started again.\n\n.. code-block:: python\n\n    import time\n    import continuous_threading\n\n\n    counter = [0]\n\n    def inc_counter():\n        counter[0] += 1\n\n    th = continuous_threading.PausableThread(target=inc_counter)\n\n    th.start()\n    time.sleep(0.1)\n\n    th.stop()\n    time.sleep(0.1)\n\n    value = counter[0]\n    assert value > 0\n\n    time.sleep(0.1)\n    assert value == counter[0]\n\n    th.start()\n    time.sleep(0.1)\n    assert counter[0] > value\n\n\nAgain this can be used as a context manager.\n.. code-block:: python\n\n    import time\n    import continuous_threading\n\n    class CountingThread(continuous_threading.PausableThread):\n        def __init__(self):\n            super().__init__()\n            self.counter = 0\n\n        def _run(self):\n            self.counter += 1\n\n    with CountingThread() as th:\n        time.sleep(0.1)\n        th.stop()\n        value = th.counter\n        assert value > 0\n\n        time.sleep(0.1)\n        assert value == th.counter\n\n        th.start()\n        time.sleep(0.1)\n        assert th.counter > value\n\n\nPeriodicThread\n--------------\n\nRun a function periodically.\n\n.. code-block:: python\n\n    import time\n    import continuous_threading\n\n\n    time_list = []\n\n    def save_time():\n        time_list.append(time.time())\n\n    th = continuous_threading.PeriodicThread(0.5, save_time)\n    th.start()\n\n    time.sleep(4)\n    th.join()\n\n    print(time_list)\n\n\nOperationThread\n---------------\nAdd data to a queue which will be operated on in a separate thread.\n\n.. code-block:: python\n\n    import time\n    import continuous_threading\n\n\n    values = []\n\n    def run_calculation(data1, data2):\n        values.append(data1 + data2)\n\n    th = continuous_threading.OperationThread(target=run_calculation)\n    th.start()\n    th.add_data(1, 1)\n    time.sleep(0.1)\n\n    assert len(values) > 0\n    assert values[0] == 2\n\n    th.add_data(2, 2)\n    th.add_data(3, 3)\n    th.add_data(4, 4)\n    th.add_data(5, 5)\n\n    time.sleep(0.1)\n    assert values == [2, 4, 6, 8, 10]\n\n\nProcess\n=======\n\nAll of the above Thread classes can also be used as a separate Process:\n  * Process\n  * ContinuousProcess\n  * PausableProcess\n  * PeriodicProcess\n  * OperationProcess\n  * CommandProcess\n\n\nCommandProcess\n--------------\n\nRun functions and commands on an object that lives in a different process.\n\n.. code-block:: python\n\n    from continuous_threading import CommandProcess\n\n\n    class MyObj(object):\n        def __init__(self, x=0, y=0):\n            self._x = x\n            self._y = y\n\n        def set_x(self, x):\n            self._x = x\n\n        def set_y(self, y):\n            self._y = y\n\n        def print_obj(self, msg=''):\n            print(self._x, self._y, msg)\n\n        def expect(self, x, y, msg=''):\n            assert self._x == x, 'X value {} does not match expected {}'.format(self._x, x)\n            assert self._y == y, 'Y value {} does not match expected {}'.format(self._y, y)\n            self.print_obj(msg=msg)\n\n\n    obj1 = MyObj()\n    obj2 = MyObj()\n\n    proc = CommandProcess(target=obj1)\n    proc.start()\n\n    # Send a command obj1\n    print('Main Obj1')  # Note: this prints way earlier\n    proc.send_cmd('print_obj', msg=\"Obj1\")\n    proc.send_cmd('set_x', 1)\n    proc.send_cmd('print_obj')\n    proc.send_cmd('set_y', 2)\n    proc.send_cmd('print_obj')\n    proc.send_cmd('expect', 1, 2, msg='Obj1 expected (1,2)')\n\n    # Send a command obj2\n    print('Main Obj2')  # Note: this prints way earlier\n    proc.obj = obj2\n    proc.send_cmd('print_obj', msg=\"Obj2\")\n    proc.send_cmd('set_x', 2)\n    proc.send_cmd('print_obj')\n    proc.send_cmd('set_y', 4)\n    proc.send_cmd('print_obj')\n    proc.send_cmd('expect', 2, 4, msg='Obj2 expected (2,4)')\n\n    # *** IGNORE COMMENTS: I implemented a caching system to save object state. ***\n    # Change back to obj1 (Remember this obj has attr 0,0 and when sent to other process will be a new obj 0,0).\n    # Cannot remember objects unless cached (saved in a dict) on the other process. id in process will be different.\n    #  ... NVM I'll just cache the obj value.\n    print('Main Obj1 again (Cached)')  # Note: this prints way earlier\n    proc.obj = obj1\n    proc.send_cmd('expect', 1, 2, msg=\"Obj1 Again (Cached)\")\n    proc.send_cmd('set_x', 3)\n    proc.send_cmd('print_obj')\n    proc.send_cmd('set_y', 5)\n    proc.send_cmd('print_obj')\n    proc.send_cmd('expect', 3, 5, msg='Obj1 Again expected (3,5)')\n\n    proc.join()", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/justengel/continuous_threading/archive/v1.1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/justengel/continuous_threading", "keywords": "threading continuous pausable", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "continuous-threading", "package_url": "https://pypi.org/project/continuous-threading/", "platform": "any", "project_url": "https://pypi.org/project/continuous-threading/", "project_urls": {"Download": "https://github.com/justengel/continuous_threading/archive/v1.1.1.tar.gz", "Homepage": "https://github.com/justengel/continuous_threading"}, "release_url": "https://pypi.org/project/continuous-threading/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Library to help manage threads that run continuously for a long time.", "version": "1.1.1"}, "last_serial": 6638272, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "33e358bc87fdda8a3f68a7c80027f584", "sha256": "9dbc5af43844810780754c10416bc5fcb97ec888ebaf7103bdbf366f6b4f77da"}, "downloads": -1, "filename": "continuous_threading-0.0.1.tar.gz", "has_sig": false, "md5_digest": "33e358bc87fdda8a3f68a7c80027f584", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7951, "upload_time": "2018-06-20T17:51:58", "upload_time_iso_8601": "2018-06-20T17:51:58.454415Z", "url": "https://files.pythonhosted.org/packages/fa/69/581768da97d3f8fd7955cbde38142ecb3ce6a31b3d544ddc9381a2aa61e5/continuous_threading-0.0.1.tar.gz"}], "1.0.0": [{"comment_text": "", "digests": {"md5": "19ff388665f84e137f5f014d457ed2f5", "sha256": "ca6522ba6d94bfde7fd5656d90ac228c5b054d44d379c56f30826cbb8918d25e"}, "downloads": -1, "filename": "continuous_threading-1.0.0.tar.gz", "has_sig": false, "md5_digest": "19ff388665f84e137f5f014d457ed2f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8103, "upload_time": "2018-06-20T17:58:29", "upload_time_iso_8601": "2018-06-20T17:58:29.943127Z", "url": "https://files.pythonhosted.org/packages/0b/f6/cb038fb23b86c4a06edcfd133d34d8cfe6c8cf1cb787b02d3fd4c1416039/continuous_threading-1.0.0.tar.gz"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9d2ab00b36b4cb4439776781c4572950", "sha256": "6ac98da78811b17b7f97d42579520903d02dc0515f7d20828e875a885199deb7"}, "downloads": -1, "filename": "continuous_threading-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9d2ab00b36b4cb4439776781c4572950", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8116, "upload_time": "2018-06-20T18:20:41", "upload_time_iso_8601": "2018-06-20T18:20:41.682068Z", "url": "https://files.pythonhosted.org/packages/77/5d/69a135d47cc4b93973c0de3dd3887a96e719e92e1c36e680337b93e626a5/continuous_threading-1.0.1.tar.gz"}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d3cb8b1933f3273e35e4d3ba85229731", "sha256": "7ff4d8fd1dbd06f0ada43e4e8f970fdfe2c53cc027328419c0b6549902e86196"}, "downloads": -1, "filename": "continuous_threading-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d3cb8b1933f3273e35e4d3ba85229731", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8165, "upload_time": "2018-08-06T11:43:10", "upload_time_iso_8601": "2018-08-06T11:43:10.423306Z", "url": "https://files.pythonhosted.org/packages/1f/c1/2e4bfb319da07373fac6e52111f3f21a3c83972c2025c4275b07503d1b90/continuous_threading-1.0.2.tar.gz"}], "1.0.3": [{"comment_text": "", "digests": {"md5": "dd3fd501c088a831381bd603a8c44d93", "sha256": "98dd547c2eb487443f42aa045fef854519ce0269da87b213de83321c66853d47"}, "downloads": -1, "filename": "continuous_threading-1.0.3.tar.gz", "has_sig": false, "md5_digest": "dd3fd501c088a831381bd603a8c44d93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8699, "upload_time": "2018-08-10T16:38:23", "upload_time_iso_8601": "2018-08-10T16:38:23.835361Z", "url": "https://files.pythonhosted.org/packages/b6/95/6ebe4afe41bc2da185d733a26bf6c6ef49596033746f4320894b0063329d/continuous_threading-1.0.3.tar.gz"}], "1.0.4": [{"comment_text": "", "digests": {"md5": "06081043dffd2988da7b03fea2d5fce5", "sha256": "81a91250ce1c367bac095fd4eb8e7a59b709de483bfcbc08b497b8f54d1927b0"}, "downloads": -1, "filename": "continuous_threading-1.0.4.tar.gz", "has_sig": false, "md5_digest": "06081043dffd2988da7b03fea2d5fce5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8704, "upload_time": "2018-08-16T16:53:39", "upload_time_iso_8601": "2018-08-16T16:53:39.709039Z", "url": "https://files.pythonhosted.org/packages/94/01/235a7004d8f48ca3b666201f04c3595a3fa4490065671d8919ec939b2647/continuous_threading-1.0.4.tar.gz"}], "1.0.5": [{"comment_text": "", "digests": {"md5": "4e265366bda1905f6336b161c34cb645", "sha256": "e6ca72f7a73603823aafa0f15cc4d10293fa7b66e3d493a94e6e31ba90af0ac8"}, "downloads": -1, "filename": "continuous_threading-1.0.5.tar.gz", "has_sig": false, "md5_digest": "4e265366bda1905f6336b161c34cb645", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8810, "upload_time": "2018-10-24T18:42:16", "upload_time_iso_8601": "2018-10-24T18:42:16.591708Z", "url": "https://files.pythonhosted.org/packages/90/63/2d31b398495a5c73b733cbd91ccc5385b7f4bcf09108956bb07ac369f03c/continuous_threading-1.0.5.tar.gz"}], "1.0.6": [{"comment_text": "", "digests": {"md5": "f0de41f3b8ce5eed771427ca56e50e0d", "sha256": "98fd97cf53c4c2f9bc55317228dbd3052734bf740be36955d6a899507fda37b7"}, "downloads": -1, "filename": "continuous_threading-1.0.6.tar.gz", "has_sig": false, "md5_digest": "f0de41f3b8ce5eed771427ca56e50e0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9008, "upload_time": "2019-01-02T20:42:09", "upload_time_iso_8601": "2019-01-02T20:42:09.805621Z", "url": "https://files.pythonhosted.org/packages/0f/58/0b0a8f870d06418c215f9b6b6a0dd18004e6d48a09c44c02fe34ca0603da/continuous_threading-1.0.6.tar.gz"}], "1.0.7": [{"comment_text": "", "digests": {"md5": "5525188dc8880402dcd72e12e90dc768", "sha256": "c65a4a9f3c6cf984d046c535eaa4a89381e2273639246dfdc840794eb75e1426"}, "downloads": -1, "filename": "continuous_threading-1.0.7.tar.gz", "has_sig": false, "md5_digest": "5525188dc8880402dcd72e12e90dc768", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8858, "upload_time": "2019-02-28T16:19:22", "upload_time_iso_8601": "2019-02-28T16:19:22.874570Z", "url": "https://files.pythonhosted.org/packages/80/f8/6172392084e1e0ffce09804b83d1267e9969e697a7c2af2931646ad95096/continuous_threading-1.0.7.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "25f03a59e4e76ffba55a4bea1fd5cbcd", "sha256": "8ff9aff360e5aa6e4d253a819af41f96a9cbba9bcb9f6d4dabdad295182b68f3"}, "downloads": -1, "filename": "continuous_threading-1.1.0.tar.gz", "has_sig": false, "md5_digest": "25f03a59e4e76ffba55a4bea1fd5cbcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12705, "upload_time": "2019-10-25T15:41:22", "upload_time_iso_8601": "2019-10-25T15:41:22.734197Z", "url": "https://files.pythonhosted.org/packages/8f/76/607cd6f609062642e48cbf4ba68a58fda3ad9eb7ed28ea47c5c8d282d625/continuous_threading-1.1.0.tar.gz"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "7272279eec2951513e7c70df63195124", "sha256": "e81e890cd2591ba146f96caab61192858f9ff9c6d9172953f1f1e13d71cf1f2d"}, "downloads": -1, "filename": "continuous_threading-1.1.1.tar.gz", "has_sig": false, "md5_digest": "7272279eec2951513e7c70df63195124", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12744, "upload_time": "2020-02-16T01:23:02", "upload_time_iso_8601": "2020-02-16T01:23:02.609839Z", "url": "https://files.pythonhosted.org/packages/03/5f/068e10857699d453e049da72d13dbc5a07777738f7be84de6674a0498272/continuous_threading-1.1.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "7272279eec2951513e7c70df63195124", "sha256": "e81e890cd2591ba146f96caab61192858f9ff9c6d9172953f1f1e13d71cf1f2d"}, "downloads": -1, "filename": "continuous_threading-1.1.1.tar.gz", "has_sig": false, "md5_digest": "7272279eec2951513e7c70df63195124", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12744, "upload_time": "2020-02-16T01:23:02", "upload_time_iso_8601": "2020-02-16T01:23:02.609839Z", "url": "https://files.pythonhosted.org/packages/03/5f/068e10857699d453e049da72d13dbc5a07777738f7be84de6674a0498272/continuous_threading-1.1.1.tar.gz"}]}