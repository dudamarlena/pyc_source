{"info": {"author": "Connor Ferster", "author_email": "connorferster@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Physics"], "description": "\n# Forallpeople: SI Units Library for Daily Calculation Work\n\nThe metric system (now SI system):\n*\"For all time. For all people.\"*\nNicolas de Caritat (Marquis de Condorcet)\n\n`forallpeople` is a robust library for performing units-aware calculations in Python.\nIt has a small code base and favours \"convention over configuration\", although the\nactual units environment you work in is fully customizable. It is Jupyter-ready and \ntested on Windows.\n\nIntended users: working engineers, scientists, teachers, and students who want to be\nable to check any calculations for dimension errors, print formatted calculation\nreports and summaries with Jupyter/IPython, and focus on productivity instead of\nfussing with managing units and dimensions.\n\n## Teaser in Jupyter\n\n<img src = \"https://github.com/connorferster/forallpeople/blob/master/Jupyter_example.PNG\">\n\n\n## Installing\n\nYou can install using pip:\n\n`pip install forallpeople`\n\n## Basic usage\n\nThe most basic use is just to import the library:\n\n`import forallpeople as si`\n\nThis will import the `Physical` class. It is the primary class in the module and is used to describe all physical quantities. \n`Physical` instances are **immutable**.\n\nUpon import, the SI base units are instantiated and are available in the namespace as the following variables:\n\n* `si.m` - meter\n* `si.kg` - kilogram\n* `si.s` - second\n* `si.A` - ampere\n* `si.cd` - candela\n* `si.K` - kelvin\n* `si.mol` - mole\n\nBecause we have not loaded an environment yet, all results from all calculations will\nbe shown in the form of a combination of the SI base units, e.g.:\n\n```python\n>>> area = 3*si.m * 4*si.m\n>>> area\n12.000 m\u00b2\n>>> force = 2500 * si.kg * si.m / si.s**2\n>>> force\n2500.000 kg\u00b7m\u00b7s\u207b\u00b2\n>>> force / area\n208.333 kg\u00b7m\u207b\u00b9\u00b7s\u207b\u00b2\n```\n\nThe resulting `force / area` calculation is in pascals (if you can recognize the dimensions).\n\nHowever, you would probably rather see the final units in *pascals*. To do this, you load an `Environment`.\n\n## Loading an environment\n\n`si.environment('default')`\n\nNow, the above calculation will appear more conventional:\n\n```python\n>>> area = 3*si.m * 4*si.m\n>>> force = 2500 * si.kg * si.m / si.s**2\n>>> force\n2.500 kN\n>>> force/area\n208.333 Pa\n```\n\nWhen you load an environment, whether it is the `default` environment or one you define, the *representation* of the units will change to fit the definitions in the environment. Environment definitions are *dimensional*, meaning, if you end up with a `Physical` of a dimension that matches a dimension in the environment, then when you ask to see your Physical instance (e.g. in a REPL), you will see it in the units defined by the dimensions.\n\nIt is important to note that, no matter what environment is loaded or not loaded, your Physical instances will always carry their value in the SI base units, e.g.:\n\n```python\n>>> pressure = force / area\n>>> pressure = 208.333 Pa\n>>> pressure.repr\n>>> 'Physical(value=208.33333333333334, dimensions=Dimensions(kg=1, m=-1, s=-2, A=0, cd=0, K=0, mol=0), factor=1, _precision=3)'\n```\n\nAdditionally, when you load an environment, the units defined in the environment will be instantiated  as `Physical` and you can utilize them as variables in calculations.\n\nThe `'default'` environment defines and loads the following units as variables:\n\n* `si.N` - newton\n* `si.Pa` - pascal\n* `si.J` - joule\n* `si.W` - watt\n* `si.C` - coulomb\n* `si.V` - volt\n* `si.F` - farad\n* `si.Ohm` - ohm\n* `si.S` - siemens\n* `si.Wb` - weber\n* `si.T` - tesla\n* `si.H` - henry\n* `si.lm` - lumen\n* `si.lx` - lux\n* `si.Bq` - becquerel\n* `si.Gy` - gray\n* `si.Sv` - sievert\n* `si.kat` - katal\n\n\nBecause the units of `si.N` are one of the `Physical` instances that have now been instantiated and loaded into the `si` namespace, you can perform this calculation directly: \n\n```python\n>>> area = 3*si.m * 4*si.m\n>>> force = 2500 * si.N\n>>> force / area\n>>> 208.333 Pa\n```\n\n## API\n\nEach `Physical` instance offers the following methods and properties:\n\n### Properties\n\n* `.value`: A `float` that represents the numerical value of the physical quantity in SI base units\n* `.dimensions`: A `Dimensions` object (a `NamedTuple`) that describes the dimension of the quantity as a vector\n* `.factor`: A `float` that represents a factor that the value should be multiplied by to linearly scale the quantity into an alternate unit system (e.g. US customary units or UK imperial) that is defined in SI units.\n* `.latex`: A `str` that represents the pretty printed `repr()` of the quanity in latex code.\n* `.html`: A `str` that represents the pretty printed `repr()` of the quantity in HTML code.\n* `.repr`: A `str` that represents the traditional machine readable `repr()` of the quantity: `Physical` instances default to a pretty printed `__repr__()` instead of a machine readable `__repr__()` because it makes them more compatible with other libraries (e.g. `numpy`, `pandas`, [handcalcs](https://github.com/connorferster/handcalcs), and `jupyter`).\n\n### Methods\n\nAlmost all methods return a new `Physical` because all instances are **immutable**.\n\n* `.round(self, n: int)`: Returns a `Physical` instance identical to `self` except with the display precision set to `n`. You can also call the python built-in `round()` on the instance to get the same behaviour.\n* `.sqrt(self, n: float)`: Returns a `Physical` that represents the square root of `self`. `n` can be set to any other number to compute alternate roots.\n* `.split(self)`: Returns a 2-tuple where the 0-th element is the `.value` of the quantity and the 1-th element is the `Physical` instance with a value set to `1` (i.e. just the dimensional part of the quantity). To reconstitute, multiply the two tuple elements together. This is useful to perform computations in `numpy` that only accept numerical input (e.g. `numpy.linalg.inv()`): the value can be computed separately from the dimension and then reconstituted afterwards.\n* `.in_units(self, unit_name: str = \"\")`: Returns a new `Physical` instance with a `.factor` corresponding to a dimensionally compatible unit defined in the `environment`. If `.in_units()` is called without any arguments, then a list of available units for that quantity is printed to `stdout`.\n\n## Calculations with \"empirical\" formulas (dimensionally inconsistent formulas)\n\nIt is not uncommon for engineering formulas to use formulas whose dimensions seem to magically appear on their own. The kinds of formulae are compatible with `forallpeople` if the \"hidden dimensions\" are recognized and accounted for by the user.\n\nExample: in the Canadian concrete design code it is recognized that the `sqrt(MPa)` results in units of `MPa` instead of `MPa\u2070'\u2075`. To compensate for this, because `forallpeople` requires units to dimensionally consistent, we have to multiply our result by `1 * MPa\u2070'\u2075`. \n\n```python\n>>> import forallpeople as si\n>>> si.environment('structural')\n>>> f_c = 35 * si.MPa\n>>> f_c_sqrt = f_c.sqrt() * (1*si.MPA ** 0.5)\n>>> f_c_sqrt\n5.916 MPa\n```\n\n\n## Using * imports\n\nForallpeople was designed to be used with `import *` for ease of use and to reduce re-typing, i.e. `si.m` becomes simply `m`. This also makes `forallpeople` more compatible with computational reporting packages such as [handcalcs](https://github.com/connorferster/handcalcs). \n\nIf one wishes to use `from forallpeople import *` with environments, it requires an additional step:\n\n```python\nfrom forallpeople import *\nenvironment('default') # or your own defined environment name\nfrom forallpeople import *\n```\n\nNote the import, loading an environment, and then importing again. \n\nThe reason for this is to allow the module to load the newly instantiated variable names into the namespace. In essence, when you import the first time, you import the basic variable names into your global namespace. When you load an environment, you load additional names into the *module's* namespace but, since you have not named the module's namespace, you cannot access them. It is only when you perform the import again, and python recognizes that there are now new elements in the module's namespace to import, that you will get the new variable names into your global namespace.\n\nHowever, using `import *` can also quickly clutter up one's namespace, especially if the user loads multiple environments: the variable names of the new `Physical` instances are simply appended to the global namespace.\n\n## How Physical instances work\n\n`forallpeople` is all about describing **physical quantities** and defines a single class, `Physical`, to describe them. `Physical` instances are composed of four components (as attributes): \n\n* `<instance>.value` = a `float` that is the numerical value of the quantity in the SI base units\n* `<instance>.dimensions` = a `NamedTuple`, called `Dimensions`, that describes the dimensionality of the physical quantity\n* `<instance>.factor` = a `float` that can be used to define a physical quantity in an alternate unit system that is linearly based upon the SI units (e.g. US customary units, imperial, etc.)\n* `<instance>._precision` = an `int` that describes the number of decimal places to display when the `Physical` instance is rendered through `.__repr__()`, default value is `3`.\n\nBecause `Physical` instances are immutable (just like `int`, `float`, and `bool`), the user cannot set these attributes directly. It also means that any operation operating on a `Physical` instance returns a new instance. As such, the intended way of creating new instances is as the result of calculations.\n\n### Dimension vectors\n\n`Physical` instances track the dimensions of their physical quantities by using vectors. The vector is stored in the `Dimensions` class, which is a `NamedTuple`. Using the vector library, [tuplevector](https://github.com/connorferster/tuplevector) (which is \"baked in\" to `forallpeople`), we can perform vector arithmetic on `Dimensions` objects directly. \n\n### Arithmetic on Physicals\n\nArithmetic on `Physical` instances work mostly how you would expect, with few caveats:\n\n* Addition/Subtraction: \n  * Two (or more) instances will add/sub if dimensions are equal\n  * One instance and one (or more) number(s) (`float`, `int`) will add/sub and assume the units of the instance\n  * e.g. `a = 5*si.m + 2*si.m` ,  `b = 5*si.kg + 10`\n* Multiplication:\n  * Instances will multiply with each other and their dimensions will combine\n  * Instances will multiply with numbers and will assume the units of instance(s) that were also a part of the multiplication\n  * e.g. `c = 12 *si.m * 2*si.kg * si.s` , `d = 4.5*si.m * 2.3`\n* Division (true division):\n  * Instances will divide by each other and their dimensions will combine\n  * Instances will divide with numbers and will assume the units of the instance(s) that were also a part of the division\n  * If two instances of the same dimension are divided, the result will be a `float` (i.e. the units are completely cancelled out; there is no \"dimensionless\" `Physical`: either a quantity has units as a `Physical` or it is a number)\n  * e.g. `5 * si.m / (2 * si.m)` -> `2.5`\n* Floor division:\n  * Is intentionally not implemented in `Physical`. This is because it creates ambiguity when working within an environment where units with factors are defined (does floor division return the value of floor division of the SI base unit value or the apparent value after multiplied by it's `.factor`? Either would return results that may be unexpected.)\n  * Floor division can be achieved by using true division and calling `int()` on the result, although this returns an `int` and not a `Physical`\n* Power:\n  * You can raise an instance to any power, if it is a number (`int`, `float`). You cannot raise a Physical instance to the power of another instance (what would that even mean?)\n* Abs:\n  * Returns the absolute value of the instance\n* Neg:\n  * Equivalent to instance * -1\n\n\n\n## Auto-prefixing\n\n`forallpeople` employs \"auto-prefixing\" and, as such, does not specifically allow the user to choose the order of magnitude to display the unit in. In this way, the library chooses the principal of \"convention over configuration\". For example:\n\n```python\n>>> current = 0.5 * A\n>>> current\n500.000 mA # 'current' is auto-prefixed to 500 milliamperes\n>>> resistance = 1200 * Ohm\n>>> resistance\n1.200 k\u03a9 # 'resistance' is auto-prefixed to kilo-ohms\n>>> voltage = current * resistance\n>>> voltage\n600.000 V # 'voltage' does not have a prefix because its value is above 1 V but less than 1000 V\n```\n\nThe prefixes of the entire SI units system (from `10**-24` to `10**24`) are built-in to the `Physical` class.\n\nHowever, auto-prefixing is only triggered in certain, intuitive circumstances:\n\n1. The unit is **one of** `m`, `kg`, `s`, `A`, `cd`, `K`, or  `mol` (i.e. the SI base units)\n2. The unit is a derived unit in the SI unit system (i.e. it is defined in the environment and has a `.factor == 1`)\n\nThis means that auto-prefixing is not used in the following circumstances:\n\n1. The unit is defined in the environment with a factor (e.g. `lb`: it would not make sense to have a `klb` or a `mlb`)\n2. The unit is a compound unit but not defined in the environment (e.g. it would not make sense to have a `kkg*m/s`)\n\nWhen the auto-prefixing is triggered for a unit and that unit is of a power other than `1`, then auto-prefixing considers the prefix to also be part of the unit's power. For example:\n\n```python\n>>> a = 5000 * si.m\n>>> a\n5.000 km\n>>> a**2\n25.000 km\u00b2 # This may seem intuitive but it's important to remember that the 'kilo' prefix is also being squared\n>>> b = 500000 * si.m \n>>> b\n500.000 km\n>>> b**2\n250000.000 km\u00b2 # Why isn't this being shown as 250 Mm\u00b2? Because it would take 1,000,000 km\u00b2 to make a Mm\u00b2. This is only 250,000 km\u00b2.\n```\n\n## How to define your own environments\n\nAn environment is simply a JSON document stored within the package folder in the following format:\n\n    \"Name\": {\n        \"Dimension\": [0,0,0,0,0,0,0],\n        \"Value\": 1,\n        \"Factor\": 1,\n        \"Symbol\": \"\"}\n\n\nFor example, if you wanted to create an environment that defined only kilopascals and pounds-force in US customary units, you would do it like this:\n\n    \"kPa\": {\n        \"Dimension\": [1,-1,-2,0,0,0,0],\n        \"Value\": 1000},\n    \"lb-f\": {\n        \"Dimension\": [1, 1, -2, 0, 0, 0, 0],\n        \"Factor\": \"1/0.45359237/9.80665\",\n        \"Symbol\": \"lb\"}\n\n\n* Note, JSON does not allow comments; comments are included in this example for explanation purposes, only. If you copy/paste this example into your JSON environemnt file, be sure to remove the comments.\n* Note also that arithmetical expressions in Factor are eval'd to allow for the most accurate input of factors; to prevent a security risk, Factor is regex'd to ensure that only numbers and arithmetic symbols are in Factor and not any alphabetic characters (see Environment._load_environment in source code to validate).\n\n\n## REPLs and Jupyter Notebook/Lab\n\n`forallpeople` prioritizes *usage conventions* over *python conventions*. Specifically, the library *deliberately* switches the intentions behind the `__repr__()` and `__str__()` methods: `__repr__()` will give the pretty printed version and `__str__()` will give a version of the unit that can be used to recreate the unit. As such, it becomes intuitive to use within any python repl and it really shines when used in a Jupyter Notebook. This also makes it natuarlly compatible with other common python libraries such as `pandas` and `numpy`.\n\n## Using Physicals with Numpy\n\n`Physical` instances can be used with many `numpy` operations. See below example:\n\n```python\n>>> a = 5 * si.kN\n>>> b = 3.5 * si.kN\n>>> c = 7.7 * si.kN\n>>> d = 6.6 * si.kN\n>>> m1 = np.matrix([[a, b], [b, a]])\n>>> m2 = np.matrix([[c, d], [d, c]])\n>>> m1\nmatrix([\n[5.000 kN, 3.500 kN],\n[3.500 kN, 5.000 kN]], dtype=object)\n>>> m2\nmatrix([\n[7.700 kN, 6.600 kN],\n[6.600 kN, 7.700 kN]], dtype=object)\n>>> m1 + m2\nmatrix([\n[12.700 kN, 10.100 kN],\n[10.100 kN, 12.700 kN]], dtype=object)\n>>> m1 @ m2\nmatrix([\n[61.600 kN\u00b2, 59.950 kN\u00b2],\n[59.950 kN\u00b2, 61.600 kN\u00b2]], dtype=object)\n>>> m2 - m1\nmatrix([\n[2.700 kN, 3.100 kN],\n[3.100 kN, 2.700 kN]], dtype=object)\n>>> m1 / m2\nmatrix([\n[0.6493506493506493, 0.5303030303030303],\n[0.5303030303030303, 0.6493506493506493]], dtype=object)\n```\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/connorferster/forallpeople", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "forallpeople", "package_url": "https://pypi.org/project/forallpeople/", "platform": "", "project_url": "https://pypi.org/project/forallpeople/", "project_urls": {"Homepage": "https://github.com/connorferster/forallpeople"}, "release_url": "https://pypi.org/project/forallpeople/1.2.0/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "SI units library for daily calculation work.", "version": "1.2.0"}, "last_serial": 7051365, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d1056bd3dfd251f731df8b45c286d333", "sha256": "a59de900f91069edb3aa32902f950178a1eadde41ffa58926ec48e1b40270970"}, "downloads": -1, "filename": "forallpeople-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d1056bd3dfd251f731df8b45c286d333", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 14847, "upload_time": "2019-05-21T03:52:52", "upload_time_iso_8601": "2019-05-21T03:52:52.737682Z", "url": "https://files.pythonhosted.org/packages/a6/3c/5b4b93b24a44ae46d6c88f5767b2f01bcc6075af0dc10f78bc01b7015641/forallpeople-1.0.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "79b91fc8fdd339cc60e577ab7e84fc0f", "sha256": "2cbd2b6bc123dba61d41cf5141d01e09806120b12bc5429d7251e58bd3944741"}, "downloads": -1, "filename": "forallpeople-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "79b91fc8fdd339cc60e577ab7e84fc0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 14844, "upload_time": "2019-05-21T03:52:54", "upload_time_iso_8601": "2019-05-21T03:52:54.834335Z", "url": "https://files.pythonhosted.org/packages/d3/5f/91b260d7315fb3e8461252d830177985c350df7ada5167be3c9426cfdb27/forallpeople-1.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "b13ca1214ebe65d7cc29498b0d9cdbd3", "sha256": "85bb6278a60074ffa189a0b1c696b1d5b55d682247bbcaa0ab729d6ba8589329"}, "downloads": -1, "filename": "forallpeople-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b13ca1214ebe65d7cc29498b0d9cdbd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 14543, "upload_time": "2019-05-21T03:52:56", "upload_time_iso_8601": "2019-05-21T03:52:56.234864Z", "url": "https://files.pythonhosted.org/packages/a3/a6/9279525e4e35a0637eeee6204ccc636a9fcd95bb5007e034294d86a7f8ba/forallpeople-1.0.0.tar.gz"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "1117f4d0033040ebfe7fd01dd275e4b0", "sha256": "01bb5633e2cece9479734993638ec5adef9655c784ccdb8ed000466ff059b1db"}, "downloads": -1, "filename": "forallpeople-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1117f4d0033040ebfe7fd01dd275e4b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 16683, "upload_time": "2019-05-22T00:09:36", "upload_time_iso_8601": "2019-05-22T00:09:36.491023Z", "url": "https://files.pythonhosted.org/packages/24/b2/de035e1c9bc6c76a4190960d7187da001931d5516169bede2f52db5ba928/forallpeople-1.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "e2109c7bc872425d8b98bc6553aec88d", "sha256": "f5c6caf2b47032a08ed75569e9029cf258fc968cb7d18823606f1ca80d78f9f5"}, "downloads": -1, "filename": "forallpeople-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e2109c7bc872425d8b98bc6553aec88d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 15409, "upload_time": "2019-05-22T00:09:38", "upload_time_iso_8601": "2019-05-22T00:09:38.011181Z", "url": "https://files.pythonhosted.org/packages/02/f4/fcea62bcec09d41a12c874d9cfdf1aec7b285d684dc79cf3862ebb31ff1d/forallpeople-1.0.1.tar.gz"}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e36fb016c0b08beda26fb6d4651df15b", "sha256": "9d0f737cdd08d9440bc1d684abb8d029661e5ab8bffe7732643abe0aef344ee7"}, "downloads": -1, "filename": "forallpeople-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e36fb016c0b08beda26fb6d4651df15b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 16862, "upload_time": "2019-05-22T01:54:15", "upload_time_iso_8601": "2019-05-22T01:54:15.009277Z", "url": "https://files.pythonhosted.org/packages/60/18/01c4efe7fa9b9d3ebd66dc414345620ac8e3b52c89cadc685b568d960221/forallpeople-1.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a21d8eb05a3421eae436019bede3edca", "sha256": "83183cb4320a3c4949b433bd1d80f2cf449fa2d1b7ca16b4cea2bc2b941838f6"}, "downloads": -1, "filename": "forallpeople-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a21d8eb05a3421eae436019bede3edca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 16406, "upload_time": "2019-05-22T01:54:16", "upload_time_iso_8601": "2019-05-22T01:54:16.629574Z", "url": "https://files.pythonhosted.org/packages/94/32/295f052f57d81ca29b2e07efb8cae14b483a383468120c4bafbe722fd5b7/forallpeople-1.0.2.tar.gz"}], "1.0.3": [{"comment_text": "", "digests": {"md5": "245bf692000677b186135d91b2ed580b", "sha256": "114e8e803beb755e7b5bc96571f5e38b0ddf76837ff211096580dba1068b04f8"}, "downloads": -1, "filename": "forallpeople-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "245bf692000677b186135d91b2ed580b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 16916, "upload_time": "2019-05-27T21:13:35", "upload_time_iso_8601": "2019-05-27T21:13:35.676787Z", "url": "https://files.pythonhosted.org/packages/e7/53/0207feffd4fb42ca132ffb141b523b96d174ca12c244b9f0e3327ef9688a/forallpeople-1.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "ebe0d26174c9ae2bc8ce7b5f9f0431dc", "sha256": "ca2ac9895e2017cbd5403213100b4d7071b8705fa48ecad985b392581376a6d5"}, "downloads": -1, "filename": "forallpeople-1.0.3.tar.gz", "has_sig": false, "md5_digest": "ebe0d26174c9ae2bc8ce7b5f9f0431dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 16453, "upload_time": "2019-05-27T21:13:37", "upload_time_iso_8601": "2019-05-27T21:13:37.083995Z", "url": "https://files.pythonhosted.org/packages/d5/a0/c9ca4aacfb76eee46c11711c907070b6c7f96fc6ea58ff659b4e850e7a50/forallpeople-1.0.3.tar.gz"}], "1.0.4": [{"comment_text": "", "digests": {"md5": "3f8f0988a44997698710a1adb08f735e", "sha256": "cbc9f94aa6d270f1a289632e024c1ea66fb89fe565e9f3622f1da14c2b44f8a4"}, "downloads": -1, "filename": "forallpeople-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3f8f0988a44997698710a1adb08f735e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 16926, "upload_time": "2019-05-27T21:40:30", "upload_time_iso_8601": "2019-05-27T21:40:30.792956Z", "url": "https://files.pythonhosted.org/packages/97/54/325af7d02d62b15217e33638968c26f4287fc49e2849430afcb324e04049/forallpeople-1.0.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "e66edd814a20108e2d55ff6950b35307", "sha256": "030b5cff0a74aa7a25e80812fe55c019f2a59b9de307859396e24407884ef748"}, "downloads": -1, "filename": "forallpeople-1.0.4.tar.gz", "has_sig": false, "md5_digest": "e66edd814a20108e2d55ff6950b35307", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 16472, "upload_time": "2019-05-27T21:40:32", "upload_time_iso_8601": "2019-05-27T21:40:32.266834Z", "url": "https://files.pythonhosted.org/packages/b6/53/7e5e4ccfa3aafb2c5e40d02053159a2b75cfa5a8b782c01f9bdb7d7ce047/forallpeople-1.0.4.tar.gz"}], "1.0.5": [{"comment_text": "", "digests": {"md5": "cf13cc278fc200a1aefd2b8097a9edab", "sha256": "f322324c1db2aaa82151fcf0e5fa815a410e52ca6c5757514264b06b3bb3622a"}, "downloads": -1, "filename": "forallpeople-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "cf13cc278fc200a1aefd2b8097a9edab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 16965, "upload_time": "2019-06-06T23:43:43", "upload_time_iso_8601": "2019-06-06T23:43:43.446372Z", "url": "https://files.pythonhosted.org/packages/3f/a6/f8d9a350c788b359140ade81b2ac875a76ce84135cd313a2bfd53d860c26/forallpeople-1.0.5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "76ba30f3a81bc1a928030ee5e5cd6847", "sha256": "46464e6b465160181fb7b90e920704dd7a16b433b6595e2955f8963d6604b45b"}, "downloads": -1, "filename": "forallpeople-1.0.5.tar.gz", "has_sig": false, "md5_digest": "76ba30f3a81bc1a928030ee5e5cd6847", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 16494, "upload_time": "2019-06-06T23:43:45", "upload_time_iso_8601": "2019-06-06T23:43:45.084385Z", "url": "https://files.pythonhosted.org/packages/c9/5a/40d1fb0765a778f5d8a9ba6ffe863d7e5802ed5e3067ca3f8f4f4529a89f/forallpeople-1.0.5.tar.gz"}], "1.0.6": [{"comment_text": "", "digests": {"md5": "7940d22aafcad268085967dbc728da6a", "sha256": "e8fdcec84f3bd1b215c82b25345f73a337289d8df630a8b0261b7b7bdb318c18"}, "downloads": -1, "filename": "forallpeople-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "7940d22aafcad268085967dbc728da6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 16975, "upload_time": "2019-06-07T00:23:31", "upload_time_iso_8601": "2019-06-07T00:23:31.844616Z", "url": "https://files.pythonhosted.org/packages/cf/13/328fcc217095f1ce82e62d39d2731a8fbf76f0014359fe0bdeb99c940deb/forallpeople-1.0.6-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "15e5c2b96252a7a2e3afefa7ad2eaf9c", "sha256": "b91c54fe0f76d6ad85fbd679e76abfafdd429bd3bfd6db0edd9cba260b59c8b3"}, "downloads": -1, "filename": "forallpeople-1.0.6.tar.gz", "has_sig": false, "md5_digest": "15e5c2b96252a7a2e3afefa7ad2eaf9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 16500, "upload_time": "2019-06-07T00:23:33", "upload_time_iso_8601": "2019-06-07T00:23:33.613239Z", "url": "https://files.pythonhosted.org/packages/63/8d/1c3fc633252c01de234e93d5409b004c950ac3a42f0157bd9126caa008cf/forallpeople-1.0.6.tar.gz"}], "1.0.7": [{"comment_text": "", "digests": {"md5": "1bce71e73bd85be4cd538b88b244a3e8", "sha256": "db968e5ac6e00ab8982bacb214a102b4af5450907cf915be10ab2ff706d4834f"}, "downloads": -1, "filename": "forallpeople-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1bce71e73bd85be4cd538b88b244a3e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 16982, "upload_time": "2019-06-27T04:57:43", "upload_time_iso_8601": "2019-06-27T04:57:43.235203Z", "url": "https://files.pythonhosted.org/packages/66/68/efc139bbf13761bc00f3d9e2a42502e95e01af44272d53264942b23b2756/forallpeople-1.0.7-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0deb6442c0b038093b2922513ec7a703", "sha256": "258e3d24b020bb8f14d772b74ecca96d89b5c9ae4619c44dbc9c6ef77d36bb84"}, "downloads": -1, "filename": "forallpeople-1.0.7.tar.gz", "has_sig": false, "md5_digest": "0deb6442c0b038093b2922513ec7a703", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 16509, "upload_time": "2019-06-27T04:57:44", "upload_time_iso_8601": "2019-06-27T04:57:44.854323Z", "url": "https://files.pythonhosted.org/packages/04/b5/30d328106b5cc5a90b41018c8e3d79fc3f952b4cb6b845168a09668a8ae5/forallpeople-1.0.7.tar.gz"}], "1.0.8": [{"comment_text": "", "digests": {"md5": "9e21725243a01dc400c6473f499730d3", "sha256": "0c305717e2390cea28723d9232800aa12cd9f4049b0accf7efbf05180074575d"}, "downloads": -1, "filename": "forallpeople-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "9e21725243a01dc400c6473f499730d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 23960, "upload_time": "2020-02-07T04:05:17", "upload_time_iso_8601": "2020-02-07T04:05:17.158253Z", "url": "https://files.pythonhosted.org/packages/99/55/8d4c7adecf238369b0aa248b9e098c29a46a9db9d86f76905bbf5e44fba2/forallpeople-1.0.8-py3-none-any.whl"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a57bb759e6bea767fbb879ff985d50ed", "sha256": "3b72f29a2e420ef34d42ed0b1c4a1da764b52c43922d281f04ea15e5460cd467"}, "downloads": -1, "filename": "forallpeople-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a57bb759e6bea767fbb879ff985d50ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 24458, "upload_time": "2020-02-24T06:05:01", "upload_time_iso_8601": "2020-02-24T06:05:01.904687Z", "url": "https://files.pythonhosted.org/packages/35/9f/4e065019b9dd4002dcb4cc78c40527f6c2dbefd6ac06d0dd9779ec55d68c/forallpeople-1.1.0-py3-none-any.whl"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "9cc62a4021bda0def6b546ff8cf7d5ea", "sha256": "43476fcd74bff5292d3345d95277cf03de430d22df37bf9045719a8257c897ab"}, "downloads": -1, "filename": "forallpeople-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9cc62a4021bda0def6b546ff8cf7d5ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 24412, "upload_time": "2020-02-24T06:17:35", "upload_time_iso_8601": "2020-02-24T06:17:35.632229Z", "url": "https://files.pythonhosted.org/packages/d7/28/999802601a73ce0d9be87501388e8e7dc9c69920a80e06742e5b6f0d6ebf/forallpeople-1.1.1-py3-none-any.whl"}], "1.2.0": [{"comment_text": "", "digests": {"md5": "5f107c59cb6f6f937945789ab69d07a2", "sha256": "7e3121f10ff1b327557e4be9670a49dadf305a2357f338178530033d381a5211"}, "downloads": -1, "filename": "forallpeople-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5f107c59cb6f6f937945789ab69d07a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 25476, "upload_time": "2020-04-19T04:30:46", "upload_time_iso_8601": "2020-04-19T04:30:46.984511Z", "url": "https://files.pythonhosted.org/packages/62/80/8ff64aa6bdf43411c2d891f4f42ed5e066901024fbc20a7da3027a5a54c6/forallpeople-1.2.0-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f107c59cb6f6f937945789ab69d07a2", "sha256": "7e3121f10ff1b327557e4be9670a49dadf305a2357f338178530033d381a5211"}, "downloads": -1, "filename": "forallpeople-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5f107c59cb6f6f937945789ab69d07a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 25476, "upload_time": "2020-04-19T04:30:46", "upload_time_iso_8601": "2020-04-19T04:30:46.984511Z", "url": "https://files.pythonhosted.org/packages/62/80/8ff64aa6bdf43411c2d891f4f42ed5e066901024fbc20a7da3027a5a54c6/forallpeople-1.2.0-py3-none-any.whl"}]}