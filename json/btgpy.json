{"info": {"author": "Briter Gonzalez", "author_email": "btg.developers@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "BTG DATA SCIENCE LAB\n=========================================\n\nThis package provides tools for data science\n\n\nInstallation\n------------\n\nYou can install the python package using this command line:\n``` bash\npip install btgPy\n```\n\nCreating a CHAID Tree\n---------------\n``` python\nfrom btgPy import btgLab\nimport numpy as np\nimport pandas as pd\n\n## create the data\nndarr = np.array(([1, 2, 3] * 5) + ([2, 2, 3] * 5)).reshape(10, 3)\ndf = pd.DataFrame(ndarr)\ndf.columns = ['a', 'b', 'c']\narr = np.array(([1] * 5) + ([2] * 5))\ndf['d'] = arr\n\n>>> df\n   a  b  c  d\n0  1  2  3  1\n1  1  2  3  1\n2  1  2  3  1\n3  1  2  3  1\n4  1  2  3  1\n5  2  2  3  2\n6  2  2  3  2\n7  2  2  3  2\n8  2  2  3  2\n9  2  2  3  2\nlab = btgLab()\nlab.readDataFrame(df,4*['nominal'])\nindep_variables = ['a','b','c']\nalpha_merge = 0.05\nmax_depth = 2\nmin_parent_node_size = 30\nmin_child_node_size = 0\n#This will save a .csv with the dummi variables of the node\nsave_dataset = True\n#This will save a file with the image of the tree\nrender = True\n\ntree = lab.chaid(indep_variables,'d',alpha_merge,max_depth,min_parent_node_size,min_child_node_size,save_dataset,render)\n>>> tree.print_tree()\n([], {1: 5, 2: 5}, ('a', p=0.001565402258, score=10.0, groups=[[1], [2]]), dof=1))\n\u251c\u2500\u2500 ([1], {1: 5, 2: 0}, <Invalid Chaid Split>)\n\u2514\u2500\u2500 ([2], {1: 0, 2: 5}, <Invalid Chaid Split>)\n```\nYou can also read the data from a csv file:\n``` python\nfrom btgPy import btgLab\n\nlab.read(\"demo.csv\")\nindep_variables = ['a','b','c']\nalpha_merge = 0.05\nmax_depth = 2\nmin_parent_node_size = 30\nmin_child_node_size = 0\n#This will save a .csv with the dummi variables of the node\nsave_dataset = True\n#This will save a file with the image of the tree\nrender = True\n\ntree = lab.chaid(indep_variables,'d',alpha_merge,max_depth,min_parent_node_size,min_child_node_size,save_dataset,render)\n>>> tree.print_tree()\n([], {1: 5, 2: 5}, ('a', p=0.001565402258, score=10.0, groups=[[1], [2]]), dof=1))\n\u251c\u2500\u2500 ([1], {1: 5, 2: 0}, <Invalid Chaid Split>)\n\u2514\u2500\u2500 ([2], {1: 0, 2: 5}, <Invalid Chaid Split>)\n```\nCsv (demo.csv) file must have this structure: (types,titles,values)\n\n``` python\n\nnominal,nominal,nominal,nominal\na,b,c,d\n1,2,3,1\n1,2,3,1\n1,2,3,1\n1,2,3,1\n1,2,3,1\n2,2,3,2\n2,2,3,2\n2,2,3,2\n2,2,3,2\n2,2,3,2\n```\nThis is the inner code of the CHAID Tree and how to use it:\n---------------\n\n``` python\nfrom btgPy.CHAID import Tree\n\n## create the data\nndarr = np.array(([1, 2, 3] * 5) + ([2, 2, 3] * 5)).reshape(10, 3)\ndf = pd.DataFrame(ndarr)\ndf.columns = ['a', 'b', 'c']\narr = np.array(([1] * 5) + ([2] * 5))\ndf['d'] = arr\n\n>>> df\n   a  b  c  d\n0  1  2  3  1\n1  1  2  3  1\n2  1  2  3  1\n3  1  2  3  1\n4  1  2  3  1\n5  2  2  3  2\n6  2  2  3  2\n7  2  2  3  2\n8  2  2  3  2\n9  2  2  3  2\n\n## set the CHAID input parameters\nindependent_variable_columns = ['a', 'b', 'c']\ndep_variable = 'd'\n\n## create the Tree via pandas\ntree = Tree.from_pandas_df(df, dict(zip(independent_variable_columns, ['nominal'] * 3)), dep_variable)\n## create the same tree, but without pandas helper\ntree = Tree.from_numpy(ndarr, arr, split_titles=['a', 'b', 'c'], min_child_node_size=5)\n## create the same tree using the tree constructor\ncols = [\n  NominalColumn(ndarr[:,0], name='a')\n  NominalColumn(ndarr[:,1], name='b')\n  NominalColumn(ndarr[:,2], name='c')\n]\ntree = Tree(cols, NominalColumn(arr, name='d'), {'min_child_node_size': 5})\n\n>>> tree.print_tree()\n([], {1: 5, 2: 5}, ('a', p=0.001565402258, score=10.0, groups=[[1], [2]]), dof=1))\n\u251c\u2500\u2500 ([1], {1: 5, 2: 0}, <Invalid Chaid Split>)\n\u2514\u2500\u2500 ([2], {1: 0, 2: 5}, <Invalid Chaid Split>)\n\n## to get a LibTree object,\n>>> tree.to_tree()\n<treelib.tree.Tree object at 0x114e2e350>\n\n## the different nodes of the tree can be accessed like\nfirst_node = tree.tree_store[0]\n\n>>> first_node\n([], {1: 5, 2: 5}, ('a', p=0.001565402258, score=10.0, groups=[[1], [2]]), dof=1))\n\n## the properties of the node can be access like\n>>> first_node.members\n{1: 5, 2: 5}\n\n## the properties of split can be accessed like\n>>> first_node.split.p\n0.001565402258002549\n>>> first_node.split.score\n10.0\n```\n\nCreating a Tree using Bartlett's or Levene's Significance Test for Continuous Variables\n----------\n\nWhen the dependent variable is continuous, the chi-squared test does not work due to very low frequencies of values across subgroups. As a consequence, and because the F-test is very susceptible to deviations from normality, the normality of the dependent set is determined and [Bartlett's test](https://en.wikipedia.org/wiki/Bartlett%27s_test) for significance is used when the data is normally distributed (although the subgroups may not necessarily be so) or [Levene's test](https://en.wikipedia.org/wiki/Levene%27s_test) is used when the data is non-normal.\n\n``` python\nfrom btgPy.CHAID import Tree\n\n## create the data\nndarr = np.array(([1, 2, 3] * 5) + ([2, 2, 3] * 5)).reshape(10, 3)\ndf = pd.DataFrame(ndarr)\ndf.columns = ['a', 'b', 'c']\ndf['d'] = np.random.normal(300, 100, 10)\nindependent_variable_columns = ['a', 'b', 'c']\ndep_variable = 'd'\n\n>>> df\n   a  b  c           d\n0  1  2  3  262.816747\n1  1  2  3  240.139085\n2  1  2  3  204.224083\n3  1  2  3  231.024752\n4  1  2  3  263.176338\n5  2  2  3  440.371621\n6  2  2  3  221.762452\n7  2  2  3  197.290268\n8  2  2  3  275.925549\n9  2  2  3  238.471850\n\n## create the Tree via pandas\ntree = Tree.from_pandas_df(df, dict(zip(independent_variable_columns, ['nominal'] * 3)), dep_variable, dep_variable_type='continuous')\n\n## print the tree (though not enough power to split)\n>>> tree.print_tree()\n([], {'s.t.d': 86.562258585515579, 'mean': 297.52027436303212}, <Invalid Chaid Split>)\n```\n\nParameters\n----------\n* `df`: Pandas DataFrame\n* `i_variables: Dict<string, string>`: Independent variable column names as keys and the type as the values (nominal or ordinal)\n* `d_variable: String`: Dependent variable column name\n* `opts: {}`:\n  * `alpha_merge: Float (default = 0.05)`: If the respective test for a given pair of predictor categories is not statistically significant as defined by an `alpha_merge` value, the least significant predictor categories are merged and the splitting of the node is attempted with the newly formed categories\n  * `max_depth: Integer (default = 2)`: The maximum depth of the tree\n  * `min_parent_node_size: Float (default = 30)`: The minimum number of respondents required for a split to occur on a particular node\n  * `min_child_node_size: Float (default = 0)`: If the split of a node results in a child node whose node size is less than `min_child_node_size`, child nodes that have too few cases (as with this minimum) will merge with the most similar child node as measured by the largest of the p-values. However, if the resulting number of child nodes is 1, the node will not be split.\n  * `split_threshold: Float (default = 0)`: The split threshold when bucketing root node surrogate splits\n  * `weight: String (default = None)`: The name of the weight column\n  * `dep_variable_type (default = categorical, other_options = continuous)`: Whether the dependent variable is 'categorical' or 'continuous'\nRunning from the Command Line\n-----------------------------\n\nYou can play around with the repo by cloning and running this from the command line:\n\n```\npython -m btgPy.CHAID tests/data/titanic.csv survived sex embarked --max-depth 4 --min-parent-node-size 2 --alpha-merge 0.05\n```\n\nIt calls the `print_tree()` method, which prints the tree to terminal:\n\n``` python\n([], {0: 809, 1: 500}, (sex, p=1.47145310169e-81, chi=365.886947811, groups=[['female'], ['male']]))\n\u251c\u2500\u2500 (['female'], {0: 127, 1: 339}, (embarked, p=9.17624191599e-07, chi=24.0936494474, groups=[['C', '<missing>'], ['Q', 'S']]))\n\u2502   \u251c\u2500\u2500 (['C', '<missing>'], {0: 11, 1: 104}, <Invalid Chaid Split>)\n\u2502   \u2514\u2500\u2500 (['Q', 'S'], {0: 116, 1: 235}, <Invalid Chaid Split>)\n\u2514\u2500\u2500 (['male'], {0: 682, 1: 161}, (embarked, p=5.017855245e-05, chi=16.4413525404, groups=[['C'], ['Q', 'S']]))\n    \u251c\u2500\u2500 (['C'], {0: 109, 1: 48}, <Invalid Chaid Split>)\n    \u2514\u2500\u2500 (['Q', 'S'], {0: 573, 1: 113}, <Invalid Chaid Split>)\n```\n\nor to test the continuous dependent variable case:\n\n```\npython -m CHAID tests/data/titanic.csv fare sex embarked --max-depth 4 --min-parent-node-size 2 --alpha-merge 0.05 --dependent-variable-type continuous\n```\n\n``` python\n([], {'s.t.d': 51.727293077231302, 'mean': 33.270043468296414}, (embarked, p=8.46027456424e-24, score=55.3476155546, groups=[['C'], ['Q', '<missing>'], ['S']]), dof=1308))\n\u251c\u2500\u2500 (['C'], {'s.t.d': 84.029951444532529, 'mean': 62.336267407407405}, (sex, p=0.0293299541476, score=4.7994643184, groups=[['female'], ['male']]), dof=269))\n\u2502   \u251c\u2500\u2500 (['female'], {'s.t.d': 90.687664523113241, 'mean': 81.12853982300885}, <Invalid Chaid Split>)\n\u2502   \u2514\u2500\u2500 (['male'], {'s.t.d': 76.07029674707077, 'mean': 48.810619108280257}, <Invalid Chaid Split>)\n\u251c\u2500\u2500 (['Q', '<missing>'], {'s.t.d': 15.902095006812658, 'mean': 13.490467999999998}, <Invalid Chaid Split>)\n\u2514\u2500\u2500 (['S'], {'s.t.d': 37.066877311088625, 'mean': 27.388825164113786}, (sex, p=3.43875930713e-07, score=26.3745361415, groups=[['female'], ['male']]), dof=913))\n    \u251c\u2500\u2500 (['female'], {'s.t.d': 48.971933059814894, 'mean': 39.339305154639177}, <Invalid Chaid Split>)\n    \u2514\u2500\u2500 (['male'], {'s.t.d': 28.242580058030033, 'mean': 21.806819261637241}, <Invalid Chaid Split>)\n```\n\nNote that the frequency of the dependent variable is replaced with the standard deviation and mean of the continuous set at each node and that any NaNs in the dependent set are automatically converted to 0.0.\n\nGenerating Splitting Rules\n----------\nAppend `--rules` to the cli or call `tree.classification_rules(node)` (either pass in the node or if node is None then it will return all splitting rules)\n\n```\npython -m btgPy.CHAID tests/data/titanic.csv fare sex embarked --max-depth 4 --min-parent-node-size 2 --alpha-merge 0.05 --dependent-variable-type continuous --rules\n```\n\n``` python\n{'node': 2, 'rules': [{'variable': 'sex', 'data': ['female']}, {'variable': 'embarked', 'data': ['C']}]}\n{'node': 3, 'rules': [{'variable': 'sex', 'data': ['male']}, {'variable': 'embarked', 'data': ['C']}]}\n{'node': 4, 'rules': [{'variable': 'embarked', 'data': ['Q', '<missing>']}]}\n{'node': 6, 'rules': [{'variable': 'sex', 'data': ['female']}, {'variable': 'embarked', 'data': ['S']}]}\n{'node': 7, 'rules': [{'variable': 'sex', 'data': ['male']}, {'variable': 'embarked', 'data': ['S']}]}\n```\n\nParameters\n-------\nRun `python -m btgPy.CHAID -h` to see description of command line arguments\n\nHow to Read the Tree\n-------\n\nWe'll start with a real world example using the titanic dataset.\n\nFirst make sure to install all required packages:\n\n``` bash\npython setup.py install && pip install ipdb\n```\n\nRun:\n```bash\npython -m btgPy.CHAID tests/data/titanic.csv survived sex embarked --max-depth 4 --min-parent-node-size 2 --alpha-merge 0.05\n```\n\nafter placing an ipdb statement on like 55 on \\_\\_main\\_\\_.py as in the example below. The parameters mean max depth two 4 levels, a minimum parent node size threshold to 2 and merge the groups if the p-value is greater than 0.05 when comparing the groups.\n\n```python\n82        tree = Tree.from_pandas_df(data, independent_variables,\n83                                   nspace.dependent_variable[0],\n84                                   variable_types=types, **config)\n---> 85   import ipdb; ipdb.set_trace()\n86    \n87        if nspace.classify:\n88            predictions = pd.Series(tree.node_predictions())\n89            predictions.name = 'node_id'\n90            data = pd.concat([data, predictions], axis=1)\n91            print(data.to_csv())\n92        elif nspace.predict:\n```\n\nRunning `tree.print_tree()` gives:\n\n``` python\n([], {0: 809, 1: 500}, (sex, p=1.47145310169e-81, score=365.886947811, groups=[['female'], ['male']]), dof=1))\n\u251c\u2500\u2500 (['female'], {0: 127, 1: 339}, (embarked, p=9.17624191599e-07, score=24.0936494474, groups=[['C', '<missing>'], ['Q', 'S']]), dof=1))\n\u2502   \u251c\u2500\u2500 (['C', '<missing>'], {0: 11, 1: 104}, <Invalid Chaid Split>)\n\u2502   \u2514\u2500\u2500 (['Q', 'S'], {0: 116, 1: 235}, <Invalid Chaid Split>)\n\u2514\u2500\u2500 (['male'], {0: 682, 1: 161}, (embarked, p=5.017855245e-05, score=16.4413525404, groups=[['C'], ['Q', 'S']]), dof=1))\n    \u251c\u2500\u2500 (['C'], {0: 109, 1: 48}, <Invalid Chaid Split>)\n    \u2514\u2500\u2500 (['Q', 'S'], {0: 573, 1: 113}, <Invalid Chaid Split>)\n```\n\nas show above. The first line is the root node, all the data is present in this node. The the vertical bars originating from a node represents paths to that node's children.\n\nRunning `tree.tree_store` will give you a list of all the nodes in the tree:\n\n``` python\n[\n  ([], {0: 809, 1: 500}, (sex, p=1.47145310169e-81, score=365.886947811, groups=[['female'], ['male']]), dof=1)),\n  (['female'], {0: 127, 1: 339}, (embarked, p=9.17624191599e-07, score=24.0936494474, groups=[['C', '<missing>'], ['Q', 'S']]), dof=1)),\n  (['C', '<missing>'], {0: 11, 1: 104}, <Invalid Chaid Split>), (['Q', 'S'], {0: 116, 1: 235}, <Invalid Chaid Split>),\n  (['male'], {0: 682, 1: 161}, (embarked, p=5.017855245e-05, score=16.4413525404, groups=[['C'], ['Q', 'S']]), dof=1)),\n  (['C'], {0: 109, 1: 48}, <Invalid Chaid Split>), (['Q', 'S'], {0: 573, 1: 113}, <Invalid Chaid Split>)\n]\n```\n\nSo let's inspect the root node `tree.tree_store[0]`:\n\n``` python\n([], {0: 809, 1: 500}, (sex, p=1.47145310169e-81, score=365.886947811, groups=[['female'], ['male']]), dof=1))\n```\n\nNodes have certain properties. Firstly, they show the column that was chosen to split to this node (for a root node the column is empty '([])'). The second property `{0: 809, 1: 500}` show the members of that node, and represent the current frequency of the dependent variable. In this case, it is all the answers in the 'survived' column, as that was the first column past to the program in the command line (`python -m CHAID tests/data/titanic.csv survived`). The next property represents the splitting of the node. What column was chosen to make that split (in this case, `sex`), the p-value of the split and the chi-score and most importantly, which variables in `sex` create the new nodes and the degrees of freedom associated with that split (1, in this case)\n\nThese properties that can be accessed:\n\n``` python\nipdb> root_node = tree.tree_store[0]\nipdb> root_node.choices\n[]\nipdb> root_node.members\n{0: 809, 1: 500}\nipdb> root_node.split\n(sex, p=1.47145310169e-81, score=365.886947811, groups=[['female'], ['male']]), dof=1)\n```\n\nThe split variable can be further inspected:\n\n``` python\nipdb> split = root_node.split\nipdb> split.column\n'sex'\nipdb> split.p\n1.4714531016922664e-81\nipdb> split.score\n365.88694781112048\nipdb> split.dof\n1\nipdb> split.groupings\n\"[['female'], ['male']]\"\n```\n\nTherefore, in this example, the root node is split on the column 'sex' in the data, splitting up the females and males. These females and males each form a new node and further down, the all male and all female nodes are split on the column 'embarked' (although they needn't split on the same column). A `<Invalid Chaid Split>` is reached when either the node is pure (only one dependent variable remains) or when a terminating parameter is met (e.g. min node size, or max depth [see tree parameters above])\n\nThe conclusion drawn from this tree is that: \"Gender was the most important factor driving the survival of people on the titanic. Whereby females had a much higher likelihood of surviving (survival = 1 in the survival column and 0 means they died). Of those females, those who embarked first class (class 'C', node 2) had a much higher likelihood of surviving.\"\n\nExporting the tree\n-------\n\nIf you want to export the tree to a dot file, then use:\n\n```python\ntree.to_tree()\n```\n\nThis creates a [treelib](https://github.com/caesar0301/treelib/blob/master/treelib) which has a `.to_graphviz()` method [here](https://github.com/caesar0301/treelib/blob/master/treelib/tree.py#L894).\n\n\nIn order to use visually graph the CHAID tree, you'll need to install two more libraries that aren't distributed via pypi:\n\n- graphviz - see [here](https://stackoverflow.com/questions/35064304/runtimeerror-make-sure-the-graphviz-executables-are-on-your-systems-path-aft) for platform specific installations\n- orca - see [the README.md](https://github.com/plotly/orca) for platform specific installations\n\nYou can export the tree to .gv and png using:\n\n```python\ntree.render(path=None, view=False)\n```\n\nWhich will save it to a file specified at `path` and can be instantly viewed when view=True.\n\nThis can also be triggered from the command line using `--export` or `--export-path`. The former causes it to be stored in a newly created `trees` folder and the latter specifies the location of the file. Both will trigger an auto-viewing of the tree. E.g:\n\n```bash\npython -m btgPy.CHAID tests/data/titanic.csv survived sex embarked --max-depth 4 --min-parent-node-size 2 --alpha-merge 0.05 --export\n```\n\n```bash\npython -m btgPy.CHAID tests/data/titanic.csv survived sex embarked --max-depth 4 --min-parent-node-size 2 --alpha-merge 0.05 --export-path YOUR_PATH.gv\n```\n\nThe output will look like:\n\n![](https://github.com/Rambatino/CHAID/blob/master/docs/2019-04-01%2011:45:43.gv.png?raw=true \"CHAID Tree\")\n\n\n`gem install github_changelog_generator && github_changelog_generator --exclude-labels maintenance,refactor,testing`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bgonzalezd/btgPy", "keywords": "CHAID pandas numpy scipy statistics statistical analysis", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "btgPy", "package_url": "https://pypi.org/project/btgPy/", "platform": "", "project_url": "https://pypi.org/project/btgPy/", "project_urls": {"Homepage": "https://github.com/bgonzalezd/btgPy"}, "release_url": "https://pypi.org/project/btgPy/1.8/", "requires_dist": ["cython", "numpy", "pandas", "treelib", "pytest", "scipy", "savReaderWriter", "graphviz", "plotly", "colorlover", "enum34 ; python_version == \"2.7\"", "codecov ; extra == 'test'", "tox ; extra == 'test'", "tox-pyenv ; extra == 'test'", "detox ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'"], "requires_python": "", "summary": "Data science tools", "version": "1.8"}, "last_serial": 6946647, "releases": {"1.6": [{"comment_text": "", "digests": {"md5": "a449aa6a1815cc314a0225fdbb6a3af5", "sha256": "c64b2bbcd38cb9523970dfc8db5e7664027cba7d53e770e8930b10507db39374"}, "downloads": -1, "filename": "btgPy-1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a449aa6a1815cc314a0225fdbb6a3af5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39336, "upload_time": "2020-03-01T16:09:08", "upload_time_iso_8601": "2020-03-01T16:09:08.676061Z", "url": "https://files.pythonhosted.org/packages/df/4f/eb9405ed9fd5ea2885ddb6f53a65408d5d140d58803734e0415b97bb576a/btgPy-1.6-py3-none-any.whl"}], "1.7": [{"comment_text": "", "digests": {"md5": "a8894217f54712d27c8548edd6001550", "sha256": "3c04427bbaaa930e024a532b7849f9f2fbb5ea2110d0eb90839a35275e9be69a"}, "downloads": -1, "filename": "btgPy-1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a8894217f54712d27c8548edd6001550", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40731, "upload_time": "2020-04-03T21:12:30", "upload_time_iso_8601": "2020-04-03T21:12:30.547154Z", "url": "https://files.pythonhosted.org/packages/52/22/0f9c42b20d2beb5aff0270288115f86b092034e571378411bf43ce3da60c/btgPy-1.7-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "23b37855ffab68dfeb4bc722d6b2c165", "sha256": "426aeb4bcf3323ea62d19b1ea8db918bcae055a44bf299d1f24d4db927af6e72"}, "downloads": -1, "filename": "btgPy-1.7.tar.gz", "has_sig": false, "md5_digest": "23b37855ffab68dfeb4bc722d6b2c165", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27477, "upload_time": "2020-04-03T21:12:31", "upload_time_iso_8601": "2020-04-03T21:12:31.974516Z", "url": "https://files.pythonhosted.org/packages/4f/e1/ecd72e3b14ac13595b19da1c816072d8ef1b1b34878c496ad86c8f7eadec/btgPy-1.7.tar.gz"}], "1.8": [{"comment_text": "", "digests": {"md5": "1a9152def8e5710746d3834c7125237d", "sha256": "514237b867aee6f78a6f7ea5caa2d40a33fc316f118ceaf2c461a78574c40b40"}, "downloads": -1, "filename": "btgPy-1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "1a9152def8e5710746d3834c7125237d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40746, "upload_time": "2020-04-03T21:28:30", "upload_time_iso_8601": "2020-04-03T21:28:30.211319Z", "url": "https://files.pythonhosted.org/packages/c9/ca/84a6cf316f23d7e6bbdebef6918fdd4819bb056cca933a0ea33a1c592f41/btgPy-1.8-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1ee555452ce21db0fab1b137f13a57cc", "sha256": "e2f1b6aefc0ba525fff9a572cf61181be38c8c33901efb5a3f56f8202755d741"}, "downloads": -1, "filename": "btgPy-1.8.tar.gz", "has_sig": false, "md5_digest": "1ee555452ce21db0fab1b137f13a57cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27493, "upload_time": "2020-04-03T21:28:32", "upload_time_iso_8601": "2020-04-03T21:28:32.554692Z", "url": "https://files.pythonhosted.org/packages/ce/ee/51d6af245ed611e2904e8fb13d30a488b6a4f71752623f24f2c25f6f08ef/btgPy-1.8.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a9152def8e5710746d3834c7125237d", "sha256": "514237b867aee6f78a6f7ea5caa2d40a33fc316f118ceaf2c461a78574c40b40"}, "downloads": -1, "filename": "btgPy-1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "1a9152def8e5710746d3834c7125237d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40746, "upload_time": "2020-04-03T21:28:30", "upload_time_iso_8601": "2020-04-03T21:28:30.211319Z", "url": "https://files.pythonhosted.org/packages/c9/ca/84a6cf316f23d7e6bbdebef6918fdd4819bb056cca933a0ea33a1c592f41/btgPy-1.8-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1ee555452ce21db0fab1b137f13a57cc", "sha256": "e2f1b6aefc0ba525fff9a572cf61181be38c8c33901efb5a3f56f8202755d741"}, "downloads": -1, "filename": "btgPy-1.8.tar.gz", "has_sig": false, "md5_digest": "1ee555452ce21db0fab1b137f13a57cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27493, "upload_time": "2020-04-03T21:28:32", "upload_time_iso_8601": "2020-04-03T21:28:32.554692Z", "url": "https://files.pythonhosted.org/packages/ce/ee/51d6af245ed611e2904e8fb13d30a488b6a4f71752623f24f2c25f6f08ef/btgPy-1.8.tar.gz"}]}