{"info": {"author": "Konrad Weihmann", "author_email": "kweihmann@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Quality Assurance"], "description": "# multimetric\n\n![Build status](https://github.com/priv-kweihmann/multimetric/workflows/Build/badge.svg)\n[![PyPI version](https://badge.fury.io/py/multimetric.svg)](https://badge.fury.io/py/multimetric)\n[![Python version](https://img.shields.io/pypi/pyversions/multimetric)](https://img.shields.io/pypi/pyversions/multimetric)\n[![Downloads](https://img.shields.io/pypi/dm/multimetric)](https://img.shields.io/pypi/dm/multimetric)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/priv-kweihmann/multimetric.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/priv-kweihmann/multimetric/context:python)\n\nCalculate code metrics in various languages\n\n## Purpose\n\nThis tool tries to calculate the following metrics for many, many programming languages\n\n* Comment to Code percentage\n* Cyclomatic complexity according to McCabe\n* Difficulty according to Halstead\n* Effort according to Halstead\n* Fan-Out\n* Lines of code\n* Maintainability index\n* Metric according to pylint\n* Metric according to TIOBE\n* Number of delivered bugs according to Halstead\n* Time required to program according to Halstead\n* Volume according to Halstead\n\nThis tool was heavily inspired by [metrics](https://github.com/markfink/metrics)\n\n## Requirements\n\n* python3\n* [chardet](https://pypi.org/project/chardet/)\n* [Pygments](http://pygments.org/)\n\n## Installation\n\n### PyPi\n\nsimply run\n\n```sh\npip3 install multimetric\n```\n\n### From source\n\n* git clone this repository\n* cd to \\<clone folder\\>\n* Install the needed requirements by running ```pip3 install -r requirements.txt```\n* run `python3 setup.py build`\n\n## Usage\n\n```shell\nusage: multimetric [-h] [--warn_compiler WARN_COMPILER]\n                   [--warn_duplication WARN_DUPLICATION]\n                   [--warn_functional WARN_FUNCTIONAL]\n                   [--warn_standard WARN_STANDARD]\n                   [--warn_security WARN_SECURITY] [--coverage COVERAGE]\n                   [--bugpredict {old,new}]\n                   [--maintindex {sei,classic,microsoft}]\n                   files [files ...]\n\nCalculate code metrics in various languages\n\npositional arguments:\n  files                 Files to parse\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --warn_compiler WARN_COMPILER\n                        File(s) holding information about compiler warnings\n  --warn_duplication WARN_DUPLICATION\n                        File(s) holding information about code duplications\n  --warn_functional WARN_FUNCTIONAL\n                        File(s) holding information about static code analysis findings\n  --warn_standard WARN_STANDARD\n                        File(s) holding information about language standard violations\n  --warn_security WARN_SECURITY\n                        File(s) File(s) holding information about found security issue\n  --coverage COVERAGE   File(s) with compiler warningsFile(s) holding information about testing coverage\n  --bugpredict {old,new}\n                        Method how to calculate the bug prediction\n  --maintindex {sei,classic,microsoft}\n                        Method how to calculate the maintainability index\n\nCurrently you could import files of the following types for --warn_* or --coverage\n\nFollowing information can be read\n\n    <file> = full path to file\n    <content> = either a string\n    <severity> = optional severity\n\n    Note: you could also add a single line, then <content>\n        has to be a number reflecting to total number of findings\n\nFile formats\n\ncsv: CSV file of following line format\n     <file>,<content>,<severity>\n\njson: JSON file\n     <file>: {\n         \"content\": <content>,\n         \"severity\": <severity>\n     }\n```\n\nBy default tool guesses the content type by the filename, if that doesn't work for you please see below\n\n## Output\n\nOutput will be written to stdout as json.\n\n### Output structure\n\n* `files` contains a list of each file passed by CLI\n* `overall` contains the calculated values for all passed files\n* `stats` contains the statistically calculated values over all files passed [see Statistical additions](#statistics)\n\n#### Item structure\n\n| item                    | description                                    | range    | recommendation |\n|-------------------------|------------------------------------------------|----------|----------------|\n| `comment_ratio`         | Comment to Code percentage                     | 0..100   | > 30.0         |\n| `cyclomatic_complexity` | Cyclomatic complexity according to McCabe      | 0..(inf) | < 10           |\n| `fanout_external`       | Number imports from out of tree modules        | 0..(inf) |                |\n| `fanout_internal`       | Number imports from same source tree modules   | 0..(inf) |                |\n| `halstead_bugprop`      | Number of delivered bugs according to Halstead | 0..(inf) | < 0.05         |\n| `halstead_difficulty`   | Difficulty according to Halstead               | 0..(inf) |                |\n| `halstead_effort`       | Effort according to Halstead                   | 0..(inf) |                |\n| `halstead_timerequired` | Time required to program according to Halstead | 0..(inf) |                |\n| `halstead_volume`       | Volume according to Halstead                   | 0..(inf) |                |\n| `lang`                  | list of identified programming languages       | list     |                |\n| `loc`                   | Lines of code                                  | 1..(inf) |                |\n| `maintainability_index` | Maintainability index                          | 0..100   | > 80.0         |\n| `operands_sum`          | Number of used operands                        | 1..(inf) |                |\n| `operands_uniq`         | Number of unique used operands                 | 1..(inf) |                |\n| `operators_sum`         | Number of used operators                       | 1..(inf) |                |\n| `operators_uniq`        | Number of unique used operators                | 1..(inf) |                |\n| `pylint`                | General quality score according to pylint      | 0..100   | > 80.0         |\n| `tiobe_compiler`        | Compiler warnings score according to TIOBE     | 0..100   | > 90.0         |\n| `tiobe_complexity`      | Complexity according to TIOBE                  | 0..100   | > 80.0         |\n| `tiobe_coverage`        | Coverage according to TIOBE                    | 0..100   | > 80.0         |\n| `tiobe_duplication`     | Code duplications score according to TIOBE     | 0..100   | > 80.0         |\n| `tiobe_fanout`          | Fan-Out score according to TIOBE               | 0..100   | > 80.0         |\n| `tiobe_functional`      | Functional defect score according to TIOBE     | 0..100   | > 90.0         |\n| `tiobe_security`        | Security score according to TIOBE              | 0..100   | > 90.0         |\n| `tiobe_standard`        | Language standard score according to TIOBE     | 0..100   | > 80.0         |\n| `tiobe`                 | General quality score according to TIOBE       | 0..100   | > 80.0         |\n\n#### Statistics\n\nThe item `stats` contains in addition to the above mentioned the following items, which by themselves contain all the items mentioned at [Item structure](#item-structure)\n\n* `max` = the maximum value of all items of the metric\n* `mean` = statistical mean over all items of the metric\n* `median` = statistical median over all items of the metric\n* `min` = the minimum value of all items of the metric\n* `sd` = standard deviation over all items of the metric\n\n## Further reading\n\n* [Pygments](http://pygments.org/)\n\n## Bugs & Contribution\n\nFeel free to create issues or pull requests", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/priv-kweihmann/multimetric", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "multimetric", "package_url": "https://pypi.org/project/multimetric/", "platform": "", "project_url": "https://pypi.org/project/multimetric/", "project_urls": {"Homepage": "https://github.com/priv-kweihmann/multimetric"}, "release_url": "https://pypi.org/project/multimetric/1.1.3/", "requires_dist": null, "requires_python": "", "summary": "Calculate code metrics in various languages", "version": "1.1.3"}, "last_serial": 6598830, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2586e3ba5d57db6453b103eaf7e35b42", "sha256": "87705e88b911a2fd7cc83fd577cb1a0cff9a9a58f74380bb06b1e09fba3b8336"}, "downloads": -1, "filename": "multimetric-1.0.0-py3.7.egg", "has_sig": false, "md5_digest": "2586e3ba5d57db6453b103eaf7e35b42", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 17304, "upload_time": "2019-12-21T15:12:58", "upload_time_iso_8601": "2019-12-21T15:12:58.890635Z", "url": "https://files.pythonhosted.org/packages/68/51/b9c39572b4ec277db03d4f47bb79fc82e1f5932e1a43290d5eb0fd39c6b4/multimetric-1.0.0-py3.7.egg"}, {"comment_text": "", "digests": {"md5": "eac975acd199dd89d84e78a87e124d35", "sha256": "4766c48ac0283938ceec2db5bc1243b4950ce72d968fc95bf33e2919c312e218"}, "downloads": -1, "filename": "multimetric-1.0.0.tar.gz", "has_sig": false, "md5_digest": "eac975acd199dd89d84e78a87e124d35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5424, "upload_time": "2019-12-21T15:13:01", "upload_time_iso_8601": "2019-12-21T15:13:01.214375Z", "url": "https://files.pythonhosted.org/packages/e8/53/9d528a9bfcf3b589d9c8e808ad10c3bd6227c83582ab32bab394104219ce/multimetric-1.0.0.tar.gz"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "94d4d2821f42ec1af8413eec88793864", "sha256": "0182b09306e572f2ad83de5258da57fbdfdd3b1b504cbec5d21ee4980a5571b7"}, "downloads": -1, "filename": "multimetric-1.0.1.tar.gz", "has_sig": false, "md5_digest": "94d4d2821f42ec1af8413eec88793864", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6851, "upload_time": "2019-12-21T15:14:37", "upload_time_iso_8601": "2019-12-21T15:14:37.349947Z", "url": "https://files.pythonhosted.org/packages/51/cd/dde620c59b393096b3a9a43a077ff9639053b356eaf761c1fb716ea2709d/multimetric-1.0.1.tar.gz"}], "1.0.2": [{"comment_text": "", "digests": {"md5": "801c72eebfa276878897f7567e473899", "sha256": "5a73e0ee42931f5a24597e0d4b0938f01af2fd8f7a69bf1e0ec6f8463f9fbf95"}, "downloads": -1, "filename": "multimetric-1.0.2.tar.gz", "has_sig": false, "md5_digest": "801c72eebfa276878897f7567e473899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6923, "upload_time": "2019-12-23T05:39:15", "upload_time_iso_8601": "2019-12-23T05:39:15.384530Z", "url": "https://files.pythonhosted.org/packages/70/cf/e8ed469a5f6decd5b8b2156002b6501e0ee66073966236b200517851bb5d/multimetric-1.0.2.tar.gz"}], "1.0.3": [{"comment_text": "", "digests": {"md5": "03d82f4a013a71f10e63502d53d62a6c", "sha256": "d1339a72569211b12b3322ae4c3ffc530d01e2241f1f903bfff7a7d3d74639ff"}, "downloads": -1, "filename": "multimetric-1.0.3.tar.gz", "has_sig": false, "md5_digest": "03d82f4a013a71f10e63502d53d62a6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7053, "upload_time": "2019-12-23T05:47:26", "upload_time_iso_8601": "2019-12-23T05:47:26.195732Z", "url": "https://files.pythonhosted.org/packages/71/b2/ff621667b0bcaf02ff523e1fd772c3e8d2f7b27fd7e25c440306da44125b/multimetric-1.0.3.tar.gz"}], "1.0.4": [{"comment_text": "", "digests": {"md5": "6b4980fadf29e19defcf654f7ded426e", "sha256": "19b66da3f450c142a86f274b7cc4a5599d586bfe39e666dddd79f2674e48bff6"}, "downloads": -1, "filename": "multimetric-1.0.4.tar.gz", "has_sig": false, "md5_digest": "6b4980fadf29e19defcf654f7ded426e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7052, "upload_time": "2019-12-23T05:51:20", "upload_time_iso_8601": "2019-12-23T05:51:20.491783Z", "url": "https://files.pythonhosted.org/packages/1d/20/4c700c02c70b6f498ad253b34a398d651044340172ed0ab92d9c39e54646/multimetric-1.0.4.tar.gz"}], "1.0.5": [{"comment_text": "", "digests": {"md5": "c9c92210cc35e17b5627781d8fbfa7ba", "sha256": "375a6774c637c786ca265dc14a373b870e1e01d631f3b13a731b8a3141724168"}, "downloads": -1, "filename": "multimetric-1.0.5-py3.7.egg", "has_sig": false, "md5_digest": "c9c92210cc35e17b5627781d8fbfa7ba", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 20371, "upload_time": "2019-12-30T16:18:04", "upload_time_iso_8601": "2019-12-30T16:18:04.934873Z", "url": "https://files.pythonhosted.org/packages/5c/f6/086f5ce1e49d7458d03fab2877d7ac232424dae10785d86b17e1e5caff05/multimetric-1.0.5-py3.7.egg"}, {"comment_text": "", "digests": {"md5": "e93f6543d93b4a9bfb150ad26a81ce4d", "sha256": "5cdf305299b00adefde13b988079f53ede1468aa23c3c590f3f871a412981b94"}, "downloads": -1, "filename": "multimetric-1.0.5.tar.gz", "has_sig": false, "md5_digest": "e93f6543d93b4a9bfb150ad26a81ce4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7074, "upload_time": "2019-12-23T15:21:05", "upload_time_iso_8601": "2019-12-23T15:21:05.516524Z", "url": "https://files.pythonhosted.org/packages/77/de/743d803b964fb92a4d7a849a1b5eedf40acbb11988d90ddc0f2146b6e445/multimetric-1.0.5.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2dab79cc03b7123188ace5fa26104657", "sha256": "830149b619ae055985f08e2ceda649f9e5c816f949f5907f7f58eb7a420b933b"}, "downloads": -1, "filename": "multimetric-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2dab79cc03b7123188ace5fa26104657", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13814, "upload_time": "2019-12-30T16:23:13", "upload_time_iso_8601": "2019-12-30T16:23:13.365684Z", "url": "https://files.pythonhosted.org/packages/5f/00/8c66b9385670ae6f72a435ca41e7251cef08cf4fb8a49e1ea6d259b28acd/multimetric-1.1.0.tar.gz"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "86f9ac976228179dc605ba6826121b6b", "sha256": "37468f5feeb26473d897867ea3546e829f408eec1d029cb01b03b4bc25f7c35d"}, "downloads": -1, "filename": "multimetric-1.1.1.tar.gz", "has_sig": false, "md5_digest": "86f9ac976228179dc605ba6826121b6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13904, "upload_time": "2020-01-01T12:37:06", "upload_time_iso_8601": "2020-01-01T12:37:06.742778Z", "url": "https://files.pythonhosted.org/packages/f8/5a/d8298cd4552fd936c44ef58d5928df44a63e452f42a40a17deaf8f61341c/multimetric-1.1.1.tar.gz"}], "1.1.2": [{"comment_text": "", "digests": {"md5": "b8f43f6ff8464623a5409061e7604750", "sha256": "49a12cedfd725112dd6d6008290199bf5a8c49ee97e17f554012c48dadacce68"}, "downloads": -1, "filename": "multimetric-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b8f43f6ff8464623a5409061e7604750", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14727, "upload_time": "2020-02-07T18:33:55", "upload_time_iso_8601": "2020-02-07T18:33:55.790789Z", "url": "https://files.pythonhosted.org/packages/f7/dd/e7a5132347c819e4164ebd9f949e7cad5275758246aee1d5fe1ff743ad6a/multimetric-1.1.2.tar.gz"}], "1.1.3": [{"comment_text": "", "digests": {"md5": "f235eaab041a9b2e6a222afbe01bc473", "sha256": "c82aac3f0be2fc2703bfbe87f2618e996748a360631044e0dfcfde3142a975ca"}, "downloads": -1, "filename": "multimetric-1.1.3.tar.gz", "has_sig": false, "md5_digest": "f235eaab041a9b2e6a222afbe01bc473", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15048, "upload_time": "2020-02-09T19:12:35", "upload_time_iso_8601": "2020-02-09T19:12:35.599537Z", "url": "https://files.pythonhosted.org/packages/25/2b/8aaad12a46c58102cf7cb0861031cc2cf4e620fc9fd941616713a434f4e0/multimetric-1.1.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "f235eaab041a9b2e6a222afbe01bc473", "sha256": "c82aac3f0be2fc2703bfbe87f2618e996748a360631044e0dfcfde3142a975ca"}, "downloads": -1, "filename": "multimetric-1.1.3.tar.gz", "has_sig": false, "md5_digest": "f235eaab041a9b2e6a222afbe01bc473", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15048, "upload_time": "2020-02-09T19:12:35", "upload_time_iso_8601": "2020-02-09T19:12:35.599537Z", "url": "https://files.pythonhosted.org/packages/25/2b/8aaad12a46c58102cf7cb0861031cc2cf4e620fc9fd941616713a434f4e0/multimetric-1.1.3.tar.gz"}]}