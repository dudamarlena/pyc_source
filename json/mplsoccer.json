{"info": {"author": "Andrew Rowlinson", "author_email": "rowlinsonandy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Visualization"], "description": "# mplsoccer\n\nmplsoccer is a Python plotting library for drawing soccer / football pitches in Matplotlib and loading StatsBomb open-data.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install mplsoccer.\n\n```bash\npip install mplsoccer\n```\n\n## Pitch plotting basics\n\nThe main aim of mplsoccer is to quickly plot pitches. Here is a lightweight example, which plots the default StatsBomb pitch:\n\n``` python\nfrom mplsoccer.pitch import Pitch\nimport os\npitch = Pitch(orientation='horizontal',figsize=(5,3),stripe=True)\nfig, ax = pitch.draw()\nfig.savefig(os.path.join('figures','README_example_statsbomb_pitch.png'),pad_inches=0,bbox_inches='tight')\n```\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_example_statsbomb_pitch.png?raw=true \"statsbomb pitch\")\n\nAs a matplotlib figure and axis is returned you are free to use any of matplotlib's functions instead of those included in mplsoccer. \n\nYou can also draw pitches on an existing axis by specifying an axis when drawing the pitch.\n\n``` python\nfrom mplsoccer.pitch import Pitch\nimport matplotlib.pyplot as plt\nimport os\npitch = Pitch(orientation='vertical', view='half', pitch_color='grass')\nfig, ax = plt.subplots(figsize=(6,4))\npitch.draw(ax=ax)\nfig.savefig(os.path.join('figures','README_example_existing_axis.png'),pad_inches=0,bbox_inches='tight')\n```\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_example_existing_axis.png?raw=true \"plot on existing axis\")\n\n#### Pitch plotting methods\n\n> The Pitch class also includes methods to quickly make plots. This is for two reasons:\n>\n> a) a common mistake is not flipping the x-axis and y-axis when changing from horizontal to vertical orientation. mplsoccer\n> handles this automatically so plots look the same when rotated.\n>\n> b) additional functionality such as plotting footballs, creating heatmaps, rotating markers and setting some defaults.\n\n#### Pitch types\nThere is support for seven pitch types, currently StatsBomb is the default pitch (`pitch_type`='statsbomb'). More details about which pitches are supported is [here](https://github.com/andrewRowlinson/mplsoccer/blob/master/README.md#pitch-types-1).\n\n## StatsBomb open-data\n\nTO DO\n\n\n## Plotting\n\nTO DO\n\n#### 1. Plot\n\nTO DO\n\n####  2. Scatter\n\nTO DO\n\n####  3. Lines\n\nTO DO\n\n####  4. Arrows\n\nmplsoccer uses [matplotlib.axes.Axes.quiver](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.quiver.html) to plot arrows. Behind the scenes, the Pitch.quiver() method modifies the start and end locations to a vector before plotting them. This avoids the need to use Matplotlib's annotate in a loop, which is another way of plotting arrows.\n\nExample using [StatsBomb open-data](https://github.com/statsbomb/open-data):\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_arrow_example.png?raw=true \"arrow plot\")\n\nCode available in [this notebook](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/04-Plotting-Arrows.ipynb):\n``` python\nfrom mplsoccer.pitch import Pitch\nfrom mplsoccer.statsbomb import read_event, EVENT_SLUG\nfrom matplotlib import rcParams\nimport os\n\nrcParams['text.color'] = '#c7d5cc' # set the default text color\n\n# get event dataframe for game 7478, create a dataframe of the passes, and a boolean mask for the outcome\ndf_dict = read_event(os.path.join(EVENT_SLUG,'7478.json'),\n                     related_event_df = False, shot_freeze_frame_df = False, tactics_lineup_df = False)\ndf = df_dict['event'] # read_event returns a dictionary of dataframes\nmask_pass_seattle = (df.type_name == 'Pass') & (df.team_name == 'Seattle Reign')\ndf_pass = df.loc[mask_pass_seattle, ['x','y','pass_end_x','pass_end_y','outcome_name']]\nmask_complete = df_pass.outcome_name.isnull()\n\n# Plot arrows\npitch = Pitch(pitch_type = 'statsbomb', orientation = 'horizontal', tight_layout = True,\n              pitch_color = '#22312b', line_color = '#c7d5cc', figsize = (16, 9))\nfig, ax = pitch.draw()\npitch.quiver(df_pass[mask_complete].x, df_pass[mask_complete].y,\n             df_pass[mask_complete].pass_end_x, df_pass[mask_complete].pass_end_y, width = 1,\n             headwidth = 10, headlength = 10, color = '#ad993c', ax = ax, label = 'completed passes')\npitch.quiver(df_pass[~mask_complete].x, df_pass[~mask_complete].y,\n             df_pass[~mask_complete].pass_end_x, df_pass[~mask_complete].pass_end_y, width = 1, \n             headwidth = 10, headlength = 10, color = '#ba4f45', ax = ax, label = 'other passes')\nax.legend(facecolor = '#22312b', edgecolor = 'None', fontsize = 'large')\nteam1, team2 = df.team_name.unique()\nax.set_title(f'{team1} vs {team2}', fontsize = 30);\nfig.set_facecolor('#22312b')\nfig.set_constrained_layout(False)\nfig.savefig(os.path.join('figures','README_arrow_example.png'), facecolor = '#22312b', bbox_inches = 'tight')\n```\n\n####  5. Kernel density plots\n\nmplsoccer uses [seaborn.kdeplot](https://seaborn.pydata.org/generated/seaborn.kdeplot.html) to plot kernel density plots. Behind the scenes, the Pitch.kdeplot() method also clips the plot to the edges of the pitch.\n\nIf you don't know much about Seaborn's kernel density plots, I recommend [fcpython's tutorial](https://fcpython.com/visualisation/football-heatmaps-seaborn) for a football related example.\n\nExample using [StatsBomb open-data](https://github.com/statsbomb/open-data):\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_kdeplot_example.png?raw=true \"kernel density plot\")\n\nCode available in [this notebook](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/05-Plotting-kdeplot.ipynb):\n``` python\nfrom mplsoccer.pitch import Pitch\nfrom mplsoccer.statsbomb import read_event, EVENT_SLUG\nimport os\n\n# load first game that Messi played as a false-9 and the match before\nkwargs = {'related_event_df': False,'shot_freeze_frame_df': False, 'tactics_lineup_df': False}\ndf_false9 = read_event(os.path.join(EVENT_SLUG,'69249.json'), **kwargs)['event']\ndf_before_false9 = read_event(os.path.join(EVENT_SLUG,'69251.json'), **kwargs)['event']\n# filter messi's actions (starting positions)\ndf_false9 = df_false9.loc[df_false9.player_id == 5503,['x', 'y']]\ndf_before_false9 = df_before_false9.loc[df_before_false9.player_id == 5503,['x', 'y']]\n# plotting\npitch = Pitch(pitch_type = 'statsbomb', figsize = (16, 9), layout = (1, 2), pitch_color = 'grass', stripe = True)\nfig, ax = pitch.draw()\nax[0].set_title('Messi in the game directly before \\n playing in the false 9 role', fontsize = 25, pad = 20)\npitch.kdeplot(df_before_false9.x, df_before_false9.y, ax = ax[0], cmap = 'plasma', linewidths = 3)\npitch.annotate('6-2 thrashing \\nof Real Madrid', (25,10), color = 'white',\n               fontsize = 25, ha = 'center', va = 'center', ax = ax[1])\nax[1].set_title('The first Game Messi \\nplayed in the false 9 role', fontsize = 25, pad = 20)\npitch.kdeplot(df_false9.x, df_false9.y, ax = ax[1], cmap = 'plasma', linewidths = 3)\npitch.annotate('2-2 draw \\nagainst Valencia', (25,10), color = 'white',\n               fontsize = 25, ha = 'center', va = 'center', ax = ax[0])\npitch.annotate('more events', (90,68), (30,68), ax=ax[0], color='white', ha = 'center', va = 'center',\n               fontsize = 20, arrowprops=dict(facecolor='white', edgecolor = 'None'))\npitch.annotate('fewer events', (80,17), (80,5), ax=ax[0], color='white', ha = 'center', va = 'center',\n               fontsize = 20, arrowprops=dict(facecolor='white', edgecolor = 'None'))\nfig.savefig(os.path.join('figures', 'README_kdeplot_example.png'), bbox_inches = 'tight')\n```\n\n####  6. Jointplot\n\nmplsoccer uses [seaborn.jointplot](https://seaborn.pydata.org/generated/seaborn.jointplot.html) to plot joint plots. This method is the only Pitch plotting method that does not take a Matplotlib axis (ax) as an argument. Instead, first we plot a Seaborn jointplot and then we draw on a pitch after. Seaborn.jointplot's are square and take a height arguement to set up the figure size, the Pitch figsize is therefore ignored.\n\nExample using [StatsBomb open-data](https://github.com/statsbomb/open-data):\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_jointplot_example.png?raw=true \"joint plot\")\n\nCode available in [this notebook](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/06-Plotting-jointplot.ipynb):\n``` python\nfrom mplsoccer.pitch import Pitch\nfrom mplsoccer.statsbomb import read_event, EVENT_SLUG\nimport os\n\n# load first game that Messi played as a false-9\nkwargs = {'related_event_df': False,'shot_freeze_frame_df': False, 'tactics_lineup_df': False}\ndf_false9 = read_event(os.path.join(EVENT_SLUG,'69249.json'), **kwargs)['event']\n# filter messi's actions (starting positions)\ndf_false9 = df_false9.loc[df_false9.player_id == 5503,['x', 'y']]\n\n# plotting\npitch = Pitch(pitch_type = 'statsbomb', pitch_color = 'grass', stripe = True, view = 'half', pad_left = 20)\njoint_kws = {'shade': False, 'color': 'green', 'cmap': \"plasma\", 'linewidths': 3}\ng = pitch.jointplot(df_false9.x, df_false9.y, height = 9, kind='kde',**joint_kws);\ng.fig.suptitle(\"Messi's first game as a false 9\", x = 0.5, y = 1.03, fontsize = 25, ha = 'center', va = 'center')\ng.savefig(os.path.join('figures', 'README_jointplot_example.png'), bbox_inches = 'tight')\n```\n\n####  7. Hexbin\n\nmplsoccer uses [matplotlib.axes.Axes.hexbin](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.hexbin.html) to plot hexbin plots. I don't particularly like them for football data, but I have seen them used a couple of times so have included them.\n\nHexbins currently do not look the same in vertical and horizontal orientations. This is because matplotlib bins the data according to the number of bins in the x-direction. Unfortunately the x-direction changes when using different orientations.\n\nExample using [StatsBomb open-data](https://github.com/statsbomb/open-data):\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_hexbin_example.png?raw=true \"hexbin plot\")\n\nCode available in [this notebook](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/07-Plotting-hexbin.ipynb):\n``` python\nfrom mplsoccer.pitch import Pitch\nfrom mplsoccer.statsbomb import read_event, EVENT_SLUG\nimport os\n\n# load first game that Messi played as a false-9 and the match before\nkwargs = {'related_event_df': False,'shot_freeze_frame_df': False, 'tactics_lineup_df': False}\ndf_false9 = read_event(os.path.join(EVENT_SLUG,'69249.json'), **kwargs)['event']\ndf_before_false9 = read_event(os.path.join(EVENT_SLUG,'69251.json'), **kwargs)['event']\n\n# filter messi's actions (starting positions)\ndf_false9 = df_false9.loc[df_false9.player_id == 5503,['x', 'y']]\ndf_before_false9 = df_before_false9.loc[df_before_false9.player_id == 5503,['x', 'y']]\n\n# plotting\npitch = Pitch(pitch_type = 'statsbomb', figsize = (16, 9), layout = (1, 2), pitch_color = '#22312b',\n              stripe = False, line_zorder = 2)\nfig, ax = pitch.draw()\npitch.hexbin(df_before_false9.x, df_before_false9.y, gridsize=10, ax = ax[0], cmap = 'Blues')\npitch.hexbin(df_false9.x, df_false9.y, gridsize=10, ax = ax[1], cmap = 'Blues')\nax[0].set_title('Messi in the game directly before \\n playing in the false 9 role', fontsize = 25, pad = 20);\nax[1].set_title('The first Game Messi \\nplayed in the false 9 role', fontsize = 25, pad = 20);\nfig.savefig(os.path.join('figures', 'README_hexbin_example.png'), bbox_inches = 'tight')\n```\n\n#### 8. Heatmap\n\nThere are three steps to creating heatmaps in mplsoccer:\n1) create the statistics and bins, which uses [scipy.stats.binned_statistic_2d](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.binned_statistic_2d.html).\n2) plot a heatmap, which uses [matplotlib.axes.Axes.pcolormesh](https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.pcolormesh.html)\n3) plot the labels (optional), which uses [matplotlib.axes.Axes.annotate](https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.annotate.html)\n\nI deliberately did not combine these methods so that you can post-process the values, e.g. rounding, formating, subtracting or differencing from the league average.\n\nmplsoccer contains two ways to bin the data:\na) bins. Specified by the number of x coordinate bins and the number of y coordinate bins\nb) positional. This bins the data according to the [Juego de Posici\u00f3n](https://spielverlagerung.com/2014/11/26/juego-de-posicion-a-short-explanation/) concept\n\n###### Bins Example using [StatsBomb open-data](https://github.com/statsbomb/open-data):\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_heatmap_bins.png?raw=true \"heatmap bins\")\n\nCode available in [this notebook](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/08-Plotting-heatmap.ipynb):\n``` python\nfrom mplsoccer.pitch import Pitch\nfrom mplsoccer.statsbomb import read_event, EVENT_SLUG\nimport os\nimport pandas as pd\nimport numpy as np\n\n# get data\nmatch_files = ['19789.json', '19794.json', '19805.json']\nkwargs = {'related_event_df': False,'shot_freeze_frame_df': False, 'tactics_lineup_df': False}\ndf = pd.concat([read_event(os.path.join(EVENT_SLUG,file), **kwargs)['event'] for file in match_files])\n# filter chelsea pressure events\nmask_chelsea_pressure = (df.team_name == 'Chelsea FCW') & (df.type_name == 'Pressure')\ndf = df.loc[mask_chelsea_pressure,['x','y']]\n\n# setup pitch\npitch = Pitch(pitch_type = 'statsbomb', figsize = (16, 9), layout = (1,3), line_zorder=2,\n              pitch_color= '#22312b', line_color = 'white',orientation='vertical')\n# draw\nfig, ax = pitch.draw()\nbins = [(6,5),(1,5),(6,1)]\nfor i, bin in enumerate(bins):\n    bin_statistic = pitch.bin_statistic(df.x, df.y, statistic='count', bins = bin)\n    # draw\n    pitch.heatmap(bin_statistic, ax=ax[i], cmap='coolwarm', edgecolors = '#22312b')\n    pitch.scatter(df.x, df.y, c='white', s=2, ax=ax[i])\n    \n    # replace raw counts with percentages and add percentage sign (note immutable named tuple so used _replace)\n    bin_statistic = bin_statistic._replace(statistic = \n                                           (bin_statistic.statistic / len(df) * 100)\n                                           .round(1).astype(str) + np.char.array(['%']))\n    pitch.label_heatmap(bin_statistic, color='white', fontsize=18, ax=ax[i], ha = 'center', va = 'bottom')\nfig.suptitle('Location of pressure events - 3 home games for Chelsea FC Women', x=0.5, y=0.98, fontsize=30,);\nfig.savefig(os.path.join('figures','README_heatmap_bins.png'), bbox_inches = 'tight')\n```\n\n######  Positional Example using [StatsBomb open-data](https://github.com/statsbomb/open-data):\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_heatmap_positional.png?raw=true \"positional heatmap\")\n\nCode available in [this notebook](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/08-Plotting-heatmap.ipynb):\n``` python\nfrom mplsoccer.pitch import Pitch\nfrom mplsoccer.statsbomb import read_event, EVENT_SLUG\nimport os\nimport pandas as pd\nimport numpy as np\n\n# get data\nmatch_files = ['19789.json', '19794.json', '19805.json']\nkwargs = {'related_event_df': False,'shot_freeze_frame_df': False, 'tactics_lineup_df': False}\ndf = pd.concat([read_event(os.path.join(EVENT_SLUG,file), **kwargs)['event'] for file in match_files])\n# filter chelsea pressure events\nmask_chelsea_pressure = (df.team_name == 'Chelsea FCW') & (df.type_name == 'Pressure')\ndf = df.loc[mask_chelsea_pressure,['x','y']]\n\n# setup pitch\npitch = Pitch(pitch_type = 'statsbomb', figsize = (16, 9), layout = (1,3), line_zorder=2,\n              pitch_color= '#22312b', line_color = 'white',orientation='vertical')\n# draw\nfig, ax = pitch.draw()\npositions = ['full','horizontal','vertical']\nfor i, pos in enumerate(positions):\n    bin_statistic = pitch.bin_statistic_positional(df.x, df.y,statistic='count',positional=pos)\n    pitch.heatmap_positional(bin_statistic, ax=ax[i], cmap='coolwarm', edgecolors='#22312b')\n    pitch.scatter(df.x, df.y, c='white', s=2, ax=ax[i])\n    # replace raw counts with percentages and add percentage sign (note immutable named tuple so used _replace)\n    bin_statistic = [b._replace(statistic=\n                                 (b.statistic/len(df)*100).round(1).astype(str) + np.char.array(['%']))\n                      for b in bin_statistic]\n    pitch.label_heatmap(bin_statistic, color = 'white', fontsize = 18, ax = ax[i], ha = 'center', va = 'bottom')\nfig.suptitle('Location of pressure events - 3 home games for Chelsea FC Women', x=0.5, y=0.98, fontsize=30,);\nfig.savefig(os.path.join('figures','README_heatmap_positional.png'), bbox_inches = 'tight')\n```\n\n#### 09. Animation\n\nSometimes is useful to use animation. There is a short demo below using [metrica sports](https://github.com/metrica-sports/sample-data) sample tracking data.\n\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_animation_example.gif?raw=true \"tracking data animation\")\n\nCode available in [this notebook](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/09-Plotting-animation.ipynb):\n``` python\nfrom mplsoccer.pitch import Pitch\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import animation\nimport os\n\n# load away data\nlink1 = ('https://raw.githubusercontent.com/metrica-sports/sample-data/master/'\n         'data/Sample_Game_1/Sample_Game_1_RawTrackingData_Away_Team.csv')\ndf_away = pd.read_csv(link1,skiprows=2)\ndf_away.sort_values('Time [s]', inplace=True)\n\n# load home data\nlink2 = ('https://raw.githubusercontent.com/metrica-sports/sample-data/master/'\n         'data/Sample_Game_1/Sample_Game_1_RawTrackingData_Home_Team.csv')\ndf_home = pd.read_csv(link2,skiprows=2)\ndf_home.sort_values('Time [s]', inplace=True)\n\n# column names aren't great so this sets the player ones with _x and _y suffixes\ndef set_col_names(df):\n    cols = list(np.repeat(df.columns[3::2],2))\n    cols = [col+'_x' if i%2==0 else col+'_y' for i, col in enumerate(cols)]\n    cols = np.concatenate([df.columns[:3],cols])\n    df.columns = cols\nset_col_names(df_away)\nset_col_names(df_home)\n\n# get a subset of the data (10 seconds)\ndf_away = df_away[(df_away['Time [s]'] > 815) & ((df_away['Time [s]'] <= 825))].copy()\ndf_home = df_home[(df_home['Time [s]'] > 815) & ((df_home['Time [s]'] <= 825))].copy()\n\n# split off a df_ball dataframe and drop the ball columns from the player dataframes\ndf_ball = df_away[['Period','Frame','Time [s]', 'Ball_x', 'Ball_y']].copy()\ndf_home.drop(['Ball_x','Ball_y'],axis=1,inplace=True)\ndf_away.drop(['Ball_x','Ball_y'],axis=1,inplace=True)\n\n# convert to long form from wide form\ndef to_long_form(df):\n    df = pd.melt(df, id_vars=df.columns[:3], value_vars=df.columns[3:], var_name = 'player')\n    df.loc[df.player.str.contains('_x'),'coordinate'] = 'x'\n    df.loc[df.player.str.contains('_y'),'coordinate'] = 'y'\n    df = df.dropna(axis=0, how='any')\n    df['player'] = df.player.str[6:-2]\n    df = (df.set_index(['Period','Frame','Time [s]','player','coordinate'])['value']\n          .unstack()\n          .reset_index()\n          .rename_axis(None, axis=1))\n    return df\n\ndf_away = to_long_form(df_away)\ndf_home = to_long_form(df_home)\n\n# First set up the figure, the axis, and the plot elements we want to animate\npitch = Pitch(pitch_type='metricasports', figsize=(16,10.4), pitch_color='grass',\n              pitch_width=68, pitch_length=105, goal_type='line', stripe = True)\nfig, ax = pitch.draw()\nmarker_kwargs = {'marker':'o', 'markeredgecolor': 'black', 'linestyle': 'None'}\nball, = pitch.plot([], [], ms=6, markerfacecolor='w', zorder=3, ax=ax, **marker_kwargs)\naway, = pitch.plot([], [], ms=10, markerfacecolor='#b94b75', ax=ax, **marker_kwargs) #red/maroon\nhome, = pitch.plot([], [], ms=10, markerfacecolor='#7f63b8', ax=ax, **marker_kwargs) #purple\n\n# initialization function: plot the background of each frame\ndef init():\n    ball.set_data([], [])\n    away.set_data([], [])\n    home.set_data([], [])\n    return ball,away,home\n\n# animation function of dataframes' list\ndef animate(i):\n    # set the ball data with the x and y positions for the ith frame\n    ball.set_data(df_ball.iloc[i,3], df_ball.iloc[i,4])\n    # get the frame id for the ith frame\n    frame = df_ball.iloc[i,1]\n    # set the player data using the frame id\n    away.set_data(df_away.loc[df_away.Frame==frame,'x'],\n                  df_away.loc[df_away.Frame==frame,'y'])\n    home.set_data(df_home.loc[df_home.Frame==frame,'x'],\n                  df_home.loc[df_home.Frame==frame,'y']) \n    return ball, away, home\n\n# call the animator, animate every 300 ms\n# note that its hard to get the ffmpeg requirements right. I installed from conda-forge: see the conda.yml file\nanim = animation.FuncAnimation(fig, animate, frames=len(df_ball), init_func=init, interval=50,\n                               blit=True, repeat=False)\nanim.save(os.path.join('figures','README_animation_example.mp4'), dpi=300, fps=25,\n          extra_args=['-vcodec', 'libx264'],\n          savefig_kwargs={'pad_inches':0, 'facecolor':'#457E29'})\n```\n\n#### 10. Pitch appearance\n\nThere are two pitch orientations (`orientation`='vertical' or 'horizontal') and two pitch views (`view`='full' or 'half').\n\nYou can amend the colors of the pitch and its lines and stripes with the arguments: `pitch_color`, `line_color`, and `stripe_color`. It's also possible to change the goals (`goal_type`='line' or 'box') and `linewidth` of the pitch markings.\n\nYou can add padding to the pitch (`pad_top`, `pad_bottom`, `pad_left`, `pad_right`). Negative padding reduces the amount of visible pitch and positive padding increases the amount of visible pitch. Currently the padding relates to the current orientation to make it easier to adjust, i.e. `pad_top`/ `pad_bottom` always changes the y-axis of the current view and `pad_left`, `pad_right` always changes the x-axis of the current view.\n\nYou can view the axis, labela and ticks. These are turned on with the boolean arguments: `axis`, `label`, and `tick`.\n\n#### 11. Advanced examples\n\nTO DO.\n\n## Inspiration\n\nmplsoccer was inspired by other people's work:\n- [Peter McKeever](http://petermckeever.com/2019/01/plotting-pitches-in-python/) inspired the API design\n- [ggsoccer](https://github.com/Torvaney/ggsoccer) - a library for plotting pitches in R\n- [lastrow](https://twitter.com/lastrowview) - often tweets animations from matches and the accompanying code\n- [fcrstats](http://fcrstats.com/) - tutorials for using football data\n- [fcpython](https://fcpython.com/) - Python tutorials for using football data\n- [Karun Singh](https://twitter.com/karun1710) - tweets some interesting football analytics and visuals\n- [StatsBomb](https://statsbomb.com/) - great visual design and free open-data\n- [John Burn-Murdoch](https://twitter.com/jburnmurdoch/status/1057907312030085120) - this tweet got me interested in football analytics.\n\n## Pitch types\n\nUnfortunately, the different data providers haven't yet standardised on a common coordinate system. Here's a diagram showing how they compare:\n![alt text](https://github.com/andrewRowlinson/mplsoccer/blob/master/docs/figures/README_pitch_type.png?raw=true \"pitch types\")\n\n## Contributions\nContributions are welcome. It would be great to add the following functionality to mplsoccer:\n- pass maps\n- pass sonars\n- voronoi diagrams\n\nExamples to help others are also welcome for a gallery.\n\nPlease get in touch at rowlinsonandy@gmail.com or [@numberstorm](https://twitter.com/numberstorm) on Twitter.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andrewRowlinson/mplsoccer", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mplsoccer", "package_url": "https://pypi.org/project/mplsoccer/", "platform": "", "project_url": "https://pypi.org/project/mplsoccer/", "project_urls": {"Homepage": "https://github.com/andrewRowlinson/mplsoccer"}, "release_url": "https://pypi.org/project/mplsoccer/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "mplsoccer is a Python plotting library for drawing soccer / football pitches quickly in Matplotlib.", "version": "0.0.3"}, "last_serial": 7046126, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "92889c9a8e30fbd2505551f3210a6c25", "sha256": "17712cf7633577e9b6b63f98b86ffe5cc7d576aea76172279ab3df402990b93b"}, "downloads": -1, "filename": "mplsoccer-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "92889c9a8e30fbd2505551f3210a6c25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12458, "upload_time": "2020-03-25T21:27:52", "upload_time_iso_8601": "2020-03-25T21:27:52.655814Z", "url": "https://files.pythonhosted.org/packages/0c/3a/61d2756a8e4340efd0afa307395e2845c22168dc903e431b0e272faf49d4/mplsoccer-0.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "9fcc626a72d9a34b2a3122e38d852024", "sha256": "c8305f8619a17e2d483bfc0c286ba8fd2c09786c890840f09c6087d660d41776"}, "downloads": -1, "filename": "mplsoccer-0.0.0.tar.gz", "has_sig": false, "md5_digest": "9fcc626a72d9a34b2a3122e38d852024", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12147, "upload_time": "2020-03-25T21:27:55", "upload_time_iso_8601": "2020-03-25T21:27:55.423392Z", "url": "https://files.pythonhosted.org/packages/27/85/64af55327665780c65a4fdbef70da7b2aba502a2c73a52389172f213bdfd/mplsoccer-0.0.0.tar.gz"}], "0.0.1": [{"comment_text": "", "digests": {"md5": "3a1bca788cb99c1bdfe76e86f49c9b59", "sha256": "0f03f3550c646dbc9ce06c0086639c6462fc594e0991763a7085155147c2752d"}, "downloads": -1, "filename": "mplsoccer-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3a1bca788cb99c1bdfe76e86f49c9b59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12465, "upload_time": "2020-03-25T21:35:44", "upload_time_iso_8601": "2020-03-25T21:35:44.428251Z", "url": "https://files.pythonhosted.org/packages/4d/be/ab50dd269e00ef233007b22238fcbe845f63c7fe7e34d368a7395da760c0/mplsoccer-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3c26cda602bb0246a9eab15820bb84e0", "sha256": "eb851a2e9525f138bc1f78e1facd1d9aa011edbe06257e3eafda8229d56ec77e"}, "downloads": -1, "filename": "mplsoccer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3c26cda602bb0246a9eab15820bb84e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12163, "upload_time": "2020-03-25T21:35:45", "upload_time_iso_8601": "2020-03-25T21:35:45.962228Z", "url": "https://files.pythonhosted.org/packages/d4/e2/833e6e18b27d34e95765aa48bd3c2dae0b2024cf8cb7f1999e09b88d0460/mplsoccer-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "affd1cb90a491e909a8b07307036d569", "sha256": "7e0af531356a32cbfd486559651fe1d8b3dea4a9811cdb22a2669e7d72d3bd53"}, "downloads": -1, "filename": "mplsoccer-0.0.2.tar.gz", "has_sig": false, "md5_digest": "affd1cb90a491e909a8b07307036d569", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36421, "upload_time": "2020-04-17T15:48:11", "upload_time_iso_8601": "2020-04-17T15:48:11.414600Z", "url": "https://files.pythonhosted.org/packages/43/77/d10c908e6f9d2da0a747929a5e23d43b062a9c568d50f423a9c19855ca3a/mplsoccer-0.0.2.tar.gz"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "602eef69f816b5790098d07f3d90e554", "sha256": "0e5e6eb4482fa0596e8ac6ce1ce9542ee57873bd68842520f53ca439454c5adc"}, "downloads": -1, "filename": "mplsoccer-0.0.3.tar.gz", "has_sig": false, "md5_digest": "602eef69f816b5790098d07f3d90e554", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36408, "upload_time": "2020-04-18T05:49:12", "upload_time_iso_8601": "2020-04-18T05:49:12.686131Z", "url": "https://files.pythonhosted.org/packages/66/04/8eb9cbbe694e48aefcc5fa050b9be3e11463fdabe5869bddf15480cc207e/mplsoccer-0.0.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "602eef69f816b5790098d07f3d90e554", "sha256": "0e5e6eb4482fa0596e8ac6ce1ce9542ee57873bd68842520f53ca439454c5adc"}, "downloads": -1, "filename": "mplsoccer-0.0.3.tar.gz", "has_sig": false, "md5_digest": "602eef69f816b5790098d07f3d90e554", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36408, "upload_time": "2020-04-18T05:49:12", "upload_time_iso_8601": "2020-04-18T05:49:12.686131Z", "url": "https://files.pythonhosted.org/packages/66/04/8eb9cbbe694e48aefcc5fa050b9be3e11463fdabe5869bddf15480cc207e/mplsoccer-0.0.3.tar.gz"}]}