{"info": {"author": "Arne Traue, Gerrit Book, Praneeth Balakrishna", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Gym Electric Motor (GEM)\n![](docs/plots/project_banner.jpg)\n\n[![Build Status](https://travis-ci.org/upb-lea/gym-electric-motor.svg?branch=master)](https://travis-ci.org/upb-lea/gym-electric-motor)\n[![codecov](https://codecov.io/gh/upb-lea/gym-electric-motor/branch/master/graph/badge.svg)](https://codecov.io/gh/upb-lea/gym-electric-motor)\n[![License](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/upb-lea/gym-electric-motor/blob/master/LICENSE)\n\n__The gym-electric-motor (GEM) package is a software toolbox for the\nsimulation of\ndifferent electric motors.__ \n\nThe toolbox is built upon the [OpenAI Gym Environments](https://gym.openai.com/) for reinforcement learning. \nTherefore, the toolbox is specifically designed for running reinforcement \nlearning algorithms to train agents controlling electric motors.\n\n[Read the detailed docs!](https://upb-lea.github.io/gym-electric-motor/)\n\nSo far, several DC-motor models and the three-phase motors permanent magnet synchronous motor (PMSM)\nand synchronous reluctance motor (SynRM) are available.\nBeside electrical motors, also converters and load models are implemented. The converters can be driven by means of a duty cycle (continuous mode) or \nswitching commands (discrete mode). \nThe figure shows the basic scheme of the converter, motor and load. \n### Physical Structure of the Environment's Components\n![](docs/plots/SCML_Setting.svg)\n### Control Flow of a Step Cycle of the Environment \n![](docs/plots/CycleScheme.svg)\n\n### Citation\nA whitepaper for this framework is available under [arxiv.org/abs/1910.09434\n](https://arxiv.org/abs/1910.09434). Please use the following BibTeX entry for citing us:\n```\n@misc{traue2019reinforcement,\n    title={Towards a Reinforcement Learning Environment Toolbox for Intelligent Electric Motor Control},\n    author={Arne Traue and Gerrit Book and Wilhelm Kirchg\u00e4ssner and Oliver Wallscheid},\n    year={2019},\n    eprint={1910.09434},\n    archivePrefix={arXiv},\n    primaryClass={eess.SY}\n}\n```\n\n## Installing\n\n- Install gym-electric-motor from PyPI (recommended):\n\n```\npip install gym-electric-motor\n```\n\n- Install from Github source:\n\n```\ngit clone git@github.com:upb-lea/gym-electric-motor.git \ncd gym-electric-motor\n# Then either\npython setup.py install\n# or alternatively\npip install -e .\n```\n## Authors\nArne Traue, Gerrit Book\n\n## Getting started\nLike every gym environment, the basic user interface consists of four main functions.\n* `import gym_electric_motor as gem`  \n    Import of the package. \n\n* `env = gem.make(environment-id, **kwargs)`  \n    Returns an instantiated motor environment. Call this function at the beginning.\n    The `gem.make()` method is equal to the `gym.make()`. By using `gem.make()`you can avoid importing gym additionally. \n\n* `(initial_state, initial_reference) = env.reset()`  \n    Resets the motor. This includes a new initial state and new reference trajectories.\n    Call this function before a new episode starts. \n\n* `(state, reference), reward, done, _ = env.step(action)`      \n    Simulate one single time step on the motor with an action.\n    Call this function iteratively until termination is reached.\n\n* `env.render()`    \n    Update the visualization of the motor states.\n\n### GEM Make Call\nThe make function takes the environment-ids and several constructor arguments.\nEvery environment also works without further parameters with default values.\nThese default parameters can be looked up in the API-documentation of every GEM-environment.\nWith the environment-id you select a certain motor type and action type (continuous or discrete) and with the further \nconstructor arguments you can parametrize the environment to your control problem.\n\n##### Environment Ids\n\n* `'emotor-dc-extex-cont-v1'`     \n    Externally excited DC motor with continuous actions.\n\n* `'emotor-dc-extex-disc-v1'`   \n    Externally excited DC motor with discrete actions.\n\n* `'emotor-dc-permex-cont-v1'`    \n    Permanently excited DC motor with continuous actions.\n\n* `'emotor-dc-permex-disc-v1'`    \n    Permanently excited DC motor with discrete actions.\n\n* `'emotor-dc-shunt-cont-v1'`    \n    DC shunt motor with continuous actions.\n\n* `'emotor-dc-shunt-disc-v1'`    \n    DC shunt motor with discrete actions.\n\n* `'emotor-dc-series-cont-v1'`    \n    DC series motor with continuous actions.\n\n* `'emotor-dc-series-disc-v1'`  \n    DC series motor with discrete actions.\n\n* `'emotor-pmsm-cont-v1'`:  \n    Permanent magnet synchronous motor with continuous actions.\n\n* `'emotor-pmsm-disc-v1'`:  \n    Permanent magnet synchronous motor with discrete actions.\n\n* `'emotor-synrm-cont-v1'`:  \n    Synchronous reluctance motor with continuous actions.\n\n* `'emotor-synrm-disc-v1'`:  \n    Synchronous reluctance motor with discrete actions.\n\n#### Make Keyword-Arguments\nUsing the keyword arguments in the `gem.make(id, **kwargs)` function you can select different function modules for the \nenvironment and parametrize these modules. \nThe main level modules of each GEM-environment consists of four function modules:\n\n* Physical System\n    * keyword: `physical_system`\n    * Specification and simulation of the system model.\n* Reference Generator\n    * keyword: `reference_generator`\n    * Generation of references that the physical system has to follow.\n* Reward Function\n    * keyword: `reward_function`\n    * Reward calculation based on the current state and reference.\n* Visualization    \n    * keyword: `visualization`\n    * Visualization of the physical systems state, reference and rewards.\n* State Filter\n    * keyword: `state_filter`\n    * Selection of states that shall be shown to the agent.\n\nThese function modules can be selected in three ways:\n\n* Passing a keystring (and further keyword arguments for the class) :\n     * `reference_generator='SinusoidalReference', amplitude_range=(0.2, 0.8)`\n\n* Passing a class pointer (and further keyword arguments for the class)\n    * `reference_generator=SinusoidalReferenceGenerator, amplitude_range=(0.2,0.8)`\n\n* Passing an instantiated object\n  * `reference_generator = SinusoidalReferenceGenerator(amplitude_range=(0.2,0.8)`\n\nFurthermore, the internal function modules of the physical systems like the converter, motor, load can be selected in\nthe make keyword-arguments in the same way. \n\nThe available modules and specific keyword-arguments for each module can be looked up in the API-documentation.\n### Reset\nThe reset function determines new references, new initial values and resets the visualization.\nCall this function before a new episode begins.\nThe parameters of the motor, converter and load will be those during instantiation.\n\n### Step\nThis function performs one action on the environment for one time step.\nIt simulates the motor and needs to be called in every time step. It takes the action as parameter only.\nFirst the input voltage to the motor from the converter is determined and afterwards an integrator is used to compute \nthe next state. \nEventually, the reward is evaluated and returned together with the next observation and a flag indicating termination.\nSeveral reward functions are available.\n\n### Render\nThe visualization contains graphs of the motor quantities 'speed, voltages, currents, torque' for one episode. \nWhat should be shown is to be specified in the configuration-parameter.\nThe quantities that should be displayed can be specified in the constructor-parameters.\nAll visualizations are optional and recommended to be disabled for increased speed of training.\n\n### Examples\n\n- Conventional PI controller as speed controller on a dc series motor [(jump to source)](examples/pi_series_omega_control.py).\n\n- Training and testing of a [Keras-rl](https://github.com/keras-rl/keras-rl) DDPG-Agent as a speed controller on a dc series motor [(jump to source)](examples/ddpg_series_omega_control.py).\n\n## Motor Models\nThe following motor models are included:\n\nFour DC motors:\n\n- permanently excited motor\n- externally excited motor\n- series motor\n- shunt motor\n\nTwo three phase motors:\n\n- PMSM (permanent magnet synchronous motor)\n- SynRM (synchronous reluctance motor)\n\n### Converter\nFollowing converters are included:\n\n- 1 quadrant converter (1QC)\n\n- 2 quadrant converter (2QC) as an asymmetric half bridge with both current polarities\n\n- 4 quadrant converter (4QC)\n\n- B6 Bridge Converter (B6C)\n\nAll converters can consider interlocking times and a dead time of one sampling interval.\nFurthermore, they can be controlled with a discrete action space or a continuous action space.\n\nDiscrete actions are the direct switching states of the transistors.\nContinuous actions are the duty cycles for a pulse width modulation on the transistors. \n\n### Load\nThe load model consists of a quadratic load function, with user defined coefficients. \nFurthermore the moment of inertia of the load attached to the motor can be specified.\n\n### Notes about the Parameters\nAll nominal values of voltages and currents are DC values in the case of a DC motor and peak phase values for the PMSM.\nTherefore, data sheet values for line voltage and phase currents of a PMSM has to be transformed with:\n\n![](docs/plots/voltagetransformation.svg)\n\nFurthermore, the angular velocity is the mechanical one and not the electrical: \n\n![](docs/plots/omegame.svg)\n\n\n### Running Unit Tests with Pytest\nTo run the unit tests ''pytest'' is required.\nAll tests can be found in the ''tests'' folder.\nExecute pytest in the project's root folder:\n```\n>>> pytest\n```\nor with test coverage:\n```\n>>> pytest --cov=./\n```\nAll tests shall pass.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/upb-lea/gym-electric-motor", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gym-electric-motor", "package_url": "https://pypi.org/project/gym-electric-motor/", "platform": "", "project_url": "https://pypi.org/project/gym-electric-motor/", "project_urls": {"Homepage": "https://github.com/upb-lea/gym-electric-motor"}, "release_url": "https://pypi.org/project/gym-electric-motor/0.0.4/", "requires_dist": ["matplotlib (>=3.1.0)", "numpy (>=1.16.4)", "scipy (>=1.2.1)", "gym (>=0.15.4)", "pytest (>=5.2.2)", "pytest-cov", "PyQT5"], "requires_python": "", "summary": "An OpenAI gym environment for electric motor control.", "version": "0.0.4"}, "last_serial": 6593234, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "05fbe0650c39ea1c1f2ec023e6448a21", "sha256": "544847eaab4da6edc4eda2173bea4a578cfbab4409f546c3dca520323b819f9c"}, "downloads": -1, "filename": "gym_electric_motor-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "05fbe0650c39ea1c1f2ec023e6448a21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2036, "upload_time": "2019-10-21T14:18:48", "upload_time_iso_8601": "2019-10-21T14:18:48.390788Z", "url": "https://files.pythonhosted.org/packages/07/67/f126488b6c6f2547536e1dae0865e9af9431934dd56b83c859c0b27fa575/gym_electric_motor-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4bf2cd48bc40e88a617d02648f833f75", "sha256": "5995f0d885d2cecc63f93e11c86021064aa67a6e560234cb36e8949a04ac4ead"}, "downloads": -1, "filename": "gym_electric_motor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4bf2cd48bc40e88a617d02648f833f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3211, "upload_time": "2019-10-21T14:18:51", "upload_time_iso_8601": "2019-10-21T14:18:51.838779Z", "url": "https://files.pythonhosted.org/packages/10/c7/3afe5d4fe0201298b5e2f07e4b1838dd70507337c44e54a6e3cb3024ccad/gym_electric_motor-0.0.1.tar.gz"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f3940023e8b8eb9355dea85b1ead65ef", "sha256": "d8ee5bd123d46de069225d8399e200b4b71549ba8dd8584c3558d7c4e496ef8d"}, "downloads": -1, "filename": "gym_electric_motor-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f3940023e8b8eb9355dea85b1ead65ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2054, "upload_time": "2020-02-04T10:21:21", "upload_time_iso_8601": "2020-02-04T10:21:21.816195Z", "url": "https://files.pythonhosted.org/packages/87/58/1df8c7f6a29a9d79b06e9fc788b29bd155c8a2b40067ed9d7b0d53d0a7f4/gym_electric_motor-0.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "77af00e08c9424a9e09fdc8509709e61", "sha256": "7046b3b849ba25de134ece107dc8a124becaee8f2e7067887e91cfb359b1dbbb"}, "downloads": -1, "filename": "gym_electric_motor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "77af00e08c9424a9e09fdc8509709e61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4407, "upload_time": "2020-02-04T10:21:23", "upload_time_iso_8601": "2020-02-04T10:21:23.537409Z", "url": "https://files.pythonhosted.org/packages/1f/40/7406398e537582b55702f7f054219ac49582867cc7137ffea28baed1b117/gym_electric_motor-0.0.3.tar.gz"}], "0.0.4": [{"comment_text": "", "digests": {"md5": "64a8050cee563dc74fb482c6a6ed87ea", "sha256": "4f7c1922ce77a4c2745e0a3d2e464ed913a4ee992a283c37dacdf780d2939dbe"}, "downloads": -1, "filename": "gym_electric_motor-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "64a8050cee563dc74fb482c6a6ed87ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122504, "upload_time": "2020-02-08T10:14:47", "upload_time_iso_8601": "2020-02-08T10:14:47.385530Z", "url": "https://files.pythonhosted.org/packages/20/df/f29e9445364804ebf612ff738b83e59c69bf0fe3827e1e4d379542253ca6/gym_electric_motor-0.0.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "992a43d179ea82a8b721f70fb0b2acf9", "sha256": "51c2f09361e5689e774d83fc3010088dc97459d05078b0a474ca0cae416ee24b"}, "downloads": -1, "filename": "gym_electric_motor-0.0.4.tar.gz", "has_sig": false, "md5_digest": "992a43d179ea82a8b721f70fb0b2acf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95727, "upload_time": "2020-02-08T10:14:49", "upload_time_iso_8601": "2020-02-08T10:14:49.490781Z", "url": "https://files.pythonhosted.org/packages/54/96/8a6214c97ddf8b19336929b04b10600e51f9b127c57b2804f24f1fbff8c2/gym_electric_motor-0.0.4.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "64a8050cee563dc74fb482c6a6ed87ea", "sha256": "4f7c1922ce77a4c2745e0a3d2e464ed913a4ee992a283c37dacdf780d2939dbe"}, "downloads": -1, "filename": "gym_electric_motor-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "64a8050cee563dc74fb482c6a6ed87ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122504, "upload_time": "2020-02-08T10:14:47", "upload_time_iso_8601": "2020-02-08T10:14:47.385530Z", "url": "https://files.pythonhosted.org/packages/20/df/f29e9445364804ebf612ff738b83e59c69bf0fe3827e1e4d379542253ca6/gym_electric_motor-0.0.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "992a43d179ea82a8b721f70fb0b2acf9", "sha256": "51c2f09361e5689e774d83fc3010088dc97459d05078b0a474ca0cae416ee24b"}, "downloads": -1, "filename": "gym_electric_motor-0.0.4.tar.gz", "has_sig": false, "md5_digest": "992a43d179ea82a8b721f70fb0b2acf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 95727, "upload_time": "2020-02-08T10:14:49", "upload_time_iso_8601": "2020-02-08T10:14:49.490781Z", "url": "https://files.pythonhosted.org/packages/54/96/8a6214c97ddf8b19336929b04b10600e51f9b127c57b2804f24f1fbff8c2/gym_electric_motor-0.0.4.tar.gz"}]}