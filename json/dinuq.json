{"info": {"author": "Spyros Lytras", "author_email": "s.lytras.1@research.gla.ac.uk", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "=====\nDinuQ\n=====\n\nThe DinuQ (Dinucleotide Quantification) Python3 package provides a range of metrics for quantifying dinucleotide representation and synonymous codon usage in a DNA/RNA sequence. These include the recently developed Synonymous Dinucleotide Usage (SDU) and Relative Synonymous Dinucleotide Usage (RSDU) (manuscript under review).\n\n\nUsage\n\"\"\"\"\"\n\n\nPackage installation\n--------------------\n\nUsing pip, in a Unix terminal do:\n``pip install dinuq``\n\nThen in python do:\n``import dinuq``\n\nModules\n-------\n\ndinuq.SDU()\n^^^^^^^^^^^\nThe SDU module will calculate the Synonymous Dinucleotide Usage for all sequences in a given fasta file.\n\n|\n\n*Arguments*\n\nRequired arguments: \n\n- a fasta file with:\n        - any number of coding sequences (no internal stop codons)\n        - a different, preferably short, fasta header for each sequence (e.g. an accession)\n- A list of dinucleotides of interest (still needs to be a list if it's only one, e.g. ['CpG'])\n\nOptional arguments: \n\n- A list of dinucleotide frame positions. By default the module will only calculate the SDU for the bridge position, for each specified dinucleotide.\n- If you want to calculate error intervals for the SDU values, you can specify a number of iterations for the error measuring method (suggested value is 1000). Notice that this will significantly slow down the calculation.\n\n\n``sdu = dinuq.SDU(fasta_file, dinucl, position = ['bridge'], samples = 'none')``\n\n\n- ``fasta file #required``\n\n- ``dinucl = ['CpC', 'CpG', 'CpU', 'CpA', 'GpC', 'GpG', 'GpU', 'GpA', 'UpC', 'UpG', 'UpU', 'UpA', 'ApC', 'ApG', 'ApU', 'ApA'] #required``\n\n- ``position = ['pos1', 'pos2', 'bridge'] #default is bridge``\n\n- ``samples = integer #default is none``\n\n|\n\n*Output*\n\nThe output of the module is a dictionary of accessions as keys and inner dictionaries as values. The inner dictionaries have each dinucleotide position as keys (e.g. CpGbridge) and a list of calculated SDU values as the value.\nIf the error margins are being calculated, an inner list of SDU values calculated for each random sampling (specified in the samples argument) is included.\n\n\n``sdu = {'accession': {'dinucleotideposition': [sdu_value, [bootstrap_value1, bootstrap_value2, bootstrap_valuen]]}}``\n\n|\n\ndinuq.RSDU()\n^^^^^^^^^^^^\n\nThe RSDU module will calculate the Relative Synonymous Dinucleotide Usage for all sequences in a given fasta file.\n\n|\n\n*Arguments*\n\nThe arguments are the same as the these for the SDU module.\n\n\n``rsdu = dinuq.RSDU(fasta_file, dinucl, position = ['bridge'], samples = 'none')``\n\n\n- ``fasta file #required``\n\n- ``dinucl = ['CpC', 'CpG', 'CpU', 'CpA', 'GpC', 'GpG', 'GpU', 'GpA', 'UpC', 'UpG', 'UpU', 'UpA', 'ApC', 'ApG', 'ApU', 'ApA'] #required``\n\n- ``position = ['pos1', 'pos2', 'bridge'] #default is bridge``\n\n- ``samples = integer #default is none``\n\n|\n\n*Output*\n\nThe output format is the same as in the SDU module.\n\n\n``rsdu = {'accession': {'dinucleotideposition': [rsdu_value, [bootstrap_value1, bootstrap_value2, bootstrap_valuen]]}}``\n\n|\n\ndinuq.dict_to_tsv()\n^^^^^^^^^^^^^^^^^^^\n\nThis module creates a tsv file in your working directory with the sdu or rsdu dictionary information in a table format. The user can choose how to summarise the error distribution (STDEV, SEM, MIN-MAX) if that has been calculated.\n\n|\n\n*Arguments*\n\nRequired arguments: \n\n- a sdu or rsdu dictionary produced by the SDU or RSDU module respectively\n- A name for the output tsv file\n\nOptional arguments: \n\n- A summary of the error distribution (given that it has been calculated by the SDU/RSDU module). This can be:\n\t\t- The minimum and maximum value of the distribution (extrema)\n\t\t- The standard deviation margins around the error distribution's mean (stdev)\n\t\t- The standard error of the mean margins around the mean (sem)\n\n\n``dinuq.dict_to_tsv(dictionary, output_file, error = 'none')``\n\n\n- ``dictionary = sdu or rsdu #required``\n\n- ``output_file #required``\n\n- ``error = 'none', #default``\n\t\t- ``'extrema' #minimum and maximum of bootstrapped distribution``\n\t\t- ``'stdev' #mean plus/minus the distribution's standard deviation``\n\t\t- ``'sem' #mean plus/minus the distribution's standard error of the mean``\n\t\n|\n\t\ndinuq.RDA()\n^^^^^^^^^^^\nThe RDA module will calculate the Relative Dinucleotide Abundance for all sequences in a given fasta file, either for the entire sequence or specific dinucleotide frame positions.\n\n|\n\n*Arguments*\n\nRequired arguments: \n\n- a fasta file with:\n        - any number of coding sequences (no internal stop codons)\n        - a different, preferably short, fasta header for each sequence (e.g. an accession)\n- A list of dinucleotides of interest (still needs to be a list if it's only one, e.g. ['CpG'])\n\nOptional arguments: \n\n- A list of dinucleotide frame positions. By default the module will calculate the RDA for the entire sequence (no frame position separation).\n\n\n``rda = dinuq.RDA(fasta_file, dinucl, position = ['all'])``\n\n\n- ``fasta_file #required``\n\n- ``dinucl = ['CpC', 'CpG', 'CpU', 'CpA', 'GpC', 'GpG', 'GpU', 'GpA', 'UpC', 'UpG', 'UpU', 'UpA', 'ApC', 'ApG', 'ApU', 'ApA'] #required``\n\n- ``position = ['pos1', 'pos2', 'bridge', 'all'] #default is all``\n\n|\n\n*Output*\n\nThe output of the module is a dictionary of accessions as keys and inner dictionaries as values. The inner dictionaries have each dinucleotide position as keys (e.g. CpGbridge) and a list of the calculated RDA value as the value.\n\n``rda = {'accession': {'dinucleotideposition': [rda_value]}}``\t\n\n|\n\ndinuq.RDA_to_tsv()\n^^^^^^^^^^^^^^^^^^\n\nThis module creates a tsv file in your working directory with the rda dictionary information in a table format.\n\n|\n\n*Arguments*\n\nRequired arguments: \n\n- a rda dictionary produced by the RDA module\n- A name for the output tsv file\n\n\n``dinuq.RDA_to_tsv(dictionary, output_file)``\n\n\n``dictionary = rda #required``\n\n``output_file #required``\n\t\n|\n\t\ndinuq.RSCU()\n^^^^^^^^^^^^\nThe RSCU module will calculate the Relative Synonymous Codon Usage for all sequences in a given fasta file.\n\n|\n\n*Arguments*\n\nRequired arguments: \n\n- a fasta file with:\n        - any number of coding sequences (no internal stop codons)\n        - a different, preferably short, fasta header for each sequence (e.g. an accession)\n\n\n``rscu = dinuq.RSCU(fasta_file)``\n\n- ``fasta_file #required``\n\n\n|\n\n*Output*\n\nThe output of the module is a dictionary of accessions as keys and inner dictionaries as values. The inner dictionaries have each codon as keys and the calculated RSCU value as the value.\n\n``rscu = {'accession': {'codon': rscu_value}}``\n\n|\n\ndinuq.RSCU_to_tsv()\n^^^^^^^^^^^^^^^^^^^\n\nThis module creates a tsv file in your working directory with the rscu dictionary information in a table format.\n\n|\n\n*Arguments*\n\nRequired arguments: \n\n- a rscu dictionary produced by the RSCU module\n- A name for the output tsv file\n\n\n``dinuq.RSCU_to_tsv(dictionary, output_file)``\n\n\n``dictionary = rscu #required``\n\n``output_file #required``", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/spyros-lytras/dinuq/archive/v1.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spyros-lytras/dinuq", "keywords": "bioinformatics dinucleotides viruses", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dinuq", "package_url": "https://pypi.org/project/dinuq/", "platform": "", "project_url": "https://pypi.org/project/dinuq/", "project_urls": {"CVR Bioinformatics": "https://bioinformatics.cvr.ac.uk/", "Download": "https://github.com/spyros-lytras/dinuq/archive/v1.0.1.tar.gz", "Homepage": "https://github.com/spyros-lytras/dinuq"}, "release_url": "https://pypi.org/project/dinuq/1.0.1/", "requires_dist": null, "requires_python": "~=3.5", "summary": "The Dinucleotide Quantification Python package", "version": "1.0.1"}, "last_serial": 6728765, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0f538291d2349ca30449c945dde69253", "sha256": "c8e30d787f5759daaa74563ea3d22db4e03599a3048c06d29047f7caf27192ad"}, "downloads": -1, "filename": "dinuq-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0f538291d2349ca30449c945dde69253", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 13173, "upload_time": "2020-02-27T13:35:18", "upload_time_iso_8601": "2020-02-27T13:35:18.262075Z", "url": "https://files.pythonhosted.org/packages/3c/9e/015c1f3bfd497656df7477d1d1fd2de69f314fff11914611e82f76112cc4/dinuq-1.0.0.tar.gz"}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5d3bd050354bc0d200c114082d7110b0", "sha256": "99f78f4cf18ddc353334fb26c6164ed5c5b73ba3d659365475ddcd4287b61853"}, "downloads": -1, "filename": "dinuq-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5d3bd050354bc0d200c114082d7110b0", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 13685, "upload_time": "2020-03-01T15:24:30", "upload_time_iso_8601": "2020-03-01T15:24:30.206436Z", "url": "https://files.pythonhosted.org/packages/f0/4c/89eef87c04a4172ac4ba1d5e6d919379bd51efe432179f0cc7c1b74ce383/dinuq-1.0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d3bd050354bc0d200c114082d7110b0", "sha256": "99f78f4cf18ddc353334fb26c6164ed5c5b73ba3d659365475ddcd4287b61853"}, "downloads": -1, "filename": "dinuq-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5d3bd050354bc0d200c114082d7110b0", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 13685, "upload_time": "2020-03-01T15:24:30", "upload_time_iso_8601": "2020-03-01T15:24:30.206436Z", "url": "https://files.pythonhosted.org/packages/f0/4c/89eef87c04a4172ac4ba1d5e6d919379bd51efe432179f0cc7c1b74ce383/dinuq-1.0.1.tar.gz"}]}