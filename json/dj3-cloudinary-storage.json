{"info": {"author": "Tiago Cordeiro", "author_email": "tiago@mulhergorila.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP"], "description": "Django 3 Cloudinary Storage\n===========================\n\nDjango Cloudinary Storage is a Django package that facilitates integration with [Cloudinary](http://cloudinary.com/)\nby implementing [Django Storage API](https://docs.djangoproject.com/en/3.0/howto/custom-file-storage/).\nWith several lines of configuration, you can start using Cloudinary for both media and static files.\nAlso, it provides management commands for removing unnecessary files, so any cleanup will be a breeze.\nIt uses [pycloudinary](https://github.com/cloudinary/pycloudinary) package under the hood.\n\n[![Build Status](https://travis-ci.org/tiagocordeiro/dj3-cloudinary-storage.svg?branch=master)](https://travis-ci.org/tiagocordeiro/dj3-cloudinary-storage)\n[![Updates](https://pyup.io/repos/github/tiagocordeiro/dj3-cloudinary-storage/shield.svg)](https://pyup.io/repos/github/tiagocordeiro/dj3-cloudinary-storage/)\n[![Python 3](https://pyup.io/repos/github/tiagocordeiro/dj3-cloudinary-storage/python-3-shield.svg)](https://pyup.io/repos/github/tiagocordeiro/dj3-cloudinary-storage/)\n[![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/tiagocordeiro/dj3-cloudinary-storage/blob/master/LICENSE)\n[![codecov](https://codecov.io/gh/tiagocordeiro/dj3-cloudinary-storage/branch/master/graph/badge.svg)](https://codecov.io/gh/tiagocordeiro/dj3-cloudinary-storage)\n\nTable of content\n-----------------\n\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Usage with media files](#usage-with-media-files)\n    - [Usage with raw files](#usage-with-raw-files)\n    - [Usage with video files](#usage-with-video-files)\n- [Usage with static files](#usage-with-static-files)\n- [Management commands](#management-commands)\n    - [collectstatic](#collectstatic)\n    - [deleteorphanedmedia](#deleteorphanedmedia)\n    - [deleteredundantstatic](#deleteredundantstatic)\n- [Settings](#settings)\n- [How to run tests](#how-to-run-tests)\n\nRequirements\n------------\n\nThe package requires Python 3.5+ and Django 3.0+. It has been tested on Linux and Mac OS X.\n\nInstallation\n------------\n\nTo install the package, just run:\n```\n$ pip install dj3-cloudinary-storage\n```\n\nIf you need to upload any video files, run:\n```\n$ pip install dj3-cloudinary-storage[video]\n```\nwhich will additionally install [python-magic](https://github.com/ahupp/python-magic) for uploaded video validation.\n\nAlso, in case you use Django `ImageField`, make sure you have Pillow installed:\n```\n$ pip install Pillow\n```\n\nOnce you have done that, add `cloudinary` and `cloudinary_storage` to you installed apps in your `settings.py`. If you\nare going to use this package for static and/or media files, make sure that `cloudinary_storage` is before `django.contrib.staticfiles`:\n```python\nINSTALLED_APPS = [\n    # ...\n    'cloudinary_storage',\n    'django.contrib.staticfiles',\n    'cloudinary',\n    # ...\n]\n```\nbecause dj3-cloudinary-storage overwrites Django `collectstatic` command. If you are going to use it only for media files\nthough, it is `django.contrib.staticfiles` which has to be first:\n```python\nINSTALLED_APPS = [\n    # ...\n    'django.contrib.staticfiles',\n    'cloudinary_storage',\n    'cloudinary',\n    # ...\n]\n```\n\nNext, you need to add Cloudinary credentials to `settings.py`:\n```python\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': 'your_cloud_name',\n    'API_KEY': 'your_api_key',\n    'API_SECRET': 'your_api_secret'\n}\n```\nInstead of putting credentials in `settings.py`, you can provide them as `CLOUDINARY_CLOUD_NAME`,\n`CLOUDINARY_API_SECRET` and `CLOUDINARY_API_KEY` environment variables. It is possible as well to set only\n`CLOUDINARY_URL` variable, combining all the information, for example:\n```\n$ export CLOUDINARY_URL=cloudinary://your_api_key:your_api_secret@your_cloud_name\n```\nFor those of you who use Heroku, that's a very good news, because you won't need to set it yourself, as Heroku sets\n`CLOUDINARY_URL` environment variable for you (provided you use Cloudinary as Heroku addon).\n\nAlso, be aware that `settings.py` takes precedence over environment variables.\n\nUsage with media files\n----------------------\n\nThe package provides three media storages:\n- `cloudinary_storage.storage.MediaCloudinaryStorage` for images\n- `cloudinary_storage.storage.RawMediaCloudinaryStorage` for raw files, like txt, pdf\n- `cloudinary_storage.storage.VideoMediaCloudinaryStorage` for videos\n\nAbove distinction if necessary as Cloudinary API needs to know resource type in many of its methods.\n\nNow, let's consider the most probable scenario that you will use Cloudinary for images uploaded by users of your\nwebsite. Let's say you created a following Django model:\n```python\nclass TestModel(models.Model):\n    name = models.CharField(max_length=100)\n    image = models.ImageField(upload_to='images/', blank=True)\n```\nAll you need to do is to add two lines to `settings.py`:\n```python\nMEDIA_URL = '/media/'  # or any prefix you choose\nDEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\n```\nAnd that's it! All your models with `ImageField` will be connected to Cloudinary.\n\nNow, in order to put this image into your template, you can just type:\n```django\n<img src=\"{{ test_model_instance.image.url }}\" alt=\"{{ test_model_instance.image.name }}\">\n```\n\nHowever, doing that in this way, the image will be downloaded with its original size, as uploaded by a user.\nTo have more control, you can use Cloudinary image transformations. For example, to change the image's size,\nuse below code:\n```django\n{% load cloudinary %}\n{% cloudinary test_model_instance.image.name width=100 height=100 %}\n```\nOf cource, this only scratched the surface. Cloudinary is extremely powerful and I highly recommend you to check\n[pycloudinary](https://github.com/cloudinary/pycloudinary) documentation.\n\nNow, if you only need to use Cloudinary for images, you can skip the rest of this subsection.\nHowever, if you are going to use it for videos and/or raw files, let's continue.\n\n### Usage with raw files\n\nIf your users can upload text or other raw files, but not images, you would just use different default storage\nin `settings.py`:\n```python\nDEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.RawMediaCloudinaryStorage'\n```\nBut what if they could upload both types? Well, not a problem! Just set `DEFAULT_FILE_STORAGE` setting to the most\ncommon resource type, and for fields of different type, you will need to set a correct storage individually, like this:\n```python\nfrom django.db import models\n\nfrom cloudinary_storage.storage import RawMediaCloudinaryStorage\n\nclass TestModelWithRawFileAndImage(models.Model):\n    name = models.CharField(max_length=100)\n    raw_file = models.ImageField(upload_to='raw/', blank=True, storage=RawMediaCloudinaryStorage())\n    image = models.ImageField(upload_to='images/', blank=True)  # no need to set storage, field will use the default one\n```\nIn above example we assumed `DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'`,\nthat's why we set storage explicitly only for `raw_file`.\n\n### Usage with video files\n\nUsage with video files is analogous to raw files, but you will need to use `validate_video` validator for video fields\nto validate user's uploaded videos. If not, Cloudinary will raise an error if a user tries to upload non-video file,\nwhich will crash your website. Of cource, you could use your own validator, but if you want to use built-in one,\ndo it like this:\n```python\nfrom django.db import models\n\nfrom cloudinary_storage.storage import VideoMediaCloudinaryStorage\nfrom cloudinary_storage.validators import validate_video\n\nclass TestModelWithVideoAndImage(models.Model):\n    name = models.CharField(max_length=100)\n    video = models.ImageField(upload_to='videos/', blank=True, storage=VideoMediaCloudinaryStorage(),\n                              validators=[validate_video])\n    image = models.ImageField(upload_to='images/', blank=True)  # no need to set storage, field will use the default one\n```\n\nUsage with static files\n-----------------------\n\nIn order to move your static files to Cloudinary, update your `settings.py`:\n```python\nSTATIC_URL = '/static/'\nSTATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'\n```\n\nAfter that, run Django `collectstatic` command:\n```\n$ python manage.py collectstatic\n```\n\nPlease note that only files with hashed name will be uploaded by default - this behavior can be changed by adding\n`--upload-unhashed-files` argument to `collectstatic` command. If you are not sure why it is useful to add hash to file\nnames, shortly speaking, it allows static files to be safely cached by Cloudinary CDN and web browsers. Without it\nfiles' modification would become very problematic, because your website's users would use their private older copies.\nHashing prevents this issue as any file change will change its url as well, which would force a browser to download\na new version of a file.\n\nAlso, be aware that `collectstatic` will create a JSON file, which shows mapping of unhashed file names to their hashed\nversions. This file will be available at `./manifest/staticfiles.json` by default - you could change that\nin your `settings.py`, for example:\n```python\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nCLOUDINARY_STORAGE = {\n    # other settings, like credentials\n    'STATICFILES_MANIFEST_ROOT': os.path.join(BASE_DIR, 'my-manifest-directory')\n}\n```\nIt is highly recommended to keep up-to-date version of this file in your version control system.\n\nIn order to use static files from Cloudinary, make sure you write your templates in below style:\n```django\n{% load static %}\n<link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n<img src=\"{% static 'images/dummy-static-image.jpg' %}\" alt=\"dummy static image\">\n```\n\nIf you would like to apply Cloudinary transformations for static images or videos, please use `cloudinary_static`\ntemplate tag as follows:\n```django\n{% load cloudinary_static %}\n{% cloudinary_static 'images/dummy-static-image.jpg' width=50 height=50 %}\n```\nYou can adjust `STATIC_IMAGES_EXTENSIONS` and `STATIC_VIDEOS_EXTENSIONS` to set rules which file extensions are treated\nas image or video files. Files with different extensions will be uploaded as Cloudinary raw files and no transformations\ncould be applied for those files. Also, please note that `cloudinary_static` is just a thin wrapper around `cloudinary`\ntag from [pycloudinary](https://github.com/cloudinary/pycloudinary) library, so please go to its documentation\nto see what transformations are possible.\n\nPlease note that you must set `DEBUG` to `False` to fetch static files from Cloudinary. With `DEBUG` equal to `True`,\nDjango `staticfiles` app will use your local files for easier and faster development (unless you use\n`cloudinary_static` template tag).\n\nManagement commands\n-------------------\n\nThe package provides three management commands:\n- `collectstatic`\n- `deleteorphanedmedia`\n- `deleteredundantstatic`\n\n### collectstatic\n\nAdds minor modifications to Django `collectstatic` to improve upload performance. It uploads only hashed files\nas the default. Also, it uploads a file only when necessary, namely it won't upload the file if a file with the same\nname and content will be already uploaded to Cloudinary, which will save both time and bandwidth.\n\nOptional arguments:\n- `--upload-unhashed-files` - uploads files without hash added to their name along with hashed ones, use it only\nwhen it is really necessary\n- `--noinput` - non-interactive mode, the command won't ask you to do any confirmations\n\n### deleteorphanedmedia\n\nDeletes needless media files, which are not connected to any model. It is possible to provide paths to prevent deletion\nof given files in `EXCLUDE_DELETE_ORPHANED_MEDIA_PATHS` in `settings.py`, for example:\n```python\nCLOUDINARY_STORAGE = {\n    # other settings\n    'EXCLUDE_DELETE_ORPHANED_MEDIA_PATHS': ('path/', 'second-path/')\n}\n```\n\nOptional arguments:\n- `--noinput` - non-interactive mode, the command won't ask you to do any confirmations\n\n### deleteredundantstatic\n\nDeletes needless static files.\n\nOptional arguments:\n- `--keep-unhashed-files` - use it if you use `collectstatic` with `--upload-unhashed-files` argument,\nwithout it this command will always delete all unhashed files\n- `--noinput` - non-interactive mode, the command won't ask you to do any confirmations\n\nSettings\n--------\n\nBelow you can see all available settings with default values:\n```python\nimport os\n\nfrom django.conf import settings\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': None,  # required\n    'API_KEY': None,  # required\n    'API_SECRET': None,  # required\n    'SECURE': True,\n    'MEDIA_TAG': 'media',\n    'INVALID_VIDEO_ERROR_MESSAGE': 'Please upload a valid video file.',\n    'EXCLUDE_DELETE_ORPHANED_MEDIA_PATHS': (),\n    'STATIC_TAG': 'static',\n    'STATICFILES_MANIFEST_ROOT': os.path.join(BASE_DIR, 'manifest'),\n    'STATIC_IMAGES_EXTENSIONS': ['jpg', 'jpe', 'jpeg', 'jpc', 'jp2', 'j2k', 'wdp', 'jxr',\n                                 'hdp', 'png', 'gif', 'webp', 'bmp', 'tif', 'tiff', 'ico'],\n    'STATIC_VIDEOS_EXTENSIONS': ['mp4', 'webm', 'flv', 'mov', 'ogv' ,'3gp' ,'3g2' ,'wmv' ,\n                                 'mpeg' ,'flv' ,'mkv' ,'avi'],\n    'MAGIC_FILE_PATH': 'magic',\n    'PREFIX': settings.MEDIA_URL\n}\n```\n`CLOUD_NAME`, `API_KEY` and `API_SECRET` are mandatory and you need to define them in `CLOUDINARY_STORAGE` dictionary\nin `settings.py`, the rest could be overwritten if required, as described below:\n- `SECURE` - whether your Cloudinary files should be server over HTTP or HTTPS, HTTPS is the default, set it to False\nto switch to HTTP\n- `MEDIA_TAG` - name assigned to your all media files, it has to be different than `STATIC_TAG`, usually you don't\nneed to worry about this setting, it is useful when you have several websites which use the same Cloudinary acount, when\nyou should set it unique to distinguish it from other websites,\n- `INVALID_VIDEO_ERROR_MESSAGE` - error message which will be desplayed in user's form when one tries to upload non-video\nfile in video field\n- `EXCLUDE_DELETE_ORPHANED_MEDIA_PATHS` - looked by `deleteorphanedmedia` command, you can provide here tuple of paths\nwhich will never be deleted\n- `STATIC_TAG` - name assigned to your all static files, it has to be different than `MEDIA_TAG`, please see `MEDIA_TAG`\nsetting to see when it is useful\n- `STATICFILES_MANIFEST_ROOT` - path where `staticfiles.json` will be saved after `collectstatic` command, `./manifest`\nis the default location\n- `STATIC_IMAGES_EXTENSIONS` - list of file extensions with which static files will be treated as Cloudinary images\n- `STATIC_VIDEOS_EXTENSIONS` - list of file extensions with which static files will be uploaded as Cloudinary videos\n- `MAGIC_FILE_PATH`: applicable only for Windows, needed for python-magic library for movie validation, please see\n[python-magic](https://github.com/ahupp/python-magic#dependencies) for reference\n- `PREFIX` - prefix to your all files uploaded by `MediaCloudinaryStorage`, default `MEDIA_URL`, it can be useful when\nyou use `FileSystemStorage` as default and `MediaCloudinaryStorage` for some models fields\n\nHow to run tests\n----------------\n\n```\n$ coverage run -a --source=cloudinary_storage manage.py test -v 2\n```\n\nNotes\n-----\nThis project is based on a fork from [django-cloudinary-storage](https://github.com/klis87/django-cloudinary-storage)\nThanx!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tiagocordeiro/dj3-cloudinary-storage", "keywords": "django cloudinary storage", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dj3-cloudinary-storage", "package_url": "https://pypi.org/project/dj3-cloudinary-storage/", "platform": "", "project_url": "https://pypi.org/project/dj3-cloudinary-storage/", "project_urls": {"Homepage": "https://github.com/tiagocordeiro/dj3-cloudinary-storage"}, "release_url": "https://pypi.org/project/dj3-cloudinary-storage/0.0.1/", "requires_dist": ["requests (>=2.23.0)", "cloudinary (>=1.20.0)", "python-magic (>=0.4.12) ; extra == 'video'"], "requires_python": "", "summary": "Django package that provides Cloudinary storages for both media and static files as well as management commands for removing unnecessary files.", "version": "0.0.1"}, "last_serial": 6756299, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3d48b78d2aa90a1007e7fde12f9dcf8c", "sha256": "b2829c1e97b8ab2f71f7d59b24307520a6a88e3b76d9088eb2d0f846bef99e89"}, "downloads": -1, "filename": "dj3_cloudinary_storage-0.0.1-py3.8.egg", "has_sig": false, "md5_digest": "3d48b78d2aa90a1007e7fde12f9dcf8c", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 35207, "upload_time": "2020-03-05T16:58:19", "upload_time_iso_8601": "2020-03-05T16:58:19.097201Z", "url": "https://files.pythonhosted.org/packages/10/87/b5fb47c3741cb2a74a6a4bee0abb35c3a7ef34584cf2b3300e9bb7a2fe68/dj3_cloudinary_storage-0.0.1-py3.8.egg"}, {"comment_text": "", "digests": {"md5": "7d11192da1ca886ce81b81c22a749507", "sha256": "d499f3d31a43825a13dd6a1075d4e6028e49fdac135059b7bc978930433610f1"}, "downloads": -1, "filename": "dj3_cloudinary_storage-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d11192da1ca886ce81b81c22a749507", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18687, "upload_time": "2020-03-05T16:58:14", "upload_time_iso_8601": "2020-03-05T16:58:14.036546Z", "url": "https://files.pythonhosted.org/packages/23/79/e1e02e808697b44abbe1cb22bfa4a5f992eec8486b1574e039e576538118/dj3_cloudinary_storage-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1d417e6298bcd0cc0c6c673e54eb2fe0", "sha256": "ee1205cce7bade0659282529944f4eb2773f0a6d12785b3349d3b2d1d671569b"}, "downloads": -1, "filename": "dj3-cloudinary-storage-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1d417e6298bcd0cc0c6c673e54eb2fe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20677, "upload_time": "2020-03-05T16:58:17", "upload_time_iso_8601": "2020-03-05T16:58:17.219317Z", "url": "https://files.pythonhosted.org/packages/d5/f6/dd56e977ee94bbae353df738a9a30008ca3eab4a7b24bb2bb15831fb7949/dj3-cloudinary-storage-0.0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d48b78d2aa90a1007e7fde12f9dcf8c", "sha256": "b2829c1e97b8ab2f71f7d59b24307520a6a88e3b76d9088eb2d0f846bef99e89"}, "downloads": -1, "filename": "dj3_cloudinary_storage-0.0.1-py3.8.egg", "has_sig": false, "md5_digest": "3d48b78d2aa90a1007e7fde12f9dcf8c", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 35207, "upload_time": "2020-03-05T16:58:19", "upload_time_iso_8601": "2020-03-05T16:58:19.097201Z", "url": "https://files.pythonhosted.org/packages/10/87/b5fb47c3741cb2a74a6a4bee0abb35c3a7ef34584cf2b3300e9bb7a2fe68/dj3_cloudinary_storage-0.0.1-py3.8.egg"}, {"comment_text": "", "digests": {"md5": "7d11192da1ca886ce81b81c22a749507", "sha256": "d499f3d31a43825a13dd6a1075d4e6028e49fdac135059b7bc978930433610f1"}, "downloads": -1, "filename": "dj3_cloudinary_storage-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d11192da1ca886ce81b81c22a749507", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18687, "upload_time": "2020-03-05T16:58:14", "upload_time_iso_8601": "2020-03-05T16:58:14.036546Z", "url": "https://files.pythonhosted.org/packages/23/79/e1e02e808697b44abbe1cb22bfa4a5f992eec8486b1574e039e576538118/dj3_cloudinary_storage-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1d417e6298bcd0cc0c6c673e54eb2fe0", "sha256": "ee1205cce7bade0659282529944f4eb2773f0a6d12785b3349d3b2d1d671569b"}, "downloads": -1, "filename": "dj3-cloudinary-storage-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1d417e6298bcd0cc0c6c673e54eb2fe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20677, "upload_time": "2020-03-05T16:58:17", "upload_time_iso_8601": "2020-03-05T16:58:17.219317Z", "url": "https://files.pythonhosted.org/packages/d5/f6/dd56e977ee94bbae353df738a9a30008ca3eab4a7b24bb2bb15831fb7949/dj3-cloudinary-storage-0.0.1.tar.gz"}]}