{"info": {"author": "Teemu Husso", "author_email": "teemu.husso@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# django-requestlogs\n\n[![Build Status](https://travis-ci.org/Raekkeri/django-requestlogs.svg?branch=master)](https://travis-ci.org/Raekkeri/django-requestlogs)\n![PyPI](https://img.shields.io/pypi/v/django-requestlogs.svg)\n\ndjango-requestlogs is a package providing middleware and other helpers for audit logging.\nThe middleware collects information about request-response cycle into log entries. The\ncollected information can be fully customized, but the out-of-the-box implementation\nincludes\n\n- user ID and username\n- request (path, method, payload..)\n- response (status code, payload..)\n- general information, such as timestamp, execution time\n\nFinally the log entry is stored in predefined storage, which by default is configurable\nusing Django's logging system.\n\nOnce installed, log storage should start showing entries such as the following:\n\n```\n{'action_name': None, 'execution_time': '00:00:00.024900', 'timestamp': '2019-07-01T07:05:34.217703Z', 'ip_address': None, 'request': OrderedDict([('method', 'GET'), ('full_path', '/'), ('data', '{}'), ('query_params', '{}')]), 'response': OrderedDict([('status_code', 200), ('data', '{\"ok\": true}')]), 'user': OrderedDict([('id', 1), ('username', 'admin')])}\n```\n\n## Motivation\n\ndjango-requestlogs attempts to provide tools for implementing audit logging (audit trail)\nto systems that require such feature. These systems typically must have the ability to\ntell \"what information the end-user has accessed (and what information was sent to the\nsystem)?\". django-requestlogs hooks into the Django REST framework in the simplest\nway possible while logging every request without the need of remembering to enable it\nfor each view separately.\n\nCurrently django-requestlogs package is primarily focusing on working seamlessly with\nDjango REST framework. While plain Django requests are also collected, their request and\nresponse payload, for example, is not stored.\n\n# Requirements\n\n- Django (1.11, 2.0, 2.1, 2.2, 3.0)\n- Django REST framework\n\nOptional dependencies:\n\n- django-ipware\n  - if installed, this is used for storing end-user's IP address\n\n# Installation\n\nInstall using `pip`:\n\n    pip install django-requestlogs\n\nAdd `'requestlogs.middleware.RequestLogsMiddleware'` to `MIDDLEWARE` settings.\n\n```python\nMIDDLEWARE = [\n    ...\n    'requestlogs.middleware.RequestLogsMiddleware',\n]\n```\n\nSet `'requestlogs.views.exception_handler'` as rest_framework's exception handler\n(this will make sure requestlog entry has all possible data available about the\nrequest in case of a 500 error):\n\n```python\nREST_FRAMEWORK={\n    ...\n    'EXCEPTION_HANDLER': 'requestlogs.views.exception_handler',\n}\n```\n\nThe middleware is now ready to start storing requestlog entries using the default\n`STORAGE_CLASS`, which in fact just uses Python logger named `requestlogs`. Now you can,\nfor example, redirect these logs to a file with the following `LOGGING` configuration:\n\n```python\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'requestlogs_to_file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': '/tmp/requestlogs.log',\n        },\n    },\n    'loggers': {\n        'requestlogs': {\n            'handlers': ['requestlogs_to_file'],\n            'level': 'INFO',\n            'propagate': False,\n        },\n    },\n}\n```\n\n# Settings\n\nRequestlogs can be customized using Django settings. The following shows the default values for the available settings:\n\n```python\nREQUESTLOGS = {\n    'STORAGE_CLASS': 'requestlogs.storages.LoggingStorage',\n    'ENTRY_CLASS': 'requestlogs.entries.RequestLogEntry',\n    'SERIALIZER_CLASS': 'requestlogs.storages.BaseEntrySerializer',\n    'SECRETS': ['password', 'token'],\n    'ATTRIBUTE_NAME': '_requestlog',\n    'METHODS': ('GET', 'PUT', 'PATCH', 'POST', 'DELETE'),\n}\n```\n\n- **STORAGE_CLASS**\n  - Path to the Python class which will handle storing the log entries. Override this if you only need to reimplement the storage mechanism. This may be the case e.g. when choosing what data to store.\n- **ENTRY_CLASS**\n  - Path to the Python class which handles the construction of the complete requestlogs entry. Override this for full customization of the requestlog entry behaviour.\n- **SERIALIZER_CLASS**\n  - Path to the serializer class which is used to serialize the requestlog entry before storage. By default this is a subclass of `rest_framework.serializers.Serializer`.\n- **SECRETS**\n  - List of keys in request/response data which will be replaced with `'***'` in the stored entry.\n- **ATTRIBUTE_NAME**\n  - django-requestlogs internally attaches the entry object to the Django request object, and uses this attribute name. Override if it causes collisions.\n- **METHODS**\n  - django-requestlogs will handle only HTTP methods defined by this setting. By default it handles all HTTP methods.\n\n\n# Logging with Request ID\n\ndjango-requestlogs also contains a middleware and logging helpers to associate a\nrequest-specific identifier (uuid) to logging messages. This aims to help\ndistinguishing messages to certain request-response cycle, which can be useful\nin an application that receives a high number of requests.\n\nThe request id is added to the standard logging messages (Django application logs)\nby specifying a custom formatter and using the provided logging filter.\nThe request id can be stored to requestlog entries as well.\nThe middleware to enable the request id logging does not require the core requestlogs\nmiddleware to be installed.\n\nUnder the hood the request id is implemented with help of `threading.local()`.\n\n## Installation\n\nThe feature is enabled by adding `requestlogs.middleware.RequestLogsMiddleware`\nto the `MIDDLEWARE` setting:\n\n```python\nMIDDLEWARE = [\n    ...\n    'requestlogs.middleware.RequestLogsMiddleware',\n    'requestlogs.middleware.RequestIdMiddleware',\n]\n```\n\nOnce installed, the application logs should start showing messages with a format such as\nthe following:\n\n```\n2019-07-18 11:56:07,261 INFO 954fb004fb404751a2fa33326101442c urls:31 Handling GET request\n2019-07-18 11:56:07,262 DEBUG 954fb004fb404751a2fa33326101442c urls:32 No parameters given\n2019-07-18 11:56:07,262 INFO 954fb004fb404751a2fa33326101442c urls:33 All good\n```\n\nTo add the request id to requestlog entries as well, you can use the provided serializer\nclass as a starting point:\n\n```python\nREQUESTLOGS = {\n    ...\n    'SERIALIZER_CLASS': 'requestlogs.storages.RequestIdEntrySerializer',\n}\n```\n\n## Configuration\n\nThe middleware has some additional configuration possiblities:\n\n\n```python\nREQUESTLOGS = {\n    ...\n    'REQUEST_ID_HTTP_HEADER': 'X_DJANGO_REQUEST_ID',\n    'REQUEST_ID_ATTRIBUTE_NAME': 'request_id',\n}\n```\n- **REQUEST_ID_HTTP_HEADER**\n  - If set, the value of this request header is used as request id (instead of it being\n    randomly generated). This must be a valid uuid. One use case for this feature is in\n    microservice architecture, where a micreservice calls another, internal microservice.\n    Having the log messages of both applications to be formatted with same request id\n    might be the preferred outcome.\n- **REQUEST_ID_ATTRIBUTE_NAME**\n  - The attribute name which is used internally to attach request id to\n    `threading.locals()`. Override if it causes collisions.\n\nTo add the request id to logging messages of your Django application, use the provided\nlogging filter and include `request_id` to the log formatter.\nHere is the complete logging configuration:\n\n```python\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'requestlogs_to_file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': '/tmp/requestlogs.log',\n        },\n        'root': {\n            'class': 'logging.StreamHandler',\n            'filters': ['request_id_context'],\n            'formatter': 'verbose',\n        },\n    },\n    'loggers': {\n        '': {\n            'handlers': ['root'],\n            'level': 'DEBUG',\n        },\n        'requestlogs': {\n            'handlers': ['requestlogs_to_file'],\n            'level': 'INFO',\n            'propagate': False,\n        },\n    },\n    'filters': {\n        'request_id_context': {\n            '()': 'requestlogs.logging.RequestIdContext',\n        },\n    },\n    'formatters': {\n        'verbose': {\n            'format': '%(asctime)s %(levelname)s %(request_id)s %(module)s:%(lineno)s %(message)s'\n        },\n    },\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/raekkeri/django-requestlogs/tarball/0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Raekkeri/django-requestlogs", "keywords": "django,log,logging", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-requestlogs", "package_url": "https://pypi.org/project/django-requestlogs/", "platform": "", "project_url": "https://pypi.org/project/django-requestlogs/", "project_urls": {"Download": "https://github.com/raekkeri/django-requestlogs/tarball/0.1", "Homepage": "https://github.com/Raekkeri/django-requestlogs"}, "release_url": "https://pypi.org/project/django-requestlogs/0.2.1/", "requires_dist": ["Django (<4.0,>=1.11)", "djangorestframework (<4.0,>=3.0)", "setuptools", "pytest ; extra == 'dev'"], "requires_python": "", "summary": "Audit logging for Django and Django Rest Framework", "version": "0.2.1"}, "last_serial": 6794097, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "92db579a0c12d1027e93c217809dffd3", "sha256": "7f50144b969e068db21029101560c9db32ddcee2ee7bb2fc9298cb34d8aa652a"}, "downloads": -1, "filename": "django_requestlogs-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "92db579a0c12d1027e93c217809dffd3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6831, "upload_time": "2019-06-27T14:37:27", "upload_time_iso_8601": "2019-06-27T14:37:27.063446Z", "url": "https://files.pythonhosted.org/packages/d4/f2/b28898f342bcd280e763368205b0476bcffe0b14ae1761be92f96bf058b7/django_requestlogs-0.1.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0a09d7fe1034bef92d7dd94ae86552ed", "sha256": "3f97cb9f8cf350cc7128d23af2475bb2f79caa0e836ff017801bcf39523075b2"}, "downloads": -1, "filename": "django-requestlogs-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0a09d7fe1034bef92d7dd94ae86552ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4427, "upload_time": "2019-06-27T14:37:29", "upload_time_iso_8601": "2019-06-27T14:37:29.230317Z", "url": "https://files.pythonhosted.org/packages/ba/a0/3bf0d3d9afef9598c4d2f476da23e444c2f240bd5d97e5d28db66ab4aceb/django-requestlogs-0.1.4.tar.gz"}], "0.1.5": [{"comment_text": "", "digests": {"md5": "4c56267b61084ff49b046258aab9f548", "sha256": "fe68d950577e420ba61cd26b925eb1c1d776e69a94099fe7314b7c4f2bfd9d42"}, "downloads": -1, "filename": "django_requestlogs-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4c56267b61084ff49b046258aab9f548", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7613, "upload_time": "2019-07-01T07:47:39", "upload_time_iso_8601": "2019-07-01T07:47:39.177029Z", "url": "https://files.pythonhosted.org/packages/f1/26/8821db169ff020a16fd1807fb737523eeacf2ace5963e919ce911de8067b/django_requestlogs-0.1.5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "9d10648287743d3daf03a27e9000677c", "sha256": "6af5799f7ec69d4849f6d41547975b96ce1fde9eb60048f978b36ff4de2121bb"}, "downloads": -1, "filename": "django-requestlogs-0.1.5.tar.gz", "has_sig": false, "md5_digest": "9d10648287743d3daf03a27e9000677c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5309, "upload_time": "2019-07-01T07:47:40", "upload_time_iso_8601": "2019-07-01T07:47:40.731890Z", "url": "https://files.pythonhosted.org/packages/b7/2c/8f82a36e9ae5eec78dbd76185dc7e73a62fd6da0748486b1f4b7b22054e9/django-requestlogs-0.1.5.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7f2331646e4ee35581d23591c9ae6b00", "sha256": "43db6edca42e539564fac06a8bf719b77ff1eb3baf6f5445f57a7ede5fb61b3e"}, "downloads": -1, "filename": "django_requestlogs-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7f2331646e4ee35581d23591c9ae6b00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9685, "upload_time": "2019-07-31T11:18:29", "upload_time_iso_8601": "2019-07-31T11:18:29.434033Z", "url": "https://files.pythonhosted.org/packages/11/f4/c455f9d48effa45edc3690445d05054e7ae0859e67f5d90af5406c021bda/django_requestlogs-0.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "de5fadad3aab91d02c28d1097337a404", "sha256": "ad3abfa0ad6414b0a6d943021113baad45c32be40ba2714c1c9ed8a5e7dc6b8a"}, "downloads": -1, "filename": "django-requestlogs-0.2.0.tar.gz", "has_sig": false, "md5_digest": "de5fadad3aab91d02c28d1097337a404", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8123, "upload_time": "2019-07-31T11:18:30", "upload_time_iso_8601": "2019-07-31T11:18:30.984305Z", "url": "https://files.pythonhosted.org/packages/9b/0e/706c1454b596913100ddef2d61ac18fd74a2a626a30f9a3e5d60dc61938b/django-requestlogs-0.2.0.tar.gz"}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b589ed406e30cfde0123e16a4ae1f783", "sha256": "65d09fb4b103e3b50750a045b00a3ca4062efacae48d82943590296e19afec93"}, "downloads": -1, "filename": "django_requestlogs-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b589ed406e30cfde0123e16a4ae1f783", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9911, "upload_time": "2020-03-11T18:11:45", "upload_time_iso_8601": "2020-03-11T18:11:45.563561Z", "url": "https://files.pythonhosted.org/packages/79/e8/feae8ac386fa3ad84d8a1bf9b1e7f375cdf9172578c0c2ab60a949cdc6a2/django_requestlogs-0.2.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0d9fef9b12f5bb0933d008f216db71bd", "sha256": "0411087a469a55402aa23d7eeb8b2fde8b24abcda739ed2a980d6f3e9052c90b"}, "downloads": -1, "filename": "django-requestlogs-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0d9fef9b12f5bb0933d008f216db71bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8373, "upload_time": "2020-03-11T18:11:47", "upload_time_iso_8601": "2020-03-11T18:11:47.439361Z", "url": "https://files.pythonhosted.org/packages/46/d9/4dbec7b4f0d1a58ae0389612f612802dba2bb7c1ec44180bb510924abae7/django-requestlogs-0.2.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "b589ed406e30cfde0123e16a4ae1f783", "sha256": "65d09fb4b103e3b50750a045b00a3ca4062efacae48d82943590296e19afec93"}, "downloads": -1, "filename": "django_requestlogs-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b589ed406e30cfde0123e16a4ae1f783", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9911, "upload_time": "2020-03-11T18:11:45", "upload_time_iso_8601": "2020-03-11T18:11:45.563561Z", "url": "https://files.pythonhosted.org/packages/79/e8/feae8ac386fa3ad84d8a1bf9b1e7f375cdf9172578c0c2ab60a949cdc6a2/django_requestlogs-0.2.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0d9fef9b12f5bb0933d008f216db71bd", "sha256": "0411087a469a55402aa23d7eeb8b2fde8b24abcda739ed2a980d6f3e9052c90b"}, "downloads": -1, "filename": "django-requestlogs-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0d9fef9b12f5bb0933d008f216db71bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8373, "upload_time": "2020-03-11T18:11:47", "upload_time_iso_8601": "2020-03-11T18:11:47.439361Z", "url": "https://files.pythonhosted.org/packages/46/d9/4dbec7b4f0d1a58ae0389612f612802dba2bb7c1ec44180bb510924abae7/django-requestlogs-0.2.1.tar.gz"}]}