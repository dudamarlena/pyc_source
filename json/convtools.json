{"info": {"author": "iTechArt Group", "author_email": "mikita.almakou@itechart-group.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "=========\nconvtools\n=========\n\n\n**convtools** is a python library to declaratively define quite fast conversions\nfrom python objects to python objects, including processing collections and\ndoing complex aggregations and joins.\n\nOnce defined, the conversion can be compiled into an ad hoc code OR be reused for\nbuilding more complex conversions.\n\n.. image:: https://img.shields.io/pypi/pyversions/convtools.svg\n    :target: https://pypi.org/project/convtools/\n\n.. image:: https://img.shields.io/github/license/itechart-almakov/convtools.svg\n   :target: https://github.com/itechart-almakov/convtools/blob/master/LICENSE.txt\n\n.. image:: https://codecov.io/gh/itechart-almakov/convtools/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/itechart-almakov/convtools\n\n.. image:: https://github.com/itechart-almakov/convtools/workflows/tests/badge.svg\n   :target: https://github.com/itechart-almakov/convtools/workflows/tests/badge.svg\n   :alt: Tests Status\n\n.. image:: https://readthedocs.org/projects/convtools/badge/?version=latest\n   :target: https://convtools.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://img.shields.io/github/tag/itechart-almakov/convtools.svg\n   :target: https://GitHub.com/itechart-almakov/convtools/tags/\n\n.. image:: https://badge.fury.io/py/convtools.svg\n   :target: https://badge.fury.io/py/convtools\n\n.. image:: https://pepy.tech/badge/convtools\n   :target: https://pepy.tech/project/convtools\n   :alt: Downloads\n\nDocs\n====\n\n * `convtools on Read the Docs <https://convtools.readthedocs.io/en/latest/>`_\n * `Cheatsheet <https://convtools.readthedocs.io/en/latest/cheatsheet.html>`_\n * `QuickStart <https://convtools.readthedocs.io/en/latest/quick_start.html>`_\n\nWhat's the workflow?\n====================\n\n 1. ``from convtools import conversion as c``\n 2. define conversions\n 3. (optional) store them somewhere for further reuse\n 4. call ``gen_converter`` method to compile the conversion into a function,\n    written with an ad hoc code\n 5. (optional) it's totally fine to generate converters at runtime, for simple\n    conversions it takes less than 0.1-0.2 milliseconds to get compiled.\n\nBelow are real-world like examples (for more tutorial-like examples,\nplease scroll down to the **Installation** step):\n\n.. code-block:: python\n\n   # ======== #\n   # GROUP BY #\n   # ======== #\n   input_data = [\n       {'a': 5,  'b': 'foo'},\n       {'a': 10, 'b': 'foo'},\n       {'a': 10, 'b': 'bar'},\n       {'a': 10, 'b': 'bar'},\n       {'a': 20, 'b': 'bar'}\n   ]\n\n   conv = c.group_by(\n       c.item(\"b\")\n   ).aggregate({\n       \"b\": c.item(\"b\"),\n       \"a_first\": c.reduce(c.ReduceFuncs.First, c.item(\"a\")),\n       \"a_max\": c.reduce(c.ReduceFuncs.Max, c.item(\"a\")),\n   }).gen_converter(debug=True)\n\n   conv(input_data) == [\n       {'b': 'foo', 'a_first': 5, 'a_max': 10},\n       {'b': 'bar', 'a_first': 10, 'a_max': 20}]\n\n\n   # ========= #\n   # AGGREGATE #\n   # ========= #\n   conv = c.aggregate({\n       # list of \"a\" values where \"b\" equals to \"bar\"\n       \"a\": c.reduce(\n           c.ReduceFuncs.Array,\n           c.item(\"a\")\n       ).filter(c.item(\"b\") == \"bar\"),\n\n       # \"b\" value of a row where \"a\" has Max value\n       \"b\": c.reduce(\n           c.ReduceFuncs.MaxRow,\n           c.item(\"a\"),\n       ).item(\"b\", default=None),\n   }).gen_converter(debug=True)\n\n   conv(input_data) == {'a': [10, 10, 20], 'b': 'bar'}\n\n.. code-block:: python\n\n   # ==== #\n   # JOIN #\n   # ==== #\n   collection_1 = [\n       {\"id\": 1, \"name\": \"Nick\"},\n       {\"id\": 2, \"name\": \"Joash\"},\n       {\"id\": 3, \"name\": \"Bob\"},\n   ]\n   collection_2 = [\n       {\"ID\": \"3\", \"age\": 17, \"country\": \"GB\"},\n       {\"ID\": \"2\", \"age\": 21, \"country\": \"US\"},\n       {\"ID\": \"1\", \"age\": 18, \"country\": \"CA\"},\n   ]\n   input_data = (collection_1, collection_2)\n\n   conv = c.join(\n       c.item(0),\n       c.item(1),\n       c.and_(\n           c.LEFT.item(\"id\") == c.RIGHT.item(\"ID\").as_type(int),\n           c.RIGHT.item(\"age\") >= 18\n       ),\n       how=\"left\",\n   ).pipe(\n       c.list_comp({\n           \"id\": c.item(0, \"id\"),\n           \"name\": c.item(0, \"name\"),\n           \"age\": c.item(1, \"age\", default=None),\n           \"country\": c.item(1, \"country\", default=None),\n       })\n   ).gen_converter(debug=True)\n\n   assert conv(input_data) == [\n       {'id': 1, 'name': 'Nick', 'age': 18},\n       {'id': 2, 'name': 'Joash', 'age': 21}]\n\n\nWhy would you need this?\n========================\n\n * you need to serialize some objects\n * you need to define data transformations based on some input,\n   which becomes available at runtime\n * you want to reuse field-wise transformations across the project without\n   worrying about huge overhead of calling tens of functions per row/object,\n   especially when there are thousands of them to be processed\n * you believe that Python is awesome enough to have powerful aggregations and\n   joins\n * you like the idea of having something else write an unpleasant ad hoc\n   code for you\n\n\nIs it any different from tools like Pandas?\n===========================================\n\n * `convtools` doesn't need to wrap data in any container to provide useful API,\n   it just writes normal python code under the hood\n * `convtools` is a lightweight library with no dependencies (however optional\n   ``black`` is highly recommended for pretty-printing generated code\n   when debugging)\n * `convtools` is about defining and reusing conversions -- declarative approach,\n   while wrapping data in high-performance containers is more of being imperative\n\n\nDescription\n===========\n\nThe speed of **convtools** comes from the approach of generating code & compiling\nconversion functions, which don't have any generic code like superfluous\nloops, ifs, etc.\n\nSo you can keep following the DRY principle by storing and reusing the code on the\npython expression level, but at the same time be able to run the\n``gen_converter`` and get the compiled code which doesn't care about being DRY\nand is generated to be highly specialized for the specific need.\n\nThanks to pipes & labels it's possible to define multiple pipelines of data\nprocessing, including branching and merging of them.\n\nConversions are not limited to simple data transformations, there are\n``GroupBy`` & ``Aggregate`` conversions with many useful reducers:\n\n * from common `Sum`, `Max`\n * and less widely supported `First`/`Last`, `Array`/`ArrayDistinct`\n * to `DictSum`-like ones (for nested aggregation) and `MaxRow`/`MinRow`\n   (for finding an object with max/min value and further processing)\n\nAlso there are higher-level conversions - JOINS\n(inner, left, right, outer, cross), which processes 2 iterables and returns\na generator of joined pairs.\n\nEvery conversion:\n * contains the information of how to transform an input\n * can be **piped** into another conversion (same as wrapping)\n * can be labeled to be reused further in the conversions chain\n * has a method ``gen_converter`` returning a function compiled at runtime\n * despite being compiled at runtime, is debuggable with `pdb` due to `linecache` populating.\n\n\nInstallation:\n=============\n\n.. code-block:: bash\n\n   pip install convtools\n\nExample #1: deserialization & data preps\n========================================\n\n.. code-block:: python\n\n   # get by \"department\" key and then call method \"strip\"\n   department = c.item(\"department\").call_method(\"strip\")\n   first_name = c.item(\"first_name\").call_method(\"capitalize\")\n   last_name = c.item(\"last_name\").call_method(\"capitalize\")\n\n   # call \"format\" method of a string and pass first & last names as parameters\n   full_name = c(\"{} {}\").call_method(\"format\", first_name, last_name)\n   date_of_birth = c.item(\"dob\")\n\n   # partially initialized \"strptime\"\n   parse_date = c.call_func(\n       datetime.strptime,\n       c.this(),\n       \"%Y-%m-%d\"\n   ).call_method(\"date\")\n\n   c.item(\"objects\").pipe(\n       c.generator_comp({\n           \"id\": c.item(\"id\"),\n           \"first_name\": first_name,\n           \"last_name\": last_name,\n           \"full_name\": full_name,\n           \"date_of_birth\": c.if_(\n               date_of_birth,\n               date_of_birth.pipe(parse_date),\n               None,\n           ),\n           \"salary\": c.call_func(\n               Decimal,\n               c.item(\"salary\").call_method(\"replace\", \",\", \"\")\n           ),\n           # pass a hardcoded dict and to get value by \"department\" key\n           \"department_id\": c.naive({\n               \"D1\": 10,\n               \"D2\": 11,\n               \"D3\": 12,\n           }).item(department),\n           \"date\": c.item(\"date\").pipe(parse_date),\n       })\n   ).pipe(\n       c.dict_comp(\n           c.item(\"id\"), # key\n           # write a python code expression, format with passed parameters\n           c.inline_expr(\"{employee_cls}(**{kwargs})\").pass_args(\n               employee_cls=Employee,\n               kwargs=c.this(),\n           ),            # value\n       )\n   ).gen_converter(debug=True)\n\nGets compiled into:\n\n.. code-block:: python\n\n   def converter705_580(data_):\n       global add_label_, get_by_label_\n       pipe705_68 = data_[\"objects\"]\n       pipe705_973 = (\n           {\n               \"id\": i703_861[\"id\"],\n               \"first_name\": i703_861[\"first_name\"].capitalize(),\n               \"last_name\": i703_861[\"last_name\"].capitalize(),\n               \"full_name\": \"{} {}\".format(\n                   i703_861[\"first_name\"].capitalize(),\n                   i703_861[\"last_name\"].capitalize(),\n               ),\n               \"date_of_birth\": (\n                   strptime494_480(i703_861[\"dob\"], \"%Y-%m-%d\").date()\n                   if i703_861[\"dob\"]\n                   else None\n               ),\n               \"salary\": Decimal731_432(i703_861[\"salary\"].replace(\",\", \"\")),\n               \"department_id\": v677_416[i703_861[\"department\"].strip()],\n               \"date\": strptime494_480(i703_861[\"date\"], \"%Y-%m-%d\").date(),\n           }\n           for i703_861 in pipe705_68\n       )\n       return {\n           i705_330[\"id\"]: (Employee700_725(**i705_330))\n           for i705_330 in pipe705_973\n       }\n\nExample #2: word count\n======================\n\n.. code-block:: python\n\n   import re\n   from itertools import chain\n\n   # the suggested way of importing convtolls\n   from convtools import conversion as c\n\n   # Let's say we need to count words across all files\n   input_data = [\n       \"war-and-peace-1.txt\",\n       \"war-and-peace-2.txt\",\n       \"war-and-peace-3.txt\",\n       \"war-and-peace-4.txt\",\n   ]\n   def read_file(filename):\n       with open(filename) as f:\n           for line in f:\n               yield line\n\n   # iterate an input and read file lines\n   extract_strings = c.generator_comp(\n       c.call_func(read_file, c.this())\n   )\n\n   # 1. make ``re`` pattern available to the code to be generated\n   # 2. call ``finditer`` method of the pattern and pass the string\n   #    as an argument\n   # 3. pass the result to the next conversion\n   # 4. iterate results, call ``.group()`` method of each re.Match\n   #    and call ``.lower()`` on each result\n   split_words = (\n       c.naive(re.compile(r'\\w+')).call_method(\"finditer\", c.this())\n       .pipe(\n           c.generator_comp(\n               c.this().call_method(\"group\", 0).call_method(\"lower\")\n           )\n       )\n   )\n\n   # ``extract_strings`` is the generator of strings\n   # so we iterate it and pass each item to ``split_words`` conversion\n   vectorized_split_words = c.generator_comp(\n       c.this().pipe(\n           split_words\n       )\n   )\n\n   # flattening the result of ``vectorized_split_words``, which is\n   # a generator of generators of strings\n   flatten = c.call_func(\n       chain.from_iterable,\n       c.this(),\n   )\n\n   # aggregate the input, the result is a single dict\n   # words are keys, values are count of words\n   dict_word_to_count = c.aggregate(\n       c.reduce(\n           c.ReduceFuncs.DictCount,\n           (c.this(), c.this()),\n           default=dict\n       )\n   )\n\n   # take top N words by:\n   #  - call ``.items()`` method of the dict (the result of the aggregate)\n   #  - pass the result to ``sorted``\n   #  - take the slice, using input argument named ``top_n``\n   #  - cast to a dict\n   take_top_n = (\n       c.this().call_method(\"items\")\n       .pipe(sorted, key=lambda t: t[1], reverse=True)\n       .pipe(c.this()[:c.input_arg(\"top_n\")])\n       .as_type(dict)\n   )\n\n   # the resulting pipeline is pretty self-descriptive, except the ``c.if_``\n   # part, which checks the condition (first argument),\n   # and returns the 2nd if True OR the 3rd (input data by default) otherwise\n   pipeline = (\n       extract_strings\n       .pipe(flatten)\n       .pipe(vectorized_split_words)\n       .pipe(flatten)\n       .pipe(dict_word_to_count)\n       .pipe(\n           c.if_(\n               c.input_arg(\"top_n\").is_not(None),\n               c.this().pipe(take_top_n),\n           )\n       )\n   # Define the resulting converter function signature.\n   # In fact this isn't necessary if you don't need to specify default values\n   ).gen_converter(debug=True, signature=\"data_, top_n=None\")\n\n   # check the speed yourself :)\n   # e.g. take a look in txt format and tune the ``extract_strings``\n   # conversion as needed\n   pipeline(input_data, top_n=3)\n\n\n**Generated code:**\n\n.. code-block:: python\n\n   def aggregate(data_):\n       global add_label_, get_by_label_\n       _none = v123_497\n       agg_data_v0_ = _none\n       expected_checksum_ = 1\n       checksum_ = 0\n       it_ = iter(data_)\n       for row_ in it_:\n\n           if agg_data_v0_ is _none:\n               agg_data_v0_ = {row_: 1}\n\n               if agg_data_v0_ is not _none:\n                   checksum_ |= 1\n                   if checksum_ == expected_checksum_:\n                       break\n\n           else:\n               if row_ not in agg_data_v0_:\n                   agg_data_v0_[row_] = 1\n               else:\n                   agg_data_v0_[row_] += 1\n\n       for row_ in it_:\n\n           if row_ not in agg_data_v0_:\n               agg_data_v0_[row_] = 1\n           else:\n               agg_data_v0_[row_] += 1\n\n       result_ = dict() if agg_data_v0_ is _none else agg_data_v0_\n\n       return result_\n\n   def converter459_881(data_, top_n=None):\n       pipe459_557 = (read_file376_398(i458_940) for i458_940 in data_)\n       pipe459_694 = from_iterable401_690(pipe459_557)\n       pipe459_916 = (\n           (i397_760.group(0).lower() for i397_760 in v379_129.finditer(i456_473))\n           for i456_473 in pipe459_694\n       )\n       pipe459_431 = from_iterable401_690(pipe459_916)\n       pipe459_970 = aggregate469_287(pipe459_431)\n       return (\n           dict(\n               (\n                   sorted(pipe459_970.items(), key=lambda418_804, reverse=True)[\n                       (slice(None, top_n, None))\n                   ]\n               )\n           )\n           if (top_n is not None)\n           else pipe459_970\n       )\n\nDocs\n====\n\n * `convtools on Read the Docs <https://convtools.readthedocs.io/en/latest/>`_\n * `Cheatsheet <https://convtools.readthedocs.io/en/latest/cheatsheet.html>`_\n * `QuickStart <https://convtools.readthedocs.io/en/latest/quick_start.html>`_", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "convtools", "package_url": "https://pypi.org/project/convtools/", "platform": "any", "project_url": "https://pypi.org/project/convtools/", "project_urls": {"Bug Reports": "https://github.com/itechart-almakov/convtools/issues", "Documentation": "https://convtools.readthedocs.io/en/latest/", "Source": "https://github.com/itechart-almakov/convtools"}, "release_url": "https://pypi.org/project/convtools/0.5.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "convtools is a python library to declaratively define fast conversions from python objects to python objects, including processing collections and doing complex aggregations and joins.", "version": "0.5.3"}, "last_serial": 6915866, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4211dcee510bebf02f0c8880bee90356", "sha256": "6e3218116bc99b58a7151e7d0eff726608fcb2eb77da35fc6429257d0a5b9156"}, "downloads": -1, "filename": "convtools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4211dcee510bebf02f0c8880bee90356", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 39802, "upload_time": "2020-02-18T19:16:32", "upload_time_iso_8601": "2020-02-18T19:16:32.975469Z", "url": "https://files.pythonhosted.org/packages/75/ed/5933ea6bd35266a7dfd2cca70880f49a3606e47e7413bb11d82eb6442736/convtools-0.1.0.tar.gz"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0857cc7a47365d00a93fe598f2a3f569", "sha256": "c636be177e007a661975c642c441dd79ff3fc4c2b3882301d9f2439d240ebe30"}, "downloads": -1, "filename": "convtools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0857cc7a47365d00a93fe598f2a3f569", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 40370, "upload_time": "2020-02-18T19:54:16", "upload_time_iso_8601": "2020-02-18T19:54:16.872311Z", "url": "https://files.pythonhosted.org/packages/ce/fd/e401326aae748666f24401bab29f81275b066cdd2c0664f5e3f5113d9380/convtools-0.1.1.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1c2e9e452c1837baaad5fb9abf350321", "sha256": "ceca42c6edd31c23505d2b89c52f14c89d6f1c524c12a78e2e880da392e38aba"}, "downloads": -1, "filename": "convtools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1c2e9e452c1837baaad5fb9abf350321", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49233, "upload_time": "2020-02-23T18:19:48", "upload_time_iso_8601": "2020-02-23T18:19:48.822328Z", "url": "https://files.pythonhosted.org/packages/c7/ab/287cf14974b7560a4ea659077b9c0db2cdbc7115a5b191e83f65ac8f0c20/convtools-0.2.0.tar.gz"}], "0.2.1": [{"comment_text": "", "digests": {"md5": "cfae5fbd2877f138c9197b9ce9673c6a", "sha256": "f618648c2ca9245a39ad0d51393af1c0b22a81e9378f43f5429920c541f6bf31"}, "downloads": -1, "filename": "convtools-0.2.1.tar.gz", "has_sig": false, "md5_digest": "cfae5fbd2877f138c9197b9ce9673c6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49442, "upload_time": "2020-02-24T08:49:13", "upload_time_iso_8601": "2020-02-24T08:49:13.202086Z", "url": "https://files.pythonhosted.org/packages/e2/5d/b0d20ce96dc661fb4c49f57f671fae3d48af249d8b96011803d26a4d2ed6/convtools-0.2.1.tar.gz"}], "0.2.2": [{"comment_text": "", "digests": {"md5": "fafc7796018c037a23aac17690dc1d90", "sha256": "aa916442e0e5ee0c9f4afd4ff3d6d4a6572c7be2cfaa96be97adebfaba67e041"}, "downloads": -1, "filename": "convtools-0.2.2.tar.gz", "has_sig": false, "md5_digest": "fafc7796018c037a23aac17690dc1d90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49868, "upload_time": "2020-02-25T12:09:37", "upload_time_iso_8601": "2020-02-25T12:09:37.022785Z", "url": "https://files.pythonhosted.org/packages/c9/72/db47a903ad8f65b63a2e4c38a32c4b2b2ce8acf8320dfe58e0dc3c68bf11/convtools-0.2.2.tar.gz"}], "0.2.3": [{"comment_text": "", "digests": {"md5": "3f1a790b4e7a8440587889b5c0dbdf8c", "sha256": "8aa5c505b2051d961d247209f90180621cdbdbcc917c2fd1013687c5825b6f13"}, "downloads": -1, "filename": "convtools-0.2.3.tar.gz", "has_sig": false, "md5_digest": "3f1a790b4e7a8440587889b5c0dbdf8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 50243, "upload_time": "2020-02-27T12:04:15", "upload_time_iso_8601": "2020-02-27T12:04:15.397062Z", "url": "https://files.pythonhosted.org/packages/45/7f/c54bbfa75a4fdb85dfe1ecbda8643253e7a03a61ddc3ff9a3067a654d941/convtools-0.2.3.tar.gz"}], "0.3.0": [{"comment_text": "", "digests": {"md5": "0b20372bf60b20d7d20af6aeaeac849b", "sha256": "221463458a47a9d37eb995b90afee22e209585aa58353c1b5ced7c869c5914e2"}, "downloads": -1, "filename": "convtools-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0b20372bf60b20d7d20af6aeaeac849b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 54871, "upload_time": "2020-03-01T18:45:14", "upload_time_iso_8601": "2020-03-01T18:45:14.260571Z", "url": "https://files.pythonhosted.org/packages/da/0e/5506837b320803baab9d59c77a1888123c64348b4fec4f4e96ac93a6d1e1/convtools-0.3.0.tar.gz"}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b01475c98545dd9823ae283ad649aba4", "sha256": "d7ba3438463ae9c4cb8c42aab715c780cae77aa703b66f44ae44b430d75a1e26"}, "downloads": -1, "filename": "convtools-0.3.1.tar.gz", "has_sig": false, "md5_digest": "b01475c98545dd9823ae283ad649aba4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 62559, "upload_time": "2020-03-05T20:34:16", "upload_time_iso_8601": "2020-03-05T20:34:16.787554Z", "url": "https://files.pythonhosted.org/packages/70/66/aedf6432579d31f5df5bcd524c0365e3e3617a635a5340047f011f23322a/convtools-0.3.1.tar.gz"}], "0.3.2": [{"comment_text": "", "digests": {"md5": "74f7a7b0728f0fef315f3e43f403eb3d", "sha256": "c5bdd58af82ed65fe1807a64431467fe7a0665a71b5dc7221bc69f894131bacd"}, "downloads": -1, "filename": "convtools-0.3.2.tar.gz", "has_sig": false, "md5_digest": "74f7a7b0728f0fef315f3e43f403eb3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 63069, "upload_time": "2020-03-05T20:57:57", "upload_time_iso_8601": "2020-03-05T20:57:57.175346Z", "url": "https://files.pythonhosted.org/packages/ce/1f/15ad0b88409855514b4f58757c14ac663413c4b59b81e30d8ba1051f7231/convtools-0.3.2.tar.gz"}], "0.3.3": [{"comment_text": "", "digests": {"md5": "a833f4c22e620b4d59411f4b8b391a28", "sha256": "109af01d6b0ae377aa388ac9cdec560b6d5fcdfb2bf3803f7fc68fe0ec5aafd0"}, "downloads": -1, "filename": "convtools-0.3.3.tar.gz", "has_sig": false, "md5_digest": "a833f4c22e620b4d59411f4b8b391a28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 63995, "upload_time": "2020-03-06T12:12:27", "upload_time_iso_8601": "2020-03-06T12:12:27.008270Z", "url": "https://files.pythonhosted.org/packages/4c/fe/f0adaa0407bd069525fb02260250abd2c84efe6fd5dc3505df26599f6ba7/convtools-0.3.3.tar.gz"}], "0.4.0": [{"comment_text": "", "digests": {"md5": "5660000fe804d23640bd0a6f1f95d06e", "sha256": "6e275d636f5aa80e62e03ac7be217ca4db3e57dccf8c90db52c2a59af775a448"}, "downloads": -1, "filename": "convtools-0.4.0.tar.gz", "has_sig": false, "md5_digest": "5660000fe804d23640bd0a6f1f95d06e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 70186, "upload_time": "2020-03-19T17:38:07", "upload_time_iso_8601": "2020-03-19T17:38:07.934782Z", "url": "https://files.pythonhosted.org/packages/c3/74/5701265a9f3e31a8e938dbdc9527189b9621df3aa6b8e7822ea3074dd7a6/convtools-0.4.0.tar.gz"}], "0.5.0": [{"comment_text": "", "digests": {"md5": "bc757bbd876780f3757381f1f322078c", "sha256": "e8b8724eba8b6ac169d71db727529c09d14c97d371039bc2052e8835e7158108"}, "downloads": -1, "filename": "convtools-0.5.0.tar.gz", "has_sig": false, "md5_digest": "bc757bbd876780f3757381f1f322078c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 71832, "upload_time": "2020-03-23T19:33:16", "upload_time_iso_8601": "2020-03-23T19:33:16.988509Z", "url": "https://files.pythonhosted.org/packages/b4/34/7b1f598f3fefdedf35b39af8a631c293560c61b38af1e8ecd7a8b0988582/convtools-0.5.0.tar.gz"}], "0.5.1": [{"comment_text": "", "digests": {"md5": "0f1d46ca482ed4106d2cdd6980dcca2e", "sha256": "78de7404582f9c34fe331ead969116340a19eca74a50f2122c2ce2e0add5bd67"}, "downloads": -1, "filename": "convtools-0.5.1.tar.gz", "has_sig": false, "md5_digest": "0f1d46ca482ed4106d2cdd6980dcca2e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 76530, "upload_time": "2020-03-26T13:04:46", "upload_time_iso_8601": "2020-03-26T13:04:46.664220Z", "url": "https://files.pythonhosted.org/packages/e6/bf/b16f50d6febab703ad3b25cecd740e74a279688a8a2d0a3369f1dcce8d83/convtools-0.5.1.tar.gz"}], "0.5.2": [{"comment_text": "", "digests": {"md5": "bf2480ef1ec3e367cd07f2eda8912f16", "sha256": "03faaf4bd4d3ba022925a68dbbf121b1c9b071179fee40ea315384840c71ea13"}, "downloads": -1, "filename": "convtools-0.5.2.tar.gz", "has_sig": false, "md5_digest": "bf2480ef1ec3e367cd07f2eda8912f16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 78714, "upload_time": "2020-03-29T20:12:36", "upload_time_iso_8601": "2020-03-29T20:12:36.838565Z", "url": "https://files.pythonhosted.org/packages/b4/02/935ddf910c8267fcd70e59302b89dbf657658d1d37d74df167f84f571c36/convtools-0.5.2.tar.gz"}], "0.5.3": [{"comment_text": "", "digests": {"md5": "eec37696f36a4a09d581c01c62f0572a", "sha256": "e848d7488309db8a75ecd7b0590457ec23643b3718947a4fa8c6b7e33ee49a7e"}, "downloads": -1, "filename": "convtools-0.5.3.tar.gz", "has_sig": false, "md5_digest": "eec37696f36a4a09d581c01c62f0572a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 80062, "upload_time": "2020-03-30T20:17:04", "upload_time_iso_8601": "2020-03-30T20:17:04.450836Z", "url": "https://files.pythonhosted.org/packages/95/5f/49256bc2b8292580d7e99b1c9d843914e1ee4e7cb6e5325dd3be5ac76f88/convtools-0.5.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "eec37696f36a4a09d581c01c62f0572a", "sha256": "e848d7488309db8a75ecd7b0590457ec23643b3718947a4fa8c6b7e33ee49a7e"}, "downloads": -1, "filename": "convtools-0.5.3.tar.gz", "has_sig": false, "md5_digest": "eec37696f36a4a09d581c01c62f0572a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 80062, "upload_time": "2020-03-30T20:17:04", "upload_time_iso_8601": "2020-03-30T20:17:04.450836Z", "url": "https://files.pythonhosted.org/packages/95/5f/49256bc2b8292580d7e99b1c9d843914e1ee4e7cb6e5325dd3be5ac76f88/convtools-0.5.3.tar.gz"}]}