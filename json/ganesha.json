{"info": {"author": "Or Levi", "author_email": "orlevi128@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Ganesha\nA framework for developing a realtime model-inference service.\n\nAllows you to set up an inference-endpoint for you ML Model easily.\n\n## Table of Contents:\n1. [Installation](#intallation)\n2. [Basic Setup](#basic_setup)\n3. [Your First Endpoint](#endpoints)\n4. [Models](#models)\n5. [Logging](#logging)\n6. [CLI Commands](#cli_cmd)\n\n<a name=\"intallation\"></a>\n## Installation\n\n* Run: `pip install ganesha`\n\n\n<a name=\"basic_setup\"></a>\n## Basic Setup\n```python\nfrom ganesha.app import Ganesha, GaneshaConfig\nfrom ganesha.app.api import generate_api_v1\n\n# Initialize configuration\nconf = GaneshaConfig(service_name='sample_ganesha',\n                           listen_port=1234)\n\n# Setup an application\nganesha_app = Ganesha(conf).setup()\n\n# Get pre-made ping/health methods for free!\napi_v1 = generate_api_v1()\nganesha_app.register_router(url='/api/v1',\n                           router=api_v1)\n\n# Run development server\nganesha_app.run()\n```\n\n<a name=\"endpoints\"></a>\n## Your First Endpoint\nWhen using ganesha, it is easy to set up new endpoints.\n\nThe most basic layer is a `Router`, once you add your routes to your router, you can register it to your application:\n```python\nimport json\nfrom ganesha.app.api import Router\n\nrouter = Router('v1')\n\n@router.route(url='hello_world', method='GET')\ndef hello_world():\n    return json.dumps({\"hello\": \"world\"})\n\nganesha_app.register_router(url='/api/v1',\n                           router=router)\n```\n\nWhen using the decorator `@router.route(...)` you can add a new route to your router\nBy using `register_router`, you register the router under the specified url.\n\n### Request Parameters\nganesha gives you an easy way to extract and validate your request-parameters:\n```python\nimport json\nfrom ganesha.app.api import Router, validate_params\n\nrouter = Router('v1')\n\n# Define a schema for the request body\nschema = {'vector': {'type': 'list', 'schema': {'type': 'float'}}}\n\n@router.route(url='predict', method='POST')\n@validate_params(schema)\ndef predict(vector):\n    prediction = my_model.predict_proba(vector)\n    return json.dumps({\"hello\": \"world\"})\n\nganesha_app.register_router(url='/api/v1',\n                           router=router)\n```\n\nganesha uses `Cerberus` for schema validation, see https://docs.python-cerberus.org/en/stable/validation-rules.html for schema syntax\n\n\n### Pre-Made API\nMost of the time, your aplication may want a ping+health route, ganesha gives that for free:\n```python\nfrom ganesha.app.api import generate_api_v1, validate_params\n\napi_v1 = generate_api_v1() # Returns a pre-made Router with /ping and /health\n```\nWhat's left? just register your own route in:\n```python\n@api_v1.route(url='predict', method='POST')\n@validate_params(schema)\ndef predict(**params):\n    # code\n\nganesha_app.register_router(url='/api/v1',\n                           router=api_v1)\n```\n\n<a name=\"models\"></a>\n## Models\nImplementing your inference business-logic is easy\n\nFor convinience reasons, you can inherit from GaneshaModel class and override specifc methods:\n\n```python\nfrom ganesha.models import GenericModel\n\nclass SampleModel(GenericModel):\n    def init(self, directory_path):\n        load_path = os.path.join(directory_path, 'sample_model.pkl')\n        with open(load_path, 'r') as f:\n            # self.model should be defined here\n            self.model = pickle.load(f)\n\n    def infer(self, ...):\n        # Implement\n        pass\n\n    # You can add as many methods as you wish, like pre-procssing methods & infer method...\n```\n\nganesha will automatically `init` your model instance upon calling `ganesha_app.setup()`\n```python\n# Build a Ganesha Model instance\nmy_model = MyModel()\n\nconf = GaneshaConfig(service_name='sample_ganesha',\n                           listen_port=1234,\n                           # Make ganesha aware of your instance\n                           models_instances=[my_model])\n\n# Setup an application\n# Ganesha will call `init` on your instance -> your model will be loaded here\nganesha_app = Ganesha(conf).setup()\n\n# Get pre-made ping/health methods for free!\napi_v1 = generate_api_v1()\n\n# Add your prediction route\nschema = {...}\n\n@api_v1.route(url='predict', method='POST')\n@validate_params(schema)\ndef predict(**params):\n    probability = my_model.predict(**params)\n\n    return json.dumps({'probability': probability})\n\nganesha_app.register_router(url='/api/v1',\n                           router=api_v1)\n```\n\n<a name=\"logging\"></a>\n## Logging\nYou can access the logger in 2 way,\nOne way - you can get the logger with: `logging.getLogger(service_name)`\nAnother way - the logger is a member of your app: `ganesha_app.logger`\nAfter you create your app, automatically a new logger is defined (named after your service):\n```python\n# Initialize configuration\nconf = GaneshaConfig(service_name='sample_ganesha',\n                           listen_port=1234)\n\n# Setup an application\nganesha_app = Ganesha(conf).setup()\n\n# 1st way:\nimport logging\nlogger = logging.getLogger('sample_ganesha')\nlogger.info('Message 1')\n\n# 2nd way:\nganesha_app.logger.info('Message 2')\n```\n\n\n<a name=\"cli_cmd\"></a>\n## CLI Commands\nWhen installing ganesha, you get for free the CLI command `ganesha`\nThis command has utilities for both development and production.\n\nAvailable commands:\n* `ganesha test`\n* `ganesha shell`\n* `ganesha run dev/gunicorn`\n\nThe ganesha commands looks for your application in `app.py` by default, you can modify it by setting the environement variable: `GANESHA_APP`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/orlevi111/ganesha", "keywords": "", "license": "LICENCE", "maintainer": "", "maintainer_email": "", "name": "ganesha", "package_url": "https://pypi.org/project/ganesha/", "platform": "", "project_url": "https://pypi.org/project/ganesha/", "project_urls": {"Homepage": "https://github.com/orlevi111/ganesha"}, "release_url": "https://pypi.org/project/ganesha/0.1.0/", "requires_dist": ["Flask (==1.1.*)", "cerberus (==1.3.*)", "gunicorn (==19.*)", "python-dotenv (==0.10.*)", "click (==7.*)"], "requires_python": "", "summary": "A framework for developing a realtime model-inference service.", "version": "0.1.0"}, "last_serial": 6478068, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9bfa0df54bd38942346e4e3482ba5e37", "sha256": "dda09c9aa7e947fa46502a7e832cf7ab8f8023e42cfdd1352e5f6e9012601980"}, "downloads": -1, "filename": "ganesha-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9bfa0df54bd38942346e4e3482ba5e37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24053, "upload_time": "2020-01-18T13:18:29", "upload_time_iso_8601": "2020-01-18T13:18:29.764498Z", "url": "https://files.pythonhosted.org/packages/87/76/cbd0f5441629aea016c4551a08022ee6bd8a11a2df837f69a9fc7ee599f6/ganesha-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "22926da5013538425078f4d6e2fa9eac", "sha256": "065b3baf4b9bed76e9ae27d321fc92919c9c03a6a9e94ec2c597d1347ddd9064"}, "downloads": -1, "filename": "ganesha-0.1.0.tar.gz", "has_sig": false, "md5_digest": "22926da5013538425078f4d6e2fa9eac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16778, "upload_time": "2020-01-18T13:18:31", "upload_time_iso_8601": "2020-01-18T13:18:31.387818Z", "url": "https://files.pythonhosted.org/packages/b6/ff/2df3df80150a4fb088f5197c3938f617295acc51e2014a143ef54967170b/ganesha-0.1.0.tar.gz"}], "0.1.0.dev2": [{"comment_text": "", "digests": {"md5": "5fed98ef1e73b777a77156f7b2c1a40b", "sha256": "d29c0b47e63f0c002aded07eff352243b40b7c8823b14d07167bd15c59fd9ece"}, "downloads": -1, "filename": "ganesha-0.1.0.dev2-py3-none-any.whl", "has_sig": false, "md5_digest": "5fed98ef1e73b777a77156f7b2c1a40b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24126, "upload_time": "2020-01-18T12:51:23", "upload_time_iso_8601": "2020-01-18T12:51:23.934148Z", "url": "https://files.pythonhosted.org/packages/07/5c/8b0cca686fda0014545962eb9b4ff90a867033376440337c2477e2c2fc3d/ganesha-0.1.0.dev2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "c0187690870dcbf8bd8c86b637ba34f1", "sha256": "edce76098d3f0d7db5b955c91c960bc2fb95a9ffd23e7dc0423c236179e466fc"}, "downloads": -1, "filename": "ganesha-0.1.0.dev2.tar.gz", "has_sig": false, "md5_digest": "c0187690870dcbf8bd8c86b637ba34f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16782, "upload_time": "2020-01-18T12:51:25", "upload_time_iso_8601": "2020-01-18T12:51:25.061558Z", "url": "https://files.pythonhosted.org/packages/fa/f5/dbef9b3592a44b896e78e169e28238e3d201fe706d6670fcc03e291d4ec9/ganesha-0.1.0.dev2.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "9bfa0df54bd38942346e4e3482ba5e37", "sha256": "dda09c9aa7e947fa46502a7e832cf7ab8f8023e42cfdd1352e5f6e9012601980"}, "downloads": -1, "filename": "ganesha-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9bfa0df54bd38942346e4e3482ba5e37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24053, "upload_time": "2020-01-18T13:18:29", "upload_time_iso_8601": "2020-01-18T13:18:29.764498Z", "url": "https://files.pythonhosted.org/packages/87/76/cbd0f5441629aea016c4551a08022ee6bd8a11a2df837f69a9fc7ee599f6/ganesha-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "22926da5013538425078f4d6e2fa9eac", "sha256": "065b3baf4b9bed76e9ae27d321fc92919c9c03a6a9e94ec2c597d1347ddd9064"}, "downloads": -1, "filename": "ganesha-0.1.0.tar.gz", "has_sig": false, "md5_digest": "22926da5013538425078f4d6e2fa9eac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16778, "upload_time": "2020-01-18T13:18:31", "upload_time_iso_8601": "2020-01-18T13:18:31.387818Z", "url": "https://files.pythonhosted.org/packages/b6/ff/2df3df80150a4fb088f5197c3938f617295acc51e2014a143ef54967170b/ganesha-0.1.0.tar.gz"}]}