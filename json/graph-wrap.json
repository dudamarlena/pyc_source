{"info": {"author": "Paul Gilmartin", "author_email": "paul.gilmartin89@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# GraphWrap #\n\nGraphWrap is a python library which, by adding only a couple of lines of code to your django project, can extend an existing\n[django-tastypie](https://django-tastypie.readthedocs.io/en/latest/)\nREST-based API with a [GraphQL](https://graphql.org/learn/) interface.\nThis is achieved by leveraging [Graphene-Django](https://docs.graphene-python.org/projects/django/en/latest/) to dynamically \nbuild, at runtime, a GraphQL ObjectType for each tastypie resource. These ObjectTypes are then pieced together to\nform a GraphQL schema which has the same \"shape\" as your existing REST API. \nNote that GraphWrap is **not** designed to build a GraphQL schema to replace your existing REST API,\nbut rather extend it to offer an additional GraphQL-queryable interface.\n\n## Highlights:\n\n* The dynamic nature of the build of the GraphQL layer means that you can continue to develop your existing\nREST based API and know that the graphql schema will be kept up-to-date automatically. \n\n* Since the graphql layer is using the REST API under-the-hood, you can be sure that important things\nlike **serialization** (including any custom dehydration), **authentication** and **authorization** will be \nconsistent between a REST resource and the corresponding GraphQL type.\n\n* No longer will you be required to hardcode `full=True` to any of your tastypie resource fields - the client can simply\n  make use of the GraphQL layer to retrieve data from related resources. This can lead to significant performance boosts\n  in certain circumstances (One of the advantages of GraphQL queries is that they solve the [n+1 problem](\n  https://itnext.io/what-is-the-n-1-problem-in-graphql-dd4921cb3c1a) which occurs with traditional REST-based APIs.)\n\n\n\n## Limitations\n\nHere are a couple of limitations of the GraphQL API produced by GraphWrap:\n\n* It can only accept GraphQL [queries](https://graphql.org/learn/queries/) - mutations and subscriptions\n  are not (yet) supported.\n\n* The schema is built only from tastypie resources which inherit directly from `ModelResource` - non-ORM based\n  resources are not (yet) supported.\n\n\n## Future Directions\n\nThe long term goal for this project is to give the ability to add automatic GraphQL query support to any\nDjango view based REST framework.\n\n\n\n## Quickstart\n\n\n### Core Requirements\n\n* `graphene-django==2.9.0` \n\n* `django-tastypie>=0.14.0\"`\n\nEach of the above requirements can be run using Python >=2.7 and Django >=1.11.\n\n### Installing\n\n`pip install graph_wrap`\n\n\n### Registering the GraphQL resource\n\nGraphWrap exposes the GraphQL schema via a tastypie resource `GraphQLResource` (which is effectively a Django class-based view).\nAs with all resources, we are required to register `GraphQLResource` with the tastypie Api instance\nbefore we can interact with it via HTTP requests. Once registered, `GraphQLResource` builds and exposes a GraphQL\nqueryable schema via the `/graphql` endpoint.\n\n```\n# tests.urls.py\nfrom graph_wrap import GraphQLResource  # add this line to your project\n\napi = Api('v1')\napi.register(GraphQLResource()) # add this line to your project\n\nurlpatterns = [\n    path(r'', include(api.urls)),\n    ...\n]\n\n```\n\n### Querying the GraphQL resource\n\nAs mentioned above, GraphWrap exposes the GraphQL API via the `/graphql` URL. By default, this endpoint uses the default\nauthentication provided by tastypie's ``Resource`` class. Later versions of GraphWrap will allow this \nauthentication to be extended via setting config.\n\n### Settings\n\nIn order for GraphQL to be able to build the GraphQL schema from the tastypie Api instance, it needs\nto know where that instance lives in your project. To allow GraphWrap to locate the Api instance, we can simply\nadd the full path of the instance to our django settings module. For example:\n\n```\n# tests.settings.py\n\nTASTYPIE_API_PATH = 'tests.urls.api'\n```\n\n\n## Documentation (by Example)\n\nIn this section we give a brief overview of how to use GraphWrap via examining\na simple concrete example. \n\n\n### Set-up\nSuppose we have the following basic django models and corresponding tastypie resources (\na fully executable version of this example can be found in graph_wrap.tests):\n\n```\n# models.py\n\nclass Author(models.Model):\n    name = models.TextField()\n    age = models.TextField()\n\n\nclass Post(models.Model):\n    content = models.TextField()\n    date = models.DateTimeField()\n    author = models.ForeignKey(Author, null=True, on_delete=models.SET_NULL)\n    files = models.ManyToManyField('Media')\n\n\nclass Media(models.Model):\n    name = models.TextField()\n    content_type = models.TextField()\n    size = models.BigIntegerField()\n\n\n# api.py\n\nclass AuthorResource(ModelResource):\n    posts = fields.ManyToManyField('tests.api.PostResource', attribute='post_set')\n\n    class Meta:\n        queryset = Author.objects.all()\n        resource_name = 'author'\n        filtering = {\n            'age': ('exact',),\n            'name': ('exact',),\n        }\n\n\nclass PostResource(ModelResource):\n    author = fields.ForeignKey(AuthorResource, attribute='author', null=True)\n    files = fields.ManyToManyField('tests.api.MediaResource', attribute='files')\n    date = fields.DateTimeField('date')\n\n    class Meta:\n        queryset = Post.objects.all()\n        resource_name = 'post'\n\n\nclass MediaResource(ModelResource):\n    class Meta:\n        queryset = Media.objects.all()\n        resource_name = 'media'\n```\n\nIf we wish to layer our REST resources with a GraphQL interface, we can follow the instructions above in the\n\"Quickstart\" guide. Start by registering our GraphQLResource with the tastypie Api instance:\n\n```\n# urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom tastypie.api import Api\n\nfrom graph_wrap import GraphQLResource\nfrom tests.api import AuthorResource, PostResource, MediaResource\n\n\napi = Api('v1')\napi.register(AuthorResource())\napi.register(PostResource())\napi.register(MediaResource())\napi.register(GraphQLResource())\n\nurlpatterns = [\n    path(r'', include(api.urls)),\n    path('admin/', admin.site.urls),\n]\n```\n\nNext, add the `TASTYPIE_API_PATH` to the django settings module so GraphWrap can locate the tastypie Api:\n\n```\nTASTYPIE_API_PATH = 'tests.urls.api'\n```\n\n### Understanding the Schema\nWith these simple changes, we can now query the  `/grahql` endpoint with GraphQL queries. The structure\nqueries can take, as with all GraphQL APIs, is dictated by the shape of the underlying schema (which, in this case, is\ndictated by the shape of the tastypie API). To see what the schema looks like, run the following:\n\n```\n>>> from graph_wrap import schema\n>>> schema = schema()\n>>> print(schema)\n\n\nschema {\n  query: Query\n}\ntype Query {\n  author(id: Int!): author_type\n  all_authors(orm_filters: String): [author_type]\n  post(id: Int!): post_type\n  all_posts(orm_filters: String): [post_type]\n  media(id: Int!): media_type\n  all_medias(orm_filters: String): [media_type]\n}\ntype author_type {\n  resource_uri: String!\n  posts: [post_type]!\n  id: Int!\n  name: String!\n  age: String!\n}\ntype media_type {\n  resource_uri: String!\n  id: Int!\n  name: String!\n  content_type: String!\n  size: Int!\n}\ntype post_type {\n  resource_uri: String!\n  author: author_type\n  files: [media_type]!\n  date: String!\n  id: Int!\n  content: String!\n}\n\n```\n\nImportant points to note about the schema produced by GraphWrap:\n\n* **snake_case**: As can be seen above, GraphWrap produces a schema in the `snake_case` convention. Whilst\n  this is generally not favoured in GraphQL circles, it was chosen here as it would likely be more consistent with\n  the field names on the underlying REST resources (which would use most often use the PEP8 recommended snake \n  case convention).\n\n* **Root Query field names**: For each REST model-resource, GraphWrap adds to the Query type precisely\n  two fields - one corresponding to the data accessible via a GET request to the 'list' endpoint of the\n  resource, and one corresponding to the data accessible via a GET request to the 'detail' endpoint of the\n  resource. If we take our AuthorResource as an example:\n    * the 'list' endpoint corresponds to the url `/author`. This maps to the `all_authors` field on the Query type.\n    * the 'detail' endpoint corresponds to urls of the form '/author/{author_pk}'. This maps to the `author(id: Int!)`\n      field on the Query type (where, in the usual GraphQL schema syntax, `(id: Int!)` indicates that an integer author\n      id must be supplied.)\n\n* **ObjectType and ObjectType Field names**: \n    * GraphWrap maps each model-resource maps to a GraphQL\n      ObjectType. The name of the resultant ObjectType can be found by appending `_type` to the name of the\n      corresponding resource. For example, the `AuthorResource`, which has name `author`, maps to the `author_type`\n      GraphQL ObjectType. \n    * The names of the fields on each ObjectType match those of the names of the fields on the corresponding\n      resource.\n\n* **Filtering (`orm_filters`)**: Notice in the schema above that each `all_` field can be queried with an optional \n    `orm_filters` argument. This is the GraphQL equivalent of the ORM filtering offered by tastypie on list endpoints.\n    If we take our AuthorResource as an example (which has been defined with \n    `filtering = {'age': ('exact',), 'name': ('exact',)})`, then the REST GET query `/author/?name=Paul` can be achieved\n    via a POST request to `/graphql` with the following query:\n\n    ```\n    {\n      all_authors(orm_filters: \"name=Paul\") {\n        name\n      }\n    }\n    ```\n\n\n\n## Making Queries: REST vs GraphQL\n\nIn this section we'll look at how various REST GET requests can be mapped to queries for the ``/graphql``\nendpoint. Again, we'll do this via examining our explicit concrete example (note that the queries\nand requests pictured in this section were produced on the [Insomnia](https://insomnia.rest/)\nHTTP client, which has a integration with GraphQL):\n\n\n\n### 'list' endpoint requests\n\n* REST:\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/rest_author_list.png)\n\n\n* GraphQL\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/graphql_all_authors.png)\n\n\n\n### 'detail' endpoint requests\n\n* REST\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/rest_author_detail.png)\n\n\n* GraphQL\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/graphql_author_single.png)\n\n\n\n### Filtering\n\n* REST\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/rest_author_orm.png)\n\n\n* GraphQL\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/test_img.png)\n\n\n### Some fancier GraphQL query examples - see GraphQL [queries](https://graphql.org/learn/queries/) for more\n\n* Nesting\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/graphql_all_authors_nested.png)\n\n\n* Fragments\n\n![](https://raw.githubusercontent.com/PaulGilmartin/graph_wrap/master/tests/images/graphql_fragments.png)\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PaulGilmartin/graph_wrap", "keywords": "tastypie graphene django graphql rest api", "license": "", "maintainer": "", "maintainer_email": "", "name": "graph-wrap", "package_url": "https://pypi.org/project/graph-wrap/", "platform": "", "project_url": "https://pypi.org/project/graph-wrap/", "project_urls": {"Homepage": "https://github.com/PaulGilmartin/graph_wrap", "Source": "https://github.com/PaulGilmartin/graph_wrap"}, "release_url": "https://pypi.org/project/graph-wrap/0.0.1/", "requires_dist": ["graphene-django (==2.9.0)", "django-tastypie (>=0.14.0)"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "summary": "Extend an existing tastypie REST-based API with a GraphQL interface with a only a couple of lines of code.", "version": "0.0.1"}, "last_serial": 6914915, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ba598a98ad4688acebd614dee54e2c5f", "sha256": "c0a30d91d21fcc7bd4c3c7341181262dbb259d7c69295bb437b4134dd8cbc748"}, "downloads": -1, "filename": "graph_wrap-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba598a98ad4688acebd614dee54e2c5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 18265, "upload_time": "2020-03-30T18:51:45", "upload_time_iso_8601": "2020-03-30T18:51:45.796648Z", "url": "https://files.pythonhosted.org/packages/27/34/ac26ba2d542eb4654de5af9b3c757b393f3d54f92435a4221ab3cd694400/graph_wrap-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0a5bb6b22b95929f14bab210fa6f82c8", "sha256": "0de1de416bb2520720a141767c8cc0900c05dfa3239346e5cceda28a03f72e6d"}, "downloads": -1, "filename": "graph-wrap-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0a5bb6b22b95929f14bab210fa6f82c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 18510, "upload_time": "2020-03-30T18:51:49", "upload_time_iso_8601": "2020-03-30T18:51:49.437516Z", "url": "https://files.pythonhosted.org/packages/96/cc/8be7c075222d3cbf55a28b44860551f7ea642b9dfc06b9af879ab40a6045/graph-wrap-0.0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba598a98ad4688acebd614dee54e2c5f", "sha256": "c0a30d91d21fcc7bd4c3c7341181262dbb259d7c69295bb437b4134dd8cbc748"}, "downloads": -1, "filename": "graph_wrap-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba598a98ad4688acebd614dee54e2c5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 18265, "upload_time": "2020-03-30T18:51:45", "upload_time_iso_8601": "2020-03-30T18:51:45.796648Z", "url": "https://files.pythonhosted.org/packages/27/34/ac26ba2d542eb4654de5af9b3c757b393f3d54f92435a4221ab3cd694400/graph_wrap-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0a5bb6b22b95929f14bab210fa6f82c8", "sha256": "0de1de416bb2520720a141767c8cc0900c05dfa3239346e5cceda28a03f72e6d"}, "downloads": -1, "filename": "graph-wrap-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0a5bb6b22b95929f14bab210fa6f82c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 18510, "upload_time": "2020-03-30T18:51:49", "upload_time_iso_8601": "2020-03-30T18:51:49.437516Z", "url": "https://files.pythonhosted.org/packages/96/cc/8be7c075222d3cbf55a28b44860551f7ea642b9dfc06b9af879ab40a6045/graph-wrap-0.0.1.tar.gz"}]}