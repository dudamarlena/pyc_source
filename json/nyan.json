{"info": {"author": "ducaale", "author_email": "sharaf.13@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Nyan\n\n[![PyPI version](https://badge.fury.io/py/nyan.svg)](https://badge.fury.io/py/nyan)\n\nNyan - a fork of [Python Play](https://github.com/replit/play) - is an open-source code library for the Python programming language that makes it as easy as possible to start making games. Here's the code to make a simple game using Nyan:\n\n```python\nimport nyan\n\ncat = nyan.new_text('=^.^=', font_size=70)\n\n@nyan.repeat_forever\nasync def move_cat():\n    cat.x = nyan.random_number(-200, 200)\n    cat.y = nyan.random_number(-200, 200)\n    cat.color = nyan.random_color()\n    \n    cat.show()\n\n    await nyan.sleep(seconds=0.4)\n\n    cat.hide()\n\n    await nyan.sleep(seconds=0.4)\n\n@cat.when_clicked\ndef win_function():\n    cat.show()\n    cat.text = 'You won!'\n\nnyan.start_program()\n```\n\nThe code above makes a game where you have to click the cat to win:\n\n![Clicking a cat game](example.gif)\n\nNyan is an excellent choice for beginner programmers to get started with graphics programming. It was designed to have similar commands and simplicity to [MIT's Scratch](https://scratch.mit.edu) and is distinguished from such projects as Pygame, Arcade, or Pygame Zero because of its lack of boiler plate code, its easy-to-understand plain-english commands, and intuitive API.\n\n# How to install Nyan\n\nMake sure that you have Python 3.8 or greater. Run the following command in your terminal:\n```\npip install nyan\n```\n\n# How to use Nyan\n\nAll Nyan programs start with `import nyan` and end with `nyan.start_program()`, like this:\n\n```python\nimport nyan # this is the first line in the program\n\n\n\nnyan.start_program() # this is the last line in the program\n```\n\nAll other commands go between those two commands.\n\n## Commands\n\nThe rest of this document is divided into the following sections:\n\n- [Basic Commands](#basic-commands) - Getting graphics, shapes, and text on the screen. Also changing the backdrop.\n- [Animation and Control Commands](#animation-and-control-commands) - Animating and controlling graphics, shapes, and text.\n- [Sprite Commands](#sprite-commands) - Controlling sprites.\n- [Mouse Commands](#mouse-commands) - Detecting mouse actions (clicks, movement).\n- [Keyboard Commands](#keyboard-commands) - Detecting keyboard actions.\n- [Audio Commands](#audio-commands) - Playing sounds and music.\n- [Other Useful Commands](#other-useful-commands) - General commands.\n- [Packaging Nyan Programs](#packaging-nyan-programs) - Creating an executable that can be shared with other people.\n\n## Basic Commands\n\nTo get images or text on the screen, use the following commands. (Copy and paste the code below to try it out.)\n\n#### `nyan.new_rect()`\n```python\nbox = nyan.new_rect(\n        color='black',\n        x=0,\n        y=0,\n        width=100,\n        height=200,\n        border_color=\"light blue\",\n        border_width=10\n    )\n```\n\nThis will put a tall, black Rectangle in the middle of the screen.\n\nIf you want to change where the image is on the screen, try changing `x=0` (horizontal position) and `y=0` (vertical position). Just like Scratch, the middle of the screen is x=0, y=0. Increasing x moves the image right and decreasing x moves the image left. Likeswise, increasing y moves the image up and decreasing y moves the image down. You can also change the color by changing `'black'` to another color name, like `'orange'`.\n\n#### `nyan.new_image()`\n```python\ncharacter = nyan.new_image(\n        image='character.png', \n        x=0, \n        y=0, \n        size=100\n    )\n```\n\nThis will place an image in the middle of the screen. Make sure you have a file named `character.png` in a folder named `assets` inside your project for the code above to work. You can find images online at sites like http://icons.iconarchive.com/icons/icojam/animals/64/01-bull-icon.png, or you can make your own using an online sprite editor like this one https://www.piskelapp.com/.\n\n#### `nyan.new_text()`\n```python\ngreeting = nyan.new_text(\n        text='hi there', \n        x=0, \n        y=0, \n        font=None, \n        font_size=50, \n        color='black'\n    )\n```\n\nThis will put some text on the screen.\n\nIf you want to change the font, you'll need a font file (usually named something like `Arial.ttf`) in your assets folder. Then you can change `font=None` to `font='Arial.ttf'`. You can find font files at sites like [DaFont](https://www.dafont.com).\n\n#### `nyan.new_circle()`\n```python\nball = nyan.new_circle(\n        color='black', \n        x=0, \n        y=0, \n        radius=100, \n        border_color=\"light blue\", \n        border_width=10\n    )\n```\n\nThis will put a black circle in the middle of the screen.\n\n#### `nyan.set_backdrop()`\nYou can change the background color with the `nyan.set_backdrop()` command:\n\n```python\nnyan.set_backdrop('light blue')\n```\n\nThere are [lots of named colors to choose from](https://upload.wikimedia.org/wikipedia/commons/2/2b/SVG_Recognized_color_keyword_names.svg). Additionally, if you want to set colors by RGB (Red Green Blue) values, you can do that like this:\n\n```python\n# Sets the background to white. Each number can go from 0 to 255\nnyan.set_backdrop((255, 255, 255))\n```\n\nAnywhere you can set a color in Nyan, you can do it using a named color like `'red'` or an RGB value above like `(255, 255, 255)` or even an RGBA value like `(0, 0, 0, 127)` (the fourth number is transparency from 0 to 255).\n\n## Animation and Control Commands\n\n#### `@nyan.repeat_forever`\nTo make things move around, you can start by using `@nyan.repeat_forever`, like this:\n\n```python\ncat = nyan.new_text('=^.^=')\n\n@nyan.repeat_forever\ndef do():\n    cat.turn(10)  \n```    \n\nThe above code will make the cat turn around forever. Sprites have other commands that you can see in the next section called Sprite Commands.\n\n#### `@nyan.when_program_starts`\nTo make some code run just at the beginning of your project, use `@nyan.when_program_starts`, like this:\n\n```python\ncat = nyan.new_text('=^.^=')\n\n@nyan.when_program_starts\ndef do():\n    cat.turn(180)  \n```\n\nThis will make the cat turn upside down instantly when the program starts.\n\n#### `await nyan.sleep(seconds=1)`\nTo run code after a waiting period, you can use the `await nyan.sleep()` command like this:\n\n```python\ncat = nyan.new_text('=^.^=')\n\n@nyan.when_program_starts\nasync def do():\n    cat.turn(180)  \n    await nyan.sleep(seconds=2)\n    cat.turn(180)  \n```\n\nThis will make the cat turn upside down instantly when the program starts, wait 2 seconds, then turn back up again.\n\n#### `nyan.broadcast()`\nYou can use `nyan.broadcast()` to broadcast an event that can be picked up by an event listener.\n```python\n@nyan.repeat_forever\ndef do():\n    nyan.broadcast('marco')\n```\n\n#### `@nyan.when_event_recieved()`\nTo run code in response to a broadcasted event, use `@nyan.when_event_recieved()`, like this\n```python\n@nyan.when_event_recieved('marco')\ndef do():\n    print('polo')\n```\n\n#### `@nyan.foreach_sprite()`\nattaches a script to each sprite passed or in the case a tag is passed, for each sprite that has the given tag. Should be used in conjunction with `@nyan.repeat_forever` and `@nyan.when_program_starts` decorators. Example:\n\n```python\n@nyan.repeat_forever\n@nyan.foreach_sprite(player1, player2, player3, player4)\nasync def animate_player(player):\n    next_frame(player)\n    await nyan.sleep(player.frameTime)\n\n@nyan.repeat_forever\n@nyan.foreach_sprite(tag='player-missile')\nasync def propel_missile(missile):\n    missile.move(25)\n```\n\n## Sprite Commands\n\n#### Simple commands\n\nSprites (images and text) have a few simple commands:\n\n- **`sprite.move(10)`** \u2014 moves the sprite 10 pixels in the direction it's facing (starts facing right). Use negative numbers (-10) to go backward.\n- **`sprite.move(10, direction=45)`** \u2014 moves the sprite 10 pixels at an angle specified by the direction.\n- **`sprite.turn(20)`** \u2014 Turns the sprite 20 degrees counter-clockwise. Use negative numbers (-20) to turn the other way.\n- **`sprite.go_to(other_sprite)`** \u2014 Makes `sprite` jump to another sprite named `other_sprite`'s position on the screen. Can also be used to make the sprite follow the mouse: `sprite.go_to(nyan.mouse)`.\n- **`sprite.go_to(x=100, y=50)`** \u2014 Makes `sprite` jump to x=100, y=50 (right and up a little).\n- **`sprite.point_towards(other_sprite)`** \u2014 Turns `sprite` so it points at another sprite called `other_sprite`.\n- **`sprite.point_towards(x=100, y=50)`** \u2014 Turns `sprite` so it points toward x=100, y=50 (right and up a little).\n- **`sprite.hide()`** \u2014 Hides `sprite`. It can't be clicked when it's hidden.\n- **`sprite.show()`** \u2014 Shows `sprite` if it's hidden.\n- **`sprite.add_tag('car')`** \u2014 Adds a tag named `car` to the sprite. Tagging a sprite adds it to a group that can be fetched later by other functions.\n- **`sprite.remove_tag('car')`** \u2014 removes the `car` tag from the sprite\n- **`sprite.clone()`** \u2014 Makes a copy or clone of the sprite and returns it.\n- **`sprite.remove()`** \u2014 Removes a sprite from the screen permanently. Calling sprite commands on a removed sprite won't do anything.\n\n#### Properties\n\nSprites also have properties that can be changed to change how the sprite looks. Here they are:\n\n- **`sprite.x`** \u2014 The sprite's horizontal position on the screen. Positive numbers are right, negative numbers are left. The default is 0.\n- **`sprite.y`** \u2014 The sprite's vertical position on the screen. Positive numbers are up, negative numbers are down. The default is 0.\n- **`sprite.size`** \u2014 How big the sprite is. The default is 100, but it can be made bigger or smaller.\n- **`sprite.angle`** \u2014 How much the sprite is turned. Positive numbers are counter-clockwise. The default is 0 degrees (pointed to the right).\n- **`sprite.transparency`** \u2014 How see-through the sprite is from 0 to 100. 0 is completely see-through, 100 is not see-through at all. The default is 100.\n- **`sprite.brightness`** - How bright or dim the sprite is from -100 to 100. -100 is completely dark, 100 is white. The default is 0.\n- **`sprite.is_hidden`** \u2014 `True` if the sprite has been hidden with the `sprite.hide()` command. Otherwise `False`.\n- **`sprite.is_shown`** \u2014 `True` if the sprite has not been hidden with the `sprite.hide()` command. Otherwise `False`.\n- **`sprite.left`** \u2014 The x position of the left-most part of the sprite.\n- **`sprite.right`** \u2014 The x position of the right-most part of the sprite.\n- **`sprite.top`** \u2014 The y position of the top-most part of the sprite.\n- **`sprite.bottom`** \u2014 The y position of the bottom-most part of the sprite.\n\nImage-sprite-only properties:\n\n- **`sprite.image`** \u2014 The filename of the image shown.\n\nText-sprite-only properties:\n\n- **`text.text`** \u2014 The displayed text content.\n- **`text.font`** \u2014 The filename of the font e.g. 'Arial.ttf'. The default is `None`, which will use a built-in font.\n- **`text.font_size`** \u2014 The text's size. The default is `50` (pt).\n- **`text.color`** \u2014 The text's color. The default is black.\n\nBox-sprite-only properties:\n- **`box.color`** \u2014 The color filling the box. The default is `black`.\n- **`box.width`** \u2014 The width of the box. The default is `100` pixels.\n- **`box.height`** \u2014 The height of the box. The default is `200` pixels.\n- **`box.border_width`** \u2014 The width of the box's border, the line around it. The default is `0`.\n- **`box.border_color`** \u2014 The color of the box's border. The default is `'light blue'`.\n\nIf the box has a border, the box's total width, including the border, will be the width defined by the `width` property.\n\nCircle-sprite-only properties:\n- **`circle.color`** \u2014 The color filling the circle. The default is `black`.\n- **`circle.radius`** \u2014 How big the circle is, measured from the middle to the outside. The default is `100` pixels, making a 200-pixel-wide circle.\n- **`circle.border_width`** \u2014 The width of the circle's border, the line around it. The default is `0`.\n- **`circle.border_color`** \u2014 The color of the circle's border. The default is `'light blue'`.\n\nIf the circle has a border, the circle's total width, including the border, will be the width defined by the `radius` property.\n\nThese properties can changed to do the same things as the sprite commands above. For example,\n\n```python\nsprite.go_to(other_sprite)\n\n# the line above is the same as the two lines below\nsprite.x = other_sprite.x\nsprite.y = other_sprite.y\n```\n\nYou can change the properties to animate the sprites. The code below makes the cat turn around.\n\n```python\ncat = nyan.new_text('=^.^=')\n\n@nyan.repeat_forever\ndef do():\n    cat.angle += 1\n    # the line above is the same as cat.turn(1)\n```\n\n#### Other info\n\nSprites also have some other useful info:\n\n- **`sprite.width`** \u2014 Gets how wide the sprite is in pixels.\n- **`sprite.height`** \u2014 Gets how tall the sprite is in pixels.\n- **`sprite.distance_to(other_sprite)`** \u2014 Gets the distance in pixels to `other_sprite`.\n- **`sprite.distance_to(x=100, y=100)`** \u2014 Gets the distance to the point x=100, y=100.\n- **`sprite.is_touching(other_sprite)`** \u2014 Returns True if `sprite` is touching the `other_sprite`. Otherwise `False`.\n- **`sprite.is_touching(point)`** \u2014 Returns True if the sprite is touching the point (anything with an `x` and `y` coordinate). For example: `sprite.is_touching(nyan.mouse)`\n\n## Mouse Commands\n\nWorking with the mouse in Nyan is easy. Here's a simple program that points a sprite at the mouse:\n\n```python\narrow = nyan.new_text('-->', font_size=100)\n\n@nyan.repeat_forever\ndef do():\n    arrow.point_towards(nyan.mouse)\n```\n\n`nyan.mouse` has the following properties:\n\n- **`nyan.mouse.x`** \u2014 The horizontal x position of the mouse.\n- **`nyan.mouse.y`** \u2014 The vertical y position of the mouse.\n- **`nyan.mouse.is_clicked`** \u2014 `True` if the mouse is clicked down, or `False` if it's not.\n- **`nyan.mouse.is_touching(sprite)`** \u2014 Returns `True` if the mouse is touching a sprite, or `False` if it's not.\n\n#### `@sprite.when_clicked`\n\nProbably the easiest way to detect clicks is to use `@sprite.when_clicked`.\n\nIn the program below, when the face is clicked it changes for 1 second then turns back to normal:\n\n```python\nface = nyan.new_text('^.^', font_size=100)\n\n@face.when_clicked\nasync def do():\n    face.text = '*o*'\n    await nyan.sleep(seconds=1)\n    face.text = '^.^'\n```\n\n#### `@nyan.mouse.when_clicked` or `@nyan.when_mouse_clicked`\n\nTo run code when the mouse is clicked anywhere, use `@nyan.mouse.when_clicked` or `@nyan.when_mouse_clicked` (they do the same exact thing).\n\nIn the code below, when a click is detected, the text will move to the click location and the coordinates will be shown:\n\n```python\ntext = nyan.new_text('0, 0')\n\n@nyan.mouse.when_clicked\ndef do():\n    text.text = f'{nyan.mouse.x}, {nyan.mouse.y}'\n    text.go_to(nyan.mouse)\n```\n\n#### `@nyan.mouse.when_click_released` or `@nyan.when_mouse_click_released`\n\nTo run code when the mouse button is released, use `@nyan.mouse.when_click_released` `@nyan.when_mouse_click_released` (they do the same exact thing).\n\nIn the code below, the cat can be dragged around when it's clicked by the mouse:\n\n```python\ncat = nyan.new_text('=^.^= drag me!')\ncat.is_being_dragged = False\n\n@cat.when_clicked\ndef do():\n    cat.is_being_dragged = True\n\n@nyan.mouse.when_click_released\ndef do():\n    cat.is_being_dragged = False\n\n@nyan.repeat_forever\ndef do():\n    if cat.is_being_dragged:\n        cat.go_to(nyan.mouse)\n```\n\n## Keyboard Commands\n\n#### `nyan.key_is_pressed()`\n\nYou can use `nyan.key_is_pressed()` to detect keypresses.\n\nIn the code below, pressing the `arrow` keys or `w/a/s/d` will make the cat go in the desired direction.\n\n```python\ncat = nyan.new_text('=^.^=')\n\n@nyan.repeat_forever\ndef do():\n    if nyan.key_is_pressed('up', 'w'):\n        cat.y += 15\n    if nyan.key_is_pressed('down', 's'):\n        cat.y -= 15\n\n    if nyan.key_is_pressed('right', 'd'):\n        cat.x += 15\n    if nyan.key_is_pressed('left', 'a'):\n        cat.x -= 15\n```\n\n#### `@nyan.when_key_pressed()`\n\nYou can use `@nyan.when_key_pressed()` to run code when specific keys are pressed.\n\nIn the code below, pressing the `space` key will change the cat's face, and pressing the `enter` key will change it to a different face.\n\n```python\ncat = nyan.new_text('=^.^=')\n\n@nyan.when_key_pressed('space', 'enter') # if either the space key or enter key are pressed...\ndef do(key):\n    if key == 'enter':\n        cat.text = '=-.-='\n    if key == 'space':\n        cat.text = '=*_*='\n```\n\n#### `@nyan.when_any_key_pressed`\n\nIf you just want to detect when any key is pressed, you can use `@nyan.when_any_key_pressed`.\n\nIn the code below, any key you press will be displayed on the screen:\n\n```python\ntext = nyan.new_text('')\n\n@nyan.when_any_key_pressed\ndef do(key):\n    text.text = f'{key} pressed!'\n```\n\n#### `@nyan.when_key_released()`\n\nExactly like `@nyan.when_key_pressed()` but runs the code when specific keys are released.\n\nIn the code below, text will appear on screen only if the `up` arrow is pressed.\n\n```python\ntext = nyan.new_text('')\n\n@nyan.when_key_released('up')\nasync def do(key):\n    text.text = 'up arrow released!'\n    await nyan.sleep(seconds=1)\n    text.text = ''\n```\n\n#### `@nyan.when_any_key_released`\n\nExactly like `@nyan.when_any_key_pressed` but runs the code when any key is released.\n\nIn the code below, the name of the most recently released key will show up on screen.\n\n```python\ntext = nyan.new_text('')\n\n@nyan.when_any_key_pressed\ndef do(key):\n    text.text = f'{key} key released!''\n```\n\n## Audio Commands\n\n#### `nyan.new_sound()`\n```python\nmeow = nyan.new_sound(sound='meow.wav')\n```\nThis will load a sound file with `.wav` extension and makes it ready to be played. This function should be mainly used for sound effects. You can get sounds from this site http://soundbible.com/ or you can generate your own using this tool http://www.bfxr.net/.\n\n#### `meow.play()`\nThis will play the loaded sound file.\n```python\nmeow = nyan.new_sound(sound='meow.wav')\n\n@nyan.when_key_pressed('space')\ndef do():\n    meow.play()\n```\n\n#### `nyan.music.play()`\nTo play an mp3 file in the background, use `nyan.music.play()`, like this\n```python\nnyan.music.play('William Tell Overture Finale.mp3', loop=True)\n```\n\n#### `await nyan.music.play_until_done()`\nThis is the same as `nyan.music.play()`, but waits for the music to finish before continuing\n```python\n@nyan.when_program_starts\nasync def do():\n    await nyan.music.play_until_done('William Tell Overture Finale.mp3')\n    print('music has ended')\n```\n\n#### `nyan.music.pause()`\nPauses the currently playing music\n```python\n@nyan.when_program_starts\nasync def do():\n    nyan.music.play('William Tell Overture Finale.mp3')\n    await nyan.sleep(seconds=5)\n    nyan.music.pause()\n```\n\n#### `nyan.music.unpause()`\nResumes the paused music\n```python\n@nyan.when_program_starts\nasync def do():\n    nyan.music.play('William Tell Overture Finale.mp3')\n    await nyan.sleep(seconds=5)\n    nyan.music.pause()\n    await nyan.sleep(seconds=5)\n    nyan.music.unpause()\n```\n\n#### `nyan.music.stop()`\nStops the currently playing music\n```python\n@nyan.when_program_starts\nasync def do():\n    nyan.music.play('William Tell Overture Finale.mp3')\n    await nyan.sleep(seconds=5)\n    nyan.music.stop()\n```\n\n#### `nyan.music.volume`\nYou can use `nyan.music.volume` to get or set the current volume which ranges from 0 to 100. The default is 100\n```python\n@nyan.when_program_starts\nasync def do():\n    nyan.music.play('William Tell Overture Finale.mp3')\n    await nyan.sleep(seconds=5)\n    nyan.music.volume = 70\n```\n\n## Other Useful Commands\n\n#### `nyan.screen`\n\nThe way to get information about the screen. `nyan.screen` has these properties:\n\n- `nyan.screen.width` - Defaults to 800 (pixels total). Changing this will change the screen's size.\n- `nyan.screen.height` - Defaults to 600 (pixels total). Changing this will change the screen's size.\n- `nyan.screen.left` - The `x` coordinate for the left edge of the screen.\n- `nyan.screen.right` - The `x` coordinate for the right edge of the screen.\n- `nyan.screen.top` - The `y` coordinate for the top of the screen.\n- `nyan.screen.bottom` - The `y` coordinate for the bottom of the screen.\n\n#### `nyan.get_sprites()`\n\nReturns a list of all the sprites (images, shapes, text) in the program. Takes an optional tag parameter that can be used to get all sprites that have a give tag.\n\n#### `nyan.random_number()`\n\nA function that makes random numbers.\n\nIf two whole numbers are given, `nyan.random_number()` will give a whole number back:\n\n```python\nnyan.random_number(lowest=0, highest=100)\n\n# example return value: 42\n```\n(You can also do `nyan.random_number(0, 100)` without `lowest` and `highest`.)\n\nIf non-whole numbers are given, non-whole numbers are given back:\n\n```python\nnyan.random_number(0, 1.0)\n# example return value: 0.84\n```\n\n`nyan.random_number()` is also inclusive, which means `nyan.random_number(0,1)` will return `0` and `1`.\n\n#### `nyan.random_color()`\n\nReturns a random RGB color, including white and black.\n\n```python\nnyan.random_color()\n# example return value: (201, 17, 142)\n```\n\nEach value varies from 0 to 255.\n\n#### `nyan.random_position()`\n\nReturns a random position on the screen. A position object has an `x` and `y` component.\n\n```python\ntext = nyan.text('WOO')\n@nyan.repeat_forever\ndef do():\n    text.go_to(nyan.random_position())\n\n    # the above is equivalent to:\n    position = nyan.random_position()\n    text.x = position.x\n    text.y = position.y\n```\n\n#### `nyan.new_timer()`\nCreates a timer. Useful for keeping track of time and for doing animations.\n\n```python\ntimer = new_timer()\n```\n\nOnce a timer is created, it will have the following commands and properties:\n\n- **`timer.reset()`** \u2014 resets the timer\n- **`timer.seconds`** \u2014 time elapsed in seconds since creation or last reset\n- **`timer.milliseconds`** \u2014 time elapsed in milliseconds since creation or last reset\n\n## Packaging Nyan Programs\nNyan comes with a packager that can be used to create stand-alone executables that can be shared with other people without them having to install Python on their computers. To use it, run the following in your terminal\n\n```\nnyan-packager python_file\n```\n\nThis will create an executable file with other stuff in a dist folder inside your project. You can change the icon of the executable with `-icon icon_file` option.\n\n## What's with all this `async`/`await` stuff? Is this Python?\n\nYes, this is Python! Python added `async` and `await` as special keywords in Python 3.7. It's part of the [asyncio module](https://docs.python.org/3/library/asyncio.html).\n\nUsing async functions means we can use the `await nyan.sleep()` function, which makes some code a lot simpler and appear to run in-parallel, which new programmers find intuitive.\n\n```python\nimport nyan\n\ncat = nyan.new_text('=^.^=')\n\n# this code block uses async so it can use the 'await nyan.sleep()' function\n@nyan.repeat_forever\nasync def change_bg():\n    nyan.set_backdrop('pink')\n    await nyan.sleep(seconds=1)\n\n    nyan.set_backdrop('purple')\n    await nyan.sleep(seconds=1)\n\n    nyan.set_backdrop('light blue')\n    await nyan.sleep(seconds=1)\n\n# this code block doesn't need async because it doesn't have `await nyan.sleep()`\n@nyan.repeat_forever\ndef do():\n    cat.turn(1)\n\nnyan.start_program()\n```\n\nIn the above program, the backdrop will change and the cat will appear to turn at the same time even though the code is running single-threaded.\n\nThe `async` keyword isn't necessary to write unless you want to use `await` functions. If you try to use an `await` command inside a non-async function, Python will show you an error like this:\n\n```  \n  File \"example.py\", line 31\n    await nyan.sleep(seconds=1)\n    ^\nSyntaxError: 'await' outside async function\n```\nTo fix that error, just put `async` before `def`.\n\nIf you don't understand any of this, it's generally safe to just include `async` before `def`.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ducaale/nyan", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nyan", "package_url": "https://pypi.org/project/nyan/", "platform": "", "project_url": "https://pypi.org/project/nyan/", "project_urls": {"Homepage": "https://github.com/ducaale/nyan", "Repository": "https://github.com/ducaale/nyan"}, "release_url": "https://pypi.org/project/nyan/0.7.1/", "requires_dist": ["pygame (>=1.9.6,<2.0.0)", "pytest (>=5.2,<6.0)", "pyinstaller (>=3.6,<4.0)", "pefile (>=2019.4.18,<2020.0.0); sys_platform == \"win32\"", "pywin32 (>=227,<228); sys_platform == \"win32\""], "requires_python": ">=3.7,<4.0", "summary": "The easiest way to start coding games and graphics projects in Python", "version": "0.7.1"}, "last_serial": 7048604, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d5edd07494d6c025d809a378affc2e7e", "sha256": "da3bd0f700150bd0aa50988f665f643fb2ad0bfcc495af3757e9711419f83c2c"}, "downloads": -1, "filename": "nyan-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d5edd07494d6c025d809a378affc2e7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 16020, "upload_time": "2020-03-29T12:54:46", "upload_time_iso_8601": "2020-03-29T12:54:46.435340Z", "url": "https://files.pythonhosted.org/packages/13/58/7f750b23e7a5e5a0e92176f7c800975449b9e3c40adc20bfee1f9a6efebd/nyan-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1b4e2aad5809642bf7ff3bc61ec8e9d4", "sha256": "1dfa8d8ef03f5cd844ff07066aaf08ce81fe365c67dc5713c936fc5a14f13791"}, "downloads": -1, "filename": "nyan-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1b4e2aad5809642bf7ff3bc61ec8e9d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 11776, "upload_time": "2020-03-29T12:54:48", "upload_time_iso_8601": "2020-03-29T12:54:48.604056Z", "url": "https://files.pythonhosted.org/packages/88/a5/65e975818c3cda12fc54434ac1894f6db7f710434ee0c7b57e13f1260c88/nyan-0.1.0.tar.gz"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d68fd8493c7673dc44baf09de582b1b8", "sha256": "08516cb94ef570447cccde43e195e8fda3c337e1a3503893cd3842c0e95bd55c"}, "downloads": -1, "filename": "nyan-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d68fd8493c7673dc44baf09de582b1b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 16015, "upload_time": "2020-03-29T14:38:44", "upload_time_iso_8601": "2020-03-29T14:38:44.758916Z", "url": "https://files.pythonhosted.org/packages/96/a8/74227caefbc7c2fd4c78fbfa62ca2a7ea46c8af3bb307954960fecd59fc7/nyan-0.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "881a72b2028a85f73794b11800aee64c", "sha256": "a0034d2fcba27a9993a492b8b64e1bdd75e209032a89ec4fdc0284d839605f67"}, "downloads": -1, "filename": "nyan-0.1.1.tar.gz", "has_sig": false, "md5_digest": "881a72b2028a85f73794b11800aee64c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 11776, "upload_time": "2020-03-29T14:38:46", "upload_time_iso_8601": "2020-03-29T14:38:46.263946Z", "url": "https://files.pythonhosted.org/packages/34/35/045c8565f25573f2ce0d675a1981ed3bf9c45a39be962c3ac6a47f517b56/nyan-0.1.1.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "984245e796713479381a0c6d584dcb62", "sha256": "2c4a4900287a4964dac62baf94f00a69f02310b31724e107cdc7e40c4917ae0f"}, "downloads": -1, "filename": "nyan-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "984245e796713479381a0c6d584dcb62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 17447, "upload_time": "2020-03-29T22:30:13", "upload_time_iso_8601": "2020-03-29T22:30:13.519431Z", "url": "https://files.pythonhosted.org/packages/5c/bd/2e42a5abc43e0e871b8726e90f6d081f77aadab179d26dec4b98259a319f/nyan-0.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3e38042ee76adf1f8510f110a3733e04", "sha256": "9c50563870b40eedeb0171129f2275ca7066e967669198362e0d0ab8a8e5ee66"}, "downloads": -1, "filename": "nyan-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3e38042ee76adf1f8510f110a3733e04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 12827, "upload_time": "2020-03-29T22:30:15", "upload_time_iso_8601": "2020-03-29T22:30:15.059827Z", "url": "https://files.pythonhosted.org/packages/45/fb/62c63ce28403a7f5957cf58d108bd6d8fdd28b9ca2651cebdbfe35a41fb5/nyan-0.2.0.tar.gz"}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4f1cd0cc72c69db2eb0ec4e0da843cdc", "sha256": "dbd1b503de85fe521931f8837d1239ab1e900c6b50475e9efb290bc09a9595b7"}, "downloads": -1, "filename": "nyan-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4f1cd0cc72c69db2eb0ec4e0da843cdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 17483, "upload_time": "2020-03-29T22:47:39", "upload_time_iso_8601": "2020-03-29T22:47:39.860923Z", "url": "https://files.pythonhosted.org/packages/80/4c/0a487fe58353ea4cbd1361b8496a27e9ed10827b8002281fd16a5de398f5/nyan-0.3.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a44b2e5d0ef4695e242d71d8641be047", "sha256": "0e7819edce7dfec3d7b0e707f301ad6b8efc3fa7bfdeba401eece66ce1d1891f"}, "downloads": -1, "filename": "nyan-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a44b2e5d0ef4695e242d71d8641be047", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 12915, "upload_time": "2020-03-29T22:47:40", "upload_time_iso_8601": "2020-03-29T22:47:40.905783Z", "url": "https://files.pythonhosted.org/packages/2a/22/721936e1eb8fc8525af7a45c9cd31e01dea654d786b92b43fd96636c1f48/nyan-0.3.0.tar.gz"}], "0.4.0": [{"comment_text": "", "digests": {"md5": "1d2dc2374d87ed2cfd77f908bb1b8bac", "sha256": "65dd2f9b364fe0e82c5738fee690dfff74e728f40743c27e16ecc6838a25b041"}, "downloads": -1, "filename": "nyan-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1d2dc2374d87ed2cfd77f908bb1b8bac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 17533, "upload_time": "2020-03-30T21:11:41", "upload_time_iso_8601": "2020-03-30T21:11:41.033838Z", "url": "https://files.pythonhosted.org/packages/a6/ce/0a10cb8b48586f8b1ab8df1458e1f9cdfe53025040535cd9f595812a0d32/nyan-0.4.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "158c6a17efab7d642b7e5db21bfc9fa7", "sha256": "2fc54767de7bc9ad27c7dda16a57234dc1636882ea0964129d6aa49b3ace0ff3"}, "downloads": -1, "filename": "nyan-0.4.0.tar.gz", "has_sig": false, "md5_digest": "158c6a17efab7d642b7e5db21bfc9fa7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 12936, "upload_time": "2020-03-30T21:11:42", "upload_time_iso_8601": "2020-03-30T21:11:42.280809Z", "url": "https://files.pythonhosted.org/packages/c2/99/6e0b3c5de36b4abcac9c7599df2f0bfc6c3424f5acf160eff4e1698e8414/nyan-0.4.0.tar.gz"}], "0.5.0": [{"comment_text": "", "digests": {"md5": "8cb83ab7993c879ac6502df5f5fc4a6a", "sha256": "1798076b2fe08104d94799ef1bf6e418ce982cbf2fab233920081a25de2cdd17"}, "downloads": -1, "filename": "nyan-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8cb83ab7993c879ac6502df5f5fc4a6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 17599, "upload_time": "2020-03-31T20:13:32", "upload_time_iso_8601": "2020-03-31T20:13:32.137280Z", "url": "https://files.pythonhosted.org/packages/95/85/22a6cf70d447f8dc6065bca64343752db175210d7ad8e10822b03b67fd48/nyan-0.5.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a1f6207d23f1ead4c955ccaaec584195", "sha256": "129a1e647ddf2b8820e07221253a2f336be56bbb3324568028240aa03421c4b8"}, "downloads": -1, "filename": "nyan-0.5.0.tar.gz", "has_sig": false, "md5_digest": "a1f6207d23f1ead4c955ccaaec584195", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 12994, "upload_time": "2020-03-31T20:13:33", "upload_time_iso_8601": "2020-03-31T20:13:33.236706Z", "url": "https://files.pythonhosted.org/packages/da/11/5b70fa9f76b60eb8a5d4aef6f9c3ac1fa26b733bf05b7ef490fdb1356cf7/nyan-0.5.0.tar.gz"}], "0.6.0": [{"comment_text": "", "digests": {"md5": "c6bb849260d5577c41e7b9bdc3dadef4", "sha256": "88de4d0e4589f9349736b8527fab9e41e8c72d293faa212b26944b7d12f7c168"}, "downloads": -1, "filename": "nyan-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c6bb849260d5577c41e7b9bdc3dadef4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 24013, "upload_time": "2020-04-03T20:26:39", "upload_time_iso_8601": "2020-04-03T20:26:39.697983Z", "url": "https://files.pythonhosted.org/packages/85/7e/350318bba65c31f465117d3e639f15080cc79dddb47673a470cf8cfd3b03/nyan-0.6.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "cc081d4be78b9df248367351303d1786", "sha256": "9b3de0ee465dce884459130a8426af3e49f4bc8879aa586916bf8bd9453926a8"}, "downloads": -1, "filename": "nyan-0.6.0.tar.gz", "has_sig": false, "md5_digest": "cc081d4be78b9df248367351303d1786", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 23480, "upload_time": "2020-04-03T20:26:41", "upload_time_iso_8601": "2020-04-03T20:26:41.556655Z", "url": "https://files.pythonhosted.org/packages/53/3d/55e477a2acd7bcf48d2ec3768ed7b63e00816d7be641648f8fb0711627a3/nyan-0.6.0.tar.gz"}], "0.7.0": [{"comment_text": "", "digests": {"md5": "5cd4bbe6afd6b226df246cf01266235d", "sha256": "7334ad7b4e2342841520bea26a38c29ced1fb1a85bf55f2867658b3289353e25"}, "downloads": -1, "filename": "nyan-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5cd4bbe6afd6b226df246cf01266235d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 24526, "upload_time": "2020-04-04T22:38:01", "upload_time_iso_8601": "2020-04-04T22:38:01.832960Z", "url": "https://files.pythonhosted.org/packages/5b/5e/a251efcda8559d9953254cee9eb72a2525e613680b837c66e0ce5f5c0185/nyan-0.7.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0110c56a1005563471f010499cd54584", "sha256": "75ef52a95133048ce67b6ba5b034889a229db526563c8a6ee0e7f0977f9e208e"}, "downloads": -1, "filename": "nyan-0.7.0.tar.gz", "has_sig": false, "md5_digest": "0110c56a1005563471f010499cd54584", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 24174, "upload_time": "2020-04-04T22:38:03", "upload_time_iso_8601": "2020-04-04T22:38:03.479060Z", "url": "https://files.pythonhosted.org/packages/13/5a/b24c4833b5d40f3fa8b4c4d734cf94cf13dd62ee6dd790120206a50428cf/nyan-0.7.0.tar.gz"}], "0.7.1": [{"comment_text": "", "digests": {"md5": "70646e85a6ca565b6a00dcef9e4d4033", "sha256": "a80ad79ab199c75a482e07c413ee0054cc3c756f315f2782e38b844f177cf3b4"}, "downloads": -1, "filename": "nyan-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "70646e85a6ca565b6a00dcef9e4d4033", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 24579, "upload_time": "2020-04-18T15:25:14", "upload_time_iso_8601": "2020-04-18T15:25:14.562982Z", "url": "https://files.pythonhosted.org/packages/8c/0b/175cd7db36284a5d35d4e908ff56bcd200c95d0eb97f82f0983abe2f9aff/nyan-0.7.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "358d98c15b32e86eab01b4e9ad4edb3b", "sha256": "9e57bcfd63488fff970fb7187d3fb4e4f8b94a1f2eb3e030ed67d1d744344a2d"}, "downloads": -1, "filename": "nyan-0.7.1.tar.gz", "has_sig": false, "md5_digest": "358d98c15b32e86eab01b4e9ad4edb3b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 24234, "upload_time": "2020-04-18T15:25:16", "upload_time_iso_8601": "2020-04-18T15:25:16.113188Z", "url": "https://files.pythonhosted.org/packages/b0/ee/d65171a9a43a73316589796e5bfec6c14ccaee37072b2e1d8f1e97ccc2b8/nyan-0.7.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "70646e85a6ca565b6a00dcef9e4d4033", "sha256": "a80ad79ab199c75a482e07c413ee0054cc3c756f315f2782e38b844f177cf3b4"}, "downloads": -1, "filename": "nyan-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "70646e85a6ca565b6a00dcef9e4d4033", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 24579, "upload_time": "2020-04-18T15:25:14", "upload_time_iso_8601": "2020-04-18T15:25:14.562982Z", "url": "https://files.pythonhosted.org/packages/8c/0b/175cd7db36284a5d35d4e908ff56bcd200c95d0eb97f82f0983abe2f9aff/nyan-0.7.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "358d98c15b32e86eab01b4e9ad4edb3b", "sha256": "9e57bcfd63488fff970fb7187d3fb4e4f8b94a1f2eb3e030ed67d1d744344a2d"}, "downloads": -1, "filename": "nyan-0.7.1.tar.gz", "has_sig": false, "md5_digest": "358d98c15b32e86eab01b4e9ad4edb3b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 24234, "upload_time": "2020-04-18T15:25:16", "upload_time_iso_8601": "2020-04-18T15:25:16.113188Z", "url": "https://files.pythonhosted.org/packages/b0/ee/d65171a9a43a73316589796e5bfec6c14ccaee37072b2e1d8f1e97ccc2b8/nyan-0.7.1.tar.gz"}]}