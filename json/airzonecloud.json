{"info": {"author": "max13fr", "author_email": "max13fr@yozo.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Airzone Cloud\n\n- [Airzone Cloud](#airzone-cloud)\n  - [Presentation](#presentation)\n    - [Abstract](#abstract)\n    - [Module classes](#module-classes)\n  - [Usage](#usage)\n    - [Install](#install)\n    - [Start api](#start-api)\n    - [Get device status](#get-device-status)\n    - [Get system status](#get-system-status)\n    - [Get all zones status (on all devices / systems)](#get-all-zones-status-on-all-devices--systems)\n    - [Control a specific zone](#control-a-specific-zone)\n    - [HVAC mode](#hvac-mode)\n      - [Available modes](#available-modes)\n      - [Set HVAC mode on a system (and its sub-zones)](#set-hvac-mode-on-a-system-and-its-sub-zones)\n  - [API doc](#api-doc)\n\n## Presentation\n\n### Abstract\n\nAllow to communicate easily with Airzone Cloud to retrieve information or to send commands (on/off, temperature, HVAC mode, ...)\n\n### Module classes\n\n* **AirzoneCloud** : represent your AirzoneCloud account. Contains a list of your **devices** :\n  * **Device** : represent one of your Airzone webserver registered. Contains a list of its **systems** :\n    * **System** : represent your climate equipment (Mitsubishi, Daikin, ...). Contains a list of its **zones** :\n      * **Zone** : represent a zone to control\n\n## Usage\n\n### Install\n\n```bash\npip3 install AirzoneCloud\n```\n\n### Start api\n\n```python\nfrom AirzoneCloud import AirzoneCloud\napi = AirzoneCloud(\"email@domain.com\", \"password\")\n```\n\n### Get device status\n\n```python\nfor device in api.devices:\n    print(\n        \"Device name={}, status={}, id={}, mac={}, pin={}\".format(\n            device.name, device.status, device.id, device.mac, device.pin\n        )\n    )\n```\n\nOutput :\n\n<pre>\nDevice name=Home, status=activated, id=5bc8ae0c4149526af90c0000, mac=AA:BB:CC:DD:EE:FF, pin=1234\n</pre>\n\n### Get system status\n\n```python\nfor system in api.device[0].systems:\n    print(\n        \"System name={}, mode={}, eco={}, velocity={}, airflow={}\".format(\n            self.name,\n            self.mode,\n            self.eco,\n            self.velocity,\n            self.airflow,\n        )\n    )\n```\n\nOutput :\n\n<pre>\nSystem name=Home, mode=heat-both, eco=eco-a, velocity=None, airflow=None\n</pre>\n\n### Get all zones status (on all devices / systems)\n\n```python\nfor zone in api.all_zones:\n    print(\n        \"Zone name={}, is_on={}, mode={}, current_temperature={}, target_temperature={}\".format(\n            zone.name,\n            zone.is_on,\n            zone.mode_name,\n            zone.current_temperature,\n            zone.target_temperature,\n        )\n    )\n```\n\nOutput :\n\n<pre>\nZone name=Baby bedroom, is_on=False, mode=heat-both, current_temperature=20.4, target_temperature=19.5\nZone name=Parents bedroom, is_on=False, mode=heat-both, current_temperature=21.1, target_temperature=17.0\nZone name=Living room, is_on=True, mode=heat-both, current_temperature=21.4, target_temperature=21.5\nZone name=Kitchen, is_on=False, mode=heat-both, current_temperature=21.2, target_temperature=19.0\n</pre>\n\n### Control a specific zone\n\n```python\nzone = api.all_zones[2]\nprint(zone)\n\n# start zone\nzone.turn_on()\n\n# set temperature\nzone.set_temperature(18.5)\n\nprint(zone)\n```\n\nOutput :\n\n<pre>\nZone(name=Living room, is_on=False, mode=heat-both, current_temp=21.6, target_temp=21.0)\nZone(name=Living room, is_on=True, mode=heat-both, current_temp=21.6, target_temp=18.5)\n</pre>\n\n### HVAC mode\n\n#### Available modes\n\n* **stop** : Stop\n* **ventilate** : Ventilate\n* **dehumidify** : Dry\n* **heat-air** : Air heating\n* **heat-radiant** : Radiant heating\n* **heat-both** : Combined heating\n* **cool-air** : Air cooling\n* **cool-radiant** : Radiant cooling\n* **cool-both** : Combined cooling\n\n#### Set HVAC mode on a system (and its sub-zones)\n\n```python\nsystem = api.devices[0].systems[0]\nprint(system)\n\n# set mode to heat-both\nsystem.set_mode(\"heat-both\")\n\nprint(system)\n```\n\nOutput :\n\n<pre>\nSystem(name=Home, mode=stop, eco=eco-a, velocity=None, airflow=None)\nSystem(name=Home, mode=heat-both, eco=eco-a, velocity=None, airflow=None)\n</pre>\n\n## API doc\n\n[API full doc](API.md)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/max13fr/AirzoneCloud", "keywords": "airzone,airzonecloud,api", "license": "", "maintainer": "", "maintainer_email": "", "name": "AirzoneCloud", "package_url": "https://pypi.org/project/AirzoneCloud/", "platform": "", "project_url": "https://pypi.org/project/AirzoneCloud/", "project_urls": {"Homepage": "https://github.com/max13fr/AirzoneCloud"}, "release_url": "https://pypi.org/project/AirzoneCloud/0.1.0/", "requires_dist": ["requests"], "requires_python": ">=3.5", "summary": "Python3 library for Airzone Cloud API", "version": "0.1.0"}, "last_serial": 7054608, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "29dac5284c8d182b9563e68bc3267f0b", "sha256": "a8481b3eb18bec60ed639b3413ce34a0e07cee89a8b0c670c65dd824d489f29c"}, "downloads": -1, "filename": "AirzoneCloud-0.0.1.tar.gz", "has_sig": false, "md5_digest": "29dac5284c8d182b9563e68bc3267f0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6267, "upload_time": "2020-04-18T17:26:35", "upload_time_iso_8601": "2020-04-18T17:26:35.151193Z", "url": "https://files.pythonhosted.org/packages/da/b2/6fa2fbf436f7264396e7d58254ce945e4ac809ce141f850fa4833c8796a0/AirzoneCloud-0.0.1.tar.gz"}], "0.1.0": [{"comment_text": "", "digests": {"md5": "abc4cbcaeeaf9fe923190345bc67543d", "sha256": "710752cab25bb17fa7657c2bb4920434591213ffe7080670bd3ca38340b560ca"}, "downloads": -1, "filename": "AirzoneCloud-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "abc4cbcaeeaf9fe923190345bc67543d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12524, "upload_time": "2020-04-19T15:53:11", "upload_time_iso_8601": "2020-04-19T15:53:11.244126Z", "url": "https://files.pythonhosted.org/packages/09/a3/bfbdc0332cbc365b5c0e25f845ff9e1b3ccb45f77cca88b7e33e1ed86637/AirzoneCloud-0.1.0-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "abc4cbcaeeaf9fe923190345bc67543d", "sha256": "710752cab25bb17fa7657c2bb4920434591213ffe7080670bd3ca38340b560ca"}, "downloads": -1, "filename": "AirzoneCloud-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "abc4cbcaeeaf9fe923190345bc67543d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12524, "upload_time": "2020-04-19T15:53:11", "upload_time_iso_8601": "2020-04-19T15:53:11.244126Z", "url": "https://files.pythonhosted.org/packages/09/a3/bfbdc0332cbc365b5c0e25f845ff9e1b3ccb45f77cca88b7e33e1ed86637/AirzoneCloud-0.1.0-py3-none-any.whl"}]}