{"info": {"author": "Gianluca Gippetto", "author_email": "gianluca.gippetto@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "=====\ncloup\n=====\n\n.. image:: https://img.shields.io/pypi/v/cloup.svg\n    :alt: PyPI Package\n    :target: https://pypi.python.org/pypi/cloup\n\n.. image:: https://img.shields.io/travis/janLuke/cloup.svg\n    :alt: Travis-CI Build Status\n    :target: https://travis-ci.org/janLuke/cloup?branch=master\n\n.. image:: https://codecov.io/github/janLuke/cloup/coverage.svg?branch=master\n    :alt: Coverage Status\n    :target: https://codecov.io/github/janLuke/cloup?branch=master\n\ncloup (click + group) extends `pallets/click <https://github.com/pallets/click>`_\nto add option groups and the possibility of organizing the subcommands of a\n``Group`` in multiple help sections.\n\nCurrently, this package only affects how the command help is formatted, it doesn't\nallow to specify constraints on option groups. Look at\n`click-option-group <https://github.com/click-contrib/click-option-group>`_ if\nyou want that. Nonetheless, constraints would be a very easy addition and may be\nadded soon.\n\n.. contents:: **Table of contents**\n  :local:\n\nInstallation\n============\nTo install the last release::\n\n    pip install cloup\n\nVersioning\n----------\ncloup uses **semantic versioning**. I'll release v1.0 when I'm\nsatisfied with API and features but cloup is already usable, just\nmake sure you specify a compatible version number in your list\nof requirements if you decide to use it, e.g.::\n\n    cloup==0.3.*\n\nPatch releases are guaranteed to be backwards compatible (even before v1.0).\n\nOption groups\n=============\nYou can define option groups in two ways or \"styles\": I'll call them \"nested style\" and \"flat style\".\nThe full code for the examples shown below can also be found in `<examples/option_groups_example.py>`_.\n\nNested style (recommended)\n--------------------------\nIn \"nested style\" you make use of the decorator ``option_group``.\nThis decorator is \"overloaded\" with two signatures:\n\n.. code-block:: python\n\n    @option_group(name, *options, help=None)    # help as keyword argument\n    @option_group(name, help, *options)         # help as 2nd positional argument\n\nI introduced the 2nd signature because I think it looks and feels nicer when you\nhave to provide a long help that takes multiple lines; also, it reflects how to\nhelp is actually formatted.\n\nHere's an example:\n\n.. code-block:: python\n\n    import cloup\n    from cloup import option_group, option\n\n    @cloup.command('clouptest')\n    @option_group('Input options',\n        \"This is a very long description of the option group. I don't think this is \"\n        \"needed very often; still, if you want to provide it, you can pass it as 2nd \"\n        \"positional argument or as keyword argument 'help' after all options.\",\n        option('-o', '--one', help='1st input option'),\n        option('--two', help='2nd input option'),\n        option('--three', help='3rd input option')\n    )\n    @option_group('Output options',\n        option('--four / --no-four', help='1st output option'),\n        option('--five', help='2nd output option'),\n        option('--six', help='3rd output option'),\n        # help='You can also pass the help as keyword argument after the options.'\n    )\n    @option('--seven', help='first uncategorized option', type=click.Choice('yes no ask'.split()))\n    @option('--height', help='second uncategorized option')\n    def cli(**kwargs):\n        \"\"\" A CLI that does nothing. \"\"\"\n        print(kwargs)\n\nThe help will be::\n\n    Usage: clouptest [OPTIONS]\n\n      A CLI that does nothing.\n\n    Input options:\n      This is a very long description of the option group. I don't think this is\n      needed very often; still, if you want to provide it, you can pass it as\n      2nd positional argument or as keyword argument 'help' after all options.\n      -o, --one TEXT        1st input option\n      --two TEXT            2nd input option\n      --three TEXT          3rd input option\n\n    Output options:\n      --four / --no-four    1st output option\n      --five TEXT           2nd output option\n      --six TEXT            3rd output option\n\n    Other options:\n      --seven [yes|no|ask]  first uncategorized option\n      --height TEXT         second uncategorized option\n      --help                Show this message and exit.\n\nAs you can see, the columns of all option groups are aligned. If you want to\nformat each option group independently, you can pass ``align_option_groups=False``\nto ``@command()``.\n\nFlat style\n----------\nIn \"flat style\", you first define your option groups and then call the ``option()`` method on them.\n**Don't reuse** OptionGroup objects in multiple commands.\n\n.. code-block:: python\n\n    input_grp = OptionGroup('Input options', help='This is a very useful description of the group')\n    output_grp = OptionGroup('Output options')\n\n    @cloup.command('clouptest', align_option_groups=True)\n    @input_grp.option('-o', '--one', help='1st input option')\n    @input_grp.option('--two', help='2nd input option')\n    @input_grp.option('--three', help='3rd input option')\n    @output_grp.option('--four / --no-four', help='1st output option')\n    @output_grp.option('--five', help='2nd output option')\n    @output_grp.option('--six', help='3rd output option')\n    @option('--seven', help='first uncategorized option', type=click.Choice('yes no ask'.split()))\n    @option('--height', help='second uncategorized option')\n    def cli_flat(**kwargs):\n        \"\"\" A CLI that does nothing. \"\"\"\n        print(kwargs)\n\n\nSubcommand sections\n===================\nSee the full example code `here <examples/git_sections.py>`_.\n\n.. code-block:: python\n\n    # {Definitions of subcommands are omitted}\n\n    @cloup.group('git')\n    def git():\n        return 0\n\n    \"\"\"\n    group.section() creates a new GroupSection object, adds it to \"group\" and returns it.\n\n    In the help, sections are shown in the same order they are added.\n    Commands in each sections are shown in the same order they are listed, unless\n    you pass the argument \"sorted=True\".\n    \"\"\"\n    git.section('Start a working area (see also: git help tutorial)',\n        git_clone,\n        git_init\n    )\n    git.section('Work on the current change (see also: git help everyday)',\n        git_rm,\n        git_sparse_checkout,\n        git_mv\n    )\n\n    # The following commands will be added to the \"default section\" (a sorted GroupSection)\n    git.add_command(cloup.command('fake-2', help='Fake command #2')(f))\n    git.add_command(cloup.command('fake-1', help='Fake command #1')(f))\n\nThe help will be::\n\n    Usage: git [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n      --help  Show this message and exit.\n\n    Start a working area (see also: git help tutorial):\n      clone            Clone a repository into a new directory\n      init             Create an empty Git repository or reinitialize an...\n\n    Work on the current change (see also: git help everyday):\n      rm               Remove files from the working tree and from the index\n      sparse-checkout  Initialize and modify the sparse-checkout\n      mv               Move or rename a file, a directory, or a symlink\n\n    Other commands:\n      fake-1           Fake command #1\n      fake-2           Fake command #2\n\nThough I think using ``_.section()`` is the cleanest way to define sections, there\nare alternatives.\n\nOne is to pass a list of ``GroupSection`` objects to @cloup.group():\n\n.. code-block:: python\n\n    SECTIONS = [\n        GroupSection('Start a working area (see also: git help tutorial)',\n                     git_clone, git_init),\n        GroupSection('Work on the current change (see also: git help everyday)',\n                     git_rm, git_sparse_checkout, git_mv)\n    ]\n\n    @cloup.group('git', sections=SECTIONS)\n    def git():\n        return 0\n\nOthers are:\n\n- ``git.add_section(section)`` to add an existing ``GroupSection`` object\n- ``git.add_command(cmd, name, section, ...)``; the section must NOT contain the command\n- ``@git.command(cmd, name, section, ...)``, specifying ``section``.\n\n**Note:** individual commands don't know the section they belong to.\nNeither ``cloup.Command`` nor ``@cloup.command()`` accept a \"section\" argument.\n\nCredits\n=======\n\nFor implementing option groups, I started from the idea of `@chrisjsewell <https://github.com/chrisjsewell>`_\npresented in `this comment <https://github.com/pallets/click/issues/373#issuecomment-515293746>`_.\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.3.0 (2020-03-26)\n==================\n* Backward incompatible API changes\n\n  - ``option_groups`` decorator now takes options as positional arguments ``*options``;\n  - ``Group.section`` decorator now takes sections as positional arguments ``*sections``;\n  - ``align_sections_help`` was renamed to ``align_sections``;\n  - ``GroupSection.__init__() sorted_`` argument was renamed to ``sorted``.\n\n* Additional signature for ``option_group``: you can pass the ``help`` argument\n  as 2nd positional argument.\n* Aligned option groups (option ``align_option_groups`` with default ``True``).\n* More refactoring and testing.\n\n\n0.2.0 (2020-03-11)\n==================\n\n* Rename CloupCommand and CloupGroup resp. to just Command and Group\n* [Feature] Add possibility of organizing subcommands of a cloup.Group in multiple help sections\n* Various code improvements\n\n\n0.1.0 (2020-02-25)\n==================\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/janLuke/cloup", "keywords": "cloup", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "cloup", "package_url": "https://pypi.org/project/cloup/", "platform": "", "project_url": "https://pypi.org/project/cloup/", "project_urls": {"Homepage": "https://github.com/janLuke/cloup"}, "release_url": "https://pypi.org/project/cloup/0.3.0/", "requires_dist": ["click"], "requires_python": ">=3.5", "summary": "Option groups and subcommand help sections for pallets/click", "version": "0.3.0"}, "last_serial": 6885968, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1c5abc48140a5f260cc0c466405e33f6", "sha256": "99abc2e6ac9c086220834e90712226053193602579843f77f5f4b73ac977c7b6"}, "downloads": -1, "filename": "cloup-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c5abc48140a5f260cc0c466405e33f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 4851, "upload_time": "2020-02-25T18:59:48", "upload_time_iso_8601": "2020-02-25T18:59:48.359592Z", "url": "https://files.pythonhosted.org/packages/ec/be/bd00f0660559072b27661f08d2c91ff8bc475783d8309d260e9ceff1ed25/cloup-0.1.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7f4ff3917e09116d20ebbe3d16a44767", "sha256": "49738816a8fb2045586dfd353d1dccf716c7b716a1409cefd46c44506bb0d061"}, "downloads": -1, "filename": "cloup-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7f4ff3917e09116d20ebbe3d16a44767", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10156, "upload_time": "2020-02-25T18:59:51", "upload_time_iso_8601": "2020-02-25T18:59:51.070780Z", "url": "https://files.pythonhosted.org/packages/70/1e/1c9c6569619fc71130a8a7ed28c30c5e38ef92ff572435b578dabf57ea2c/cloup-0.1.0.tar.gz"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fa8f58fcb4ed86e714789a325d4059e7", "sha256": "27bd7c1e46f440bdedd763700cae6ae96f54b834f022ca0422ef0bf90020f029"}, "downloads": -1, "filename": "cloup-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa8f58fcb4ed86e714789a325d4059e7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 4817, "upload_time": "2020-02-25T19:48:51", "upload_time_iso_8601": "2020-02-25T19:48:51.528827Z", "url": "https://files.pythonhosted.org/packages/45/95/fdc8f2a4a1ab271d4383364cbae030865c5f506902c8db72862e22623304/cloup-0.1.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "ff69cb4f6d715785de144b73e45a0d51", "sha256": "a2a7818dbf06b6f0e8875ba5947ebfe37383aaa893e907afa819ff3fb0d96da4"}, "downloads": -1, "filename": "cloup-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ff69cb4f6d715785de144b73e45a0d51", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10865, "upload_time": "2020-02-25T19:48:52", "upload_time_iso_8601": "2020-02-25T19:48:52.766507Z", "url": "https://files.pythonhosted.org/packages/5d/85/f5db6dbe745e4196c13b65bd791ba75cfdc35c6b388e5f557d30f36441ce/cloup-0.1.1.tar.gz"}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4cbc6872475c96900f5e3f822f8756f3", "sha256": "0ed390af49c2a2a19ada9ca654f22705ed83b25413a55656d16e26e4b4e8d903"}, "downloads": -1, "filename": "cloup-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4cbc6872475c96900f5e3f822f8756f3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 5135, "upload_time": "2020-03-09T17:41:07", "upload_time_iso_8601": "2020-03-09T17:41:07.100819Z", "url": "https://files.pythonhosted.org/packages/8b/2b/1bf9f17c1ca8a704d98feb35c496853268139b17f227f231c6882de95d18/cloup-0.1.2-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8d3a6cfc7e41fc56fa268facdfea3116", "sha256": "5b107bd821bf39cc4156cb9362ef39d92ef0528a781a5d045609b676cea4bff8"}, "downloads": -1, "filename": "cloup-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8d3a6cfc7e41fc56fa268facdfea3116", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11203, "upload_time": "2020-03-09T17:41:08", "upload_time_iso_8601": "2020-03-09T17:41:08.169233Z", "url": "https://files.pythonhosted.org/packages/4e/ca/6875cf2c7301471316149cf08fc4c410c48678b8b82560707a0f27b03cba/cloup-0.1.2.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "dbfd3337bf5d3fd92721ce5c659805e5", "sha256": "105d7cca354037ed891d035a087444e4323bab005d8f796203af144c918139f5"}, "downloads": -1, "filename": "cloup-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dbfd3337bf5d3fd92721ce5c659805e5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8062, "upload_time": "2020-03-11T17:11:11", "upload_time_iso_8601": "2020-03-11T17:11:11.732362Z", "url": "https://files.pythonhosted.org/packages/97/9c/6daad955e91f00ff9a66a35dca829a3850db6eddac573e0ba2135c6e70b1/cloup-0.2.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "6efc67cabc5248b14ecd4074ed3b6c0a", "sha256": "7a3161a17dafa2e4e0fb31075cb0dc0851185f904eab341bd42a867ad1684300"}, "downloads": -1, "filename": "cloup-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6efc67cabc5248b14ecd4074ed3b6c0a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15209, "upload_time": "2020-03-11T17:11:13", "upload_time_iso_8601": "2020-03-11T17:11:13.194860Z", "url": "https://files.pythonhosted.org/packages/2d/45/57ebc256bd1b322a0e48f7b812627fc6ed9ea0ec2fd73a25087b77f0dbd5/cloup-0.2.0.tar.gz"}], "0.3.0": [{"comment_text": "", "digests": {"md5": "cfa3da582ab86b42047e125a2434350c", "sha256": "b6e276566362baa9ce792b68745f82a623787a2354472402fc40652f4ea9279c"}, "downloads": -1, "filename": "cloup-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cfa3da582ab86b42047e125a2434350c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 10168, "upload_time": "2020-03-26T00:46:27", "upload_time_iso_8601": "2020-03-26T00:46:27.179034Z", "url": "https://files.pythonhosted.org/packages/f4/ce/828db4c74210d7fc2b4c1be285df30c28d499bbb33e63207977824d3a39f/cloup-0.3.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d2bb0e363922fb4df3f4369f5cd7fe8b", "sha256": "0e84ab2d99c0652c12ff73179cd1360c43053fc8250b8e494b6f32dab7e9bdbb"}, "downloads": -1, "filename": "cloup-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d2bb0e363922fb4df3f4369f5cd7fe8b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19731, "upload_time": "2020-03-26T00:46:30", "upload_time_iso_8601": "2020-03-26T00:46:30.820983Z", "url": "https://files.pythonhosted.org/packages/68/92/01c67bc3a59cdb600d393245d6d2ca2565c0229efa619a2911cf0416ee0f/cloup-0.3.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfa3da582ab86b42047e125a2434350c", "sha256": "b6e276566362baa9ce792b68745f82a623787a2354472402fc40652f4ea9279c"}, "downloads": -1, "filename": "cloup-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cfa3da582ab86b42047e125a2434350c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 10168, "upload_time": "2020-03-26T00:46:27", "upload_time_iso_8601": "2020-03-26T00:46:27.179034Z", "url": "https://files.pythonhosted.org/packages/f4/ce/828db4c74210d7fc2b4c1be285df30c28d499bbb33e63207977824d3a39f/cloup-0.3.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d2bb0e363922fb4df3f4369f5cd7fe8b", "sha256": "0e84ab2d99c0652c12ff73179cd1360c43053fc8250b8e494b6f32dab7e9bdbb"}, "downloads": -1, "filename": "cloup-0.3.0.tar.gz", "has_sig": false, "md5_digest": "d2bb0e363922fb4df3f4369f5cd7fe8b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19731, "upload_time": "2020-03-26T00:46:30", "upload_time_iso_8601": "2020-03-26T00:46:30.820983Z", "url": "https://files.pythonhosted.org/packages/68/92/01c67bc3a59cdb600d393245d6d2ca2565c0229efa619a2911cf0416ee0f/cloup-0.3.0.tar.gz"}]}