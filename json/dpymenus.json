{"info": {"author": "Rob Wagner", "author_email": "rob.wagner@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.8", "Topic :: Communications :: Chat", "Typing :: Typed"], "description": "[![PyPI version](https://badge.fury.io/py/dpymenus.svg)](https://badge.fury.io/py/dpymenus)\n\n# Discord Menus\n\n`dpymenus` is an add-on for the `discord.py` library that lets you quickly build stateful\nmenus that respond to chat input within the Discord client.\n\n+ [Installation](#installation)\n+ [Usage](#usage)\n+ [State Fields](#state-fields)\n+ [Generic Input Matching](#generic-input-matching)\n+ [Reaction Buttons](#reaction-buttons)\n+ [Examples](#examples)\n\n### Installation\n`pip install dpymenus`\n\n### Usage\nFirst, you must build a list of Page objects. Pages extend discord.py\nEmbed objects, so you construct it the exact same way, but you add a `func` paramater.\n\nAs an example:\n\n    new_page1 = Page(title='First Page', description='This is a test.', func=<FUNCTION_REFERENCE>)\n    new_page2 = Page(title='Second Page', description='This is also a test.')\n\nThe `func` should point to a function which will be called when the page is opened. This is\nwhere you do validation and handle user input.\n\nThen you can create your menu object *(it must take the command Context as its first param)*:\n\n    menu = Menu(ctx, pages=[new_page, new_page2])\n\nLastly, call the `run()` method on it:\n\n    await menu.run()\n\n...and you're *(mostly)* finished! A menu loop will spawn and handle user input when the command is \ncalled until it times out or is cancelled by the user.\n\nYour function references inside the pages should include a 'final' page where the\nfunction is `None`. When the final page in your pages list is displayed, the menu will call a\nclose method and end the loop.\n\nYour function reference should call the `menu.next()` method whenever it has\nsuccessfully handled input. `next()` also takes 1 optional argument: \n\n`name`: jumps to a specific page by its function reference name. Useful for non-linear menus.\n\nYou denote a final page, or 'ending' to the menu, by not supplying an empty `func` parameter *(or passing `None`)*.\n\n### State Fields\nIn addition to standard menu setup, optional `state_fields` can be defined for variables or objects you\nwant to pass around in page functions.\n\nState fields should be defined in a dictionary:\n\n    state_fields = {'username': None, 'favorite_color': None}\n\n...and then passed into your menu on initialization:\n\n    menu = Menu(ctx, pages, state_fields)\n\nYou can then access these like any objects attributes *(ie. `x = menu.state_fields['value']`)*.\n\n*As it is simply a dictionary, you can set more than simple input strings. For instance,\ntransferring objects across functions by setting the value to an object. Ideally, the menu \nobject should contain all your state until it is ready to be processed. This also simplifies\nyour code by limiting the amount of parameters functions need to accept when handling\nmultiple objects related to a single menu.*\n\n### Generic Input Matching\nThe Menu class contains several generic values ready for matching against user input. These values\nare generally universal, but should you wish to override them with your own values, there is a \nclass method called `override_generic_values(value_type, replacement)` that can be called anywhere\nin your code to replace them completely.\n\n`value_type` is one of three strings: `'confirm'`, `'deny'`, or `'quit'`.\n\n`replacement` is a tuple of strings containing your new values.\n\nThe defaults are:\n```python\ngeneric_confirm = ('y', 'yes', 'ok', 'k', 'kk', 'ready', 'rdy', 'r', 'confirm', 'okay')\ngeneric_deny = ('n', 'no', 'deny', 'negative', 'back', 'return')\ngeneric_quit = ('e', 'exit', 'q', 'quit', 'stop', 'x', 'cancel', 'c')\n```\n\n### Reaction Buttons\nIf you are interested in using emoji-based reaction buttons on your\nmenu instead of text, they are easy to plug in. Each Page object can\nbe passed a list of emojis with the `buttons` parameter.\n\nHere are some examples of how to acquire emojis in discord.py:\n```python\nbtn1 = client.get_emoji(3487239849812123)  # guild emoji\nbtn2 = discord.utils.get(ctx.guild.emojis, name='example')  # guild emoji\nbtn3 = '<:example2:35434643573451>'  # guild emoji\nbtn4 = '\\N{SNAKE}'  # unicode emoji as text\nbtn5 = '\\U00002714'  # unicode emoji codepoint :heavy_check_mark:\n```\n\n### Examples\nA simple, linear cog that demonstrates a text-based menu.\n```python\nfrom discord.ext import commands\nfrom discord.colour import Colour\n\nfrom dpymenus.menu import Menu\nfrom dpymenus.page import Page\n\n\nclass Ping(commands.Cog):\n    def __init__(self, client: commands.Bot):\n        self.client = client\n\n    @commands.command()\n    async def ping(self, ctx: commands.Context) -> None:\n        confirm_page = Page(title=f'Ping Menu', color=Colour.red(), func=self.confirm,\n                            description=f'Are you absolutely sure you want to send a ping command?\\n\\n'\n                                          'Type `yes` if you are sure.\\nType `quit` to cancel this menu.')\n\n        complete_page = Page(title='Ping Menu', color=Colour.green(),\n                            description='Pong!')\n\n        menu = Menu(ctx, pages=[confirm_page, complete_page])\n        await menu.run()\n\n    @staticmethod\n    async def confirm(m: Menu) -> None:\n        if m.input.content in m.generic_confirm:\n            await m.next()\n\n\ndef setup(client: commands.Bot):\n    client.add_cog(Ping(client))\n```\nA simple, non-linear cog that demonstrates a reactive button-based menu.\n```python\nimport discord.utils\nfrom discord.colour import Colour\nfrom discord.ext import commands\nfrom dpymenus.menu import Menu\nfrom dpymenus.page import Page\n\n\nclass ButtonsCog(commands.Cog):\n    def __init__(self, client: commands.Bot):\n        self.client = client\n\n@commands.command()\nasync def buttons(self, ctx: commands.Context) -> None:\n    # if you copy this example, you will need to change these custom guild emoji lines\n    btn1 = self.client.get_emoji(552018703357837312)  # guild emoji :mana:\n    btn2 = discord.utils.get(ctx.guild.emojis, name='health')  # guild emoji\n    btn3 = '<:low_gold:548414699243307028>'  # guild emoji\n    btn4 = '\\N{SNAKE}'  # unicode emoji as text\n    btn5 = '\\U00002714'  # unicode emoji codepoint :heavy_check_mark:\n\n    confirm_page = Page(title=f'Ping Menu', color=Colour.red(), func=self.confirm, buttons=[btn1, btn2],\n                        description=f'The mana emoji moves on, the health emoji cancels the menu.')\n\n    second_confirm_page = Page(title='So many buttons!', color=Colour.orange(), func=self.confirm_again, buttons=[btn3, btn4, btn5])\n\n    complete_page = Page(title='Ping Menu', color=Colour.green(), description='Pong!')\n\n    menu = Menu(ctx, pages=[confirm_page, second_confirm_page, complete_page])\n    await menu.run()\n\n@staticmethod\nasync def confirm(m: Menu) -> None:\n    if m.input == 'mana':\n        await m.next()\n\n    elif m.input == 'health':\n        await m.cancel()\n\n@staticmethod\nasync def confirm_again(m: Menu) -> None:\n    if m.input == 'low_gold':\n        await m.next()\n\n    elif m.input == '\\N{SNAKE}':\n        await m.next('confirm')  # this will take us back to the previous page\n\n    elif m.input == '\\U00002714':\n        await m.cancel()\n\n\ndef setup(client: commands.Bot):\n    client.add_cog(ButtonsCog(client))\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/robertwayne/dpymenus", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dpymenus", "package_url": "https://pypi.org/project/dpymenus/", "platform": "", "project_url": "https://pypi.org/project/dpymenus/", "project_urls": {"Homepage": "https://github.com/robertwayne/dpymenus"}, "release_url": "https://pypi.org/project/dpymenus/0.1.9/", "requires_dist": null, "requires_python": ">=3.8", "summary": "Dynamic, composable dpymenus for use with the discord.py library.", "version": "0.1.9"}, "last_serial": 6966339, "releases": {"0.1.6": [{"comment_text": "", "digests": {"md5": "10d4438c080bbdc45b9e5b5aef3f4dfc", "sha256": "7ef82bac77bd14ebaeb973d68f7038c78e61544ad69b75a106c5ad78868e38b9"}, "downloads": -1, "filename": "dpymenus-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "10d4438c080bbdc45b9e5b5aef3f4dfc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8632, "upload_time": "2020-04-03T08:56:16", "upload_time_iso_8601": "2020-04-03T08:56:16.458076Z", "url": "https://files.pythonhosted.org/packages/95/e4/8e6c5f8e200b966976f915721299f67d158e0c80a64de182ba0885718671/dpymenus-0.1.6-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1efc4b72e3a261075ac7f987fdf856c0", "sha256": "a31a13e30342b4d8bac19d473158d91cb4b38ebc6b8c90ecbb69c4aa8702e246"}, "downloads": -1, "filename": "dpymenus-0.1.6.tar.gz", "has_sig": false, "md5_digest": "1efc4b72e3a261075ac7f987fdf856c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 7378, "upload_time": "2020-04-03T08:56:17", "upload_time_iso_8601": "2020-04-03T08:56:17.792055Z", "url": "https://files.pythonhosted.org/packages/35/4c/22a24fb9b8371a4b37e617272babecc9385c3f6ba3757aa6ee7e4db4fa4a/dpymenus-0.1.6.tar.gz"}], "0.1.7": [{"comment_text": "", "digests": {"md5": "ac44313148a13c381133f80aa2559f7a", "sha256": "4347513cc0f67eb534c93651efa39c8df792ddff75877be1ce89c84f7ca2509e"}, "downloads": -1, "filename": "dpymenus-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ac44313148a13c381133f80aa2559f7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8719, "upload_time": "2020-04-03T23:06:40", "upload_time_iso_8601": "2020-04-03T23:06:40.319202Z", "url": "https://files.pythonhosted.org/packages/9c/ff/9cbe008393b2745c3a79aa2ce612d1688f80ee4944b6e5fdf85e6b7878a8/dpymenus-0.1.7-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8464eaf2cce3115700c0aa8271f85afa", "sha256": "7fa951ae58cb29334be811786468b0ab3859135425ba16629f7aeebe05c2f222"}, "downloads": -1, "filename": "dpymenus-0.1.7.tar.gz", "has_sig": false, "md5_digest": "8464eaf2cce3115700c0aa8271f85afa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 7491, "upload_time": "2020-04-03T23:06:41", "upload_time_iso_8601": "2020-04-03T23:06:41.603401Z", "url": "https://files.pythonhosted.org/packages/3b/b2/0239b91f07076f24221b6112caa53e768d953c0ecb142adbe8c2eb1c1e8c/dpymenus-0.1.7.tar.gz"}], "0.1.8": [{"comment_text": "", "digests": {"md5": "3c29f4a302ea0db89cdcbc29ad8609dd", "sha256": "776f9b15fc0192df4c5d107f08afb251150ca9f84ebe865568384b656664edc3"}, "downloads": -1, "filename": "dpymenus-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "3c29f4a302ea0db89cdcbc29ad8609dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 8476, "upload_time": "2020-04-06T21:24:01", "upload_time_iso_8601": "2020-04-06T21:24:01.463038Z", "url": "https://files.pythonhosted.org/packages/69/ad/decefb7fb4f7856d98d02358ef4adc8fb8d55fc8efbfd15d7662417989f3/dpymenus-0.1.8-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "654968ffae4ce25caf0e86881fff8ef8", "sha256": "b4c3110889cf968aa15111cbebd88fbb8659dc394bf30d1ef5059a1bb840cf25"}, "downloads": -1, "filename": "dpymenus-0.1.8.tar.gz", "has_sig": false, "md5_digest": "654968ffae4ce25caf0e86881fff8ef8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 7315, "upload_time": "2020-04-06T21:24:02", "upload_time_iso_8601": "2020-04-06T21:24:02.542546Z", "url": "https://files.pythonhosted.org/packages/74/09/448b2d6f0bcb529fa4eb868c8f9701411e2dd1c9dc018efe1be1c495cf6b/dpymenus-0.1.8.tar.gz"}], "0.1.9": [{"comment_text": "", "digests": {"md5": "c38bfcadd4478f617f44139a23f1893e", "sha256": "9d8036af0b6dedc67449c583f9b65deec72614e0df6e78e85111a83b4528dc34"}, "downloads": -1, "filename": "dpymenus-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "c38bfcadd4478f617f44139a23f1893e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 9395, "upload_time": "2020-04-07T04:04:07", "upload_time_iso_8601": "2020-04-07T04:04:07.816125Z", "url": "https://files.pythonhosted.org/packages/23/1f/900d87f8b3bfca71c93d0a9735bf3862e05af72e3a112c961739ac1d518e/dpymenus-0.1.9-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "33f0e56aca454f057b399166d1634685", "sha256": "69b3e3061b8cf4f0f6c7c2f1a0b559ec8914393408fee3bb2a81780fd587a983"}, "downloads": -1, "filename": "dpymenus-0.1.9.tar.gz", "has_sig": false, "md5_digest": "33f0e56aca454f057b399166d1634685", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 8616, "upload_time": "2020-04-07T04:04:09", "upload_time_iso_8601": "2020-04-07T04:04:09.249465Z", "url": "https://files.pythonhosted.org/packages/34/c8/1fc9e24e8fa70c43e6f7c8d146526e68eb7936676ea38a03c96a47c7362f/dpymenus-0.1.9.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "c38bfcadd4478f617f44139a23f1893e", "sha256": "9d8036af0b6dedc67449c583f9b65deec72614e0df6e78e85111a83b4528dc34"}, "downloads": -1, "filename": "dpymenus-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "c38bfcadd4478f617f44139a23f1893e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 9395, "upload_time": "2020-04-07T04:04:07", "upload_time_iso_8601": "2020-04-07T04:04:07.816125Z", "url": "https://files.pythonhosted.org/packages/23/1f/900d87f8b3bfca71c93d0a9735bf3862e05af72e3a112c961739ac1d518e/dpymenus-0.1.9-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "33f0e56aca454f057b399166d1634685", "sha256": "69b3e3061b8cf4f0f6c7c2f1a0b559ec8914393408fee3bb2a81780fd587a983"}, "downloads": -1, "filename": "dpymenus-0.1.9.tar.gz", "has_sig": false, "md5_digest": "33f0e56aca454f057b399166d1634685", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 8616, "upload_time": "2020-04-07T04:04:09", "upload_time_iso_8601": "2020-04-07T04:04:09.249465Z", "url": "https://files.pythonhosted.org/packages/34/c8/1fc9e24e8fa70c43e6f7c8d146526e68eb7936676ea38a03c96a47c7362f/dpymenus-0.1.9.tar.gz"}]}