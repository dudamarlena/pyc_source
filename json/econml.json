{"info": {"author": "Microsoft Corporation", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "[![Build Status](https://dev.azure.com/ms/EconML/_apis/build/status/Microsoft.EconML?branchName=master)](https://dev.azure.com/ms/EconML/_build/latest?definitionId=49&branchName=master)\n[![PyPI version](https://img.shields.io/pypi/v/econml.svg)](https://pypi.org/project/econml/)\n[![PyPI wheel](https://img.shields.io/pypi/wheel/econml.svg)](https://pypi.org/project/econml/)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/econml.svg)](https://pypi.org/project/econml/)\n\n\n\n<h1><img src=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/MSR-ALICE-HeaderGraphic-1920x720_1-800x550.jpg\" width=\"130px\" align=\"left\" style=\"margin-right: 10px;\"> EconML: A Python Package for ML-Based Heterogeneous Treatment Effects Estimation</h1>\n\n**EconML** is a Python package for estimating heterogeneous treatment effects from observational data via machine learning. This package was designed and built as part of the [ALICE project](https://www.microsoft.com/en-us/research/project/alice/) at Microsoft Research with the goal to combine state-of-the-art machine learning \ntechniques with econometrics to bring automation to complex causal inference problems. The promise of EconML:\n\n* Implement recent techniques in the literature at the intersection of econometrics and machine learning\n* Maintain flexibility in modeling the effect heterogeneity (via techniques such as random forests, boosting, lasso and neural nets), while preserving the causal interpretation of the learned model and often offering valid confidence intervals\n* Use a unified API\n* Build on standard Python packages for Machine Learning and Data Analysis\n\nIn a nutshell, this\ntoolkit is designed to measure the causal effect of some treatment variable(s) `T` on an outcome \nvariable `Y`, controlling for a set of features `X`. For detailed information about the package, \nconsult the documentation at https://econml.azurewebsites.net/.\n\n<details>\n<summary><strong><em>Table of Contents</em></strong></summary>\n\n- [Introduction](#introduction)\n  - [About Treatment Effect Estimation](#about-treatment-effect-estimation)\n  - [Example Applications](#example-applications)\n- [News](#news)\n- [Getting Started](#getting-started)\n  - [Installation](#installation)\n  - [Usage Examples](#usage-examples)\n    - [Estimation Methods](#estimation-methods)\n    - [Interpretability](#interpretability)\n    - [Inference](#inference)\n- [For Developers](#for-developers)\n  - [Running the tests](#running-the-tests)\n  - [Generating the documentation](#generating-the-documentation)\n- [Blogs and Publications](#blogs-and-publications)\n- [Citation](#citation)\n- [Contributing and Feedback](#contributing-and-feedback)\n- [References](#references)\n\n</details>\n\n# Introduction\n\n## About Treatment Effect Estimation\n\nOne of the biggest promises of machine learning is to automate decision making in a multitude of domains. At the core of many data-driven personalized decision scenarios is the estimation of heterogeneous treatment effects: what is the causal effect of an intervention on an outcome of interest for a sample with a particular set of features? \n\nSuch questions arise frequently in customer segmentation (what is the effect of placing a customer in a tier over another tier), dynamic pricing (what is the effect of a pricing policy on demand) and medical studies (what is the effect of a treatment on a patient). In many such settings we have an abundance of observational data, where the treatment was chosen via some unknown policy, but the ability to run control A/B tests is limited.\n\n## Example Applications\n\n<table style=\"width:80%\">\n  <tr align=\"left\">\n    <td width=\"25%\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Business_card_-_The_Noun_Project.svg/610px-Business_card_-_The_Noun_Project.svg.png\"/></td>\n    <td width=\"75%\">\n        <h4>Customer Targeting</h4>\n        <p> Businesses offer personalized incentives to customers to increase sales and level of engagement. Any such personalized intervention corresponds to a monetary investment and the main question that business analytics are called to answer is: what is the return on investment? Analyzing the ROI is inherently a treatment effect question: what was the effect of any investment on a customer's spend? Understanding how ROI varies across customers can enable more targeted investment policies and increased ROI via better targeting. \n        </p>\n    </td>\n  </tr>\n  <tr align=\"left\">\n    <td width=\"25%\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/c/c9/Online-shop_button.jpg\"/></td>\n    <td width=\"75%\">\n        <h4>Personalized Pricing</h4>\n        <p>Personalized discounts have are widespread in the digital economy. To set the optimal personalized discount policy a business needs to understand what is the effect of a drop in price on the demand of a customer for a product as a function of customer characteristics. The estimation of such personalized demand elasticities can also be phrased in the language of heterogeneous treatment effects, where the treatment is the price on the demand as a function of observable features of the customer. </p>\n    </td>\n  </tr>\n  <tr align=\"left\">\n    <td><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/VariousPills.jpg/640px-VariousPills.jpg\"/></td>\n    <td width=\"75%\">\n        <h4>Stratification in Clinical Trials</h4>\n        <p>\n        Which patients should be selected for a clinical trial? If we want to demonstrate that a clinical treatment has an effect on at least some subset of a population then fully randomized clinical trials are inappropriate as they will solely estimate average effects. Using heterogeneous treatment effect techniques, we can use observational data to come up with estimates of these effects and identify good candidate patients for a clinical trial that our model estimates have high treatment effects.\n        </p>\n    </td>\n  </tr>\n  <tr align=\"left\">\n    <td width=\"25%\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Mouse-cursor-hand-pointer.svg/1023px-Mouse-cursor-hand-pointer.svg.png\" width=\"200\" /></td>\n    <td width=\"75%\">\n        <h4>Learning Click-Through-Rates</h4>\n    <p>\n        In the design of a page layout and ad placement, it is important to understand the click-through-rate of page components on different positions of a page. Modern approaches may be to run multiple A/B tests, but when such page component involve revenue considerations, then observational data can help guide correct A/B tests to run. Heterogeneous treatment effect estimation can provide estimates of the click-through-rate of page components from observational data. In this setting, the treatment is simply whether the component is placed on that page position and the response is whether the user clicked on it.\n    </p>\n    </td>\n  </tr>\n</table>\n\n# News\n\n**March 6, 2020:** Release v0.7.0, see release notes [here](https://github.com/Microsoft/EconML/releases/tag/v0.7.0)\n\n<details><summary>Previous releases</summary>\n\n**February 18, 2020:** Release v0.7.0b1, see release notes [here](https://github.com/Microsoft/EconML/releases/tag/v0.7.0b1)\n\n**January 10, 2020:** Release v0.6.1, see release notes [here](https://github.com/Microsoft/EconML/releases/tag/v0.6.1)\n\n**December 6, 2019:** Release v0.6, see release notes [here](https://github.com/Microsoft/EconML/releases/tag/v0.6)\n\n**November 21, 2019:** Release v0.5, see release notes [here](https://github.com/Microsoft/EconML/releases/tag/v0.5). \n\n**June 3, 2019:** Release v0.4, see release notes [here](https://github.com/Microsoft/EconML/releases/tag/v0.4). \n\n**May 3, 2019:** Release v0.3, see release notes [here](https://github.com/Microsoft/EconML/releases/tag/v0.3).\n\n**April 10, 2019:** Release v0.2, see release notes [here](https://github.com/Microsoft/EconML/releases/tag/v0.2).\n\n**March 6, 2019:** Release v0.1, welcome to have a try and provide feedback.\n\n</details>\n\n# Getting Started\n\n## Installation\n\nInstall the latest release from [PyPI](https://pypi.org/project/econml/):\n```\npip install econml\n```\nTo install from source, see [For Developers](#for-developers) section below.\n\n## Usage Examples\n### Estimation Methods\n\n<details>\n  <summary>Double Machine Learning (click to expand)</summary>\n\n  * Linear final stage\n\n  ```Python\n  from econml.dml import LinearDMLCateEstimator\n  from sklearn.linear_model import LassoCV\n  from econml.inference import BootstrapInference\n\n  est = LinearDMLCateEstimator(model_y=LassoCV(), model_t=LassoCV())\n  ### Estimate with OLS confidence intervals\n  est.fit(Y, T, X, W, inference='statsmodels') # W -> high-dimensional confounders, X -> features\n  treatment_effects = est.effect(X_test)\n  lb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals\n\n  ### Estimate with bootstrap confidence intervals\n  est.fit(Y, T, X, W, inference='bootstrap')  # with default bootstrap parameters\n  est.fit(Y, T, X, W, inference=BootstrapInference(n_bootstrap_samples=100))  # or customized\n  lb, ub = est.effect_interval(X_test, alpha=0.05) # Bootstrap confidence intervals\n  ```\n\n  * Sparse linear final stage\n\n  ```Python\n  from econml.dml import SparseLinearDMLCateEstimator\n  from sklearn.linear_model import LassoCV\n\n  est = SparseLinearDMLCateEstimator(model_y=LassoCV(), model_t=LassoCV())\n  est.fit(Y, T, X, W, inference='debiasedlasso') # X -> high dimensional features\n  treatment_effects = est.effect(X_test)\n  lb, ub = est.effect_interval(X_test, alpha=0.05) # Confidence intervals via debiased lasso\n  ```\n\n  * Nonparametric last stage\n\n  ```Python\n  from econml.dml import ForestDMLCateEstimator\n  from sklearn.ensemble import GradientBoostingRegressor\n\n  est = ForestDMLCateEstimator(model_y=GradientBoostingRegressor(), model_t=GradientBoostingRegressor())\n  est.fit(Y, T, X, W, inference='blb') \n  treatment_effects = est.effect(X_test)\n  # Confidence intervals via Bootstrap-of-Little-Bags for forests\n  lb, ub = est.effect_interval(X_test, alpha=0.05)\n  ```\n\n</details>\n\n<details>\n  <summary>Orthogonal Random Forests (click to expand)</summary>\n\n  ```Python\n  from econml.ortho_forest import ContinuousTreatmentOrthoForest\n  from econml.sklearn_extensions.linear_model import WeightedLasso, WeightedLassoCV\n  # Use defaults\n  est = ContinuousTreatmentOrthoForest()\n  # Or specify hyperparameters\n  est = ContinuousTreatmentOrthoForest(n_trees=500, min_leaf_size=10, \n                                      max_depth=10, subsample_ratio=0.7,\n                                      lambda_reg=0.01,\n                                      model_T=WeightedLasso(alpha=0.01), model_Y=WeightedLasso(alpha=0.01),\n                                      model_T_final=WeightedLassoCV(cv=3), model_Y_final=WeightedLassoCV(cv=3))\n  est.fit(Y, T, X, W, inference='blb')\n  treatment_effects = est.effect(X_test)\n  # Confidence intervals via Bootstrap-of-Little-Bags for forests\n  lb, ub = est.effect_interval(X_test, alpha=0.05)\n  ```\n</details>\n\n<details>\n\n<summary>Meta-Learners (click to expand)</summary>\n\n  * XLearner\n\n  ```Python\n  from econml.metalearners import XLearner\n  from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\n\n  est = XLearner(models=GradientBoostingRegressor(),\n                propensity_model=GradientBoostingClassifier(),\n                cate_models=GradientBoostingRegressor())\n  est.fit(Y, T, np.hstack([X, W]))\n  treatment_effects = est.effect(np.hstack([X_test, W_test]))\n\n  # Fit with bootstrap confidence interval construction enabled\n  est.fit(Y, T, np.hstack([X, W]), inference='bootstrap')\n  treatment_effects = est.effect(np.hstack([X_test, W_test]))\n  lb, ub = est.effect_interval(np.hstack([X_test, W_test]), alpha=0.05) # Bootstrap CIs\n  ```\n\n  * SLearner\n\n  ```Python\n  from econml.metalearners import SLearner\n  from sklearn.ensemble import GradientBoostingRegressor\n\n  est = SLearner(overall_model=GradientBoostingRegressor())\n  est.fit(Y, T, np.hstack([X, W]))\n  treatment_effects = est.effect(np.hstack([X_test, W_test]))\n  ```\n\n  * TLearner\n\n  ```Python\n  from econml.metalearners import TLearner\n  from sklearn.ensemble import GradientBoostingRegressor\n\n  est = TLearner(models=GradientBoostingRegressor())\n  est.fit(Y, T, np.hstack([X, W]))\n  treatment_effects = est.effect(np.hstack([X_test, W_test]))\n  ```\n</details>\n\n<details>\n<summary>Doubly Robust Learners (click to expand)\n</summary>\n\n* Linear final stage\n\n```Python\nfrom econml.drlearner import LinearDRLearner\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\n\nest = LinearDRLearner(model_propensity=GradientBoostingClassifier(),\n                      model_regression=GradientBoostingRegressor())\nest.fit(Y, T, X, W, inference='statsmodels')\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05)\n```\n\n* Sparse linear final stage\n\n```Python\nfrom econml.drlearner import SparseLinearDRLearner\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\n\nest = SparseLinearDRLearner(model_propensity=GradientBoostingClassifier(),\n                            model_regression=GradientBoostingRegressor())\nest.fit(Y, T, X, W, inference='debiasedlasso')\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05)\n```\n\n* Nonparametric final stage\n\n```Python\nfrom econml.drlearner import ForestDRLearner\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\n\nest = ForestDRLearner(model_propensity=GradientBoostingClassifier(),\n                      model_regression=GradientBoostingRegressor())\nest.fit(Y, T, X, W, inference='blb') \ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05)\n```\n</details>\n\n<details>\n<summary>Orthogonal Instrumental Variables (click to expand)</summary>\n\n* Intent to Treat Doubly Robust Learner (discrete instrument, discrete treatment)\n\n```Python\nfrom econml.ortho_iv import LinearIntentToTreatDRIV\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\nfrom sklearn.linear_model import LinearRegression\n\nest = LinearIntentToTreatDRIV(model_Y_X=GradientBoostingRegressor(),\n                              model_T_XZ=GradientBoostingClassifier(),\n                              flexible_model_effect=GradientBoostingRegressor())\nest.fit(Y, T, Z, X, inference='statsmodels') # OLS inference\ntreatment_effects = est.effect(X_test)\nlb, ub = est.effect_interval(X_test, alpha=0.05) # OLS confidence intervals\n```\n\n</details>\n\n<details>\n<summary>Deep Instrumental Variables (click to expand)</summary>\n\n```Python\nimport keras\nfrom econml.deepiv import DeepIVEstimator\n\ntreatment_model = keras.Sequential([keras.layers.Dense(128, activation='relu', input_shape=(2,)),\n                                    keras.layers.Dropout(0.17),\n                                    keras.layers.Dense(64, activation='relu'),\n                                    keras.layers.Dropout(0.17),\n                                    keras.layers.Dense(32, activation='relu'),\n                                    keras.layers.Dropout(0.17)])\nresponse_model = keras.Sequential([keras.layers.Dense(128, activation='relu', input_shape=(2,)),\n                                  keras.layers.Dropout(0.17),\n                                  keras.layers.Dense(64, activation='relu'),\n                                  keras.layers.Dropout(0.17),\n                                  keras.layers.Dense(32, activation='relu'),\n                                  keras.layers.Dropout(0.17),\n                                  keras.layers.Dense(1)])\nest = DeepIVEstimator(n_components=10, # Number of gaussians in the mixture density networks)\n                      m=lambda z, x: treatment_model(keras.layers.concatenate([z, x])), # Treatment model\n                      h=lambda t, x: response_model(keras.layers.concatenate([t, x])), # Response model\n                      n_samples=1 # Number of samples used to estimate the response\n                      )\nest.fit(Y, T, X, Z) # Z -> instrumental variables\ntreatment_effects = est.effect(X_test)\n```\n</details>\n\n See the <a href=\"#references\">References</a> section for more details.\n\n### Interpretability\n* Tree Interpreter of the CATE model\n  ```Python\n  from econml.cate_interpreter import SingleTreeCateInterpreter\n  intrp = SingleTreeCateInterpreter(include_model_uncertainty=True, max_depth=2, min_samples_leaf=10)\n  # We interpret the CATE model's behavior based on the features used for heterogeneity\n  intrp.interpret(est, X)\n  # Plot the tree\n  plt.figure(figsize=(25, 5))\n  intrp.plot(feature_names=['A', 'B', 'C', 'D'], fontsize=12)\n  plt.show()\n  ```\n  ![image](notebooks/images/dr_cate_tree.png)\n\n* Policy Interpreter of the CATE model\n  ```Python\n  from econml.cate_interpreter import SingleTreePolicyInterpreter\n  # We find a tree-based treatment policy based on the CATE model\n  intrp = SingleTreePolicyInterpreter(risk_level=0.05, max_depth=2, min_samples_leaf=1,min_impurity_decrease=.001)\n  intrp.interpret(est, X, sample_treatment_costs=0.2)\n  # Plot the tree\n  plt.figure(figsize=(25, 5))\n  intrp.plot(feature_names=['A', 'B', 'C', 'D'], fontsize=12)\n  plt.show()\n  ```\n  ![image](notebooks/images/dr_policy_tree.png)\n\n### Inference\n  ```Python\n  # Get the effect inference summary, which includes the standard error, z test score, p value, and confidence interval given each sample X[i]\n  est.effect_inference(X_test).summary_frame(alpha=0.05, value=0, decimals=3)\n  # Get the population summary for the entire sample X\n  est.effect_inference(X_test).population_summary(alpha=0.1, value=0, decimals=3, tol=0.001)\n  #  Get the inference summary for the final model\n  est.summary()\n  ```\n\nTo see more complex examples, go to the [notebooks](https://github.com/Microsoft/EconML/tree/master/notebooks) section of the repository. For a more detailed description of the treatment effect estimation algorithms, see the EconML [documentation](https://econml.azurewebsites.net/).\n\n# For Developers\n\nYou can get started by cloning this repository. We use \n[setuptools](https://setuptools.readthedocs.io/en/latest/index.html) for building and distributing our package.\nWe rely on some recent features of setuptools, so make sure to upgrade to a recent version with\n`pip install setuptools --upgrade`.  Then from your local copy of the repository you can run `python setup.py develop` to get started.\n\n## Running the tests\n\nThis project uses [pytest](https://docs.pytest.org/) for testing.  To run tests locally after installing the package, \nyou can use `python setup.py pytest`.\n\n## Generating the documentation\n\nThis project's documentation is generated via [Sphinx](https://www.sphinx-doc.org/en/master/index.html).  Note that we use [graphviz](https://graphviz.org/)'s \n`dot` application to produce some of the images in our documentation, so you should make sure that `dot` is installed and in your path.\n\nTo generate a local copy of the documentation from a clone of this repository, just run `python setup.py build_sphinx -W -E -a`, which will build the documentation and place it under the `build/sphinx/html` path. \n\nThe reStructuredText files that make up the documentation are stored in the [docs directory](https://github.com/Microsoft/EconML/tree/master/doc); module documentation is automatically generated by the Sphinx build process.\n\n# Blogs and Publications\n\n* June 2019: [Treatment Effects with Instruments paper](https://arxiv.org/pdf/1905.10176.pdf)\n\n* May 2019: [Open Data Science Conference Workshop](https://staging5.odsc.com/training/portfolio/machine-learning-estimation-of-heterogeneous-treatment-effect-the-microsoft-econml-library) \n\n* 2018: [Orthogonal Random Forests paper](http://proceedings.mlr.press/v97/oprescu19a.html)\n\n* 2017: [DeepIV paper](http://proceedings.mlr.press/v70/hartford17a/hartford17a.pdf)\n\n# Citation\n\nIf you use EconML in your research, please cite us as follows:\n\n   Microsoft Research. **EconML: A Python Package for ML-Based Heterogeneous Treatment Effects Estimation.** https://github.com/microsoft/EconML, 2019. Version 0.x.\n\nBibTex:\n\n```\n@misc{econml,\n  author={Microsoft Research},\n  title={{EconML}: {A Python Package for ML-Based Heterogeneous Treatment Effects Estimation}},\n  howpublished={https://github.com/microsoft/EconML},\n  note={Version 0.x},\n  year={2019}\n}\n```\n\n# Contributing and Feedback\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n# References\n\nV. Syrgkanis, V. Lei, M. Oprescu, M. Hei, K. Battocchi, G. Lewis.\n**Machine Learning Estimation of Heterogeneous Treatment Effects with Instruments.**\n[*Proceedings of the 33rd Conference on Neural Information Processing Systems (NeurIPS)*](https://arxiv.org/abs/1905.10176), 2019\n**(Spotlight Presentation)**\n\nD. Foster, V. Syrgkanis.\n**Orthogonal Statistical Learning.**\n[*Proceedings of the 32nd Annual Conference on Learning Theory (COLT)*](https://arxiv.org/pdf/1901.09036.pdf), 2019\n**(Best Paper Award)**\n\nM. Oprescu, V. Syrgkanis and Z. S. Wu.\n**Orthogonal Random Forest for Causal Inference.**\n[*Proceedings of the 36th International Conference on Machine Learning (ICML)*](http://proceedings.mlr.press/v97/oprescu19a.html), 2019.\n\nS. K\u00fcnzel, J. Sekhon, J. Bickel and B. Yu.\n**Metalearners for estimating heterogeneous treatment effects using machine learning.**\n[*Proceedings of the national academy of sciences, 116(10), 4156-4165*](https://www.pnas.org/content/116/10/4156), 2019.\n\nV. Chernozhukov, D. Nekipelov, V. Semenova, V. Syrgkanis.\n**Plug-in Regularized Estimation of High-Dimensional Parameters in Nonlinear Semiparametric Models.**\n[*Arxiv preprint arxiv:1806.04823*](https://arxiv.org/abs/1806.04823), 2018.\n\nJason Hartford, Greg Lewis, Kevin Leyton-Brown, and Matt Taddy. **Deep IV: A flexible approach for counterfactual prediction.** [*Proceedings of the 34th International Conference on Machine Learning, ICML'17*](http://proceedings.mlr.press/v70/hartford17a/hartford17a.pdf), 2017.\n\nV. Chernozhukov, D. Chetverikov, M. Demirer, E. Duflo, C. Hansen, and a. W. Newey. **Double Machine Learning for Treatment and Causal Parameters.** [*ArXiv preprint arXiv:1608.00060*](https://arxiv.org/abs/1608.00060), 2016.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Microsoft/EconML", "keywords": "treatment-effect", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "econml", "package_url": "https://pypi.org/project/econml/", "platform": "", "project_url": "https://pypi.org/project/econml/", "project_urls": {"Bug Tracker": "https://github.com/Microsoft/EconML/Issues", "Documentation": "https://econml.azurewebsites.net/", "Homepage": "https://github.com/Microsoft/EconML", "Source Code": "https://github.com/Microsoft/EconML"}, "release_url": "https://pypi.org/project/econml/0.7.0/", "requires_dist": ["numpy", "scipy (!=1.4.0)", "scikit-learn (~=0.21.0)", "keras", "sparse", "tensorflow (==1.*)", "joblib (>=0.13.0)", "numba (!=0.42.1)", "statsmodels (>=0.9)", "graphviz", "pandas", "matplotlib (<3.1) ; python_version <= \"3.5\"", "matplotlib ; python_version > \"3.5\"", "azureml-sdk[automl,explain] (==1.0.83) ; extra == 'automl'", "azure-cli ; extra == 'automl'"], "requires_python": "", "summary": "This package contains several methods for calculating Conditional Average Treatment Effects", "version": "0.7.0"}, "last_serial": 6769508, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b8d0e76c2f01f2cd096ded94e3337b98", "sha256": "815a3dde1113f1399d60983386e6bf1a1198aa3fbb7cd292e9eeb9bf8590955c"}, "downloads": -1, "filename": "econml-0.1-py3.6.egg", "has_sig": false, "md5_digest": "b8d0e76c2f01f2cd096ded94e3337b98", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 263853, "upload_time": "2019-03-06T22:20:51", "upload_time_iso_8601": "2019-03-06T22:20:51.033862Z", "url": "https://files.pythonhosted.org/packages/48/54/676bdbe8a86e48f3084e99de4c8df3fc6e756d49534a0633052d5eae9340/econml-0.1-py3.6.egg"}, {"comment_text": "", "digests": {"md5": "0c3744e43c683065ad35129498cb0183", "sha256": "dcfe349281c6cffe9b750cfc828baae79cc2879f6ecb0b05bdf6aae94bb2e22c"}, "downloads": -1, "filename": "econml-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0c3744e43c683065ad35129498cb0183", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 178838, "upload_time": "2019-03-06T22:20:48", "upload_time_iso_8601": "2019-03-06T22:20:48.878987Z", "url": "https://files.pythonhosted.org/packages/82/85/2580d173f9e33da3e31ee1be5ce9ec279a10cbda89daf40d55b242403324/econml-0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3d4c537de0dc241ce0dd1f0c61dcc16e", "sha256": "151bd7ec238108c51801ea1a96e8c6fa388f5cc58b103b0c62e82909f14a46f4"}, "downloads": -1, "filename": "econml-0.1.tar.gz", "has_sig": false, "md5_digest": "3d4c537de0dc241ce0dd1f0c61dcc16e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 162116, "upload_time": "2019-03-06T22:20:52", "upload_time_iso_8601": "2019-03-06T22:20:52.616022Z", "url": "https://files.pythonhosted.org/packages/3d/c5/fd3206d57200edf41ac7ad1bcabd4640e17880fd8349b17e24adeffedd85/econml-0.1.tar.gz"}], "0.2": [{"comment_text": "", "digests": {"md5": "a3bfa9c3a3e24dddadb0e5d592520926", "sha256": "ffb31f5e95eb33d06a7bf00812a92558e83e2a696bc4f9704948340eebe0e11f"}, "downloads": -1, "filename": "econml-0.2-py3.6.egg", "has_sig": false, "md5_digest": "a3bfa9c3a3e24dddadb0e5d592520926", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 274890, "upload_time": "2019-04-11T01:17:23", "upload_time_iso_8601": "2019-04-11T01:17:23.447309Z", "url": "https://files.pythonhosted.org/packages/09/64/26cbf68b14aadb093806b2e9491517053321ebe4ff26337150a206fc1856/econml-0.2-py3.6.egg"}, {"comment_text": "", "digests": {"md5": "b59aa4a3184e720f15c2023e0b8f66b3", "sha256": "27e0556e1b119c53036092c67983c7ad4615e3635f275044a6785bc84a6594b1"}, "downloads": -1, "filename": "econml-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b59aa4a3184e720f15c2023e0b8f66b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 185657, "upload_time": "2019-04-11T01:17:21", "upload_time_iso_8601": "2019-04-11T01:17:21.802658Z", "url": "https://files.pythonhosted.org/packages/af/ec/6e2398e2acf503df654258ff3755137eaedcc71197fdd7289f6fba09a5e0/econml-0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "343e582771270901a2defdc4fc79e11d", "sha256": "3fa6d41897a92356d320a58fd8bb2583b601b1f769b68a91ce2aca50e5b8b43f"}, "downloads": -1, "filename": "econml-0.2.tar.gz", "has_sig": false, "md5_digest": "343e582771270901a2defdc4fc79e11d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 169110, "upload_time": "2019-04-11T01:17:24", "upload_time_iso_8601": "2019-04-11T01:17:24.944274Z", "url": "https://files.pythonhosted.org/packages/36/a4/1f04500ef33b5acd54124fd635208a466a385f7caa4ef8b4d3f62cc7c400/econml-0.2.tar.gz"}], "0.3": [{"comment_text": "", "digests": {"md5": "30dae50e9aedf82388b06877ccb2cf95", "sha256": "f73ceec01269597a9349db3942912d0f2b166d9e5a697ae21219ffdac86a88d8"}, "downloads": -1, "filename": "econml-0.3-py3.6.egg", "has_sig": false, "md5_digest": "30dae50e9aedf82388b06877ccb2cf95", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 276841, "upload_time": "2019-05-03T15:16:17", "upload_time_iso_8601": "2019-05-03T15:16:17.869402Z", "url": "https://files.pythonhosted.org/packages/0f/4e/b3a9673f854a8a1d5eedc30b00047c39242b0645e10871c67ccdb29a8033/econml-0.3-py3.6.egg"}, {"comment_text": "", "digests": {"md5": "8882de5e593ab8f664a33f5dfbce293e", "sha256": "e802ed90645cc2cbdb74a1e7a383e36c6b6ffe7466d0da58123063cdf3ac3877"}, "downloads": -1, "filename": "econml-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8882de5e593ab8f664a33f5dfbce293e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 186570, "upload_time": "2019-05-03T15:16:16", "upload_time_iso_8601": "2019-05-03T15:16:16.383488Z", "url": "https://files.pythonhosted.org/packages/32/5b/1b82a8452977aae137f45362c79e03bb623adaeb7bea038ad165fcef36b8/econml-0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "b9538fcd781dbdbd41d7292d58748644", "sha256": "11424e1367252b223289b2faa892b39d591d454b9be9ade59c480980f08e74a9"}, "downloads": -1, "filename": "econml-0.3.tar.gz", "has_sig": false, "md5_digest": "b9538fcd781dbdbd41d7292d58748644", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 169933, "upload_time": "2019-05-03T15:16:19", "upload_time_iso_8601": "2019-05-03T15:16:19.305221Z", "url": "https://files.pythonhosted.org/packages/9b/ae/9dff6c96dd706c35d40291820843bbf01289c8d5a29486404188834e8f54/econml-0.3.tar.gz"}], "0.4": [{"comment_text": "", "digests": {"md5": "f1995fcbd5f6e8ce915e2c042ecd4925", "sha256": "54d194adc28d2d71c92f5e1cb9ce0969fc0eedca8948b06f2eea944c6d7bfb4f"}, "downloads": -1, "filename": "econml-0.4-py3.6.egg", "has_sig": false, "md5_digest": "f1995fcbd5f6e8ce915e2c042ecd4925", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 278741, "upload_time": "2019-06-04T00:57:51", "upload_time_iso_8601": "2019-06-04T00:57:51.829747Z", "url": "https://files.pythonhosted.org/packages/d9/ad/21a7b838dfbe8f2c97071ee75a175cda567d71d5c114d964c320dbde97e3/econml-0.4-py3.6.egg"}, {"comment_text": "", "digests": {"md5": "f163a3c28cea423e4bb8e84e3ed4ca0e", "sha256": "0c832308406b4ff9f90939e63825a26aa02d99821d3679b024e49599a8d3c093"}, "downloads": -1, "filename": "econml-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f163a3c28cea423e4bb8e84e3ed4ca0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 187484, "upload_time": "2019-06-04T00:57:50", "upload_time_iso_8601": "2019-06-04T00:57:50.107715Z", "url": "https://files.pythonhosted.org/packages/91/9a/8ce586fbacdbd558fd4cecd014f7d9a86c98b99e2f0e03e60f5006470c04/econml-0.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "079500e2086dcb8c893008578a39108a", "sha256": "488a4793018bb03dabfc2ead93f9a5971964a2530bc47bc8a3f34c8b65d092f2"}, "downloads": -1, "filename": "econml-0.4.tar.gz", "has_sig": false, "md5_digest": "079500e2086dcb8c893008578a39108a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 170799, "upload_time": "2019-06-04T00:57:53", "upload_time_iso_8601": "2019-06-04T00:57:53.795082Z", "url": "https://files.pythonhosted.org/packages/ff/17/09700d64527d43c744aafd7dad36f9dfa758c9777c38a5bfbbd57feea5c4/econml-0.4.tar.gz"}], "0.5": [{"comment_text": "", "digests": {"md5": "5f2309a279170ae6a6084a2d9c422ed4", "sha256": "29c8d186de6b86f28a29c5a649b1fceb8b92fd4bb600f92b35f386156c95031c"}, "downloads": -1, "filename": "econml-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "5f2309a279170ae6a6084a2d9c422ed4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 254242, "upload_time": "2019-11-22T03:27:07", "upload_time_iso_8601": "2019-11-22T03:27:07.262680Z", "url": "https://files.pythonhosted.org/packages/7e/25/bfd1b7636b6a7b3e2a928ff722034d6d61a5a175378756ee70aac9ea63dd/econml-0.5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "350dbf4f6e91d10a5f0022360d7f6224", "sha256": "71d9827474232c75e1b287719bc72bfe9db94efbee6669f6efc15cc7c4695087"}, "downloads": -1, "filename": "econml-0.5.tar.gz", "has_sig": false, "md5_digest": "350dbf4f6e91d10a5f0022360d7f6224", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 229790, "upload_time": "2019-11-22T03:27:09", "upload_time_iso_8601": "2019-11-22T03:27:09.233122Z", "url": "https://files.pythonhosted.org/packages/a5/e6/e070237933c9202f76a0547255d7b8e06a234d9e160fa552fdf9df01f96c/econml-0.5.tar.gz"}], "0.6": [{"comment_text": "", "digests": {"md5": "0dd409020c27902ee4084fdd5a47ee31", "sha256": "2a119b6900059a589c0ddf397daf14d25d30e1f9643ed2c5274ea5d5cf93a084"}, "downloads": -1, "filename": "econml-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0dd409020c27902ee4084fdd5a47ee31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 277598, "upload_time": "2019-12-07T07:35:05", "upload_time_iso_8601": "2019-12-07T07:35:05.306557Z", "url": "https://files.pythonhosted.org/packages/5e/18/68923d1caa5f3ce5d242c427f1e31419c28af451bf727e2d5dedfc0f9c7a/econml-0.6-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "6086c35a63febb0c433befb0015b2768", "sha256": "23ddf6d37714796fcdfa3a1642572bfb891efb3df5c60f661a7503f2e104c4ab"}, "downloads": -1, "filename": "econml-0.6.tar.gz", "has_sig": false, "md5_digest": "6086c35a63febb0c433befb0015b2768", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 251237, "upload_time": "2019-12-07T07:35:07", "upload_time_iso_8601": "2019-12-07T07:35:07.240338Z", "url": "https://files.pythonhosted.org/packages/83/60/bc4cd1baeea08bd4279edf78dd2840f05d787ddf6439a1fc30f78532a394/econml-0.6.tar.gz"}], "0.6.1": [{"comment_text": "", "digests": {"md5": "5463242492ea0ce0b206120a9d3c8c08", "sha256": "e3298224c236bd117eed85e4c8b242e4a7caa9ddccb1381d1969ee046528dd23"}, "downloads": -1, "filename": "econml-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5463242492ea0ce0b206120a9d3c8c08", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 278329, "upload_time": "2020-01-13T20:35:35", "upload_time_iso_8601": "2020-01-13T20:35:35.743587Z", "url": "https://files.pythonhosted.org/packages/90/4f/dd76f7be30ec7294b1cfd46b5622b64c29bcdd6a1709205826eb14176c52/econml-0.6.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "28ab9ac6fae9de29fcd2949a87fb0cde", "sha256": "f8e383b882ed527bdb3e22eadf8541c494faf1a3fd8a5e93a32f78420cb35cf7"}, "downloads": -1, "filename": "econml-0.6.1.tar.gz", "has_sig": false, "md5_digest": "28ab9ac6fae9de29fcd2949a87fb0cde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254204, "upload_time": "2020-01-13T20:35:37", "upload_time_iso_8601": "2020-01-13T20:35:37.846713Z", "url": "https://files.pythonhosted.org/packages/85/66/5595f9b9fe2d241183891fd7e4aa6255affb26785706af00ee3198a8d60a/econml-0.6.1.tar.gz"}], "0.7.0": [{"comment_text": "", "digests": {"md5": "cc69f334b7f58ff5c0173011f58d4b00", "sha256": "7018e53ed8f1d598e386a2a5d483a39e8b404261681c25e0ae13f4b3324ddc92"}, "downloads": -1, "filename": "econml-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cc69f334b7f58ff5c0173011f58d4b00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 312418, "upload_time": "2020-03-07T21:17:39", "upload_time_iso_8601": "2020-03-07T21:17:39.854981Z", "url": "https://files.pythonhosted.org/packages/98/30/9b89a34fa81f2b591671a15fca844ef6f5d9764e2951ef9e30ad2967cdfa/econml-0.7.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d9ba795e3dd348f37058eae2fbc93180", "sha256": "531f2ec24c9aae9f0f4e025eddf5bf1959e3bfbabb1e200ec1df4b94fdc73743"}, "downloads": -1, "filename": "econml-0.7.0.tar.gz", "has_sig": false, "md5_digest": "d9ba795e3dd348f37058eae2fbc93180", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 283304, "upload_time": "2020-03-07T21:17:41", "upload_time_iso_8601": "2020-03-07T21:17:41.661362Z", "url": "https://files.pythonhosted.org/packages/98/e8/b1a944810d162b5681a23afd4a16b1f498dea987171c5c2546f4070c87b8/econml-0.7.0.tar.gz"}], "0.7.0b1": [{"comment_text": "", "digests": {"md5": "0342cb08fa090b09f8c89e3b5205d3bd", "sha256": "a131e7d8132334c0f2302f8bb3d8c494f2d748a44fa0b344dce8897c88256b7e"}, "downloads": -1, "filename": "econml-0.7.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "0342cb08fa090b09f8c89e3b5205d3bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 309535, "upload_time": "2020-02-18T17:54:34", "upload_time_iso_8601": "2020-02-18T17:54:34.626954Z", "url": "https://files.pythonhosted.org/packages/62/cc/ec8da85f585151260e997a0082decb9e4cdc709636508076d4d029f97144/econml-0.7.0b1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "79368db4b39fb81bca6c32355a99ee89", "sha256": "bfa1cb708c4c5382bb543c2d8dbfe276d012e20ea1723ea53bb3c6b750a2887a"}, "downloads": -1, "filename": "econml-0.7.0b1.tar.gz", "has_sig": false, "md5_digest": "79368db4b39fb81bca6c32355a99ee89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 283066, "upload_time": "2020-02-18T17:54:36", "upload_time_iso_8601": "2020-02-18T17:54:36.648165Z", "url": "https://files.pythonhosted.org/packages/78/7f/10eb634a730ae13986a64e3c817210eec35f39bf7841672b39d2eca2c41e/econml-0.7.0b1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "cc69f334b7f58ff5c0173011f58d4b00", "sha256": "7018e53ed8f1d598e386a2a5d483a39e8b404261681c25e0ae13f4b3324ddc92"}, "downloads": -1, "filename": "econml-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cc69f334b7f58ff5c0173011f58d4b00", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 312418, "upload_time": "2020-03-07T21:17:39", "upload_time_iso_8601": "2020-03-07T21:17:39.854981Z", "url": "https://files.pythonhosted.org/packages/98/30/9b89a34fa81f2b591671a15fca844ef6f5d9764e2951ef9e30ad2967cdfa/econml-0.7.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d9ba795e3dd348f37058eae2fbc93180", "sha256": "531f2ec24c9aae9f0f4e025eddf5bf1959e3bfbabb1e200ec1df4b94fdc73743"}, "downloads": -1, "filename": "econml-0.7.0.tar.gz", "has_sig": false, "md5_digest": "d9ba795e3dd348f37058eae2fbc93180", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 283304, "upload_time": "2020-03-07T21:17:41", "upload_time_iso_8601": "2020-03-07T21:17:41.661362Z", "url": "https://files.pythonhosted.org/packages/98/e8/b1a944810d162b5681a23afd4a16b1f498dea987171c5c2546f4070c87b8/econml-0.7.0.tar.gz"}]}