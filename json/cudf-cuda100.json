{"info": {"author": "NVIDIA Corporation", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# <div align=\"left\"><img src=\"img/rapids_logo.png\" width=\"90px\"/>&nbsp;cuDF - GPU DataFrames</div>\n\n[![Build Status](http://18.191.94.64/buildStatus/icon?job=cudf-master)](http://18.191.94.64/job/cudf-master/)&nbsp;&nbsp;[![Documentation Status](https://readthedocs.org/projects/cudf/badge/?version=latest)](https://cudf.readthedocs.io/en/latest/)\n\nThe [RAPIDS](https://rapids.ai) cuDF library is a GPU DataFrame manipulation library based on Apache Arrow that accelerates loading, filtering, and manipulation of data for model training data preparation. The RAPIDS GPU DataFrame provides a pandas-like API that will be familiar to data scientists, so they can now build GPU-accelerated workflows more easily.\n\n**NOTE:** For the latest stable [README.md](https://github.com/rapidsai/cudf/blob/master/README.md) ensure you are on the `master` branch.\n\n## Quick Start\n\nPlease see the [Demo Docker Repository](https://hub.docker.com/r/rapidsai/rapidsai/), choosing a tag based on the NVIDIA CUDA version you\u2019re running. This provides a ready to run Docker container with example notebooks and data, showcasing how you can utilize cuDF.\n\n## Install cuDF\n\n### Conda\n\nIt is easy to install cuDF using conda. You can get a minimal conda installation with [Miniconda](https://conda.io/miniconda.html) or get the full installation with [Anaconda](https://www.anaconda.com/download).\n\nInstall and update cuDF using the conda command:\n\n```bash\n# CUDA 9.2\nconda install -c nvidia -c rapidsai -c numba -c conda-forge -c defaults cudf\n\n# CUDA 10.0\nconda install -c nvidia/label/cuda10.0 -c rapidsai/label/cuda10.0 -c numba -c conda-forge -c defaults cudf\n```\n\nNote: This conda installation only applies to Linux and Python versions 3.6/3.7.\n\n### Pip\n\nIt is easy to install cuDF using pip. You must specify the CUDA version to ensure you install the right package.\n\n```bash\n# CUDA 9.2\npip install cudf-cuda92\n\n# CUDA 10.0.\npip install cudf-cuda100\n```\n\n## Development Setup\n\nThe following instructions are for developers and contributors to cuDF OSS development. These instructions are tested on Linux Ubuntu 16.04 & 18.04. Use these instructions to build cuDF from source and contribute to its development.  Other operatings systems may be compatible, but are not currently tested.\n\n### Get libcudf Dependencies\n\nCompiler requirements:\n\n* `gcc`     version 5.4+\n* `nvcc`    version 9.2+\n* `cmake`   version 3.12.4+\n\nCUDA/GPU requirements:\n\n* CUDA 9.2+\n* NVIDIA driver 396.44+\n* Pascal architecture or better\n\nPython requirements:\n\n* 3.6 or 3.7\n\nYou can obtain CUDA from [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)\n\nSince `cmake` will download and build Apache Arrow you may need to install Boost C++ (version 1.58+) before running\n`cmake`:\n\n```bash\n# Install Boost C++ for Ubuntu 16.04/18.04\n$ sudo apt-get install libboost-all-dev\n```\n\nor\n\n```bash\n# Install Boost C++ for Conda\n$ conda install -c conda-forge boost\n```\n\n## Script to build cuDF from source\n\n### Build from Source\n\nTo install cuDF from source, ensure the dependencies are met and follow the steps below:\n\n- Clone the repository and submodules\n```bash\nCUDF_HOME=$(pwd)/cudf\ngit clone https://github.com/rapidsai/cudf.git $CUDF_HOME\ncd $CUDF_HOME\ngit submodule update --init --remote --recursive\n```\n- Create the conda development environment `cudf_dev`\n```bash\n# create the conda environment (assuming in base `cudf` directory)\nconda env create --name cudf_dev --file conda/environments/cudf_dev_cuda9.2.yml # for CUDA 9.2\n# or\nconda env create --name cudf_dev --file conda/environments/cudf_dev_cuda10.0.yml # for CUDA 10.0\n# activate the environment\nsource activate cudf_dev\n```\n\n- Build and install `libcudf`. CMake depends on the `nvcc` executable being on your path or defined in `$CUDACXX`.\n```bash\n$ cd $CUDF_HOME/cpp                                                       # navigate to C/C++ CUDA source root directory\n$ mkdir build                                                             # make a build directory\n$ cd build                                                                # enter the build directory\n\n# CMake options:\n# -DCMAKE_INSTALL_PREFIX set to the install path for your libraries or $CONDA_PREFIX if you're using Anaconda, i.e. -DCMAKE_INSTALL_PREFIX=/install/path or -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX\n# -DCMAKE_CXX11_ABI set to ON or OFF depending on the ABI version you want, defaults to ON. When turned ON, ABI compability for C++11 is used. When OFF, pre-C++11 ABI compability is used.\n$ cmake .. -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_CXX11_ABI=ON      # configure cmake ...\n\n$ make -j                                                                 # compile the libraries librmm.so, libcudf.so ... '-j' will start a parallel job using the number of physical cores available on your system\n$ make install                                                            # install the libraries librmm.so, libcudf.so to the CMAKE_INSTALL_PREFIX\n```\n\n- To run tests (Optional):\n```bash\n$ make test\n```\n\n- Build, install, and test cffi bindings:\n```bash\n$ make python_cffi                                  # build CFFI bindings for librmm.so, libcudf.so\n$ make install_python                               # build & install CFFI python bindings. Depends on cffi package from PyPi or Conda\n$ cd python && py.test -v                           # optional, run python tests on low-level python bindings\n```\n\n- Build the `cudf` python package, in the `python` folder:\n```bash\n$ cd $CUDF_HOME/python\n$ python setup.py build_ext --inplace\n```\n\n- You will also need the following environment variables, including `$CUDA_HOME`.\n```bash\nNUMBAPRO_NVVM=$CUDA_HOME/nvvm/lib64/libnvvm.so\nNUMBAPRO_LIBDEVICE=$CUDA_HOME/nvvm/libdevice\n```\n\n- To run Python tests (Optional):\n```bash\n$ py.test -v                                        # run python tests on cudf python bindings\n```\n\n- Finally, install the Python package to your Python path:\n```bash\n$ python setup.py install                           # install cudf python bindings\n```\n\nDone! You are ready to develop for the cuDF OSS project.\n\n## Debugging cuDF\n\n### Building Debug mode from source\n\nFollow the [above instructions](#build-from-source) to build from source and add `-DCMAKE_BUILD_TYPE=Debug` to the `cmake` step. \n\nFor example:\n```bash\n$ cmake .. -DCMAKE_INSTALL_PREFIX=/install/path -DCMAKE_BUILD_TYPE=Debug     # configure cmake ... use -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX if you're using Anaconda\n```\n\nThis builds `libcudf` in Debug mode which enables some `assert` safety checks and includes symbols in the library for debugging.\n\nAll other steps for installing `libcudf` into your environment are the same.\n\n### Debugging with `cuda-gdb` and `cuda-memcheck`\n\nWhen you have a debug build of `libcudf` installed, debugging with the `cuda-gdb` and `cuda-memcheck` is easy.\n\nIf you are debugging a Python script, simply run the following:\n\n#### `cuda-gdb`\n\n```bash\ncuda-gdb -ex r --args python <program_name>.py <program_arguments>\n```\n\n#### `cuda-memcheck`\n\n```bash\ncuda-memcheck python <program_name>.py <program_arguments>\n```\n\n\n## Automated Build in Docker Container\n\nA Dockerfile is provided with a preconfigured conda environment for building and installing cuDF from source based off of the master branch.\n\n### Prerequisites\n\n* Install [nvidia-docker2](https://github.com/nvidia/nvidia-docker/wiki/Installation-(version-2.0)) for Docker + GPU support\n* Verify NVIDIA driver is `396.44` or higher\n* Ensure CUDA 9.2+ is installed\n\n### Usage\n\nFrom cudf project root run the following, to build with defaults:\n```bash\n$ docker build --tag cudf .\n```\nAfter the container is built run the container:\n```bash\n$ docker run --runtime=nvidia -it cudf bash\n```\nActivate the conda environment `cudf` to use the newly built cuDF and libcudf libraries:\n```\nroot@3f689ba9c842:/# source activate cudf\n(cudf) root@3f689ba9c842:/# python -c \"import cudf\"\n(cudf) root@3f689ba9c842:/#\n```\n\n### Customizing the Build\n\nSeveral build arguments are available to customize the build process of the\ncontainer. These are specified by using the Docker [build-arg](https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg)\nflag. Below is a list of the available arguments and their purpose:\n\n| Build Argument | Default Value | Other Value(s) | Purpose |\n| --- | --- | --- | --- |\n| `CUDA_VERSION` | 9.2 | 10.0 | set CUDA version |\n| `LINUX_VERSION` | ubuntu16.04 | ubuntu18.04 | set Ubuntu version |\n| `CC` & `CXX` | 5 | 7 | set gcc/g++ version; **NOTE:** gcc7 requires Ubuntu 18.04 |\n| `CUDF_REPO` | This repo | Forks of cuDF | set git URL to use for `git clone` |\n| `CUDF_BRANCH` | master | Any branch name | set git branch to checkout of `CUDF_REPO` |\n| `NUMBA_VERSION` | newest | >=0.40.0 | set numba version |\n| `NUMPY_VERSION` | newest | >=1.14.3 | set numpy version |\n| `PANDAS_VERSION` | newest | >=0.23.4 | set pandas version |\n| `PYARROW_VERSION` | 0.12.0 | Not supported | set pyarrow version |\n| `CMAKE_VERSION` | newest | >=3.12 | set cmake version |\n| `CYTHON_VERSION` | 0.29 | Not supported | set Cython version |\n| `PYTHON_VERSION` | 3.6 | 3.7 | set python version |\n\n---\n\n## <div align=\"left\"><img src=\"img/rapids_logo.png\" width=\"265px\"/></div> Open GPU Data Science\n\nThe RAPIDS suite of open source software libraries aim to enable execution of end-to-end data science and analytics pipelines entirely on GPUs. It relies on NVIDIA\u00ae CUDA\u00ae primitives for low-level compute optimization, but exposing that GPU parallelism and high-bandwidth memory speed through user-friendly Python interfaces.\n\n<p align=\"center\"><img src=\"img/rapids_arrow.png\" width=\"80%\"/></p>\n\n### Apache Arrow on GPU\n\nThe GPU version of [Apache Arrow](https://arrow.apache.org/) is a common API that enables efficient interchange of tabular data between processes running on the GPU. End-to-end computation on the GPU avoids unnecessary copying and converting of data off the GPU, reducing compute time and cost for high-performance analytics common in artificial intelligence workloads. As the name implies, cuDF uses the Apache Arrow columnar data format on the GPU. Currently, a subset of the features in Apache Arrow are supported.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rapidsai/cudf", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "cudf-cuda100", "package_url": "https://pypi.org/project/cudf-cuda100/", "platform": "", "project_url": "https://pypi.org/project/cudf-cuda100/", "project_urls": {"Homepage": "https://github.com/rapidsai/cudf"}, "release_url": "https://pypi.org/project/cudf-cuda100/0.6.1/", "requires_dist": ["pandas (>=0.23.4)", "numba (<0.42,>=0.40.0)", "pycparser (==2.19)", "pyarrow (==0.12.1)", "cffi (>=1.0.0)", "cython (<0.30,>=0.29)", "numpy (>=1.14)", "nvstrings-cuda100"], "requires_python": ">=3.6,<3.8", "summary": "cuDF - GPU Dataframe", "version": "0.6.1"}, "last_serial": 4983792, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "6ffef91b9276c9614f93260f119bfcaa", "sha256": "8c8d2f17adc69de5935b58e4848c87a6b544631c272a1bd735b3b4c3630906f5"}, "downloads": -1, "filename": "cudf_cuda100-0.5.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6ffef91b9276c9614f93260f119bfcaa", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 15735194, "upload_time": "2019-01-29T04:19:45", "upload_time_iso_8601": "2019-01-29T04:19:45.107973Z", "url": "https://files.pythonhosted.org/packages/2d/ee/c1e5e5348711440c2d3a95911901fe69e8a51e6dff7ea3d2228def0eba60/cudf_cuda100-0.5.0-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "f6eabba6ca113e3b1d79280efbea5d87", "sha256": "18528244080258c7d0e524552afa2421c53747b40de59eb5a5dedb2f3b317901"}, "downloads": -1, "filename": "cudf_cuda100-0.5.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f6eabba6ca113e3b1d79280efbea5d87", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 15741107, "upload_time": "2019-01-29T04:19:53", "upload_time_iso_8601": "2019-01-29T04:19:53.127244Z", "url": "https://files.pythonhosted.org/packages/a9/55/24d9b61c90d6b18a99ef390a25f436734a9555d73df28e902eba273172f5/cudf_cuda100-0.5.0-cp37-cp37m-manylinux1_x86_64.whl"}], "0.5.0.post1": [{"comment_text": "", "digests": {"md5": "9ec629dafe14a310d118fe3f2588bf19", "sha256": "d0e2fcde61502f555e78dcf92d7ca306fe201bfddb3dcbdda0b603caac94e782"}, "downloads": -1, "filename": "cudf_cuda100-0.5.0.post1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "9ec629dafe14a310d118fe3f2588bf19", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 16567996, "upload_time": "2019-01-31T06:32:56", "upload_time_iso_8601": "2019-01-31T06:32:56.525280Z", "url": "https://files.pythonhosted.org/packages/b5/8a/2aaefa69670d5b63997ee2f416edf49dc0d5a4febbf5b12556420ef95902/cudf_cuda100-0.5.0.post1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "3c88049363ebceb9a0550f6a1cc614e5", "sha256": "2c82a5131283e4e3b21b424ba7a7988b25b5ca74da5dd2bb9e8f3d047aeb6ae5"}, "downloads": -1, "filename": "cudf_cuda100-0.5.0.post1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "3c88049363ebceb9a0550f6a1cc614e5", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 16573294, "upload_time": "2019-01-31T06:33:04", "upload_time_iso_8601": "2019-01-31T06:33:04.157854Z", "url": "https://files.pythonhosted.org/packages/fa/ea/0339cf656333b54034d14f62af73069acd4bc60ebf4c6329dbafa934d1af/cudf_cuda100-0.5.0.post1-cp37-cp37m-manylinux1_x86_64.whl"}], "0.5.1": [{"comment_text": "", "digests": {"md5": "5f9391b35719dc51ed40d9f39618e87e", "sha256": "fb2fab5a25a25a471a661c06c7eea49cf1d180eccba41306b02ef7aa6ebbeed5"}, "downloads": -1, "filename": "cudf_cuda100-0.5.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "5f9391b35719dc51ed40d9f39618e87e", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 16733402, "upload_time": "2019-02-05T23:29:57", "upload_time_iso_8601": "2019-02-05T23:29:57.630933Z", "url": "https://files.pythonhosted.org/packages/42/ba/db735acf505a95f5b125031448223c113c175c96f5da1e78fd8f409d8be4/cudf_cuda100-0.5.1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "6c1af4fd24042d1a36442c7343562a5a", "sha256": "84e27a1d97874a24fe5093b78439179e7179b510a1486c43012affa606646cc4"}, "downloads": -1, "filename": "cudf_cuda100-0.5.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6c1af4fd24042d1a36442c7343562a5a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 16736567, "upload_time": "2019-02-05T23:30:03", "upload_time_iso_8601": "2019-02-05T23:30:03.317878Z", "url": "https://files.pythonhosted.org/packages/bd/b3/8693b7e62a68014dff09835821680ff5472032be63177f971ec04a9f30a2/cudf_cuda100-0.5.1-cp37-cp37m-manylinux1_x86_64.whl"}], "0.6.0": [{"comment_text": "", "digests": {"md5": "0bb7a833fcc753cc27d78f858dc14b06", "sha256": "c7c7566716bdd7ee12d8173bf617cb6a6d7d0433622317d95036eb7b9c22a56f"}, "downloads": -1, "filename": "cudf_cuda100-0.6.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "0bb7a833fcc753cc27d78f858dc14b06", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 17211084, "upload_time": "2019-03-22T22:51:27", "upload_time_iso_8601": "2019-03-22T22:51:27.116044Z", "url": "https://files.pythonhosted.org/packages/fa/08/2f12659f230eaa75b27a762faa495d740c61609927d8adac7f12856b48c7/cudf_cuda100-0.6.0-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "a76ea4bf1b287da85a8adbf7bf4d44ca", "sha256": "865a1a01db138e8c44760a1b3cba16fb4c320fe964a92afcfe98945d033807b6"}, "downloads": -1, "filename": "cudf_cuda100-0.6.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a76ea4bf1b287da85a8adbf7bf4d44ca", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 17216851, "upload_time": "2019-03-22T22:51:44", "upload_time_iso_8601": "2019-03-22T22:51:44.562966Z", "url": "https://files.pythonhosted.org/packages/74/13/bef09a02e682766fa770a22cc6863a6c88461df3c575a96c5050ddbcdf6e/cudf_cuda100-0.6.0-cp37-cp37m-manylinux1_x86_64.whl"}], "0.6.0.post1": [{"comment_text": "", "digests": {"md5": "c5402985dd3eba106e89dfcc38361c05", "sha256": "2e64a7270cc3bfaef5300af8303ba57b7cb62690230acae126e124bec5b80ae2"}, "downloads": -1, "filename": "cudf_cuda100-0.6.0.post1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c5402985dd3eba106e89dfcc38361c05", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 17211237, "upload_time": "2019-03-23T00:29:27", "upload_time_iso_8601": "2019-03-23T00:29:27.357408Z", "url": "https://files.pythonhosted.org/packages/b7/7d/564a5f2ca9e6aa09f8106251df23af2b75ac8d42830d82db3f99a1d5cef7/cudf_cuda100-0.6.0.post1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "d1d77ccb0b6e7cb96093dbc76d6b6a56", "sha256": "7a9c18dbbac414a0c0aeead54dddd1d9ac31a4c1d683f9904370f7328f4d7644"}, "downloads": -1, "filename": "cudf_cuda100-0.6.0.post1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d1d77ccb0b6e7cb96093dbc76d6b6a56", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 17216931, "upload_time": "2019-03-23T00:30:56", "upload_time_iso_8601": "2019-03-23T00:30:56.132104Z", "url": "https://files.pythonhosted.org/packages/44/ad/af560c16ba9627dddeabf655bc9b7c17d5325b1944e20236baa4466ba364/cudf_cuda100-0.6.0.post1-cp37-cp37m-manylinux1_x86_64.whl"}], "0.6.1": [{"comment_text": "", "digests": {"md5": "5e1a61cb2b90c8f3f45d5761f3c45ff2", "sha256": "e18aef59e91dbb70ce6a5cb7cbffc1c65bc4ce8d674b671751477342ff709366"}, "downloads": -1, "filename": "cudf_cuda100-0.6.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "5e1a61cb2b90c8f3f45d5761f3c45ff2", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 17211278, "upload_time": "2019-03-25T17:51:54", "upload_time_iso_8601": "2019-03-25T17:51:54.335291Z", "url": "https://files.pythonhosted.org/packages/39/a5/a40e0e0290c332cb2c27dd824c3e8f242d56af27cfdb4da92e5ebe0cf076/cudf_cuda100-0.6.1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "d34576e731ec03bdf9808c9b5ba1eac4", "sha256": "ae3feb999913e22fe1eff6f9d9a25aa0f6a1874c10296504cefb811683ad293f"}, "downloads": -1, "filename": "cudf_cuda100-0.6.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d34576e731ec03bdf9808c9b5ba1eac4", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 17216940, "upload_time": "2019-03-25T17:51:58", "upload_time_iso_8601": "2019-03-25T17:51:58.566938Z", "url": "https://files.pythonhosted.org/packages/99/5a/14510e174af0247c462d04f89a4f1cda7a20e8d2729cf77ef9fff6dc2103/cudf_cuda100-0.6.1-cp37-cp37m-manylinux1_x86_64.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e1a61cb2b90c8f3f45d5761f3c45ff2", "sha256": "e18aef59e91dbb70ce6a5cb7cbffc1c65bc4ce8d674b671751477342ff709366"}, "downloads": -1, "filename": "cudf_cuda100-0.6.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "5e1a61cb2b90c8f3f45d5761f3c45ff2", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6,<3.8", "size": 17211278, "upload_time": "2019-03-25T17:51:54", "upload_time_iso_8601": "2019-03-25T17:51:54.335291Z", "url": "https://files.pythonhosted.org/packages/39/a5/a40e0e0290c332cb2c27dd824c3e8f242d56af27cfdb4da92e5ebe0cf076/cudf_cuda100-0.6.1-cp36-cp36m-manylinux1_x86_64.whl"}, {"comment_text": "", "digests": {"md5": "d34576e731ec03bdf9808c9b5ba1eac4", "sha256": "ae3feb999913e22fe1eff6f9d9a25aa0f6a1874c10296504cefb811683ad293f"}, "downloads": -1, "filename": "cudf_cuda100-0.6.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "d34576e731ec03bdf9808c9b5ba1eac4", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6,<3.8", "size": 17216940, "upload_time": "2019-03-25T17:51:58", "upload_time_iso_8601": "2019-03-25T17:51:58.566938Z", "url": "https://files.pythonhosted.org/packages/99/5a/14510e174af0247c462d04f89a4f1cda7a20e8d2729cf77ef9fff6dc2103/cudf_cuda100-0.6.1-cp37-cp37m-manylinux1_x86_64.whl"}]}