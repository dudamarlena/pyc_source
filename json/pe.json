{"info": {"author": "Michael Wayne Goodman", "author_email": "goodman.m.w@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing", "Topic :: Utilities"], "description": "# <img src=\"docs/logo.png\" width=\"60\" alt=\"pe logo\" /> Parsing Expressions\n\n[![PyPI Version](https://img.shields.io/pypi/v/pe)](https://pypi.org/project/pe)\n![Development Status](https://img.shields.io/pypi/status/pe)\n![Python Support](https://img.shields.io/pypi/pyversions/pe)\n![Python Package](https://github.com/goodmami/pe/workflows/Python%20package/badge.svg)\n\n**pe** is a library for parsing expressions, including [parsing\nexpression grammars] (PEGs). It aims to join the expressive power of\nparsing expressions with the familiarity of regular expressions.  For\nexample:\n\n``` python\n>>> import pe\n>>> m = pe.match(r'[\"] (![\"\\\\] . / \"\\\\\" .)* [\"]',\n...              '\"escaped \\\\\"string\\\\\"\" ...')\n>>> m.group()\n'\"escaped \\\\\"string\\\\\"\"'\n\n```\n\n[parsing expression grammars]: https://en.wikipedia.org/wiki/Parsing_expression_grammar\n\n\n## Current Status\n\nPlease note that **pe** is very new and is currently *alpha*-level\nsoftware. The API or behavior may change significantly as things are\nfinalized.\n\n\n## Features and Goals\n\n* Grammar notation is backward-compatible with standard PEG with few extensions\n* A [specification](docs/specification.md) describes the semantic\n  effect of parsing (e.g., for mapping expressions to function calls)\n* Parsers are [fast and memory efficient][benchmarks]\n* The API is intuitive and familiar; it's modeled on the standard\n  API's [re] module\n* Grammar definitions and parser implementations are separate\n  - Optimizations target the abstract grammar definitions\n  - Multiple parsers are available (currently [packrat](pe/packrat.py)\n    for recursive descent and [machine](pe/machine.py) for an\n    iterative \"parsing machine\" as from [Medeiros and Ierusalimschy,\n    2008] and implemented in [LPeg]).\n\n[benchmarks]: https://github.com/goodmami/python-parsing-benchmarks\n[re]: https://docs.python.org/3/library/re.html\n[Medeiros and Ierusalimschy, 2008]: http://www.inf.puc-rio.br/~roberto/docs/ry08-4.pdf\n\n\n## Syntax Overview\n\n**pe** is backward compatible with standard PEG syntax and it is\nconservative with extensions.\n\n```regex\n# terminals\n.            # any single character\n\"abc\"        # string literal\n'abc'        # string literal\n[abc]        # character class\n\n# repeating expressions\ne            # exactly one\ne?           # zero or one (optional)\ne*           # zero or more\ne+           # one or more\n\n# combining expressions\ne1 e2        # sequence of e1 and e2\ne1 / e2      # ordered choice of e1 and e2\n(e)          # subexpression\n\n# lookahead\n&e           # positive lookahead\n!e           # negative lookahead\n\n# (extension) raw substring\n~e           # result of e is matched substring\n\n# (extension) binding\nname:e       # bind result of e to 'name'\n\n# grammars\nName <- ...  # define a rule named 'Name'\n... <- Name  # refer to rule named 'Name'\n```\n\n## Matching Inputs with Parsing Expressions\n\nWhen a parsing expression matches an input, it returns a `Match`\nobject, which is similar to those of Python's\n[re](https://docs.python.org/3/library/re.html) module for regular\nexpressions. The default value of matching terminals is nothing, but\nthe raw (`~`) operator returns the substring the matching expression,\nsimilar to regular expression's capturing groups:\n\n```python\n>>> e = pe.compile(r'[0-9] [.] [0-9]')\n>>> m = e.match('1.4')\n>>> m.group()\n'1.4'\n>>> m.groups()\n()\n>>> e = pe.compile(r'~([0-9] [.] [0-9])')\n>>> m = e.match('1.4')\n>>> m.group()\n'1.4'\n>>> m.groups()\n('1.4',)\n\n```\n\n### Value Bindings\n\nA value binding takes a sub-match (e.g., of a sequence, choice, or\nrepetition) and extracts it from the match's value while associating\nit with a name that is made available in the `Match.groupdict()`\ndictionary.\n\n```python\n>>> e = pe.compile(r'~[0-9] x:(~[.]) ~[0-9]')\n>>> m = e.match('1.4')\n>>> m.groups()\n('1', '4')\n>>> m.groupdict()\n{'x': '.'}\n\n```\n\n### Actions\n\nActions are functions that are called on a match as follows:\n\n``` python\naction(*match.groups(), **match.groupdict())\n```\n\nWhile you can define your own functions that follow this signature,\n**pe** provides some helper functions for common operations, such as\n`pack(func)`, which packs the `*args` into a list and calls\n`func(args)`, or `join(func, sep='')` which joins all `*args` into\na string with `sep.join(args)` and calls `func(argstring)`.\n\nThe return value of the action becomes the value of the\nexpression. Note that the return value of `Match.groups()` is always\nan iterable while `Match.value()` can return a single object.\n\n```python\n>>> from pe.actions import join\n>>> e = pe.compile(r'~([0-9] [.] [0-9])',\n...                actions={'Start': float})\n>>> m = e.match('1.4')\n>>> m.groups()\n(1.4,)\n>>> m.groupdict()\n{}\n>>> m.value()\n1.4\n\n```\n\n## Similar Projects\n\n- [Lark](https://github.com/lark-parser/lark) (Python)\n- [nom](https://github.com/Geal/nom) (Rust)\n- [Parsimonious](https://github.com/erikrose/parsimonious) (Python)\n- [Rosie](https://rosie-lang.org/) (Multiple bindings)\n- [TatSu](https://tatsu.readthedocs.io/en/stable/) (Python)\n- [PEG.js](https://github.com/pegjs/pegjs) (Javascript)\n- [Pegged](https://github.com/PhilippeSigaud/Pegged) (D)\n- [pegen](https://github.com/gvanrossum/pegen) (Python / C)\n- [LPeg] (Lua)\n\n[LPeg]: http://www.inf.puc-rio.br/~roberto/lpeg/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goodmami/pe", "keywords": "peg parsing text", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pe", "package_url": "https://pypi.org/project/pe/", "platform": "", "project_url": "https://pypi.org/project/pe/", "project_urls": {"Homepage": "https://github.com/goodmami/pe"}, "release_url": "https://pypi.org/project/pe/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Parsing Expressions", "version": "0.1.0"}, "last_serial": 7017569, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f169035d7a877aa86d812fea3cc04ae2", "sha256": "a669870941279e84692e786f2e2689d79e1e178b7a292e01fe4e8ad41033e643"}, "downloads": -1, "filename": "pe-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f169035d7a877aa86d812fea3cc04ae2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23728, "upload_time": "2020-04-14T14:43:06", "upload_time_iso_8601": "2020-04-14T14:43:06.371546Z", "url": "https://files.pythonhosted.org/packages/f2/e2/780be06029eb4453efbcef7a558a3e0c6c38c2b02bde50377f54d100982f/pe-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "5b3f7de0b0f0441766a556c404fa83ee", "sha256": "52687ea1663ec6d2c32caf96a841f86944feee232437b38969dc60a8a623b60a"}, "downloads": -1, "filename": "pe-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5b3f7de0b0f0441766a556c404fa83ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25382, "upload_time": "2020-04-14T14:43:07", "upload_time_iso_8601": "2020-04-14T14:43:07.161896Z", "url": "https://files.pythonhosted.org/packages/13/9c/6afdfc9f06e1c0bef68b1d34c12cb586fe87a4dbf204e6f1d4c2109987a3/pe-0.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "f169035d7a877aa86d812fea3cc04ae2", "sha256": "a669870941279e84692e786f2e2689d79e1e178b7a292e01fe4e8ad41033e643"}, "downloads": -1, "filename": "pe-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f169035d7a877aa86d812fea3cc04ae2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23728, "upload_time": "2020-04-14T14:43:06", "upload_time_iso_8601": "2020-04-14T14:43:06.371546Z", "url": "https://files.pythonhosted.org/packages/f2/e2/780be06029eb4453efbcef7a558a3e0c6c38c2b02bde50377f54d100982f/pe-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "5b3f7de0b0f0441766a556c404fa83ee", "sha256": "52687ea1663ec6d2c32caf96a841f86944feee232437b38969dc60a8a623b60a"}, "downloads": -1, "filename": "pe-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5b3f7de0b0f0441766a556c404fa83ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25382, "upload_time": "2020-04-14T14:43:07", "upload_time_iso_8601": "2020-04-14T14:43:07.161896Z", "url": "https://files.pythonhosted.org/packages/13/9c/6afdfc9f06e1c0bef68b1d34c12cb586fe87a4dbf204e6f1d4c2109987a3/pe-0.1.0.tar.gz"}]}