{"info": {"author": "Han Wang", "author_email": "wang_han@iapcm.ac.cn", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Programming Language :: Python :: 3.6"], "description": "# DP-GEN Manual\n\n## Table of Contents\n   * [DP-GEN Manual](#dp-gen-manual)\n      * [Table of Contents](#table-of-contents)\n      * [About DP-GEN](#about-dp-gen)\n         * [Highlighted features](#highlighted-features)\n         * [Code structure and interface](#code-structure-and-interface)\n         * [License and credits](#license-and-credits)\n      * [Download and Install](#download-and-install)\n      * [Init: Preparing Initial Data](#init-preparing-initial-data)\n         * [Init_bulk](#init_bulk)\n         * [Init_surf](#init_surf)\n      * [Run: Main Process of Generator](#run-main-process-of-generator)\n      * [Test: Auto-test for Deep Generator](#test-auto-test-for-deep-generator)\n      * [Set up machine](#set-up-machine)\n      * [Troubleshooting](#troubleshooting)\n      * [License](#license)\n\n\n## About DP-GEN\nDP-GEN (Deep Generator)  is a software written in Python, delicately designed to generate a deep learning based model of interatomic potential energy and force field. DP-GEN is depedent on DeepMD-kit (https://github.com/deepmodeling/deepmd-kit/blob/master/README.md). With highly scalable interface with common softwares for molecular simulation, DP-GEN is capable to  automatically prepare scripts and maintain job queues on HPC machines (High Performance Cluster) and analyze results\n### Highlighted features\n+ **Accurate and efficient**: DP-GEN is capable to sample more than tens of million structures and select only a few for first principles calculation. DP-GEN will finally obtain a uniformly accurate model.\n+ **User-friendly and automatic**: Users may install and run DP-GEN easily. Once succusefully running, DP-GEN can dispatch and handle all jobs on HPCs, and thus there's no need for any personal effort.\n+ **Highly scalable**: With modularized code structures, users and developers can easily extend DP-GEN for their most relevant needs. DP-GEN currently supports for HPC systems (Slurm, PBS, LSF and cloud machines ), Deep Potential interface with DeePMD-kit, MD interface with LAMMPS  and *ab-initio* calculation interface with VASP, PWSCF,SIESTA and Gaussian. We're sincerely welcome and embraced to users' contributions, with more possibilities and cases to use DP-GEN.\n\n### Code structure and interface\n+ dpgen:\n    * data: source codes for preparing initial data of bulk and surf systems.\n\n    * generator: source codes for main process of deep generator.\n\n    * auto_test : source code for undertaking materials property analysis.\n    * remote : source code for automatically submiting scripts,maintaining job queues and collecting results.\n    * database : source code for collecting data generated by DP-GEN and interface with database.\n+ examples : providing example JSON files.\n\n+ tests : unittest tools for developers.\n\nOne can easily run DP-GEN with :\n```\ndpgen TASK PARAM MACHINE\n```\n\nwhere TASK is the key word, PARAM and MACHINE are both JSON files.\n\nOptions for TASK:\n* `init_bulk` : Generating initial data for bulk systems.\n* `init_surf` : Generating initial data for surface systems.\n* `run` : Main process of Deep Generator.\n* `test`: Auto-test for Deep Potential.\n* `db`: Collecting data from DP-GEN.\n\n\n## Download and Install\nOne can download the source code of dpgen by\n```bash\ngit clone https://github.com/deepmodeling/dpgen.git\n```\nthen you may install DP-GEN easily by: \n```bash\ncd dpgen\npip install --user .\n```\nWith this command, the dpgen executable is install to `$HOME/.local/bin/dpgen`. You may want to export the `PATH` by\n```bash\nexport PATH=$HOME/.local/bin/dpgen:$PATH\n```\nTo test if the installation is successful, you may execute\n```bash\ndpgen -h\n```\nand if everything works, it gives\n```\nDeepModeling\n------------\nVersion: 0.5.1.dev53+gddbeee7.d20191020\nDate:    Oct-07-2019\nPath:    /home/me/miniconda3/envs/py363/lib/python3.6/site-packages/dpgen-0.5.1.dev53+gddbeee7.d20191020-py3.6.egg/dpgen\n\nDependency\n------------\n     numpy     1.17.2   /home/me/miniconda3/envs/py363/lib/python3.6/site-packages/numpy\n    dpdata     0.1.10   /home/me/miniconda3/envs/py363/lib/python3.6/site-packages/dpdata-0.1.10-py3.6.egg/dpdata\n  pymatgen   2019.7.2   /home/me/miniconda3/envs/py363/lib/python3.6/site-packages/pymatgen\n     monty      2.0.4   /home/me/miniconda3/envs/py363/lib/python3.6/site-packages/monty\n       ase     3.17.0   /home/me/miniconda3/envs/py363/lib/python3.6/site-packages/ase-3.17.0-py3.6.egg/ase\n  paramiko      2.6.0   /home/me/miniconda3/envs/py363/lib/python3.6/site-packages/paramiko\n custodian  2019.2.10   /home/me/miniconda3/envs/py363/lib/python3.6/site-packages/custodian\n\nDescription\n------------\nusage: dpgen [-h] {init_surf,init_bulk,run,run/report,test,db} ...\n\ndpgen is a convenient script that uses DeepGenerator to prepare initial data,\ndrive DeepMDkit and analyze results. This script works based on several sub-\ncommands with their own options. To see the options for the sub-commands, type\n\"dpgen sub-command -h\".\n\npositional arguments:\n  {init_surf,init_bulk,run,run/report,test,db}\n    init_surf           Generating initial data for surface systems.\n    init_bulk           Generating initial data for bulk systems.\n    run                 Main process of Deep Potential Generator.\n    run/report          Report the systems and the thermodynamic conditions of\n                        the labeled frames.\n    test                Auto-test for Deep Potential.\n    db                  Collecting data from Deep Generator.\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n```\n\n\n## Init: Preparing Initial Data\n\n### Init_bulk\n\nYou may prepare initial data for bulk systems with VASP by:\n\n```bash\ndpgen init_bulk PARAM [MACHINE]\n```\nThe MACHINE configure file is optional. If this parameter exists, then the optimization \ntasks or MD tasks will be submitted automatically according to MACHINE.json.\n\nBasically `init_bulk` can be devided into four parts , denoted as `stages` in `PARAM`:\n1. Relax in folder `00.place_ele`\n2. Pertub and scale in folder `01.scale_pert`\n3. Run a shor AIMD in folder `02.md`\n4. Collect data in folder `02.md`.\n\nAll stages must be **in order**. One doesn't need to run all stages. For example, you may run stage 1 and 2, generating supercells as starting point of exploration in `dpgen run`.\n\nIf MACHINE is None, there should be only one stage in stages. Corresponding tasks will be generated, but user's intervention should be involved in, to manunally run the scripts.\n\nFollowing is an example for `PARAM`, which generates data from a typical structure hcp.\n```json\n{\n    \"stages\" : [1,2,3,4],\n    \"cell_type\":    \"hcp\",\n    \"latt\":     4.479,\n    \"super_cell\":   [2, 2, 2],\n    \"elements\":     [\"Mg\"],\n    \"potcars\":      [\"....../POTCAR\"],\n    \"relax_incar\": \"....../INCAR_metal_rlx\",\n    \"md_incar\" : \"....../INCAR_metal_md\",\n    \"scale\":        [1.00],\n    \"skip_relax\":   false,\n    \"pert_numb\":    2,\n    \"md_nstep\" : 5,\n    \"pert_box\":     0.03,\n    \"pert_atom\":    0.01,\n    \"coll_ndata\":   5000,\n    \"type_map\" : [ \"Mg\", \"Al\"],\n    \"_comment\":     \"that's all\"\n}\n```\n\nIf you want to specify a structure as starting point for `init_bulk`, you may set in `PARAM` as follows.\n\n```json\n\"from_poscar\":\ttrue,\n\"from_poscar_path\":\t\"....../C_mp-47_conventional.POSCAR\",\n```\nThe following table gives explicit descriptions on keys in `PARAM`.\n\nThe bold notation of key (such as **Elements**) means that it's a necessary key.\n\n Key  | Type          | Example                                                      | Discription                                                      |\n| :---------------- | :--------------------- | :-------------------------------------- | :-------------------------------------------------------------|\n| **stages** | List of Integer | [1,2,3,4] | Stages for `init_bulk`\n| **Elements** | List of String | [\"Mg\"] | Atom types\n|  cell_type | String  | \"hcp\" | Specifying which typical structure to be generated. **Options** include fcc, hcp, bcc, sc, diamond.\n| latt | Float | 4.479 | Lattice constant for single cell.\n| from_poscar | Boolean | True | Deciding whether to use a given poscar as the beginning of relaxation. If it's true, keys (`cell_type`, `latt`) will be aborted. Otherwise, these two keys are **necessary**.\n| from_poscar_path | String | \"....../C_mp-47_conventional.POSCAR\" | Path of POSCAR. **Necessary** if `from_poscar` is true.\n| relax_incar | String | \"....../INCAR\" | Path of INCAR for relaxation in VASP. **Necessary** if `stages` include 1.\n| md_incar | String |  \"....../INCAR\" | Path of INCAR for MD in VASP. **Necessary** if `stages` include 3.|\n| **scale** | List of float | [0.980, 1.000, 1.020] | Scales for transforming cells.\n| **skip_relax** | Boolean | False | If it's true, you may directly run stage 2 (pertub and scale) using an unrelaxed POSCAR.\n| **pert_numb** | Integer | 30 | Number of pertubations for each POSCAR.\n| **pert_box** | Float | 0.03 | Percentage of Perturbation for cells.\n| **pert_atom** | Float | 0.01 | Pertubation of each atoms (Angstrom).\n| **md_nstep** | Integer | 10 | Steps of AIMD in stage 3. If it's not equal to settings via `NSW` in `md_incar`, DP-GEN will follow `NSW`.\n| **coll_ndata** | Integer | 5000 | Maximal number of collected data.\n| type_map | List | [ \"Mg\", \"Al\"] | The indices of elements in deepmd formats will be set in this order.\n\n### Init_surf\n\nYou may prepare initial data for surface systems with VASP by:\n\n```bash\ndpgen init_surf PARAM [MACHINE]\n```\nThe MACHINE configure file is optional. If this parameter exists, then the optimization\ntasks or MD tasks will be submitted automatically according to MACHINE.json.\n\nBasically `init_surf` can be devided into two parts , denoted as `stages` in `PARAM`:\n1. Build specific surface in folder `00.place_ele`\n2. Pertub and scale in folder `01.scale_pert`\n\nAll stages must be **in order**.\n\nFollowing is an example for `PARAM`, which generates data from a typical structure hcp.\n```json\n{\n  \"stages\": [\n    1,\n    2\n  ],\n  \"cell_type\": \"fcc\",\n  \"latt\": 4.034,\n  \"super_cell\": [\n    2,\n    2,\n    2\n  ],\n  \"layer_numb\": 3,\n  \"vacuum_max\": 9,\n  \"vacuum_resol\": [\n    0.5,\n    1\n  ],\n  \"mid_point\": 4.0,\n  \"millers\": [\n    [\n      1,\n      0,\n      0\n    ],\n    [\n      1,\n      1,\n      0\n    ],\n    [\n      1,\n      1,\n      1\n    ]\n  ],\n  \"elements\": [\n    \"Al\"\n  ],\n  \"potcars\": [\n    \"....../POTCAR\"\n  ],\n  \"relax_incar\": \"....../INCAR_metal_rlx_low\",\n  \"scale\": [\n    1.0\n  ],\n  \"skip_relax\": true,\n  \"pert_numb\": 2,\n  \"pert_box\": 0.03,\n  \"pert_atom\": 0.01,\n  \"_comment\": \"that's all\"\n}\n```\n\nThe following table gives explicit descriptions on keys in `PARAM`.\n\nThe bold notation of key (such as **Elements**) means that it's a necessary key.\n\n Key  | Type          | Example                                                      | Discription                                                      |\n| :---------------- | :--------------------- | :-------------------------------------- | :-------------------------------------------------------------|\n| **stages** | List of Integer | [1,2,3,4] | Stages for `init_surf`\n| **Elements** | List of String | [\"Mg\"] | Atom types\n|  **cell_type** | String  | \"hcp\" | Specifying which typical structure to be generated. **Options** include fcc, hcp, bcc, sc, diamond.\n| **latt** | Float | 4.479 | Lattice constant for single cell.\n| **layer_numb** | Integer | 3 | Number of equavilent layers of slab.\n| **vacuum_max** | Float | 9 | Maximal thickness of vacuum (Angstrom).\n| **vacuum_resol** | List of float | [0.5, 1 ] | Interval of thichness of vacuum. If size of `vacuum_resol` is 1, the interval is fixed to its value. If size of `vacuum_resol` is 2, the interval is `vacuum_resol[0]` before `mid_point`, otherwise `vacuum_resol[1]` after `mid_point`.\n| **millers** | List of list of Integer | [[1,0,0]] | Miller indices. \n| relax_incar | String | \"....../INCAR\" | Path of INCAR for relaxation in VASP. **Necessary** if `stages` include 1.\n| **scale** | List of float | [0.980, 1.000, 1.020] | Scales for transforming cells.\n| **skip_relax** | Boolean | False | If it's true, you may directly run stage 2 (pertub and scale) using an unrelaxed POSCAR.\n| **pert_numb** | Integer | 30 | Number of pertubations for each POSCAR.\n| **pert_box** | Float | 0.03 | Percentage of Perturbation for cells.\n| **pert_atom** | Float | 0.01 | Pertubation of each atoms (Angstrom).\n| **coll_ndata** | Integer | 5000 | Maximal number of collected data.\n\n\n## Run: Main Process of Generator\n\n\nYou may call the main process by:\n`dpgen run PARAM MACHINE`.\n\n\nThe whole process of generator will contain a series of iterations, succussively undertaken in order such as heating the system to certain temperature.\n\nIn each iteration, there are three stages of work, namely, `00.train  01.model_devi  02.fp`.\n\n+ 00.train: DP-GEN will train several (default 4) models based on initial and generated data. The only difference between these models is the random seed for neural network initialization.\n\n+ 01.model_devi : represent for model-deviation. DP-GEN will use models obtained from 00.train to run Molecular Dynamics(default LAMMPS). Larger deviation for structure properties (default is force of atoms) means less accuracy of the models. Using this criterion, a few fructures will be selected and put into next stage `02.fp` for more accurate calculation based on First Principles.\n\n+ 02.fp : Selected structures will be calculated by first principles methods(default VASP). DP-GEN will obtain some new data and put them together with initial data and data generated in previous iterations. After that a new training will be set up and DP-GEN will enter next iteration!\n\nDP-GEN identifies the current stage by a record file, `record.dpgen`, which will be created and upgraded by codes.Each line contains two number: the first is index of iteration, and the second ,ranging from 0 to 9 ,records which stage in each iteration is currently running.\n\n0,1,2 correspond to make_train, run_train, post_train. DP-GEN will write scripts in `make_train`, run the task by specific machine in `run_train` and collect result in `post_train`. The records for model_devi and fp stage follow similar rules.\n\n\nIn `PARAM`, you can specialize the task as you expect.\n\n\n```json\n{\n  \"type_map\": [\n    \"H\",\n    \"C\"\n  ],\n  \"mass_map\": [\n    1,\n    12\n  ],\n  \"init_data_prefix\": \"....../init/\",\n  \"init_data_sys\": [\n    \"CH4.POSCAR.01x01x01/02.md/sys-0004-0001/deepmd\"\n  ],\n  \"init_batch_size\": [\n    8\n  ],\n  \"sys_configs_prefix\": \"....../init/\",\n  \"sys_configs\": [\n    [\n      \"CH4.POSCAR.01x01x01/01.scale_pert/sys-0004-0001/scale*/00000*/POSCAR\"\n    ],\n    [\n      \"CH4.POSCAR.01x01x01/01.scale_pert/sys-0004-0001/scale*/00001*/POSCAR\"\n    ]\n  ],\n  \"sys_batch_size\": [\n    8,\n    8,\n    8,\n    8\n  ],\n  \"_comment\": \" that's all \",\n  \"numb_models\": 4,\n  \"train_param\": \"input.json\",\n  \"default_training_param\": {\n    \"_comment\": \"that's all\",\n    \"use_smooth\": true,\n    \"sel_a\": [\n      16,\n      4\n    ],\n    \"rcut_smth\": 0.5,\n    \"rcut\": 5,\n    \"filter_neuron\": [\n      10,\n      20,\n      40\n    ],\n    \"filter_resnet_dt\": false,\n    \"n_axis_neuron\": 12,\n    \"n_neuron\": [\n      100,\n      100,\n      100\n    ],\n    \"resnet_dt\": true,\n    \"coord_norm\": true,\n    \"type_fitting_net\": false,\n    \"systems\": [],\n    \"set_prefix\": \"set\",\n    \"stop_batch\": 40000,\n    \"batch_size\": 1,\n    \"start_lr\": 0.001,\n    \"decay_steps\": 200,\n    \"decay_rate\": 0.95,\n    \"seed\": 0,\n    \"start_pref_e\": 0.02,\n    \"limit_pref_e\": 2,\n    \"start_pref_f\": 1000,\n    \"limit_pref_f\": 1,\n    \"start_pref_v\": 0.0,\n    \"limit_pref_v\": 0.0,\n    \"disp_file\": \"lcurve.out\",\n    \"disp_freq\": 1000,\n    \"numb_test\": 4,\n    \"save_freq\": 1000,\n    \"save_ckpt\": \"model.ckpt\",\n    \"load_ckpt\": \"model.ckpt\",\n    \"disp_training\": true,\n    \"time_training\": true,\n    \"profiling\": false,\n    \"profiling_file\": \"timeline.json\"\n  },\n  \"model_devi_dt\": 0.002,\n  \"model_devi_skip\": 0,\n  \"model_devi_f_trust_lo\": 0.05,\n  \"model_devi_f_trust_hi\": 0.15,\n  \"model_devi_clean_traj\": true,\n  \"model_devi_jobs\": [\n    {\n      \"sys_idx\": [\n        0\n      ],\n      \"temps\": [\n        100\n      ],\n      \"press\": [\n        1.0\n      ],\n      \"trj_freq\": 10,\n      \"nsteps\": 300,\n      \"ensemble\": \"nvt\",\n      \"_idx\": \"00\"\n    },\n    {\n      \"sys_idx\": [\n        1\n      ],\n      \"temps\": [\n        100\n      ],\n      \"press\": [\n        1.0\n      ],\n      \"trj_freq\": 10,\n      \"nsteps\": 3000,\n      \"ensemble\": \"nvt\",\n      \"_idx\": \"01\"\n    }\n  ],\n  \"fp_style\": \"vasp\",\n  \"shuffle_poscar\": false,\n  \"fp_task_max\": 20,\n  \"fp_task_min\": 1,\n  \"fp_pp_path\": \"....../methane/\",\n  \"fp_pp_files\": [\n    \"POTCAR\"\n  ],\n  \"fp_incar\": \"....../INCAR_methane\"\n}\n```\n\nThe following table gives explicit descriptions on keys in `PARAM`.\n\nThe bold notation of key (such aas **type_map**) means that it's a necessary key.\n\n Key  | Type          | Example                                                      | Discription                                                      |\n| :---------------- | :--------------------- | :-------------------------------------- | :-------------------------------------------------------------|\n| *#Basics*\n| **type_map** | List of string | [\"H\", \"C\"] | Atom types\n| **mass_map** | List of float |  [1, 12] | Standard atom weights.\n| **use_ele_temp** | int | 0 | Currently only support fp_style vasp. 0(default): no electron temperature. 1: eletron temperature as frame parameter. 2: electron temperature as atom parameter.\n| *#Data*\n | init_data_prefix | String | \"/sharedext4/.../data/\" | Prefix of initial data directories\n | ***init_data_sys*** | List of string|[\"CH4.POSCAR.01x01x01/.../deepmd\"] |Directories of initial data. You may use either absolute or relative path here.\n | ***sys_format*** | String | \"vasp/poscar\" | Format of initial data. It will be `vasp/poscar` if not set.\n | init_multi_systems | Boolean | false | If set to `true`, `init_data_sys` directories should contain sub-directories of various systems. DP-GEN will regard all of these sub-directories as inital data systems.\n | **init_batch_size**   | String of integer     | [8]                                                            | Each number is the batch_size of corresponding system  for training in `init_data_sys`. One recommended rule for setting the `sys_batch_size` and `init_batch_size` is that `batch_size` mutiply number of atoms ot the stucture should be larger than 32. If set to `auto`, batch size will be 32 divided by number of atoms. |\n  | sys_configs_prefix | String | \"/sharedext4/.../data/\" | Prefix of `sys_configs`\n | **sys_configs**   | List of list of string         | [<br />[\"/sharedext4/.../POSCAR\"], <br />[\"....../POSCAR\"]<br />] | Containing directories of structures to be explored in iterations.Wildcard characters are supported here. |\n| **sys_batch_size**      | List of integer   | [8, 8]                                                 | Each number  is the batch_size for training of corresponding system in `sys_configs`. If set to `auto`, batch size will be 32 divided by number of atoms. |\n| *#Training*\n| **numb_models**      | Integer      | 4 (recommend)                                                           | Number of models to be trained in `00.train`. |\n| **default_training_param** | Dict | {<br />... <br />\"use_smooth\": true, <br/>\"sel_a\": [16, 4], <br/>\"rcut_smth\": 0.5, <br/>\"rcut\": 5, <br/>\"filter_neuron\": [10, 20, 40], <br/>...<br />} | Training parameters for `deepmd-kit` in `00.train`. <br /> You can find instructions from here: (https://github.com/deepmodeling/deepmd-kit)..<br /> We commonly let `stop_batch` = 200 * `decay_steps`. |\n| *#Exploration*\n| **model_devi_dt** | Float | 0.002 (recommend) | Timestep for MD |\n| **model_devi_skip** | Integer | 0 | Number of structures skipped for fp in each MD\n| **model_devi_f_trust_lo** | Float | 0.05 | Lower bound of forces for the selection.\n | **model_devi_f_trust_hi** | Float | 0.15 | Upper bound of forces for the selection\n| **model_devi_e_trust_lo**  | Float | 1e10                                                         | Lower bound of energies for the selection. Recommend to set them a high number, since forces provide more precise information. Special cases such as energy minimization may need this. |\n| **model_devi_e_trust_hi**  | Float | 1e10                                                         | Upper bound of energies for the selection. |\n| **model_devi_clean_traj**  | Boolean | true                                                         | Deciding whether to clean traj folders in MD since they are too large. |\n| **model_devi_jobs**        | [<br/>{<br/>\"sys_idx\": [0], <br/>\"temps\": <br/>[100],<br/>\"press\":<br/>[1],<br/>\"trj_freq\":<br/>10,<br/>\"nsteps\":<br/> 1000,<br/> \"ensembles\": <br/> \"nvt\" <br />},<br />...<br />] | List of dict | Settings for exploration in `01.model_devi`. Each dict in the list corresponds to one iteration. The index of `model_devi_jobs` exactly accord with index of iterations |\n| **model_devi_jobs[\"sys_idx\"]**    | List of integer           | [0]                                                          | Systems to be selected as the initial structure of MD and be explored. The index corresponds exactly to the `sys_configs`. |\n| **model_devi_jobs[\"temps\"]**  | List of integer | [50, 300] | Temperature (**K**) in MD\n| **model_devi_jobs[\"press\"]**  | List of integer | [1,10] | Pressure (**Bar**) in MD\n| **model_devi_jobs[\"trj_freq\"]**   | Integer  | 10                                                            | Frequecy of trajectory saved in MD.                   |\n| **model_devi_jobs[\"nsteps\"]**     | Integer      | 3000                                                         | Running steps of MD.                                  |\n| **model_devi_jobs[\"ensembles\"]** | String             | \"nvt\"                                    | Determining which ensemble used in MD, **options** include \u201cnpt\u201d and \u201cnvt\u201d. |\n| model_devi_jobs[\"neidelay\"] | Integer             | \"10\"                                    | delay building until this many steps since last build |\n| model_devi_jobs[\"taut\"] | Float          | \"0.1\"                                    | Coupling time of thermostat (fs) |\n| model_devi_jobs[\"taup\"] | Float             | \"0.5\"                                    | Coupling time of barostat (fs)\n| *#Labeling*\n| **fp_style** | string                | \"vasp\"                                                       | Software for First Principles. **Options** include \u201cvasp\u201d, \u201cpwscf\u201d, \u201csiesta\u201d and \u201cgaussian\u201d up to now. |\n| **fp_task_max** | Integer            | 20                                                           | Maximum of  structures to be calculated in `02.fp` of each iteration. |\n| **fp_task_min**     | Integer        | 5                                                            | Minimum of structures to calculate in `02.fp` of each iteration. |\n| *fp_style == VASP*\n| **fp_pp_path**   | String           | \"/sharedext4/.../ch4/\"                                       | Directory of psuedo-potential file to be used for 02.fp exists. |\n| **fp_pp_files**    | List of string         | [\"POTCAR\"]                                                   | Psuedo-potential file to be used for 02.fp. Note that the order of elements should correspond to the order in `type_map`. |\n|**fp_incar** | String | \"/sharedext4/../ch4/INCAR\" | Input file for VASP. INCAR must specify KSPACING.\n|cvasp| Boolean | true | If `cvasp` is true, DP-GEN will use Custodian to help control VASP calculation.\n| *fp_style == Gaussian*\n| **use_clusters** | Boolean | false | If set to `true`, clusters will be taken instead of the whole system. This option does not work with DeePMD-kit 0.x.\n| **cluster_cutoff**| Float | 3.5 | The cutoff radius of clusters if `use_clusters` is set to `true`.\n| **fp_params** | Dict | | Parameters for Gaussian calculation.\n|**fp_params[\"keywords\"]** | String or list | \"mn15/6-31g** nosymm scf(maxcyc=512)\" | Keywords for Gaussian input.\n|**fp_params[\"multiplicity\"]**| Integer or String | 1 | Spin multiplicity for Gaussian input. If set to `auto`, the spin multiplicity will be detected automatically. If set to `frag`, the \"fragment=N\" method will be used.\n|**fp_params[\"nproc\"]** | Integer| 4 | The number of processors for Gaussian input.\n| *fp_style == siesta*\n| **use_clusters** | Boolean | false | If set to `true`, clusters will be taken instead of the whole system. This option does not work with DeePMD-kit 0.x.\n| **cluster_cutoff**| Float | 3.5 | The cutoff radius of clusters if `use_clusters` is set to `true`.\n| **fp_params** | Dict | | Parameters for siesta calculation.\n|**fp_params[\"ecut\"]** | Integer | 300 | Define the plane wave cutoff for grid.\n|**fp_params[\"ediff\"]**| Float | 1e-4 | Tolerance of Density Matrix.\n|**fp_params[\"kspacing\"]** | Float| 0.4 | Sample factor in Brillouin zones.\n|**fp_params[\"mixingweight\"]** | Float| 0.05 | Proportion a of output Density Matrix to be used for the input Density Matrix of next SCF cycle (linear mixing).\n|**fp_params[\"NumberPulay\"]** | Integer| 5 | Controls the Pulay convergence accelerator.\n\n## Test: Auto-test for Deep Generator\nAt this step, we assume that you have prepared some graph files like `graph.*.pb` and the particular pseudopotential `POTCAR`.\n\nThe main code of this step is\n```\ndpgen test PARAM MACHINE\n```\nwhere `PARAM` and `MACHINE` are both json files. `MACHINE` is the same as above.\n\nThe whole program contains a series of tasks shown as follows. In each task, there are three stages of work, generate, run and compute.\n+ `00.equi`:(default task) the equilibrium state\n\n+ `01.eos`: the equation of state\n\n+ `02.elastic`: the elasticity like Young's module\n\n+ `03.vacancy`: the vacancy formation energy\n\n+ `04.interstitial`: the interstitial formation energy\n\n+ `05.surf`: the surface formation energy\n\n\nWe take Al as an example to show the parameter settings of `param.json`.\nThe first part is the fundamental setting for particular alloy system.\n```json\n    \"_comment\": \"models\",\n    \"potcar_map\" : {\n\t\"Al\" : \"/somewhere/POTCAR\"\n    },\n    \"conf_dir\":\"confs/Al/std-fcc\",\n    \"key_id\":\"API key of Material project\",\n    \"task_type\":\"deepmd\",\n    \"task\":\"eos\",\n```\nYou need to add the specified paths of necessary `POTCAR` files in \"potcar_map\". The different `POTCAR` paths are separated by commas.\nThen you also need to add the folder path of particular configuration, which contains `POSCAR` file.\n```\n\"confs/[element or alloy]/[std-* or mp-**]\"\nstd-*: standard structures, * can be fcc, bcc, hcp and so on.\nmp-**: ** means Material id from Material Project.\n```\nUsually, if you add the relative path of POSCAR as the above format,\n`dpgen test` will check the existence of such file and automatically downloads the standard and existed configurations of the given element or alloy from Materials Project and stores them in **confs** folder, which needs the API key of Materials project.\n\n+ `task_type` contains 3 optional types for testing, i.e. **vasp**, **deepmd** and **meam**.\n+ `task` contains 7 options, **equi**, **eos**, **elastic**, **vacancy**, **interstitial**, **surf** and **all**. The option **all** can do all the tasks.\n\nIt is worth noting that the subsequent tasks need to rely on the calculation results of the equilibrium state, so it is necessary to give priority to the calculation of the equilibrium state while testing. And due to the stable consideration, we recommand you to test the equilibrium state of **vasp** before other tests.\n\nThe second part is the computational settings for vasp and lammps. According to your actual needs\uff0c you can choose to add the paths of specific INCAR or use the simplified INCAR by setting `vasp_params`. The priority of specified INCAR is higher than using `vasp_params`. The most important setting is to add the folder path `model_dir` of **deepmd** model and supply the corresponding element type map. Besides, `dpgen test` also is able to call common lammps packages, such as **meam**.\n```json\n\"relax_incar\":\"somewhere/relax_incar\",\n\"scf_incar\":\"somewhere/scf_incar\",\n\"vasp_params\":\t{\n\t\"ecut\":\t\t650,\n\t\"ediff\":\t1e-6,\n\t\"kspacing\":\t0.1,\n\t\"kgamma\":\tfalse,\n\t\"npar\":\t\t1,\n\t\"kpar\":\t\t1,\n\t\"_comment\":\t\" that's all \"\n    },\n    \"lammps_params\":    {\n        \"model_dir\":\"somewhere/example/Al_model\",\n        \"type_map\":[\"Al\"],\n        \"model_name\":false,\n        \"model_param_type\":false\n    },\n```\nThe last part is the optional settings for various tasks mentioned above. You can change the parameters according to actual needs.\n```json\n    \"_comment\":\"00.equi\",\n    \"store_stable\":true,\n```\n+ `store_stable`:(boolean) whether to store the stable energy and volume\n\n```json\n    \"_comment\": \"01.eos\",\n    \"vol_start\":\t12,\n    \"vol_end\":\t\t22,\n    \"vol_step\":\t\t0.5,\n```\n+ `vol_start`, `vol_end` and `vol_step` determine the volumetric range and accuracy of the **eos**.\n\n```json\n    \"_comment\": \"02.elastic\",\n    \"norm_deform\":\t2e-2,\n    \"shear_deform\":\t5e-2,\n```\n+ `norm_deform` and `shear_deform` are the scales of material deformation.\nThis task uses the stress-strain relationship to calculate the elastic constant.\n\n```json\n    \"_comment\":\"03.vacancy\",\n    \"supercell\":[3,3,3],\n```\n+ `supercell`:(list of integer) the supercell size used to generate vacancy defect and interstitial defect\n```json\n    \"_comment\":\"04.interstitial\",\n    \"insert_ele\":[\"Al\"],\n    \"reprod-opt\":false,\n```\n+ `insert_ele`:(list of string) the elements used to generate point interstitial defect\n+ `repord-opt`:(boolean) whether to reproduce trajectories of interstitial defect\n\n```json\n    \"_comment\": \"05.surface\",\n    \"min_slab_size\":\t10,\n    \"min_vacuum_size\":\t11,\n    \"_comment\": \"pert xz to work around vasp bug...\",\n    \"pert_xz\":\t\t0.01,\n    \"max_miller\": 2,\n    \"static-opt\":false,\n    \"relax_box\":false,\n```\n+ `min_slab_size` and `min_vacuum_size` are the minimum size of slab thickness  and  the vacuume width.\n+ `pert_xz` is the perturbation through xz direction used to compute surface energy.\n+ `max_miller` (integer) is the maximum miller index\n+ `static-opt`:(boolean) whether to use atomic relaxation to compute surface energy. if false, the structure will be relaxed.\n+ `relax_box`:(boolean) set true if the box is relaxed, otherwise only relax atom positions.\n\n\n\n\n## Set up machine\nWhen switching into a new machine, you may modifying the `MACHINE`, according to the actual circumstance. Once you have finished, the `MACHINE` can be re-used for any DP-GEN tasks without any extra efforts.\n\nAn example for `MACHINE` is:\n```json\n{\n  \"train\": [\n    {\n      \"machine\": {\n        \"machine_type\": \"slurm\",\n        \"hostname\": \"localhost\",\n        \"port\": 22,\n        \"username\": \"Angus\",\n        \"work_path\": \"....../work\"\n      },\n      \"resources\": {\n        \"numb_node\": 1,\n        \"numb_gpu\": 1,\n        \"task_per_node\": 4,\n        \"partition\": \"AdminGPU\",\n        \"exclude_list\": [],\n        \"source_list\": [\n          \"....../train_tf112_float.env\"\n        ],\n        \"module_list\": [],\n        \"time_limit\": \"23:0:0\",\n        \"qos\": \"data\"\n      },\n      \"deepmd_path\": \"....../tf1120-lowprec\"\n    }\n  ],\n  \"model_devi\": [\n    {\n      \"machine\": {\n        \"machine_type\": \"slurm\",\n        \"hostname\": \"localhost\",\n        \"port\": 22,\n        \"username\": \"Angus\",\n        \"work_path\": \"....../work\"\n      },\n      \"resources\": {\n        \"numb_node\": 1,\n        \"numb_gpu\": 1,\n        \"task_per_node\": 2,\n        \"partition\": \"AdminGPU\",\n        \"exclude_list\": [],\n        \"source_list\": [\n          \"......./lmp_tf112_float.env\"\n        ],\n        \"module_list\": [],\n        \"time_limit\": \"23:0:0\",\n        \"qos\": \"data\"\n      },\n      \"command\": \"lmp_serial\",\n      \"group_size\": 1\n    }\n  ],\n  \"fp\": [\n    {\n      \"machine\": {\n        \"machine_type\": \"slurm\",\n        \"hostname\": \"localhost\",\n        \"port\": 22,\n        \"username\": \"Angus\",\n        \"work_path\": \"....../work\"\n      },\n      \"resources\": {\n        \"task_per_node\": 4,\n        \"numb_gpu\": 1,\n        \"exclude_list\": [],\n        \"with_mpi\": false,\n        \"source_list\": [],\n        \"module_list\": [\n          \"mpich/3.2.1-intel-2017.1\",\n          \"vasp/5.4.4-intel-2017.1\",\n          \"cuda/10.1\"\n        ],\n        \"time_limit\": \"120:0:0\",\n        \"partition\": \"AdminGPU\",\n        \"_comment\": \"that's All\"\n      },\n      \"command\": \"vasp_gpu\",\n      \"group_size\": 1\n    }\n  ]\n}\n```\nFollowing table illustrates which key is needed for three types of machine: `train`,`model_devi`  and `fp`. Each of them is a list of dicts. Each dict can be considered as an independent environmnet for calculation.\n\n Key   | `train`          | `model_devi`                                                    | `fp`                                                     |\n| :---------------- | :--------------------- | :-------------------------------------- | :-------------------------------------------------------------|\n| machine | NEED  | NEED | NEED\n| resources | NEED | NEED | NEED\n| deepmd_path | NEED |\n| command |  |NEED |  NEED |\n| group_size | | NEED | NEED |\n\nThe following table gives explicit descriptions on keys in param.json.\n\n\n Key   | Type       | Example                                                  | Discription                                                     |\n| :---------------- | :--------------------- | :-------------------------------------- | :-------------------------------------------------------------|\n|deepmd_path | String |\"......tf1120-lowprec\" | Installed directory of DeepMD-Kit 0.x, which should contain `bin lib include`.\n| python_path | String | \"....../python3.6/bin/python\" | Python path for DeePMD-kit 1.x installed. This option should not be used with `deepmd_path` together.\n| machine | Dict | | Settings of the machine for TASK.\n| resources | Dict | | Resources needed for calculation.\n| # Followings are keys in resources\n| numb_node | Integer | 1 | Node count required for the job\n| task_per_node | Integer | 4 | Number of CPU cores required\n| `numb_gpu` | Integer | 4 | Number of GPUs required\n| source_list | List of string | \"....../vasp.env\" | Environment needed for certain job. For example, if \"env\" is in the list, 'source env' will be written in the script.\n| module_list | List of string | [ \"Intel/2018\", \"Anaconda3\"] | For example, If \"Intel/2018\" is in the list, \"module load Intel/2018\" will be written in the script.\n| partition | String  | \"AdminGPU\" | Partition / queue in which to run the job. |\n| time_limit | String (time format) | 23:00:00 | Maximal time permitted for the job |\nmem_limit | Interger | 16 | Maximal memory permitted to apply for the job.\n| with_mpi | Boolean | true | Deciding whether to use mpi for calculation. If it's true and machine type is Slurm, \"srun\" will be prefixed to `command` in the script.\n| qos | \"string\"| \"bigdata\" | Deciding priority, dependent on particular settings of your HPC.\n| # End of resources\n| command | String | \"lmp_serial\" | Executable path of software, such as `lmp_serial`, `lmp_mpi` and `vasp_gpu`, `vasp_std`, etc.\n| group_size | Integer | 5 | DP-GEN will put these jobs together in one submitting script.\n| allow_failure | Boolean | false | Allow the command to return a non-zero exit code.\n\n## Troubleshooting\n1. The most common problem is whether two settings correspond with each other, including:\n    - The order of elements in `type_map` and `mass_map` and **`fp_pp_files`**.\n    - Size of `init_data_sys` and `init_batch_size`.\n    - Size of `sys_configs` and `sys_batch_size`.\n    - Size of `sel_a` and actual types of atoms in your system.\n    - Index of `sys_configs` and `sys_idx`\n\n2. Please verify the directories of `sys_configs`. If there isnt's any POSCAR for `01.model_devi` in one iteration, it may happen that you write the false path of `sys_configs`.\n3. Correct format of JSON file. \n4. In `02.fp`, total cores you require through `task_per_node` should be devided by `npar` times `kpar`.\n5. The frames of one system should be larger than `batch_size` and `numb_test` in `default_training_param`. It happens that one iteration adds only a few structures and causes error in next iteration's training. In this condition, you may let `fp_task_min` be larger than `numb_test`.\n## License\nThe project dpgen is licensed under [GNU LGPLv3.0](./LICENSE).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deepmodeling/dpgen", "keywords": "deep potential generator active learning deepmd-kit", "license": "", "maintainer": "", "maintainer_email": "", "name": "dpgen", "package_url": "https://pypi.org/project/dpgen/", "platform": "", "project_url": "https://pypi.org/project/dpgen/", "project_urls": {"Homepage": "https://github.com/deepmodeling/dpgen"}, "release_url": "https://pypi.org/project/dpgen/0.6.0/", "requires_dist": null, "requires_python": "~=3.6", "summary": "DPGen: The deep potential generator", "version": "0.6.0"}, "last_serial": 6381230, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "7925dfe7c82cc0aa286c9e3c0191d9aa", "sha256": "2f7d88a9e95de0474d3ec06ec04abb7daad2f37eb5dce79f015caea3e24a02a0"}, "downloads": -1, "filename": "dpgen-0.6.0.tar.gz", "has_sig": false, "md5_digest": "7925dfe7c82cc0aa286c9e3c0191d9aa", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 3075901, "upload_time": "2020-01-01T02:34:31", "upload_time_iso_8601": "2020-01-01T02:34:31.654147Z", "url": "https://files.pythonhosted.org/packages/8b/cd/190878b062266d5c2a23122f8fa74e62d9aba44770c81a73f403bafc37de/dpgen-0.6.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "7925dfe7c82cc0aa286c9e3c0191d9aa", "sha256": "2f7d88a9e95de0474d3ec06ec04abb7daad2f37eb5dce79f015caea3e24a02a0"}, "downloads": -1, "filename": "dpgen-0.6.0.tar.gz", "has_sig": false, "md5_digest": "7925dfe7c82cc0aa286c9e3c0191d9aa", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.6", "size": 3075901, "upload_time": "2020-01-01T02:34:31", "upload_time_iso_8601": "2020-01-01T02:34:31.654147Z", "url": "https://files.pythonhosted.org/packages/8b/cd/190878b062266d5c2a23122f8fa74e62d9aba44770c81a73f403bafc37de/dpgen-0.6.0.tar.gz"}]}