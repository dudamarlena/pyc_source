{"info": {"author": "4teamwork AG", "author_email": "mailto:info@4teamwork.ch", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Plone :: 4.3", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\n============\n\n``ftw.monitor`` automatically starts a `zc.monitor <https://pypi.org/project/zc.monitor/>`_ server on instance boot.\n\nThis monitor server supports a ``health_check`` command that can be used as\na TCP health check in HAProxy or service monitoring framworks.\n\n``ftw.monitor`` is an alternative to `collective.monitor <https://pypi.org/project/collective.monitor/>`_\nor `five.z2monitor <https://pypi.org/project/five.z2monitor/>`_ in that it\ncompletly relies on **autoconfiguration**. No product-config or ZCML is needed,\nthe monitor port will always be picked automatically based on the instance's base port:\n\n``monitor_port = instance_port + 80``\n\n\n.. contents:: Table of Contents\n\n\nCompatibility\n-------------\n\nPlone 4.3.x\n\n\nInstallation\n============\n\n- Add the package to your buildout configuration:\n\n.. code:: ini\n\n    [instance]\n    eggs +=\n        ...\n        ftw.monitor\n\nUsage\n=====\n\nOnce ``ftw.monitor`` is included in your instance(s) eggs, it will\nautomatically start a monitor server upon instance boot:\n\n.. code::\n\n    INFO ZServer HTTP server started at Mon May  6 14:53:08 2019\n        Hostname: 0.0.0.0\n        Port: 8080\n\n    ...\n\n    INFO zc.ngi.async.server listening on ('', 8160)\n\n\nThe monitor server port is derived from the instance's port:\n\n``monitor_port = instance_port + 80``\n\nThe monitor server can be inspected and tested using **netcat**:\n\n.. code:: sh\n\n    $ echo 'help' | nc -i 1 localhost 8160\n\n    Supported commands:\n      dbinfo -- Get database statistics\n      health_check -- Check whether the instance is alive and ready to serve requests.\n      help -- Get help about server commands\n      interactive -- Turn on monitor's interactive mode\n      monitor -- Get general process info\n      quit -- Quit the monitor\n      zeocache -- Get ZEO client cache statistics\n      zeostatus -- Get ZEO client status information\n\nAlternatively, a ``bin/instance monitor <cmd>`` script is provided that\nessentially does the same thing (sending the given command to the respective\nmonitor port and displaying the response):\n\n.. code:: sh\n\n    $ bin/instance monitor help\n\n\nHealth Check\n------------\n\nThe ``health_check`` command provided by ``ftw.monitor`` allows to check\nwhether a Zope instance is alive and ready to serve requests.\n\nIf so, it will respond with ``OK\\n``:\n\n.. code:: sh\n\n    $ echo 'health_check' | nc -i 1 localhost 8160\n\n    OK\n\n\nWhile a warmup is in progress (see below), the ``health_check`` will\nrespond with an according message.\n\n\nWarmup\n------\n\nBecause health checks and instance warmup are tricky to deal with separately,\n``ftw.monitor`` also provides a mechanism for warming up Plone sites.\n\nA ``@@warmup`` view is provided on both the **Plone site root** as well as\n**Zope application root** levels which will warm up either that specific\nPlone site, or all Plone sites in that Zope instance.\n\nThe warmup view will look for an ``IWarmupPerformer`` multiadapter that adapts\na Plone site and request, and will execute the necessary actions to warm up\nthat Plone site.\n\nThere is a default ``IWarmupPerformer`` implementation in ``ftw.monitor``\nwhich will load catalog BTrees and forward index BTrees of the most used\ncatalog indexes (``allowedRolesAndUsers`` and ``object_provides``).\n\nWhile the warmup is in progress, the ``health_check`` command will not yet\nindicate the instance as being healthy:\n\n.. code:: sh\n\n    $ echo 'health_check' | nc -i 1 localhost 8160\n\n    Warmup in progress\n\n\nAutomatic Warmup\n----------------\n\nBy default, ``ftw.monitor`` will automatically warm up a booting instance, by\nsending a request to the `@@warmup` view. The instance will be considered\nhealthy (by the ``health_check`` command) once the warmup has been performed\nsuccessfully.\n\nIf this behavior is not desired, automatic warmup can be disabled by setting\nthe ``FTW_MONITOR_AUTOWARMUP`` environment variable to ``0`` before starting\nthe instance(s):\n\n```bash\nexport FTW_MONITOR_AUTOWARMUP=0\n```\n\n\nHAProxy example\n---------------\n\nThe following is an example of how to use the ``health_check`` command as\na HAProxy TCP health check:\n\n\n.. code:: sh\n\n    backend plone03\n        # ...\n        option tcp-check\n        tcp-check connect\n        tcp-check send health_check\\r\\n\n        tcp-check expect string OK\n\n        server plone0301 127.0.0.1:10301 cookie p01 check port 10381 inter 10s downinter 15s maxconn 5 rise 1 slowstart 60s\n        server plone0302 127.0.0.1:10302 cookie p02 check port 10382 inter 10s downinter 15s maxconn 5 rise 1 slowstart 60s\n        server maintenance 127.0.0.1:10319 backup\n\nNote in particular that ``option tcp-check`` changes all health checks for\nthis backend to TCP mode. So the ``maintenance`` server in this example,\nwhich is an HTTP server, needs to have health checks turned off.\n\n\nSwitching to ftw.monitor\n------------------------\n\nIn order to switch to ``ftw.monitor`` for health monitoring, the following\nsteps are necessary:\n\n- Configure your zope instance to only use one ZServer thread. ``ftw.monitor``\n  is intended for use in setups with one thread per instance.\n  Example using buildout and ``plone.recipe.zope2instance``:\n\n  .. code:: ini\n  \n      [instance0]\n      zserver-threads = 1\n\n- Remove any ``HttpOk`` plugins from your supervisor configuration. With only\n  one thread per instance, that approach to service monitoring can't work\n  any more, and *must* be disabled.\n\n  If you're extending from ``production.cfg`` and/or ``zeoclients/<n>.cfg``\n  from ``ftw-buildouts``, you can get rid of the ``HttpOk`` supervisor plugins\n  like this (after extending from one of these configs):\n\n  .. code:: ini\n  \n      [supervisor]\n      eventlisteners-httpok =\n\n- Remove ``collective.warmup`` (if present). Since ``ftw.monitor`` includes\n  its own auto-warmup logic, the use of ``collective.warmup`` is unnecessary\n  (or even detrimental).\n\n  If you're extending from ``warmup.cfg`` from\n  ``ftw-buildouts``, you can neutralize  ``collective.warmup`` with a section\n  like this (after extending from ``warmup.cfg``):\n\n  .. code:: ini\n  \n      [buildout]\n      warmup-parts =\n      warmup-eggs =\n      warmup-instance-env-vars =\n\n- Change your HAProxy health checks to TCP checks instead of HTTP. See the\n  section above for an example of an appropriate HAProxy configuration.\n\n\n\nDevelopment\n===========\n\n1. Fork this repo\n2. Clone your fork\n3. Shell: ``ln -s development.cfg buildout.cfg``\n4. Shell: ``python bootstrap.py``\n5. Shell: ``bin/buildout``\n\nRun ``bin/test`` to test your changes.\n\nOr start an instance by running ``bin/instance fg``.\n\n\nLinks\n=====\n\n- Github: https://github.com/4teamwork/ftw.monitor\n- Issues: https://github.com/4teamwork/ftw.monitor/issues\n- Pypi: http://pypi.python.org/pypi/ftw.monitor\n\n\nCopyright\n=========\n\nThis package is copyright by `4teamwork <http://www.4teamwork.ch/>`_.\n\n``ftw.monitor`` is licensed under GNU General Public License, version 2.\n\nChangelog\n=========\n\n\n1.0.0 (2019-11-18)\n------------------\n\n- Initial implementation.\n  [lgraf]", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/4teamwork/ftw.monitor", "keywords": "ftw monitor", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "ftw.monitor", "package_url": "https://pypi.org/project/ftw.monitor/", "platform": "", "project_url": "https://pypi.org/project/ftw.monitor/", "project_urls": {"Homepage": "https://github.com/4teamwork/ftw.monitor"}, "release_url": "https://pypi.org/project/ftw.monitor/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "ftw.monitor", "version": "1.0.0"}, "last_serial": 6569200, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e24781ea7ad648476c9352b3a2cedd9e", "sha256": "8702df4ffe7569bc7ed53a161bde47a73e3a5d3de22bf54a9d897acee8b017ae"}, "downloads": -1, "filename": "ftw.monitor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e24781ea7ad648476c9352b3a2cedd9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20803, "upload_time": "2019-11-18T13:27:51", "upload_time_iso_8601": "2019-11-18T13:27:51.105468Z", "url": "https://files.pythonhosted.org/packages/a5/a5/f54844a24b6225c304d5d54422cf06d2d531d16b44caf0f8e7aa0ad05c1d/ftw.monitor-1.0.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "e24781ea7ad648476c9352b3a2cedd9e", "sha256": "8702df4ffe7569bc7ed53a161bde47a73e3a5d3de22bf54a9d897acee8b017ae"}, "downloads": -1, "filename": "ftw.monitor-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e24781ea7ad648476c9352b3a2cedd9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20803, "upload_time": "2019-11-18T13:27:51", "upload_time_iso_8601": "2019-11-18T13:27:51.105468Z", "url": "https://files.pythonhosted.org/packages/a5/a5/f54844a24b6225c304d5d54422cf06d2d531d16b44caf0f8e7aa0ad05c1d/ftw.monitor-1.0.0.tar.gz"}]}