{"info": {"author": "Mario Orlandi", "author_email": "morlandi@brainstorm.it", "bugtrack_url": null, "classifiers": [], "description": "\ndjango-frontend-forms\n=====================\n\nA Django helper app to add editing capabilities to the frontend using modal forms.\n\nBases on my previous research as documented here: `Editing Django models in the front end <https://editing-django-models-in-the-frontend.readthedocs.io/en/latest/>`_\n\n.. contents::\n\n.. sectnum::\n\n\nInstallation\n------------\n\nInstall the package by running:\n\n.. code:: bash\n\n    pip install django-frontend-forms\n\n    or:\n\n    pip install git+https://github.com/morlandi/django-frontend-forms\n\nIn your settings, add:\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'frontend_forms',\n    ]\n\n\nIn your base template, add:\n\n.. code:: html\n\n    <link rel='stylesheet' href=\"{% static 'frontend_forms/css/frontend_forms.css' %}\">\n\n    <script src=\"{% static 'frontend_forms/js/frontend_forms.jsx' %}\" type=\"text/jsx\"></script>\n\n    {% include 'frontend_forms/dialogs.html' %}\n\nAlso, setup handling of \".jsx\" files; for example using Babel::\n\n    COMPRESS_PRECOMPILERS = (\n        ...\n        ('text/jsx', 'cat {infile} | ./node_modules/babel-cli/bin/babel.js --presets babel-preset-es2015 > {outfile}'),\n    )\n\nand for local debugging::\n\n    # Remove js tranpiling for easier debugging\n    COMPRESS_PRECOMPILERS = (\n        ...\n        # !!! ('text/jsx', 'cat {infile} | ./node_modules/babel-cli/bin/babel.js --presets babel-preset-es2015 > {outfile}'),\n        ('text/jsx', 'cat {infile} | ./node_modules/babel-cli/bin/babel.js > {outfile}'),\n    )\n\nthen:\n\n.. code:: bash\n\n    npm install babel-cli\n    npm install babel-preset-es2015\n    npm install babel-preset-stage-2\n\n\nBasic Usage\n-----------\n\nIn the following example, we build a Dialog() object providing some custom options;\nthen, we use it to open a modal dialog and load it from the specified url.\n\nFor demonstration purposes, we also subscribe the 'created' notification.\n\n.. code:: html\n\n    <script language=\"javascript\">\n\n        $(document).ready(function() {\n\n            dialog1 = new Dialog({\n                html: '<h1>Loading ...</h1>',\n                url: '{% url 'frontend:j_object' %}',\n                width: '400px',\n                min_height: '200px',\n                title: '<i class=\"fa fa-calculator\"></i> Selezione Oggetto',\n                footer_text: 'testing dialog ...',\n                enable_trace: true,\n                callback: function(event_name, dialog, params) {\n                    switch (event_name) {\n                        case \"created\":\n                            console.log('Dialog created: dialog=%o, params=%o', dialog, params);\n                            break;\n                    }\n                }\n            });\n\n        });\n\n    </script>\n\n\n    <a href=\"#\" class=\"btn btn-primary pull-right\" onclick=\"dialog1.open(event); return false;\">\n        <i class=\"fa fa-plus-circle\"></i>\n        Test Popup\n    </a>\n\n\nOpen the Dialog and perform some actions after content has been loaded\n----------------------------------------------------------------------\n\nIn the following example:\n\n- we subscribe the 'loaded' event\n- we call open() with show=false, so the Dialog will remain hidden during loading\n- after loading is completed, our handle is called\n- in this handle, we show the dialog and hide it after a 3 seconds timeout\n\nSample usage in a template:\n\n.. code:: html\n\n    <script language=\"javascript\">\n        $(document).ready(function() {\n\n            dialog2 = new Dialog({\n                url: \"{% url 'frontend:j_object' %}\",\n                width: '400px',\n                min_height: '200px',\n                enable_trace: true,\n                callback: dialog2_callback\n            });\n\n        });\n\n        function dialog2_callback(event_name, dialog, params) {\n            switch (event_name) {\n                case \"loaded\":\n                    dialog.show();\n                    setTimeout(function() {\n                        dialog.close();\n                    }, 3000);\n                    break;\n            }\n        }\n    </script>\n\n\n    <a href=\"#\" onclick=\"dialog2.open(event, show=false); return false;\">\n        <i class=\"fa fa-plus-circle\"></i>\n        Test Popup (2)\n    </a> /\n\n\nExample: form submission from a Dialog\n--------------------------------------\n\nTODO: TO BE REFINED ... AND VERIFIED ;)\n\n\nFirst of all, we need a view for form rendering and submission.\n\nFor example:\n\n.. code:: python\n\n    @login_required\n    @never_cache\n    def edit_something(request, id_object=None):\n\n        # if not request.user.has_perm('backend.view_something') or not request.is_ajax():\n        #     raise PermissionDenied\n\n        if id_object is not None:\n            object = get_object_or_404(Something, id=id_object)\n        else:\n            object = None\n\n        template_name = 'frontend_forms/generic_form_inner.html'\n\n        if request.method == 'POST':\n\n            form = SomethingForm(data=request.POST, instance=object)\n            if form.is_valid():\n                object = form.save(request)\n                if not request.is_ajax():\n                    # reload the page\n                    next = request.META['PATH_INFO']\n                    return HttpResponseRedirect(next)\n                # if is_ajax(), we just return the validated form, so the modal will close\n        else:\n            form = SomethingForm()\n\n        return render(request, template_name, {\n            'form': form,\n            'object': object,  # unused, but armless\n        })\n\nwhere:\n\n.. code:: python\n\n    class SomethingForm(forms.ModelForm):\n\n        class Meta:\n            model = Someghing\n            exclude = []\n\n        ...\n\nand an endpoint for Ajax call:\n\nFile \"urls.py\" ...\n\n.. code:: python\n\n    path('j/edit_something/<int:id_object>/', ajax.edit_something, name='j_edit_something'),\n\nWe can finally use the form in a Dialog:\n\n.. code:: javascript\n\n    $(document).ready(function() {\n\n        dialog1 = new Dialog({\n            dialog_selector: '#dialog_generic',\n            html: '<h1>Loading ...</h1>',\n            url: '/j/edit_something/{{ object.id }}/',\n            width: '400px',\n            min_height: '200px',\n            title: '<i class=\"fa fa-add\"></i> Edit',\n            footer_text: '',\n            enable_trace: true,\n            callback: function(event_name, dialog, params) {\n                switch (event_name) {\n                    case \"created\":\n                        console.log('Dialog created: dialog=%o, params=%o', dialog, params);\n                        break;\n                    case \"submitted\":\n                        FrontendForms.hide_mouse_cursor();\n                        FrontendForms.reload_page(true);\n                        break;\n                }\n            }\n        });\n\n    });\n\n\nDialog class public methods\n---------------------------\n\n- constructor(options={})\n- open(event, show=true)\n- close()\n- show()\n\nOptions (with default values)::\n\n    self.options = {\n        dialog_selector: '#dialog_generic',\n        html: '',\n        url: '',\n        width: null,\n        min_width: null,\n        max_width: null,\n        height: null,\n        min_height: null,\n        max_height: null,\n        button_save_label: 'Save',\n        button_close_label: 'Cancel',\n        title: '',\n        footer_text: '',\n        enable_trace: false,\n        callback: null\n    };\n\n\nDefault dialog layout\n---------------------\n\nWhen contructing a Dialog, you can use the `dialog_selector` option to select which\nHTML fragment of the page will be treated as the dialog to work with.\n\nIt is advisable to use an HTML structure similar to the default layout:\n\n.. code:: html\n\n    <div id=\"dialog_generic\" class=\"dialog draggable\">\n        <div class=\"dialog-dialog\">\n            <div class=\"dialog-content\">\n                <div class=\"dialog-header\">\n                    <span class=\"spinner\">\n                        <i class=\"fa fa-spinner fa-spin\"></i>\n                    </span>\n                    <span class=\"close\">&times;</span>\n                    <div class=\"title\">Title</div>\n                </div>\n                <div class=\"dialog-body ui-front\">\n\n                </div>\n                <div class=\"dialog-footer\">\n                    <input type=\"submit\" value=\"Close\" class=\"btn btn-close\" />\n                    <input type=\"submit\" value=\"Save\" class=\"btn btn-save\" />\n                    <div class=\"text\">footer</div>\n                </div>\n            </div>\n        </div>\n    </div>\n\nNotes:\n\n- \".draggable\" make the Dialog draggable\n- adding \".ui-front\" to the \".dialog-box\" element helps improving the behaviour of the dialog on a mobile client\n\n\nNotifications\n-------------\n\nDuring it's lifetime, the Dialog will notify all interesting events to the caller,\nprovided he supplies a suitable callback in the contructor:\n\n    self.options.callback(event_name, dialog, params)\n\nExample:\n\n.. code:: javascript\n\n    dialog1 = new Dialog({\n        ...\n        callback: function(event_name, dialog, params) {\n            console.log('event_name: %o, dialog: %o, params: %o', event_name, dialog, params);\n        }\n    });\n\nResult::\n\n    event_name: \"created\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {options: {\u2026}}\n    event_name: \"initialized\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {}\n    event_name: \"open\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {}\n    event_name: \"shown\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {}\n    event_name: \"loading\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {url: \"/admin_ex/popup/\"}\n    event_name: \"loaded\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {url: \"/admin_ex/popup/\"}\n    event_name: \"submitting\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {method: \"post\", url: \"/admin_ex/popup/\", data: \"text=&number=aaa\"}\n    event_name: \"submitted\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {method: \"post\", url: \"/admin_ex/popup/\", data: \"text=111&number=111\"}\n    event_name: \"closed\", dialog: Dialog\u00a0{options: {\u2026}, element: \u2026}, params: {}\n\nYou can also trace all events in the console setting the boolean flag `enable_trace`.\n\n\nEvent list:\n\n============================  ================================\nevent_name                    params\n============================  ================================\ncreated                       options\nclosed\ninitialized\nshown\nloading                       url\nloaded                        url\nopen\nsubmitting                    method, url, data\nsubmitted                     method, url, data\n============================  ================================\n\nSettings\n--------\n\nFRONTEND_FORMS_FORM_LAYOUT_FLAVOR\n    Default flavor for form rendering\n        - Default: \"generic\"\n        - Accepted values: \"generic\", \"bs4\"\n\n\"bs4\" flavor\n------------\n\nAdd the .compact-fields class to the form to modify the layout as in the right picture below:\n\n.. image:: screenshots/bs4-forms.png\n\nUtilities (module FrontendForms)\n--------------------------------\n\n- display_server_error(errorDetails)\n- redirect(url, show_layer=false)\n- gotourl(url, show_layer=false)\n- reload_page(show_layer=false)\n- overlay_show(element)\n- overlay_hide(element)\n- hide_mouse_cursor()\n- logObject(element, obj)\n- dumpObject(obj, max_depth, depth)\n- isEmptyObject(obj)\n- cloneObject(obj)\n- lookup(array, prop, value)\n- adjust_canvas_size(id)\n- getCookie(name)\n- confirmRemoteAction(url, options, afterDoneCallback, data=null)\n- downloadFromAjaxPost(url, params, headers, callback)\n- querystring_parse(qs, sep, eq, options)\n- set_datepicker_defaults(language_code)\n- apply_multiselect(elements)\n\nForm rendering helpers\n----------------------\n\nA `render_form(form, flavor=None)` template tag is available for form rendering:\n\n.. code:: html\n\n    {% load frontend_forms_tags ... %}\n\n    <form method=\"post\">\n        {% csrf_token %}\n\n        {% render_form form %}\n\n        <div class=\"form-group\">\n            <button type=\"submit\" class=\"btn btn-lg btn-primary btn-block\">{% trans 'Submit' %}</button>\n        </div>\n    </form>\n\nFor more a more advanced customization, you can use `render_form_field(field, flavor=None, extra_attrs='')` instead:\n\n.. code:: html\n\n    {% load frontend_forms_tags ... %}\n\n    <form method=\"post\">\n        {% csrf_token %}\n\n        {% if form.non_field_errors %}\n            <ul class=\"errorlist\">\n                {% for error in form.non_field_errors %}\n                    <li>{{ error }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n\n        {% for hidden_field in form.hidden_fields %}\n            {{ hidden_field }}\n        {% endfor %}\n\n        <fieldset>\n            {% render_form_field form.username extra_attrs=\"autocomplete=^off,autocorrect=off,autocapitalize=none\" %}\n            {% render_form_field form.password extra_attrs=\"autocomplete=^off,autocorrect=off,autocapitalize=none\" %}\n        </fieldset>\n\n        <div class=\"form-group\">\n            <button type=\"submit\" class=\"btn btn-lg btn-primary btn-block\">{% trans 'Submit' %}</button>\n        </div>\n    </form>\n\nIn this second example, we supply `extra_attrs` attributes to each form field; these will be added to the\nattributes already derived from the Django Form field definitions.\n\nThe special prefix `^` will be removed from the attribute, and interpreted as \"replace\" instead of \"append\".\n\nA generic template is also available:\n\n`generic_form_inner.html`:\n\n.. code:: html\n\n    {% load i18n frontend_forms_tags %}\n\n    <div class=\"row\">\n        <div class=\"col-sm-12\">\n            <form action=\"{{ action }}\" method=\"post\" class=\"form\" novalidate autocomplete=\"off\">\n                {% csrf_token %}\n                {% render_form form %}\n                <input type=\"hidden\" name=\"object_id\" value=\"{{ object.id|default:'' }}\">\n                <div class=\"form-submit-row\">\n                    <input type=\"submit\" value=\"Save\" />\n                </div>\n            </form>\n        </div>\n    </div>\n\nPlease note that, as a convenience when editing a Django Model, we've added an hidden field `object_id`;\nin other occasions, this is useless (but also armless, as long as the form doesn't\ncontain a field called \"object\").\n\nDatepicker support\n------------------\n\nA basic support is provided for jquery-ui datepicker.\n\nFollow these steps:\n\n(1) Initialize datepicker default by calling `FrontendForms.set_datepicker_defaults(language_code)` once:\n\n.. code:: javascript\n\n    <script language=\"javascript\">\n        $(document).ready(function() {\n            moment.locale('it');\n\n            FrontendForms.set_datepicker_defaults('{{LANGUAGE_CODE}}');    <-------------\n            ...\n\n(2) In your form, make sure that the `datepicker` class is assigned to the input element;\n    for example:\n\n.. code:: python\n\n    class MyForm(forms.Form):\n\n        date = forms.DateField(widget=forms.DateInput())\n        ...\n\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.fields['date'].widget = forms.DateInput(attrs={'class': 'datepicker'})\n\n(3) If loading the form in a dialog, rebind as necessary:\n\n.. code:: javascript\n\n    dialog1 = new Dialog({\n        ...\n        callback: function(event_name, dialog, params) {\n            switch (event_name) {\n                case \"loaded\":\n                    bindSelectables();\n                    dialog.element.find(\".datepicker\").datepicker({});    <-------------\n                    break;\n                ...\n            }\n        }\n    });\n\n\njQuery MultiSelect support\n--------------------------\n\nRequirements::\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'multiselect/css/multi-select.css' %}\" />\n\n    <script src=\"{% static 'multiselect/js/jquery.multi-select.js' %}\"></script>\n    <script src=\"{% static 'jquery.quicksearch/dist/jquery.quicksearch.min.js' %}\"></script>\n\n\nFollow these steps:\n\n(1) In your form, add the `multiselect` class to the SelectMultiple() widget\n\n.. code:: python\n\n    class MyForm(forms.ModelForm):\n\n        ...\n\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.fields['operators'].widget.attrs = {'class': 'multiselect'}\n\n(2) Later on, bind the widget using `apply_multiselect()` helper:\n\n.. code:: javascript\n\n    dialog1 = new Dialog({\n        ...\n        callback: function(event_name, dialog, params) {\n            switch (event_name) {\n                case \"loaded\":\n                    FrontendForms.apply_multiselect(dialog.element.find('.multiselect'));\n                    break;\n                ...\n            }\n        }\n    });\n\ndjango-select2 support\n----------------------\n\nRequirements::\n\n    <script src=\"{% static 'select2/dist/js/select2.min.js' %}\"></script>\n    <script src=\"{% static 'select2/dist/js/i18n/it.js' %}\"></script>\n    <script src=\"{% static 'django_select2/django_select2.js' %}\"</script>\n\n    <script language=\"javascript\">\n        $( document ).ready(function() {\n            $.fn.select2.defaults.set('language', 'it');\n        });\n    </script>\n\nFollow these steps:\n\n(1) In your form, add the `multiselect` class to the SelectMultiple() widget\n\n.. code:: python\n\n    from django_select2.forms import HeavySelect2Widget\n\n    class MyForm(forms.ModelForm):\n\n        ...\n\n        class Meta:\n            ...\n            widgets = {\n                'fieldname': HeavySelect2Widget(\n                    data_url='/url/to/json/response'\n                )\n            }\n\n(2) Later on, bind the widget using `apply_multiselect()` helper:\n\n.. code:: javascript\n\n    dialog1 = new Dialog({\n        ...\n        callback: function(event_name, dialog, params) {\n            switch (event_name) {\n                case \"loaded\":\n                    dialog.element.find('.django-select2').djangoSelect2();\n                    break;\n                ...\n            }\n        }\n    });\n\n\n\n\nHistory\n=======\n\nv0.1.3\n------\n* Display checkbox fields errors\n* Adjust errors styles\n\nv0.1.2\n------\n* Optionally provide the `request` to the Form constructor\n* Add a class attribute 'form-app_label-model_name' to the rendered form\n* django-select2 support\n* jQuery MultiSelect support\n\nv0.1.1\n------\n* ModalForms module renamed as FrontendForms\n* optional parameter `event` added to open()\n\nv0.1.0\n------\n* Module renamed from \"django-modal-forms\" to \"django-frontend-forms\"\n\nv0.0.14\n-------\n* Fixes for Django 3; support both int and uuid PKs\n\nv0.0.13\n-------\n* Configurable FRONTEND_FORMS_FORM_LAYOUT_DEFAULT\n\nv0.0.12\n-------\n* Support for model forms in a Dialog (undocumented)\n\nv0.0.11\n-------\n* Datepicker support\n\nv0.0.10\n-------\n* optional extra_attrs added to render_form_field template tag\n\nv0.0.9\n------\n* fix confirmRemoteAction()\n\nv0.0.8\n------\n* fix\n\nv0.0.7\n------\n* add custom widget attrs when rendering a field with render_form_fields()\n\nv0.0.6\n------\n* add \"has-error\" class when appropriate in render_form_field tag, to trigger errors in modal forms\n\nv0.0.5\n------\n* \"simpletable\" fix\n\nv0.0.4\n------\n* \"simpletable\" styles\n\nv0.0.3\n------\n* downloadFromAjaxPost helper JS function added\n* Display non_field_errors in BS4 form\n* Prepend fields' class with 'field-' prefix, as Django admin does\n* Radio buttons and Checkboxs rendering for Bootstrap 4\n* bs4 form rendering\n* querystring_parse() utility added\n* Add object_id hidden field to generic form\n* .ui-front added to .dialog-body for bette behaviour on mobiles\n* notify \"loaded\" event in _form_ajax_submit() when approriate\n\nv0.0.2\n------\n* First working release\n\nv0.0.1\n------\n* Project start\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/morlandi/django-frontend-forms", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-frontend-forms", "package_url": "https://pypi.org/project/django-frontend-forms/", "platform": "", "project_url": "https://pypi.org/project/django-frontend-forms/", "project_urls": {"Homepage": "http://github.com/morlandi/django-frontend-forms"}, "release_url": "https://pypi.org/project/django-frontend-forms/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "A Django helper app to add editing capabilities to the frontend using modal forms", "version": "0.1.3"}, "last_serial": 6979032, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "aa0d96dad551c6d085b53b1ba7239446", "sha256": "2888671b5a3da49007a04b8626ba8d1e8db1cc7374be9b8118e1247174cf6134"}, "downloads": -1, "filename": "django_frontend_forms-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aa0d96dad551c6d085b53b1ba7239446", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28535, "upload_time": "2020-04-05T10:43:06", "upload_time_iso_8601": "2020-04-05T10:43:06.976100Z", "url": "https://files.pythonhosted.org/packages/4c/fb/64aef7d5e005675bfb934cf73200a4d688c4c19e40ca0bda4b7a160aad79/django_frontend_forms-0.1.0-py2.py3-none-any.whl"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b4321cdd867029d31fc39546d232af13", "sha256": "def9661b9e3602f49844e331ac949a61e36cbd05a267095babbe75bf510b304c"}, "downloads": -1, "filename": "django_frontend_forms-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b4321cdd867029d31fc39546d232af13", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28608, "upload_time": "2020-04-06T17:56:44", "upload_time_iso_8601": "2020-04-06T17:56:44.636982Z", "url": "https://files.pythonhosted.org/packages/ce/b9/cf739f5b0753b61c7bb30f1cfad91cf9844e6c7374084ea1ecdafd913857/django_frontend_forms-0.1.1-py2.py3-none-any.whl"}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c65f161b399ea23c3b8df62743e755b8", "sha256": "01b5f6ebe07d67d1ff34b093cdc1417f7618cbfccfa0d08f2a80a6934ea95ec5"}, "downloads": -1, "filename": "django_frontend_forms-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c65f161b399ea23c3b8df62743e755b8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30020, "upload_time": "2020-04-07T14:36:39", "upload_time_iso_8601": "2020-04-07T14:36:39.367759Z", "url": "https://files.pythonhosted.org/packages/b4/dd/2332f65f2c484e60617b4eb92d1963be297823e80184c3d2499fd0bcd876/django_frontend_forms-0.1.2-py2.py3-none-any.whl"}], "0.1.3": [{"comment_text": "", "digests": {"md5": "77f2e5b79fc0de835da0e98e63c392e8", "sha256": "2710faf1803a97d79384acca2b60136c6e92106f3c67a0e910182f83f0553962"}, "downloads": -1, "filename": "django_frontend_forms-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "77f2e5b79fc0de835da0e98e63c392e8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30543, "upload_time": "2020-04-08T16:34:56", "upload_time_iso_8601": "2020-04-08T16:34:56.683839Z", "url": "https://files.pythonhosted.org/packages/bb/2e/c70a703775da506a81375145a43fc76690143762ce371bc29ba3327beb4d/django_frontend_forms-0.1.3-py2.py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "77f2e5b79fc0de835da0e98e63c392e8", "sha256": "2710faf1803a97d79384acca2b60136c6e92106f3c67a0e910182f83f0553962"}, "downloads": -1, "filename": "django_frontend_forms-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "77f2e5b79fc0de835da0e98e63c392e8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30543, "upload_time": "2020-04-08T16:34:56", "upload_time_iso_8601": "2020-04-08T16:34:56.683839Z", "url": "https://files.pythonhosted.org/packages/bb/2e/c70a703775da506a81375145a43fc76690143762ce371bc29ba3327beb4d/django_frontend_forms-0.1.3-py2.py3-none-any.whl"}]}