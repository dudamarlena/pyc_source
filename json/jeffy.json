{"info": {"author": "Serverless Operations", "author_email": "info@serverless-operations.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "Jeffy(Beta)\n=======\n\n# Description\n\nJeffy is Serverless **\"Application\"** Framework for Python, which is\nsuite of Utilities for Lambda functions to make it easy to develop serverless applications.\n\nMainly, focusing on three things.\n\n- Logging: Providing easy to see JSON format logging, auto logging as a decorator for capturing events and responses and errors, configurable to inject additional attributes what you want to see to logs.\n- Decorators: To save time to implement common things for Lambda functions, providing some useful decorators.\n- Tracing: Traceable events within related functions and AWS services with generating and passing `correlation_id`.\n- Environment Variables: You can define configuration for Jeffy via Environment Variables of Lambda.\n\n# TOC\n\n- [Jeffy(Beta)](#jeffy-beta-)\n- [Description](#description)\n- [Install](#install)\n- [Features](#features)\n  * [Logging](#logging)\n    + [Basic Usage](#basic-usage)\n    + [Injecting additional attributes to CloudWatchLogs](#injecting-additional-attributes-to-cloudwatchlogs)\n    + [Auto Logging](#auto-logging)\n  * [Decorators](#decorators)\n    + [json_scheme_validator](#json-scheme-validator)\n    + [api_json_scheme_validator](#api-json-scheme-validator)\n    + [api](#api)\n    + [sqs](#sqs)\n    + [sns](#sns)\n    + [kinesis_stream](#kinesis-stream)\n    + [dynamodb_stream](#dynamodb-stream)\n    + [s3](#s3)\n    + [schedule](#schedule)\n  * [Tracing](#tracing)\n    + [Kinesis Clinent](#kinesis-clinent)\n    + [SNS Client](#sns-client)\n    + [SQS Client](#sqs-client)\n    + [S3 Client](#s3-client)\n    + [Environment Variables](#environment-variables)\n    + [Example serverless.yml of Serverless Framework using supported environment variables](#example-serverlessyml-of-serverless-framework-using-supported-environment-variables)\n- [Requirements](#requirements)\n  * [Development](#development)\n  * [Authors](#authors)\n  * [Credits](#credits)\n  * [License](#license)\n\n# Install\n\n```sh\n$ pip install jeffy\n```\n\n# Features\n## Logging\n### Basic Usage\nJeffy logger automatically inject some Lambda contexts to CloudWatchLogs.\n```python\nfrom jeffy.framework import setup\napp = setup()\n\ndef handler(event, context):\n    app.logger.info({\"foo\":\"bar\"})\n```\n\nOutput in CloudWatchLogs\n```json\n{\n   \"message\": {\n       \"foo\":\"bar\",\"item\":\"aa\"\n    },\n   \"aws_region\":\"us-east-1\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\",\n   \"correlation_id\":\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"\n}\n```\n\n### Injecting additional attributes to CloudWatchLogs\nYou can inject some additional attributes what you want to output with using `setup` method.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\napp.logger.setup({\n   \"username\":\"user1\",\n   \"email\":\"user1@example.com\"\n})\n\ndef handler(event, context):\n    app.logger.info({\"foo\":\"bar\"})\n```\n\nOutput in CloudWatchLogs\n```json\n{\n   \"message\": {\n       \"foo\":\"bar\",\"item\":\"aa\"\n    },\n   \"username\":\"user1\",\n   \"email\":\"user1@example.com\",\n   \"aws_region\":\"us-east-1\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]d7729c0ea59a4939abb51180cda859bf\",\n   \"correlation_id\":\"f79759e3-0e37-4137-b536-ee9a94cd4f52\"\n}\n```\n\n### Auto Logging\n`auto_logging` decorator allows you to output `event`, `response` and `stacktrace` when you face Exceptions\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\napp.logger.setup({\n   \"username\":\"user1\",\n   \"email\":\"user1@example.com\"\n})\n\n@app.decorator.auto_logging\ndef handler(event, context):\n    ...\n```\n\nError output with auto_logging\n\n```json\n{\n   \"error_message\": \"JSONDecodeError('Expecting value: line 1 column 1 (char 0)')\", \n   \"stack_trace\":\"Traceback (most recent call last):\n  File '/var/task/jeffy/decorators.py', line 41, in wrapper\n    raise e\n  File '/var/task/jeffy/decorators.py', line 36, in wrapper\n    result = func(event, context)\n  File '/var/task/handler.py', line 8, in hello\n    json.loads('s')\n  File '/var/lang/lib/python3.8/json/__init__.py', line 357, in loads\n    return _default_decoder.decode(s)\n  File '/var/lang/lib/python3.8/json/decoder.py', line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File '/var/lang/lib/python3.8/json/decoder.py', line 355, in raw_decode\n    raise JSONDecodeError('Expecting value', s, err.value) from None\",\n   \"function_name\":\"jeffy-dev-hello\",\n   \"function_version\":\"$LATEST\",\n   \"function_memory_size\":\"1024\",\n   \"log_group_name\":\"/aws/lambda/jeffy-dev-hello\",\n   \"log_stream_name\":\"2020/01/21/[$LATEST]90e1f70f6e774e07b681e704646feec0\"\n}\n\n```\n\n## Decorators\nDecorators make simple to implement common lamdba tasks, such as parsing array from Kinesis, SNS, SQS events etc.\n\nHere are provided decorators\n\n### json_scheme_validator\nDecorator for Json scheme valiidator. Automatically validate `event.[\"body\"]` with following json scheme you define. raise exception if the validation fails.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.json_scheme_validator(\n    json_scheme={\n       \"type\":\"object\",\n       \"properties\": {\n           \"message\": {\"type\":\"string\"}\n        }\n    }\n)\ndef handler(event, context):\n    return event[\"body\"][\"foo\"] \n```\n\n### api_json_scheme_validator\nDecorator for Json scheme valiidator for API Gateway. Automatically validate `event.[\"body\"]` with following json scheme. Returns 400 error if the validation fails.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n@app.decorator.api_json_scheme_validator(\n    json_scheme={\n       \"type\":\"object\",\n       \"properties\": {\n           \"message\": {\"type\":\"string\"}\n        }\n    },\n    response_headers={\n       \"Content-Type\":\"application/jsoset=utf-8\"\n    }\n)\ndef handler(event, context):\n    return event[\"body\"][\"foo\"]\n```\n\n### api\nDecorator for API Gateway event. Automatically parse string if `event[\"body\"]` can be parsed as Dictionary and set correlation_id in `event[\"correlation_id\"]` you should pass to next event, returns 500 error if unexpected error happens.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.api\ndef handler(event, context):\n    return event[\"body\"][\"foo\"] # returns 500 error if unexpected error happens.\n```\n\n### sqs\nDecorator for sqs event. Automaticlly parse `\"event.Records\"` list from SQS event source to each items for making it easy to treat it inside main process of Lambda.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.sqs\ndef handler(event, context):\n    return event[\"foo\"]\n    \"\"\"\n    \"event.Records\" list from SQS event source was parsed each items\n    if event.Records value is the following,\n     [\n         {\"foo\": 1},\n         {\"foo\": 2}\n     ]\n\n    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n### sns\nDecorator for sns event. Automaticlly parse `\"event.Records\"` list from SNS event source to each items for making it easy to treat it inside main process of Lambda.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.sns\ndef handler(event, context):\n    return event[\"foo\"]\n    \"\"\"\n    \"event.Records\" list from SNS event source was parsed each items\n    if event.Records value is the following,\n     [\n         {\"foo\": 1},\n         {\"foo\": 2}\n     ]\n\n    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n### kinesis_stream\nDecorator for kinesis stream event. Automaticlly parse `\"event.Records\"` list from Kinesis event source to each items and decode it with base64 for making it easy to treat it inside main process of Lambda.\n\n```python\n@app.decorator.kinesis_stream\ndef handler(event, context):\n    return event[\"foo\"]\n    \"\"\"\n    \"event.Records\" list from Kinesis event source was parsed each items\n    and decoded with base64 if event.Records value is the following,\n     [\n         <base64 encoded value>,\n         <base64 encoded value>\n     ]\n\n    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n### dynamodb_stream\nDecorator for dynamodb stream event. Automaticlly parse `\"event.Records\"` list from Dynamodb event source to  items for making it easy to treat it inside main process of Lambda.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.dynamodb_stream\ndef handler(event, context):\n    return event[\"foo\"]\n    \"\"\"\n    \"event.Records\" list from Dynamodb event source was parsed each items\n    if event.Records value is the following,\n     [\n         {\"foo\": 1},\n         {\"foo\": 2}\n     ]\n\n    event[\"foo\"] value is 1 and 2, event[\"correlation_id\"] is correlation_id you should pass to next event\n    \"\"\"\n```\n\n### s3\nDecorator for S3 event. Automatically parse body stream from triggered S3 object and S3 bucket and key name to Lambda.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.s3\ndef handler(event, context):\n    event[\"key\"] # S3 bucket key\n    event[\"bucket_name\"] # S3 bucket name\n    event[\"body\"] # object stream from triggered S3 object\n    event[\"correlation_id\"] # correlation_id\n\n```\n\n### schedule\nDecorator for schedule event. just captures correlation id before main Lambda process. do nothing other than that.\n\n```python\nfrom jeffy.framework import setup\napp = setup()\n\n@app.decorator.schedule\ndef handler(event, context):\n    ...\n```\n\n\n## Tracing\n`correlation_id` is to trace subsequent Lambda functions and services. Jeffy automatically extract correlation IDs and caputure logs from the invocation event.\n\nAlso, Jeffy provide boto3 wrapper client to create and inject `correlation_id`.\n\n### Kinesis Clinent\n\n```python\nfrom jeffy.sdk.kinesis import Kinesis\n\ndef handler(event, context):\n    Kinesis.put_record(\n        stream_name=os.environ[\"STREAM_NAME\"],\n        data={\"foo\": \"bar\"},\n        partition_key=\"uuid\",\n        correlation_id=event.get(\"correlation_id\")\n    )\n```\n\n### SNS Client\n\n```python\nfrom jeffy.sdk.sns import Sns\n\ndef handler(event, context):\n    Sns.publish(\n        topic_arn=os.environ[\"TOPIC_ARN\"],\n        message=\"message\",\n        subject=\"subject\",\n        correlation_id=event.get(\"correlation_id\")\n    )\n```\n\n### SQS Client\n\n```python\nfrom jeffy.sdk.sqs import Sqs\n\ndef handler(event, context):\n    Sqs.send_message(\n        queue_url=os.environ[\"QUEUE_URL\"],\n        message=\"message\",\n        correlation_id=event.get(\"correlation_id\")\n    )\n```\n\n### S3 Client\n\n```python\nfrom jeffy.sdk.s3 import S3\n\ndef handler(event, context):\n    S3.upload_file(\n        file_path=\"path/to/file\", \n        bucket_name=os.environ[\"BUCKET_NAME\"],\n        object_name=\"path/to/object\",\n        correlation_id=event.get(\"correlation_id\")\n    )\n```\n\n### Environment Variables\nHere is configutable values for Jeffy.\n\n| Environment variable | Description | Default |\n------------------------------------------------- | --------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------\n JEFFY_LOG_LEVEL | Sets logging level | \"INFO\" \n\n### Example serverless.yml of Serverless Framework using supported environment variables\n\nYou can switch loglevel according to environment. The following example is to enable debug log other than production. \n\n```yaml\nprovider:\n  name: aws\n  region: us-east-1\n  stage: ${opt:stage, 'dev'}\n  environment:\n    JEFFY_LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}, self:custom.logLevel.default}\n\ncustom:\n  logLevel:\n    production: ERROR\n    default: DEBUG\n```\n\n# Requirements\n\n- Python 3\n\nDevelopment\n-----------\n\n-   Source hosted at [GitHub](https://github.com/marcy-terui/jeffy)\n-   Report issues/questions/feature requests on [GitHub\n    Issues](https://github.com/marcy-terui/jeffy/issues)\n\nPull requests are very welcome! Make sure your patches are well tested.\nIdeally create a topic branch for every separate change you make. For\nexample:\n\n1.  Fork the repo\n2.  Create your feature branch (`git checkout -b my-new-feature`)\n3.  Commit your changes (`git commit -am\"Added some feature\"`)\n4.  Push to the branch (`git push origin my-new-feature`)\n5.  Create new Pull Request\n\nAuthors\n-------\n\n- Bought up initial idea by [Masashi Terui](https://github.com/marcy-terui) (<marcy9114@gmail.com>)\n- Created and maintained by [Serverless Operations, Inc]()\n\nCredits\n-------\nJeffy is inspired by the following products.\n- [Lambda Powertools](https://github.com/awslabs/aws-lambda-powertools)\n- [DAZN Lambda Powertools](https://github.com/getndazn/dazn-lambda-powertools)\n- [lambda_decorators](https://github.com/dschep/lambda-decorators)\n\nLicense\n-------\n\nMIT License (see [LICENSE](https://github.com/marcy-terui/jeffy/blob/master/LICENSE))\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/serverless-operations/jeffy", "keywords": "aws lambda serverless faas", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "jeffy", "package_url": "https://pypi.org/project/jeffy/", "platform": "", "project_url": "https://pypi.org/project/jeffy/", "project_urls": {"Homepage": "https://github.com/serverless-operations/jeffy"}, "release_url": "https://pypi.org/project/jeffy/0.1.4/", "requires_dist": ["jsonschema"], "requires_python": "", "summary": "Event and Contract Driven Serverless \"Application\" Framework", "version": "0.1.4"}, "last_serial": 6592875, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "78af88d1f1854203e7d25cc5a9bf55d4", "sha256": "95a0633ddda8b2ce2af3087bb086c1e6f360a6da6d550acd610c42ace317818a"}, "downloads": -1, "filename": "jeffy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "78af88d1f1854203e7d25cc5a9bf55d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7600, "upload_time": "2020-01-21T13:09:34", "upload_time_iso_8601": "2020-01-21T13:09:34.861615Z", "url": "https://files.pythonhosted.org/packages/a9/e1/f7ee1532f81dc38675b3b424eb3acf299e1d7ab964fb58c7babeebd493c7/jeffy-0.1.0-py3-none-any.whl"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "287ee9d58be1c790b16fd8c192905180", "sha256": "393b057dd3ff0e66c98cb5ec30459f2d97faede416ab8a94a5ee42af04823a22"}, "downloads": -1, "filename": "jeffy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "287ee9d58be1c790b16fd8c192905180", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9543, "upload_time": "2020-01-21T16:13:54", "upload_time_iso_8601": "2020-01-21T16:13:54.348501Z", "url": "https://files.pythonhosted.org/packages/e3/fd/1b21f4d1115058143c9605536fa6d5f7bb9449b191a72f7839ed6d0b0af2/jeffy-0.1.1-py3-none-any.whl"}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7c0f2c7d8dc5b08b51a719af8c92fd36", "sha256": "3ef775a5758475016a060a669febb83ab4ee24ca4b8c72cebb15a74efdabedb2"}, "downloads": -1, "filename": "jeffy-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7c0f2c7d8dc5b08b51a719af8c92fd36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10308, "upload_time": "2020-01-22T07:36:07", "upload_time_iso_8601": "2020-01-22T07:36:07.768159Z", "url": "https://files.pythonhosted.org/packages/40/d7/ec0991c3a047bc100ab0deed5a0db22d728ff4b6cf06f932ad967d95d134/jeffy-0.1.2-py3-none-any.whl"}], "0.1.3": [{"comment_text": "", "digests": {"md5": "33557eed0d8db8cc53a249b315325f56", "sha256": "5fd60fc403a5b8d3b579435c2f61b8f18abeca3f46562a776a41e9588d0a0ea5"}, "downloads": -1, "filename": "jeffy-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "33557eed0d8db8cc53a249b315325f56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10705, "upload_time": "2020-01-23T09:48:00", "upload_time_iso_8601": "2020-01-23T09:48:00.589590Z", "url": "https://files.pythonhosted.org/packages/1f/01/6b28ba51bc9cd86f57d2b9fe414ea87c587878453c9d0aee5c1174ecbb20/jeffy-0.1.3-py3-none-any.whl"}], "0.1.4": [{"comment_text": "", "digests": {"md5": "594efd4dbc82a5c5fd00bd3932e20f6e", "sha256": "42ad41118f075ea6618677d29c577942ab450bb72b59b8e5e55d70c1178de29d"}, "downloads": -1, "filename": "jeffy-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "594efd4dbc82a5c5fd00bd3932e20f6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10746, "upload_time": "2020-02-08T07:56:38", "upload_time_iso_8601": "2020-02-08T07:56:38.090785Z", "url": "https://files.pythonhosted.org/packages/e9/c0/b6b4a583d824283997010e034153e171f524ccb76421d1b1233b0d7733a5/jeffy-0.1.4-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "594efd4dbc82a5c5fd00bd3932e20f6e", "sha256": "42ad41118f075ea6618677d29c577942ab450bb72b59b8e5e55d70c1178de29d"}, "downloads": -1, "filename": "jeffy-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "594efd4dbc82a5c5fd00bd3932e20f6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10746, "upload_time": "2020-02-08T07:56:38", "upload_time_iso_8601": "2020-02-08T07:56:38.090785Z", "url": "https://files.pythonhosted.org/packages/e9/c0/b6b4a583d824283997010e034153e171f524ccb76421d1b1233b0d7733a5/jeffy-0.1.4-py3-none-any.whl"}]}