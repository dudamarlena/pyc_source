{"info": {"author": "Aaron Yang", "author_email": "aaron_yang@jieyu.ai", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Overview\n========\n\n.. image:: https://img.shields.io/pypi/v/cfg4py.svg\n        :target: https://pypi.python.org/pypi/cfg4py\n\n.. image:: https://img.shields.io/travis/jieyu_tech/cfg4py.svg\n        :target: https://travis-ci.com/jieyu_tech/cfg4py\n\n.. image:: https://readthedocs.org/projects/cfg4py/badge/?version=latest\n        :target: https://cfg4py.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n* Free software: BSD license\n* Documentation: https://cfg4py.readthedocs.io.\n\n.. image:: static/usage.gif\n\nA python config module that:\n\n1. support hierarchical configuration and multiple source (local and remote)\n2. IDE auto-complete\n3. configuration template (logging, database, cache, message queue,...) generated by console command\n4. enable logging in one line\n\nFeatures\n^^^^^^^^\n\nHierarchical design\n--------------------\n\nYou have a bunch of severs of the same role, which usually share same configuration. But somehow for troubleshooting or maintenance purpose, you'd like some machines could have its own settings at particular moment.\n\nThis is how Cfg4Py solves the problem:\n\n1. Configure your application general settings at remote service, then implement a `RemoteConfigFetcher` (Cfg4Py has already implemented one), which pull configuration from remote serivce periodically.\n2. Change the settings resides on local machine, then the change automatically applied.\n\nThe hierarchical design can have different meaning. It's common to see that you have different settings for development,\ntest and production site. They share many common settings, but a few of them has to be different. Cfg4Py has perfect solution supporting for this: adaptive deployment environment support.\n\nAdaptive Deployment Environment Support\n---------------------------------------\nIn any serious projects, your application may run at both development, testing and production site. Except for effort of copying similar settings here and there, sometimes we'll mess up with development environment and production site. Once this happen, it could result in very serious consequence.\n\nTo solve this, Cfg4Py developed a mechanism, that you provide different sets for configurations: dev for development machine, test for testing environment and production for production site, and all common settings are put into a file called 'defaults'.\n\ncfg4py module knows which environment it's running on by lookup environment variables __cfg4py_server_role__. It can be one of 'DEV', 'TEST' and 'PRODUCTION'. If nothing found, it means setup is not finished, and Cfg4Py will refuse to work. If the environment is set, then Cfg4Py will read settings from defaults set, then apply update from either of 'DEV', 'TEST' and 'PRODUCTION' set, according to the environment the application is running on.\n\nQuick logging config\n--------------------\nMany python projects are startup prototype. If it works, then we'll put some really serious effort on it. Before that, we don't want our effort to be waste on common chores. Even though, we do need logging module at most time, to assist us for better troubleshooting.\n\nfor that purpose, Cfg4Py provides a one-liner config for enabling logging:\n\n.. code-block::python\n    cfg.enable_logging(level, filename=None)\n\nApply configuration change on-the-fly\n-------------------------------------\nCfg4Py provides mechanism to automatically apply configuration changes without restart your application. For local files configuration change, it may take effect immediately. For remote config change, it take effect up to `refresh_interval` settings.\n\nCode assist (auto-complete)\n---------------------------\nWith other python config module, you have to remember all the configuration keys, and refer to each settings by something like cfg[\"services\"][\"redis\"][\"host\"] and etc. It's hard to remember all configuration keys, and the way we access these settings is less concise than just use cfg.services.redis.host.\n\nCfg4Py let you access your settings by the latter format all the time. And, if you trigger a build against your configurations, it'll generate a python class file. After you import this file (named 'cfg4py_auto_gen.py') into your project, then you can enjoy auto-complete!\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2020-04-06)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jieyu_tech/cfg4py", "keywords": "cfg4py", "license": "BSD license", "maintainer": "", "maintainer_email": "", "name": "cfg4py", "package_url": "https://pypi.org/project/cfg4py/", "platform": "", "project_url": "https://pypi.org/project/cfg4py/", "project_urls": {"Homepage": "https://github.com/jieyu_tech/cfg4py"}, "release_url": "https://pypi.org/project/cfg4py/0.3.0/", "requires_dist": ["watchdog (>=0.9.0)", "apscheduler (>=3.6.3)", "fire (>=0.2.1)", "ruamel.yaml (>=0.15.0)"], "requires_python": ">=3.6", "summary": "A python config module support hierarchical configuration and multi-environment deployment", "version": "0.3.0"}, "last_serial": 6986321, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0d688df7248cbae01b457000ab240691", "sha256": "0c37ef311230fb5e57b5ddb279d4f716bcf2145bd346fee82ab3c7e258233c59"}, "downloads": -1, "filename": "cfg4py-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0d688df7248cbae01b457000ab240691", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8832, "upload_time": "2020-04-08T03:12:42", "upload_time_iso_8601": "2020-04-08T03:12:42.256922Z", "url": "https://files.pythonhosted.org/packages/a0/27/6a8a9e12b4c3e6b341fa683a315efedc541e040fc46f330db6cfb5583349/cfg4py-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "2ff1a042b50b14b4f4d6f4bc45e3fc42", "sha256": "88e00d894249a8c0d5d9cb3670407901246634bab624bcd70c009dd64b6959be"}, "downloads": -1, "filename": "cfg4py-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2ff1a042b50b14b4f4d6f4bc45e3fc42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15701, "upload_time": "2020-04-08T03:12:46", "upload_time_iso_8601": "2020-04-08T03:12:46.772929Z", "url": "https://files.pythonhosted.org/packages/f8/b1/07f0f1225e312ed77a51b07f48ea86815489dcc9582b93a4178af4a762c3/cfg4py-0.1.0.tar.gz"}], "0.3.0": [{"comment_text": "", "digests": {"md5": "12550bbafa9dec3372a8339d949bf910", "sha256": "4a4a172b7e9a93380516e7aa901894d3ae213a111f37d3058a9aa8e6a59b654f"}, "downloads": -1, "filename": "cfg4py-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12550bbafa9dec3372a8339d949bf910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13762, "upload_time": "2020-04-09T13:45:54", "upload_time_iso_8601": "2020-04-09T13:45:54.682497Z", "url": "https://files.pythonhosted.org/packages/a8/e4/5db23d4cad5d37fd3a06bfa9b3642e155a7fc35f7c02084d06080b347411/cfg4py-0.3.0-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "12550bbafa9dec3372a8339d949bf910", "sha256": "4a4a172b7e9a93380516e7aa901894d3ae213a111f37d3058a9aa8e6a59b654f"}, "downloads": -1, "filename": "cfg4py-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12550bbafa9dec3372a8339d949bf910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13762, "upload_time": "2020-04-09T13:45:54", "upload_time_iso_8601": "2020-04-09T13:45:54.682497Z", "url": "https://files.pythonhosted.org/packages/a8/e4/5db23d4cad5d37fd3a06bfa9b3642e155a7fc35f7c02084d06080b347411/cfg4py-0.3.0-py3-none-any.whl"}]}