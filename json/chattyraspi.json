{"info": {"author": "fcracker79", "author_email": "fcracker79@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "Chattyraspi\n===========\n\nChattyraspi is a support library to connect your Raspberry Pi to Amazon\nAlexa.\n\nQuick start\n-----------\n\n1. Connect to `the configuration\n   console <https://raspberry.alexa.mirko.io/login>`__\n2. Logon using your Amazon credentials\n3. Add your device(s)\n4. Download your configuration file\n5. Start the the example script:\n   ``test_chattyraspi --config devices_configuration.yaml``\n6. Install Chattyraspy skill on your Alexa\n7. Detect your new device(s) on Alexa\n8. Turn on/off your device(s) using Alexa\n\nCustom script\n-------------\n\nChattyraspi allows you to intercept all the turn on/off requests from\nAlexa, upon which you can freely react as you wish.\n\nThis snippet of code comes from the ``test_chattyraspi`` script:\n\n.. code:: python\n\n    #!/usr/bin/env python\n    from logging.config import fileConfig\n\n    import click\n    import typing\n\n    from chattyraspi.client import Client\n    from chattyraspi.device import DevicesConfiguration\n\n\n    def test_devices():\n        # Optionally configure you logging system\n        logging_conf_file = '<youg logging configuration>'\n        fileConfig(logging_conf_file, disable_existing_loggers=False)\n        \n        config = DevicesConfiguration('devices_configuration.yaml')\n        client = Client(config)\n\n        statuses = dict()\n\n        def _turn_on(device_id: str):\n            print('Device {} turned ON'.format(device_id))\n            # Here you have received a turn on request.\n            # Feel free to do whatever you want, but please remember\n            # to mark your device as ON somehow\n            statuses[device_id] = True\n\n        def _turn_off(device_id: str):\n            print('Device {} turned OFF'.format(device_id))\n            # Here you have received a turn off request.\n            # Here you are free to do whatever you want, but reasonably\n            # you would do the opposite as turn on callback.\n            # Finally, please remember that your device is OFF.\n            statuses[device_id] = False\n\n        def _fetch_is_power_on(device_id: str) -> bool:\n            print('Device {} requested power status'.format(device_id))\n            # Here Alexa is asking for the the power status of your device.\n            # Please be consistent with what you have done before\n            status = statuses[device_id]\n            print('Returning', status)\n            return status\n        \n        # Some boilerplate code: here we add the same callbacks for each configured\n        # device.\n        for device_id in map(lambda d: d['device_id'], config.get_configuration()['Devices']):\n            statuses[device_id] = False\n            client.set_on_turn_on(device_id, _turn_on)\n            client.set_on_turn_off(device_id, _turn_off)\n            client.set_fetch_is_power_on(device_id, _fetch_is_power_on)\n        client.listen()\n\n\n    if __name__ == '__main__':\n        test_devices()", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fcracker79/alexa-home-skill/clients/generic", "keywords": "alexa alexa-home alexa-skill", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "chattyraspi", "package_url": "https://pypi.org/project/chattyraspi/", "platform": "", "project_url": "https://pypi.org/project/chattyraspi/", "project_urls": {"Homepage": "https://github.com/fcracker79/alexa-home-skill/clients/generic"}, "release_url": "https://pypi.org/project/chattyraspi/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Allows interaction between Alexa and your Raspberry Pi", "version": "0.0.1"}, "last_serial": 6946348, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4ff038a149c054c9354459e3a34de102", "sha256": "092ad91a7bd972f1eb83c0f7eafd0669107d59161277f4b5e3597dcb110f4f65"}, "downloads": -1, "filename": "chattyraspi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4ff038a149c054c9354459e3a34de102", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5910, "upload_time": "2020-04-03T20:35:27", "upload_time_iso_8601": "2020-04-03T20:35:27.863709Z", "url": "https://files.pythonhosted.org/packages/88/50/c6a44a78da98a107334bf4dc15903059315c76a819574e5e3953ce5f7e4b/chattyraspi-0.0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ff038a149c054c9354459e3a34de102", "sha256": "092ad91a7bd972f1eb83c0f7eafd0669107d59161277f4b5e3597dcb110f4f65"}, "downloads": -1, "filename": "chattyraspi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4ff038a149c054c9354459e3a34de102", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5910, "upload_time": "2020-04-03T20:35:27", "upload_time_iso_8601": "2020-04-03T20:35:27.863709Z", "url": "https://files.pythonhosted.org/packages/88/50/c6a44a78da98a107334bf4dc15903059315c76a819574e5e3953ce5f7e4b/chattyraspi-0.0.1.tar.gz"}]}