{"info": {"author": "The DKPro cassis team", "author_email": "dkpro-core-user@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Human Machine Interfaces", "Topic :: Software Development :: Libraries", "Topic :: Text Processing :: Linguistic"], "description": "dkpro-cassis\n============\n\n.. image:: https://travis-ci.org/dkpro/dkpro-cassis.svg?branch=master\n  :target: https://travis-ci.org/dkpro/dkpro-cassis\n\n.. image:: https://readthedocs.org/projects/cassis/badge/?version=latest\n  :target: https://cassis.readthedocs.io/en/latest/?badge=latest\n  :alt: Documentation Status\n\n.. image:: https://codecov.io/gh/dkpro/dkpro-cassis/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/dkpro/dkpro-cassis\n\n.. image:: https://img.shields.io/pypi/l/dkpro-cassis.svg\n  :alt: PyPI - License\n  :target: https://pypi.org/project/dkpro-cassis/\n\n.. image:: https://img.shields.io/pypi/pyversions/dkpro-cassis.svg\n  :alt: PyPI - Python Version\n  :target: https://pypi.org/project/dkpro-cassis/\n\n.. image:: https://img.shields.io/pypi/v/dkpro-cassis.svg\n  :alt: PyPI\n  :target: https://pypi.org/project/dkpro-cassis/\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n  :target: https://github.com/ambv/black\n\nDKPro **cassis** (pronunciation: [ka.sis]) provides a pure-Python implementation of the *Common Analysis System* (CAS)\nas defined by the `UIMA <https://uima.apache.org>`_ framework. The CAS is a data structure representing an object to\nbe enrichted with annotations (the co-called *Subject of Analysis*, short *SofA*).\n\nThis library enables the creation and manipulation of CAS objects and their associated type systems as well as loading\nand saving CAS objects in the `CAS XMI XML representation <https://uima.apache.org/d/uimaj-current/references.html#ugr.ref.xmi>`_\nin Python programs. This can ease in particular the integration of Python-based Natural Language Processing (e.g.\n`spacy <https://spacy.io>`_ or `NLTK <https://www.nltk.org>`_) and Machine Learning librarys (e.g.\n`scikit-learn <https://scikit-learn.org/stable/>`_ or `Keras <https://keras.io>`_) in UIMA-based text analysis workflows.\n\nAn example of cassis in action is the `spacy recommender for INCEpTION <https://github.com/inception-project/external-recommender-spacy>`_,\nwhich wraps the spacy NLP library as a web service which can be used in conjunction with the `INCEpTION <https://inception-project.github.io>`_\ntext annotation platform to automatically generate annotation suggestions.\n\nFeatures\n------------\n\nCurrently supported features are:\n\n- Text SofAs\n- Deserializing/serializing UIMA CAS from/to XMI\n- Deserializing/serializing type systems from/to XML\n- Selecting annotations, selecting covered annotations, adding\n  annotations\n- Type inheritance\n- Multiple SofA support\n- Type system can be changed after loading\n- Reference, array and list features\n\nSome features are still under development, e.g.\n\n- Feature encoding as XML elements (right now only XML attributes work)\n- Proper type checking\n- XML/XMI schema validation\n- Type unmarshalling from string to the actual type specified in the type system\n\nInstallation\n------------\n\nTo install the package with :code:`pip`, just run\n\n    pip install dkpro-cassis\n\nUsage\n-----\n\nExample CAS XMI and types system files can be found under :code:`tests\\test_files`.\n\nLoading a CAS\n~~~~~~~~~~~~~\n\nA CAS can be deserialized from XMI either by reading from a file or\nstring using :code:`load_cas_from_xmi`.\n\n.. code:: python\n\n    from cassis import *\n\n    with open('typesystem.xml', 'rb') as f:\n        typesystem = load_typesystem(f)\n        \n    with open('cas.xml', 'rb') as f:\n       cas = load_cas_from_xmi(f, typesystem=typesystem)\n\nAdding annotations\n~~~~~~~~~~~~~~~~~~\n\nGiven a type system with a type :code:`cassis.Token` that has an :code:`id` and\n:code:`pos` feature, annotations can be added in the following:\n\n.. code:: python\n\n    from cassis import *\n\n    with open('typesystem.xml', 'rb') as f:\n        typesystem = load_typesystem(f)\n        \n    with open('cas.xml', 'rb') as f:\n        cas = load_cas_from_xmi(f, typesystem=typesystem)\n       \n    Token = typesystem.get_type('cassis.Token')\n\n    tokens = [\n        Token(begin=0, end=3, id='0', pos='NNP'),\n        Token(begin=4, end=10, id='1', pos='VBD'),\n        Token(begin=11, end=14, id='2', pos='IN'),\n        Token(begin=15, end=18, id='3', pos='DT'),\n        Token(begin=19, end=24, id='4', pos='NN'),\n        Token(begin=25, end=26, id='5', pos='.'),\n    ]\n\n    for token in tokens:\n        cas.add_annotation(token)\n\nSelecting annotations\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from cassis import *\n\n    with open('typesystem.xml', 'rb') as f:\n        typesystem = load_typesystem(f)\n        \n    with open('cas.xml', 'rb') as f:\n        cas = load_cas_from_xmi(f, typesystem=typesystem)\n\n    for sentence in cas.select('cassis.Sentence'):\n        for token in cas.select_covered('cassis.Token', sentence):\n            print(token.get_covered_text())\n            \n            # Annotation values can be accessed as properties\n            print('Token: begin={0}, end={1}, id={2}, pos={3}'.format(token.begin, token.end, token.id, token.pos)) \n\nCreating types and adding features\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from cassis import *\n\n    typesystem = TypeSystem()\n\n    parent_type = typesystem.create_type(name='example.ParentType')\n    typesystem.add_feature(type_=parent_type, name='parentFeature', rangeTypeName='String')\n\n    child_type = typesystem.create_type(name='example.ChildType', supertypeName=parent_type.name)\n    typesystem.add_feature(type_=child_type, name='childFeature', rangeTypeName='Integer')\n\n    annotation = child_type(parentFeature='parent', childFeature='child')\n\nWhen adding new features, these changes are propagated. For example,\nadding a feature to a parent type makes it available to a child type.\nTherefore, the type system does not need to be frozen for consistency.\nThe type system can be changed even after loading, it is not frozen\nlike in UIMAj.\n\nSofa support\n~~~~~~~~~~~~\n\nA Sofa represents some form of an unstructured artifact that is processed in a UIMA pipeline. It contains for instance\nthe document text. Currently, new Sofas can be created. This is automatically done when creating a new view. Basic\nproperties of the Sofa can be read and written:\n\n.. code:: python\n\n    cas = Cas()\n    cas.sofa_string = \"Joe waited for the train . The train was late .\"\n    cas.sofa_mime = \"text/plain\"\n\n    print(cas.sofa_string)\n    print(cas.sofa_mime)\n\nManaging views\n~~~~~~~~~~~~~~\n\nA view into a CAS contains a subset of feature structures and annotations. One view corresponds to exactly one Sofa. It\ncan also be used to query and alter information about the Sofa, e.g. the document text. Annotations added to one view\nare not visible in another view.  A view Views can be created and changed. A view has the same methods and attributes\nas a :code:`Cas` .\n\n.. code:: python\n\n    from cassis import *\n\n    with open('typesystem.xml', 'rb') as f:\n        typesystem = load_typesystem(f)\n    Token = typesystem.get_type('cassis.Token')\n\n    # This creates automatically the view `_InitialView`\n    cas = Cas()\n    cas.sofa_string = \"I like cheese .\"\n\n    cas.add_annotations([\n        Token(begin=0, end=1),\n        Token(begin=2, end=6),\n        Token(begin=7, end=13),\n        Token(begin=14, end=15)\n    ])\n\n    print([x.get_covered_text() for x in cas.select_all()])\n\n    # Create a new view and work on it.\n    view = cas.create_view('testView')\n    view.sofa_string = \"I like blackcurrant .\"\n\n    view.add_annotations([\n        Token(begin=0, end=1),\n        Token(begin=2, end=6),\n        Token(begin=7, end=19),\n        Token(begin=20, end=21)\n    ])\n\n    print([x.get_covered_text() for x in view.select_all()])\n\nMerging type systems\n~~~~~~~~~~~~~~~~~~~~\n\nSometimes, it is desirable to merge two type systems. With **cassis**, this can be\nachieved via the :code:`merge_typesystems` function. The detailed rules of merging can be found\n`here <https://uima.apache.org/d/uimaj-2.10.4/references.html#ugr.ref.cas.typemerging>`_.\n\n.. code:: python\n\n    from cassis import *\n\n    with open('typesystem.xml', 'rb') as f:\n        typesystem = load_typesystem(f)\n\n    ts = merge_typesystems([typesystem, load_dkpro_core_typesystem()])\n\nDKPro Core Integration\n----------------------\n\nA CAS using the DKPro Core Type System can be created via\n\n.. code:: python\n\n    from cassis import *\n\n    cas = Cas(typesystem=load_dkpro_core_typesystem())\n\n    for t in cas.typesystem.get_types():\n        print(t)\n\nMiscellaneous\n-------------\n\nIf your type system defines a type called :code:`self` or `type`, then it will be made\navailable as a member variable `self_` or `type_` on the respective type:\n\n.. code:: python\n\n    from cassis import *\n\n    typesystem = TypeSystem()\n\n    ExampleType = typesystem.create_type(name='example.Type')\n    typesystem.add_feature(type_=ExampleType, name='self', rangeTypeName='String')\n    typesystem.add_feature(type_=ExampleType, name='type', rangeTypeName='String')\n\n    annotation = ExampleType(self_=\"Test string1\", type_=\"Test string2\")\n\n    print(annotation.self_)\n    print(annotation.type_)\n\nDevelopment\n-----------\n\nThe required dependencies are managed by **pip**. A virtual environment\ncontaining all needed packages for development and production can be\ncreated and activated by\n\n::\n\n    virtualenv venv --python=python3 --no-site-packages\n    source venv/bin/activate\n    pip install -e \".[test, dev, doc]\"\n\nThe tests can be run in the current environment by invoking\n\n::\n\n    make test\n\nor in a clean environment via\n\n::\n\n    tox", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://dkpro.github.io", "keywords": "uima dkpro cas xmi", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "dkpro-cassis", "package_url": "https://pypi.org/project/dkpro-cassis/", "platform": "", "project_url": "https://pypi.org/project/dkpro-cassis/", "project_urls": {"Bug Tracker": "https://github.com/dkpro/dkpro-cassis/issues", "Documentation": "https://cassis.readthedocs.org/", "Homepage": "https://dkpro.github.io", "Source Code": "https://github.com/dkpro/dkpro-cassis"}, "release_url": "https://pypi.org/project/dkpro-cassis/0.2.9/", "requires_dist": null, "requires_python": ">=3.5.0", "summary": "UIMA CAS processing library in Python", "version": "0.2.9"}, "last_serial": 6676026, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "f13f82ad0aca59846ce9cfdefa543b6f", "sha256": "ba6ebfb46101fa417ac77701567f9e294ee5b7a24a2b1b1024371364040a1259"}, "downloads": -1, "filename": "dkpro_cassis-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f13f82ad0aca59846ce9cfdefa543b6f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 19352, "upload_time": "2018-12-06T13:32:36", "upload_time_iso_8601": "2018-12-06T13:32:36.469724Z", "url": "https://files.pythonhosted.org/packages/38/6a/39ae6a669d1dfa54b2017f9d065cca23fdbe653940bcf496f388a47aca22/dkpro_cassis-0.1.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "ba4dbe0f699e17b15282b1c91f29a079", "sha256": "a2925c5fe96ba9166e6782cdb8226e67e901a6d4a6127c805c6bc6a33e8c5d91"}, "downloads": -1, "filename": "dkpro-cassis-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ba4dbe0f699e17b15282b1c91f29a079", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 18850, "upload_time": "2018-12-06T13:32:38", "upload_time_iso_8601": "2018-12-06T13:32:38.705433Z", "url": "https://files.pythonhosted.org/packages/d2/d6/aa9913f4933096b6b148efcd18365ce938939d0a636db056117fa80bb673/dkpro-cassis-0.1.1.tar.gz"}], "0.2.0rc1": [{"comment_text": "", "digests": {"md5": "2f14686cba3bcf4ec286ccc2e71bbe21", "sha256": "bf17d5f68f0e5dba9b36c9cbb29d4d8b6b578e42b8176c6d8a5a2a92d34dbf22"}, "downloads": -1, "filename": "dkpro_cassis-0.2.0rc1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2f14686cba3bcf4ec286ccc2e71bbe21", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 29704, "upload_time": "2019-07-17T13:55:26", "upload_time_iso_8601": "2019-07-17T13:55:26.734098Z", "url": "https://files.pythonhosted.org/packages/64/cf/d9b002e62cc186b1c326d0b099311b9ec530a487390607d1c86e0ef88a36/dkpro_cassis-0.2.0rc1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "77f66efa0ced330aad0c652c0c82fca3", "sha256": "4d501941a7c49795bf426a608ec5c8b2183724f26f8216b5c3b0ab86253acbd7"}, "downloads": -1, "filename": "dkpro-cassis-0.2.0rc1.tar.gz", "has_sig": false, "md5_digest": "77f66efa0ced330aad0c652c0c82fca3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 30183, "upload_time": "2019-07-17T13:55:28", "upload_time_iso_8601": "2019-07-17T13:55:28.630367Z", "url": "https://files.pythonhosted.org/packages/4c/56/77156a5bb47a01093228118055c0b6b3277f61b1ccecda77b4b6cb33d658/dkpro-cassis-0.2.0rc1.tar.gz"}], "0.2.0rc2": [{"comment_text": "", "digests": {"md5": "9f686cfd6554d5b3b4020b0863cd8596", "sha256": "40cf6fb13c30995f8a7fdeeae89d686cf68c9c23f46e5ea56b42b4b994f11fee"}, "downloads": -1, "filename": "dkpro-cassis-0.2.0rc2.tar.gz", "has_sig": false, "md5_digest": "9f686cfd6554d5b3b4020b0863cd8596", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 27098, "upload_time": "2019-07-25T13:07:21", "upload_time_iso_8601": "2019-07-25T13:07:21.623842Z", "url": "https://files.pythonhosted.org/packages/85/f3/34e8bad13dae112e6ef5a45711ca9713c352973b4dd823065eb2729b6714/dkpro-cassis-0.2.0rc2.tar.gz"}], "0.2.1": [{"comment_text": "", "digests": {"md5": "8bc32be6303baf4c0ad6c901f946511b", "sha256": "a93db5472ea897877b8d051ffab390761e35bc54b47b3e4ff36e087e4c4ec386"}, "downloads": -1, "filename": "dkpro-cassis-0.2.1.tar.gz", "has_sig": false, "md5_digest": "8bc32be6303baf4c0ad6c901f946511b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 27275, "upload_time": "2019-09-09T15:09:51", "upload_time_iso_8601": "2019-09-09T15:09:51.728725Z", "url": "https://files.pythonhosted.org/packages/f0/e3/89d34466bff5779171913ac2dd804b6a99afab8b89d16f4c116e9dc6d1da/dkpro-cassis-0.2.1.tar.gz"}], "0.2.2": [{"comment_text": "", "digests": {"md5": "7ee29c6d45c74192a13895588c532c2f", "sha256": "34494a060f331ddff78f699c29c34b64cf23d3cf0a45d7dc8c6c11ed86dc9751"}, "downloads": -1, "filename": "dkpro-cassis-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7ee29c6d45c74192a13895588c532c2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 27949, "upload_time": "2019-11-02T16:12:46", "upload_time_iso_8601": "2019-11-02T16:12:46.423727Z", "url": "https://files.pythonhosted.org/packages/d8/4e/2e5484c8ab40cc4e7362d8fefdda060268c9aea244516086f5dea73b407b/dkpro-cassis-0.2.2.tar.gz"}], "0.2.3": [{"comment_text": "", "digests": {"md5": "414f4e86e7b1fd9cf67bed66bf0c9166", "sha256": "113f251b8a9a2a8db326cd3ffdab81806937f3d6d99877b143cd29420cbbc882"}, "downloads": -1, "filename": "dkpro-cassis-0.2.3.tar.gz", "has_sig": false, "md5_digest": "414f4e86e7b1fd9cf67bed66bf0c9166", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 29036, "upload_time": "2019-11-11T09:26:32", "upload_time_iso_8601": "2019-11-11T09:26:32.690786Z", "url": "https://files.pythonhosted.org/packages/ba/12/f3f28cd203d6fcdb6b5abc799570c36f0e345aee83af92df1541c60c4af3/dkpro-cassis-0.2.3.tar.gz"}], "0.2.3.dev0": [{"comment_text": "", "digests": {"md5": "a74416f3a5bdfb8e6e993d3cbadfab38", "sha256": "5e8d9ff9ed2f41441c8ad71ab01b9ca52ae7c62b41fb9b9a5ff51a43890d9586"}, "downloads": -1, "filename": "dkpro-cassis-0.2.3.dev0.tar.gz", "has_sig": false, "md5_digest": "a74416f3a5bdfb8e6e993d3cbadfab38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 32077, "upload_time": "2019-11-11T09:21:09", "upload_time_iso_8601": "2019-11-11T09:21:09.315069Z", "url": "https://files.pythonhosted.org/packages/59/02/44cd94f52cac23cbf3bdd2e4f4890e254d2da43724db45010e13ea8edccc/dkpro-cassis-0.2.3.dev0.tar.gz"}], "0.2.4": [{"comment_text": "", "digests": {"md5": "9df91ba4db25e51952c4b8f3bcb83cea", "sha256": "cca35d60250243645ac251ed2077d309b4308aa5f339e8cb0f8dbd1c648aff6c"}, "downloads": -1, "filename": "dkpro-cassis-0.2.4.tar.gz", "has_sig": false, "md5_digest": "9df91ba4db25e51952c4b8f3bcb83cea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 29588, "upload_time": "2019-11-21T21:14:49", "upload_time_iso_8601": "2019-11-21T21:14:49.490778Z", "url": "https://files.pythonhosted.org/packages/24/63/6c5e889054ac8a298b3cd8e3a839be866769288db70822c06f03fa554ebe/dkpro-cassis-0.2.4.tar.gz"}], "0.2.5": [{"comment_text": "", "digests": {"md5": "86a9a01ddf6968ed809441bd7c270cb1", "sha256": "3d80b745f041f7f724681df4eac6645b01d02cd6185798eaa870b99921a436ba"}, "downloads": -1, "filename": "dkpro-cassis-0.2.5.tar.gz", "has_sig": false, "md5_digest": "86a9a01ddf6968ed809441bd7c270cb1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 29804, "upload_time": "2019-11-27T15:37:08", "upload_time_iso_8601": "2019-11-27T15:37:08.283228Z", "url": "https://files.pythonhosted.org/packages/3d/38/3ae7739db72794594b1942d03388016d61d2ee56dfcd7ffe85b908328537/dkpro-cassis-0.2.5.tar.gz"}], "0.2.6": [{"comment_text": "", "digests": {"md5": "2fcf202ec024d2602eaa68a556ce05d8", "sha256": "f6e7a39e59740e3fffd2867fba2e82e2af572605fa1a78e4b56a3d1baebd0eec"}, "downloads": -1, "filename": "dkpro-cassis-0.2.6.tar.gz", "has_sig": false, "md5_digest": "2fcf202ec024d2602eaa68a556ce05d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 30352, "upload_time": "2019-12-08T12:50:34", "upload_time_iso_8601": "2019-12-08T12:50:34.370494Z", "url": "https://files.pythonhosted.org/packages/da/ca/4456293524975ed40e62bb08c3d703f23b33e8976c4bed46a17b2fad4dbb/dkpro-cassis-0.2.6.tar.gz"}], "0.2.7": [{"comment_text": "", "digests": {"md5": "08fc966d8bc36c1b72b7f271894fbcb4", "sha256": "41d8f675865c0ff7c1c3210d71ebe9756fcf54daf8c38b4e408322e14a7e53a2"}, "downloads": -1, "filename": "dkpro-cassis-0.2.7.tar.gz", "has_sig": false, "md5_digest": "08fc966d8bc36c1b72b7f271894fbcb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 33607, "upload_time": "2019-12-15T19:33:21", "upload_time_iso_8601": "2019-12-15T19:33:21.564970Z", "url": "https://files.pythonhosted.org/packages/44/e8/fffe8f3fbc766df8166894b28d094f0c9e5a96081fa314d0b304b8a14322/dkpro-cassis-0.2.7.tar.gz"}], "0.2.8": [{"comment_text": "", "digests": {"md5": "8f60f45ce5f9a8efce582527cb21aa72", "sha256": "b05c4e5de0b115fa50f329910fced9ee286791e9ecbb4ae4680be8121eac3be2"}, "downloads": -1, "filename": "dkpro-cassis-0.2.8.tar.gz", "has_sig": false, "md5_digest": "8f60f45ce5f9a8efce582527cb21aa72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 36149, "upload_time": "2020-02-18T08:44:14", "upload_time_iso_8601": "2020-02-18T08:44:14.140513Z", "url": "https://files.pythonhosted.org/packages/44/45/cab32011f14f1163a40e478552180e8237d37df098a3d98598be6b7bbb31/dkpro-cassis-0.2.8.tar.gz"}], "0.2.9": [{"comment_text": "", "digests": {"md5": "e3e87cf524adfcbdc34c5f644b59e928", "sha256": "221f19d608bb1b731e6b1d7dd2d85ac6602870a0b1698e97555e31ece05934ec"}, "downloads": -1, "filename": "dkpro-cassis-0.2.9.tar.gz", "has_sig": false, "md5_digest": "e3e87cf524adfcbdc34c5f644b59e928", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 44200, "upload_time": "2020-02-21T15:32:26", "upload_time_iso_8601": "2020-02-21T15:32:26.862782Z", "url": "https://files.pythonhosted.org/packages/7c/be/b732b455ee7e90cc277d9744fd67ba32f35239cc666993be671366504e08/dkpro-cassis-0.2.9.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "e3e87cf524adfcbdc34c5f644b59e928", "sha256": "221f19d608bb1b731e6b1d7dd2d85ac6602870a0b1698e97555e31ece05934ec"}, "downloads": -1, "filename": "dkpro-cassis-0.2.9.tar.gz", "has_sig": false, "md5_digest": "e3e87cf524adfcbdc34c5f644b59e928", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 44200, "upload_time": "2020-02-21T15:32:26", "upload_time_iso_8601": "2020-02-21T15:32:26.862782Z", "url": "https://files.pythonhosted.org/packages/7c/be/b732b455ee7e90cc277d9744fd67ba32f35239cc666993be671366504e08/dkpro-cassis-0.2.9.tar.gz"}]}