{"info": {"author": "Zineb Aly, Tamas Gal, Johannes Schumann", "author_email": "zaly@km3net.de, tgal@km3net.de, johannes.schumann@fau.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "Programming Language :: Python"], "description": "The km3io Python package\n========================\n\n.. image:: https://git.km3net.de/km3py/km3io/badges/master/pipeline.svg\n    :target: https://git.km3net.de/km3py/km3io/pipelines\n\n.. image:: https://git.km3net.de/km3py/km3io/badges/master/coverage.svg\n    :target: https://km3py.pages.km3net.de/km3io/coverage\n\n.. image:: https://api.codacy.com/project/badge/Grade/0660338483874475ba04f324de2123ec\n    :target: https://www.codacy.com/manual/tamasgal/km3io?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=KM3NeT/km3io&amp;utm_campaign=Badge_Grade\n\n.. image:: https://examples.pages.km3net.de/km3badges/docs-latest-brightgreen.svg\n    :target: https://km3py.pages.km3net.de/km3io\n\nThis software provides a set of Python classes to read KM3NeT ROOT files\nwithout having ROOT, Jpp or aanet installed. It only depends on Python 3.5+ and the amazing `uproot <https://github.com/scikit-hep/uproot>`__ package and gives you access to the data via numpy arrays.\n\nIt's very easy to use and according to the `uproot <https://github.com/scikit-hep/uproot>`__ benchmarks, it is able to outperform the ROOT I/O performance. \n\n**Note:** Beware that this package is in the development phase, so the API will change until version ``1.0.0`` is released!\n\nInstallation\n============\n\nInstall km3io using pip::\n\n    pip install km3io \n\nTo get the latest (stable) development release::\n\n    pip install git+https://git.km3net.de/km3py/km3io.git\n\n**Reminder:** km3io is **not** dependent on aanet, ROOT or Jpp!\n\nQuestions\n=========\n\nIf you have a question about km3io, please proceed as follows:\n\n- Read the documentation below.\n- Explore the `examples <https://km3py.pages.km3net.de/km3io/examples.html>`__ in the documentation.\n- Haven't you found an answer to your question in the documentation, post a git issue with your question showing us an example of what you have tried first, and what you would like to do.\n- Have you noticed a bug, please post it in a git issue, we appreciate your contribution.\n\nTutorial\n========\n\n**Table of contents:**\n\n* `Introduction <#introduction>`__\n\n  * `Overview of daq files <#overview-of-daq-files>`__\n\n  * `Overview of offline files <#overview-of-offline-files>`__\n\n* `DAQ files reader <#daq-files-reader>`__\n\n  * `Reading Events <#reading-events>`__\n\n  * `Reading SummarySlices <#reading-summaryslices>`__\n\n  * `Reading Timeslices <#reading-timeslices>`__\n\n* `Offline files reader <#offline-file-reader>`__\n\n  * `reading events data <#reading-events-data>`__\n\n  * `reading usr data of events <#reading-usr-data-of-events>`__\n\n  * `reading hits data <#reading-hits-data>`__\n\n  * `reading tracks data <#reading-tracks-data>`__\n\n  * `reading mc hits data <#reading-mc-hits-data>`__\n\n  * `reading mc tracks data <#reading-mc-tracks-data>`__\n\n\n\nIntroduction\n------------\n\nMost of km3net data is stored in root files. These root files are either created with `Jpp <https://git.km3net.de/common/jpp>`__ or `aanet <https://git.km3net.de/common/aanet>`__ software. A root file created with \n`Jpp <https://git.km3net.de/common/jpp>`__ is often referred to as \"a Jpp root file\". Similarly, a root file created with `aanet <https://git.km3net.de/common/aanet>`__ is often referred to as \"an aanet file\". In km3io, an aanet root file will always be reffered to as an ``offline file``, while a Jpp root file will always be referred to as a ``daq file``.\n\nkm3io is a Python package that provides a set of classes (``DAQReader`` and ``OfflineReader``) to read both daq root files and offline root files without any dependency to aanet, Jpp or ROOT. \n\nData in km3io is often returned as a \"lazyarray\", a \"jagged lazyarray\" or a `Numpy <https://docs.scipy.org/doc/numpy>`__ array. A lazyarray is an array-like object that reads data on demand! In a lazyarray, only the first and the last chunks of data are read in memory. A lazyarray can be used with all Numpy's universal `functions <https://docs.scipy.org/doc/numpy/reference/ufuncs.html>`__. Here is how a lazyarray looks like:\n\n.. code-block:: python3\n\n    # <ChunkedArray [5971 5971 5971 ... 5971 5971 5971] at 0x7fb2341ad810>\n\n\nA jagged array, is a 2+ dimentional array with different arrays lengths. In other words, a jagged array is an array of arrays of different sizes. So a jagged lazyarray is simply a jagged array of lazyarrays with different sizes. Here is how a jagged lazyarray looks like:\n\n\n.. code-block:: python3\n\n    # <JaggedArray [[102 102 102 ... 11517 11518 11518] [] [101 101 102 ... 11518 11518 11518] ... [101 101 102 ... 11516 11516 11517] [] [101 101 101 ... 11517 11517 11518]] at 0x7f74b0ef8810>\n\n\nOverview of DAQ files\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nDAQ files, or also called online files, are written by the DataWriter and\ncontain events, timeslics and summary slices.\n\n\nOverview of offline files\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nOffline files contain data about events, hits and tracks. Based on aanet version 2.0.0 documentation, the following tables show the definitions, the types and the units of the branches founds in the events, hits and tracks trees. A description of the file header are also displayed.\n\n.. csv-table:: events keys definitions and units\n   :header: \"type\", \"name\", \"definition\"\n   :widths: 20, 20, 80\n\n    \"int\", \"id\", \"offline event identifier\"\n    \"int\", \"det_id\", \"detector identifier from DAQ\"\n    \"int\", \"mc_id\", \"identifier of the MC event (as found in ascii or antcc file)\"\n    \"int\", \"run_id\", \"DAQ run identifier\"\n    \"int\", \"mc_run_id\", \"MC run identifier\"\n    \"int\", \"frame_index\", \"from the raw data\"\n    \"ULong64_t\", \"trigger_mask\", \"trigger mask from raw data (i.e. the trigger bits)\"\n    \"ULong64_t\", \"trigger_counter\", \"trigger counter\"\n    \"unsigned int\", \"overlays\", \"number of overlaying triggered events\"\n    \"TTimeStamp\", \"t\", \"UTC time of the start of the timeslice the event came from\"\n    \"vec Hit\", \"hits\", \"list of hits\"\n    \"vec Trk\", \"trks\", \"list of reconstructed tracks (can be several because of prefits,showers, etc)\"\n    \"vec double\", \"w\", \"MC: Weights w[0]=w1 & w[1]=w2 &  w[2]]=w3\"\n    \"vec double\", \"w2list\", \"MC: factors that make up w[1]=w2\"\n    \"vec double\", \"w3list\", \"MC: atmospheric flux information\"\n    \"double\", \"mc_t\", \"MC: time of the mc event\"\n    \"vec Hit\", \"mc_hits\", \"MC: list of MC truth hits\"\n    \"vec Trk\", \"mc_trks\", \"MC: list of MC truth tracks\"\n    \"string\", \"comment\", \"user can use this as he/she likes\"\n    \"int\", \"index\", \"user can use this as he/she likes\"\n\n\n.. csv-table:: hits keys definitions and units\n   :header: \"type\", \"name\", \"definition\"\n   :widths: 20, 20, 80\n\n    \"int\", \"id\", \"hit id\"\n    \"int\", \"dom_id\", \"module identifier from the data (unique in the detector)\"\n    \"unsigned int\", \"channel_id\", \"PMT channel id {0,1, .., 31} local to module\"\n    \"unsigned int\", \"tdc\", \"hit tdc (=time in ns)\"\n    \"unsigned int\", \"tot\", \"tot value as stored in raw data (int for pyroot)\"\n    \"int\", \"trig\", \"non-zero if the hit is a trigger hit\"\n    \"int\", \"pmt_id\", \"global PMT identifier as found in evt files\"\n    \"double\", \"t\", \"hit time (from calibration or MC truth)\"\n    \"double\", \"a\", \"hit amplitude (in p.e.)\"\n    \"vec\", \"pos\", \"hit position\"\n    \"vec\", \"dir\", \"hit direction i.e. direction of the PMT\"\n    \"double\", \"pure_t\", \"photon time before pmt simultion (MC only)\"\n    \"double\", \"pure_a\", \"amptitude before pmt simution (MC only)\"\n    \"int\", \"type\", \"particle type or parametrisation used for hit (mc only)\"\n    \"int\", \"origin\", \"track id of the track that created this hit\"\n    \"unsigned\", \"pattern_flags\", \"some number that you can use to flag the hit\"\n\n\n.. csv-table:: tracks keys definitions and units\n   :header: \"type\", \"name\", \"definition\"\n   :widths: 20, 20, 80\n\n    \"int\", \"id\", \"track identifier\"\n    \"vec\", \"pos\", \"position of the track at time t\"\n    \"vec\", \"dir\", \"track direction\"\n    \"double\", \"t\", \"track time (when particle is at pos)\"\n    \"double\", \"E\", \"Energy (either MC truth or reconstructed)\"\n    \"double\", \"len\", \"length if applicable\"\n    \"double\", \"lik\", \"likelihood or lambda value (for aafit: lambda)\"\n    \"int\", \"type\", \"MC: particle type in PDG encoding\"\n    \"int\", \"rec_type\", \"identifyer for the overall fitting algorithm/chain/strategy\"\n    \"vec int\", \"rec_stages\", \"list of identifyers of succesfull fitting stages resulting in this track\"\n    \"int\", \"status\", \"MC status code\"\n    \"int\", \"mother_id\", \"MC id of the parent particle\"\n    \"vec double\", \"fitinf\", \"place to store additional fit info for jgandalf see FitParameters.csv\"\n    \"vec int\", \"hit_ids\", \"list of associated hit-ids (corresponds to Hit::id)\"\n    \"vec double\", \"error_matrix\", \"(5x5) error covariance matrix (stored as linear vector)\"\n    \"string\", \"comment\", \"user comment\"\n\n\n.. csv-table:: offline file header definitions\n   :header: \"name\", \"definition\"\n   :widths: 40, 80\n\n    \"DAQ\", \"livetime\"\n    \"cut_primary cut_seamuon cut_in cut_nu\", \"Emin Emax cosTmin cosTmax\"\n    \"generator physics simul\", \"program version date time\"\n    \"seed\", \"program level iseed\"\n    \"PM1_type_area\", \"type area TTS\"\n    \"PDF\", \"i1 i2\"\n    \"model\", \"interaction muon scattering numberOfEnergyBins\"\n    \"can\", \"zmin zmax r\"\n    \"genvol\", \"zmin zmax r volume numberOfEvents\"\n    \"merge\", \"time gain\"\n    \"coord_origin\", \"x y z\"\n    \"translate\", \"x y z\"\n    \"genhencut\", \"gDir Emin\"\n    \"k40\", \"rate time\"\n    \"norma\", \"primaryFlux numberOfPrimaries\"\n    \"livetime\", \"numberOfSeconds errorOfSeconds\"\n    \"flux\", \"type key file_1 file_2\"\n    \"spectrum\", \"alpha\"\n    \"fixedcan\", \"xcenter ycenter zmin zmax radius\"\n    \"start_run\", \"run_id\"\n\n\nDAQ files reader\n----------------\n\n``km3io`` is able to read events, summary slices and timeslices (except the L0\nslices, which is work in progress).\n\nLet's have a look at some ORCA data (``KM3NeT_00000044_00005404.root``)\n\nReading Events\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nTo get a lazy ragged array of the events:\n\n.. code-block:: python3\n\n  import km3io\n  f = km3io.DAQReader(\"KM3NeT_00000044_00005404.root\")\n\n\nThat's it, we created an object which gives access to all the events, but the\nrelevant data is still not loaded into the memory (lazy access)!\nNow let's have a look at the hits data:\n\n.. code-block:: python3\n\n  >>> f.events\n  Number of events: 17023\n  >>> f.events[23].snapshot_hits.tot\n  array([28, 22, 17, 29,  5, 27, 24, 26, 21, 28, 26, 21, 26, 24, 17, 28, 23,29, 27, 24, 23, 26, 29, 25, 18, 28, 24, 28, 26, 20, 25, 31, 28, 23, 26, 21, 30, 33, 27, 16, 23, 24, 19, 24, 27, 22, 23, 21, 25, 16, 28, 22, 22, 29, 24, 29, 24, 24, 25, 25, 21, 31, 26, 28, 30, 42, 28], dtype=uint8)\n\nThe resulting arrays are numpy arrays.\n\nReading SummarySlices\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe following example shows how to access summary slices, in particular the DOM\nIDs of the slice with the index ``23``:\n\n.. code-block:: python3\n\n  >>> f.summaryslices\n  <km3io.daq.SummarySlices at 0x7effcc0e52b0>\n  >>> f.summaryslices.slices[23].dom_id\n  array([806451572, 806455814, 806465101, 806483369, 806487219, 806487226,\n       806487231, 808432835, 808435278, 808447180, 808447186, 808451904,\n       808451907, 808469129, 808472260, 808472265, 808488895, 808488990,\n       808489014, 808489117, 808493910, 808946818, 808949744, 808951460,\n       808956908, 808959411, 808961448, 808961480, 808961504, 808961655,\n       808964815, 808964852, 808964883, 808964908, 808969848, 808969857,\n       808972593, 808972598, 808972698, 808974758, 808974773, 808974811,\n       808974972, 808976377, 808979567, 808979721, 808979729, 808981510,\n       808981523, 808981672, 808981812, 808981864, 808982005, 808982018,\n       808982041, 808982066, 808982077, 808982547, 808984711, 808996773,\n       808997793, 809006037, 809007627, 809503416, 809521500, 809524432,\n       809526097, 809544058, 809544061], dtype=int32)\n\nThe ``.dtype`` attribute (or in general, <TAB> completion) is useful to find out\nmore about the field structure:\n\n.. code-block:: python3\n\n  >>> f.summaryslices.headers.dtype\n  dtype([(' cnt', '<u4'), (' vers', '<u2'), (' cnt2', '<u4'), (' vers2',\n  '<u2'), (' cnt3', '<u4'), (' vers3', '<u2'), ('detector_id', '<i4'), ('run',\n  '<i4'), ('frame_index', '<i4'), (' cnt4', '<u4'), (' vers4', '<u2'),\n  ('UTC_seconds', '<u4'), ('UTC_16nanosecondcycles', '<u4')])\n  >>> f.summaryslices.headers.frame_index\n  <ChunkedArray [162 163 173 ... 36001 36002 36003] at 0x7effccd4af10>\n\nThe resulting array is a ``ChunkedArray`` which is an extended version of a\nnumpy array and behaves like one.\n\nReading Timeslices\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nTimeslices are split into different streams since 2017 and ``km3io`` currently\nsupports everything except L0, i.e. L1, L2 and SN streams. The API is\nwork-in-progress and will be improved in future, however, all the data is\nalready accessible (although in ugly ways ;-)\n\nTo access the timeslice data:\n\n.. code-block:: python3\n\n  >>> f.timeslices\n  Available timeslice streams: L1, SN\n  >>> f.timeslices.stream(\"L1\", 24).frames\n  {806451572: <Table [<Row 1577843> <Row 1577844> ... <Row 1578147>],\n   806455814: <Table [<Row 1578148> <Row 1578149> ... <Row 1579446>],\n   806465101: <Table [<Row 1579447> <Row 1579448> ... <Row 1580885>],\n   ...\n  }\n\nThe frames are represented by a dictionary where the key is the ``DOM ID`` and\nthe value a numpy array of hits, with the usual fields to access the PMT\nchannel, time and ToT:\n\n.. code-block:: python3\n\n   >>> f.timeslices.stream(\"L1\", 24).frames[806451572].dtype\n   dtype([('pmt', 'u1'), ('tdc', '<u4'), ('tot', 'u1')])\n   >>> f.timeslices.stream(\"L1\", 24).frames[806451572].tot\n   array([29, 21,  8, 29, 22, 20,  1, 37, 11, 22, 11, 22, 12, 20, 29, 94, 26,\n          26, 18, 16, 13, 22,  6, 29, 24, 30, 14, 26, 12, 23,  4, 25,  6, 27,\n           5, 13, 21, 28, 30,  4, 25, 10,  5,  6,  5, 17,  4, 27, 24, 25, 27,\n          28, 32,  6,  3, 15,  3, 20, 33, 30, 30, 20, 28,  6,  7,  3, 14, 12,\n          25, 27, 26, 25, 22, 21, 23,  6, 20, 21,  4,  4, 10, 24, 29, 12, 30,\n           5,  3, 24, 15, 14, 25,  5, 27, 23, 26,  4, 28, 15, 34, 22,  4, 29,\n          24, 26, 29, 23, 25, 28, 14, 31, 27, 26, 27, 28, 23, 54,  4, 25, 11,\n          28, 25, 24,  7, 27, 28, 28, 18,  3, 13, 14, 38, 28,  4, 21, 16, 16,\n           4, 21, 26, 21, 28, 64, 21,  1, 24, 21, 26, 26, 25,  4, 28, 11, 31,\n          10, 24, 24, 28, 10,  6,  4, 20, 26, 18,  5, 18, 24,  5, 27, 23, 20,\n          29, 20,  6, 18,  5, 24, 17, 28, 24, 15, 26, 27, 25,  9,  3, 18,  3,\n          34, 29, 10, 25, 30, 28, 19, 26, 34, 27, 14, 17, 15, 26,  8, 19,  5,\n          27, 13,  5, 27, 46,  3, 25, 13, 30,  9, 21, 12,  1, 32, 25,  8, 30,\n           4, 24, 11,  3, 11, 27,  5, 13,  5, 16, 18,  3, 22, 10,  7, 32, 29,\n          15, 20, 18, 16, 27,  5, 22,  4, 33,  5, 29, 24, 30,  7,  7, 25, 33,\n           7, 20,  8, 30,  4,  4,  6, 26,  8, 24, 22, 12,  6,  3, 21, 28, 11,\n          24, 27, 27,  6, 29,  5, 18, 11, 26,  5, 19, 32, 25,  4, 20, 35, 30,\n           5,  3, 26, 30, 23, 28,  6, 25, 25,  5, 45, 23, 18, 29, 28, 23],\n         dtype=uint8)\n\n\n\nOffline files reader\n--------------------\n\nLet's have a look at some muons data from ORCA 4 lines simulations - run id 5971 (``datav6.0test.jchain.aanet.00005971.root``). \n\n**Note:** this file was cropped to 10 events only, so don't be surprised in this tutorial if you see few events in the file.\n\nFirst, let's read our file:\n\n.. code-block:: python3\n\n  >>> import km3io as ki\n  >>> file = 'my_file.root'\n  >>> r = ki.OfflineReader(file)\n  <km3io.offline.OfflineReader at 0x7f24cc2bd550>\n\nand that's it! Note that `file` can be either an str of your file path, or a path-like object. \n\nTo read the file header:\n\n.. code-block:: python3\n\n    >>> r.header\n    DAQ             394\n    PDF             4      58\n    XSecFile        \n    can             0 1027 888.4\n    can_user        0.00 1027.00  888.40\n    coord_origin    0 0 0\n    cut_in          0 0 0 0\n    cut_nu          100 1e+08 -1 1\n    cut_primary     0 0 0 0\n    cut_seamuon     0 0 0 0\n    decay           doesnt happen\n    detector        NOT\n    drawing         Volume\n    end_event       \n    genhencut       2000 0\n    genvol          0 1027 888.4 2.649e+09 100000\n    kcut            2\n    livetime        0 0\n    model           1       2       0       1      12\n    muon_desc_file  \n    ngen            0.1000E+06\n    norma           0 0\n    nuflux          0       3       0 0.500E+00 0.000E+00 0.100E+01 0.300E+01\n    physics         GENHEN 7.2-220514 181116 1138\n    seed            GENHEN 3  305765867         0         0\n    simul           JSirene 11012 11/17/18 07\n    sourcemode      diffuse\n    spectrum        -1.4\n    start_run       1\n    target          isoscalar\n    usedetfile      false\n    xlat_user       0.63297\n    xparam          OFF\n    zed_user        0.00 3450.00\n\n**Note:** not all file header types are supported, so don't be surprised when you get the following warning\n\n.. code-block:: python3\n\n    /home/zineb/km3net/km3net/km3io/km3io/offline.py:341: UserWarning: Your file header has an unsupported format\n    warnings.warn(\"Your file header has an unsupported format\")\n\nTo explore all the available branches in our offline file: \n\n.. code-block:: python3\n\n  >>> r.keys\n  Events keys are:\n        id\n        det_id\n        mc_id\n        run_id\n        mc_run_id\n        frame_index\n        trigger_mask\n        trigger_counter\n        overlays\n        hits\n        trks\n        w\n        w2list\n        w3list\n        mc_t\n        mc_hits\n        mc_trks\n        comment\n        index\n        flags\n        t.fSec\n        t.fNanoSec\n  Hits keys are:\n        hits.id\n        hits.dom_id\n        hits.channel_id\n        hits.tdc\n        hits.tot\n        hits.trig\n        hits.pmt_id\n        hits.t\n        hits.a\n        hits.pos.x\n        hits.pos.y\n        hits.pos.z\n        hits.dir.x\n        hits.dir.y\n        hits.dir.z\n        hits.pure_t\n        hits.pure_a\n        hits.type\n        hits.origin\n        hits.pattern_flags\n  Tracks keys are:\n        trks.fUniqueID\n        trks.fBits\n        trks.id\n        trks.pos.x\n        trks.pos.y\n        trks.pos.z\n        trks.dir.x\n        trks.dir.y\n        trks.dir.z\n        trks.t\n        trks.E\n        trks.len\n        trks.lik\n        trks.type\n        trks.rec_type\n        trks.rec_stages\n        trks.status\n        trks.mother_id\n        trks.fitinf\n        trks.hit_ids\n        trks.error_matrix\n        trks.comment\n  Mc hits keys are:\n        mc_hits.id\n        mc_hits.dom_id\n        mc_hits.channel_id\n        mc_hits.tdc\n        mc_hits.tot\n        mc_hits.trig\n        mc_hits.pmt_id\n        mc_hits.t\n        mc_hits.a\n        mc_hits.pos.x\n        mc_hits.pos.y\n        mc_hits.pos.z\n        mc_hits.dir.x\n        mc_hits.dir.y\n        mc_hits.dir.z\n        mc_hits.pure_t\n        mc_hits.pure_a\n        mc_hits.type\n        mc_hits.origin\n        mc_hits.pattern_flags\n  Mc tracks keys are:\n        mc_trks.fUniqueID\n        mc_trks.fBits\n        mc_trks.id\n        mc_trks.pos.x\n        mc_trks.pos.y\n        mc_trks.pos.z\n        mc_trks.dir.x\n        mc_trks.dir.y\n        mc_trks.dir.z\n        mc_trks.t\n        mc_trks.E\n        mc_trks.len\n        mc_trks.lik\n        mc_trks.type\n        mc_trks.rec_type\n        mc_trks.rec_stages\n        mc_trks.status\n        mc_trks.mother_id\n        mc_trks.fitinf\n        mc_trks.hit_ids\n        mc_trks.error_matrix\n        mc_trks.comment\n\nIn an offline file, there are 5 main trees with data: \n\n* events tree\n* hits tree\n* tracks tree\n* mc hits tree\n* mc tracks tree\n\nwith km3io, these trees can be accessed with a simple tab completion: \n\n.. image:: https://git.km3net.de/km3py/km3io/raw/master/examples/pictures/reader.png\n\nIn the following, we will explore each tree using km3io package. \n\nreading events data\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nto read data in events tree with km3io: \n\n.. code-block:: python3\n\n  >>> r.events\n  <OfflineEvents: 10 parsed events>\n\nto get the total number of events in the events tree:\n\n.. code-block:: python3\n\n  >>> len(r.events)\n  10\n\nthe branches stored in the events tree in an offline file can be easily accessed with a tab completion as seen below:\n\n.. image:: https://git.km3net.de/km3py/km3io/raw/master/examples/pictures/events.png\n\nto get data from the events tree, chose any branch of interest with the tab completion, the following is a non exaustive set of examples. \n\nto get event ids:\n\n.. code-block:: python3\n\n    >>> r.events.id\n    <ChunkedArray [1 2 3 ... 8 9 10] at 0x7f249eeb6f10>\n\nto get detector ids:\n\n.. code-block:: python3\n\n    >>> r.events.det_id\n    <ChunkedArray [44 44 44 ... 44 44 44] at 0x7f249eeba050>\n\nto get frame_index:\n\n.. code-block:: python3\n\n    >>> r.events.frame_index\n    <ChunkedArray [182 183 202 ... 185 185 204] at 0x7f249eeba410>\n\nto get snapshot hits:\n\n.. code-block:: python3\n\n    >>> r.events.hits\n    <ChunkedArray [176 125 318 ... 84 255 105] at 0x7f249eebaa10>\n\nto illustrate the strength of this data structure, we will play around with `r.events.hits` using Numpy universal `functions <https://docs.scipy.org/doc/numpy/reference/ufuncs.html>`__. \n\n.. code-block:: python3\n\n    >>> import numpy as np\n    >>> np.log(r.events.hits)\n    <ChunkedArray [5.170483995038151 4.8283137373023015 5.762051382780177 ... 4.430816798843313 5.541263545158426 4.653960350157523] at 0x7f249b8ebb90>\n\nto get all data from one specific event (for example event 0):\n\n.. code-block:: python3\n\n    >>> r.events[0]\n    offline event:\n          id                  :               1\n          det_id              :              44\n          mc_id               :               0\n          run_id              :            5971\n          mc_run_id           :               0\n          frame_index         :             182\n          trigger_mask        :              22\n          trigger_counter     :               0\n          overlays            :              60\n          hits                :             176\n          trks                :              56\n          w                   :              []\n          w2list              :              []\n          w3list              :              []\n          mc_t                :             0.0\n          mc_hits             :               0\n          mc_trks             :               0\n          comment             :             b''\n          index               :               0\n          flags               :               0\n          t_fSec              :      1567036818\n          t_fNanoSec          :       200000000\n\nto get a specific value from event 0, for example the number of overlays:\n\n.. code-block:: python3\n\n    >>> r.events[0].overlays\n    60\n\nor the number of hits: \n\n.. code-block:: python3\n\n    >>> r.events[0].hits\n    176\n\n\nreading usr data of events\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nTo access the ``usr`` data of events, use the ``.usr`` property which behaves\nlike a dictionary and returns ``lazyarray``, compatible to the ``numpy.array``\ninterface. The available keys can be accessed either as attributes or via a\ndictionary lookup:\n\n.. code-block:: python3\n\n    >>> import km3io\n    >>> f = km3io.OfflineReader(\"tests/samples/usr-sample.root\")\n    >>> f.usr\n    <km3io.offline.Usr at 0x7efd53a41eb0>\n    >>> print(f.usr)\n    RecoQuality: [85.45957235835593 68.74744265572737 50.18704013646688]\n    RecoNDF: [37.0 37.0 29.0]\n    CoC: [118.6302815337638 44.33580521344907 99.93916717621543]\n    ToT: [825.0 781.0 318.0]\n    ChargeAbove: [176.0 278.0 53.0]\n    ChargeBelow: [649.0 503.0 265.0]\n    ChargeRatio: [0.21333333333333335 0.3559539052496799 0.16666666666666666]\n    DeltaPosZ: [37.51967774166617 -10.280346193553832 13.67595659707355]\n    FirstPartPosZ: [135.29499707179326 41.46665612378939 107.39596803432326]\n    LastPartPosZ: [97.77531933012709 51.747002317343224 93.72001143724971]\n    NSnapHits: [51.0 107.0 98.0]\n    NTrigHits: [30.0 32.0 14.0]\n    NTrigDOMs: [7.0 11.0 7.0]\n    NTrigLines: [6.0 5.0 4.0]\n    NSpeedVetoHits: [0.0 0.0 0.0]\n    NGeometryVetoHits: [0.0 0.0 0.0]\n    ClassficationScore: [0.16863382173469108 0.17944356593281038 0.08155750660727408]\n    >>> f.usr.DeltaPosZ\n    <ChunkedArray [37.51967774166617 -10.280346193553832 13.67595659707355] at 0x7efd54013eb0>\n    >>> f.usr['RecoQuality']\n    <ChunkedArray [85.45957235835593 68.74744265572737 50.18704013646688] at 0x7efd54034b50>\n\n\nreading hits data\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nto read data in hits tree with km3io:\n\n.. code-block:: python3\n\n    >>> r.hits\n    <OfflineHits: 10 parsed elements>\n\nthis shows that in our offline file, there are 10 events, with each event is associated a hits trees. \n\nto have access to all data in a specific branche from the hits tree, you can use the tab completion:\n\n.. image:: https://git.km3net.de/km3py/km3io/raw/master/examples/pictures/hits.png\n\nto get ALL the dom ids in all hits trees in our offline file:\n\n.. code-block:: python3\n\n    >>> r.hits.dom_id\n    <ChunkedArray [[806451572 806451572 806451572 ... 809544061 809544061 809544061] [806451572 806451572 806451572 ... 809524432 809526097 809544061] [806451572 806451572 806451572 ... 809544061 809544061 809544061] ... [806451572 806455814 806465101 ... 809526097 809544058 809544061] [806455814 806455814 806455814 ... 809544061 809544061 809544061] [806455814 806455814 806455814 ... 809544058 809544058 809544061]] at 0x7f249eebac50>\n\nto get ALL the time over threshold (tot) in all hits trees in our offline file:\n\n.. code-block:: python3\n\n    >>> r.hits.tot\n    <ChunkedArray [[24 30 22 ... 38 26 23] [29 26 22 ... 26 28 24] [27 19 13 ... 27 24 16] ... [22 22 9 ... 27 32 27] [30 32 17 ... 30 24 29] [27 41 36 ... 29 24 28]] at 0x7f249eec9050>\n\n\nif you are interested in a specific event (let's say event 0), you can access the corresponding hits tree by doing the following:\n\n.. code-block:: python3\n\n    >>> r[0].hits\n    <OfflineHits: 176 parsed elements>\n\nnotice that now there are 176 parsed elements (as opposed to 10 elements parsed when r.hits is called). This means that in event 0 there are 176 hits! To get the dom ids from this event:\n\n.. code-block:: python3\n\n    >>> r[0].hits.dom_id\n    array([806451572, 806451572, 806451572, 806451572, 806455814, 806455814,\n       806455814, 806483369, 806483369, 806483369, 806483369, 806483369,\n       806483369, 806483369, 806483369, 806483369, 806483369, 806487219,\n       806487226, 806487231, 806487231, 808432835, 808435278, 808435278,\n       808435278, 808435278, 808435278, 808447180, 808447180, 808447180,\n       808447180, 808447180, 808447180, 808447180, 808447180, 808447186,\n       808451904, 808451904, 808472265, 808472265, 808472265, 808472265,\n       808472265, 808472265, 808472265, 808472265, 808488895, 808488990,\n       808488990, 808488990, 808488990, 808488990, 808489014, 808489014,\n       808489117, 808489117, 808489117, 808489117, 808493910, 808946818,\n       808949744, 808951460, 808951460, 808951460, 808951460, 808951460,\n       808956908, 808956908, 808959411, 808959411, 808959411, 808961448,\n       808961448, 808961504, 808961504, 808961655, 808961655, 808961655,\n       808964815, 808964815, 808964852, 808964908, 808969857, 808969857,\n       808969857, 808969857, 808969857, 808972593, 808972698, 808972698,\n       808972698, 808974758, 808974758, 808974758, 808974758, 808974758,\n       808974758, 808974758, 808974758, 808974758, 808974758, 808974758,\n       808974773, 808974773, 808974773, 808974773, 808974773, 808974972,\n       808974972, 808976377, 808976377, 808976377, 808979567, 808979567,\n       808979567, 808979721, 808979721, 808979721, 808979721, 808979721,\n       808979721, 808979721, 808979729, 808979729, 808979729, 808981510,\n       808981510, 808981510, 808981510, 808981672, 808981672, 808981672,\n       808981672, 808981672, 808981672, 808981672, 808981672, 808981672,\n       808981672, 808981672, 808981672, 808981672, 808981672, 808981672,\n       808981672, 808981672, 808981812, 808981812, 808981812, 808981864,\n       808981864, 808982005, 808982005, 808982005, 808982018, 808982018,\n       808982018, 808982041, 808982041, 808982077, 808982077, 808982547,\n       808982547, 808982547, 808997793, 809006037, 809524432, 809526097,\n       809526097, 809544061, 809544061, 809544061, 809544061, 809544061,\n       809544061, 809544061], dtype=int32\n\nto get all data of a specific hit (let's say hit 0) from event 0:\n\n.. code-block:: python3\n\n    >>> r[0].hits[0]\n    offline hit:\n          id                  :               0\n          dom_id              :       806451572\n          channel_id          :               8\n          tdc                 :               0\n          tot                 :              24\n          trig                :               1\n          pmt_id              :               0\n          t                   :      70104010.0\n          a                   :             0.0\n          pos_x               :             0.0\n          pos_y               :             0.0\n          pos_z               :             0.0\n          dir_x               :             0.0\n          dir_y               :             0.0\n          dir_z               :             0.0\n          pure_t              :             0.0\n          pure_a              :             0.0\n          type                :               0\n          origin              :               0\n          pattern_flags       :               0\n\nto get a specific value from hit 0 in event 0, let's say for example the dom id:\n\n.. code-block:: python3\n\n    >>> r[0].hits[0].dom_id\n    806451572\n\nreading tracks data\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nto read data in tracks tree with km3io:\n\n.. code-block:: python3\n\n    >>> r.tracks\n    <OfflineTracks: 10 parsed elements>\n\nthis shows that in our offline file, there are 10 parsed elements (events), each event is associated with tracks data. \n\nto have access to all data in a specific branche from the tracks tree, you can use the tab completion:\n\n.. image:: https://git.km3net.de/km3py/km3io/raw/master/examples/pictures/tracks.png\n\nto get ALL the cos(zenith angle) in all tracks tree in our offline file:\n\n.. code-block:: python3\n\n    >>> r.tracks.dir_z\n    <ChunkedArray [[-0.872885221293917 -0.872885221293917 -0.872885221293917 ... -0.6631226836266504 -0.5680647731737454 -0.5680647731737454] [-0.8351996698137462 -0.8351996698137462 -0.8351996698137462 ... -0.7485107718446855 -0.8229838871876581 -0.239315690284641] [-0.989148723802379 -0.989148723802379 -0.989148723802379 ... -0.9350162572437829 -0.88545604390297 -0.88545604390297] ... [-0.5704611045902105 -0.5704611045902105 -0.5704611045902105 ... -0.9350162572437829 -0.4647231989130516 -0.4647231989130516] [-0.9779941383490359 -0.9779941383490359 -0.9779941383490359 ... -0.88545604390297 -0.88545604390297 -0.8229838871876581] [-0.7396916780974963 -0.7396916780974963 -0.7396916780974963 ... -0.6631226836266504 -0.7485107718446855 -0.7485107718446855]] at 0x7f249eed2090>\n\nto get ALL the tracks likelihood in our offline file:\n\n.. code-block:: python3\n\n    >>> r.tracks.lik\n    <ChunkedArray [[294.6407542676734 294.6407542676734 294.6407542676734 ... 67.81221253265059 67.7756405143316 67.77250505700384] [96.75133289411137 96.75133289411137 96.75133289411137 ... 39.21916536442286 39.184645826013806 38.870325146341884] [560.2775306614813 560.2775306614813 560.2775306614813 ... 118.88577278801066 118.72271313687405 117.80785995187605] ... [71.03251451148226 71.03251451148226 71.03251451148226 ... 16.714140573909347 16.444395245214945 16.34639241716669] [326.440133294878 326.440133294878 326.440133294878 ... 87.79818671079849 87.75488082571873 87.74839444768625] [159.77779654216795 159.77779654216795 159.77779654216795 ... 33.8669134999348 33.821631538334984 33.77240735670646]] at 0x7f249eed2590>\n\n\nif you are interested in a specific event (let's say event 0), you can access the corresponding tracks tree by doing the following:\n\n.. code-block:: python3\n\n    >>> r[0].tracks\n    <OfflineTracks: 56 parsed elements>\n\nnotice that now there are 56 parsed elements (as opposed to 10 elements parsed when r.tracks is called). This means that in event 0 there is data about 56 possible tracks! To get the tracks likelihood from this event:\n\n.. code-block:: python3\n\n    >>> r[0].tracks.lik\n    array([294.64075427, 294.64075427, 294.64075427, 291.64653113,\n       291.27392663, 290.69031512, 289.19290546, 289.08449217,\n       289.03373947, 288.19030836, 282.92343367, 282.71527118,\n       282.10762402, 280.20553861, 275.93183966, 273.01809111,\n       257.46433694, 220.94357656, 194.99426403, 190.47809685,\n        79.95235686,  78.94389763,  78.90791169,  77.96122466,\n        77.9579604 ,  76.90769883,  75.97546175,  74.91530508,\n        74.9059469 ,  72.94007716,  72.90467038,  72.8629316 ,\n        72.81280833,  72.80229533,  72.78899435,  71.82404165,\n        71.80085542,  71.71028058,  70.91130096,  70.89150223,\n        70.85845637,  70.79081796,  70.76929743,  69.80667603,\n        69.64058976,  68.93085058,  68.84304037,  68.83154232,\n        68.79944298,  68.79019375,  68.78581291,  68.72340328,\n        67.86628937,  67.81221253,  67.77564051,  67.77250506])\n\nto get all data of a specific track (let's say track 0) from event 0:\n\n.. code-block:: python3\n\n    >>> r[0].tracks[0]\n    offline track:\n          fUniqueID                      :                           0\n          fBits                          :                    33554432\n          id                             :                           1\n          pos_x                          :            445.835395997812\n          pos_y                          :           615.1089636184813\n          pos_z                          :           125.1448339836911\n          dir_x                          :          0.0368711082700674\n          dir_y                          :        -0.48653048395923415\n          dir_z                          :          -0.872885221293917\n          t                              :           70311446.46401498\n          E                              :           99.10458562488608\n          len                            :                         0.0\n          lik                            :           294.6407542676734\n          type                           :                           0\n          rec_type                       :                        4000\n          rec_stages                     :                [1, 3, 5, 4]\n          status                         :                           0\n          mother_id                      :                          -1\n          hit_ids                        :                          []\n          error_matrix                   :                          []\n          comment                        :                           0\n          JGANDALF_BETA0_RAD             :        0.004957442219414389\n          JGANDALF_BETA1_RAD             :        0.003417848024252858\n          JGANDALF_CHI2                  :          -294.6407542676734\n          JGANDALF_NUMBER_OF_HITS        :                       142.0\n          JENERGY_ENERGY                 :           99.10458562488608\n          JENERGY_CHI2                   :     1.7976931348623157e+308\n          JGANDALF_LAMBDA                :      4.2409761837248484e-12\n          JGANDALF_NUMBER_OF_ITERATIONS  :                        10.0\n          JSTART_NPE_MIP                 :           24.88469697331908\n          JSTART_NPE_MIP_TOTAL           :           55.88169412579765\n          JSTART_LENGTH_METRES           :           98.89582506402911\n          JVETO_NPE                      :                         0.0\n          JVETO_NUMBER_OF_HITS           :                         0.0\n          JENERGY_MUON_RANGE_METRES      :           344.9767431592819\n          JENERGY_NOISE_LIKELIHOOD       :         -333.87773581129136\n          JENERGY_NDF                    :                      1471.0\n          JENERGY_NUMBER_OF_HITS         :                       101.0\n\nto get a specific value from track 0 in event 0, let's say for example the liklihood:\n\n.. code-block:: python3\n\n    >>> r[0].tracks[0].lik\n    294.6407542676734\n\nto get the reconstruction parameters, first take a look at the available reconstruction keys: \n\n.. code-block:: python3\n\n    >>> r.best_reco.dtype.names\n    ['JGANDALF_BETA0_RAD',\n     'JGANDALF_BETA1_RAD',\n     'JGANDALF_CHI2',\n     'JGANDALF_NUMBER_OF_HITS',\n     'JENERGY_ENERGY',\n     'JENERGY_CHI2',\n     'JGANDALF_LAMBDA',\n     'JGANDALF_NUMBER_OF_ITERATIONS',\n     'JSTART_NPE_MIP',\n     'JSTART_NPE_MIP_TOTAL',\n     'JSTART_LENGTH_METRES',\n     'JVETO_NPE',\n     'JVETO_NUMBER_OF_HITS',\n     'JENERGY_MUON_RANGE_METRES',\n     'JENERGY_NOISE_LIKELIHOOD',\n     'JENERGY_NDF',\n     'JENERGY_NUMBER_OF_HITS']\n\nthe keys above can also be accessed with a tab completion:\n\n.. image:: https://git.km3net.de/km3py/km3io/raw/master/examples/pictures/reco.png\n\nto get a numpy `recarray <https://docs.scipy.org/doc/numpy/reference/generated/numpy.recarray.html>`__ of all fit data of the best reconstructed track:\n\n.. code-block:: python3\n\n    >>> r.best_reco\n\nto get an array of a parameter of interest, let's say `'JENERGY_ENERGY'`:\n\n.. code-block:: python3\n\n    >>> r.best_reco['JENERGY_ENERGY']\n    array([1141.87137899, 4708.16378575,  499.7243005 ,  103.54680875,\n        208.6103912 , 1336.52338666,  998.87632267, 1206.54345674,\n         16.28973662])\n\n**Note**: In km3io, the best fit is defined as the track fit with the maximum reconstruction stages. When \"nan\" is returned, it means that the reconstruction parameter of interest is not found. for example, in the case of muon simulations: if `[1, 2]` are the reconstruction stages, then only the fit parameters corresponding to the stages `[1, 2]` are found in the Offline files, the remaining fit parameters corresponding to the stages `[3, 4, 5]` are all filled with nan.\n\nto get a numpy recarray of the fit data of tracks with specific reconstruction stages, let's say `[1, 2, 3, 4, 5]` in the case of a muon track reconstruction: \n\n.. code-block:: python3\n\n    >>> r.get_reco_fit([1, 2, 3, 4, 5])\n\nagain, to get the reconstruction parameters names: \n\n.. code-block:: python3\n\n    >>> r.get_reco_fit([1, 2, 3, 4, 5]).dtype.names\n    ('JGANDALF_BETA0_RAD',\n     'JGANDALF_BETA1_RAD',\n     'JGANDALF_CHI2',\n     'JGANDALF_NUMBER_OF_HITS',\n     'JENERGY_ENERGY',\n     'JENERGY_CHI2',\n     'JGANDALF_LAMBDA',\n     'JGANDALF_NUMBER_OF_ITERATIONS',\n     'JSTART_NPE_MIP',\n     'JSTART_NPE_MIP_TOTAL',\n     'JSTART_LENGTH_METRES',\n     'JVETO_NPE',\n     'JVETO_NUMBER_OF_HITS',\n     'JENERGY_MUON_RANGE_METRES',\n     'JENERGY_NOISE_LIKELIHOOD',\n     'JENERGY_NDF',\n     'JENERGY_NUMBER_OF_HITS')\n\nto get the reconstruction data of interest, for example ['JENERGY_ENERGY']: \n\n.. code-block:: python3\n\n    >>> r.get_reco_fit([1, 2, 3, 4, 5])['JENERGY_ENERGY']\n    array([1141.87137899, 4708.16378575,  499.7243005 ,  103.54680875,\n        208.6103912 , 1336.52338666,  998.87632267, 1206.54345674,\n         16.28973662])\n\nto get a dictionary of the corresponding hits data (for example dom ids and hits ids)\n\n.. code-block:: python3\n\n    >>> r.get_reco_hits([1,2,3,4,5], [\"dom_id\", \"id\"]))\n    {'dom_id': <ChunkedArray [[102 102 102 ... 11517 11518 11518] [101 101 101 ... 11517 11518 11518] [101 101 102 ... 11518 11518 11518] [101 102 102 ... 11516 11517 11518] [101 101 102 ... 11517 11518 11518] [101 101 102 ... 11517 11517 11518] [101 101 102 ... 11516 11516 11517] ...] at 0x7f553ab7f3d0>,\n    'id': <ChunkedArray [[0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] ...] at 0x7f553ab7f890>}\n\nto get a dictionary of the corresponding tracks data (for example position x and y)\n\n.. code-block:: python3\n\n    >>> r.get_reco_tracks([1, 2, 3, 4, 5], [\"pos_x\", \"pos_y\"])\n\n    {'pos_x': array([-647.39638136,  448.98490051,  451.12336854,  174.23666051,207.24223984, -460.75770881, -522.58197621,  324.16230509,\n            -436.2319534 ]),\n     'pos_y': array([-138.62068609,   77.58887593,  251.08805881, -114.60614519, 143.61947974,   86.85012087, -263.14983599, -203.14263572,\n             467.75113594])}\n\nto get a dictionary of the corresponding events data (for example det_id and run_id)\n\n.. code-block:: python3\n\n    >>> r.get_reco_events([1, 2, 3, 4, 5], [\"run_id\", \"det_id\"])\n\n    {'run_id': <ChunkedArray [1 1 1 1 1 1 1 ...] at 0x7f553b5b2710>,\n     'det_id': <ChunkedArray [20 20 20 20 20 20 20 ...] at 0x7f5558030750>}\n\n**Note**: When the reconstruction stages of interest are not found in all your data file, an error is raised.\n\n\nreading mc hits data\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nto read mc hits data:\n\n.. code-block:: python3\n\n    >>> r.mc_hits\n    <OfflineHits: 10 parsed elements>\n\nthat's it! All branches in mc hits tree can be accessed in the exact same way described in the section `reading hits data <#reading-hits-data>`__ . All data is easily accesible and if you are stuck, hit tab key to see all the available branches:\n\n.. image:: https://git.km3net.de/km3py/km3io/raw/master/examples/pictures/mc_hits.png\n\nreading mc tracks data\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nto read mc tracks data:\n\n.. code-block:: python3\n\n    >>> r.mc_tracks\n    <OfflineTracks: 10 parsed elements>\n\nthat's it! All branches in mc tracks tree can be accessed in the exact same way described in the section `reading tracks data <#reading-tracks-data>`__ . All data is easily accesible and if you are stuck, hit tab key to see all the available branches:\n\n.. image:: https://git.km3net.de/km3py/km3io/raw/master/examples/pictures/mc_tracks.png", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://git.km3net.de/km3py/km3io", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "km3io", "package_url": "https://pypi.org/project/km3io/", "platform": "any", "project_url": "https://pypi.org/project/km3io/", "project_urls": {"Homepage": "http://git.km3net.de/km3py/km3io"}, "release_url": "https://pypi.org/project/km3io/0.10.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "KM3NeT I/O without ROOT", "version": "0.10.0"}, "last_serial": 6928188, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "d26e87b07188dd6ac2a1fa7dc8314dfd", "sha256": "524fb73332e063181fc06aea6926bcbc49c2c5be46d8184ec3b0cdfeddf5d819"}, "downloads": -1, "filename": "km3io-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d26e87b07188dd6ac2a1fa7dc8314dfd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 79472, "upload_time": "2019-11-15T12:30:51", "upload_time_iso_8601": "2019-11-15T12:30:51.447534Z", "url": "https://files.pythonhosted.org/packages/d6/02/246eea35f0db9a8d1ff346ae5264cf256fd43b656c874fd40eba4f1e215d/km3io-0.1.0.tar.gz"}], "0.10.0": [{"comment_text": "", "digests": {"md5": "56405a6c3fccabece1e2018ae22f0b7e", "sha256": "7b8273e36742cc5440138af1dab5ef837513f75e668b931b01ca5083054d2108"}, "downloads": -1, "filename": "km3io-0.10.0.tar.gz", "has_sig": false, "md5_digest": "56405a6c3fccabece1e2018ae22f0b7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9304258, "upload_time": "2020-04-01T14:56:20", "upload_time_iso_8601": "2020-04-01T14:56:20.267656Z", "url": "https://files.pythonhosted.org/packages/5b/d5/2c159889dca868d517a6895cf41b0869427e376e1789aaee464d67fdf764/km3io-0.10.0.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2176e0db91c99090cb7548e381c2a6cc", "sha256": "48031b46f888a3063245e60d95501d4098077c7cbc2a41902ec764314784516d"}, "downloads": -1, "filename": "km3io-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2176e0db91c99090cb7548e381c2a6cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1405123, "upload_time": "2019-11-15T16:31:00", "upload_time_iso_8601": "2019-11-15T16:31:00.155310Z", "url": "https://files.pythonhosted.org/packages/aa/9b/f52263943665c707289d16dd8e6481aa2bb4ed912ce237b01d04438f19ca/km3io-0.2.0.tar.gz"}], "0.2.1": [{"comment_text": "", "digests": {"md5": "53686636b3a74574e0a818ebbbcdee42", "sha256": "7d4081690cb4830cf61cf8343dae5a013e893217ecbb3e15f403995c39f23ba2"}, "downloads": -1, "filename": "km3io-0.2.1.tar.gz", "has_sig": false, "md5_digest": "53686636b3a74574e0a818ebbbcdee42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1405950, "upload_time": "2019-11-15T23:01:53", "upload_time_iso_8601": "2019-11-15T23:01:53.957352Z", "url": "https://files.pythonhosted.org/packages/c7/5d/45ed6e5979ed1479b4b33c0961ab292f4fc15fea05ef129b27aefdc76a4c/km3io-0.2.1.tar.gz"}], "0.3.0": [{"comment_text": "", "digests": {"md5": "989ae0ad52aecebc0a00f85e2f691954", "sha256": "2777d52c10589dff5b893cf94493c56117901d1d61f33d6b761eef2a7cbd70e6"}, "downloads": -1, "filename": "km3io-0.3.0.tar.gz", "has_sig": false, "md5_digest": "989ae0ad52aecebc0a00f85e2f691954", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1415399, "upload_time": "2019-11-19T00:15:34", "upload_time_iso_8601": "2019-11-19T00:15:34.354710Z", "url": "https://files.pythonhosted.org/packages/74/94/6c9594f82fdd21a6b7d1fc8825319a3665f6762fc3162f912919101860b8/km3io-0.3.0.tar.gz"}], "0.4.0": [{"comment_text": "", "digests": {"md5": "cb36e2b06009f2609e2effe020de49a1", "sha256": "40dc921dd99569093118276f3312df32f5d94d10442502c28b2081e5878b1c6b"}, "downloads": -1, "filename": "km3io-0.4.0.tar.gz", "has_sig": false, "md5_digest": "cb36e2b06009f2609e2effe020de49a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1417177, "upload_time": "2019-11-22T12:35:53", "upload_time_iso_8601": "2019-11-22T12:35:53.443328Z", "url": "https://files.pythonhosted.org/packages/68/42/6c4ab83a73864b376c196a99aac66d680a86a48b67ac4f6fee6d27bf7dd4/km3io-0.4.0.tar.gz"}], "0.5.0": [{"comment_text": "", "digests": {"md5": "def4fd37c9381e2b0c885149f0ded1ed", "sha256": "22f5dbed199c60378bd3e061750c8b432e4b455f39b37f55e4f59608c89df5e9"}, "downloads": -1, "filename": "km3io-0.5.0.tar.gz", "has_sig": false, "md5_digest": "def4fd37c9381e2b0c885149f0ded1ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1764861, "upload_time": "2019-12-16T16:39:40", "upload_time_iso_8601": "2019-12-16T16:39:40.573858Z", "url": "https://files.pythonhosted.org/packages/c0/53/8261afd821a0b4d89dbae3467386e1c1251c97b57b62edf1eee377325edc/km3io-0.5.0.tar.gz"}], "0.5.1": [{"comment_text": "", "digests": {"md5": "9bc1cfb15b2bfb74094ec066aaf60135", "sha256": "b1f5b7a282f86bc80bd3aa0f63ce39b48180e6513ff38e0d569b4abc102a6885"}, "downloads": -1, "filename": "km3io-0.5.1.tar.gz", "has_sig": false, "md5_digest": "9bc1cfb15b2bfb74094ec066aaf60135", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1839069, "upload_time": "2019-12-18T14:45:09", "upload_time_iso_8601": "2019-12-18T14:45:09.174848Z", "url": "https://files.pythonhosted.org/packages/4e/20/2fe6ad380a5e93a4f0f1976da1c90c29d632b13c7bfd42ea997cb105080d/km3io-0.5.1.tar.gz"}], "0.6.0": [{"comment_text": "", "digests": {"md5": "e108e7359536edd599defa7f079c1850", "sha256": "2a3d493c09b6b2ec9ced75ef4717c0c5fa1e1a705b4e839de8f3936cdd7102c9"}, "downloads": -1, "filename": "km3io-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e108e7359536edd599defa7f079c1850", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1839775, "upload_time": "2019-12-21T19:06:05", "upload_time_iso_8601": "2019-12-21T19:06:05.021857Z", "url": "https://files.pythonhosted.org/packages/d6/00/4eec919ee5de64af9dad6e654a9347fd47c622555d458a4a99a8285dee16/km3io-0.6.0.tar.gz"}], "0.6.1": [{"comment_text": "", "digests": {"md5": "5db0762e74bfd02526f4e0c0ffae5db9", "sha256": "daffd4c7ab9274c79657f1f23e2d5af79e958a2d5eebf86077dfba41cc8a4104"}, "downloads": -1, "filename": "km3io-0.6.1.tar.gz", "has_sig": false, "md5_digest": "5db0762e74bfd02526f4e0c0ffae5db9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1839782, "upload_time": "2019-12-21T19:06:41", "upload_time_iso_8601": "2019-12-21T19:06:41.522701Z", "url": "https://files.pythonhosted.org/packages/7a/03/8b3386ab4a655b84cf3d59a28adafc1bab6d4e7c89cb8674f95dc9b9f84c/km3io-0.6.1.tar.gz"}], "0.6.2": [{"comment_text": "", "digests": {"md5": "672cbe257ef1dfa1539002c01e9b6703", "sha256": "c0c56feb7e7196e2b6beab08f3c04e6b328b8129c1a7e6b7bcf34aa03b2174f3"}, "downloads": -1, "filename": "km3io-0.6.2.tar.gz", "has_sig": false, "md5_digest": "672cbe257ef1dfa1539002c01e9b6703", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1840103, "upload_time": "2019-12-22T14:04:16", "upload_time_iso_8601": "2019-12-22T14:04:16.222047Z", "url": "https://files.pythonhosted.org/packages/21/3d/076fbc4ffc83fbd9b5a11e52aee9596e12b41c71c3a6c975676dc1e6230b/km3io-0.6.2.tar.gz"}], "0.6.3": [{"comment_text": "", "digests": {"md5": "b43b82ad22d29739e7b3702913ceaed5", "sha256": "ec780e461ccd8fe12095368e31d35da8990c92208c4408654da9089f5d8ba555"}, "downloads": -1, "filename": "km3io-0.6.3.tar.gz", "has_sig": false, "md5_digest": "b43b82ad22d29739e7b3702913ceaed5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1840063, "upload_time": "2020-01-09T16:15:32", "upload_time_iso_8601": "2020-01-09T16:15:32.433133Z", "url": "https://files.pythonhosted.org/packages/3d/08/e50b3a76406ad7a9f6f06e619d20c45e2a06337f6f8e217eb9841c334642/km3io-0.6.3.tar.gz"}], "0.7.0": [{"comment_text": "", "digests": {"md5": "19451041dc12586b5a9358cc14a4dd46", "sha256": "845492e018e96c7ee0000ce0cd09d880e372ccd2349bd02d45068813ad652df8"}, "downloads": -1, "filename": "km3io-0.7.0.tar.gz", "has_sig": false, "md5_digest": "19451041dc12586b5a9358cc14a4dd46", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1842012, "upload_time": "2020-01-23T20:22:12", "upload_time_iso_8601": "2020-01-23T20:22:12.355020Z", "url": "https://files.pythonhosted.org/packages/37/d8/de2a13d33f83bd194b074543b2b20778d1aac29a48106afe7843b211b0f6/km3io-0.7.0.tar.gz"}], "0.8.0": [{"comment_text": "", "digests": {"md5": "4cd61fd43024cf6c15bdb226f006b5b4", "sha256": "8cf9365c7cfcfc05ff857a65ebf6223545322c767b981f2e469e381b8337e73e"}, "downloads": -1, "filename": "km3io-0.8.0.tar.gz", "has_sig": false, "md5_digest": "4cd61fd43024cf6c15bdb226f006b5b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1843464, "upload_time": "2020-01-23T23:04:38", "upload_time_iso_8601": "2020-01-23T23:04:38.322781Z", "url": "https://files.pythonhosted.org/packages/33/21/c5f3e1422adf390dc3654c83159389ada4f66a969a83128859e46f633fa9/km3io-0.8.0.tar.gz"}], "0.8.1": [{"comment_text": "", "digests": {"md5": "0ce321e8fc344d146f1e2c7943bb5b56", "sha256": "70f90165e62d9efc3573c9c4167a7d19e5a62fb56eec831b577d5b8fa4b25e91"}, "downloads": -1, "filename": "km3io-0.8.1.tar.gz", "has_sig": false, "md5_digest": "0ce321e8fc344d146f1e2c7943bb5b56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1874457, "upload_time": "2020-02-10T13:18:45", "upload_time_iso_8601": "2020-02-10T13:18:45.626803Z", "url": "https://files.pythonhosted.org/packages/79/26/48e00864a2b686470140b09551017762399b970830e37d4d35dc8be12513/km3io-0.8.1.tar.gz"}], "0.8.2": [{"comment_text": "", "digests": {"md5": "4df65880e2d4e6fa87ce5ee4a2dd3aee", "sha256": "2803eb4ccc39dc30b9d113aa73729b8dc80332a523208ef88d8aaa255cc4a9b9"}, "downloads": -1, "filename": "km3io-0.8.2.tar.gz", "has_sig": false, "md5_digest": "4df65880e2d4e6fa87ce5ee4a2dd3aee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1878064, "upload_time": "2020-02-14T07:27:17", "upload_time_iso_8601": "2020-02-14T07:27:17.564431Z", "url": "https://files.pythonhosted.org/packages/c1/4e/105c650d7836ae002cf7c7b4b92f31857a4feb24b80e80e5d7a84c85d740/km3io-0.8.2.tar.gz"}], "0.8.3": [{"comment_text": "", "digests": {"md5": "b5afb630cf369dd95c8c0d29a0f1c5ad", "sha256": "b0284f2eafdb2f27bb3380630baaf23a39fef66fb74ef9f2b09cb234b788ec04"}, "downloads": -1, "filename": "km3io-0.8.3.tar.gz", "has_sig": false, "md5_digest": "b5afb630cf369dd95c8c0d29a0f1c5ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2099035, "upload_time": "2020-02-25T13:02:41", "upload_time_iso_8601": "2020-02-25T13:02:41.993748Z", "url": "https://files.pythonhosted.org/packages/10/82/dc59fa33f56ed0822020ccce5152dc67e823c86e61157a3c5e4b9ca56851/km3io-0.8.3.tar.gz"}], "0.9.0": [{"comment_text": "", "digests": {"md5": "65ed5b2ebc68acb2083605128d108d8c", "sha256": "a6081b29d6f0fde615ae5b9f9d11a28955518e955f0a09b4b9793b8904f7b6b8"}, "downloads": -1, "filename": "km3io-0.9.0.tar.gz", "has_sig": false, "md5_digest": "65ed5b2ebc68acb2083605128d108d8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2134647, "upload_time": "2020-03-03T18:06:30", "upload_time_iso_8601": "2020-03-03T18:06:30.398481Z", "url": "https://files.pythonhosted.org/packages/b9/a7/150eae834613c5fa0b320d06fc2a5297011487c51e8f83376cc7831a0c0e/km3io-0.9.0.tar.gz"}], "0.9.1": [{"comment_text": "", "digests": {"md5": "01f04d6aacd91085f22ff8439da7d2a5", "sha256": "192460dff61cdeacf8737eb0b4e0e85058a7c9bdc51a6b0fd6bbd53ccafd9679"}, "downloads": -1, "filename": "km3io-0.9.1.tar.gz", "has_sig": false, "md5_digest": "01f04d6aacd91085f22ff8439da7d2a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2256991, "upload_time": "2020-03-29T17:49:40", "upload_time_iso_8601": "2020-03-29T17:49:40.556197Z", "url": "https://files.pythonhosted.org/packages/c8/d1/661f8d096918b517688ec59acae6f416a5dbe1af7218c7b0e2caf63027e2/km3io-0.9.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "56405a6c3fccabece1e2018ae22f0b7e", "sha256": "7b8273e36742cc5440138af1dab5ef837513f75e668b931b01ca5083054d2108"}, "downloads": -1, "filename": "km3io-0.10.0.tar.gz", "has_sig": false, "md5_digest": "56405a6c3fccabece1e2018ae22f0b7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9304258, "upload_time": "2020-04-01T14:56:20", "upload_time_iso_8601": "2020-04-01T14:56:20.267656Z", "url": "https://files.pythonhosted.org/packages/5b/d5/2c159889dca868d517a6895cf41b0869427e376e1789aaee464d67fdf764/km3io-0.10.0.tar.gz"}]}