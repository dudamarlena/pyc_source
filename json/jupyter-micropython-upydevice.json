{"info": {"author": "Carlos Gil Gonzalez", "author_email": "carlosgilglez@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Embedded Systems", "Topic :: System :: Monitoring", "Topic :: Terminals"], "description": "Jupyter MicroPython Upydevice Kernel\n=====================================\n\nJupyter kernel to interact with a MicroPython board over its REPL\ninterface.\n\nTypically used with MicroPython boards over the USB / Serial interface,\nor through the WebREPL.\n\nMicroPython\n-----------\nTested on MicroPython v1.11 and v1.12\n\nBoards\n-------\nTested on:\n  - PYBOARD V1.1/Lite\n  - ESP32\n  - ESP8266\n  - CIRCUITPLAYGROUND EXPRESS\n\n\nIDE/PLATFORMS\n-------------\n- Jupyter notebooks\n- Jupyter lab\n- Atom (`Hydrogen <https://github.com/nteract/hydrogen>`_)\n- Visual Studio Code (`Jupyter notebooks <https://code.visualstudio.com/docs/python/jupyter-support>`_)\n\nBackground\n----------\n\nThis Jupyter MicroPython Kernel is heavily based on the amazing work\ndone on https://github.com/goatchurchprime/jupyter_micropython_kernel\nand https://github.com/andrewleech/jupyter_micropython_remote\n\nTheir device connection library has been replaced by\nupydevice latest classes ``SERIAL_DEVICE`` and ``WS_DEVICE`` that allows both serial and\nwebsocket (WebREPL) connections.\nThe kernel has also been reworked to support autocompletions on tab which works\nfor MicroPython, iPython and %cell magic commands.\nSome %cell magic commands were dropped and some new were added e.g: ``%is_reachable``\n``%meminfo`` ``%whoami`` ``%gccollect`` ``%sync`` ``%logdata`` ``%devplot``\n\nInstallation\n------------\n\nEnsure you have a new enough MicroPython installed on your board (see above).\n\nYou also need python 3.6 or above, ensuring it\u2019s available from your current\ncommand line. Optionally (recommended) use your favourite pipenv / virtualenv to set\nup a clean environment to run jupyter from.\n\nThen install this module:\n\n::\n\n   pip install jupyter-micropython-upydevice\n\nInstall the kernel into jupyter itself using the shell command:\n\n::\n\n   python -m mpy_kernel_upydevice.install\n\nThis registers the kernel with Jupyter so it can be selected for use in\nnotebooks\n\nRunning\n-------\n\nNow run Jupyter notebooks or Jupyter lab:\n\nFor Jupyter lab do:\n\n::\n\n   jupyter lab\n\nIn the launcher click on the MicroPython upydevice button to create a new notebook\n\nSerial device\n-------------\n\nTo connect through serial/USB: ``%serialconnect [SERIAL PORT] [BAUDRATE]``\n\nThis command has autocompletion on tab, so hit tab and select a port from the list\n\nBaudrate default is 115200\n\n*Use -kbi option to interrupt any running loop*\n\neg:\n::\n\n   %serialconnect /dev/tty.usbmodem3370377430372 115200\n\n\n\n::\n\n    ** Serial connected **\n\n    /dev/tty.usbmodem3370377430372\n\n    MicroPython v1.12-156-g0852acfc7 on 2020-02-11; PYBv1.1 with STM32F405RG\n    Type \"help()\" for more information.\n\nWireless Device\n---------------\n\nTo connect through WebREPL: ``%websocketconnect [IP] --password \"[PASSWORD]\"``\nor if a device already configured (see `upydev <https://github.com/Carglglz/upydev>`_)\nin the global group 'UPY_G',  ``%websocketconnect @[DEVICE]`` which has autocompletion\non tab.\n\n*Use -kbi option to interrupt any running loop*\n\neg:\n\n::\n\n    %websocketconnect 192.168.1.42 --password \"mypass\"\n\n\n\nor\n\n::\n\n    %websocketconnect @esp_room1\n\n::\n\n    ** WebREPL connected **\n\n    MicroPython v1.12-63-g1c849d63a on 2020-01-14; ESP32 module with ESP32\n    Type \"help()\" for more information.\n\nYou should now be able to execute MicroPython commands by running the\ncells.\n\nThere is a *upydevice_kernel_demo.ipynb* file in the directory you could look at\nwith some of the features shown.\n\nIf a cell is taking too long, or if you want to stop an ongoing loop\nTo interrupt / ^C use \u201cInterrupt the kernel\u201d button and this will raise a ``KeyboardInterrupt``\nin the device.\n\nAlternatively hit Escape and then \u2018i\u2019 twice.\n\nTo do a soft reset (it will reconnect automatically) type:\n\n::\n\n   %rebootdevice\n\n  Note: Restarting the kernel does not actually reboot the device.\n  Also, pressing the reset button will mess things up (at least for WebREPL,\n  and for serial this is probably true as well).\n\n%Cell magic Commands\n--------------------\nCell magic commands have autocompletion on tab, so hit tab and see what Commands\nare available, or to see more information about each command do:\n::\n\n   %lsmagic\n\n\n::\n\n    %disconnect\n      disconnects device\n\n    %lsmagic\n      list magic commands\n\n    %rebootdevice\n      reboots device\n\n    %is_reachable\n      Test if device is reachable (must be connected first)\n\n    %serialconnect [portname] [-kbi] [baudrate]\n      connects to a device over USB, default baudrate is 115200\n\n    %websocketconnect [websocketurl] [-kbi] [--password PASSWORD]\n      connects to the WebREPL over wifi (WebREPL daemon must be running)\n      websocketurl defaults to 192.168.4.1 (uri -> ws://192.168.4.1:8266)\n\n    %meminfo\n      Shows RAM size/used/free/use% info\n\n    %whoami\n      Shows Device name, port, id, and system info\n\n    %gccollect\n      To use the garbage collector and free some RAM if possible\n\n    %local\n      To run the cell contents in local iPython\n\n    %sync\n      To sync a variable/output data structure of the device into iPython\n      if no var name provided it stores the output into _\n\n    %logdata [-fs FS] [-tm TM] [-u U [U ...]] [-s] v [v ...]\n      To log output data of the device into iPython,\n      data is stored in 'devlog'\n\n     positional arguments:\n        v             Name of variables\n     optional arguments:\n        -fs FS        Sampling frequency in Hz\n        -tm TM        Sampling timeout in ms\n        -u U [U ...]  Unit of variables\n        -s            Silent mode\n\n    %devplot\n      To plot devlog data\n\nThe communications interface to the micropython module is based on `upydevice\n<https://github.com/Carglglz/upydevice>`_ new classes ``SERIAL_DEVICE`` and ``WS_DEVICE``\n\n\nThis is also the core library of `upydev\n<https://github.com/Carglglz/upydev>`_ .\nThe SERIAL SHELL-REPL can be used simultaneously\nwith the upydevice Kernel since the serial connection is non-blocking.\n\n%local\n------\nIndividual cells can also be run on the local iPython instead of the MicroPython\nkernel by starting a cell with ``%local``\n\nThis can be useful to work directly with local files, use ipywidgets, etc.\nCommands here will be run by the standard ipython kernel.\n\nIn `%local` cells, a special global function ``remote()`` is also available which\nwill pass a single string argument to the MicroPython board to be run, returning\nany stdout from the command. Eg:\n\nmicropython cell\n\n::\n\n   from machine import Pin\n   import neopixel\n   pixels = neopixel.NeoPixel(Pin(4, Pin.OUT), 1)\n\n   def set_colour(r, g, b):\n       pixels[0] = (r, g, b)\n       pixels.write()\n\n   set_colour(0xff, 0xff, 0xff)\n\nlocal cell\n\n::\n\n   %local\n   import colorsys\n   from ipywidgets import interact, Layout, FloatSlider\n\n   def set_hue(hue):\n       r, g, b = (int(p*255) for p in colorsys.hsv_to_rgb(hue, 1.0, 1.0))\n       remote(f\"set_colour({r}, {g}, {b})\")\n\n   slider = FloatSlider(min=0,max=1.0,step=0.01, layout=Layout(width='80%', height='80px'))\n   interact(set_hue, hue=slider)\n\n\n\n\\\n\n\n\n%sync\n-----\n\nAny variable/output of the device can be stored in local iPython easily.\nIf a var name is not provided the output will be stored locally in _ , e.g. :\n\n::\n\n    %sync\n    [1,2,3,5]\n\n::\n\n  [1, 2, 3, 5]\n\n\n::\n\n    %local\n    _\n\n::\n\n  [1, 2, 3, 5]\n\n\nIf device output is assigned to a variable it will be stored locally with the\nsame name e.g. :\n\n::\n\n    %sync\n    my_data = {'key1':[1,2,3], 'key2':[4,5,6]}\n\n\n::\n\n    %local\n    my_data\n\n\n::\n\n    {'key2': [4, 5, 6], 'key1': [1, 2, 3]}\n\n\n\n\n\nThis works for any type of output (bytes/bytearrays/arrays/ints/floats/strings/lists/dicts)\n\n%logdata\n---------\nThis allows to log any data from device stdout as long as the data is in tuple or list format.\nThe data will be stored in local iPython in 'devlog'.\n\npositional arguments:\n   v             Name of variables\noptional arguments:\n   - -fs FS        Sampling frequency in Hz\n   - -tm TM        Sampling timeout in ms\n   - -u U [U ...]  Unit of variables\n   -  \\-s            Silent mode\n\ne.g. :\nLogging accelerometer data from an IMU sensor.\n\n*micropython cell*\n\n::\n\n    import time\n    from machine import I2C, Pin\n    from lsm9ds1 import LSM9DS1\n    i2c = I2C(scl=Pin(22), sda=Pin(23))\n    imu = LSM9DS1(i2c)\n\n    def stream_accel(n, tm):\n      for i in range(n):\n          print(imu.read_accel())\n          time.sleep_ms(tm)\n\n\n*%logdata cell*\n\n::\n\n    %logdata 'x' 'y' 'z' -tm 10 -u 'g(9.8m/s^2)'\n    stream_accel(400, 10)\n\n::\n\n    vars:['x', 'y', 'z'], fs:None Hz, tm:10 ms, u: ['g(9.8m/s^2)'], silent: False\n    ------------------------------\n    (-0.6851807, 0.6947632, 0.3374634)\n    (-0.6889038, 0.6830444, 0.3411255)\n    (-0.7027588, 0.6877441, 0.3455811)\n    (-0.7280884, 0.7080688, 0.3401489)\n    ....\n    (-0.734375, 0.7600098, -0.0004272461)\n    (-0.7210693, 0.7717896, -0.05194092)\n    (-0.7344971, 0.7575684, 0.006652832)\n\n\nNow data is stored in devlog\n\n::\n\n    %local\n    devlog\n\n::\n\n    {'x': [-0.6851807, ..., -0.7344971], 'y': [0.6947632, ..., 0.7575684],\n     'z': [-0.7280884, ..., 0.006652832], 'vars': ['x', 'y', 'z']\n     'fs': 100, 'ts': [0.0, ... , 4.0], 'u': ['g(9.8m/s^2)']}\n\n\n%devplot\n--------\nThis allows to plot *devlog* data, just do:\n\n\n::\n\n    %devplot\n\n\n\n.. image:: acc-plot.png\n    :width: 40pt\n\n\nNow to save the plot do:\n\n::\n\n    %local\n    fig.savefig('acc-plot.png')\n\n\n::\n\n    %local\n    %ls\n\n::\n\n    LICENSE*                    mpy_kernel_upydevice/\n    README.rst*                 setup.py\n    acc-plot.png                upydevie_kernel_demo.ipynb\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Carglglz/jupyter_upydevice_kernel", "keywords": "jupyter micropython upydevice", "license": "GPL3", "maintainer": "", "maintainer_email": "", "name": "jupyter-micropython-upydevice", "package_url": "https://pypi.org/project/jupyter-micropython-upydevice/", "platform": "", "project_url": "https://pypi.org/project/jupyter-micropython-upydevice/", "project_urls": {"Homepage": "https://github.com/Carglglz/jupyter_upydevice_kernel"}, "release_url": "https://pypi.org/project/jupyter-micropython-upydevice/0.0.3/", "requires_dist": ["upydevice (>=0.2.2)"], "requires_python": "", "summary": "Jupyter kernel based on upydevice for operating MicroPython", "version": "0.0.3"}, "last_serial": 6689363, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e9c7bef726f066abd198e48ffba7bfbc", "sha256": "c2c6764e262e1c2bde63c72c66e00fe68ec64772275bfa5c55d37b64a7663479"}, "downloads": -1, "filename": "jupyter_micropython_upydevice-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9c7bef726f066abd198e48ffba7bfbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15554, "upload_time": "2020-02-16T19:05:16", "upload_time_iso_8601": "2020-02-16T19:05:16.146593Z", "url": "https://files.pythonhosted.org/packages/de/ba/2c3efdc66af0fa51d16c93b923aeeead9cdc98eccf49a5bb00078a168fd2/jupyter_micropython_upydevice-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "144364cb3647924c749a1181954f6639", "sha256": "94d4fa4248672bb506ea71722e5e67023678f089665234a7b1c477d6b6cc60ac"}, "downloads": -1, "filename": "jupyter_micropython_upydevice-0.0.1.tar.gz", "has_sig": false, "md5_digest": "144364cb3647924c749a1181954f6639", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 265786, "upload_time": "2020-02-16T19:05:20", "upload_time_iso_8601": "2020-02-16T19:05:20.061693Z", "url": "https://files.pythonhosted.org/packages/fe/0e/860fb47bdecfd3e6df5f8dd85612832c0c2208456433c996fa35aa717359/jupyter_micropython_upydevice-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ef368bc60e84adee30239085e0bd6ffd", "sha256": "54ae6e7eba50a415eabf5bbe7d853091ec7d44f7df0d92e3b8bb4b2dc585f08d"}, "downloads": -1, "filename": "jupyter_micropython_upydevice-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ef368bc60e84adee30239085e0bd6ffd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15555, "upload_time": "2020-02-17T17:26:49", "upload_time_iso_8601": "2020-02-17T17:26:49.326788Z", "url": "https://files.pythonhosted.org/packages/ec/cb/0db8aae4f0c6b3f2cbaecbc7782cd5c0e8e05eb5f356b027aa7eeabd2944/jupyter_micropython_upydevice-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d4ce6be535761e29e459c9c78e574262", "sha256": "d6bdaa3ae350c44432c02edf53d03d8f5857de45160eed736515aaf47a00c7c8"}, "downloads": -1, "filename": "jupyter_micropython_upydevice-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d4ce6be535761e29e459c9c78e574262", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 265822, "upload_time": "2020-02-17T17:26:51", "upload_time_iso_8601": "2020-02-17T17:26:51.115144Z", "url": "https://files.pythonhosted.org/packages/ea/b5/a07d6f181649e7332a6ca6917617fd5fba0f7b8da6786089b1d52d4e234b/jupyter_micropython_upydevice-0.0.2.tar.gz"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4b525f333098392c305ec49b060e55e6", "sha256": "0359b1070585b28a62b7f49363212fa6b9bc8bcdff5664b15a3b8c487a7a14d5"}, "downloads": -1, "filename": "jupyter_micropython_upydevice-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4b525f333098392c305ec49b060e55e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20838, "upload_time": "2020-02-24T15:56:39", "upload_time_iso_8601": "2020-02-24T15:56:39.207547Z", "url": "https://files.pythonhosted.org/packages/bd/2b/a929c1e75614ac58164fa3685175a42253fdfe58433c8e33789ead10e318/jupyter_micropython_upydevice-0.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "dd5358b9984d86a68189fc6c0a6a2dd4", "sha256": "ef8f0e1eb0b038514e9d31c5b5e65c18e957aae03e4edc1349065f32747cf028"}, "downloads": -1, "filename": "jupyter_micropython_upydevice-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dd5358b9984d86a68189fc6c0a6a2dd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270849, "upload_time": "2020-02-24T15:56:41", "upload_time_iso_8601": "2020-02-24T15:56:41.176612Z", "url": "https://files.pythonhosted.org/packages/7f/ee/b77f6a943d5b0da5742362053ae7fd80206cc27a2715c800a8807a35273f/jupyter_micropython_upydevice-0.0.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b525f333098392c305ec49b060e55e6", "sha256": "0359b1070585b28a62b7f49363212fa6b9bc8bcdff5664b15a3b8c487a7a14d5"}, "downloads": -1, "filename": "jupyter_micropython_upydevice-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4b525f333098392c305ec49b060e55e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20838, "upload_time": "2020-02-24T15:56:39", "upload_time_iso_8601": "2020-02-24T15:56:39.207547Z", "url": "https://files.pythonhosted.org/packages/bd/2b/a929c1e75614ac58164fa3685175a42253fdfe58433c8e33789ead10e318/jupyter_micropython_upydevice-0.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "dd5358b9984d86a68189fc6c0a6a2dd4", "sha256": "ef8f0e1eb0b038514e9d31c5b5e65c18e957aae03e4edc1349065f32747cf028"}, "downloads": -1, "filename": "jupyter_micropython_upydevice-0.0.3.tar.gz", "has_sig": false, "md5_digest": "dd5358b9984d86a68189fc6c0a6a2dd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270849, "upload_time": "2020-02-24T15:56:41", "upload_time_iso_8601": "2020-02-24T15:56:41.176612Z", "url": "https://files.pythonhosted.org/packages/7f/ee/b77f6a943d5b0da5742362053ae7fd80206cc27a2715c800a8807a35273f/jupyter_micropython_upydevice-0.0.3.tar.gz"}]}