{"info": {"author": "Aaron Bach", "author_email": "bachya1208@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# \ud83d\udeb0 aioguardian: A Python3 library for Elexa Guardian devices\n\n[![CI](https://github.com/bachya/aioguardian/workflows/CI/badge.svg)](https://github.com/bachya/aioguardian/actions)\n[![PyPi](https://img.shields.io/pypi/v/aioguardian.svg)](https://pypi.python.org/pypi/aioguardian)\n[![Version](https://img.shields.io/pypi/pyversions/aioguardian.svg)](https://pypi.python.org/pypi/aioguardian)\n[![License](https://img.shields.io/pypi/l/aioguardian.svg)](https://github.com/bachya/aioguardian/blob/master/LICENSE)\n[![Code Coverage](https://codecov.io/gh/bachya/aioguardian/branch/master/graph/badge.svg)](https://codecov.io/gh/bachya/aioguardian)\n[![Maintainability](https://api.codeclimate.com/v1/badges/a03c9e96f19a3dc37f98/maintainability)](https://codeclimate.com/github/bachya/aioguardian/maintainability)\n[![Say Thanks](https://img.shields.io/badge/SayThanks-!-1EAEDB.svg)](https://saythanks.io/to/bachya)\n\n`aioguardian` is a Python3, `asyncio`-focused library for interacting with\n[the Guardian line of water valves and sensors from Elexa](http://getguardian.com).\n\n- [Installation](#installation)\n- [Python Versions](#python-versions)\n- [Documentation](#documentation)\n- [Usage](#usage)\n- [Commands](#commands)\n- [Contributing](#contributing)\n\n# Installation\n\n```python\npip install aioguardian\n```\n\n# Python Versions\n\n`aioguardian` is currently supported on:\n\n* Python 3.6\n* Python 3.7\n* Python 3.8 \n\n# Documentation\n\nComplete documentation can be found here: http://aioguardian.readthedocs.io\n\n# Usage\n\n```python\nimport asyncio\n\nfrom aioguardian import Client\nfrom aioguardian.errors import GuardianError\n\n\nasync with Client(\"192.168.1.100\") as client:\n    # Run various commands\n\n\nasyncio.run(main())\n```\n\nIf the mood should strike you, you can manually instantiate a `Client` object and manage\nconnection to and disconnection from the device yourself:\n\n```python\nimport asyncio\n\nfrom aioguardian import Client\nfrom aioguardian.errors import GuardianError\n\n\nclient = Client(\"192.168.1.100\")\n\nawait client.connect()\n\n# Run various commands\n\n# Notice that disconnection is via a regular method, not a coroutine:\nclient.disconnect()\n\n\nasyncio.run(main())\n```\n## Commands\n\nMany commands are available:\n\n* `client.device.diagnostics()`: return diagnostics info from the device\n* `client.device.factory_reset()`: perform a factory reset of the device\n* `client.device.ping()`: ping the device to determine whether it can be reached\n* `client.device.publish_state()`: publish the device state to the Guardian cloud\n* `client.device.reboot()`: reboot the device\n* `client.device.upgrade_firmware()`: initiate a firmware upgrade on the device\n* `client.device.wifi_configure()`: connect the device to an SSID\n* `client.device.wifi_disable_ap()`: disable the device's onboard WiFi access point\n* `client.device.wifi_enable_ap()`: enable the device's onboard WiFi access point\n* `client.device.wifi_reset()`: reset all WiFi info\n* `client.device.wifi_status()`: get information related to the device's WiFi connections\n* `client.sensor.pair_dump()`: get information on all paired sensors\n* `client.sensor.pair_sensor()`: pair a new sensor to the device\n* `client.sensor.sensor_status()`: get information from the device's onboard sensors\n* `client.valve.valve_close()`: close the valve\n* `client.valve.valve_halt()`: halt the valve mid-open or mid-close (be careful!)\n* `client.valve.valve_open()`: open the valve\n* `client.valve.valve_reset()`: reset all valve diagnostics\n* `client.valve.valve_status()`: get information about the device's valve\n\nResponse payload samples for each of these commands can be found in the\n[`fixtures` folder](/tree/dev/tests/fixtures).\n\n# Contributing\n\n1. [Check for open features/bugs](https://github.com/bachya/aioguardian/issues)\n  or [initiate a discussion on one](https://github.com/bachya/aioguardian/issues/new).\n2. [Fork the repository](https://github.com/bachya/aioguardian/fork).\n3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`\n4. (_optional, but highly recommended_) Enter the virtual environment: `source ./.venv/bin/activate`\n5. Install the dev environment: `script/setup`\n6. Code your new feature or bug fix.\n7. Write tests that cover your new functionality.\n8. Run tests and ensure 100% code coverage: `script/test`\n9. Update `README.md` with any new documentation.\n10. Add yourself to `AUTHORS.md`.\n11. Submit a pull request!\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bachya/aioguardian", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aioguardian", "package_url": "https://pypi.org/project/aioguardian/", "platform": "", "project_url": "https://pypi.org/project/aioguardian/", "project_urls": {"Homepage": "https://github.com/bachya/aioguardian", "Repository": "https://github.com/bachya/aioguardian"}, "release_url": "https://pypi.org/project/aioguardian/0.1.0/", "requires_dist": ["aiohttp (>=3.6.2,<4.0.0)", "async_timeout (>=3.0.1,<4.0.0)", "asyncio_dgram (>=1.0.1,<2.0.0)", "voluptuous (>=0.11.7,<0.12.0)"], "requires_python": ">=3.6.1,<4.0.0", "summary": "A Python3 library for Elexa Guardian water valves and sensors", "version": "0.1.0"}, "last_serial": 7044648, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dc58d16828d883eb8f407d267bdd8f07", "sha256": "473cc73e32e56ccb80202744f8782fa718e02cfb416b14dc725cf3a3353e4dd6"}, "downloads": -1, "filename": "aioguardian-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dc58d16828d883eb8f407d267bdd8f07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 1288, "upload_time": "2020-04-14T21:25:32", "upload_time_iso_8601": "2020-04-14T21:25:32.048453Z", "url": "https://files.pythonhosted.org/packages/3a/d9/a678e20bfbbe3aaf27c5ac1c7e39e45fb767dd390d5735f8460b152423be/aioguardian-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "bfee5a5202787dd1414fb875881be8e4", "sha256": "dfb29f6a7316ffbd832e8618f96a2f24e72837ba2c5eb6bf94a0adcd5f1be3ef"}, "downloads": -1, "filename": "aioguardian-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bfee5a5202787dd1414fb875881be8e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 1578, "upload_time": "2020-04-14T21:25:34", "upload_time_iso_8601": "2020-04-14T21:25:34.281145Z", "url": "https://files.pythonhosted.org/packages/4c/12/b2cccda8f3574a6f82b11d7f5ace346bf6bd0f6308e47c72c3336fc5b54b/aioguardian-0.0.1.tar.gz"}], "0.1.0": [{"comment_text": "", "digests": {"md5": "784a1f792c07159e2d33927a4d220b97", "sha256": "e921d60a134e6e8626bd303e17b7a006068a9704b974cb0441b2eec52937802c"}, "downloads": -1, "filename": "aioguardian-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "784a1f792c07159e2d33927a4d220b97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9667, "upload_time": "2020-04-17T22:42:25", "upload_time_iso_8601": "2020-04-17T22:42:25.528159Z", "url": "https://files.pythonhosted.org/packages/5e/b1/a5cf5f3835ccfde23b22925ae6aea6d14a0614b20b137cf7acb826ef0b0b/aioguardian-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "843d6ebf1631c9a02fd7f5766d7a2197", "sha256": "27581c90618ff24314b3fb5e132633d58eb046b30613766aacc0d447831c8b6a"}, "downloads": -1, "filename": "aioguardian-0.1.0.tar.gz", "has_sig": false, "md5_digest": "843d6ebf1631c9a02fd7f5766d7a2197", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 8883, "upload_time": "2020-04-17T22:42:33", "upload_time_iso_8601": "2020-04-17T22:42:33.432169Z", "url": "https://files.pythonhosted.org/packages/e3/d8/68b969c7a35d69af8c419e8cff8f11ca47b87d3c4f1c3b0064a49cb73628/aioguardian-0.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "784a1f792c07159e2d33927a4d220b97", "sha256": "e921d60a134e6e8626bd303e17b7a006068a9704b974cb0441b2eec52937802c"}, "downloads": -1, "filename": "aioguardian-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "784a1f792c07159e2d33927a4d220b97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.1,<4.0.0", "size": 9667, "upload_time": "2020-04-17T22:42:25", "upload_time_iso_8601": "2020-04-17T22:42:25.528159Z", "url": "https://files.pythonhosted.org/packages/5e/b1/a5cf5f3835ccfde23b22925ae6aea6d14a0614b20b137cf7acb826ef0b0b/aioguardian-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "843d6ebf1631c9a02fd7f5766d7a2197", "sha256": "27581c90618ff24314b3fb5e132633d58eb046b30613766aacc0d447831c8b6a"}, "downloads": -1, "filename": "aioguardian-0.1.0.tar.gz", "has_sig": false, "md5_digest": "843d6ebf1631c9a02fd7f5766d7a2197", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1,<4.0.0", "size": 8883, "upload_time": "2020-04-17T22:42:33", "upload_time_iso_8601": "2020-04-17T22:42:33.432169Z", "url": "https://files.pythonhosted.org/packages/e3/d8/68b969c7a35d69af8c419e8cff8f11ca47b87d3c4f1c3b0064a49cb73628/aioguardian-0.1.0.tar.gz"}]}