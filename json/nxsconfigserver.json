{"info": {"author": "Jan Kotanski, Eugen Wintersberger , Halil Pasic", "author_email": "jankotan@gmail.com, eugen.wintersberger@gmail.com, halil.pasic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Physics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "======================================================\nWelcome to NeXuS Configuration Server's documentation!\n======================================================\n\n\nAuthors: Jan Kotanski, Eugen Wintersberger, Halil Pasic\n\nNeXuS Configuration Server is a Tango Server with its implementation based\non a MySQL database. It allows to store XML configuration datasources\nand components. It also gives possibility to select mandatory components\nand perform the process of component merging.\n\nTango Server API: https://nexdatas.github.io/configserver/doc_html\n\n| Source code: https://github.com/nexdatas/configserver/\n| Web page: https://nexdatas.github.io/configserver/\n| NexDaTaS Web page: https://nexdatas.github.io\n\n------------\nInstallation\n------------\n\nInstall the dependencies:\n\n|    MySQLdb, PyTango, sphinx\n\nFrom sources\n^^^^^^^^^^^^\n\nDownload the latest version of NeXuS Configuration Server from\n\n|    https://github.com/nexdatas/configserver/\n|    https://github.com/nexdatas/configserver-db/\n\nExtract the sources and run\n\n.. code-block:: console\n\n\t  $ python setup.py install\n\nTo set database execute\n\n.. code-block:: console\n\n\t  $ mysql < conf/mysql_create.sql\n\nwith proper privileges.\n\nDebian packages\n^^^^^^^^^^^^^^^\n\nDebian Jessie (and Wheezy) packages can be found in the HDRI repository.\n\nTo install the debian packages, add the PGP repository key\n\n.. code-block:: console\n\n\t  $ sudo su\n\t  $ wget -q -O - http://repos.pni-hdri.de/debian_repo.pub.gpg | apt-key add -\n\nand then download the corresponding source list\n\n.. code-block:: console\n\n\t  $ cd /etc/apt/sources.list.d\n\t  $ wget http://repos.pni-hdri.de/jessie-pni-hdri.list\n\nFinally, for python2 packages\n\n.. code-block:: console\n\n\t  $ apt-get update\n\t  $ apt-get install python-nxsconfigserver nxsconfigserver-db\n\nand the NXSConfigServer tango server (from 2.10.0)\n\n\t  $ apt-get install nxsconfigserver\n\nor for python3\n\n.. code-block:: console\n\n\t  $ apt-get update\n\t  $ apt-get install python3-nxsconfigserver nxsconfigserver-db\n\nand the NXSConfigServer tango server (from 2.10.0)\n\n\t  $ apt-get install nxsconfigserver3\n\n\nFrom pip\n\"\"\"\"\"\"\"\"\n\nTo install it from pip you need pymysqldb e.g.\n\n.. code-block:: console\n\n   $ python3 -m venv myvenv\n   $ . myvenv/bin/activate\n\n   $ pip install pymysqldb\n\n   $ pip install nxsconfigserver\n\nMoreover it is also good to install\n\n.. code-block:: console\n\n   $ pip install pytango\n   $ pip install nxstools\n\nSetting NeXus Configuration Server\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo set up  NeXus Configuration Server with the default configuration run\n\n.. code-block:: console\n\n          $ nxsetup -x NXSConfigServer\n\nThe *nxsetup* command comes from the **python-nxstools** package.\n\n===========\nDescription\n===========\n\nConfiguration Server is dedicated to store NXDL-like configuration needed for\nTango Data Writer runs. The server uses as a storage system a MYSQL database.\nTo create required DB tables one can use ndts.sql script from the repository.\n\nIn Configuration Server the configuration is memorized in separate elements:\ndatasources or components.\n\n**DataSources** describe access to input data, i.e to specific hardware\nTANGO devices or other databases as well to client data.\n\n**Components** specify Nexus tree with positions of datasets for particular\npieces of hardware and writing strategy for corresponding to them data.\n\n+ They can include datasources directly as well as links to datasources\n  defined in the server. To this end template syntax of\n  $datasources.<ds_name> type is used.\n+ Moreover, they can holds links to other components which describe their\n  dependences. In this case $components.<comp_name> syntax is used.\n+ Finally, the components can contains variables. The variables are defined\n  in XML code by $var.<var_name> syntax and can be provided to\n  the Configuration Server by passing a JSON string.\n  The default value for variables is an empty string.\n\nAll elements of configuration can be created by GUI tool - ComponentDesigner.\nThe tool can connect to Configuration Server and fetch or store\nthe separate elements of the XML configuration.\n\nDuring creation of the final configuration Configuration Server merges\nall required and dependent components, connected to them datasources and\nprovided values of the variables. As a result it returns a single XML string.\nThis XML string can be pass directly into the dedicated Tango Data Writer\nattribute.\n\n\n\n===========\nClient code\n===========\n\n.. code-block:: python\n\n    # In this section we present an example how to communicate with\n    # Configuration Server making use of PyTango.\n\n    import PyTango\n\n    cnfServer = PyTango.DeviceProxy(\"p00/xmlconfigserver/exp.01\")\n\n    cnfServer.JSONSettings = \\\n\t'{\"host\":\"localhost\",\"db\":\"ndts_p02\",\"read_default_file\":\"/etc/my.cnf\",\"use_unicode\":true}'\n\n    # opens DB connection\n    cnfServer.Open()\n\n    # After creating the server proxy we can set configuration for connection to\n    #  the MYSQL DB.\n    # The JSONSettings attribute is memorized so you have to write it only when you\n    # change configuration of DB connection. Next, we open connection to\n    # DB specified by our JSONSettings.\n\n\n\n    # stores default component\n    cpxml = open(\"default.xml\", 'r').read()\n    cnfServer.XMLString = cpxml\n    cnfServer.StoreComponent('default')\n\n    # stores slit1 component in DB\n    cpxml = open(\"slit1.xml\", 'r').read()\n    cnfServer.XMLString = cpxml\n    cnfServer.StoreComponent('slit1')\n\n    # stores slit2 component in DB\n    cpxml = open(\"slit2.xml\", 'r').read()\n    cnfServer.XMLString = cpxml\n    cnfServer.StoreComponent('slit2')\n\n    # stores slit3 component in DB\n    cpxml = open(\"slit3.xml\", 'r').read()\n    cnfServer.XMLString = cpxml\n    cnfServer.StoreComponent('slit3')\n\n    # stores pilatus300k component in DB\n    cpxml = open(\"pilatus.xml\", 'r').read()\n    cnfServer.XMLString = cpxml\n    cnfServer.StoreComponent('pilatus300k')\n\n\n    # stores motor01 datasource in DB\n    dsxml = open(\"motor.ds.xml\", 'r').read()\n    cnfServer.XMLString = dsxml\n    cnfServer.StoreDataSource('motor01')\n\n    # stores motor02 datasource in DB\n    dsxml = open(\"motor.ds.xml\", 'r').read()\n    cnfServer.XMLString = dsxml\n    cnfServer.StoreDataSource('motor02')\n\n\n\n    # removes slit3 component from DB\n    cnfServer.DeleteComponent('slit3')\n\n    # removes motor02 datasource from DB\n    cnfServer.DeleteDataSource('motor02')\n\n    # If someone cannot use ComponentDesigner it is also an option to store\n    # or delete components and datasources using directly tango interface\n    # as it is shown above.\n\n\n\n    # provides names of available components\n    cmpNameList = cnfServer.AvailableComponents()\n    # provides names of available datasources\n    dsNameList = cnfServer.AvailableDataSources()\n\n    # To get information about names of available components and datasources\n    # in Configuration Server we use the above commands.\n\n\n\n    # provides a list of required components\n    cmpList = cnfServer.Components(cmpNameList)\n    # provides a list of required Datasources\n    dsList = cnfServer.DataSources(dsNameList)\n\n    # Having names of stored elements we can get their XML code.\n\n    # provides a list of Datasources from a given Component\n    dsList = cnf.Server.ComponentDataSources('pilatus300k')\n    dsList = cnf.Server.ComponentsDataSources(['pilatus300k', 'slit1'])\n\n    # as well as query Configuration Server which datasource\n    # are related to the particular component.\n\n    # provides a dependent components\n    cpList = cnf.Server.DependentComponents(['pilatus300k', 'slit3'])\n\n\n    # Moreover, one can also query Configuration Server for a list of\n    # dependent components\n\n    # provides a list of Variables from a given components\n    varList = cnf.Server.ComponentVariables('pilatus300k')\n    varList = cnf.Server.ComponentsVariables(['pilatus300k', 'slit3'])\n\n    #or ask for a list of variables which are related to the particular components.\n\n    # sets values of variables\n    cnf.Server.Variables = '{\"entry_id\":\"123\",\"beamtime_id\":\"123453535453\"}'\n\n    #The variable values can be passed to the Configuration Server\n    # via a JSON string.\n\n\n\n    # sets given component as mandatory for the final configuration\n    cnfServer.SetMandatoryComponents(['default','slit1'])\n    # un-sets given component as mandatory for the final configuration\n    cnfServer.UnsetMandatoryComponents(['slit1'])\n\n    # provides names of mandatory components\n    man =  cnfServer.MandatoryComponents()\n\n    # Some of the component can be set as mandatory in\n    # the final configuration. To define them Configuration Server provides\n    # above commands.\n\n\n\n    # provides the current configuration version\n    version =  cnfServer.Version\n\n    # Each configuration has a revision number. It can be found\n    # together with Configuration Server version in Version attribute.\n\n    # creates the final configuration from slit2 and pilatus300k\n    # as well as all mandatory components\n    cnfServer.CreateConfiguration('slit2', 'pilatus300k')\n    # XML string ready to use by Tango Data Server\n    finalXML = cnfServer.XMLString\n\n    # In order to create our final configuration we execute CreateConfiguration\n    # command with a list of names of required components. The command merges\n    # these components with mandatory ones and provides the resulting NXDL-like\n    # configuration in the XMLString attribute.\n\n\n\n\n    # merges given components\n    mergedComp = cnfServer.Merge(['slit2', 'pilatus300k'])\n\n    # Similarly, the Merge command provides configuration by unresolved links\n    # to datasoures and with non-assigned variable values.\n\n\n    # closes connection to DB\n    cnfServer.close()\n\n    # Command close terminates our connection to the DB server.\n\n=======================\nConfiguration Variables\n=======================\n\nValues of configuration variables can be also define inside the component xmls.\nLet's consider two following components:\n\n*mydetector* with a general detector transformation group\n\n.. code-block:: xml\n\n   <definition>\n     <group type='NXentry' name='entry'>\n       <group type='NXinstrument' name='instrument'>\n          <group type='NXdetector' name='$var.detector#\\\"mydetector\\\"'>\n             <group type='NXtransformations' name='transformations'/>\n\t  </group>\n       </group>\n     </group>\n   </definition>\n\nand *pilatus* created for the particular detector\n\n.. code-block:: xml\n\n   <definition>\n     <group type='NXentry' name='entry'>\n       <group type='NXinstrument' name='instrument'>\n          <group type='NXdetector' name='pilatus'>\n             <field type='NX_FLOAT64' name='data'/>\n\t  </group>\n       </group>\n     </group>\n     <doc>$var(detector=pilatus)</doc>\n   </definition>\n\n\nCreating configuration without variables\n\n.. code-block:: python\n\n   cnfServer.Variables = '{}'\n   cnfServer.CreateConfiguration([\"mydetector\"])\n\nresults in\n\n.. code-block:: xml\n\n   <definition>\n     <group type='NXentry' name='entry'>\n       <group type='NXinstrument' name='instrument'>\n          <group type='NXdetector' name='mydetector'>\n             <group type='NXtransformations' name='transformations'/>\n\t  </group>\n       </group>\n     </group>\n   </definition>\n\nWhen configuration variables are defined\n\n.. code-block:: python\n\n   cnfServer.Variables = '{\"detector\": \"det1\"}'\n   cnfServer.CreateConfiguration([\"mydetector\"])\n\none can get\n\n.. code-block:: xml\n\n   <definition>\n     <group type='NXentry' name='entry'>\n       <group type='NXinstrument' name='instrument'>\n          <group type='NXdetector' name='det1'>\n             <group type='NXtransformations' name='transformations'/>\n\t  </group>\n       </group>\n     </group>\n   </definition>\n\nFinally, creating configuration xml from our two components without variables\n\n.. code-block:: python\n\n   cnfServer.Variables = '{}'\n   cnfServer.CreateConfiguration([\"mydetector\", \"pilatus\"])\n\nresults in\n\n.. code-block:: xml\n\n   <definition>\n   <group name=\"entry\" type=\"NXentry\">\n     <group name=\"instrument\" type=\"NXinstrument\">\n       <group name=\"pilatus\" type=\"NXdetector\">\n         <group name=\"transformations\" type=\"NXtransformations\"/>\n         <field name=\"data\" type=\"NX_FLOAT64\"/>\n\t </group>\n       </group>\n     </group>\n     <doc>$var(detector=pilatus)</doc>\n   </definition>", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jkotan/nexdatas/nxsconfigserver", "keywords": "configuration MySQL writer Tango server nexus data", "license": "GNU GENERAL PUBLIC LICENSE v3", "maintainer": "", "maintainer_email": "", "name": "nxsconfigserver", "package_url": "https://pypi.org/project/nxsconfigserver/", "platform": "", "project_url": "https://pypi.org/project/nxsconfigserver/", "project_urls": {"Homepage": "http://github.com/jkotan/nexdatas/nxsconfigserver"}, "release_url": "https://pypi.org/project/nxsconfigserver/2.13.1/", "requires_dist": null, "requires_python": "", "summary": "Configuration Server for Nexus Data Writer", "version": "2.13.1"}, "last_serial": 5961486, "releases": {"2.13.1": [{"comment_text": "", "digests": {"md5": "f249371a67d3d1b842441db2174f9fcd", "sha256": "9dd7f68a58817d8b4e26fdf51ffa1291231f495ce19d5e463923412e17769c5c"}, "downloads": -1, "filename": "nxsconfigserver-2.13.1.tar.gz", "has_sig": false, "md5_digest": "f249371a67d3d1b842441db2174f9fcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38900, "upload_time": "2019-10-11T18:12:52", "upload_time_iso_8601": "2019-10-11T18:12:52.284449Z", "url": "https://files.pythonhosted.org/packages/0b/3c/2d7d82a95279569c51bcc2c0707e70e2d10ef82ca584e8bc6e2ba8dd562d/nxsconfigserver-2.13.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "f249371a67d3d1b842441db2174f9fcd", "sha256": "9dd7f68a58817d8b4e26fdf51ffa1291231f495ce19d5e463923412e17769c5c"}, "downloads": -1, "filename": "nxsconfigserver-2.13.1.tar.gz", "has_sig": false, "md5_digest": "f249371a67d3d1b842441db2174f9fcd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38900, "upload_time": "2019-10-11T18:12:52", "upload_time_iso_8601": "2019-10-11T18:12:52.284449Z", "url": "https://files.pythonhosted.org/packages/0b/3c/2d7d82a95279569c51bcc2c0707e70e2d10ef82ca584e8bc6e2ba8dd562d/nxsconfigserver-2.13.1.tar.gz"}]}