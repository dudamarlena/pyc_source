{"info": {"author": "Noemi Emanuela Cazzaniga", "author_email": "noemi.cazzaniga@polimi.it", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Office/Business", "Topic :: Office/Business :: Financial", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Utilities"], "description": "# Eurostat Python Package \n\nTools to read data from Eurostat website.\n\n# Features\n\n* Read Eurostat data and metadata as list of tuples or as a pandas dataframe.\n* MIT license.\n\n\n# Documentation\n\n\n## Getting started:\n\nRequires Python 3.6+\n\n```bash\npip install eurostat\n```\n\n\n## In case you need to use a proxy (new in v.0.1.4):\n\nBefore doing anything else, you must configure the proxies.\n\n```python\neurostat.setproxy(proxyinfo)\n```\n\nIt requires in input *proxyinfo*, a dictionary with two keys ('http' and 'https') and values containing the connection parameters in lists.  \nIf authentication is not needed, set *username* and *password* to *None*.\n\nExample:\n```python\n>>> import eurostat\n>>> proxyinfo = {'http': ['myuser', 'mypassword', '123.456.789.012:8012'],\n                 'https': ['myuser', 'mypassword', 'url:port']}\n>>> setproxy(proxyinfo)\n```\n\nIt always returns *None*.\n\n\n## Read the table of contents of the main database:\n\n### As a list of tuples:\n\n```python\neurostat.get_toc()\n```\n\nRead the table of contents and return a list of tuples. The first element of the list contains the header line. Dates are represented as strings.\n\nExample:\n```python\n>>> import eurostat\n>>> toc = eurostat.get_toc()\n>>> toc[0]\n('title', 'code', 'type', 'last update of data', 'last table structure change', 'data start', 'data end')\n>>> toc[10:13]\n[('Industry - quarterly data', 'ei_bsin_q_r2', 'dataset', '30.10.2019', '30.10.2019', '1980Q1', '2019Q4'),\n ('Construction - monthly data', 'ei_bsbu_m_r2', 'dataset', '30.10.2019', '30.10.2019', '1980M01', '2019M10'),\n ('Construction - quarterly data', 'ei_bsbu_q_r2', 'dataset', '30.10.2019', '30.10.2019', '1981Q1', '2019Q4')]\n```\n\n### As a pandas dataframe:\n\n\n```python\neurostat.get_toc_df()\n```\n\nRead the table of contents of the main database and return a dataframe. Dates are represented as strings.\n\nExample:\n```python\n>>> import eurostat\n>>> toc_df = eurostat.get_toc_df()\n>>> toc_df\n                                                  title  ... data end\n0                                    Database by themes  ...         \n1                       General and regional statistics  ...         \n2     European and national indicators for short-ter...  ...         \n3     Business and consumer surveys (source: DG ECFIN)   ...         \n4                   Consumer surveys (source: DG ECFIN)  ...         \n                                                ...  ...      ...\n9860  Enterprises that provided training to develop/...  ...     2018\n9861  Participation in education and training - cont...  ...         \n9862  Enterprises providing training by type of trai...  ...     2015\n9863  Participants in CVT courses by sex and size cl...  ...     2015\n9864  Main skills targeted by CVT courses by type of...  ...     2015\n```\n\nYou may also want to extract the datasets that pertains a topic. In that case, you can use:\n\n```python\neurostat.subset_toc_df(toc_df, keyword)\n```\n\nExtract from toc_df the row where 'title' contains 'keyword' (case-insensitive).\n\nExample:\n```python\n>>> f = eurostat.subset_toc_df(toc_df, 'fleet')\n>>> f\ntitle, code, type, last update of data, last table structure change, data start, data end\n                                               title              code       type  ... data end\n5631                                   Fishing fleet        fish_fleet     folder  ...         \n5632  Fishing fleet by age, length and gross tonnage    fish_fleet_alt    dataset  ...     2018\n5633  Fishing fleet by type of gear and engine power     fish_fleet_gp    dataset  ...     2018\n6246   Commercial aircraft fleet by type of aircraft   avia_eq_arc_typ    dataset  ...     2017\n6247    Commercial aircraft fleet by age of aircraft   avia_eq_arc_age    dataset  ...     2017\n7849                    Fishing fleet, total tonnage          tag00083      table  ...     2018\n7850                Fishing Fleet, Number of Vessels          tag00116      table  ...     2018\n```\n\nNote that, in the above example, the first returned row represents a folder, not a dataset.\n\n\n## Read a dataset from the main database:\n\n### As a list of tuples:\n\n```python\neurostat.get_data(code, flags=False)\n```\n\nRead a dataset from the main database (available from the [bulk download facility][bulkdown]) and returns it as a list of tuples. The first element of the list (\"the first row\") is the data header.\nPay attention: the data format changes if flags is True or not. Flag meanings can be found [here][abbr].\n\nExample:\n```python\n>>> import eurostat\n>>> data = eurostat.get_data('demo_r_d2jan')\n>>> data\n[('unit', 'sex', 'age', 'geo\\\\time', 2018, 2017, 2016, 2015, 2014, ...),\n ('NR', 'F', 'TOTAL', 'AL', 1431715.0, None, 1417141.0, 1424597.0, 1430827.0, ...),\n  ...]\n>>> data = eurostat.get_data('demo_r_d2jan', True)\n>>> data\n[('unit', 'sex', 'age', 'geo\\\\time', '2018_value', '2017_flag', '2017_value', '2018_flag', '2016_value', '2016_flag', ...),\n ('NR', 'F', 'TOTAL', 'AL', 1431715.0, '', 1423050.0, 'c', 1417141.0, '', 1424597.0, '', ...),\n  ...]\n```\n\n### As a pandas dataframe:\n\n```python\neurostat.get_data_df(code, flags=False)\n```\n\nRead a dataset from the main database (available from the [bulk download facility][bulkdown]) and returns it as a pandas dataframe.\nFlag meanings can be found [here][abbr].\n\nExample:\n```python\n>>> import eurostat\n>>> df = eurostat.get_data_df('demo_r_d2jan')\n>>> df\n       unit sex     age geo\\time  ...     1993     1992  1991  1990\n0        NR   F   TOTAL       AL  ...      NaN      NaN   NaN   NaN\n1        NR   F   TOTAL      AL0  ...      NaN      NaN   NaN   NaN\n2        NR   F   TOTAL     AL01  ...      NaN      NaN   NaN   NaN\n3        NR   F   TOTAL     AL02  ...      NaN      NaN   NaN   NaN\n4        NR   F   TOTAL     AL03  ...      NaN      NaN   NaN   NaN\n    ...  ..     ...      ...  ...      ...      ...   ...   ...\n168607   NR   T  Y_OPEN     UKM7  ...      NaN      NaN   NaN   NaN\n168608   NR   T  Y_OPEN     UKM8  ...      NaN      NaN   NaN   NaN\n168609   NR   T  Y_OPEN     UKM9  ...      NaN      NaN   NaN   NaN\n168610   NR   T  Y_OPEN      UKN  ...  17934.0  17566.0   NaN   NaN\n168611   NR   T  Y_OPEN     UKN0  ...  17934.0  17566.0   NaN   NaN\n>>> df = eurostat.get_data_df('demo_r_d2jan', True)\n>>> df\n       unit sex     age geo\\time  ...  1992_value 1992_flag  1991_value 1991_flag  1990_value 1990_flag\n0        NR   F   TOTAL       AL  ...        NaN         :         NaN         :         NaN         :\n1        NR   F   TOTAL      AL0  ...        NaN         :         NaN         :         NaN         :\n2        NR   F   TOTAL     AL01  ...        NaN         :         NaN         :         NaN         :\n3        NR   F   TOTAL     AL02  ...        NaN         :         NaN         :         NaN         :\n4        NR   F   TOTAL     AL03  ...        NaN         :         NaN         :         NaN         :\n    ...  ..     ...      ...  ...         ...       ...       ...         ...       ...\n168607   NR   T  Y_OPEN     UKM7  ...        NaN         :         NaN         :         NaN         :\n168608   NR   T  Y_OPEN     UKM8  ...        NaN         :         NaN         :         NaN         :\n168609   NR   T  Y_OPEN     UKM9  ...        NaN         :         NaN         :         NaN         :\n168610   NR   T  Y_OPEN      UKN  ...    17566.0                   NaN         :         NaN         :\n168611   NR   T  Y_OPEN     UKN0  ...    17566.0                   NaN         :         NaN         :\n```\n\n\n## Get an Eurostat dictionary:\n\n```python\neurostat.get_dic(code)\n```\n\nRead the metadata related to a particular code. Return a list of tuples, where the first element of each tuple is the code value and the second one is its description.\n\nExample:\n```python\n>>> import eurostat\n>>> dic = eurostat.get_dic('sex')\n>>> dic\n[('T', 'Total'),\n ('M', 'Males'),\n ('F', 'Females'),\n ('DIFF', 'Absolute difference between males and females'),\n ('NAP', 'Not applicable'),\n ('NRP', 'No response'),\n ('UNK', 'Unknown')]\n```\n\n\n## Check what datasets are available via SDMX:\n\n### As a list of tuples:\n\n```python\neurostat.get_avail_sdmx()\n```\n\nReturn a list of tuples. The first element of the list contains the header line.\nExample:\n\n```python\n>>> avail_sdmx = eurostat.get_avail_sdmx()\n>>> avail_sdmx\n[('dataflow', 'name'),\n ('DS-008573', 'Sold production, exports and imports for steel by PRODCOM list (NACE Rev. 1.1) - monthly data'),\n ('DS-016890', 'EU trade since 1988 by CN8'),\n ('DS-016893', 'EU trade since 1988 by HS6')\n ...]\n```\n\n### As a pandas dataframe:\n\n```python\neurostat.get_avail_sdmx_df()\n```\n\nReturn a dataframe with one column. Dataflow (i.e. dataset) codes are in the dataframe index.\nExample:\n\n```python\n>>> avail_sdmx_df = eurostat.get_avail_sdmx_df()\n>>> avail_sdmx_df\n                                                             name\ndataflow                                                         \nDS-008573       Sold production, exports and imports for steel...\nDS-016890                              EU trade since 1988 by CN8\nDS-016893                              EU trade since 1988 by HS6\nDS-016894                          EU trade since 1988 by HS2-HS4\nDS-018995                             EU trade since 1988 by SITC\n                                                          ...\nyth_incl_120    Young people living in households with very lo...\nyth_part_010    Frequency of getting together with relatives o...\nyth_part_020    Frequency of contacts with relatives or friend...\nyth_part_030    Participation of young people in activities of...\nyth_volunt_010  Participation of young people in informal volu...\n```\n\nYou may also want to find the datasets that pertains a topic. In that case, you can use:\n\n```python\neurostat.subset_avail_sdmx_df(avail_sdmx_df, keyword)\n```\n\nExtract the rows where 'name' contains 'keyword' (case-insensitive).\nExample:\n\n```python\n>>> keyword = 'fleet'\n>>> subset = eurostat.subset_avail_sdmx_df(avail_sdmx_df, keyword)\n>>> subset\n                                                           name\ndataflow                                                       \navia_eq_arc_age    Commercial aircraft fleet by age of aircraft\navia_eq_arc_typ   Commercial aircraft fleet by type of aircraft\nfish_fleet_alt   Fishing fleet by age, length and gross tonnage\nfish_fleet_gp    Fishing fleet by type of gear and engine power\ntag00083                           Fishing fleet, total tonnage\ntag00116                       Fishing Fleet, Number of Vessels\n```\n\n\n## Read the Eurostat dimensions of a dataset that is available via SDMX service:\n\n```python\neurostat.get_sdmx_dims(code)\n```\n\nRead the dimension names of a dataset that is provided via SDMX service. Require the dataset code and return a list.\n\nExample:\n```python\n>>> import eurostat\n>>> dims = eurostat.get_sdmx_dims('DS-066341')\n>>> dims\n['DECL', 'FREQ', 'INDICATORS', 'PERIOD', 'PRCCODE']\n```\n\n\n## Read an Eurostat dictionary for a given SDMX dimension:\n\n```python\neurostat.get_sdmx_dic(code, dim)\n```\n\nRead the Eurostat dimension values with their meaning for a dataset provided via SDMX service. Return them as a dictionary.\n\nExample:\n```python\n>>> import eurostat\n>>> dic = eurostat.get_sdmx_dic('DS-066341', 'FREQ')\n>>> dic\n{'A': 'Annual',\n 'D': 'Daily',\n 'H': 'Half-year',\n 'M': 'Monthly',\n 'Q': 'Quarterly',\n 'S': 'Semi-annual',\n 'W': 'Weekly'}\n>>> flags = eurostat.get_sdmx_dic('DS-066341', 'OBS_STATUS')\n>>> flags\n{'-': 'not applicable or real zero or zero by default',\n '0': 'less than half of the unit used',\n 'na': 'not available'}\n```\n\n\n## Read a dataset from the SDMX service:\n\n### As a list of tuples:\n\n```python\neurostat.get_sdmx_data(code, StartPeriod, EndPeriod, filter_pars, flags=False, verbose=True)\n```\n\nRead a dataset from SDMX service, with or without the flags. Return a list of tuples. The first tuple (row) contains the header.  \nIt allows to download some datasets that are not available from the main database (e.g., Comext).  \nThis service is slow, so you will better select the subset you need and set the filter parameters along the available dimensions by setting *filter_pars* (a dictionary where keys are dimensions names, values are lists).  \nTo see a rough progress status, set verbose = True.\n\nExample:\n```python\n>>> import eurostat\n>>> StartPeriod = 2007\n>>> EndPeriod = 2008\n>>> filter_pars = {'FREQ': ['A',], 'PRCCODE': ['08111250','08111150']}\n>>> data = eurostat.get_sdmx_data('DS-066341', StartPeriod, EndPeriod, filter_pars, flags = False, verbose=True)\nProgress: 0.0%\nProgress:50.0%\nProgress:100.0%\n>>> data\n[('INDICATORS', 'DECL', 'PRCCODE', 'FREQ', 2007, 2008),\n ('EXPQNT', '001', '08111250', 'A', 10219200.0, 16082600.0),\n ('EXPVAL', '001', '08111250', 'A', 1697160.0, 1875920.0),\n ...]\n```\n\n### As a pandas dataframe:\n\n```python\neurostat.get_sdmx_data_df(code, StartPeriod, EndPeriod, filter_pars, flags=False, verbose=True)\n```\n\nRead a dataset from SDMX service, with or without the flags. Return a pandas dataframe.  \nIt allows to download some datasets that are not available from the main database (e.g., Comext).  \nThis service is slow, so you will better select the subset you need and set the filter parameters along the available dimensions by setting *filter_pars* (a dictionary where keys are dimensions names, values are lists).  \nTo see a rough progress status, set verbose = True.\n\nExample:\n```python\n>>> import eurostat\n>>> StartPeriod = 2007\n>>> EndPeriod = 2008\n>>> filter_pars = {'FREQ': ['A',], 'PRCCODE': ['08111250','08111150']}\n>>> df = eurostat.get_sdmx_data_df('DS-066341', StartPeriod, EndPeriod, filter_pars, flags = True, verbose=True)\nProgress: 0.0%\nProgress:50.0%\nProgress:100.0%\n>>> df\n    INDICATORS DECL   PRCCODE FREQ        2007 2007_OBS_STATUS        2008 2008_OBS_STATUS\n0       EXPQNT  001  08111250    A  10219200.0                  16082600.0                \n1       EXPVAL  001  08111250    A   1697160.0                   1875920.0                \n2       IMPQNT  001  08111250    A   7526000.0                   4272200.0                \n3       IMPVAL  001  08111250    A   1802940.0                   1208030.0                \n4     PQNTBASE  001  08111250    A         0.0                         0.0                \n..         ...  ...       ...  ...         ...             ...         ...             ...\n875    PRODQNT  600  08111150    A         0.0                         0.0                \n876    PRODVAL  600  08111150    A         0.0                         0.0                \n877   PVALBASE  600  08111150    A         0.0                         0.0                \n878   PVALFLAG  600  08111150    A         NaN              na         NaN              na\n879    QNTUNIT  600  08111150    A         NaN                         NaN                \n```\n\n\n## Bug reports and feature requests:\n\nPlease [open an issue][issue] or send a message to noemi.cazzaniga [at] polimi.it .\n\n\n## Disclaimer:\n\nDownload and usage of Eurostat data is subject to Eurostat's general copyright notice and licence policy (see [Policies][pol]). Please also be aware of the European Commission's [general conditions][cond].\n\n\n## Data sources:\n\n* Eurostat database: [online catalog][onlinecat] and [bulk download facility][bulkdown].\n* Eurostat nomenclatures: [RAMON][ram] metadata.\n* Eurostat Interactive Data Explorer: [Data Explorer][expl].\n* Eurostat Interactive Tool for Comext Data: [Easy Comext][comext].\n* Eurostat acronyms: [Symbols and abbreviations][abbr].\n\n\n## References:\n\n* R package [eurostat][es]: R Tools for Eurostat Open Data.\n* Python package [pandaSDMX][pandasdmx]: Statistical Data and Metadata eXchange.\n* Python package [pandas][pd]: Python Data Analysis Library.\n\n\n## History:\n\n### version 0.1.5 (08 Jan. 2020):\n\n* Bug fix (proxy info).\n* get_avail_sdmx, get_avail_sdmx_df, subset_avail_sdmx_df added.\n\n### version 0.1.4 (20 Dec. 2019):\n\n* Added support to proxy.\n\n### version 0.1.3 (17 Dec. 2019):\n\n* Bug fix (non-annual data headers).\n\n### version 0.1.2 (25 Nov. 2019):\n\n* Possibility to download flags introduced.\n* get_toc_df, subset_toc_df added.\n\n### verion 0.1.1 (21 Nov. 2019):\n\n* First official release.\n\n\n[pol]: https://ec.europa.eu/eurostat/web/main/about/our-partners/copyright\n[cond]: http://ec.europa.eu/geninfo/legal_notices_en.htm\n[onlinecat]: https://ec.europa.eu/eurostat/data/database\n[bulkdown]: https://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing\n[ram]: https://ec.europa.eu/eurostat/ramon/nomenclatures/index.cfm?TargetUrl=LST_NOM&StrGroupCode=SCL&StrLanguageCode=EN\n[expl]: http://appsso.eurostat.ec.europa.eu/nui/\n[comext]: http://epp.eurostat.ec.europa.eu/newxtweb/\n[bulkcomext]: https://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing?sort=1&dir=comext%2FCOMEXT_DATA%2FPRODUCTS\n[pandasdmx]: https://pandasdmx.readthedocs.io/en/stable/\n[pd]: https://pandas.pydata.org/\n[es]: http://ropengov.github.io/eurostat/\n[issue]: https://bitbucket.org/noemicazzaniga/eurostat/issues/new\n[abbr]: https://ec.europa.eu/eurostat/statistics-explained/index.php/Tutorial:Symbols_and_abbreviations\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "eurostat comext statistics data economics science", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eurostat", "package_url": "https://pypi.org/project/eurostat/", "platform": "", "project_url": "https://pypi.org/project/eurostat/", "project_urls": {"Source": "https://bitbucket.org/noemicazzaniga/eurostat/src/master/"}, "release_url": "https://pypi.org/project/eurostat/0.1.5/", "requires_dist": ["pandasdmx", "pandas"], "requires_python": ">=3.6", "summary": "Eurostat Python Package", "version": "0.1.5"}, "last_serial": 6415544, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "f7c1a7a85b2f6229340bd5c898a60576", "sha256": "c3b660197d9013f83e85599d08dba1aec958cba7ab424a649657e5ad41178c99"}, "downloads": -1, "filename": "eurostat-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f7c1a7a85b2f6229340bd5c898a60576", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7156, "upload_time": "2019-11-21T16:17:32", "upload_time_iso_8601": "2019-11-21T16:17:32.729748Z", "url": "https://files.pythonhosted.org/packages/71/7f/6d0118182a6440a7d1d0f7fb6d5640aa2c96dfc9d7b619f8cc29fbd177a1/eurostat-0.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "24e6541802111ebd61692b7715f3b316", "sha256": "1276c3dcef9a7cb9991fe0b2662b2e6dd250ce6a9b0f3eea32ea30a06977e194"}, "downloads": -1, "filename": "eurostat-0.1.1.tar.gz", "has_sig": false, "md5_digest": "24e6541802111ebd61692b7715f3b316", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8316, "upload_time": "2019-11-21T16:17:34", "upload_time_iso_8601": "2019-11-21T16:17:34.902903Z", "url": "https://files.pythonhosted.org/packages/9f/06/8d2eb7bd7b708dd1b983147870296579e8bf7481e4efca21c63a04b64e57/eurostat-0.1.1.tar.gz"}], "0.1.2": [{"comment_text": "", "digests": {"md5": "49dcde5bb6df487f084875d7a0f1fd18", "sha256": "adbe8db43e0fa57c6cb3237cca3e215b2dc008e272c024b64f2723d9833742c5"}, "downloads": -1, "filename": "eurostat-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "49dcde5bb6df487f084875d7a0f1fd18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8668, "upload_time": "2019-11-25T14:07:15", "upload_time_iso_8601": "2019-11-25T14:07:15.869906Z", "url": "https://files.pythonhosted.org/packages/bd/d9/5c93aaff6bfae6bd0531b1beb867773999bfb84778e3679147fec9036b36/eurostat-0.1.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f1f351db4774be62d3ebddb18f7817fc", "sha256": "489eab3c3ecd9c6f9f457003d6bc5f888c1cbdb19b2b4df1eba9d20802ddd044"}, "downloads": -1, "filename": "eurostat-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f1f351db4774be62d3ebddb18f7817fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10383, "upload_time": "2019-11-25T14:07:17", "upload_time_iso_8601": "2019-11-25T14:07:17.834781Z", "url": "https://files.pythonhosted.org/packages/bf/a2/25f523d02ca36ae6f177c5f037356d3a4b5a0103bff5b64ef388d2da8822/eurostat-0.1.2.tar.gz"}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c4daed841880f31ea6ad546c33f97143", "sha256": "e71c95f03711d19f4ea6779cbcf9a66234f02891b41173b2503cfeacc337d34c"}, "downloads": -1, "filename": "eurostat-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c4daed841880f31ea6ad546c33f97143", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8681, "upload_time": "2019-12-17T08:23:25", "upload_time_iso_8601": "2019-12-17T08:23:25.795917Z", "url": "https://files.pythonhosted.org/packages/f3/7b/5aca1a7fa8e2729f143a85a2964414b1d5853edda0206ea8a34a71863669/eurostat-0.1.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4cd6e33267fd51608fb4d1e3cb56eaf9", "sha256": "d25494d5363b9f673157355d3e775532b7a1cc7b6919567d4abfc6c8d7777e86"}, "downloads": -1, "filename": "eurostat-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4cd6e33267fd51608fb4d1e3cb56eaf9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10379, "upload_time": "2019-12-17T08:23:27", "upload_time_iso_8601": "2019-12-17T08:23:27.737358Z", "url": "https://files.pythonhosted.org/packages/b2/4e/d3cbba08a69084520991f42c65ce7bbccf93c66008a52e06ed6958f81012/eurostat-0.1.3.tar.gz"}], "0.1.4": [{"comment_text": "", "digests": {"md5": "616e8804e9967473eda6d151c3b36b8b", "sha256": "fee6e06e9a6cc2c92e15b705c86f443afb0baf9551134bd3bbd24feee0068e29"}, "downloads": -1, "filename": "eurostat-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "616e8804e9967473eda6d151c3b36b8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9617, "upload_time": "2019-12-20T16:01:36", "upload_time_iso_8601": "2019-12-20T16:01:36.865367Z", "url": "https://files.pythonhosted.org/packages/33/d2/ddc4860fb2f7a382914f2e268a2cc91a5a2c657be26e5eb8e74fe5ea7a1f/eurostat-0.1.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7f489e214cf27fc5cd4e12687b13575a", "sha256": "77b5f7eb9cc6374f2072454869a215132b5c11dced6192fecc9113c4ae95f926"}, "downloads": -1, "filename": "eurostat-0.1.4.tar.gz", "has_sig": false, "md5_digest": "7f489e214cf27fc5cd4e12687b13575a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11542, "upload_time": "2019-12-20T16:01:38", "upload_time_iso_8601": "2019-12-20T16:01:38.365690Z", "url": "https://files.pythonhosted.org/packages/2e/1a/ae9722d6a82d97ae34b10564db4a55b742cb3af76a459976f67dffd33422/eurostat-0.1.4.tar.gz"}], "0.1.5": [{"comment_text": "", "digests": {"md5": "c166abb60ab7a493856a021134faed8f", "sha256": "c163181aba7e83f77f3e0aff0ce101344c234c8be18df2b29b401cbbd0bee1f3"}, "downloads": -1, "filename": "eurostat-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c166abb60ab7a493856a021134faed8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10365, "upload_time": "2020-01-08T14:04:00", "upload_time_iso_8601": "2020-01-08T14:04:00.367589Z", "url": "https://files.pythonhosted.org/packages/86/8f/1b439f26d832479b171761bf9c02b21691462e62782ad21898795bb9f6e0/eurostat-0.1.5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "70ed9d8689819e4e5b432163200d9d43", "sha256": "b60eb6d1ce7ec0a18a91ea933f4f1fb4017804a39fbcde2995fe7812eb5bcf27"}, "downloads": -1, "filename": "eurostat-0.1.5.tar.gz", "has_sig": false, "md5_digest": "70ed9d8689819e4e5b432163200d9d43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15446, "upload_time": "2020-01-08T14:04:02", "upload_time_iso_8601": "2020-01-08T14:04:02.362831Z", "url": "https://files.pythonhosted.org/packages/fe/04/a116c364a8bcddc88fbc9dfa295d806eb5afd4094358dee3004094156c8e/eurostat-0.1.5.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "c166abb60ab7a493856a021134faed8f", "sha256": "c163181aba7e83f77f3e0aff0ce101344c234c8be18df2b29b401cbbd0bee1f3"}, "downloads": -1, "filename": "eurostat-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c166abb60ab7a493856a021134faed8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10365, "upload_time": "2020-01-08T14:04:00", "upload_time_iso_8601": "2020-01-08T14:04:00.367589Z", "url": "https://files.pythonhosted.org/packages/86/8f/1b439f26d832479b171761bf9c02b21691462e62782ad21898795bb9f6e0/eurostat-0.1.5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "70ed9d8689819e4e5b432163200d9d43", "sha256": "b60eb6d1ce7ec0a18a91ea933f4f1fb4017804a39fbcde2995fe7812eb5bcf27"}, "downloads": -1, "filename": "eurostat-0.1.5.tar.gz", "has_sig": false, "md5_digest": "70ed9d8689819e4e5b432163200d9d43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15446, "upload_time": "2020-01-08T14:04:02", "upload_time_iso_8601": "2020-01-08T14:04:02.362831Z", "url": "https://files.pythonhosted.org/packages/fe/04/a116c364a8bcddc88fbc9dfa295d806eb5afd4094358dee3004094156c8e/eurostat-0.1.5.tar.gz"}]}