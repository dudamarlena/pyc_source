{"info": {"author": "Jacob Rief", "author_email": "jacob.rief@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# django-entangled\n\nEdit JSON-Model Fields using a Standard Django Form.\n\n[![Build Status](https://travis-ci.org/jrief/django-entangled.svg?branch=master)](https://travis-ci.org/jrief/django-entangled)\n[![PyPI](https://img.shields.io/pypi/pyversions/django-entangled.svg)]()\n[![PyPI version](https://img.shields.io/pypi/v/django-entangled.svg)](https://https://pypi.python.org/pypi/django-entangled)\n[![PyPI](https://img.shields.io/pypi/l/django-entangled.svg)]()\n[![Twitter Follow](https://img.shields.io/twitter/follow/shields_io.svg?style=social&label=Follow&maxAge=2592000)](https://twitter.com/jacobrief)\n\n\n## Use-Case\n\nA Django Model may contain fields which accept arbitrary data stored as JSON. Django itself, provides a\n[JSON field](https://docs.djangoproject.com/en/stable/ref/contrib/postgres/fields/#jsonfield) specific to Postgres.\nFor other database implementations, there are plenty of alternatives.\n\nWhen creating a form from a models, the input field associated with a JSON field, typically is a `<textarea ...><textarea>`.\nThis textarea widget is very inpracticable for editing, because it just contains a textual representation of that\nobject notation. One possibility is to use a generic [JSON editor](https://github.com/josdejong/jsoneditor),\nwhich with some JavaScript, transforms the widget into an attribute-value-pair editor. This approach however prevents\nus from utilizing all the nice features provided by the Django form framework, such as field validation, normalization\nof data and the usage of foreign keys. By using **django-entangled**, one can use a Django `ModelForm`, and store all,\nor a subset of that form fields in one or more JSON fields inside of the associated model.\n\n\n## Installation\n\nSimply install this Django app, for instance by invoking:\n\n```bash\npip install django-entangled\n```\n\nThere is no need to add any configurations directives to the project's `settings.py`.\n\n\n## Example\n\nSay, we have a Django model to describe a bunch of different products. Some fields are used by all products, whereas\nothers describe the properties of that product. Since we don't want to create a different product model for each\nproduct type, we use a JSON field to store these arbitrary properties.\n\n```python\nfrom django.db import models\nfrom django.contrib.postgres.fields import JSONField\n\nclass Product(models.Model):\n    name = models.CharField(max_length=50)\n\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n    \n    properties = JSONField()\n```\n\nIn a typical form editing view, we would create a form inheriting from\n[ModelForm](https://docs.djangoproject.com/en/stable/topics/forms/modelforms/#modelform) and refer to this model using\nthe `model` attribute in the `Meta`-class. Here the `properties`-field would show up as unstructured JSON rendered\ninside a `<textarea ...><textarea>`. This definitely is not what we want! Instead we create a typical Django Form using\nthe special mixin class `EntangledModelFormMixin`.\n\n```python\nfrom django.contrib.auth import get_user_model\nfrom django.forms import fields, models\nfrom entangled.forms import EntangledModelForm\nfrom .models import Product\n\nclass ProductForm(EntangledModelForm):\n    color = fields.RegexField(\n        regex=r'^#[0-9a-f]{6}$',\n    )\n\n    size = fields.ChoiceField(\n        choices=[('s', \"small\"), ('m', \"medium\"), ('l', \"large\"), ('xl', \"extra large\")],\n    )\n\n    tenant = models.ModelChoiceField(\n        queryset=get_user_model().objects.filter(is_staff=True),\n    )\n\n    class Meta:\n        model = Product\n        entangled_fields = {'properties': ['color', 'size', 'tenant']}  # fields provided by this form\n        untangled_fields = ['name', 'price']  # these fields are provided by the Product model\n```\n\nIn addition to the mixin class `EntangledModelFormMixin` we add a special dictionary named `entangled_fields` to our\n`Meta`-options. In this dictionary, the key (here `'properties'`) refers to the JSON-field in our model `Product`.\nThe value (here `['color', 'size', 'tenant']`) is a list of named form fields, declared in our form- or base-class of\ntherefore. This allows us, to assign all standard Django form fields to arbitrary JSON fields declared in our Django\nmodel. Moreover, we can even use a `ModelChoiceField` to refer to another model object using a\n[generic relation](https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/#generic-relations)\n\nSince in this form we also want to access the non-JSON fields from our Django model, we add a list named\n`untangled_fields` to our `Meta`-options. In this list, (here `['name', 'price']`) we refer to the non-JSON fields\nin our model `Product`. From both of these iterables, `entangled_fields` and `untangled_fields`, the mixin class\n`EntangledModelFormMixin` then builds the `Meta`-option `fields`, otherwise required. Therefore there is no need\nto explicitly declare this list.\n\nWe can use this form in any Django detail view. A typical use-case, is the built-in Django ModelAdmin:\n\n```python\nfrom django.contrib import admin\nfrom .models import Product\nfrom .forms import ProductForm\n\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    form = ProductForm\n```\n\nSince the form used by this `ModelAdmin`-class\n[can not be created dynamically](https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.form),\nwe have to declare it explicitly using the `form`-attribute. This is the only change which has to be performed, in\norder to store arbitrary content inside our JSON model-fields.\n\n\n## Caveats\n\nDue to the nature of JSON, indexing and thus building filters or sorting rules based on the fields content is not as\nsimple, as with standard model fields. Therefore, this approach is best suited, if the main focus is to store data,\nrather than digging through data.\n\nForeign keys are stored as `\"fieldname\": {\"model\": \"appname.modelname\", \"pk\": 1234}` in our JSON field, meaning that\nwe have no database constraints. If a target object is deleted, that foreign key points to nowhere. Therefore always\nkeep in mind, that we don't have any referential integrity and hence must writing our code in a defensive manner.\n\n\n## Changes\n\n- 0.3\n  * Add support for `ModelMultipleChoiceField`.\n  * Fix: Make a deep copy of `entangled_fields` and `untangled_fields` before merging.\n  * Add covenience class `EntangledModelForm`.\n  * Moving data from entangled fields onto their compressed representation, now is performed in\n    after the form has performed its own `clean()`, so that accessing form fields is more natural.\n  * Add functions `get_related_object` and `get_related_queryset` to get the model object from its\n    JSON representation.\n\n- 0.2\n  * Introduce `Meta`-option `untangled_fields`, because the approach in 0.1 didn't always work.\n  * Use `formfield()`-method, for portability reasons with Django's Postgres JSON field.\n\n- 0.1\n  * Initial release.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jrief/django-entangled", "keywords": "Django Forms,JSON", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-entangled", "package_url": "https://pypi.org/project/django-entangled/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django-entangled/", "project_urls": {"Homepage": "https://github.com/jrief/django-entangled"}, "release_url": "https://pypi.org/project/django-entangled/0.3/", "requires_dist": null, "requires_python": "", "summary": "Edit JSON field using Django Model Form", "version": "0.3"}, "last_serial": 5391196, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a6b4bb45a0ee24b55d03e6e19af05523", "sha256": "4cc39273655c7a64ea10ed4478fbefc0b5fabb999019b47d387d81c84765d6ce"}, "downloads": -1, "filename": "django-entangled-0.1.tar.gz", "has_sig": false, "md5_digest": "a6b4bb45a0ee24b55d03e6e19af05523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6667, "upload_time": "2019-05-27T16:51:17", "upload_time_iso_8601": "2019-05-27T16:51:17.302065Z", "url": "https://files.pythonhosted.org/packages/75/2e/481e6fc57df7491034585b5e1a4107e1019a23915b632cf45064ba521337/django-entangled-0.1.tar.gz"}], "0.2": [{"comment_text": "", "digests": {"md5": "8762624dc915af216281d4fe8841fa10", "sha256": "f53cd88962d5b63e25fc0ada7cd2526e3e6c02e336d3cdf6517932712a281fd0"}, "downloads": -1, "filename": "django-entangled-0.2.tar.gz", "has_sig": false, "md5_digest": "8762624dc915af216281d4fe8841fa10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7852, "upload_time": "2019-05-29T09:34:46", "upload_time_iso_8601": "2019-05-29T09:34:46.493241Z", "url": "https://files.pythonhosted.org/packages/0a/6d/a2d72d85d66bb1f37a56d7fe54300d40f49ed7ca18c557d297a4f1d53357/django-entangled-0.2.tar.gz"}], "0.3": [{"comment_text": "", "digests": {"md5": "543d45d2c27e4cccd4082a451299956a", "sha256": "e51cb1748f30d3dc474fd32d195f051307507a3dbbe789f0fed29b80ce2e6a35"}, "downloads": -1, "filename": "django-entangled-0.3.tar.gz", "has_sig": false, "md5_digest": "543d45d2c27e4cccd4082a451299956a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9211, "upload_time": "2019-06-12T13:18:46", "upload_time_iso_8601": "2019-06-12T13:18:46.706602Z", "url": "https://files.pythonhosted.org/packages/c1/56/0e421e059bda3e1a8c6c190e9b63d553147c53fc2cd730a6b120d1042e3f/django-entangled-0.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "543d45d2c27e4cccd4082a451299956a", "sha256": "e51cb1748f30d3dc474fd32d195f051307507a3dbbe789f0fed29b80ce2e6a35"}, "downloads": -1, "filename": "django-entangled-0.3.tar.gz", "has_sig": false, "md5_digest": "543d45d2c27e4cccd4082a451299956a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9211, "upload_time": "2019-06-12T13:18:46", "upload_time_iso_8601": "2019-06-12T13:18:46.706602Z", "url": "https://files.pythonhosted.org/packages/c1/56/0e421e059bda3e1a8c6c190e9b63d553147c53fc2cd730a6b120d1042e3f/django-entangled-0.3.tar.gz"}]}