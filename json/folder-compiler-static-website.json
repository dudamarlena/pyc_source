{"info": {"author": "Dominik Krupke", "author_email": "krupked@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Some processors for FolderCompiler to compile a static website\n\nThis static website generator is meant to generate simple webpages as simple as possible \nby mainly applying a markdown generator and jinjer templates in an organized way.\nThe general assumption is, that every output file only requires a single input file (+template).\nYou just specify which Processor is applied for which files (e.g., the MarkdownProcessor for all files ending with \".md\" in the input directory).\n\nSee also the base project [folder_compiler](https://github.com/d-krupke/folder_compiler).\n\n## Principles\n\n* The primary focus is to apply a template to content files (e.g. a navigation bar).\n* Keep it super simple (I update my webpage maybe every year and don't want it to take much knowledge that I immediately forget afterwards)\n* Keep it open (especially do not hide jinja)\n* Allow more complex behavior where possible without increasing the complexity of the generator (actually, this is included in the previous point).\n\n## Processors\n\nA processor gets an input file (e.g., a markdown file) and compiles it to an arbitrary amount of output files.\n\nIt is very simple to create your own processor (e.g., for automatically compressing every jpg into _small, _medium, and _large).\nFor the cases I need myself, a set of processors is already provided:\n* HtmlProcessor: Simply passes the content to a jinjer template (thus, file content must already be html readable)\n* MarkdownProcessor: Parses a markdown file including metadata and lets a jinjer template render it.\n* BibtexProcessor: Parses a bibtex file and lets a jinjer template create a nice bibliography.\n* FileCopyProcessor: Simply copies a file (Part of FolderCompiler)\n* DevNullProcessor: Ignores files (Part of FolderCompiler)\n\n## Example\n\nSee in the following example, how simple it is to configure\n```python\nimport jinja2 as jinja2\n\nfrom folder_compiler import FolderCompiler\nfrom folder_compiler.processors import FileCopyProcessor\nfrom static_webpage_folder_compiler import MarkdownProcessor\n\n# Create jinja2 environment as powerful template engine\n# ./template holds the template files in this case\njinja = jinja2.Environment(\n    loader=jinja2.FileSystemLoader('./templates'),\n)\n\n# jinja templates (see example folder)\nmd_template = jinja.get_template(\"markdown_default.html\")\n\n# Processors\nprocessors = [\n    MarkdownProcessor(md_template).add_include(\".*.md\"),  # apply to all *.md files\n    FileCopyProcessor().add_exclude(\".*/\\..*\")  # copy the rest (except hidden files)\n]\n\n# Compile the files in the folder ./content to ./output\nFolderCompiler(input=\"./content\", output=\"./output\").compile(processors).remove_orphaned_files()\n```\n\nBut if you want to do something complex like a blog, try something more advanced like [Hyde](https://github.com/hyde/hyde).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/d-krupke/folder_compiler_static_website", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "folder-compiler-static-website", "package_url": "https://pypi.org/project/folder-compiler-static-website/", "platform": "", "project_url": "https://pypi.org/project/folder-compiler-static-website/", "project_urls": {"Homepage": "https://github.com/d-krupke/folder_compiler_static_website"}, "release_url": "https://pypi.org/project/folder-compiler-static-website/0.1.1/", "requires_dist": ["folder-compiler", "jinja2", "markdown2", "bibtexparser"], "requires_python": ">=3.6", "summary": "A simple util for 'compiling' a folder, e.g. to a static website.", "version": "0.1.1"}, "last_serial": 6111462, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cbb01da6cba891c175fe4228c7fd5e93", "sha256": "d3b7d68426f643bc2ca1913a82ccef868d46302cc639c7820189e907ef59d104"}, "downloads": -1, "filename": "folder_compiler_static_website-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cbb01da6cba891c175fe4228c7fd5e93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7486, "upload_time": "2019-11-10T12:24:14", "upload_time_iso_8601": "2019-11-10T12:24:14.674782Z", "url": "https://files.pythonhosted.org/packages/b4/b3/857c2db1b7c52d2644521022aad90fa2d16965fa06f9d7b8c348269da618/folder_compiler_static_website-0.1.0-py3-none-any.whl"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3e9206e566a8a5dc980732b82e46f5fb", "sha256": "2fdad5e9a78e1efb331c3841b2d385bce1751e11f3b1b9c08ff3296cb05b7612"}, "downloads": -1, "filename": "folder_compiler_static_website-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3e9206e566a8a5dc980732b82e46f5fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11328, "upload_time": "2019-11-10T12:34:46", "upload_time_iso_8601": "2019-11-10T12:34:46.350830Z", "url": "https://files.pythonhosted.org/packages/2a/25/4891acda66d7a960a5d62b0f230fd1294a2e85d88e9a5d71c155688a7957/folder_compiler_static_website-0.1.1-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "3e9206e566a8a5dc980732b82e46f5fb", "sha256": "2fdad5e9a78e1efb331c3841b2d385bce1751e11f3b1b9c08ff3296cb05b7612"}, "downloads": -1, "filename": "folder_compiler_static_website-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3e9206e566a8a5dc980732b82e46f5fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11328, "upload_time": "2019-11-10T12:34:46", "upload_time_iso_8601": "2019-11-10T12:34:46.350830Z", "url": "https://files.pythonhosted.org/packages/2a/25/4891acda66d7a960a5d62b0f230fd1294a2e85d88e9a5d71c155688a7957/folder_compiler_static_website-0.1.1-py3-none-any.whl"}]}