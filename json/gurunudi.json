{"info": {"author": "GuruYuga Technologies", "author_email": "guruyuga@use.startmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "Gurunudi AI API: Python client\n******************************\n\n**Gurunudi** is a Python library by `GuruYuga <https://guruyuga.com/>`_ for accessing the `Gurunudi Artificial Intelligence API <https://www.gurunudi.com/>`_.\nGurunudi (**AI as a Service**) provides a wide range of **Artificial Intelligence based API solutions** (See below). This client library for Gurunudi AI API is commercial open-source software, released under the MIT license.\n\n\ud83d\udcab **Version 1.3.8 out now!**\n\n.. image:: https://img.shields.io/pypi/v/gurunudi.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/gurunudi\n    :alt: pypi Version\n\n.. image:: https://badges.gitter.im/guruyuga/gurunudi.svg\n    :target: https://gitter.im/guruyuga/gurunudi\n    :alt: Gurunudi on Gitter \n\n.. image:: https://img.shields.io/twitter/follow/gurunudi.svg?style=social&label=Follow\n    :target: https://twitter.com/gurunudi\n    :alt: gurunudi on Twitter\n\n\ud83d\udcd6 Installation\n================\n\n==================== ===\n**Operating system** macOS / OS X, Linux, Windows\n**Python version**   2+, 3+\n**Package managers** `pip <https://pypi.python.org/pypi/gurunudi>`_\n==================== ===\n\nvia pip\n-------\n\n.. code:: bash\n\n    pip install gurunudi\n\nWhen using pip it is generally recommended to install packages in a virtual environment to avoid modifying system state:\n\n.. code:: bash\n\n    venv .env\n    source .env/bin/activate\n    pip install gurunudi\n\nUpdating\n--------\n\n.. code:: bash\n\n    pip install gurunudi --upgrade\n\n\ud83d\udcac Where to ask questions\n==========================\n\nThe Gurunudi project is maintained by `@gurudevrao <https://github.com/gurudevrao>`_. Please use the below listed forums for any support requests.\n\n====================== ===\n**Bug Reports**        `GitHub Issue Tracker`_\n**Usage Questions**    `StackOverflow`_, `Gitter Chat`_\n**General Discussion** `Gitter Chat`_\n====================== ===\n\n.. _GitHub Issue Tracker: https://github.com/guruyuga/gurunudi/issues\n.. _StackOverflow: http://stackoverflow.com/questions/tagged/gurunudi\n.. _Gitter Chat: https://gitter.im/guruyuga/gurunudi\n\nFeatures of Gurunudi\n====================\n\n* Not just English, support exists for an ever growing list of **100+** `languages <https://guruyuga.com/languages/>`\n* Pre-trained models that are continuously updated for better accuracy and to support more languages.\n* Text Classification - Language Detection, Sentiment Analysis, Topic Modeling, Text Classification and more \n* Text Analysis - NLP tasks like Named Entities, Sentence Extraction, Keyword Extraction, Intent Extraction\n* Text Generation - Chatbot, Summarization, Title Generation, Translation, Natural Language Generation (NLG) and more\n* Text Transformation - Co-reference Resolution, Fix Case (True Case), Spell Check and more\n* Knowledge Graph - Definition, Natural Language Query (NLQ), Natural Language Inference (NLI)\n* Custom Trained Bots - Domain Experts, Customer Support, FAQ and more\n* More cutting edge AI features are being added continuously\n\n\n\ud83d\udcd6 Documentation\n================\n\nBasics\n------\n\n.. code:: python\n\n    from gurunudi import AI,lang\n\n    ai=AI()\n\nAI is a class that abstracts API calls to Gurunudi AI System. Create an AI object as shown above. Except for language detection API call, all other text based API calls take an additional optional argument as the language code which if not present, defaults to English (except for language detection call). The language code is a 3-letter `ISO 639-3 code <https://en.wikipedia.org/wiki/List_of_ISO_639-3_codes>`_. For language codes and features currently supported by each language, see `supported languages <https://guruyuga.com/languages/>`_.\n\n.. code:: python\n\n    from gurunudi import lang\n    definition=ai.define(\"\u0c95\u0ca8\u0ccd\u0ca8\u0ca1\",lang.KANNADA) #Specify the language if non-English text\n\nAutocorrect / Spell Check\n-------------------------\n\nAttempts to automatically fix any spelling errors which includes misspelled words, mixed up words.\n\n.. code:: python\n\n    corrected_text = ai.autocorrect(\"who is the primem inister of idnia\")\n    #now corrected_text = \"who is the prime minister of india\"\n\n    #English is the default language for all API calls (except langauge detection API that has no language parameter as input). \n    #So, if your input text is in a language other than english, you can specify the language as the second argument. See example below. This applies to all AI API calls.\n    corrected_text = ai.autocorrect(\"Les femes ont cess\u00e9 de prndre des piluls parce qu'elles \u00e9taient encintes.\",lang.FRENCH)\n    #now corrected_text = \"Les femmes ont cess\u00e9 de prendre des pilules parce qu'elles \u00e9taient enceintes.\"\n\nAutocomplete\n-------------------------\n\nAttempts to automatically complete the given sentence to the nearest meaningful sentence.\n\n.. code:: python\n\n    completed_text = ai.autocomplete(\"which is the fas\")\n    #now completed_text = \"which is the fastest car\"\n\n\nChatbot\n-------\n\nGeneral purpose chatbot which makes use of all other Gurunudi AI apis to have general conversation as well as answer knowledge based queries\n\n.. code:: python\n\n    response = ai.chat(\"how are you?\") #returns a string ex: \"I am fine\"\n    response = ai.chat(\"where is Badami\") #returns a string ex: \"in Karnataka, India\"\n    response = ai.chat(\"do you eat cakes?\") #returns a string ex: \"software do not eat\"\n    response = ai.chat(\"solve 3x-12=0\") #returns a string ex: \"4\"\n\n\nCo-reference Resolution\n-----------------------\n\nAttempts to resolve co-referenes in a text (like pronouns) to their corresponding nouns.\n\n.. code:: python\n\n    coreferenced_text = ai.coref(\"Einstein was a brillian scientist. He was born in Germany.\")\n    #now coreferenced_text = \"Einstein was a brillian scientist. Einstein was born in Germany.\"\n\n    coreferenced_text = ai.coref(\"The women stopped taking pills because they were pregnant.\")\n    #now coreferenced_text = \"The women stopped taking pills because the women were pregnant\"\n\n\nDefinition\n----------\n\nGiven a word or a noun, provides its definition.\n\n.. code:: python\n\n    definition = ai.define(\"sun\")\n    #now definition = \"the star that is the source of light and heat for the planets in the solar system\"\n\n\nFix Case (True Case)\n--------------------\n\nAttempts to fix the case for case sensitive language scripts like English to generate true cased sentencete.\n\n.. code:: python\n\n    case_fixed_text = ai.fix_case(\"delhi is the capital of iNdia\")\n    #now case_fixed_text = \"Delhi is the capital of India\"\n\n\nIntent Extraction\n-----------------\n\nAttempts to extract Structured Intent from a natural language sentence. The intent can be then processed by your app to take further actions. Helpful for custom chatbots.\nThis is the exact opposite process of natural language generation (NLG) API listed below. This takes natural language text as input and gives intent as output.\n\nThe Structured Intent format is the same for output of Intent Extraction API, input of Knowledge Graph Query API and input of Natural Language Generation API.\n\n.. code:: python\n\n    intent = ai.intent(\"hi\")\n    #returns \"[{\"intent\":\"greeting\"}]\"\n\n    intent = ai.intent(\"Delhi is in India\")\n    #returns [{\"intent\":\"statement\",\"theme\":\"Delhi\",\"attribute\":\"location\",\"value\":\"India\",\"tense\":\"present\"}]\n\n    intent = ai.intent(\"John went to Chicago\")\n    #returns [{\"intent\":\"statement\",\"agent\":\"John\",\"action\":\"go\",\"destination\",:\"Chicago\",\"tense\":\"past\"}]\n\n    intent = ai.intent(\"book a flight to mumbai\")\n    #returns [{\"intent\":\"command\",\"action\":\"book\",\"theme\":\"flight\",\"destination\":\"Mumbai\",\"tense\":\"present\"}]\n\n    intent = ai.intent(\"where is berlin?\")\n    #returns [{\"intent\":\"query\",\"theme\":\"Berlin\",\"query_type\":\"attribute_value\",\"attribute\":\"location\",\"tense\":\"present\"}]\n\n\nKeyword Extraction\n------------------\n\nExtracts important keywords from given text. The keywords are ordered in the descending order of significance in relation to the given text.\n\n.. code:: python\n\n    keywords = ai.keywords(\"Delhi is in India\")\n    #now keywords = ['India', 'Delhi']\n\n\nKnowledge Graph Query\n---------------------\n\nQuery the Gurunudi Knowledge Graph using Structured Intent. \nThe Structured Intent format is the same for output of Intent Extraction API, input of Knowledge Graph Query API and input of Natural Language Generation API.\n\n.. code:: python\n\n    answer = ai.graph_query({\"theme\":\"India\",\"attribute\":\"capital\",\"value\":\"?\"})\n    #now answer = {\"theme\":\"India\",\"attribute\":\"capital\",\"value\":\"New Delhi\"}\n\n    #if language other than English, then specify\n    answer = ai.graph_query({\"theme\":\"Inde\",\"attribute\":\"capitale\",\"value\":\"?\"},lang.FRENCH)\n    #now answer = {\"theme\":\"Inde\",\"attribute\":\"capitale\",\"value\":\"New Delhi\"}\n\n\nLanguage Detection\n------------------\n\nIdentifies the language of a given text. Can also differentiate between Chinese, Korean and Japanese texts.\n\n.. code:: python\n\n    language = ai.language(\"lorem ipsum\")\n    #now language = {\"iso1\":\"la\",\"iso3\":\"lat\",\"language\":\"Latin\"}\n\n    language = ai.language(\"\u0ca8\u0ca8\u0ccd\u0ca8 \u0cb9\u0cc6\u0cb8\u0cb0\u0cc1 \u0c97\u0cc1\u0cb0\u0cc1\")\n    #now language = {\"iso1\":\"kn\",\"iso3\":\"kan\",\"language\":\"Kannada\"}\n\n    language = ai.lang_name(\"\u0ca8\u0ca8\u0ccd\u0ca8 \u0cb9\u0cc6\u0cb8\u0cb0\u0cc1 \u0c97\u0cc1\u0cb0\u0cc1\")\n    #now language = \"Kannada\"\n\n\nNamed Entities Extraction\n-------------------------\n\nExtracts named entities from a given text.\n\n.. code:: python\n\n    named_entities = ai.named_entities(\"India is in Asia\") #returns a list of named entities, their labels and position in the text\n    #now named_entities = [{\"label\": \"GPE\", \"end\": 5, \"start\": 0, \"name\": \"India\"}, {\"label\": \"LOC\", \"end\": 16, \"start\": 12, \"name\": \"Asia\"}]\n\n\nNatural Language Generation (NLG)\n---------------------------------\n\nThis API takes Structured Intent as input and gives natural language text as output. This is the exact opposite process of intent extraction API described above. \nThe Structured Intent format is the same for output of Intent Extraction API, input of Knowledge Graph Query API and input of Natural Language Generation API.\n\n.. code:: python\n\n    text = ai.generate({\"theme\":\"Delhi\",\"attribute\":\"location\",\"value\":\"India\"}) \n    #now text = \"Delhi is in India.\"\n\n    text = ai.generate({\"theme\":\"Delhi\",\"attribute\":\"location\",\"value\":\"India\",\"intent\":\"query\"}) \n    #now text = \"Is Delhi in India?\"\n\n    text = ai.generate({\"theme\":\"Delhi\",\"attribute\":\"location\",\"value\":\"India\",\"intent\":\"query\",\"tense\":\"past\"}) \n    #now text = \"Was Delhi in India?\"\n\n\nNatural Language Inference (NLI)\n--------------------------------\n\nAttempts to find all possible inferences that can be drawn from a given natural language text.\n\n.. code:: python\n\n    list = ai.inferences(\"New Delhi is the capital city of India\") \n    #now list = [\"New Delhi is a city.\",\"New Delhi is in India.\",\"India has a capital city.\",\"New Delhi is a location.\",\"New Delhi is an administrative territory.\",\"India is a location.\",\"India is an administrative territory.\",\"New Delhi is a capital city.\"]\n\n\nNatural Language Query (NLQ)\n----------------------------\n\nAttempts to answer simple queries in natural language using Gurunudi Knowledge Graph.\n\n.. code:: python\n\n    answer = ai.query(\"what is Tiramisu\")\n    #now answer = \"coffee-flavoured Italian dessert\"\n\nSentence Extraction\n-------------------\n\nExtracts individual sentences from a given text.\n\n.. code:: python\n\n    sentences = ai.sentences(\"Mr. India was a great movie. It was directed by Shekhar Kapur.\")\n    #now sentences = [\"Mr. India was a great movie.\", \"It was directed by Shekhar Kapur.\"]\n\n\nSentiment Analysis\n------------------\n\nAnalyzes the sentiment of a given text.\n\n.. code:: python\n\n    sentiment = ai.sentiment(\"I really did not like that movie\")\n    #now sentiment = \"negative\"\n\n    sentiment = ai.sentiment (\"she is very beautiful\")\n    #now sentiment = \"positive\"\n\n    sentiment = ai.sentiment (\"The ambience was good, but the food was bad\")\n    #now sentiment = \"mixed\"\n\n    sentiment = ai.sentiment (\"roses are red, violets are blue\")\n    #now sentiment = \"neutral\"\n\n\nSummary Generation (Summarization)\n----------------------------------\n\nGenerates a short summary of a long text.\n\n.. code:: python\n\n    summary = ai.summary(\"<SOME_LONG_TEXT>\")\n    #now summary = <summary_of_the_long_text>\n\n\nText Classification\n-------------------\n\nClassifies a text using given classification model\n\n.. code:: python\n\n    from gurunudi import lang\n\n    labels = ai.classify(\"The apple fell on Newton\",\"tense\")\n    #now labels = [\"past\"]\n\n    labels = ai.classify(\"when did that happen?\",\"mood\")\n    #now labels = [\"interrogative\"]\n\n    labels = ai.classify(\"You have won 1 million dollars\",\"email\")\n    #now labels = [\"spam\"]\n\n    labels = ai.classify(\"India won the ICC world cup\",\"news\")\n    #now labels = [\"sports\",\"cricket\"]\n\n\nTitle Generation\n----------------\n\nAttempts to suggest a title for a given long text like an article or a document.\n\n.. code:: python\n\n    from gurunudi import lang\n\n    title = ai.title(\"<SOME_LONG_TEXT>\")\n    #now title = \"<TITLE_SUGGESTED_BY_GURUNUDI_AI>\"\n\n\nTopic Modeling\n--------------\n\nAttempts to identify a list of topics that can be associated with a given text\n\n.. code:: python\n\n    topics = ai.topics(\"Can Trump and Kim end the Korean War?\")\n    #now topics = [\"Politics\"]\n\n    topics = ai.topics(\"Planning To Buy A House? There Is Good News For You\")\n    #now topics = [\"Business\"]\n\n\nTranslation\n-----------\n\nAttempts to translate text from one language to another.\n\n.. code:: python\n\n    from gurunudi import lang\n\n    #arguments are source text to be translated, target language, source language\n    translation = ai.translate(\"New Delhi is the capital of India\",lang.GERMAN,lang.ENGLISH)\n    #now translation = \"Neu-Delhi ist die Hauptstadt von Indien\"\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/guruyuga/gurunudi", "keywords": "guruyuga,gurunudi,artificial-intelligence,chatbot,nlp,nlg,nli,machine-learning,sentiment-analysis,natural-language-processing,natural-language-generation,natural-language-inference,machine-translation,autocomplete,autocorrect,spell-check,coreference-resolution,knowledge-graph,expert-system,context-qa,topic-modeling", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "gurunudi", "package_url": "https://pypi.org/project/gurunudi/", "platform": "", "project_url": "https://pypi.org/project/gurunudi/", "project_urls": {"Homepage": "http://github.com/guruyuga/gurunudi"}, "release_url": "https://pypi.org/project/gurunudi/1.3.8/", "requires_dist": ["requests (>=2.13.0)"], "requires_python": "", "summary": "The official Python client for Gurunudi AI API", "version": "1.3.8"}, "last_serial": 5944569, "releases": {"1.3.8": [{"comment_text": "", "digests": {"md5": "7b21196b8269b5057983ec1e85df5662", "sha256": "ffebfb93decee5a62edba1cd8f52326b5345647b8fa724581521b9edd5a287d4"}, "downloads": -1, "filename": "gurunudi-1.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "7b21196b8269b5057983ec1e85df5662", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12963, "upload_time": "2019-10-08T12:19:54", "upload_time_iso_8601": "2019-10-08T12:19:54.841273Z", "url": "https://files.pythonhosted.org/packages/ee/66/6a1d6d7f1b44313487db03161f3cf19273265282883065b712c12092cbcd/gurunudi-1.3.8-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0b79a472e616c4a45d2a97ad62d6417d", "sha256": "9e6dd4aadfef84171422595f95a456f91660574caa44aade278f0ce8e547c302"}, "downloads": -1, "filename": "gurunudi-1.3.8.tar.gz", "has_sig": false, "md5_digest": "0b79a472e616c4a45d2a97ad62d6417d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15716, "upload_time": "2019-10-08T12:19:57", "upload_time_iso_8601": "2019-10-08T12:19:57.670589Z", "url": "https://files.pythonhosted.org/packages/40/11/dcb44cb3fe1b202ffaf3363e545bcd27f2e73ef2212b11cdd86464792d35/gurunudi-1.3.8.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b21196b8269b5057983ec1e85df5662", "sha256": "ffebfb93decee5a62edba1cd8f52326b5345647b8fa724581521b9edd5a287d4"}, "downloads": -1, "filename": "gurunudi-1.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "7b21196b8269b5057983ec1e85df5662", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12963, "upload_time": "2019-10-08T12:19:54", "upload_time_iso_8601": "2019-10-08T12:19:54.841273Z", "url": "https://files.pythonhosted.org/packages/ee/66/6a1d6d7f1b44313487db03161f3cf19273265282883065b712c12092cbcd/gurunudi-1.3.8-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0b79a472e616c4a45d2a97ad62d6417d", "sha256": "9e6dd4aadfef84171422595f95a456f91660574caa44aade278f0ce8e547c302"}, "downloads": -1, "filename": "gurunudi-1.3.8.tar.gz", "has_sig": false, "md5_digest": "0b79a472e616c4a45d2a97ad62d6417d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15716, "upload_time": "2019-10-08T12:19:57", "upload_time_iso_8601": "2019-10-08T12:19:57.670589Z", "url": "https://files.pythonhosted.org/packages/40/11/dcb44cb3fe1b202ffaf3363e545bcd27f2e73ef2212b11cdd86464792d35/gurunudi-1.3.8.tar.gz"}]}