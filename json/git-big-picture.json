{"info": {"author": "Sebastian Pipping, Julius Plenz, and Valentin Haenel", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "git-big-picture\n===============\n\n.. image:: https://travis-ci.org/esc/git-big-picture.svg?branch=master\n    :target: https://travis-ci.org/esc/git-big-picture\n\n``git-big-picture`` is a visualization tool for Git repositories. You can think\nof it as a filter that removes uninteresting commits from a DAG modelling a Git\nrepository and thereby exposes the big picture: for example the hierarchy of\ntags and branches. ``git-big-picture`` supports convenience output options and\ncan filter different classes of commits. It uses the Graphviz utility to render\nimages that are pleasing to the eye.\n\nA Small Example\n---------------\n\nImagine the following Graph:\n\n.. code::\n\n             0.1.1   0.1.2\n               |       |\n    0.0    G---H---I---J---K---L---M maint\n     |    /\n     A---B---C---D---E---F master\n         |    \\         /\n        0.1    N---O---P topic\n\n\nWhere the following commits have Branches and Tags:\n\n.. code::\n\n    A -> 0.0\n    B -> 0.1\n    F -> master\n    H -> 0.1.1\n    J -> 0.1.2\n    M -> maint\n    P -> topic\n\nThe *reduced* graph of *interesting* commits would be:\n\n.. code::\n\n          H---J---M\n         /\n    A---B---F\n         \\ /\n          P\n\nBut since the commits would be labeled with their refs, it would look more like\n(within the limits of ASCII art):\n\n.. code::\n\n          0.1.1---0.1.2---maint\n         /\n    0.0---0.1---master\n            \\     /\n             topic\n\nDemo Video\n----------\n\nChuwei Lu has made a youtube video showing how to use ``git-big-picture``:\n\nhttps://www.youtube.com/watch?v=H7w7JWSy3oc&feature=youtu.be\n\nScreenshots\n-----------\n\nCourtesy of Graphviz, ``git-big-picture`` can output nice images.\n\nHere is the original repository from the example above:\n\n.. image:: https://raw.github.com/esc/git-big-picture/master/screenshots/before.png\n    :height: 280px\n    :width:  456px\n\nAnd here is the reduced version:\n\n.. image:: https://raw.github.com/esc/git-big-picture/master/screenshots/after.png\n    :height: 280px\n    :width:  456px\n\nWe also have a real world examples from:\n\n* `cython <https://raw.github.com/esc/git-big-picture/master/screenshots/cython-big-picture.png>`_\n* `PyMVPA <https://raw.github.com/esc/git-big-picture/master/screenshots/pymvpa-big-picture.png>`_\n* `bloscpack <https://raw.github.com/esc/git-big-picture/master/screenshots/bloscpack-big-picture.png>`_\n\nDependencies\n------------\n\n* Python 2.7 or Python 3.x\n* Git (1.7.1 works)\n* Graphviz utility\n* Nosetest and Cram (only for running tests)\n\nInstallation\n------------\n\nAs of ``v0.10.1`` you may install it from PyPi:\n\nhttps://pypi.org/project/git-big-picture/\n\n.. code:: console\n\n   $ pip install git-big-picture\n\nAlternatively, Just run it straight from a clone or download:\n\n.. code:: console\n\n    $ git clone git://github.com/esc/git-big-picture.git\n    $ cd git-big-picture\n    $ ./git-big-picture --help\n\n    $ wget https://raw.github.com/esc/git-big-picture/master/git-big-picture\n    $ chmod 755 git-big-picture \n    $ ./git-big-picture -h\n\nAlternatively, use the standard ``setup.py`` script to install it system wide\nor just for the user.\n\n.. code:: console\n\n    $ ./setup.py install\n    (may need root privileges)\n    $ ./setup.py install --user\n\nGit Integration\n---------------\n\nYou can easily integrate this script as a regular Git command, by making the\nscript ``git-big-picture`` available on the ``$PATH``. For instance: using\n``./setup.py install`` method, as described above should do the trick.\nAlternatively symlink or copy ``git-big-picture`` into a directory listed in\nyour ``$PATH``, for example ``$HOME/bin``.\n\nYou may then use ``git big-picture`` (w/o the first dash) as you would any other Git command:\n\n.. code:: console\n\n    $ git big-picture -h\n\nOr create an alias:\n\n.. code:: console\n\n    $ git config --global alias.bp big-picture\n    $ git bp -h\n\nInternals\n---------\n\nThe graph operations are written in Python and output the graph-data in the\neasy-to-write Graphviz syntax. This is converted into an image using the\nGraphviz ``dot`` utility. Graphviz supports a multitude of image formats, e.g. SVG\nand PDF. Check that Graphviz is installed by invoking: ``dot -V``.\n\nUsage\n-----\n\n.. code:: console\n\n    $ git-big-picture --help\n    Usage: git-big-picture OPTIONS [<repo-directory>]\n\n    Options:\n    --version             show program's version number and exit\n    -h, --help            show this help message and exit\n    --pstats=FILE         run cProfile profiler writing pstats output to FILE\n    -d, --debug           activate debug output\n\n    Output Options:\n        Options to control output and format\n\n        -f FMT, --format=FMT\n                            set output format [svg, png, ps, pdf, ...]\n        -g, --graphviz      output lines suitable as input for dot/graphviz\n        -G, --no-graphviz   disable dot/graphviz output\n        -p, --processed     output the dot processed, binary data\n        -P, --no-processed  disable binary output\n        -v CMD, --viewer=CMD\n                            write image to tempfile and start specified viewer\n        -V, --no-viewer     disable starting viewer\n        -o FILE, --outfile=FILE\n                            write image to specified file\n        -O, --no-outfile    disable writing image to file\n\n    Filter Options:\n        Options to control commit/ref selection\n\n        -a, --all           include all commits\n        -b, --branches      show commits pointed to by branches\n        -B, --no-branches   do not show commits pointed to by branches\n        -t, --tags          show commits pointed to by tags\n        -T, --no-tags       do not show commits pointed to by tags\n        -r, --roots         show root commits\n        -R, --no-roots      do not show root commits\n        -m, --merges        include merge commits\n        -M, --no-merges     do not include merge commits\n        -i, --bifurcations  include bifurcation commits\n        -I, --no-bifurcations\n                            do not include bifurcation commits\n\nUsage Examples\n--------------\n\nThere are two related groups of options, the output and the filter options.\nOutput options govern the output and format produced by the tool. Filter\noptions govern which commits to include when calculating the reduced graph.\n\nUsing Output Options\n....................\n\nGenerate PNG version of current Git repository and save to ``our-project.png``:\n\n.. code:: console\n\n    $ git-big-picture -o our-project.png\n\nGenerate SVG (default format) image of the repository in ``~/git-repo`` and view the\nresult in firefox:\n\n.. code:: console\n\n    $ git-big-picture -v firefox ~/git-repo/\n\nIf you specify the format and a filename with extension, the filename extension will\nbe used:\n\n.. code:: console\n\n    $ git-big-picture -f svg -o our-project.png\n    $ file our-project.png\n    our-project.png: PNG image data, 216 x 325, 8-bit/color RGB, non-interlaced\n\nIf you don't have an extension, you could still specify a format:\n\n.. code:: console\n\n    $ git-big-picture -f pdf -o our-project\n    warning: Filename had no suffix, using format: pdf\n\nOtherwise the default format SVG is used:\n\n.. code:: console\n\n    $ git-big-picture -o our-project\n    warning: Filename had no suffix, using default format: svg\n\nIf you would like to use an alternative viewer, specify viewer and its format:\n\n.. code:: console\n\n    $ git-big-picture -f pdf -v xpdf\n\nYou can also open the viewer automatically on the output file:\n\n.. code:: console\n\n    $ git-big-picture -v xpdf -o our-project.pdf\n\nOutput raw Graphviz syntax:\n\n.. code:: console\n\n    $ git-big-picture -g\n\nOutput raw Graphviz output (i.e. the image):\n\n.. code:: console\n\n    $ git-big-picture -p\n\nNote however, that the options in the two examples above are both mutually\nexclusive and incompatible with other output options.\n\n.. code:: console\n\n    $ git-big-picture -g -p\n    fatal: Options '-g | --graphviz' and '-p | --processed' are mutually exclusive.\n    $ git-big-picture -g -v firefox\n    fatal: Options '-g | --graphviz' and '-p | --processed' are incompatible with other output options.\n\nManually pipe the Graphviz commands to the ``dot`` utility:\n\n.. code:: console\n\n    $ git-big-picture --graphviz ~/git-repo | dot -Tpng -o graph.png\n\nUsing Filter Options\n....................\n\nThe three options ``--branches`` ``--tags`` and ``--roots`` are active by\ndefault. You can use the negation switches to turn them off. These use the\nuppercase equivalent of the short option and the prefix ``no-`` for the long\noption. For example: ``-B | --no-branches`` to deactivate showing branches.\n\nShow all interesting commits, i.e. show also merges and bifurcations:\n\n.. code:: console\n\n    $ git-big-picture -i -m\n\nShow only roots (deactivate branches and tags):\n\n.. code:: console\n\n    $ git-big-picture -B -T\n\nShow merges and branches only (deactivate tags):\n\n.. code:: console\n\n    $ git-big-picture -m -T\n\nShow all commits:\n\n.. code:: console\n\n    $ git-big-picture -a\n\nConfiguration\n-------------\n\nThe standard ``git config`` infrastructure can be used to configure\n``git-big-picture``. Most of the command line arguments can be configured in a\n``big-picture`` section. For example, to configure ``firefox`` as a viewer\n\n.. code:: console\n\n    $ git config --global big-picture.viewer firefox\n\nWill create the following section and entry in your ``~/.gitconfig``:\n\n.. code:: ini\n\n    [big-picture]\n        viewer = firefox\n\n\nThe command line negation arguments can be used to disable a setting configured\nvia the command line. For example, if you have configured the ``viewer`` above\nand try to use the ``-g | --graphviz`` switch, you will get the following\nerror:\n\n.. code:: console\n\n    $ git-big-picture -g\n    fatal: Options '-g | --graphviz' and '-p | --processed' are incompatible with other output options.\n\n... since you already have a viewer configured. In this case, use the negation\noption ``-V | --no-viewer`` to disable the ``viewer`` setting from the config\nfile:\n\n.. code:: console\n\n    $ git-big-picture -g -V\n\nTesting\n-------\n\nThe Python code is tested with `nose <https://nose.readthedocs.org/en/latest/>`_:\n\n.. code:: console\n\n    $ ./test.py\n\nThe command line interface is tested with `cram <https://bitheap.org/cram/>`_:\n\n.. code:: console\n\n    $ ./test.cram\n\nDebugging\n---------\n\nYou can use the ``[-d | --debug]`` switch to debug:\n\n.. code:: console\n\n    $ git-big-picture -d -v firefox\n\nAlthough debugging output is somewhat sparse...\n\n\nProfiling\n---------\n\nThere are two ways to profile git-big-picture, using the built-in ``--pstats``\noption or using the Python module ``cProfile``:\n\nUsing ``--pstats``:\n\n.. code:: console\n\n    $ git-big-picture --pstats=profile-stats -o graph.svg\n\n... will write the profiler output to ``profile-stats``.\n\nProfile the script with ``cProfile``\n\n.. code:: console\n\n    $ python -m cProfile -o profile-stats git-big-picture -o graph.svg\n\nIn either case, you can then use the excellent visualisation tool `gprof2dot\n<http://code.google.com/p/jrfonseca/wiki/Gprof2Dot>`_ which, incidentally,\nuses Graphviz too:\n\n.. code:: console\n\n    $ gprof2dot -f pstats profile-stats | dot -Tsvg -o profile_stats.svg\n\nTODO\n----\n\n* Sanitize the test suite\n* --abbrev switch\n\nChangelog\n---------\n\n* v0.10.1 - 2018-11-04\n\n  * Fix PyPi release\n\n* v0.10.0 - 2018-11-04\n\n  * First release after 6 years\n  * Suppot for Python: 2.7, 3.4, 3.5, 3.6, 3.7\n  * Add Python classifiers to setup.py\n  * Tempfile suffix now matches format\n  * Continuous integration via travis.ci\n  * Fixed installation instructions\n\n* v0.9.0 - 2012-11-20\n\n  * rst-ify readme\n  * Fix long standing bug in graph search algorithm\n  * Fix long standing conversion from tabbed to 4-spaces\n  * Overhaul and refactor the test-suite\n  * Remove old ``--some`` crufty code and option\n  * Add ability to find root-, merge- and bifurcation-commits\n  * Overhaul command line interface with new options\n  * Add command line interface tests using Cram\n  * Overhaul documentation to reflect changes\n\n* v0.8.0 - 2012-11-05\n\n  * Snapshot of all developments Mar 2010 - Now\n  * Extended command line options for viewing and formatting\n  * Option to filter on all, some or decorated commits\n  * Simple test suite for python module and command line\n\nLicense\n-------\n\nLicensed under GPL v3 or later, see file COPYING for details.\n\nAuthors/Contributors\n--------------------\n\n* Sebastian Pipping  <sebastian@pipping.org>\n* Julius Plenz       <julius@plenz.com>\n* Valentin Haenel    <valentin.haenel@gmx.de>\n* Yaroslav Halchenko <debian@onerussian.com>\n* Chris West (Faux)  <git@goeswhere.com>\n* Antonio Valentino  <antonio.valentino@tiscali.it>\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/esc/git-big-picture", "keywords": "", "license": "GPL v3 or later", "maintainer": "", "maintainer_email": "", "name": "git-big-picture", "package_url": "https://pypi.org/project/git-big-picture/", "platform": "", "project_url": "https://pypi.org/project/git-big-picture/", "project_urls": {"Homepage": "https://github.com/esc/git-big-picture"}, "release_url": "https://pypi.org/project/git-big-picture/0.10.1/", "requires_dist": null, "requires_python": "", "summary": "Git -- the big picture", "version": "0.10.1"}, "last_serial": 4448602, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "85cc8d159b4219c08c94b39e93baecc9", "sha256": "38e3193f876ce4a19f929a1e1ac7dd5e1171ae651eb70c5ee9a1de4e14cb0702"}, "downloads": -1, "filename": "git-big-picture-0.10.0.tar.gz", "has_sig": false, "md5_digest": "85cc8d159b4219c08c94b39e93baecc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19381, "upload_time": "2018-11-03T23:49:43", "upload_time_iso_8601": "2018-11-03T23:49:43.081301Z", "url": "https://files.pythonhosted.org/packages/f2/f5/56a71ef8cca822fd5de4d733c97951daefc6cdc94b4e647661957349f943/git-big-picture-0.10.0.tar.gz"}], "0.10.1": [{"comment_text": "", "digests": {"md5": "5e9370fc393b33996ff90f97f976cd56", "sha256": "2a853c9df731b44cdc4ca650d6c3f32a7c0d5095d26c2bc05bd5b10146b11ccc"}, "downloads": -1, "filename": "git-big-picture-0.10.1.tar.gz", "has_sig": false, "md5_digest": "5e9370fc393b33996ff90f97f976cd56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39159, "upload_time": "2018-11-04T00:08:59", "upload_time_iso_8601": "2018-11-04T00:08:59.700171Z", "url": "https://files.pythonhosted.org/packages/b4/ca/39696fb6ca3a54a9e5809aef40c964dcd4dfee9ba8ad3ac6742d2117620a/git-big-picture-0.10.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e9370fc393b33996ff90f97f976cd56", "sha256": "2a853c9df731b44cdc4ca650d6c3f32a7c0d5095d26c2bc05bd5b10146b11ccc"}, "downloads": -1, "filename": "git-big-picture-0.10.1.tar.gz", "has_sig": false, "md5_digest": "5e9370fc393b33996ff90f97f976cd56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39159, "upload_time": "2018-11-04T00:08:59", "upload_time_iso_8601": "2018-11-04T00:08:59.700171Z", "url": "https://files.pythonhosted.org/packages/b4/ca/39696fb6ca3a54a9e5809aef40c964dcd4dfee9ba8ad3ac6742d2117620a/git-big-picture-0.10.1.tar.gz"}]}