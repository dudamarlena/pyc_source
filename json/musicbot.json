{"info": {"author": "Adrien Pensart", "author_email": "crunchengine@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "========\nMusicBot\n========\n+---------------+-----------------+\n|     Tools     |      Result     |\n+===============+=================+\n|     Codacy    |    |codacy|     |\n+---------------+-----------------+\n|     Coverage  |   |coverage|    |\n+---------------+-----------------+\n\n.. |codacy| image:: https://api.codacy.com/project/badge/Grade/621acf3309b24c538c40824f9af467de\n   :target: https://www.codacy.com/app/AdrienPensart/musicbot?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=AdrienPensart/musicbot&amp;utm_campaign=Badge_Grade\n   :alt: Codacy badge\n.. |coverage| image:: https://github.com/AdrienPensart/musicbot/blob/master/doc/coverage.svg\n   :alt: Coverage badge\n\nDescription\n-----------\nCLI / API / Website to manipulate music and create smart playlists, and play it !\n\nIt uses poetry and pyenv tools to manage project life and docker to test it.\n\nUnder the hood, there is a postgraphile API frontend backed by a postgresql database, it allow us\nto have users and security integrated.\n\nDev Environment\n---------------\n\n.. code-block:: bash\n\n  sudo apt install -y vlc libtag1-dev postgresql-server-dev-all ffmpeg python3-pip docker.io libchromaprint-tools libbz2-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev tk-dev liblzma-dev libssl-dev libreadline-dev\n  sudo usermod -aG docker $(whoami)\n\n  git clone https://github.com/AdrienPensart/musicbot.git\n  cd musicbot\n\n  https://pyenv.run | bash\n  pyenv install --verbose $(cat .python-version) -ks\n  pyenv global $(cat .python-version)\n\n  # you should put that at your shell startup\n  eval \"$(pyenv init -)\"\n\n  python <(curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py)\n  poetry install\n\nTesting\n------------\n\n.. code-block:: bash\n\n  poetry run pytest\n  poetry run coverage-badge -f -o doc/coverage.svg\n\nHow to use\n------------\n\n.. code-block:: bash\n\n  poetry run docker-compose build --parallel\n  poetry run docker-compose up\n  musicbot user create --email your_email --password your_password --save\n  musicbot local scan /tests/fixtures/folder1 /tests/fixtures/folder2\n  musicbot local tracks\n\nLinting\n------------\n\n.. code-block:: bash\n\n  poetry run pylint musicbot tests\n\nDocumentation\n-------------\n\n.. code-block:: bash\n\n  poetry run rstcheck doc/help.rst\n  poetry run doc/gen.sh\n  poetry run rstcheck README.rst\n\nCommands\n--------\n.. code-block::\n\n  Usage: musicbot [OPTIONS] COMMAND [ARGS]...\n  \n    Music swiss knife, new gen.\n  \n  Options:\n    -V, --version                                       Show the version and exit.\n    -c, --config PATH                                   Config file path  [default: ~/musicbot.ini]\n    -l, --log PATH                                      Log file path\n    -i, --info                                          Same as \"--verbosity info\"\n    -d, --debug                                         Be very verbose, same as \"--verbosity debug\" + hide progress bars  [default: False]\n    -t, --timings                                       Set verbosity to info and show execution timings  [default: False]\n    -v, --verbosity [debug|info|warning|error|critical]\n                                                        Verbosity levels  [default: warning]\n    -q, --quiet                                         Disable progress bars  [default: False]\n    -h, --help                                          Show this message and exit.\n  \n  Commands:\n    completion  Shell completion\n    folder      Manage folders\n    help        Print help\n    local       Local music management\n    music       Music file\n    spotify     Spotify tool\n    user        User management\n    version     Print version\n    youtube     Youtube tool\n\n\nmusicbot completion\n*******************\n.. code-block::\n\n  Usage: musicbot completion [OPTIONS] COMMAND [ARGS]...\n  \n    Shell completion\n  \n  Options:\n    -h, --help  Show this message and exit.\n  \n  Commands:\n    help     Print help\n    install  Install the click-completion-command completion\n    show     Show the click-completion-command completion code\n\n\nmusicbot completion install\n***************************\n.. code-block::\n\n  Usage: musicbot completion install [OPTIONS] [[bash|fish|zsh|powershell]] [PATH]\n  \n    Install the click-completion-command completion\n  \n  Options:\n    --append / --overwrite                          Append the completion code to the file\n    -i, --case-insensitive / --no-case-insensitive  Case insensitive completion\n    -h, --help                                      Show this message and exit.\n\n\nmusicbot completion show\n************************\n.. code-block::\n\n  Usage: musicbot completion show [OPTIONS] [[bash|fish|zsh|powershell]]\n  \n    Show the click-completion-command completion code\n  \n  Options:\n    -i, --case-insensitive / --no-case-insensitive  Case insensitive completion\n    -h, --help                                      Show this message and exit.\n\n\nmusicbot folder\n***************\n.. code-block::\n\n  Usage: musicbot folder [OPTIONS] COMMAND [ARGS]...\n  \n    Manage folders\n  \n  Options:\n    -h, --help  Show this message and exit.\n  \n  Commands:\n    check-consistency  Check music files consistency\n    flac2mp3           Convert all files in folders to mp3\n    help               Print help\n    tracks             List tracks\n\n\nmusicbot folder check-consistency\n*********************************\n.. code-block::\n\n  Usage: musicbot folder check-consistency [OPTIONS] [FOLDERS]...\n  \n    Check music files consistency\n  \n  Options:\n    --checks [no-title|invalid-title|bad-comment|invalid-artist|no-genre|no-album|no-artist|no-rating|invalid-track-number]\n                                                        Consistency tests  [default: no-title, bad-comment, invalid-artist, no-genre, no-\n                                                        album, no-artist, no-rating, invalid-track-number]\n  \n    -h, --help                                          Show this message and exit.\n\n\nmusicbot folder flac2mp3\n************************\n.. code-block::\n\n  Usage: musicbot folder flac2mp3 [OPTIONS] [FOLDERS]...\n  \n    Convert all files in folders to mp3\n  \n  Options:\n    --concurrency INTEGER  Number of coroutines  [default: 8]\n    --dry                  Take no real action  [default: False]\n    -h, --help             Show this message and exit.\n\n\nmusicbot folder tracks\n**********************\n.. code-block::\n\n  Usage: musicbot folder tracks [OPTIONS] [FOLDERS]...\n  \n    List tracks\n  \n  Options:\n    --output [table|json]  Output format  [default: table]\n    -h, --help             Show this message and exit.\n\n\nmusicbot help\n*************\n.. code-block::\n\n  Usage: musicbot help [OPTIONS] [COMMAND]...\n  \n    Print help\n  \n  Options:\n    -h, --help  Show this message and exit.\n\n\nmusicbot local\n**************\n.. code-block::\n\n  Usage: musicbot local [OPTIONS] COMMAND [ARGS]...\n  \n    Local music management\n  \n  Options:\n    -h, --help  Show this message and exit.\n  \n  Commands:\n    bests          Generate bests playlists with some rules\n    clean          Clean all musics\n    execute        Raw query\n    filter         Print a filter\n    filters        List filters\n    find           Just list music files\n    folders        List folders\n    help           Print help\n    load-filters   Load default filters\n    player (play)  Music player\n    playlist       Generate a new playlist\n    scan           (re)Load musics\n    stats (stat)   Generate some stats for music collection with filters\n    sync           Copy selected musics with filters to destination folder\n    watch          Watch files changes in folders\n\n\nmusicbot local bests\n********************\n.. code-block::\n\n  Usage: musicbot local bests [OPTIONS] PATH\n  \n    Generate bests playlists with some rules\n  \n  Options:\n    -e, --email TEXT        User email\n    -p, --password TEXT     User password\n    --graphql TEXT          GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT        User token\n    --dry                   Take no real action  [default: False]\n    --name TEXT             Filter name\n    --limit INTEGER         Fetch a maximum limit of music\n    --youtubes TEXT         Select musics with a youtube link\n    --no-youtubes TEXT      Select musics without youtube link\n    --spotifys TEXT         Select musics with a spotifys link\n    --no-spotifys TEXT      Select musics without spotifys link\n    --formats TEXT          Select musics with file format\n    --no-formats TEXT       Filter musics without format\n    --keywords TEXT         Select musics with keywords\n    --no-keywords TEXT      Filter musics without keywords\n    --artists TEXT          Select musics with artists\n    --no-artists TEXT       Filter musics without artists\n    --albums TEXT           Select musics with albums\n    --no-albums TEXT        Filter musics without albums\n    --titles TEXT           Select musics with titles\n    --no-titles TEXT        Filter musics without titless\n    --genres TEXT           Select musics with genres\n    --no-genres TEXT        Filter musics without genres\n    --min-duration INTEGER  Minimum duration filter (hours:minutes:seconds)\n    --max-duration INTEGER  Maximum duration filter (hours:minutes:seconds))\n    --min-size INTEGER      Minimum file size filter (in bytes)\n    --max-size INTEGER      Maximum file size filter (in bytes)\n    --min-rating FLOAT      Minimum rating  [default: 0.0]\n    --max-rating FLOAT      Maximum rating  [default: 5.0]\n    --relative              Generate relatives paths\n    --shuffle               Randomize selection\n    --prefix TEXT           Append prefix before each path (implies relative)\n    --suffix TEXT           Append this suffix to playlist name\n    -h, --help              Show this message and exit.\n\n\nmusicbot local clean\n********************\n.. code-block::\n\n  Usage: musicbot local clean [OPTIONS]\n  \n    Clean all musics\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT     User token\n    -h, --help           Show this message and exit.\n\n\nmusicbot local execute\n**********************\n.. code-block::\n\n  Usage: musicbot local execute [OPTIONS] QUERY\n  \n    Raw query\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT     User token\n    -h, --help           Show this message and exit.\n\n\nmusicbot local filter\n*********************\n.. code-block::\n\n  Usage: musicbot local filter [OPTIONS] NAME\n  \n    Print a filter\n  \n  Options:\n    -e, --email TEXT       User email\n    -p, --password TEXT    User password\n    --graphql TEXT         GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT       User token\n    --output [table|json]  Output format  [default: table]\n    -h, --help             Show this message and exit.\n\n\nmusicbot local filters\n**********************\n.. code-block::\n\n  Usage: musicbot local filters [OPTIONS]\n  \n    List filters\n  \n  Options:\n    -e, --email TEXT       User email\n    -p, --password TEXT    User password\n    --graphql TEXT         GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT       User token\n    --output [table|json]  Output format  [default: table]\n    -h, --help             Show this message and exit.\n\n\nmusicbot local find\n*******************\n.. code-block::\n\n  Usage: musicbot local find [OPTIONS] [FOLDERS]...\n  \n    Just list music files\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT     User token\n    -h, --help           Show this message and exit.\n\n\nmusicbot local folders\n**********************\n.. code-block::\n\n  Usage: musicbot local folders [OPTIONS]\n  \n    List folders\n  \n  Options:\n    -e, --email TEXT       User email\n    -p, --password TEXT    User password\n    --graphql TEXT         GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT       User token\n    --output [table|json]  Output format  [default: table]\n    -h, --help             Show this message and exit.\n\n\nmusicbot local load-filters\n***************************\n.. code-block::\n\n  Usage: musicbot local load-filters [OPTIONS]\n  \n    Load default filters\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT     User token\n    -h, --help           Show this message and exit.\n\n\nmusicbot local player\n*********************\n.. code-block::\n\n  Usage: musicbot local player [OPTIONS]\n  \n    Music player\n  \n  Options:\n    -e, --email TEXT        User email\n    -p, --password TEXT     User password\n    --graphql TEXT          GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT        User token\n    --name TEXT             Filter name\n    --limit INTEGER         Fetch a maximum limit of music\n    --youtubes TEXT         Select musics with a youtube link\n    --no-youtubes TEXT      Select musics without youtube link\n    --spotifys TEXT         Select musics with a spotifys link\n    --no-spotifys TEXT      Select musics without spotifys link\n    --formats TEXT          Select musics with file format\n    --no-formats TEXT       Filter musics without format\n    --keywords TEXT         Select musics with keywords\n    --no-keywords TEXT      Filter musics without keywords\n    --artists TEXT          Select musics with artists\n    --no-artists TEXT       Filter musics without artists\n    --albums TEXT           Select musics with albums\n    --no-albums TEXT        Filter musics without albums\n    --titles TEXT           Select musics with titles\n    --no-titles TEXT        Filter musics without titless\n    --genres TEXT           Select musics with genres\n    --no-genres TEXT        Filter musics without genres\n    --min-duration INTEGER  Minimum duration filter (hours:minutes:seconds)\n    --max-duration INTEGER  Maximum duration filter (hours:minutes:seconds))\n    --min-size INTEGER      Minimum file size filter (in bytes)\n    --max-size INTEGER      Maximum file size filter (in bytes)\n    --min-rating FLOAT      Minimum rating  [default: 0.0]\n    --max-rating FLOAT      Maximum rating  [default: 5.0]\n    --relative              Generate relatives paths\n    --shuffle               Randomize selection\n    -h, --help              Show this message and exit.\n\n\nmusicbot local playlist\n***********************\n.. code-block::\n\n  Usage: musicbot local playlist [OPTIONS] [PATH]\n  \n    Generate a new playlist\n  \n  Options:\n    -e, --email TEXT           User email\n    -p, --password TEXT        User password\n    --graphql TEXT             GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT           User token\n    --dry                      Take no real action  [default: False]\n    --name TEXT                Filter name\n    --limit INTEGER            Fetch a maximum limit of music\n    --youtubes TEXT            Select musics with a youtube link\n    --no-youtubes TEXT         Select musics without youtube link\n    --spotifys TEXT            Select musics with a spotifys link\n    --no-spotifys TEXT         Select musics without spotifys link\n    --formats TEXT             Select musics with file format\n    --no-formats TEXT          Filter musics without format\n    --keywords TEXT            Select musics with keywords\n    --no-keywords TEXT         Filter musics without keywords\n    --artists TEXT             Select musics with artists\n    --no-artists TEXT          Filter musics without artists\n    --albums TEXT              Select musics with albums\n    --no-albums TEXT           Filter musics without albums\n    --titles TEXT              Select musics with titles\n    --no-titles TEXT           Filter musics without titless\n    --genres TEXT              Select musics with genres\n    --no-genres TEXT           Filter musics without genres\n    --min-duration INTEGER     Minimum duration filter (hours:minutes:seconds)\n    --max-duration INTEGER     Maximum duration filter (hours:minutes:seconds))\n    --min-size INTEGER         Minimum file size filter (in bytes)\n    --max-size INTEGER         Maximum file size filter (in bytes)\n    --min-rating FLOAT         Minimum rating  [default: 0.0]\n    --max-rating FLOAT         Maximum rating  [default: 5.0]\n    --relative                 Generate relatives paths\n    --shuffle                  Randomize selection\n    --output [json|m3u|table]  Output format  [default: table]\n    -h, --help                 Show this message and exit.\n\n\nmusicbot local scan\n*******************\n.. code-block::\n\n  Usage: musicbot local scan [OPTIONS] [FOLDERS]...\n  \n    (re)Load musics\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT     User token\n    -h, --help           Show this message and exit.\n\n\nmusicbot local stats\n********************\n.. code-block::\n\n  Usage: musicbot local stats [OPTIONS]\n  \n    Generate some stats for music collection with filters\n  \n  Options:\n    -e, --email TEXT        User email\n    -p, --password TEXT     User password\n    --graphql TEXT          GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT        User token\n    --output [table|json]   Output format  [default: table]\n    --name TEXT             Filter name\n    --limit INTEGER         Fetch a maximum limit of music\n    --youtubes TEXT         Select musics with a youtube link\n    --no-youtubes TEXT      Select musics without youtube link\n    --spotifys TEXT         Select musics with a spotifys link\n    --no-spotifys TEXT      Select musics without spotifys link\n    --formats TEXT          Select musics with file format\n    --no-formats TEXT       Filter musics without format\n    --keywords TEXT         Select musics with keywords\n    --no-keywords TEXT      Filter musics without keywords\n    --artists TEXT          Select musics with artists\n    --no-artists TEXT       Filter musics without artists\n    --albums TEXT           Select musics with albums\n    --no-albums TEXT        Filter musics without albums\n    --titles TEXT           Select musics with titles\n    --no-titles TEXT        Filter musics without titless\n    --genres TEXT           Select musics with genres\n    --no-genres TEXT        Filter musics without genres\n    --min-duration INTEGER  Minimum duration filter (hours:minutes:seconds)\n    --max-duration INTEGER  Maximum duration filter (hours:minutes:seconds))\n    --min-size INTEGER      Minimum file size filter (in bytes)\n    --max-size INTEGER      Maximum file size filter (in bytes)\n    --min-rating FLOAT      Minimum rating  [default: 0.0]\n    --max-rating FLOAT      Maximum rating  [default: 5.0]\n    --relative              Generate relatives paths\n    --shuffle               Randomize selection\n    -h, --help              Show this message and exit.\n\n\nmusicbot local sync\n*******************\n.. code-block::\n\n  Usage: musicbot local sync [OPTIONS] DESTINATION\n  \n    Copy selected musics with filters to destination folder\n  \n  Options:\n    -e, --email TEXT        User email\n    -p, --password TEXT     User password\n    --graphql TEXT          GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT        User token\n    --dry                   Take no real action  [default: False]\n    --name TEXT             Filter name\n    --limit INTEGER         Fetch a maximum limit of music\n    --youtubes TEXT         Select musics with a youtube link\n    --no-youtubes TEXT      Select musics without youtube link\n    --spotifys TEXT         Select musics with a spotifys link\n    --no-spotifys TEXT      Select musics without spotifys link\n    --formats TEXT          Select musics with file format\n    --no-formats TEXT       Filter musics without format\n    --keywords TEXT         Select musics with keywords\n    --no-keywords TEXT      Filter musics without keywords\n    --artists TEXT          Select musics with artists\n    --no-artists TEXT       Filter musics without artists\n    --albums TEXT           Select musics with albums\n    --no-albums TEXT        Filter musics without albums\n    --titles TEXT           Select musics with titles\n    --no-titles TEXT        Filter musics without titless\n    --genres TEXT           Select musics with genres\n    --no-genres TEXT        Filter musics without genres\n    --min-duration INTEGER  Minimum duration filter (hours:minutes:seconds)\n    --max-duration INTEGER  Maximum duration filter (hours:minutes:seconds))\n    --min-size INTEGER      Minimum file size filter (in bytes)\n    --max-size INTEGER      Maximum file size filter (in bytes)\n    --min-rating FLOAT      Minimum rating  [default: 0.0]\n    --max-rating FLOAT      Maximum rating  [default: 5.0]\n    --relative              Generate relatives paths\n    --shuffle               Randomize selection\n    -h, --help              Show this message and exit.\n\n\nmusicbot local watch\n********************\n.. code-block::\n\n  Usage: musicbot local watch [OPTIONS]\n  \n    Watch files changes in folders\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT     User token\n    -h, --help           Show this message and exit.\n\n\nmusicbot music\n**************\n.. code-block::\n\n  Usage: musicbot music [OPTIONS] COMMAND [ARGS]...\n  \n    Music file\n  \n  Options:\n    -h, --help  Show this message and exit.\n  \n  Commands:\n    fingerprint  Print music fingerprint\n    help         Print help\n\n\nmusicbot music fingerprint\n**************************\n.. code-block::\n\n  Usage: musicbot music fingerprint [OPTIONS] PATH\n  \n    Print music fingerprint\n  \n  Options:\n    --acoustid-api-key TEXT  AcoustID API Key\n    -h, --help               Show this message and exit.\n\n\nmusicbot spotify\n****************\n.. code-block::\n\n  Usage: musicbot spotify [OPTIONS] COMMAND [ARGS]...\n  \n    Spotify tool\n  \n  Options:\n    -h, --help  Show this message and exit.\n  \n  Commands:\n    diff       Diff between local and spotify\n    help       Print help\n    playlist   Show playlist\n    playlists  List playlists\n    tracks     Show tracks\n\n\nmusicbot spotify diff\n*********************\n.. code-block::\n\n  Usage: musicbot spotify diff [OPTIONS]\n  \n    Diff between local and spotify\n  \n  Options:\n    -e, --email TEXT      User email\n    -p, --password TEXT   User password\n    --graphql TEXT        GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT      User token\n    --username TEXT       Spotify username\n    --client-id TEXT      Spotify client ID\n    --client-secret TEXT  Spotify client secret\n    --token TEXT          Spotify token\n    --cache-path TEXT     Spotify cache path\n    --scopes TEXT         Spotify scopes\n    --redirect-uri TEXT   Spotify redirect URI\n    -h, --help            Show this message and exit.\n\n\nmusicbot spotify playlist\n*************************\n.. code-block::\n\n  Usage: musicbot spotify playlist [OPTIONS] NAME\n  \n    Show playlist\n  \n  Options:\n    --username TEXT       Spotify username\n    --client-id TEXT      Spotify client ID\n    --client-secret TEXT  Spotify client secret\n    --token TEXT          Spotify token\n    --cache-path TEXT     Spotify cache path\n    --scopes TEXT         Spotify scopes\n    --redirect-uri TEXT   Spotify redirect URI\n    -h, --help            Show this message and exit.\n\n\nmusicbot spotify playlists\n**************************\n.. code-block::\n\n  Usage: musicbot spotify playlists [OPTIONS]\n  \n    List playlists\n  \n  Options:\n    --username TEXT       Spotify username\n    --client-id TEXT      Spotify client ID\n    --client-secret TEXT  Spotify client secret\n    --token TEXT          Spotify token\n    --cache-path TEXT     Spotify cache path\n    --scopes TEXT         Spotify scopes\n    --redirect-uri TEXT   Spotify redirect URI\n    -h, --help            Show this message and exit.\n\n\nmusicbot spotify tracks\n***********************\n.. code-block::\n\n  Usage: musicbot spotify tracks [OPTIONS]\n  \n    Show tracks\n  \n  Options:\n    --username TEXT        Spotify username\n    --client-id TEXT       Spotify client ID\n    --client-secret TEXT   Spotify client secret\n    --token TEXT           Spotify token\n    --cache-path TEXT      Spotify cache path\n    --scopes TEXT          Spotify scopes\n    --redirect-uri TEXT    Spotify redirect URI\n    --output [table|json]  Output format  [default: table]\n    -h, --help             Show this message and exit.\n\n\nmusicbot user\n*************\n.. code-block::\n\n  Usage: musicbot user [OPTIONS] COMMAND [ARGS]...\n  \n    User management\n  \n  Options:\n    -h, --help  Show this message and exit.\n  \n  Commands:\n    help                        Print help\n    list                        List users (admin)\n    login (token)               Authenticate user\n    register (add,create,new)   Register a new user\n    unregister (delete,remove)  Remove a user\n\n\nmusicbot user list\n******************\n.. code-block::\n\n  Usage: musicbot user list [OPTIONS]\n  \n    List users (admin)\n  \n  Options:\n    --output [table|json]  Output format  [default: table]\n    --graphql-admin TEXT   GraphQL endpoint  [default: http://127.0.0.1:5001/graphql]\n    -h, --help             Show this message and exit.\n\n\nmusicbot user login\n*******************\n.. code-block::\n\n  Usage: musicbot user login [OPTIONS]\n  \n    Authenticate user\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -s, --save           Save to config file  [default: False]\n    -h, --help           Show this message and exit.\n\n\nmusicbot user register\n**********************\n.. code-block::\n\n  Usage: musicbot user register [OPTIONS]\n  \n    Register a new user\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --first-name TEXT    User first name\n    --last-name TEXT     User last name\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -s, --save           Save to config file  [default: False]\n    -h, --help           Show this message and exit.\n\n\nmusicbot user unregister\n************************\n.. code-block::\n\n  Usage: musicbot user unregister [OPTIONS]\n  \n    Remove a user\n  \n  Options:\n    -e, --email TEXT     User email\n    -p, --password TEXT  User password\n    --graphql TEXT       GraphQL endpoint  [default: http://127.0.0.1:5000/graphql]\n    -t, --token TEXT     User token\n    -h, --help           Show this message and exit.\n\n\nmusicbot version\n****************\n.. code-block::\n\n  Usage: musicbot version [OPTIONS]\n  \n    Print version\n  \n    Equivalent : -V\n  \n  Options:\n    -h, --help  Show this message and exit.\n\n\nmusicbot youtube\n****************\n.. code-block::\n\n  Usage: musicbot youtube [OPTIONS] COMMAND [ARGS]...\n  \n    Youtube tool\n  \n  Options:\n    -h, --help  Show this message and exit.\n  \n  Commands:\n    download     Download a youtube link with artist and title\n    find         Search a youtube link with artist and title\n    fingerprint  Fingerprint a youtube video\n    help         Print help\n    search       Search a youtube link with artist and title\n\n\nmusicbot youtube download\n*************************\n.. code-block::\n\n  Usage: musicbot youtube download [OPTIONS] ARTIST TITLE\n  \n    Download a youtube link with artist and title\n  \n  Options:\n    --path TEXT\n    -h, --help   Show this message and exit.\n\n\nmusicbot youtube find\n*********************\n.. code-block::\n\n  Usage: musicbot youtube find [OPTIONS] PATH\n  \n    Search a youtube link with artist and title\n  \n  Options:\n    --acoustid-api-key TEXT  AcoustID API Key\n    -h, --help               Show this message and exit.\n\n\nmusicbot youtube fingerprint\n****************************\n.. code-block::\n\n  Usage: musicbot youtube fingerprint [OPTIONS] URL\n  \n    Fingerprint a youtube video\n  \n  Options:\n    --acoustid-api-key TEXT  AcoustID API Key\n    -h, --help               Show this message and exit.\n\n\nmusicbot youtube search\n***********************\n.. code-block::\n\n  Usage: musicbot youtube search [OPTIONS] ARTIST TITLE\n  \n    Search a youtube link with artist and title\n  \n  Options:\n    -h, --help  Show this message and exit.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "musicbot", "package_url": "https://pypi.org/project/musicbot/", "platform": "", "project_url": "https://pypi.org/project/musicbot/", "project_urls": null, "release_url": "https://pypi.org/project/musicbot/0.2.2/", "requires_dist": null, "requires_python": "==3.*,>=3.7.0", "summary": "Music swiss army knife", "version": "0.2.2"}, "last_serial": 7028987, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "37144c2d3bffe7f7efd7456762afc439", "sha256": "34aa226c9ca165bea31d4747fc5c13f58ba4c92f9eaef678a9b23cb987718beb"}, "downloads": -1, "filename": "musicbot-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37144c2d3bffe7f7efd7456762afc439", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<3.7", "size": 148071, "upload_time": "2018-09-13T01:23:42", "upload_time_iso_8601": "2018-09-13T01:23:42.699268Z", "url": "https://files.pythonhosted.org/packages/e9/7d/980f6394a86909dc1745971f1257e71ea33e5b00601188fe30a61e330088/musicbot-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "74a621abe19cb9cba1ed71bb3c2309ec", "sha256": "c72e27c2074837f5873959ad8f52bf0891f41020f2a74b647f3cda6971837f88"}, "downloads": -1, "filename": "musicbot-0.0.1.tar.gz", "has_sig": false, "md5_digest": "74a621abe19cb9cba1ed71bb3c2309ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<3.7", "size": 42438, "upload_time": "2018-09-13T01:23:44", "upload_time_iso_8601": "2018-09-13T01:23:44.058634Z", "url": "https://files.pythonhosted.org/packages/a0/45/8702833253c1ad340d4ae49ddd4648d25e1315d3f5b29e44e67a3449f0ea/musicbot-0.0.1.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7e9d331b224604b7cff9267cabdad5fd", "sha256": "995586469035770ae3822b47f1696c368ce8d99239398eec9c77dcb4520cba9e"}, "downloads": -1, "filename": "musicbot-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7e9d331b224604b7cff9267cabdad5fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 42823, "upload_time": "2020-04-10T01:06:25", "upload_time_iso_8601": "2020-04-10T01:06:25.400899Z", "url": "https://files.pythonhosted.org/packages/e5/42/f7b8628a5e9c9c34cec0445e9be7175a824785ff3ce20f0acebb42128e51/musicbot-0.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "58f586dfc970552e6c29ee0ee3dd4f0b", "sha256": "4b19826243e9736ad97f309ab588ec51f325a1bac6847d230e8c28279cafa475"}, "downloads": -1, "filename": "musicbot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "58f586dfc970552e6c29ee0ee3dd4f0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 38227, "upload_time": "2020-04-10T01:06:26", "upload_time_iso_8601": "2020-04-10T01:06:26.881889Z", "url": "https://files.pythonhosted.org/packages/55/c4/1c76e1af17a53af756ac725e01e69c5c151fdb8d0c218374d39998fc4a7c/musicbot-0.2.0.tar.gz"}], "0.2.2": [{"comment_text": "", "digests": {"md5": "78c5a5c817fff2b498a6fadeaf41c24a", "sha256": "3c20bca8f61126e391768ae235e6201e528c6fb624376b6dccdb77170115acb3"}, "downloads": -1, "filename": "musicbot-0.2.2.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "78c5a5c817fff2b498a6fadeaf41c24a", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.*,>=3.7.0", "size": 73475, "upload_time": "2020-04-16T02:45:55", "upload_time_iso_8601": "2020-04-16T02:45:55.022934Z", "url": "https://files.pythonhosted.org/packages/ff/e6/5cba0a6732f66f463812fed083f121d1c3d9a94d7773b3f3c5247687504c/musicbot-0.2.2.linux-x86_64.tar.gz"}, {"comment_text": "", "digests": {"md5": "8c44e3a9b86b2ad9c93aa9626d9b8e6c", "sha256": "7a4f1112553c0085386a8427566506e8e301d9b71990328972283a8a8570b5f3"}, "downloads": -1, "filename": "musicbot-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8c44e3a9b86b2ad9c93aa9626d9b8e6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.*,>=3.7.0", "size": 46089, "upload_time": "2020-04-16T02:53:19", "upload_time_iso_8601": "2020-04-16T02:53:19.627227Z", "url": "https://files.pythonhosted.org/packages/6c/18/4e55848ca590559dbdf29618f7acee7a90507c7479c77f5727bb5188a286/musicbot-0.2.2-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "78c5a5c817fff2b498a6fadeaf41c24a", "sha256": "3c20bca8f61126e391768ae235e6201e528c6fb624376b6dccdb77170115acb3"}, "downloads": -1, "filename": "musicbot-0.2.2.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "78c5a5c817fff2b498a6fadeaf41c24a", "packagetype": "sdist", "python_version": "source", "requires_python": "==3.*,>=3.7.0", "size": 73475, "upload_time": "2020-04-16T02:45:55", "upload_time_iso_8601": "2020-04-16T02:45:55.022934Z", "url": "https://files.pythonhosted.org/packages/ff/e6/5cba0a6732f66f463812fed083f121d1c3d9a94d7773b3f3c5247687504c/musicbot-0.2.2.linux-x86_64.tar.gz"}, {"comment_text": "", "digests": {"md5": "8c44e3a9b86b2ad9c93aa9626d9b8e6c", "sha256": "7a4f1112553c0085386a8427566506e8e301d9b71990328972283a8a8570b5f3"}, "downloads": -1, "filename": "musicbot-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8c44e3a9b86b2ad9c93aa9626d9b8e6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "==3.*,>=3.7.0", "size": 46089, "upload_time": "2020-04-16T02:53:19", "upload_time_iso_8601": "2020-04-16T02:53:19.627227Z", "url": "https://files.pythonhosted.org/packages/6c/18/4e55848ca590559dbdf29618f7acee7a90507c7479c77f5727bb5188a286/musicbot-0.2.2-py3-none-any.whl"}]}