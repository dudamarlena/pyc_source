{"info": {"author": "Adrien Ehrhardt", "author_email": "adrien.ehrhardt@centraliens-lille.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# Supervised multivariate discretization and factor levels merging for logistic regression\n\nCredit institutions are interested in the refunding probability of a loan given the applicant\u2019s characteristics in order to assess the worthiness of the credit. For regulatory and interpretability reasons, the logistic regression is still widely used to learn this probability from the data. Although logistic regression handles naturally both quantitative and qualitative data, three pre-processing steps are usually performed: firstly, continuous features are discretized by assigning factor levels to pre-determined intervals; secondly, qualitative features, if they take numerous values, are grouped; thirdly, interactions (products between two different predictors) are sparsely introduced. By reinterpreting discretized (resp. grouped) features as latent variables, we are able, through the use of a Stochastic Expectation-Maximization (SEM) algorithm and a Gibbs sampler to find the best discretization (resp. grouping) scheme w.r.t. the logistic regression loss. For detecting interacting features, the same scheme is used by replacing the Gibbs sampler by a Metropolis-Hastings algorithm. The good performances of this approach are illustrated on simulated and real data from Credit Agricole Consumer Finance.\n\n## Getting started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\nThis code is supported on Python 3.\n\nAs specified by the setup file, this package requires you to have packages sklearn, numpy, scipy, math, warnings and collections. For instructions on how to install these, please refer to their respective documentation.\n\n### Installing the package\n\n#### Installing the development version\n\nIf `git` is installed on your machine, you can use:\n\n```PowerShell\npip install git+https://github.com/jkbr/httpie.git\n```\n\nIf `git` is not installed, you can also use:\n\n```PowerShell\npip install --upgrade https://github.com/adimajo/glmdisc_python/archive/master.tar.gz\n```\n\n#### Installing through the `pip` command\n\nYou can install a stable version from [PyPi](https://pypi.org/project/glmdisc/) by using:\n\n```PowerShell\npip install glmdisc\n```\n\n#### Installation guide for Anaconda\n\nThe installation with the `pip` command **should** work. If not, please raise an issue.\n\n#### For people behind proxy(ies)...\n\nA lot of people, including myself, work behind a proxy at work...\n\nA simple solution to get the package is to use the `--proxy` option of `pip`:\n\n```PowerShell\npip --proxy=http://username:password@server:port install glmdisc\n```\n\nwhere *username*, *password*, *server* and *port* should be replaced by your own values.\n\n\n**What follows is a quick introduction to the problem of discretization and how this package answers the question.**\n\n**If you wish to see the package in action, please refer to the accompanying Jupyter Notebook.**\n\n**If you seek specific assistance regarding the package or one of its function, please refer to the ReadTheDocs.**\n\n\n\n## Use case example\n\nIn practice, the statistical modeler has historical data about each customer's characteristics. For obvious reasons, only data available at the time of inquiry must be used to build a future application scorecard. Those data often take the form of a well-structured table with one line per client alongside their performance (did they pay back their loan or not?) as can be seen in the following table:\n\n| Job | Habitation | Time in job | Children | Family status | Default |\n| --- | --- | --- | --- | --- | --- |\n| Craftsman | Owner | 10 | 0 | Divorced |  No |\n| Technician | Renter | 20 | 1 | Widower | No |\n| Executive | Starter | 5 | 2 | Single |  Yes |\n| Office employee | By family | 2 | 3 |\u00a0Married | No |\n\n## Notations\n\nIn the rest of the vignette, the random vector <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;$X=(X^j)_1^d$\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;$X=(X^j)_1^d$\" title=\"$X=(X^j)_1^d$\" /></a>  will designate the predictive features, i.e. the characteristics of a client. The random variable <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y&space;\\in&space;\\{0,1\\}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y&space;\\in&space;\\{0,1\\}\" title=\"Y \\in \\{0,1\\}\" /></a>  will designate the label, i.e. if the client has defaulted (<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y=1\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y=1\" title=\"Y=1\" /></a>) or not (<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y=0\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y=0\" title=\"Y=0\" /></a>).\n\nWe are provided with an i.i.d. sample <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;(\\bar{x},\\bar{y})&space;=&space;(x_i,y_i)_1^n\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;(\\bar{x},\\bar{y})&space;=&space;(x_i,y_i)_1^n\" title=\"(\\bar{x},\\bar{y}) = (x_i,y_i)_1^n\" /></a> consisting in <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;n\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;n\" title=\"n\" /></a> observations of <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X\" title=\"X\" /></a> and <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y\" title=\"Y\" /></a>.\n\n## Logistic regression\n\nThe logistic regression model assumes the following relation between <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X\" title=\"X\" /></a> and <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y\" title=\"Y\" /></a> :\n\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\ln&space;\\left(&space;\\frac{p_\\theta(Y=1|x)}{p_\\theta(Y=0|x)}&space;\\right)&space;=&space;\\theta_0&space;&plus;&space;\\sum_{j=1}^d&space;\\theta_j*x^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\ln&space;\\left(&space;\\frac{p_\\theta(Y=1|x)}{p_\\theta(Y=0|x)}&space;\\right)&space;=&space;\\theta_0&space;&plus;&space;\\sum_{j=1}^d&space;\\theta_j*x^j\" title=\"\\ln \\left( \\frac{p_\\theta(Y=1|x)}{p_\\theta(Y=0|x)} \\right) = \\theta_0 + \\sum_{j=1}^d \\theta_j*x^j\" /></a>\n\nwhere <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;\\theta&space;=&space;(\\theta_j)_0^d\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\theta&space;=&space;(\\theta_j)_0^d\" title=\"\\theta = (\\theta_j)_0^d\" /></a> are estimated using <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;(\\bar{x},\\bar{y})\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;(\\bar{x},\\bar{y})\" title=\"(\\bar{x},\\bar{y})\" /></a>.\n\nClearly, the model assumes linearity of the logit transform of the response <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y\" title=\"Y\" /></a> with respect to <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X\" title=\"X\" /></a>.\n\n## Common problems with logistic regression on \"raw\" data\n\nFitting a logistic regression model on \"raw\" data presents several problems, among which some are tackled here.\n\n### Feature selection\n\nFirst, among all collected information on individuals, some are irrelevant for predicting <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y\" title=\"Y\" /></a>. Their coefficient <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;\\theta_j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\theta_j\" title=\"\\theta_j\" /></a> should be 0  which might (eventually) be the case asymptotically (i.e. <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;$n&space;\\rightarrow&space;\\infty$\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;$n&space;\\rightarrow&space;\\infty$\" title=\"$n \\rightarrow \\infty$\" /></a>).\n\nSecond, some collected information are highly correlated and affect each other's coefficient estimation.\n\nAs a consequence, data scientists often perform feature selection before training a machine learning algorithm such as logistic regression.\n\nThere already exists methods and packages to perform feature selection, see for example the `feature_selection` submodule in the `scklearn` package.\n\n`glmdisc` is not a feature selection tool but acts as such as a side-effect: when a continuous feature is discretized into only one interval, or when a categorical feature is regrouped into only one value, then this feature gets out of the model.\n\nFor a thorough reference on feature selection, see e.g. Guyon, I., & Elisseeff, A. (2003). An introduction to variable and feature selection. *Journal of machine learning research, 3*(Mar), 1157-1182.\n\n### Linearity \n\nWhen provided with continuous features, the logistic regression model assumes linearity of the logit transform of the response <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y\" title=\"Y\" /></a> with respect to <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X\" title=\"X\" /></a>. This might not be the case at all.\n\nFor example, we can simulate a logistic model with an arbitrary power of <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X\" title=\"X\" /></a> and then try to fit a linear logistic model:\n\n- [ ] Show the Python code\n\n- [ ] Get this graph online\n\nOf course, providing the `sklearn.linear_model.LogisticRegression` function with a dataset containing <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X^5\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X^5\" title=\"X^5\" /></a> would solve the problem. This can't be done in practice for two reasons: first, it is too time-consuming to examine all features and candidate polynomials; second, we lose the interpretability of the logistic decision function which was of primary interest.\n\nConsequently, we wish to discretize the input variable <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X\" title=\"X\" /></a> into a categorical feature which will \"minimize\" the error with respect to the \"true\" underlying relation:\n\n- [ ] Show the Python code\n\n- [ ] Get this graph online\n\n\n### Too many values per categorical feature\n\nWhen provided with categorical features, the logistic regression model fits a coefficient for all its values (except one which is taken as a reference). A common problem arises when there are too many values as each value will be taken by a small number of observations <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;x_i^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;x_i^j\" title=\"x_i^j\" /></a> which makes the estimation of a logistic regression coefficient unstable:\n\n\n- [ ] Show the Python code\n\n- [ ] Get this graph online\n\n\nIf we divide the training set in 10 and estimate the variance of each coefficient, we get:\n\n- [ ] Show the Python code\n\n- [ ] Get this graph online\n\n\n\nAll intervals crossing 0 are non-significant! We should group factor values to get a stable estimation and (hopefully) significant coefficient values.\n\n\n# Discretization and grouping: theoretical background\n\n## Notations\n\nLet <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;E=(E^j)_1^d\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;E=(E^j)_1^d\" title=\"E=(E^j)_1^d\" /></a> be the latent discretized transform of <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X\" title=\"X\" /></a>, i.e. taking values in <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;\\{0,\\ldots,m_j\\}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\{0,\\ldots,m_j\\}\" title=\"\\{0,\\ldots,m_j\\}\" /></a> where the number of values of each covariate <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;m_j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;m_j\" title=\"m_j\" /></a> is also latent.\n\nThe fitted logistic regression model is now:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\ln&space;\\left(&space;\\frac{p_\\theta(Y=1|e)}{p_\\theta(Y=0|e)}&space;\\right)&space;=&space;\\theta_0&space;&plus;&space;\\sum_{j=1}^d&space;\\sum_{k=1}^{m_j}&space;\\theta^j_k*{1}_{e^j=k}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\ln&space;\\left(&space;\\frac{p_\\theta(Y=1|e)}{p_\\theta(Y=0|e)}&space;\\right)&space;=&space;\\theta_0&space;&plus;&space;\\sum_{j=1}^d&space;\\sum_{k=1}^{m_j}&space;\\theta^j_k*{1}_{e^j=k}\" title=\"\\ln \\left( \\frac{p_\\theta(Y=1|e)}{p_\\theta(Y=0|e)} \\right) = \\theta_0 + \\sum_{j=1}^d \\sum_{k=1}^{m_j} \\theta^j_k*{1}_{e^j=k}\" /></a>\n\nClearly, the number of parameters has grown which allows for flexible approximation of the true underlying model <a href=\"https://www.codecogs.com/eqnedit.php?latex=p(Y|E)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?p(Y|E)\" title=\"p(Y|E)\" /></a>.\n\n## Best discretization?\n\nOur goal is to obtain the model <a href=\"https://www.codecogs.com/eqnedit.php?latex=p_\\theta(Y|e)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?p_\\theta(Y|e)\" title=\"p_\\theta(Y|e)\" /></a> with best predictive power. As <a href=\"https://www.codecogs.com/eqnedit.php?latex=E\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?E\" title=\"E\" /></a> and <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\theta\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\theta\" title=\"\\theta\" /></a> are both optimized, a formal goodness-of-fit criterion could be:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=(\\hat{\\theta},\\hat{\\bar{e}})&space;=&space;\\arg&space;\\max_{\\theta,\\bar{e}}&space;\\text{AIC}(p_\\theta(\\bar{y}|\\bar{e}))\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?(\\hat{\\theta},\\hat{\\bar{e}})&space;=&space;\\arg&space;\\max_{\\theta,\\bar{e}}&space;\\text{AIC}(p_\\theta(\\bar{y}|\\bar{e}))\" title=\"(\\hat{\\theta},\\hat{\\bar{e}}) = \\arg \\max_{\\theta,\\bar{e}} \\text{AIC}(p_\\theta(\\bar{y}|\\bar{e}))\" /></a>\nwhere AIC stands for Akaike Information Criterion.\n\n\n## Combinatorics\n\nThe problem seems well-posed: if we were able to generate all discretization schemes transforming <a href=\"https://www.codecogs.com/eqnedit.php?latex=X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?X\" title=\"X\" /></a> to <a href=\"https://www.codecogs.com/eqnedit.php?latex=E\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?E\" title=\"E\" /></a>, learn <a href=\"https://www.codecogs.com/eqnedit.php?latex=p_\\theta(y|e)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?p_\\theta(y|e)\" title=\"p_\\theta(y|e)\" /></a> for each of them and compare their AIC values, the problem would be solved.\n\nUnfortunately, there are way too many candidates to follow this procedure. Suppose we want to construct k intervals of <a href=\"https://www.codecogs.com/eqnedit.php?latex=E^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?E^j\" title=\"E^j\" /></a> given n distinct <a href=\"https://www.codecogs.com/eqnedit.php?latex=(x^j_i)_1^n\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?(x^j_i)_1^n\" title=\"(x^j_i)_1^n\" /></a>. There is <a href=\"https://www.codecogs.com/eqnedit.php?latex=n&space;\\choose&space;k\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?n&space;\\choose&space;k\" title=\"n \\choose k\" /></a> models. The true value of k is unknown, so it must be looped over. Finally, as logistic regression is a multivariate model, the discretization of <a href=\"https://www.codecogs.com/eqnedit.php?latex=E^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?E^j\" title=\"E^j\" /></a> can influence the discretization of <a href=\"https://www.codecogs.com/eqnedit.php?latex=E^k\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?E^k\" title=\"E^k\" /></a>, <a href=\"https://www.codecogs.com/eqnedit.php?latex=k&space;\\neq&space;j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?k&space;\\neq&space;j\" title=\"k \\neq j\" /></a>. \n\nAs a consequence, existing approaches to discretization (in particular discretization of continuous attributes) rely on strong assumptions to simplify the search of good candidates as can be seen in the review of Ram\u00edrez\u2010Gallego, S. et al. (2016) - see References section.\n\n\n\n# Discretization and grouping: estimation\n\n## Likelihood estimation\n\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=E\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?E\" title=\"E\" /></a> can be introduced in <a href=\"https://www.codecogs.com/eqnedit.php?latex=p(Y|X)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?p(Y|X)\" title=\"p(Y|X)\" /></a>:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\forall&space;\\:&space;x,y,&space;\\;&space;p(y|x)&space;=&space;\\sum_e&space;p(y|x,e)p(e|x)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\forall&space;\\:&space;x,y,&space;\\;&space;p(y|x)&space;=&space;\\sum_e&space;p(y|x,e)p(e|x)\" title=\"\\forall \\: x,y, \\; p(y|x) = \\sum_e p(y|x,e)p(e|x)\" /></a>\n\nFirst, we assume that all information about <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;Y\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;Y\" title=\"Y\" /></a> in <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X\" title=\"X\" /></a> is already contained in <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;E\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;E\" title=\"E\" /></a> so that:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\forall&space;\\:&space;x,y,e,&space;\\;&space;p(y|x,e)=p(y|e)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\forall&space;\\:&space;x,y,e,&space;\\;&space;p(y|x,e)=p(y|e)\" title=\"\\forall \\: x,y,e, \\; p(y|x,e)=p(y|e)\" /></a>\nSecond, we assume the conditional independence of <a href=\"https://www.codecogs.com/eqnedit.php?latex=E^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?E^j\" title=\"E^j\" /></a> given <a href=\"https://www.codecogs.com/eqnedit.php?latex=X^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?X^j\" title=\"X^j\" /></a>, i.e. knowing <a href=\"https://www.codecogs.com/eqnedit.php?latex=X^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?X^j\" title=\"X^j\" /></a>, the discretization <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;E^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;E^j\" title=\"E^j\" /></a> is independent of the other features <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X^k\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X^k\" title=\"X^k\" /></a> and <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;E^k\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;E^k\" title=\"E^k\" /></a> for all <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;k&space;\\neq&space;j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;k&space;\\neq&space;j\" title=\"k \\neq j\" /></a>:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\forall&space;\\:x,&space;k\\neq&space;j,&space;\\;&space;E^j&space;|&space;x^j&space;\\perp&space;E^k&space;|&space;x^k\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\forall&space;\\:x,&space;k\\neq&space;j,&space;\\;&space;E^j&space;|&space;x^j&space;\\perp&space;E^k&space;|&space;x^k\" title=\"\\forall \\:x, k\\neq j, \\; E^j | x^j \\perp E^k | x^k\" /></a>\nThe first equation becomes:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\forall&space;\\:&space;x,y,&space;\\;&space;p(y|x)&space;=&space;\\sum_e&space;p(y|e)&space;\\prod_{j=1}^d&space;p(e^j|x^j)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\forall&space;\\:&space;x,y,&space;\\;&space;p(y|x)&space;=&space;\\sum_e&space;p(y|e)&space;\\prod_{j=1}^d&space;p(e^j|x^j)\" title=\"\\forall \\: x,y, \\; p(y|x) = \\sum_e p(y|e) \\prod_{j=1}^d p(e^j|x^j)\" /></a>\nAs said earlier, we consider only logistic regression models on discretized data <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;p_\\theta(y|e)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;p_\\theta(y|e)\" title=\"p_\\theta(y|e)\" /></a>. Additionnally, it seems like we have to make further assumptions on the nature of the relationship of <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;e^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;e^j\" title=\"e^j\" /></a> to <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;x^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;x^j\" title=\"x^j\" /></a>. We chose to use polytomous logistic regressions for continuous <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X^j\" title=\"X^j\" /></a> and contengency tables for qualitative <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X^j\" title=\"X^j\" /></a>. This is an arbitrary choice and future versions will include the possibility of plugging your own model.\n\nThe first equation becomes:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\forall&space;\\:&space;x,y,&space;\\;&space;p(y|x)&space;=&space;\\sum_e&space;p_\\theta(y|e)&space;\\prod_{j=1}^d&space;p_{\\alpha_j}(e^j|x^j)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\forall&space;\\:&space;x,y,&space;\\;&space;p(y|x)&space;=&space;\\sum_e&space;p_\\theta(y|e)&space;\\prod_{j=1}^d&space;p_{\\alpha_j}(e^j|x^j)\" title=\"\\forall \\: x,y, \\; p(y|x) = \\sum_e p_\\theta(y|e) \\prod_{j=1}^d p_{\\alpha_j}(e^j|x^j)\" /></a>\n\n\n## The SEM algorithm\n\nIt is still hard to optimize over <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;p(y|x;\\theta,\\alpha)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;p(y|x;\\theta,\\alpha)\" title=\"p(y|x;\\theta,\\alpha)\" /></a> as the number of candidate discretizations is gigantic as said earlier.\n\nHowever, calculating <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;p(y,e|x)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;p(y,e|x)\" title=\"p(y,e|x)\" /></a> is easy:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=\\forall&space;\\:&space;x,y,&space;\\;&space;p(y,e|x)&space;=&space;p_\\theta(y|e)&space;\\prod_{j=1}^d&space;p_{\\alpha_j}(e^j|x^j)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\forall&space;\\:&space;x,y,&space;\\;&space;p(y,e|x)&space;=&space;p_\\theta(y|e)&space;\\prod_{j=1}^d&space;p_{\\alpha_j}(e^j|x^j)\" title=\"\\forall \\: x,y, \\; p(y,e|x) = p_\\theta(y|e) \\prod_{j=1}^d p_{\\alpha_j}(e^j|x^j)\" /></a>\n\nAs a consequence, we will draw random candidates <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;e\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;e\" title=\"e\" /></a> approximately at the mode of the distribution <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;p(y,\\cdot|x)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;p(y,\\cdot|x)\" title=\"p(y,\\cdot|x)\" /></a> using an SEM algorithm (see References section).\n\n\n\n## Gibbs sampling\n\nTo update, at each random draw, the parameters <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;\\theta\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\theta\" title=\"\\theta\" /></a> and <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;\\alpha\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\alpha\" title=\"\\alpha\" /></a> and propose a new discretization <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;e\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;e\" title=\"e\" /></a>, we use the following equation:\n<a href=\"https://www.codecogs.com/eqnedit.php?latex=p(e^j|x^j,y,e^{\\{-j\\}})&space;\\propto&space;p_\\theta(y|e)&space;p_{\\alpha_j}(e^j|x^j)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?p(e^j|x^j,y,e^{\\{-j\\}})&space;\\propto&space;p_\\theta(y|e)&space;p_{\\alpha_j}(e^j|x^j)\" title=\"p(e^j|x^j,y,e^{\\{-j\\}}) \\propto p_\\theta(y|e) p_{\\alpha_j}(e^j|x^j)\" /></a>\nNote that we draw <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;e^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;e^j\" title=\"e^j\" /></a> knowing all other variables, especially <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;e^{-j}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;e^{-j}\" title=\"e^{-j}\" /></a> so that we introduced a Gibbs sampler (see References section).\n\n\n\n\n# The `glmdisc` package\n\n## The `glmdisc` class\n\nThe `glmdisc` class implements the algorithm described in the previous section. Its parameters are described first, then its internals are briefly discussed. We finally focus on its ouptuts.\n\n\n\n### Parameters\n\nThe number of iterations in the SEM algorithm is controlled through the `iter` parameter. It can be useful to first run the `glmdisc` function with a low (10-50) `iter` parameter so you can have a better idea of how much time your code will run.\n\nThe `validation` and `test` boolean parameters control if the provided dataset should be divided into training, validation and/or test sets. The validation set aims at evaluating the quality of the model fit at each iteration while the test set provides the quality measure of the final chosen model.\n\nThe `criterion` parameters lets the user choose between standard model selection statistics like `aic` and `bic` and the `gini` index performance measure (proportional to the more traditional AUC measure). Note that if `validation=TRUE`, there is no need to penalize the log-likelihood and `aic` and `bic` become equivalent. On the contrary if `criterion=\"gini\"` and `validation=FALSE` then the algorithm may overfit the training data.\n\nThe `m_start` parameter controls the maximum number of categories of <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;E^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;E^j\" title=\"E^j\" /></a> for <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X^j\" title=\"X^j\" /></a> continuous. The SEM algorithm will start with random <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;E^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;E^j\" title=\"E^j\" /></a> taking values in <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;\\{1,m_{\\text{start}}\\}\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;\\{1,m_{\\text{start}}\\}\" title=\"\\{1,m_{\\text{start}}\\}\" /></a>. For qualitative features <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X^j\" title=\"X^j\" /></a>, <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;E^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;E^j\" title=\"E^j\" /></a> is initialized with as many values as <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;X^j\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;X^j\" title=\"X^j\" /></a> so that `m_start` has no effect.\n\nEmpirical studies show that with a reasonably small training dataset (< 100 000 rows) and a small `m_start` parameter (< 20), approximately 500 to 1500 iterations are largely sufficient to obtain a satisfactory model <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;p_\\theta(y|e)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;p_\\theta(y|e)\" title=\"p_\\theta(y|e)\" /></a>.\n\n\n\n\n### The `fit` function\n\nThe `fit` function of the `glmdisc` class is used to run the algorithm over the data provided to it. Subsequently, its parameters are: `predictors_cont` and `predictors_qual` which represent respectively the continuous features to be discretized and the categorical features which values are to be regrouped. They must be of type numpy array, filled with numeric and strings respectively. The last parameter is the class `labels`, of type numpy array as well, in binary form (0/1).\n\n\n\n\n### The `bestFormula` function\n\nThe `bestFormula` function prints out in the console: the cut-points found for continuous features, the regroupments made for categorical features' values. It also returns it in a list.\n\n\n\n### The `performance` function\n\nThe `performance` function returns the best performance found by the MCMC so far (depending on your `criterion` argument).\n\n\n### The `discreteData` function\n\nThe `discreteData` function returns the discretized / regrouped version of the `predictors_cont` and `predictors_qual` arguments using the best discretization scheme found so far.\n\n\n\n### The `contData` function\n\nThe `discreteData` function returns the `predictors_cont`, `predictors_qual` and `labels` arguments in a list.\n\n\n### The `discretize` function\n\nThe `discretize` function discretizes a new input dataset in the `predictors_cont`, `predictors_qual` format using the best discretization scheme found so far. The result is a numpy array of the size of the original data.\n\n\n### The `discretizeDummy` function\n\nThe `discretizeDummy` function discretizes a new input dataset in the `predictors_cont`, `predictors_qual` format using the best discretization scheme found so far. The result is a dummy (0/1) numpy array  corresponding to the One-Hot Encoding of the result provided by the `discretize` function.\n\n\n\n### The `predict` function\n\nThe `predict` function discretizes a new input dataset in the `predictors_cont`, `predictors_qual` format using the best discretization scheme found so far through the `discretizeDummy` function and then applies the corresponding best Logistic Regression model <a href=\"https://www.codecogs.com/eqnedit.php?latex=\\inline&space;p_\\theta(y|e)\" target=\"_blank\"><img src=\"https://latex.codecogs.com/gif.latex?\\inline&space;p_\\theta(y|e)\" title=\"p_\\theta(y|e)\" /></a> found so far.\n\n\nTo see the package in action, please refer to the accompanying Jupyter Notebook.\n\n\n\n## Authors\n\n* [Adrien Ehrhardt](https://adimajo.github.io)\n* [Vincent Vandewalle](https://sites.google.com/site/vvandewa/)\n* [Philippe Heinrich](http://math.univ-lille1.fr/~heinrich/)\n* [Christophe Biernacki](http://math.univ-lille1.fr/~biernack/)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\nThis research has been financed by [Cr\u00e9dit Agricole Consumer Finance](https://www.ca-consumerfinance.com/en.html) through a CIFRE PhD.\n\nThis research is supported by [Inria Lille - Nord-Europe](https://www.inria.fr/centre/lille) and [Lille University](https://www.univ-lille.fr/en/home/) as part of a P\u1e27D.\n\n## References\n\nCeleux, G., Chauveau, D., Diebolt, J. (1995), On Stochastic Versions of the EM Algorithm. [Research Report] RR-2514, INRIA. 1995. <inria-00074164>\n\nAgresti, A. (2002) **Categorical Data**. Second edition. Wiley.\n\nRam\u00edrez\u2010Gallego, S., Garc\u00eda, S., Mouri\u00f1o\u2010Tal\u00edn, H., Mart\u00ednez\u2010Rego, D., Bol\u00f3n\u2010Canedo, V., Alonso\u2010Betanzos, A. and Herrera, F. (2016). Data discretization: taxonomy and big data challenge. *Wiley Interdisciplinary Reviews: Data Mining and Knowledge Discovery*, 6(1), 5-21.\n\n- [ ] Do a notebook\n\n- [ ] Do tests\n\n- [ ] Do sphinx + readthedocs documentation\n\n\n\n\n## Future development: integration of interaction discovery\n\nVery often, predictive features $X$ \"interact\" with each other with respect to the response feature. This is classical in the context of Credit Scoring or biostatistics (only the simultaneous presence of several features - genes, SNP, etc. is predictive of a disease).\n\nWith the growing number of potential predictors and the time required to manually analyze if an interaction should be added or not, there is a strong need for automatic procedures that screen potential interaction variables. This will be the subject of future work.\n\n\n\n\n## Future development: possibility of changing model assumptions\n\nIn the third section, we described two fundamental modelling hypotheses that were made:\n>- The real probability density function $p(Y|X)$ can be approximated by a logistic regression $p_\\theta(Y|E)$ on the discretized data $E$.\n>- The nature of the relationship of $E^j$ to $X^j$ is:\n>- A polytomous logistic regression if $X^j$ is continuous;\n>- A contengency table if $X^j$ is qualitative.\n\nThese hypotheses are \"building blocks\" that could be changed at the modeller's will: discretization could optimize other models.\n\n\n\n\n\n\n\n- [ ] To delete when done with\n\n\n```{r, echo=TRUE, results='asis'}\nx = matrix(runif(1000), nrow = 1000, ncol = 1)\np = 1/(1+exp(-3*x^5))\ny = rbinom(1000,1,p)\nmodele_lin <- glm(y ~ x, family = binomial(link=\"logit\"))\npred_lin <- predict(modele_lin,as.data.frame(x),type=\"response\")\npred_lin_logit <- predict(modele_lin,as.data.frame(x))\n```\n\n```{r, echo=FALSE}\nknitr::kable(head(data.frame(True_prob = p,Pred_lin = pred_lin)))\n```\n\n\n```{r, echo=TRUE, results='asis'}\nx_disc <- factor(cut(x,c(-Inf,0.5,0.7,0.8,0.9,+Inf)),labels = c(1,2,3,4,5))\nmodele_disc <- glm(y ~ x_disc, family = binomial(link=\"logit\"))\npred_disc <- predict(modele_disc,as.data.frame(x_disc),type=\"response\")\npred_disc_logit <- predict(modele_disc,as.data.frame(x_disc))\n\n```\n\n```{r, echo=FALSE}\n\nknitr::kable(head(data.frame(True_prob = p,Pred_lin = pred_lin,Pred_disc = pred_disc)))\nplot(x,3*x^5,main = \"Estimated logit transform of p(Y|X)\", ylab = \"p(Y|X) under different models\")\nlines(x,pred_lin_logit,type=\"p\",col=\"red\")\nlines(x,pred_disc_logit,type=\"p\",col=\"blue\")\n\n```\n\n\n\n```{r, echo=TRUE, results='asis'}\nx_disc_bad_idea <- factor(cut(x,c(-Inf,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,+Inf)),labels = c(1,2,3,4,5,6,7,8,9,10))\n```\n\n\n```{r, echo=FALSE, results='asis'}\nliste_coef <- list()\n\nfor (k in 1:10) {\n     x_part <- factor(x_disc_bad_idea[((k-1)*nrow(x)/10 +1) : (k/10*nrow(x))])\n     y_part <- y[((k-1)*length(y)/10 +1) : (k/10*length(y))]\n     modele_part <- glm(y_part ~ x_part, family=binomial(link = \"logit\"))\n     liste_coef[[k]] <- (modele_part$coefficients)\n}\n\nestim_coef <- matrix(NA, nrow = nlevels(x_disc_bad_idea), ncol = 10)\n\nfor (i in 1:nlevels(x_disc_bad_idea)) {\n     estim_coef[i,] <- unlist(lapply(liste_coef,function(batch) batch[paste0(\"x_part\",levels(factor(x_disc_bad_idea))[i])]))\n}\n\nstats_coef <- matrix(NA, nrow = nlevels(x_disc_bad_idea), ncol = 3)\n\nfor (i in 1:nlevels(x_disc_bad_idea)) {\n     stats_coef[i,1] <- mean(estim_coef[i,], na.rm = TRUE)\n     stats_coef[i,2] <- sd(estim_coef[i,], na.rm = TRUE)\n     stats_coef[i,3] <- sum(is.na(estim_coef[i,]))\n}\n\nstats_coef <- stats_coef[-1,] \nrow.names(stats_coef) <- levels(x_disc_bad_idea)[2:nlevels(x_disc_bad_idea)]\n\nplot (row.names(stats_coef), stats_coef[,1],ylab=\"Estimated coefficient\",xlab=\"Factor value of x\", ylim = c(-1,8))\nsegments(as.numeric(row.names(stats_coef)), stats_coef[,1]-stats_coef[,2],as.numeric(row.names(stats_coef)),stats_coef[,1]+stats_coef[,2])\nlines(row.names(stats_coef),rep(0,length(row.names(stats_coef))),col=\"red\")\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Results\n\nFirst we simulate a \"true\" underlying discrete model:\n```{r, echo=TRUE, results='asis'}\nx = matrix(runif(300), nrow = 100, ncol = 3)\ncuts = seq(0,1,length.out= 4)\nxd = apply(x,2, function(col) as.numeric(cut(col,cuts)))\ntheta = t(matrix(c(0,0,0,2,2,2,-2,-2,-2),ncol=3,nrow=3))\nlog_odd = rowSums(t(sapply(seq_along(xd[,1]), function(row_id) sapply(seq_along(xd[row_id,]),\nfunction(element) theta[xd[row_id,element],element]))))\ny = rbinom(100,1,1/(1+exp(-log_odd)))\n```\n\nThe `glmdisc` function will try to \"recover\" the hidden true discretization `xd` when provided only with `x` and `y`:\n```{r, echo=TRUE,warning=FALSE, message=FALSE, results='hide',eval=FALSE}\nlibrary(glmdisc)\ndiscretization <- glmdisc(x,y,iter=50,m_start=5,test=FALSE,validation=FALSE,criterion=\"aic\",interact=FALSE)\n```\n\n```{r, echo=FALSE,warning=FALSE, message=FALSE, results='hide',eval=TRUE}\nlibrary(glmdisc)\ndiscretization <- glmdisc(x,y,iter=50,m_start=5,test=FALSE,validation=FALSE,criterion=\"aic\",interact=FALSE)\n```\n\n### How well did we do?\n\nTo compare the estimated and the true discretization schemes, we can represent them with respect to the input \"raw\" data `x`:\n<!--```{r, echo=TRUE, out.width='.49\\\\linewidth', fig.width=3, fig.height=3,fig.show='hold'}-->\n```{r, echo=FALSE}\nplot(x[,1],xd[,1])\nplot(discretization@cont.data[,1],discretization@disc.data[,1])\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adimajo/glmdisc_python", "keywords": "discretization logistic regression levels grouping", "license": "", "maintainer": "", "maintainer_email": "", "name": "glmdisc", "package_url": "https://pypi.org/project/glmdisc/", "platform": "", "project_url": "https://pypi.org/project/glmdisc/", "project_urls": {"Homepage": "https://github.com/adimajo/glmdisc_python"}, "release_url": "https://pypi.org/project/glmdisc/0.0.9/", "requires_dist": null, "requires_python": "", "summary": "Supervised multivariate discretization and levels merging for logistic regression", "version": "0.0.9"}, "last_serial": 5792081, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "905c9207a3b16150373db58fff70b1cb", "sha256": "2eee2302a6a348174480d2b7af01dfa236666830ebc53afb1920eb3e9a91862b"}, "downloads": -1, "filename": "glmdisc-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "905c9207a3b16150373db58fff70b1cb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19721, "upload_time": "2018-02-21T10:48:56", "upload_time_iso_8601": "2018-02-21T10:48:56.827630Z", "url": "https://files.pythonhosted.org/packages/fd/24/ac44fe6632191c62f158adf1988822aca7375350ff7ed69e3d5f77a71e06/glmdisc-0.0.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "9b129592ed705963115996b72c99c710", "sha256": "30db02cbebea94a4193d71b959d36352c872757b71c0d4f7b97b09eada54582d"}, "downloads": -1, "filename": "glmdisc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9b129592ed705963115996b72c99c710", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36066, "upload_time": "2018-02-21T10:48:59", "upload_time_iso_8601": "2018-02-21T10:48:59.560641Z", "url": "https://files.pythonhosted.org/packages/07/90/29224c806afec08241ed0d3e8d704c70955b1f314d873bd789ea2227738f/glmdisc-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a97d9709b9deece1bf432c6a06e82cae", "sha256": "d55034a78b3b6161e8d35ba0361f4409a6b9dd73019141441212cb9b15767b75"}, "downloads": -1, "filename": "glmdisc-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a97d9709b9deece1bf432c6a06e82cae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33578, "upload_time": "2018-02-28T15:19:34", "upload_time_iso_8601": "2018-02-28T15:19:34.986403Z", "url": "https://files.pythonhosted.org/packages/34/53/75d56dd3eaac3e89271598d4829d9f4527580bf29e8edc1e41a983bb010a/glmdisc-0.0.2.tar.gz"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "34a2ca65b07fb2e52e571522153a8269", "sha256": "e660ea4b1f4753e3db0967796f562322854fa5febd11b2dc1fc4c0c04143ae03"}, "downloads": -1, "filename": "glmdisc-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34a2ca65b07fb2e52e571522153a8269", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21220, "upload_time": "2018-04-18T06:56:51", "upload_time_iso_8601": "2018-04-18T06:56:51.601805Z", "url": "https://files.pythonhosted.org/packages/1e/a7/9f9b824cde8454630b5510374a70a3e9a0ac4886f560a5fcbee5a9138b21/glmdisc-0.0.3-py2.py3-none-any.whl"}], "0.0.4": [{"comment_text": "", "digests": {"md5": "ac77c61bd3dfa7e062a9f072988d7eee", "sha256": "2e8018c7461947219e12379bd1571d55a9deead7716ebbe5b7bcf40d6d6b3a99"}, "downloads": -1, "filename": "glmdisc-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ac77c61bd3dfa7e062a9f072988d7eee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43456, "upload_time": "2018-04-18T16:43:49", "upload_time_iso_8601": "2018-04-18T16:43:49.203002Z", "url": "https://files.pythonhosted.org/packages/93/82/6d8ce9cf9d5d09e98988a243a8945c3e34488f231e3f1071f834f40cfaf8/glmdisc-0.0.4.tar.gz"}], "0.0.5": [{"comment_text": "", "digests": {"md5": "58ecb9f6336b12941d634693ecb01b54", "sha256": "cb833b5282b5dad086574fe11737e845126ef58b38c01047cca4efedc2994e88"}, "downloads": -1, "filename": "glmdisc-0.0.5.tar.gz", "has_sig": false, "md5_digest": "58ecb9f6336b12941d634693ecb01b54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 458003, "upload_time": "2018-04-18T17:10:59", "upload_time_iso_8601": "2018-04-18T17:10:59.239063Z", "url": "https://files.pythonhosted.org/packages/5f/9a/0e92b5f3c58aa80ad6670414973fb1f81610fb1ac4d2eb88e9fa25f07226/glmdisc-0.0.5.tar.gz"}], "0.0.6": [{"comment_text": "", "digests": {"md5": "2bbd2bd4c30e167923e9c59e9d4d5408", "sha256": "2adc8e9197d542b9aea10ba1a0f8ecbbe68e1feb52de6b7bff1fd38dde150596"}, "downloads": -1, "filename": "glmdisc-0.0.6.tar.gz", "has_sig": false, "md5_digest": "2bbd2bd4c30e167923e9c59e9d4d5408", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 458011, "upload_time": "2018-04-20T07:31:53", "upload_time_iso_8601": "2018-04-20T07:31:53.565302Z", "url": "https://files.pythonhosted.org/packages/dd/23/1001e0ecd7000b4b27180d54f03b938ec45bdc6cfbdaae024407ee856a50/glmdisc-0.0.6.tar.gz"}], "0.0.7": [{"comment_text": "", "digests": {"md5": "45e0b3817bd91fb79f77825404389e6b", "sha256": "fa1d2fd68504f5d49cb5b220980d2a8bbc3bcd5adc6e29d7dc9e0b5d0ff82bf4"}, "downloads": -1, "filename": "glmdisc-0.0.7.tar.gz", "has_sig": false, "md5_digest": "45e0b3817bd91fb79f77825404389e6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 458002, "upload_time": "2018-04-20T07:41:50", "upload_time_iso_8601": "2018-04-20T07:41:50.066728Z", "url": "https://files.pythonhosted.org/packages/c9/2d/b7a748b07833925cba230dc27f4c09bd65ae74e59286a52be4a72f5f249f/glmdisc-0.0.7.tar.gz"}], "0.0.8": [{"comment_text": "", "digests": {"md5": "03cd3c5a93e0b26d7377e960006860e8", "sha256": "d33dc5178feedbaa4d0e4fcbf48cd822c55d22b0101e4cad022fd22784e1f423"}, "downloads": -1, "filename": "glmdisc-0.0.8.tar.gz", "has_sig": false, "md5_digest": "03cd3c5a93e0b26d7377e960006860e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 458000, "upload_time": "2018-04-20T07:46:08", "upload_time_iso_8601": "2018-04-20T07:46:08.080833Z", "url": "https://files.pythonhosted.org/packages/74/fd/c1f642d75843d6ff2e839494af6e1f8c92f172be32e956f54132fd679645/glmdisc-0.0.8.tar.gz"}], "0.0.9": [{"comment_text": "", "digests": {"md5": "5db39da34acc67181021050a91068684", "sha256": "34fee7737a679c0ce5b41c21b399acd77836c1906d484b9d5360711c23ead819"}, "downloads": -1, "filename": "glmdisc-0.0.9.tar.gz", "has_sig": false, "md5_digest": "5db39da34acc67181021050a91068684", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54048, "upload_time": "2019-09-06T12:46:01", "upload_time_iso_8601": "2019-09-06T12:46:01.084128Z", "url": "https://files.pythonhosted.org/packages/ad/f6/5977a47d927a0bdae22fa853df84a47ed2128659c442373597df5b5eaa24/glmdisc-0.0.9.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "5db39da34acc67181021050a91068684", "sha256": "34fee7737a679c0ce5b41c21b399acd77836c1906d484b9d5360711c23ead819"}, "downloads": -1, "filename": "glmdisc-0.0.9.tar.gz", "has_sig": false, "md5_digest": "5db39da34acc67181021050a91068684", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54048, "upload_time": "2019-09-06T12:46:01", "upload_time_iso_8601": "2019-09-06T12:46:01.084128Z", "url": "https://files.pythonhosted.org/packages/ad/f6/5977a47d927a0bdae22fa853df84a47ed2128659c442373597df5b5eaa24/glmdisc-0.0.9.tar.gz"}]}