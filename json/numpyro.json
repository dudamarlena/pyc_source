{"info": {"author": "Uber AI Labs", "author_email": "npradhan@uber.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "[![Build Status](https://travis-ci.com/pyro-ppl/numpyro.svg?branch=master)](https://travis-ci.com/pyro-ppl/numpyro)\n[![Documentation Status](https://readthedocs.org/projects/numpyro/badge/?version=latest)](https://numpyro.readthedocs.io/en/latest/?badge=latest)\n[![Latest Version](https://badge.fury.io/py/numpyro.svg)](https://pypi.python.org/pypi/numpyro)\n# NumPyro\n\nProbabilistic programming with NumPy powered by [JAX](https://github.com/google/jax) for autograd and JIT compilation to GPU/TPU/CPU.\n\n[Docs](https://num.pyro.ai) | [Examples](https://pyro.ai/numpyro/) | [Forum](https://forum.pyro.ai/)\n\n----------------------------------------------------------------------------------------------------\n\n## What is NumPyro?\n\nNumPyro is a small probabilistic programming library that provides a NumPy backend for [Pyro](https://github.com/pyro-ppl/pyro). We rely on [JAX](https://github.com/google/jax) for automatic differentiation and JIT compilation to GPU / CPU. This is an alpha release under active development, so beware of brittleness, bugs, and changes to the API as the design evolves.\n\nNumPyro is designed to be *lightweight* and focuses on providing a flexible substrate that users can build on:\n\n - **Pyro Primitives:** NumPyro programs can contain regular Python and NumPy code, in addition to [Pyro primitives](http://pyro.ai/examples/intro_part_i.html) like `sample` and `param`. The model code should look very similar to Pyro except for some minor differences between PyTorch and Numpy's API. See the [example](https://github.com/pyro-ppl/numpyro#a-simple-example---8-schools) below.\n - **Inference algorithms:** NumPyro currently supports Hamiltonian Monte Carlo, including an implementation of the No U-Turn Sampler. One of the motivations for NumPyro was to speed up Hamiltonian Monte Carlo by JIT compiling the verlet integrator that includes multiple gradient computations. With JAX, we can compose `jit` and `grad` to compile the entire integration step into an XLA optimized kernel. We also eliminate Python overhead by JIT compiling the entire tree building stage in NUTS (this is possible using [Iterative NUTS](https://github.com/pyro-ppl/numpyro/wiki/Iterative-NUTS)). There is also a basic Variational Inference implementation for reparameterized distributions.\n - **Distributions:** The [numpyro.distributions](https://numpyro.readthedocs.io/en/latest/distributions.html) module provides distribution classes, constraints and bijective transforms. The distribution classes wrap over samplers implemented to work with JAX's [functional pseudo-random number generator](https://github.com/google/jax#random-numbers-are-different). The design of the distributions module largely follows from [PyTorch](https://pytorch.org/docs/stable/distributions.html). A major subset of the API is implemented, and it contains most of the common distributions that exist in PyTorch. As a result, Pyro and PyTorch users can rely on the same API and batching semantics as in `torch.distributions`. In addition to distributions, `constraints` and `transforms` are very useful when operating on distribution classes with bounded support.\n - **Effect handlers:** Like Pyro, primitives like `sample` and `param` can be provided nonstandard interpretations using effect-handlers from the [numpyro.handlers](https://numpyro.readthedocs.io/en/latest/handlers.html) module, and these can be easily extended to implement custom inference algorithms and inference utilities.\n\n## A Simple Example - 8 Schools\n\nLet us explore NumPyro using a simple example. We will use the eight schools example from Gelman et al., Bayesian Data Analysis: Sec. 5.5, 2003, which studies the effect of coaching on SAT performance in eight schools. \n\nThe data is given by:\n\n```python\n>>> J = 8\n>>> y = np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0])\n>>> sigma = np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0])\n```\n, where `y` are the treatment effects and `sigma` the standard error. We build a hierarchical model for the study where we assume that the group-level parameters `theta` for each school are sampled from a Normal distribution with unknown mean `mu` and standard deviation `tau`, while the observed data are in turn generated from a Normal distribution with mean and standard deviation given by `theta` (true effect) and `sigma`, respectively. This allows us to estimate the population-level parameters `mu` and `tau` by pooling from all the observations, while still allowing for individual variation amongst the schools using the group-level `theta` parameters.\n\n```python\n>>> # Eight Schools example\n... def eight_schools(J, sigma, y=None):\n...     mu = numpyro.sample('mu', dist.Normal(0, 5))\n...     tau = numpyro.sample('tau', dist.HalfCauchy(5))\n...     with numpyro.plate('J', J):\n...         theta = numpyro.sample('theta', dist.Normal(mu, tau))\n...         numpyro.sample('obs', dist.Normal(theta, sigma), obs=y)\n```\n\nLet us infer the values of the unknown parameters in our model by running MCMC using the No-U-Turn Sampler (NUTS). Note the usage of the `extra_fields` argument in [MCMC.run](http://num.pyro.ai/en/latest/mcmc.html#numpyro.infer.mcmc.MCMC.run). By default, we only collect samples from the target (posterior) distribution when we run inference using `MCMC`. However, collecting additional fields like potential energy or the acceptance probability of a sample can be easily achieved by using the `extra_fields` argument. For a list of possible fields that can be collected, see the [HMCState](http://num.pyro.ai/en/latest/mcmc.html#numpyro.infer.mcmc.HMCState) object. In this example, we will additionally collect the `potential_energy` for each sample.\n\n```python\n>>> nuts_kernel = NUTS(eight_schools)\n>>> mcmc = MCMC(nuts_kernel, num_warmup=500, num_samples=1000)\n>>> rng_key = random.PRNGKey(0)\n>>> mcmc.run(rng_key, J, sigma, y=y, extra_fields=('potential_energy',))\n```\n\nWe can print the summary of the MCMC run, and examine if we observed any divergences during inference. Additionally, since we collected the potential energy for each of the samples, we can easily compute the expected log joint density.\n\n```python\n>>> mcmc.print_summary()\n\n                mean       std    median      5.0%     95.0%     n_eff     r_hat\n        mu      3.94      2.81      3.16      0.03      9.28    114.51      1.06\n       tau      3.20      2.97      2.40      0.38      7.28     24.06      1.07\n  theta[0]      5.56      5.26      4.10     -1.67     13.52     63.57      1.05\n  theta[1]      4.48      4.15      3.26     -2.44     11.25    148.63      1.05\n  theta[2]      3.62      4.40      3.26     -3.85     10.75    445.91      1.01\n  theta[3]      4.25      4.24      3.24     -2.99     10.68    366.29      1.04\n  theta[4]      3.25      3.94      3.29     -3.34      9.84    311.03      1.00\n  theta[5]      3.66      4.27      2.77     -2.79     11.06    344.57      1.02\n  theta[6]      5.74      4.67      4.34     -1.92     13.25     58.42      1.05\n  theta[7]      4.29      4.63      3.23     -2.14     12.37    342.50      1.02\n\nNumber of divergences: 139\n\n>>> pe = mcmc.get_extra_fields()['potential_energy']\n>>> print('Expected log joint density: {:.2f}'.format(np.mean(-pe)))\n\nExpected log joint density: -51.42\n```\n\nThe values above 1 for the split Gelman Rubin diagnostic (`r_hat`) indicates that the chain has not fully converged. The low value for the effective sample size (`n_eff`), particularly for `tau`, and the number of divergent transitions looks problematic. Fortunately, this is a common pathology that can be rectified by using a [non-centered paramaterization](https://mc-stan.org/docs/2_18/stan-users-guide/reparameterization-section.html) for `tau` in our model. This is straightforward to do in NumPyro by using a [TransformedDistribution](http://num.pyro.ai/en/latest/distributions.html#transformeddistribution) instance. Let us rewrite the same model but instead of sampling `theta` from a `Normal(mu, tau)`, we will instead sample it from a base `Normal(0, 1)` distribution that is transformed using an [AffineTransform](http://num.pyro.ai/en/latest/distributions.html#affinetransform). Note that by doing so, NumPyro runs HMC by generating samples for the base `Normal(0, 1)` distribution instead. We see that the resulting chain does not suffer from the same pathology \u2014 the Gelman Rubin diagnostic is 1 for all the parameters and the effective sample size looks quite good! \n\n```python\n>>> # Eight Schools example - Non-centered Reparametrization\n... def eight_schools_noncentered(J, sigma, y=None):\n...     mu = numpyro.sample('mu', dist.Normal(0, 5))\n...     tau = numpyro.sample('tau', dist.HalfCauchy(5))\n...     with numpyro.plate('J', J):\n...         theta = numpyro.sample('theta', \n...                                dist.TransformedDistribution(dist.Normal(0., 1.),\n...                                                             dist.transforms.AffineTransform(mu, tau)))\n...         numpyro.sample('obs', dist.Normal(theta, sigma), obs=y)\n\n>>> nuts_kernel = NUTS(eight_schools_noncentered)\n>>> mcmc = MCMC(nuts_kernel, num_warmup=500, num_samples=1000)\n>>> rng_key = random.PRNGKey(0)\n>>> mcmc.run(rng_key, J, sigma, y=y, extra_fields=('potential_energy',))\n>>> mcmc.print_summary()\n\n                mean       std    median      5.0%     95.0%     n_eff     r_hat\n        mu      4.38      3.04      4.50     -0.92      9.05    876.02      1.00\n       tau      3.36      2.89      2.63      0.01      7.56    755.65      1.00\n  theta[0]      5.99      5.42      5.44     -1.33     15.13    825.18      1.00\n  theta[1]      4.80      4.50      4.78     -1.63     13.01   1114.97      1.00\n  theta[2]      3.94      4.63      4.23     -3.41     11.06    914.68      1.00\n  theta[3]      4.76      4.62      4.73     -2.31     12.11    958.40      1.00\n  theta[4]      3.62      4.66      3.75     -3.87     11.17   1091.53      1.00\n  theta[5]      3.92      4.43      4.06     -2.41     11.09   1179.74      1.00\n  theta[6]      5.88      4.84      5.34     -1.45     13.11    881.38      1.00\n  theta[7]      4.63      4.86      4.64     -3.57     11.80   1065.27      1.00\n\nNumber of divergences: 0\n\n>>> pe = mcmc.get_extra_fields()['potential_energy']\n>>> # Compare with the earlier value\n>>> print('Expected log joint density: {:.2f}'.format(np.mean(-pe)))\n\nExpected log joint density: -46.23\n```\n\nNow, let us assume that we have a new school for which we have not observed any test scores, but we would like to generate predictions. NumPyro provides a [Predictive](http://num.pyro.ai/en/latest/utilities.html#numpyro.infer.util.Predictive) class for such a purpose. Note that in the absence of any observed data, we simply use the population-level parameters to generate predictions. The `Predictive` utility conditions the unobserved `mu` and `tau` sites to values drawn from the posterior distribution from our last MCMC run, and runs the model forward to generate predictions. \n\n```python\n>>> # New School\n... def new_school():\n...     mu = numpyro.sample('mu', dist.Normal(0, 5))\n...     tau = numpyro.sample('tau', dist.HalfCauchy(5))\n...     return numpyro.sample('obs', dist.Normal(mu, tau))\n\n\n>>> predictive = Predictive(new_school, mcmc.get_samples())\n>>> samples_predictive = predictive.get_samples(random.PRNGKey(1))\n>>> print(np.mean(samples_predictive['obs']))\n\n4.419043\n```\n\n## More Examples\n\n\nFor some more examples on specifying models and doing inference in NumPyro:\n\n - [Bayesian Regression in NumPyro](https://nbviewer.jupyter.org/github/pyro-ppl/numpyro/blob/master/notebooks/source/bayesian_regression.ipynb) - Start here to get acquainted with writing a simple model in NumPyro, MCMC inference API, effect handlers and writing custom inference utilities.\n - [Time Series Forecasting](https://nbviewer.jupyter.org/github/pyro-ppl/numpyro/blob/master/notebooks/source/time_series_forecasting.ipynb) - Illustrates how to convert for loops in the model to JAX's `lax.scan` primitive for fast inference.\n - [Baseball example](https://github.com/pyro-ppl/numpyro/blob/master/examples/baseball.py) - Using NUTS for a simple hierarchical model. Compare this with the baseball example in [Pyro](https://github.com/pyro-ppl/pyro/blob/dev/examples/baseball.py).\n - [Hidden Markov Model](https://github.com/pyro-ppl/numpyro/blob/master/examples/hmm.py) in NumPyro as compared to [Stan](https://mc-stan.org/docs/2_19/stan-users-guide/hmms-section.html).\n - [Variational Autoencoder](https://github.com/pyro-ppl/numpyro/blob/master/examples/vae.py) - As a simple example that uses Variational Inference with neural networks. [Pyro implementation](https://github.com/pyro-ppl/pyro/blob/dev/examples/vae/vae.py) for comparison.\n - [Gaussian Process](https://github.com/pyro-ppl/numpyro/blob/master/examples/gp.py) - Provides a simple example to use NUTS to sample from the posterior over the hyper-parameters of a Gaussian Process.\n - [Statistical Rethinking with NumPyro](https://github.com/fehiepsi/rethinking-numpyro) - [Notebooks](https://nbviewer.jupyter.org/github/fehiepsi/rethinking-numpyro/tree/master/notebooks/) containing translation of the code in Richard McElreath's [Statistical Rethinking](https://xcelab.net/rm/statistical-rethinking/) book second version, to NumPyro.\n - Other model examples can be found in the [examples](https://github.com/pyro-ppl/numpyro/tree/master/examples) folder.\n\nPyro users will note that the API for model specification and inference is largely the same as Pyro, including the distributions API, by design. However, there are some important core differences (reflected in the internals) that users should be aware of. e.g. in NumPyro, there is no global parameter store or random state, to make it possible for us to leverage JAX's JIT compilation. Also, users may need to write their models in a more *functional* style that works better with JAX. Refer to [FAQs](#frequently-asked-questions) for a list of differences. \n\n\n## Installation\n\n> **Limited Windows Support:** Note that NumPyro is untested on Windows, and will require building jaxlib from source. See this [JAX issue](https://github.com/google/jax/issues/438) for more details.\n\nTo install NumPyro with a CPU version of JAX, you can use pip:\n\n```\npip install numpyro\n```\n\nTo use NumPyro on the GPU, you will need to first [install](https://github.com/google/jax#installation) `jax` and `jaxlib` with CUDA support.\n\nTo run NumPyro on Cloud TPUs, you can use pip to install NumPyro as above and setup the TPU backend as detailed [here](https://github.com/google/jax/tree/master/cloud_tpu_colabs).\n\nYou can also install NumPyro from source:\n\n```\ngit clone https://github.com/pyro-ppl/numpyro.git\n# install jax/jaxlib first for CUDA support\npip install -e .[dev]\n```\n\n## Frequently Asked Questions\n\n1. Unlike in Pyro, `numpyro.sample('x', dist.Normal(0, 1))` does not work. Why?\n\n   You are most likely using a `numpyro.sample` statement outside an inference context. JAX does not have a global random state, and as such, distribution samplers need an explicit random number generator key ([PRNGKey](https://jax.readthedocs.io/en/latest/jax.random.html#jax.random.PRNGKey)) to generate samples from. NumPyro's inference algorithms use the [seed](http://num.pyro.ai/en/latest/handlers.html#seed) handler to thread in a random number generator key, behind the scenes.\n\n   Your options are:\n\n   - Call the distribution directly and provide a `PRNGKey`, e.g. `dist.Normal(0, 1).sample(PRNGKey(0))`\n   - Provide the `rng_key` argument to `numpyro.sample`. e.g. `numpyro.sample('x', dist.Normal(0, 1), rng_key=PRNGKey(0))`. \n   - Wrap the code in a `seed` handler, used either as a context manager or as a function that wraps over the original callable. e.g. \n     ```python\n     with handlers.seed(rng_seed=0):\n         x = numpyro.sample('x', dist.Beta(1, 1))  # random.PRNGKey(0) is used\n         y = numpyro.sample('y', dist.Bernoulli(x))  # uses different PRNGKey split from the last one\n     ```\n     , or as a higher order function:\n\n     ```python\n     def fn():\n         x = numpyro.sample('x', dist.Beta(1, 1))\n         y = numpyro.sample('y', dist.Bernoulli(x))\n         return y\n\n     print(handlers.seed(fn, rng_seed=0)())\n     ```\n\n2. Can I use the same Pyro model for doing inference in NumPyro?\n\n   As you may have noticed from the examples, NumPyro supports all Pyro primitives like `sample`, `param`, `plate` and `module`, and effect handlers. Additionally, we have ensured that the [distributions](https://numpyro.readthedocs.io/en/latest/distributions.html) API is based on `torch.distributions`, and the inference classes like `SVI` and `MCMC` have the same interface. This along with the similarity in the API for NumPy and PyTorch operations ensures that models containing Pyro primitive statements can be used with either backend with some minor changes. Example of some differences along with the changes needed, are noted below:\n\n   - Any `torch` operation in your model will need to be written in terms of the corresponding `jax.numpy` operation. Additionally, not all `torch` operations have a `numpy` counterpart (and vice-versa), and sometimes there are minor differences in the API.\n   - `pyro.sample` statements outside an inference context will need to be wrapped in a `seed` handler, as mentioned above.\n   - There is no global parameter store, and as such using `numpyro.param` outside an inference context will have no effect. To retrieve the optimized parameter values from SVI, use the [SVI.get_params](http://num.pyro.ai/en/latest/svi.html#numpyro.infer.svi.SVI.get_params) method. Note that you can still use `param` statements inside a model and NumPyro will use the [substitute](http://num.pyro.ai/en/latest/handlers.html#substitute) effect handler internally to substitute values from the optimizer when running the model in SVI. \n   - PyTorch neural network modules will need to rewritten as [stax](https://github.com/google/jax#neural-net-building-with-stax) neural networks. See the [VAE](#examples) example for differences in syntax between the two backends.\n   - JAX works best with functional code, particularly if we would like to leverage JIT compilation, which NumPyro does internally for many inference subroutines. As such, if your model has side-effects that are not visible to the JAX tracer, it may need to rewritten in a more functional style.\n\n   For most small models, changes required to run inference in NumPyro should be minor. Additionally, we are working on [pyro-api](https://github.com/pyro-ppl/pyro-api) which allows you to write the same code and dispatch it to multiple backends, including NumPyro. This will necessarily be more restrictive, but has the advantage of being backend agnostic. See the [documentation](https://pyro-api.readthedocs.io/en/latest/dispatch.html#module-pyroapi.dispatch) for an example, and let us know your feedback.\n\n\n3. How can I contribute to the project?\n\n   Thanks for your interest in the project! You can take a look at beginner friendly issues that are marked with the [good first issue](https://github.com/pyro-ppl/numpyro/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) tag on Github. Also, please feel to reach out to us on the [forum](https://forum.pyro.ai/). \n\n\n## Future / Ongoing Work\n\nIn the near term, we plan to work on the following. Please open new issues for feature requests and enhancements:\n\n - Improving robustness of inference on different models, profiling and performance tuning.\n - Supporting more functionality as part of the [pyro-api](https://github.com/pyro-ppl/pyro-api) generic modeling interface.\n - More inference algorithms, particularly those that require second order derivaties or use HMC.\n - Integration with [Funsor](https://github.com/pyro-ppl/funsor) to support inference algorithms with delayed sampling.\n - Other areas motivated by Pyro's research goals and application focus, and interest from the community.\n\n ## Citing NumPyro\n\nThe motivating ideas behind NumPyro and a description of Iterative NUTS can be found in this [paper](https://arxiv.org/abs/1912.11554) that appeared in NeurIPS 2019 Program Transformations for Machine Learning Workshop. \n\nIf you use NumPyro, please consider citing:\n\n```\n@article{phan2019composable,\n  title={Composable Effects for Flexible and Accelerated Probabilistic Programming in NumPyro},\n  author={Phan, Du and Pradhan, Neeraj and Jankowiak, Martin},\n  journal={arXiv preprint arXiv:1912.11554},\n  year={2019}\n}\n```\n\nas well as\n\n```\n@article{bingham2018pyro,\n  author = {Bingham, Eli and Chen, Jonathan P. and Jankowiak, Martin and Obermeyer, Fritz and\n            Pradhan, Neeraj and Karaletsos, Theofanis and Singh, Rohit and Szerlip, Paul and\n            Horsfall, Paul and Goodman, Noah D.},\n  title = {{Pyro: Deep Universal Probabilistic Programming}},\n  journal = {arXiv preprint arXiv:1810.09538},\n  year = {2018}\n}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyro-ppl/numpyro", "keywords": "probabilistic machine learning bayesian statistics", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "numpyro", "package_url": "https://pypi.org/project/numpyro/", "platform": "", "project_url": "https://pypi.org/project/numpyro/", "project_urls": {"Homepage": "https://github.com/pyro-ppl/numpyro"}, "release_url": "https://pypi.org/project/numpyro/0.2.4/", "requires_dist": ["jax (==0.1.57)", "jaxlib (==0.1.37)", "tqdm", "ipython ; extra == 'dev'", "isort ; extra == 'dev'", "sphinx ; extra == 'doc'", "sphinx-rtd-theme ; extra == 'doc'", "sphinx-gallery ; extra == 'doc'", "matplotlib ; extra == 'examples'", "seaborn ; extra == 'examples'", "flake8 ; extra == 'test'", "pytest (>=4.1) ; extra == 'test'", "pyro-api (>=0.1.1) ; extra == 'test'"], "requires_python": "", "summary": "Pyro PPL on NumPy", "version": "0.2.4"}, "last_serial": 6509688, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a6cb308c7ccee6f6f3ef329a25888d7a", "sha256": "3df3e54abfa195a51ceadc6d177ff629f79c5fe9c9a8f89547b3b1a73bd49840"}, "downloads": -1, "filename": "numpyro-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a6cb308c7ccee6f6f3ef329a25888d7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73756, "upload_time": "2019-06-01T04:15:31", "upload_time_iso_8601": "2019-06-01T04:15:31.748787Z", "url": "https://files.pythonhosted.org/packages/46/b7/e4e0624e9e948b1f1c4176ef01ac8dc3487fdc78f897494bdfe15932e51b/numpyro-0.1.0.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "93d947398501804cd7e21c5dcccd92fa", "sha256": "4f7ed0d83cca73d67e2368132a5dbbb0f84094942f2468173dc1b6c3770a5769"}, "downloads": -1, "filename": "numpyro-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "93d947398501804cd7e21c5dcccd92fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 95162, "upload_time": "2019-09-08T07:22:40", "upload_time_iso_8601": "2019-09-08T07:22:40.068864Z", "url": "https://files.pythonhosted.org/packages/17/7c/323ec59c52d6c49defcba944167843437976cbc7261cff058721e74fc77f/numpyro-0.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "26e76fef203630d51dfb292ca94b3e29", "sha256": "32b2dc6e0dc1c94a0b6590bfba51f605446162072ab73ca69e272dad1007aaf8"}, "downloads": -1, "filename": "numpyro-0.2.0.tar.gz", "has_sig": false, "md5_digest": "26e76fef203630d51dfb292ca94b3e29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101660, "upload_time": "2019-09-08T07:22:41", "upload_time_iso_8601": "2019-09-08T07:22:41.825754Z", "url": "https://files.pythonhosted.org/packages/5a/fa/574b880cb719cd2b2310a6851ff334a2e0cbec1929b3871c16a37988e30f/numpyro-0.2.0.tar.gz"}], "0.2.1": [{"comment_text": "", "digests": {"md5": "594a02918eb0cc76ec09bdec0993242d", "sha256": "539dc587d4fb08516077142f2d60e95f77834aeaef5a7c5ecfaa1c1e59028cec"}, "downloads": -1, "filename": "numpyro-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "594a02918eb0cc76ec09bdec0993242d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 141793, "upload_time": "2019-11-01T22:16:23", "upload_time_iso_8601": "2019-11-01T22:16:23.956413Z", "url": "https://files.pythonhosted.org/packages/88/bb/f83e6e4fa6a426f90e834afb1e17bf05549ea2d43a41abe5acb8182dda90/numpyro-0.2.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7240c470f498c90f588b7176fbf87219", "sha256": "794e938ed186e8ce4b22091018f9c138f698f29196f92c59913bbf109e27eb9e"}, "downloads": -1, "filename": "numpyro-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7240c470f498c90f588b7176fbf87219", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123523, "upload_time": "2019-11-01T22:16:26", "upload_time_iso_8601": "2019-11-01T22:16:26.423119Z", "url": "https://files.pythonhosted.org/packages/ce/e9/23a5c01c58065ac8a17b3a9014cfcc85074ee6403e62f9bedb82ed729206/numpyro-0.2.1.tar.gz"}], "0.2.2": [{"comment_text": "", "digests": {"md5": "8ef36ac6789eef37a71de904212502d9", "sha256": "caa60045d199f0d17b85d1fbfda778ae82589dab044c412a4b8e5ad2f3f55908"}, "downloads": -1, "filename": "numpyro-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8ef36ac6789eef37a71de904212502d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145243, "upload_time": "2019-12-04T20:53:38", "upload_time_iso_8601": "2019-12-04T20:53:38.333554Z", "url": "https://files.pythonhosted.org/packages/c2/ee/a6355d9748e16c3d75b84eef97cb43bae2374e969fe9959b03ca4fe4f8a5/numpyro-0.2.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1a8c3d2b2015e1bbd14997e03bb09dfd", "sha256": "af5198fa29f5e31ec3a9e4d7b5ac3d3cc2499476d9db0e6c7b18ea56dae4ee20"}, "downloads": -1, "filename": "numpyro-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1a8c3d2b2015e1bbd14997e03bb09dfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128636, "upload_time": "2019-12-04T20:53:40", "upload_time_iso_8601": "2019-12-04T20:53:40.001138Z", "url": "https://files.pythonhosted.org/packages/38/cf/208b731aec339e74ad0ed317a01983a8dca9ce461cf0525988074ae74572/numpyro-0.2.2.tar.gz"}], "0.2.3": [{"comment_text": "", "digests": {"md5": "1753cd329e7b525214938ded32fc1b18", "sha256": "78cd0244738f9c183222f533fda17496bbc78186baec3f57f285020a7b257719"}, "downloads": -1, "filename": "numpyro-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1753cd329e7b525214938ded32fc1b18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145336, "upload_time": "2019-12-05T06:45:06", "upload_time_iso_8601": "2019-12-05T06:45:06.330015Z", "url": "https://files.pythonhosted.org/packages/2f/a1/c88ba97a02b71c6683d0d673c4d01b93023e30f00cda36c8192f1ef98fd8/numpyro-0.2.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d9bb309cb9a4f1bbd241e578519314bf", "sha256": "aa7050a610f278d6600630648787f1dc18152d1c9fbd65a92863c6c37ffaee9f"}, "downloads": -1, "filename": "numpyro-0.2.3.tar.gz", "has_sig": false, "md5_digest": "d9bb309cb9a4f1bbd241e578519314bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 128704, "upload_time": "2019-12-05T06:45:08", "upload_time_iso_8601": "2019-12-05T06:45:08.539430Z", "url": "https://files.pythonhosted.org/packages/0a/ca/0ace30608623cfaa40ddd290d1685387d567abbd0687d1e51f8a4f6664c6/numpyro-0.2.3.tar.gz"}], "0.2.4": [{"comment_text": "", "digests": {"md5": "6b4b1e3f0a9cb55b935bd94d690d0c0d", "sha256": "38d97f976205256b66916e3a863cb57a42065bc9cf89615d7bbf047162df2e62"}, "downloads": -1, "filename": "numpyro-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6b4b1e3f0a9cb55b935bd94d690d0c0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 159369, "upload_time": "2020-01-23T19:44:41", "upload_time_iso_8601": "2020-01-23T19:44:41.023937Z", "url": "https://files.pythonhosted.org/packages/b8/58/54e914bb6d8ee9196f8dbf28b81057fea81871fc171dbee03b790336d0c5/numpyro-0.2.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "5e427dcb5eed1c0cef0323edf1246d0e", "sha256": "a2d29766308c3b0e0254429c57c04538f94f78cb0a6fac574404a59f4b6c1663"}, "downloads": -1, "filename": "numpyro-0.2.4.tar.gz", "has_sig": false, "md5_digest": "5e427dcb5eed1c0cef0323edf1246d0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137970, "upload_time": "2020-01-23T19:44:44", "upload_time_iso_8601": "2020-01-23T19:44:44.677808Z", "url": "https://files.pythonhosted.org/packages/17/31/c50530f1492b06f7914251a22dcb78d14aac33ad9cdeb1aaa4c218afa1f2/numpyro-0.2.4.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "6b4b1e3f0a9cb55b935bd94d690d0c0d", "sha256": "38d97f976205256b66916e3a863cb57a42065bc9cf89615d7bbf047162df2e62"}, "downloads": -1, "filename": "numpyro-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6b4b1e3f0a9cb55b935bd94d690d0c0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 159369, "upload_time": "2020-01-23T19:44:41", "upload_time_iso_8601": "2020-01-23T19:44:41.023937Z", "url": "https://files.pythonhosted.org/packages/b8/58/54e914bb6d8ee9196f8dbf28b81057fea81871fc171dbee03b790336d0c5/numpyro-0.2.4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "5e427dcb5eed1c0cef0323edf1246d0e", "sha256": "a2d29766308c3b0e0254429c57c04538f94f78cb0a6fac574404a59f4b6c1663"}, "downloads": -1, "filename": "numpyro-0.2.4.tar.gz", "has_sig": false, "md5_digest": "5e427dcb5eed1c0cef0323edf1246d0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 137970, "upload_time": "2020-01-23T19:44:44", "upload_time_iso_8601": "2020-01-23T19:44:44.677808Z", "url": "https://files.pythonhosted.org/packages/17/31/c50530f1492b06f7914251a22dcb78d14aac33ad9cdeb1aaa4c218afa1f2/numpyro-0.2.4.tar.gz"}]}