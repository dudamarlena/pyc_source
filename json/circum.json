{"info": {"author": "Lane Haury", "author_email": "lane@lumineerlabs.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# circum\n\n![build](https://travis-ci.com/LumineerLabs/circum.svg?branch=master) ![PyPI](https://img.shields.io/pypi/v/circum)\n\nCircum is a distributed, multi sensor fusion system for detecting and tracking people. It applies techniques similar to systems developed for autonomous vehicles to detect and track moving objects (DATMO). Circum uses late fusion, meaning that detections are classified per sensor and then fused (associated and deduplicated) and tracked after. Because different sensors provide different capabilities (e.g. point vs volume detection), these properties will be combined in the final tracking output.\n\nCircum is intended for art installations wanting to use human presence as an input into an interactive installation.\n\n![architecture block diagram](./docs/architecture_block.png)\n\n## Install\n\n```bash\npip3 install circum\n```\n\n## Usage\n\n### Service\n\n```bash\nUsage: circum [OPTIONS]\n\nOptions:\n  -n, --name TEXT       The service name  [required]\n  -i, --interface TEXT  The interface to bind to.\n  -p, --port INTEGER    The port to bind to.\n  -e, --endpoint TEXT   Names of endpoints to connect to. Can be specified\n                        multiple times. If no endpoints are specified, all\n                        available endpoints will be used.\n  --help                Show this message and exit.\n```\n\n### endpoint\n\n```bash\nUsage: circum-endpoint [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --name TEXT         The service name\n  --interface TEXT    The interface to bind to.\n  --port INTEGER      The port to bind to.\n  --pose FLOAT...     The pose of the sensor. Expressed in x y z yaw(Rx)\n                      pitch(Ry) roll(Rz) order.\n                      Units are meters and degrees.\n                      +Z is the direction of sensor view. X & Y follow the\n                      right hand rule.\n                      If a pose provider is installed, this\n                      will override it.\n  --pose-provider [<available providers installed from plugins will be listed here>]\n                                  The pose provider to use for automatically\n                                  determining the sensor pose.\n                                  NOTE: this is\n                                  currently unsupported\n  --help                          Show this message and exit.\n\n\nCommands:\n  simulator\n  <additional sensors installed from plugins will be listed here>\n```\n\nTo get the help for a particular sensor add --help after the appropriate command:\n```bash\n?> circum-endpiont simulator --help\nUsage: circum-endpoint simulator [OPTIONS]\n\nOptions:\n  --update_interval FLOAT  Rate to send updates.\n  --num_objects INTEGER    Number of objects to simulate\n  --help                   Show this message and exit.\n```\n\n## Service\n\nThe circum service can be started with unique name and either a list of endpoints to connect to or it will find and connect to all circum endpoints on a network. Once connected to the endpoints, it will use pose and field of view information from each endpoint to combine tracking data into a single view which it will then transmit to clients whenever updated.\n\n### Discovery\n\nThe circum service will advertise itself via zeroconf service discovery. It will advertise under\n\n```console\n<name>._service._circum._tcp.local.\n```\n\n## Endpoints\n\nEndpoints perform detection and classification and transmit information about the detected objects to the core service.\nAt the very least, the endpoint must transmit a centroid of a detected person. The core service operates on this. Any\nadditional information is added into the fused track for clients to consume. Each endpoint is exposed as a discoverable\nzeroconf service. A given tracker service is configured with a unique name and field of view information.\n\nCircum is distributed with a simulator endpoint. Additional endpoint sensor types are installed via plugins.\n\nSupported sensors include:\n\n* [Walabot](https://github.com/LumineerLabs/circum-walabot) ![build](https://travis-ci.com/LumineerLabs/circum-walabot.svg?branch=master) ![PyPI](https://img.shields.io/pypi/v/circum-walabot)\n\nPlanned future sensors:\n\n* [Camera + ML](https://github.com/LumineerLabs/circum-cam) ![build](https://travis-ci.com/LumineerLabs/circum-cam.svg?branch=master) ![PyPI](https://img.shields.io/pypi/v/circum-cam)\n* [Kinect](https://github.com/LumineerLabs/circum-kinect) ![build](https://travis-ci.com/LumineerLabs/circum-kinect.svg?branch=master) ![PyPI](https://img.shields.io/pypi/v/circum-kinect)\n* [IR Camera](https://github.com/LumineerLabs/circum-ir) ![build](https://travis-ci.com/LumineerLabs/circum-ir.svg?branch=master) ![PyPI](https://img.shields.io/pypi/v/circum-ir)\n* [HC-S04 Ultrasound](https://github.com/LumineerLabs/circum-hc-sr04) ![build](https://travis-ci.com/LumineerLabs/circum-hc-sr04.svg?branch=master) ![PyPI](https://img.shields.io/pypi/v/circum-hc-sr04)\n\n### Discovery\n\nThe endpoints will advertise under\n\n```console\n<name>._endpoint._sub._circum._tcp.local.\n```\n\nThe type of endpoint will be noted in the service properties\n\n|    Type     | Type Tag |\n|-------------|----------|\n| Walabot     |  walabot |\n| FLIR Camera |  flir    |\n| Kinect      |  kinect  |\n\n## Demo\n\nAfter installing circum and downloading the git repo, run the following in separate terminals (you can substitute your own values for FOO, BAR, 8081, and 8082):\n\n```bash\ncircum-endpoint --name FOO --port 8081 simulator\ncircum-service --name BAR --port 8082\npython3 .\\examples\\demo_client.py --service BAR\n```\n\n## References\n\nCircum would not have been possible without the following references:\n\n* R. Omar Chavez-Garcia. [Multiple Sensor Fusion for Detection, Classification and Tracking of MovingObjects in Driving Environments.](https://icave2.cse.buffalo.edu/resources/sensor-modeling/sensor%20fusion.pdf) Robotics \\[cs.RO\\]. Universit\u00e9 de Grenoble, 2014. English. <tel-01082021>\n* [Sensor Fusion and Object Tracking using an Extended Kalman Filter Algorithm \u2014 Part 1](https://medium.com/@mithi/object-tracking-and-fusing-sensor-measurements-using-the-extended-kalman-filter-algorithm-part-1-f2158ef1e4f0) & [Part 2](https://medium.com/@mithi/sensor-fusion-and-object-tracking-using-an-extended-kalman-filter-algorithm-part-2-cd20801fbeff)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LumineerLabs/circum", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "circum", "package_url": "https://pypi.org/project/circum/", "platform": "", "project_url": "https://pypi.org/project/circum/", "project_urls": {"Homepage": "https://github.com/LumineerLabs/circum"}, "release_url": "https://pypi.org/project/circum/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Circum is a set of tools for detecting and tracking moving objectsvia a variety of distributed sensors.", "version": "0.0.4"}, "last_serial": 6437701, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "4f0d13563617176a68163f4a3d26772c", "sha256": "602e0a0cbf3231d93c3275389dc5a6dc15e71d10b99be4a3d25a20ce01be7ee1"}, "downloads": -1, "filename": "circum-0.0.3.tar.gz", "has_sig": false, "md5_digest": "4f0d13563617176a68163f4a3d26772c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14317, "upload_time": "2020-01-05T21:13:10", "upload_time_iso_8601": "2020-01-05T21:13:10.981157Z", "url": "https://files.pythonhosted.org/packages/a5/a1/b2b9a060f90e7122101594c664bba9dd6e5308f623b917cdef6b39aee57e/circum-0.0.3.tar.gz"}], "0.0.4": [{"comment_text": "", "digests": {"md5": "21759bb721d9d291d8cac5b44b33d113", "sha256": "43c9f8152177d7faf2cb237e745dde52381c87a7e4d8802de621143920277b5d"}, "downloads": -1, "filename": "circum-0.0.4.tar.gz", "has_sig": false, "md5_digest": "21759bb721d9d291d8cac5b44b33d113", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14454, "upload_time": "2020-01-11T21:40:35", "upload_time_iso_8601": "2020-01-11T21:40:35.155365Z", "url": "https://files.pythonhosted.org/packages/9d/c9/c6f5c78612fed44d52b45277e419eb730e6153d4c0a3e092b5e3ecfeeaf4/circum-0.0.4.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "21759bb721d9d291d8cac5b44b33d113", "sha256": "43c9f8152177d7faf2cb237e745dde52381c87a7e4d8802de621143920277b5d"}, "downloads": -1, "filename": "circum-0.0.4.tar.gz", "has_sig": false, "md5_digest": "21759bb721d9d291d8cac5b44b33d113", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14454, "upload_time": "2020-01-11T21:40:35", "upload_time_iso_8601": "2020-01-11T21:40:35.155365Z", "url": "https://files.pythonhosted.org/packages/9d/c9/c6f5c78612fed44d52b45277e419eb730e6153d4c0a3e092b5e3ecfeeaf4/circum-0.0.4.tar.gz"}]}