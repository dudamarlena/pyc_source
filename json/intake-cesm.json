{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "===============================\nIntake-cesm\n===============================\n\n.. image:: https://img.shields.io/circleci/project/github/NCAR/intake-cesm/master.svg?style=for-the-badge&logo=circleci\n    :target: https://circleci.com/gh/NCAR/intake-cesm/tree/master\n\n.. image:: https://img.shields.io/codecov/c/github/NCAR/intake-cesm.svg?style=for-the-badge\n    :target: https://codecov.io/gh/NCAR/intake-cesm\n\n\n.. image:: https://img.shields.io/readthedocs/intake-cesm/latest.svg?style=for-the-badge\n    :target: https://intake-cesm.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/v/intake-cesm.svg?style=for-the-badge\n    :target: https://pypi.org/project/intake-cesm\n    :alt: Python Package Index\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/intake-cesm.svg?style=for-the-badge\n    :target: https://anaconda.org/conda-forge/intake-cesm\n    :alt: Conda Version\n\n\nIntake-cesm provides a plug for reading CESM Large Ensemble data sets using intake.\nSee documentation_ for more information.\n\n.. _documentation: https://intake-cesm.readthedocs.io/en/latest/\n\n\nAn example of using intake-cesm:\n\n.. code-block:: python\n\n    >>> import intake\n    >>> 'cesm_metadatastore' in intake.registry\n    True\n    >>> collection = intake.open_cesm_metadatastore('cesm1_le')\n    Active collection: cesm1_le\n    >>> cat = collection.search(experiment=['20C', 'RCP85'], component='ocn', ensemble=1, variable='FG_CO2')\n    >>> cat.results\n                                        case component  ... year_offset  ctrl_branch_year\n    100755   b.e11.B20TRC5CNBDRD.f09_g16.001       ocn  ...         NaN               NaN\n    64401   b.e11.BRCP85C5CNBDRD.f09_g16.001       ocn  ...         NaN               NaN\n    64402   b.e11.BRCP85C5CNBDRD.f09_g16.001       ocn  ...         NaN               NaN\n\n    [3 rows x 14 columns]\n    >>> print(cat.yaml(True))\n    plugins:\n    source:\n    - module: intake_cesm.core\n    sources:\n    cesm1_le-bd481b86-b627-4f75-9608-235352846296:\n        args:\n        chunks:\n            time: 1\n        collection: cesm1_le\n        concat_dim: time\n        decode_coords: false\n        decode_times: false\n        engine: netcdf4\n        query:\n            case: null\n            component: ocn\n            ctrl_branch_year: null\n            date_range: null\n            ensemble: 1\n            experiment:\n            - 20C\n            - RCP85\n            has_ocean_bgc: null\n            stream: null\n            variable: FG_CO2\n        description: Catalog from cesm1_le collection\n        driver: cesm\n        metadata:\n        cache: {}\n        catalog_dir: ''\n\n    >>> ds = cat.to_xarray()\n    >>> ds\n    <xarray.Dataset>\n    Dimensions:               (d2: 2, lat_aux_grid: 395, moc_comp: 3, moc_z: 61, nlat: 384, nlon: 320, time: 3012, transport_comp: 5, transport_reg: 2, z_t: 60, z_t_150m: 15, z_w: 60, z_w_bot: 60, z_w_top: 60)\n    Coordinates:\n    * lat_aux_grid          (lat_aux_grid) float32 -79.48815 -78.952896 ... 90.0\n    * moc_z                 (moc_z) float32 0.0 1000.0 ... 525000.94 549999.06\n    * z_t                   (z_t) float32 500.0 1500.0 ... 512502.8 537500.0\n    * z_t_150m              (z_t_150m) float32 500.0 1500.0 ... 13500.0 14500.0\n    * z_w                   (z_w) float32 0.0 1000.0 2000.0 ... 500004.7 525000.94\n    * z_w_bot               (z_w_bot) float32 1000.0 2000.0 ... 549999.06\n    * z_w_top               (z_w_top) float32 0.0 1000.0 ... 500004.7 525000.94\n    * time                  (time) float64 6.753e+05 6.753e+05 ... 7.669e+05\n    Dimensions without coordinates: d2, moc_comp, nlat, nlon, transport_comp, transport_reg\n    Data variables:\n        ANGLE                 (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        ANGLET                (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        DXT                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        DXU                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        DYT                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        DYU                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        FG_CO2                (time, nlat, nlon) float32 dask.array<shape=(3012, 384, 320), chunksize=(1, 384, 320)>\n        HT                    (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        HTE                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        HTN                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        HU                    (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        HUS                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        HUW                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        KMT                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        KMU                   (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        REGION_MASK           (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        T0_Kelvin             (time) float64 273.1 273.1 273.1 ... 273.1 273.1 273.1\n        TAREA                 (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        TLAT                  (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        TLONG                 (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        UAREA                 (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        ULAT                  (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        ULONG                 (time, nlat, nlon) float64 dask.array<shape=(3012, 384, 320), chunksize=(1872, 384, 320)>\n        cp_air                (time) float64 1.005e+03 1.005e+03 ... 1.005e+03\n        cp_sw                 (time) float64 3.996e+07 3.996e+07 ... 3.996e+07\n        days_in_norm_year     (time) float64 365.0 365.0 365.0 ... 365.0 365.0 365.0\n        dz                    (time, z_t) float32 dask.array<shape=(3012, 60), chunksize=(1872, 60)>\n        dzw                   (time, z_w) float32 dask.array<shape=(3012, 60), chunksize=(1872, 60)>\n        fwflux_factor         (time) float64 0.0001 0.0001 0.0001 ... 0.0001 0.0001\n        grav                  (time) float64 980.6 980.6 980.6 ... 980.6 980.6 980.6\n        heat_to_PW            (time) float64 4.186e-15 4.186e-15 ... 4.186e-15\n        hflux_factor          (time) float64 2.439e-05 2.439e-05 ... 2.439e-05\n        latent_heat_fusion    (time) float64 3.337e+09 3.337e+09 ... 3.337e+09\n        latent_heat_vapor     (time) float64 2.501e+06 2.501e+06 ... 2.501e+06\n        mass_to_Sv            (time) float64 1e-12 1e-12 1e-12 ... 1e-12 1e-12 1e-12\n        moc_components        (time, moc_comp) |S256 dask.array<shape=(3012, 3), chunksize=(1872, 3)>\n        momentum_factor       (time) float64 10.0 10.0 10.0 10.0 ... 10.0 10.0 10.0\n        nsurface_t            (time) float64 8.621e+04 8.621e+04 ... 8.621e+04\n        nsurface_u            (time) float64 8.305e+04 8.305e+04 ... 8.305e+04\n        ocn_ref_salinity      (time) float64 34.7 34.7 34.7 34.7 ... 34.7 34.7 34.7\n        omega                 (time) float64 7.292e-05 7.292e-05 ... 7.292e-05\n        ppt_to_salt           (time) float64 0.001 0.001 0.001 ... 0.001 0.001 0.001\n        radius                (time) float64 6.371e+08 6.371e+08 ... 6.371e+08\n        rho_air               (time) float64 1.292 1.292 1.292 ... 1.292 1.292 1.292\n        rho_fw                (time) float64 1.0 1.0 1.0 1.0 1.0 ... 1.0 1.0 1.0 1.0\n        rho_sw                (time) float64 1.026 1.026 1.026 ... 1.026 1.026 1.026\n        salinity_factor       (time) float64 -0.00347 -0.00347 ... -0.00347 -0.00347\n        salt_to_Svppt         (time) float64 1e-09 1e-09 1e-09 ... 1e-09 1e-09 1e-09\n        salt_to_mmday         (time) float64 3.154e+05 3.154e+05 ... 3.154e+05\n        salt_to_ppt           (time) float64 1e+03 1e+03 1e+03 ... 1e+03 1e+03 1e+03\n        sea_ice_salinity      (time) float64 4.0 4.0 4.0 4.0 4.0 ... 4.0 4.0 4.0 4.0\n        sflux_factor          (time) float64 0.1 0.1 0.1 0.1 0.1 ... 0.1 0.1 0.1 0.1\n        sound                 (time) float64 1.5e+05 1.5e+05 ... 1.5e+05 1.5e+05\n        stefan_boltzmann      (time) float64 5.67e-08 5.67e-08 ... 5.67e-08 5.67e-08\n        time_bound            (time, d2) float64 dask.array<shape=(3012, 2), chunksize=(1, 2)>\n        transport_components  (time, transport_comp) |S256 dask.array<shape=(3012, 5), chunksize=(1872, 5)>\n        transport_regions     (time, transport_reg) |S256 dask.array<shape=(3012, 2), chunksize=(1872, 2)>\n        vonkar                (time) float64 0.4 0.4 0.4 0.4 0.4 ... 0.4 0.4 0.4 0.4\n    Attributes:\n        title:                     b.e11.B20TRC5CNBDRD.f09_g16.001\n        history:                   Sat Aug 31 13:20:44 2013: /glade/apps/opt/nco/...\n        Conventions:               CF-1.0; http://www.cgd.ucar.edu/cms/eaton/netc...\n        contents:                  Diagnostic and Prognostic Variables\n        source:                    CCSM POP2, the CCSM Ocean Component\n        revision:                  $Id: tavg.F90 41939 2012-11-14 16:37:23Z mlevy...\n        calendar:                  All years have exactly  365 days.\n        start_time:                This dataset was created on 2013-05-24 at 14:5...\n        cell_methods:              cell_methods = time: mean ==> the variable val...\n        nsteps_total:              750\n        tavg_sum:                  2592000.0\n        tavg_sum_qflux:            2592000.0\n        NCO:                       4.3.4\n        nco_openmp_thread_number:  1\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NCAR/intake-cesm", "keywords": "intake-cesm", "license": "Apache 2.0", "maintainer": "Anderson Banihirwe", "maintainer_email": "abanihi@ucar.edu", "name": "intake-cesm", "package_url": "https://pypi.org/project/intake-cesm/", "platform": "", "project_url": "https://pypi.org/project/intake-cesm/", "project_urls": {"Homepage": "https://github.com/NCAR/intake-cesm"}, "release_url": "https://pypi.org/project/intake-cesm/2019.2.0/", "requires_dist": ["intake", "xarray", "pyyaml"], "requires_python": ">3.5", "summary": "An intake plugin for loading CESM Large Ensemble data sets", "version": "2019.2.0"}, "last_serial": 4770595, "releases": {"2019.2.0": [{"comment_text": "", "digests": {"md5": "d45acd85b8f1eb6f49800e9b07291039", "sha256": "72cfebafe9478e68e7c947154568b25d3afb09383138e1fe9ee46a2ee12dc607"}, "downloads": -1, "filename": "intake_cesm-2019.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d45acd85b8f1eb6f49800e9b07291039", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">3.5", "size": 10344, "upload_time": "2019-02-01T22:07:54", "upload_time_iso_8601": "2019-02-01T22:07:54.137353Z", "url": "https://files.pythonhosted.org/packages/08/68/844c2be609360f941920e8ff303045ee279484d1dcdec2178db2c3f169ed/intake_cesm-2019.2.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "76b6afb7413e096104de8e729d8914b5", "sha256": "79033d8efed3d737310004d80ef1e2996528d9161e12553eee6d70699ad349e7"}, "downloads": -1, "filename": "intake-cesm-2019.2.0.tar.gz", "has_sig": false, "md5_digest": "76b6afb7413e096104de8e729d8914b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 13387, "upload_time": "2019-02-01T22:07:56", "upload_time_iso_8601": "2019-02-01T22:07:56.620517Z", "url": "https://files.pythonhosted.org/packages/57/c9/eaf6125641e5a1e987b86844c903fe6c96a633a99b8910b57ab17604c5c0/intake-cesm-2019.2.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "d45acd85b8f1eb6f49800e9b07291039", "sha256": "72cfebafe9478e68e7c947154568b25d3afb09383138e1fe9ee46a2ee12dc607"}, "downloads": -1, "filename": "intake_cesm-2019.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d45acd85b8f1eb6f49800e9b07291039", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">3.5", "size": 10344, "upload_time": "2019-02-01T22:07:54", "upload_time_iso_8601": "2019-02-01T22:07:54.137353Z", "url": "https://files.pythonhosted.org/packages/08/68/844c2be609360f941920e8ff303045ee279484d1dcdec2178db2c3f169ed/intake_cesm-2019.2.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "76b6afb7413e096104de8e729d8914b5", "sha256": "79033d8efed3d737310004d80ef1e2996528d9161e12553eee6d70699ad349e7"}, "downloads": -1, "filename": "intake-cesm-2019.2.0.tar.gz", "has_sig": false, "md5_digest": "76b6afb7413e096104de8e729d8914b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5", "size": 13387, "upload_time": "2019-02-01T22:07:56", "upload_time_iso_8601": "2019-02-01T22:07:56.620517Z", "url": "https://files.pythonhosted.org/packages/57/c9/eaf6125641e5a1e987b86844c903fe6c96a633a99b8910b57ab17604c5c0/intake-cesm-2019.2.0.tar.gz"}]}