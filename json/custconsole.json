{"info": {"author": "Jordan Chesley", "author_email": "jordan.r.chesley@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# **Thank you for using CustConsole.**\n\n## **A customizable console (CLI) created by Jordan Chesley.**\n\n[![CustConsole Version](https://img.shields.io/pypi/v/custconsole?label=version)](https://pypi.org/project/custconsole/) [![Release](https://img.shields.io/badge/release-experimental-orange)](https://pypi.org/project/custconsole/) [![Python Version](https://img.shields.io/pypi/pyversions/custconsole)](https://www.python.org) [![Documentation Status](https://readthedocs.org/projects/custconsole/badge/?version=latest)](https://custconsole.readthedocs.io/en/latest/?badge=latest)\n\nCustConsole is a Python module that helps programmers design a customizable console(s) without having to go through the hassle of defining several methods. The main feature of CustConsole is that programmers can define their own custom commands for the console, in which users can call straight from the command line. CustConsole can automatically parse the console input and execute the user-defined methods with an unlimited number of arguments and keyword arguments.\n\nYou can find [CustConsole's documentation here](https://custconsole.readthedocs.io/en/latest/index.html).\n\nYou can also [visit the repository here](https://github.com/JordanChesley/custconsole).\n\nTo get started with CustConsole, let's build a starter file together!\n\n#### **Setup**\nLet's create a new Python file. For this example, we'll call it `console.py`.\n\nNow, inside `console.py`, import the `custconsole` package:\n\n\n```python\nimport custconsole\n```\n\n#### **Creating an instance of the console**\nWhen creating an instance of the console, we can input a couple of parameters.\n\n- We can give our console a name (Defaulted to \"Custom Console\")\n\n- We can assign a version number to our console (Defaulted to \"0.1\")\n\n- We can input a console author (Defaulted to **None**)\n\nLet's create an instance of the console. We will save this instance in the \"cc\" variable. We will call our console \"Test Console\", have the version set to \"0.0.1\", and we can set the author as our name (for mine, I'll write \"Jordan Chesley\").\n\n```python\ncc = custconsole.custconsole(name='Test Console', version='0.0.1', author='Jordan Chesley')\n```\n\n#### **Defining a custom command**\nLet's create some custom commands.. We use the `@custconsole.command()` decorator above a function to define a custom command. This decorator can take a couple of parameters:\n\n- We can pass a command name (Defaults to the function name)\n\n- We can also pass a command description (Defaults to the function's docstring. If not provided, it then defaults to \"No description provided.\")\n\nLet's create a command named \"hello\" which takes no parameters, and will simply print \"Hello World!\" to the console. Using our existing console instance, we define our command below:\n\n```python\n@cc.command()\ndef hello():\n  \"\"\"Prints 'Hello World!'\"\"\"\n  print('Hello World!')\n```\n\nThat was overly simple! Now let's create another command, \"echo\", which will take an infinite number of arguments, combined to make one string literal, and print it out to the console. We will pass a `description` parameter to the decorator instead of providing a docstring.\n\n```python\n@cc.command(description='Return the given input to the console.')\ndef echo(*sentence):\n  print(*sentence)\n```\n\nDone! So far, this is our `console.py` file:\n\n```python\nimport custconsole\n\ncc = custconsole.custconsole(name='Test Console', version='0.0.1', author='Jordan Chesley')\n\n@cc.command()\ndef hello():\n  \"\"\"Prints 'Hello World!'\"\"\"\n  print('Hello World!')\n\n@cc.command(description='Return the given input to the console.')\ndef echo(*sentence):\n  print(*sentence)\n```\n\n#### **Creating a run script**\nCustConsole's goal is to provide a customizable console for its users. Therefore, custconsole doesn't come predefined with a run method. With this in mind, our current file is essentially useless unless we make our own run process. So, let's create one!\n\nFor this example, we'd like to print our console header to the console. This header includes our console name, version, and the author name. Continuing in `console.py`, after all of our defined commands:\n\n```py\nprint(cc.header)\n```\n\nNow, let's make a way for users to input the command and arguments. We would like them to be able to type as many commands as they want, so we should loop this with a `while` statement. We can create a custom prompt for them like so:\n\n```py\nwhile True:\n  command = input('\\nconsole>> ')\n```\n\nAfter, we want to be able to invoke (execute) the command to perform one of our custom commands. CustConsole provides a command parser that can invoke a command and pass any given arguments into it. We use `custconsole.invoke_command()` and pass in our console input to do this:\n\n```py\nwhile True:\n  command = input('\\nconsole>> ')\n  cc.invoke_command(command)\n```\n\nIn technicality, we've actually finished building a minimal and functioning run script. If you properly enter defined commands without flaw, everything will work just fine. This is our full `console.py` script:\n\n```python\nimport custconsole\n\ncc = custconsole.custconsole(name='Test Console', version='0.0.1', author='Jordan Chesley')\n\n@cc.command()\ndef hello():\n  \"\"\"Prints 'Hello World!'\"\"\"\n  print('Hello World!')\n\n@cc.command(description='Return the given input to the console.')\ndef echo(*sentence):\n  print(*sentence)\n\nprint(cc.header)\nwhile True:\n  command = input('\\nconsole>> ')\n  cc.invoke_command(command)\n```\n\nIf we currently ran this script, the following would be our output:\n\n```\nTest Console v[0.0.1] created by Jordan Chesley.\nType 'help' for a list of commands.\n\nconsole>> help\nhello        Prints 'Hello World!'\necho         Return the given input to the console.\n\nconsole>> hello\nHello World!\n\nconsole>> echo I love custconsole!\nI love custconsole!\n\nconsole>>\n```\n\n#### **Upgrading our run script**\n\nSo what if we tried calling a command that didn't exist? Let's try calling a non-existent command named \"print\":\n\n```\nTest Console v[0.0.1] created by Jordan Chesley.\nType 'help' for a list of commands.\n\nconsole>> print\nTraceback (most recent call last):\n File \"c:/Projects/test.py\", line 17, in <module>\n  cc.invoke_command(command)\n File \"c:\\Projects\\custconsole\\custconsole.py\", line 361, in invoke_command\n  raise UnknownCommandError(command)\nUnknownCommandError: 'print' is not a command. Type 'help' for a list of commands.\n```\n\nTo our interest, an exception was raised. If this is unhandled, then users will experience a console that constantly crashes after invoking false commands. We can use a `try/except` statement to handle this error. Return to the run script in `console.py` and add this around the `custconsole.invoke_command()` method:\n\n```python\nwhile True:\n  command = input('\\nconsole>> ')\n  try:\n\u00e2\u20ac\u2039    cc.invoke_command(command)\n  except custconsole.UnknownCommandError as e:\n\u00e2\u20ac\u2039    print(e)\n```\n\nNow when we type a false command into the console, we result this instead:\n\n```\nTest Console v[0.0.1] created by Jordan Chesley.\nType 'help' for a list of commands.\n\nconsole>> print\n'print' is not a command. Type 'help' for a list of commands.\n\nconsole>>\n```\n\nOur console instance continues to run, yet handles the error and informs the user instead of crashing the program.\n\n#### **Login to the console**\nCustConsole comes with ability to have users register and login to the console. Their console logins are encrypted with a randomly-generated key. In order to perform this though, the programmer must create a \"users\" file in the same directory as the console script. We have a couple of methods at our hands:\n\n- `custconsole.current_user` is the user account currently logged into the console. If there is no user logged in, this is set to **None**.\n\n- `custconsole.register_user()` allows us to manually register a user login to the console. You can pass optional parameters: a username, and a password.\n\n- `custconsole.login()` prompts the user to login with the proper credentials. If this is called and no user is registered, then this will automatically call **custconsole.register_user()**.\n\n- `custconsole.auth_user()` checks to see if the user's owner is the one initiating the command. They will be asked to verify their password. This returns a boolean statement.\n\nFor our example, we'd like the user to login to the console once the console starts up. We'll add the following to our `console.py` script:\n\n```python\nwhile True:\n## ADD LOGIN CODE ##\n  # The following line is a precautionary to make sure the\n  # user HAS to be logged in to use the console.\n  if cc.current_user is None:\n\u00e2\u20ac\u2039    cc.login()\n## END ADDED CODE ##\n  command = input('\\nconsole>> ')\n  try:\n\u00e2\u20ac\u2039    cc.invoke_command(command)\n  except custconsole.UnknownCommandError as e:\n\u00e2\u20ac\u2039    print(e)\n```\n\nNow if we run our updated script, we should get the following:\n\n```\nTest Console v[0.0.1] created by Jordan Chesley.\nType 'help' for a list of commands.\n\nNo user is registered. Please create a user below.\n\nUsername:\n```\n\nWe can go ahead and create an account. For this tutorial, I'll make an account with the username of \"guest\" and a password of \"guest\".\n\n```\nUsername: guest\nPassword: \nVerify password for new user guest: \nRegistered guest.\n\nUsername:\n```\n\nNow we can log in with our credentials>\n\n```\nUsername: guest\nPassword: \nLogged in as guest.\n\nconsole>>\n```\n\nExcellent. This is our full `console.py` file now:\n\n```python\nimport custconsole\n\ncc = custconsole.custconsole(name='Test Console', version='0.0.1', author='Jordan Chesley')\n\n@cc.command()\ndef hello():\n \"\"\"Prints 'Hello World!'\"\"\"\n print('Hello World!')\n\n@cc.command(description='Return the given input to the console.')\ndef echo(*sentence):\n print(*sentence)\n\nprint(cc.header)\nwhile True:\n if cc.current_user is None:\n  cc.login()\n\n command = input('\\nconsole>> ')\n try:\n  cc.invoke_command(command)\n except custconsole.UnknownCommandError as e:\n  print(e)\n```\n\nCongratulation! You've made your very own custom console! Now, you can go and make your own consoles to use for your own applications. Take a look at the documentation [](here) to look at methods not covered by this tutorial.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JordanChesley/custconsole", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "custconsole", "package_url": "https://pypi.org/project/custconsole/", "platform": "", "project_url": "https://pypi.org/project/custconsole/", "project_urls": {"Homepage": "https://github.com/JordanChesley/custconsole"}, "release_url": "https://pypi.org/project/custconsole/0.1/", "requires_dist": null, "requires_python": "", "summary": "Create a customizable console(s) for your program.", "version": "0.1"}, "last_serial": 6869515, "releases": {"0.0.5": [{"comment_text": "", "digests": {"md5": "c2a9f77d145cf24342d1b8ce1e8eea14", "sha256": "d340a6009483a1676c9b061659831368a7781b33a148ec75fe1bea361e8ed0cd"}, "downloads": -1, "filename": "custconsole-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c2a9f77d145cf24342d1b8ce1e8eea14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9966, "upload_time": "2020-02-21T05:00:53", "upload_time_iso_8601": "2020-02-21T05:00:53.603719Z", "url": "https://files.pythonhosted.org/packages/da/85/ce51ab0300b610f998330cf86fb08b88fd7b459fea000404e4c45feabb1f/custconsole-0.0.5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3e600a4dc136b33acff4e4658aeba633", "sha256": "2c25bea2b51b57b7e47f23a438956dc0a7f18d6cedd3255b58bf230498e2000b"}, "downloads": -1, "filename": "custconsole-0.0.5.tar.gz", "has_sig": false, "md5_digest": "3e600a4dc136b33acff4e4658aeba633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11685, "upload_time": "2020-02-21T05:00:55", "upload_time_iso_8601": "2020-02-21T05:00:55.614433Z", "url": "https://files.pythonhosted.org/packages/45/d2/17f7f08ef1c85447405b9aeafdfb29f7cbc0f5a35ed8afb1dcc835f3cc13/custconsole-0.0.5.tar.gz"}], "0.1": [{"comment_text": "", "digests": {"md5": "e1042c298bf03fc62aeb861a8f26abea", "sha256": "2e6bb0417dd299ae16a3269c0b4481b19178b5c1cd14837cf3149ae0fda22074"}, "downloads": -1, "filename": "custconsole-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e1042c298bf03fc62aeb861a8f26abea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13290, "upload_time": "2020-03-23T23:50:45", "upload_time_iso_8601": "2020-03-23T23:50:45.375822Z", "url": "https://files.pythonhosted.org/packages/c8/3c/bd10a755e54d7b3d5a042714ffcd5e182424acff7da543e2904bfb244abe/custconsole-0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "11e7d8c0abc50927f0ffebb5a7fff7b0", "sha256": "edca4612d7b2d1b5fee3b02fa46013922a7ed1f3bedce0ee6cceca41c892fe1f"}, "downloads": -1, "filename": "custconsole-0.1.tar.gz", "has_sig": false, "md5_digest": "11e7d8c0abc50927f0ffebb5a7fff7b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15468, "upload_time": "2020-03-23T23:50:47", "upload_time_iso_8601": "2020-03-23T23:50:47.467534Z", "url": "https://files.pythonhosted.org/packages/ff/22/f974932809d3e79bbeb1f96f7ab7610ac4a8f03b7d51531b19ac65d1795b/custconsole-0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1042c298bf03fc62aeb861a8f26abea", "sha256": "2e6bb0417dd299ae16a3269c0b4481b19178b5c1cd14837cf3149ae0fda22074"}, "downloads": -1, "filename": "custconsole-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e1042c298bf03fc62aeb861a8f26abea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13290, "upload_time": "2020-03-23T23:50:45", "upload_time_iso_8601": "2020-03-23T23:50:45.375822Z", "url": "https://files.pythonhosted.org/packages/c8/3c/bd10a755e54d7b3d5a042714ffcd5e182424acff7da543e2904bfb244abe/custconsole-0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "11e7d8c0abc50927f0ffebb5a7fff7b0", "sha256": "edca4612d7b2d1b5fee3b02fa46013922a7ed1f3bedce0ee6cceca41c892fe1f"}, "downloads": -1, "filename": "custconsole-0.1.tar.gz", "has_sig": false, "md5_digest": "11e7d8c0abc50927f0ffebb5a7fff7b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15468, "upload_time": "2020-03-23T23:50:47", "upload_time_iso_8601": "2020-03-23T23:50:47.467534Z", "url": "https://files.pythonhosted.org/packages/ff/22/f974932809d3e79bbeb1f96f7ab7610ac4a8f03b7d51531b19ac65d1795b/custconsole-0.1.tar.gz"}]}