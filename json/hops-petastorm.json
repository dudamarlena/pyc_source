{"info": {"author": "Uber Technologies, Inc., Kim Hammar", "author_email": "kim@logicalclocks.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "Petastorm\n=========\n\n.. image:: https://travis-ci.com/uber/petastorm.svg?branch=master\n   :target: https://travis-ci.com/uber/petastorm\n   :alt: Build Status (Travis CI)\n\n.. image:: https://codecov.io/gh/uber/petastorm/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/uber/petastorm/branch/master\n   :alt: Code coverage\n\n.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n   :target: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n   :alt: License\n\n.. image:: https://badge.fury.io/py/petastorm.svg\n   :target: https://pypi.org/project/petastorm\n   :alt: Latest Version\n\n.. inclusion-marker-start-do-not-remove\n\n.. contents::\n\n\nPetastorm is an open source data access library developed at Uber ATG. This library enables single machine or\ndistributed training and evaluation of deep learning models directly from datasets in Apache Parquet\nformat. Petastorm supports popular Python-based machine learning (ML) frameworks such as\n`Tensorflow <http://www.tensorflow.org/>`_, `PyTorch <https://pytorch.org/>`_, and\n`PySpark <http://spark.apache.org/docs/latest/api/python/pyspark.html>`_. It can also be used from pure Python code.\n\nDocumentation web site: `<https://petastorm.readthedocs.io>`_\n\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install petastorm\n\n\nThere are several extra dependencies that are defined by the ``petastorm`` package that are not installed automatically.\nThe extras are: ``tf``, ``tf_gpu``, ``torch``, ``opencv``, ``docs``, ``test``.\n\nFor example to trigger installation of GPU version of tensorflow and opencv, use the following pip command:\n\n.. code-block:: bash\n\n    pip install petastorm[opencv,tf_gpu]\n\n\n\nGenerating a dataset\n--------------------\n\nA dataset created using Petastorm is stored in `Apache Parquet <https://parquet.apache.org/>`_ format.\nOn top of a Parquet schema, petastorm also stores higher-level schema information that makes multidimensional arrays into a native part of a petastorm dataset. \n\nPetastorm supports extensible data codecs. These enable a user to use one of the standard data compressions (jpeg, png) or implement her own.\n\nGenerating a dataset is done using PySpark.\nPySpark natively supports Parquet format, making it easy to run on a single machine or on a Spark compute cluster.\nHere is a minimalistic example writing out a table with some random data.\n\n\n.. code-block:: python\n\n    HelloWorldSchema = Unischema('HelloWorldSchema', [\n       UnischemaField('id', np.int32, (), ScalarCodec(IntegerType()), False),\n       UnischemaField('image1', np.uint8, (128, 256, 3), CompressedImageCodec('png'), False),\n       UnischemaField('other_data', np.uint8, (None, 128, 30, None), NdarrayCodec(), False),\n    ])\n\n\n    def row_generator(x):\n       \"\"\"Returns a single entry in the generated dataset. Return a bunch of random values as an example.\"\"\"\n       return {'id': x,\n               'image1': np.random.randint(0, 255, dtype=np.uint8, size=(128, 256, 3)),\n               'other_data': np.random.randint(0, 255, dtype=np.uint8, size=(4, 128, 30, 3))}\n\n\n    def generate_hello_world_dataset(output_url='file:///tmp/hello_world_dataset'):\n       rows_count = 10\n       rowgroup_size_mb = 256\n\n       spark = SparkSession.builder.config('spark.driver.memory', '2g').master('local[2]').getOrCreate()\n       sc = spark.sparkContext\n\n       # Wrap dataset materialization portion. Will take care of setting up spark environment variables as\n       # well as save petastorm specific metadata\n       with materialize_dataset(spark, output_url, HelloWorldSchema, rowgroup_size_mb):\n\n           rows_rdd = sc.parallelize(range(rows_count))\\\n               .map(row_generator)\\\n               .map(lambda x: dict_to_spark_row(HelloWorldSchema, x))\n\n           spark.createDataFrame(rows_rdd, HelloWorldSchema.as_spark_schema()) \\\n               .coalesce(10) \\\n               .write \\\n               .mode('overwrite') \\\n               .parquet(output_url)\n\n- ``HelloWorldSchema`` is an instance of a ``Unischema`` object.\n  ``Unischema`` is capable of rendering types of its fields into different\n  framework specific formats, such as: Spark ``StructType``, Tensorflow\n  ``tf.DType`` and numpy ``numpy.dtype``.\n- To define a dataset field, you need to specify a ``type``, ``shape``, a\n  ``codec`` instance and whether the field is nullable for each field of the\n  ``Unischema``.\n- We use PySpark for writing output Parquet files. In this example, we launch\n  PySpark on a local box (``.master('local[2]')``). Of course for a larger\n  scale dataset generation we would need a real compute cluster.\n- We wrap spark dataset generation code with the ``materialize_dataset``\n  context manager.  The context manager is responsible for configuring row\n  group size at the beginning and write out petastorm specific metadata at the\n  end.\n- The row generating code is expected to return a Python dictionary indexed by\n  a field name. We use ``row_generator`` function for that. \n- ``dict_to_spark_row`` converts the dictionary into a ``pyspark.Row``\n  object while ensuring schema ``HelloWorldSchema`` compliance (shape,\n  type and is-nullable condition are tested).\n- Once we have a ``pyspark.DataFrame`` we write it out to a parquet\n  storage. The parquet schema is automatically derived from\n  ``HelloWorldSchema``.\n\nPlain Python API\n----------------\nThe ``petastorm.reader.Reader`` class is the main entry point for user\ncode that accesses the data from an ML framework such as Tensorflow or Pytorch.\nThe reader has multiple features such as:\n\n- Selective column readout\n- Multiple parallelism strategies: thread, process, single-threaded (for debug)\n- N-grams readout support\n- Row filtering (row predicates)\n- Shuffling\n- Partitioning for multi-GPU training\n- Local caching\n\nReading a dataset is simple using the ``petastorm.reader.Reader`` class which can be created using the\n``petastorm.make_reader`` factory method:\n\n.. code-block:: python\n\n   from petastorm import make_reader\n\n    with make_reader('hdfs://myhadoop/some_dataset') as reader:\n       for row in reader:\n           print(row)\n\n``hdfs://...`` and ``file://...`` are supported URL protocols.\n\nOnce a ``Reader`` is instantiated, you can use it as an iterator.\n\nTensorflow API\n--------------\n\nTo hookup the reader into a tensorflow graph, you can use the ``tf_tensors``\nfunction:\n\n.. code-block:: python\n\n    with make_reader('file:///some/localpath/a_dataset') as reader:\n       row_tensors = tf_tensors(reader)\n       with tf.Session() as session:\n           for _ in range(3):\n               print(session.run(row_tensors))\n\nAlternatively, you can use new ``tf.data.Dataset`` API;\n\n.. code-block:: python\n\n    with make_reader('file:///some/localpath/a_dataset') as reader:\n        dataset = make_petastorm_dataset(reader)\n        iterator = dataset.make_one_shot_iterator()\n        tensor = iterator.get_next()\n        with tf.Session() as sess:\n            sample = sess.run(tensor)\n            print(sample.id)\n\nPytorch API\n-----------\n\nAs illustrated in\n`pytorch_example.py <https://github.com/uber/petastorm/blob/master/examples/mnist/pytorch_example.py>`_,\nreading a petastorm dataset from pytorch\ncan be done via the adapter class ``petastorm.pytorch.DataLoader``,\nwhich allows custom pytorch collating function and transforms to be supplied.\n\nBe sure you have ``torch`` and ``torchvision`` installed:\n\n.. code-block:: bash\n\n    pip install torchvision\n\nThe minimalist example below assumes the definition of a ``Net`` class and\n``train`` and ``test`` functions, included in ``pytorch_example``:\n\n.. code-block:: python\n\n    import torch\n    from petastorm.pytorch import DataLoader\n\n    torch.manual_seed(1)\n    device = torch.device('cpu')\n    model = Net().to(device)\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.5)\n\n    def _transform_row(mnist_row):\n        transform = transforms.Compose([\n            transforms.ToTensor(),\n            transforms.Normalize((0.1307,), (0.3081,))\n        ])\n        return (transform(mnist_row['image']), mnist_row['digit'])\n\n\n    transform = TransformSpec(_transform_row, removed_fields=['idx'])\n\n    with DataLoader(make_reader('file:///localpath/mnist/train', num_epochs=10,\n                                transform_spec=transform), batch_size=64) as train_loader:\n        train(model, device, train_loader, 10, optimizer, 1)\n    with DataLoader(make_reader('file:///localpath/mnist/test', num_epochs=10,\n                                transform_spec=transform), batch_size=1000) as test_loader:\n        test(model, device, test_loader)\n\nPySpark and SQL\n---------------\n\nUsing the Parquet data format, which is natively supported by Spark, makes it possible to use a wide range of Spark\ntools to analyze and manipulate the dataset. The example below shows how to read a Petastorm dataset\nas a Spark RDD object:\n\n.. code-block:: python\n\n   # Create a dataframe object from a parquet file\n   dataframe = spark.read.parquet(dataset_url)\n\n   # Show a schema\n   dataframe.printSchema()\n\n   # Count all\n   dataframe.count()\n\n   # Show a single column\n   dataframe.select('id').show()\n\nSQL can be used to query a Petastorm dataset:\n\n.. code-block:: python\n\n   spark.sql(\n      'SELECT count(id) '\n      'from parquet.`file:///tmp/hello_world_dataset`').collect()\n\nYou can find a full code sample here: `pyspark_hello_world.py <https://github.com/uber/petastorm/blob/master/examples/hello_world/petastorm_dataset/pyspark_hello_world.py>`_,\n\nNon Petastorm Parquet Stores\n----------------------------\nPetastorm can also be used to read data directly from Apache Parquet stores. To achieve that, use\n``make_batch_reader`` (and not ``make_reader``). The following table summarizes the differences\n``make_batch_reader`` and ``make_reader`` functions.\n\n\n==================================================================  =====================================================\n``make_reader``                                                     ``make_batch_reader``\n==================================================================  =====================================================\nOnly Petastorm datasets (created using materializes_dataset)        Any Parquet store (some native Parquet column types\n                                                                    are not supported yet.\n------------------------------------------------------------------  -----------------------------------------------------\nThe reader returns one record at a time.                            The reader returns batches of records. The size of the\n                                                                    batch is not fixed and defined by Parquet row-group\n                                                                    size.\n------------------------------------------------------------------  -----------------------------------------------------\nPredicates passed to ``make_reader`` are evaluated per single row.  Predicates passed to ``make_batch_reader`` are evaluated per batch.\n==================================================================  =====================================================\n\n\nTroubleshooting\n---------------\n\nSee the Troubleshooting_ page and please submit a ticket_ if you can't find an\nanswer.\n\n\nPublications\n------------\n\n1. Gruener, R., Cheng, O., and Litvin, Y. (2018) *Introducing Petastorm: Uber ATG's Data Access Library for Deep Learning*. URL: https://eng.uber.com/petastorm/\n\n\n.. _Troubleshooting: docs/troubleshoot.rst\n.. _ticket: https://github.com/uber/petastorm/issues/new\n.. _Development: docs/development.rst\n\nHow to Contribute\n=================\n\nWe prefer to receive contributions in the form of GitHub pull requests. Please send pull requests against the ``github.com/uber/petastorm`` repository.\n\n- If you are looking for some ideas on what to contribute, check out `github issues <https://github.com/uber/petastorm/issues>`_ and comment on the issue.\n- If you have an idea for an improvement, or you'd like to report a bug but don't have time to fix it please a `create a github issue <https://github.com/uber/petastorm/issues/new>`_.\n\nTo contribute a patch:\n\n- Break your work into small, single-purpose patches if possible. It's much harder to merge in a large change with a lot of disjoint features.\n- Submit the patch as a GitHub pull request against the master branch. For a tutorial, see the GitHub guides on forking a repo and sending a pull request.\n- Include a detailed describtion of the proposed change in the pull request.\n- Make sure that your code passes the unit tests. You can find instructions how to run the unit tests `here <https://github.com/uber/petastorm/blob/master/docs/development.rst>`_.\n- Add new unit tests for your code.\n\nThank you in advance for your contributions!\n\n\nSee the Development_ for development related information.\n\n\n.. inclusion-marker-end-do-not-remove\n   Place contents above here if they should also appear in read-the-docs.\n   Contents below are already part of the read-the-docs table of contents.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/logicalclocks/petastorm", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "hops-petastorm", "package_url": "https://pypi.org/project/hops-petastorm/", "platform": "", "project_url": "https://pypi.org/project/hops-petastorm/", "project_urls": {"Homepage": "https://github.com/logicalclocks/petastorm"}, "release_url": "https://pypi.org/project/hops-petastorm/0.7.6/", "requires_dist": null, "requires_python": "", "summary": "Petastorm is a library enabling the use of Parquet storage from Tensorflow, Pytorch, and other Python-based ML training frameworks. This is a fork of Petastorm that is compatible with Hops installations", "version": "0.7.6"}, "last_serial": 5792124, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "9e37cf62eb1608e630f46fac0c2a9bd9", "sha256": "f355bac1aa7eb937af5485ebc745af5074fc8db360a8ace7a1960d3b33cc3885"}, "downloads": -1, "filename": "hops-petastorm-0.6.0.tar.gz", "has_sig": false, "md5_digest": "9e37cf62eb1608e630f46fac0c2a9bd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153803, "upload_time": "2019-03-05T21:37:34", "upload_time_iso_8601": "2019-03-05T21:37:34.185790Z", "url": "https://files.pythonhosted.org/packages/d8/90/0d693897fc8cc057c4da47fe1041a2750b6f308c8ddc00d57bb31b451248/hops-petastorm-0.6.0.tar.gz"}], "0.7.0": [{"comment_text": "", "digests": {"md5": "8e9ddf633c20a977dc0496b6dd6b6d11", "sha256": "bb2ab686b4f657589c50a339d6fc5f7966a3c0f1b6bdac22b03d9a017d5718d9"}, "downloads": -1, "filename": "hops-petastorm-0.7.0.tar.gz", "has_sig": false, "md5_digest": "8e9ddf633c20a977dc0496b6dd6b6d11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155618, "upload_time": "2019-04-01T14:50:31", "upload_time_iso_8601": "2019-04-01T14:50:31.683043Z", "url": "https://files.pythonhosted.org/packages/30/4d/cad0dc30493799e65e2d755d6e0d37104caeb2c083074058b2fb8e7d3345/hops-petastorm-0.7.0.tar.gz"}], "0.7.2": [{"comment_text": "", "digests": {"md5": "59e3b200f08c1f66d4f42b3f47563b95", "sha256": "aac25fecb40fef786733cf92b62a28b3787521f56d78af06f5fd5f8685513172"}, "downloads": -1, "filename": "hops-petastorm-0.7.2.tar.gz", "has_sig": false, "md5_digest": "59e3b200f08c1f66d4f42b3f47563b95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 160703, "upload_time": "2019-04-27T16:46:51", "upload_time_iso_8601": "2019-04-27T16:46:51.874779Z", "url": "https://files.pythonhosted.org/packages/3c/fd/3dfc5e6eb3eba2e0a6ea4b0f8ab062c4009d106d17a42a7b6328cbf87c1f/hops-petastorm-0.7.2.tar.gz"}], "0.7.4": [{"comment_text": "", "digests": {"md5": "c7fdf638aa400f9106441e9c555cd5c3", "sha256": "b7aab9a1ef01e93dcb79d96fabaec353f939aa973731f42effe180fe3af3b86e"}, "downloads": -1, "filename": "hops_petastorm-0.7.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c7fdf638aa400f9106441e9c555cd5c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 251279, "upload_time": "2019-06-04T11:27:20", "upload_time_iso_8601": "2019-06-04T11:27:20.312953Z", "url": "https://files.pythonhosted.org/packages/de/05/1d27dd7cf6f3f2a2ca9e462469bd869a6b2308cecd357c1acad8194a564f/hops_petastorm-0.7.4-py2.py3-none-any.whl"}], "0.7.6": [{"comment_text": "", "digests": {"md5": "898c8aafdb6c493dd60dd014a4fbb794", "sha256": "a670dba461201048041276daad514e6d6ed1ca836c8506fcd20ba02b29c8a952"}, "downloads": -1, "filename": "hops-petastorm-0.7.6.tar.gz", "has_sig": false, "md5_digest": "898c8aafdb6c493dd60dd014a4fbb794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153537, "upload_time": "2019-09-06T12:58:58", "upload_time_iso_8601": "2019-09-06T12:58:58.523155Z", "url": "https://files.pythonhosted.org/packages/f1/a5/6cd312f4745a86f30ea75db75866c6e3fc73b0a729dd6a81b0043e2f6220/hops-petastorm-0.7.6.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "898c8aafdb6c493dd60dd014a4fbb794", "sha256": "a670dba461201048041276daad514e6d6ed1ca836c8506fcd20ba02b29c8a952"}, "downloads": -1, "filename": "hops-petastorm-0.7.6.tar.gz", "has_sig": false, "md5_digest": "898c8aafdb6c493dd60dd014a4fbb794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 153537, "upload_time": "2019-09-06T12:58:58", "upload_time_iso_8601": "2019-09-06T12:58:58.523155Z", "url": "https://files.pythonhosted.org/packages/f1/a5/6cd312f4745a86f30ea75db75866c6e3fc73b0a729dd6a81b0043e2f6220/hops-petastorm-0.7.6.tar.gz"}]}