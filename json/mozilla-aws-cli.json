{"info": {"author": "Mozilla Enterprise Information Security", "author_email": "iam@discourse.mozilla.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# mozilla-aws-cli\n\nCommand line tool to enable accessing AWS using federated single sign on\n\n## Prerequisites\n\n* An OIDC provider like Auth0\n* A well-known `openid-configuration` URL\n* An Auth0 [application](https://auth0.com/docs/applications) created\n  * Type : Native\n  * Allowed Callback URLs : A list of the localhost URLs created from the\n    POSSIBLE_PORTS list of ports\n  * The `client_id` for this application will be used in the CLI config file\n* An AWS Identity provider\n  * with an audience value of the Auth0 application client_id\n  * with a [valid thumbprint](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html)\n\n## Instructions\n\nUsers can either configure Mozilla AWS CLI with a [python package](#creating-enterprise--organization-configuration)\nprovided by their organization, or they can create a config file by hand.\n\n## Create a config file\n\nThe default files that configuration is fetched from are\n* Windows\n  * `C:\\Users\\<user>\\AppData\\Roaming\\Mozilla AWS CLI\\config.ini`\n  * `C:\\ProgramData\\Mozilla AWS CLI\\config.ini`\n* Mac\n  * `/Users/<user>/.config/maws/config.ini`\n  * `/etc/maws/config.ini`\n* Linux\n  * `/etc/xdg/xdg-ubuntu/maws/config.ini` (for Ubuntu)\n  * `/home/<user>/.config/maws/config.ini`\n\nwhere settings in `/etc` or `C:\\ProgramData` are overridden by settings in \n`C:\\Users\\<user>\\AppData\\Roaming\\` or `~/.config/maws/` or `/Users/`.\n\nUsers can also assert which config file(s) to read from using the `-c` or `--config`\ncommand line arguments.\n\nThese config files use the standard [INI file format](https://en.wikipedia.org/wiki/INI_file).\n\nThe `config` file should contain a single section called `[maws]` and can\ncontain the following settings.\n\nThere are three *required* settings which must either be set in a [python package](#creating-enterprise--organization-configuration)\nprovided by the organization or in the user's config file. Those required\nsettings are\n\n* `well_known_url`: The\n  [OpenID Connect Discovery Endpoint URL](https://openid.net/specs/openid-connect-discovery-1_0.html).\n  ([Auth0](https://auth0.com/docs/protocols/oidc/openid-connect-discovery))\n* `client_id`: The Auth0 `client_id` generated when the Auth0\n  [application](https://auth0.com/docs/applications) was created in the\n  prerequisites\n* `idtoken_for_roles_url` : The URL of the ID Token For Roles API. This URL\n  comes from the location that the user's organization has deployed the\n  [idtoken_for_roles](https://github.com/mozilla-iam/mozilla-aws-cli/tree/master/cloudformation)\n  API. This API lets a user exchange an ID token for a list of groups and roles\n  that they have rights to. This URL should be the base URL of the API, ending\n  in `/`\n\nAdditional optional settings that can be configured in the config file are\n\n* `scope`: A space delimited list of\n  [OpenID Connect Scopes](https://auth0.com/docs/scopes/current/oidc-scopes).\n  For example `openid`. Avoid including a scope which passes too much data which\n  will exceed the maximum AWS allowed size of the ID Token (for example at\n  Mozilla we neglect to include the raw full group list which is included in the\n  ID Token when the `https://sso.mozilla.com/claim/groups` scope is requested.\n* `output` : The output format for the tool to use. This must be one of the\n  following values\n  * `envvar` : A set of environment variables that load the temporary\n    credentials directly in to the environment without writing them to a file\n  * `shared` : A set of environment variables that reference a dedicated maws\n    AWS config file which is created\n  * `awscli` : A set of environment variables that reference the default AWS\n    CLI / AWS SDK config file which is written to\n* `print_role_arn` : Whether or not `maws` should display the AWS IAM Role ARN\n  on the command line. This can values like `yes`, `no`, `true`, `false`\n\nThe resulting config would looks something like this\n```ini\n[maws]\nclient_id = abcdefg\nidtoken_for_roles_url = https://roles-and-aliases.example/roles\nwell_known_url = http://auth.example.com/.well-known/openid-configuration\n```\n\n## Run the tool\n\nThere are various ways you can run `maws`. The tool can output environment\nvariable setting text to activate your AWS session inside your terminal. Here\nare some methods to use the tool.\n\n### Subcommand\n\nYou could run `maws` within a `$()` sub-shell and execute the results\n\n* Interactively prompt for which IAM role to assume\n  * `$(maws)`\n* Pass the IAM role to assume as a command line argument\n  * `$(maws --role-arn arn:aws:iam::123456789012:role/example-role)`\n* Not only enable command line access to AWS, also log into the web console\n  * `$(maws -w)`\n\n> :warning: **Users of [YADR](https://github.com/skwp/dotfiles) and zsh**:\n> Subcommands can result in a broken authentication flow, and so it is\n> recommended that you use either process substitution or `eval`, as described\n> below.\n\n### Process substitution\n\nThis uses [process substitution](http://tldp.org/LDP/abs/html/process-sub.html).\nHere are some examples of how you could run it\n\n`source <(maws -w)`\n\n### Eval\n\nYou could eval the results\n\n`eval $(maws --role-arn arn:aws:iam::123456789012:role/example-role)`\n\n### Copy paste\n\nTake the output of the command and copy paste it into your terminal\n\n`maws`\n\n## Sequence diagram\n\n[<img src=\"https://raw.githubusercontent.com/mozilla-iam/mozilla-aws-cli/master/docs/img/sequence.png\" width=\"100%\">](docs/img/sequence.md)\n\n## Notes\n\n\n```\n# https://community.auth0.com/t/custom-claims-without-namespace/10999\n# https://community.auth0.com/t/how-to-set-audience-for-aws-iam-identity-provider-configuration/12951\n```\n\n## Details\n\nThis is a collection of technical details that we've decided or discovered in\nbuilding the mozilla-aws-cli\n\n* The user group list should be set in the OIDC claim as a list of groups\n  instead of a string with delimiters\n  * The `amr` claim allows for passing a list\n  * By using a list we don't need to worry about choosing a delimiter and\n    ensuring the delimiter is not allowed in the group name\n  * The [`ForAnyValue:StringLike`](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html#Conditions_String)\n    IAM policy condition operator doesn't need `*` wildcard characters in the\n    value since each group listed in the policy is a full group name which will\n    match a full group name in the list passed in `amr`\n* Even if you only wish to allow a single user group to assume a role, you still\n  must use the [`ForAnyValue:StringLike`](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_multi-value-conditions.html)\n  operator, not the `StringLike` operator. It's not clear why this is the case.\n* AWS has a maximum size that either the `id_token` or the `amr` assertion can\n  be.\n  * When this maximum size is exceeded AWS returns the error \n    `PackedPolicyTooLarge Serialized token too large for session`\n  * It's possible that the size limit is not able to be determined because\n    AWS performs a packing or compression step on it's size such that the size\n    of the `amr` assertion doesn't have a linear relationship with the size\n    of the object AWS tests against it's limit\n  * For example a `amr` value that is a list of 30 group names with an \n    `id_token` length of 800 characters triggers this error.\n* Currently, when a user logs into Auth0 for the first time and performs a Duo\n  MFA authentication, Auth0 overwrites the `amr` assertion that we create with\n  a new list containing a single element `[\"mfa\"]`. We've \n  [opened a bug with Auth0](https://support.auth0.com/tickets/00427989) in hopes\n  that they will change to *appending* to the `amr` assertion.\n  * If they make this change, the `amr` assertion would, in that case, contain\n    the list of groups *and* what would appear like a group called `mfa`. We\n    would need to do some checks to ensure that nobody starts using a real group\n    called `mfa`\n* The `amr` assertion in the OIDC spec isn't supposed to be used to pass a list\n  of groups. It's also not supposed to be used to pass a string like \n  `authenticated` like AWS does with cognito.\n  * The [purpose of the `amr` assertion](https://tools.ietf.org/html/rfc8176#section-1)\n    is to provide an RP with a list of \n    > identifiers for authentication methods used in the authentication\n  * [RFC8176](https://tools.ietf.org/html/rfc8176#page-4) states\n    > The \"amr\" values defined by this specification are not intended to be\n    > an exhaustive set covering all use cases.  Additional values can and\n    > will be added to the registry by other specifications.\n  * The RFC then goes on to define a [list of allowed values](https://tools.ietf.org/html/rfc8176#section-2)\n    which make it clear that `authenticated` or group names are not correct\n  * Given this, it's possible that down the road\n    * AWS will begin to use a different assertion than `amr` to conform to the\n      spec\n    * Auth0 will disallow setting non conforming values in `amr`\n  * If this happens we would need to change how we do things\n* By having an Auth0 rule that queries some external resource (such as the\n  group to role mapping file) and added delay to login is introduced and a risk\n  of a problem in fetching the mapping file which could cause login to fail\n* We use the `amr` assertion because it appears to be the only way to pass data\n  to AWS\n  * The [documentation](https://docs.aws.amazon.com/it_it/IAM/latest/UserGuide/list_awssecuritytokenservice.html#awssecuritytokenservice-web-identity-provider_oaud)\n    indicates that there are 3 assertions that can be used in IAM policy\n    conditions, `aud` `oaud` and `sub`\n  * In testing we've found that\n    `aud` is passed and we use it for the Auth0 client ID\n    `sub` is passed and we use it for the Auth0 username\n    `oaud` is not passed\n    `amr` is passed\n* By passing a group list in the `amr` assertion we take on the following risks\n  * At some point some user may try to login to AWS with SSO and login will fail\n    due to the `PackedPolicyTooLarge` error. This will occur when\n    * Enough AWS account holders across our many AWs accounts create IAM \n      policies which allow a diverse set of user groups to access various roles\n    * This unlucky user has access to so many different AWS accounts and roles\n      because they work across many teams that the union of all the AWS groups\n      which grant them access to the various roles exceeds the\n      `PackedPolicyTooLarge` limit\n  * We can't be sure at the point that we send the assertion that it will fail\n    because we can't know the hard limit on the size of the `amr` assertion or\n    the `id_token` in total\n* We plan to try to log and track users experience over time to see if the\n  group list size issue is becoming a problem. To do so we'll want to see\n  * The size of the `amr` assertion being passed each time a user logs in\n  * If AWS ever returns a `PackedPolicyTooLarge` error\n\n### Supported IAM Policy Features\n\nThe Auth0 rule which finds the intersection in the groups a user is a member of\nwith the union of all groups used in all AWS accounts IAM policies won't\nsupport [all IAM policy operators](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html#Conditions_String).\nHere are the various use cases and whether they are supported or not\n\n\n#### Supported\nAn AWS account holder wants to\n\n* enable users that are members of group \"foo\" to assume role \n  arn:aws:iam::123456789012:role/baz\n  * supported\n  * `StringLike`, `StringEquals`\n* enable users that are members of group \"foo\" as well as users that are members\n  of group \"bar\" to assume role arn:aws:iam::123456789012:role/baz\n  * supported\n  * `StringLike`, `StringEquals` for a list of values\n* enable users that are members of any group like \"fo*\" to assume role\n  arn:aws:iam::123456789012:role/baz\n  * supported\n  * `StringLike` with wildcards\n\n#### Not Supported\nAn AWS account holder wants to\n\n* enable users that are members of both group \"foo\" and group \"bar\" to assume\n  role arn:aws:iam::123456789012:role/baz\n  * not supported\n  * multiple `StringLike` or `StringEquals` conditions\n* enable users that are members of group \"foo\" but not allow users that are\n  members of group \"FOO\" to assume role arn:aws:iam::123456789012:role/baz\n  * not supported\n  * when assembling the group list to pass to AWS, we will do case insensitive\n    matching. Additionally, there shouldn't ever be a case where two groups\n    exist with the same characters in their name but different cases\n  * multiple `StringEquals` conditions where the values differ only in case\n* enable users that are not members of group \"bar\" to assume role\n  arn:aws:iam::123456789012:role/baz\n  * not supported\n  * `StringNotEquals`, `StringNotLike`\n* enable users that are members of group \"foo\" but not members of group \"bar\"\n  to assume role arn:aws:iam::123456789012:role/baz\n  * not supported\n  * multiple conditions including `StringNotEquals`, `StringNotLike`\n\n## Troubleshooting\n\nIf you don't see a role listed in the role picker which you would expect to have\naccess to, possible reasons are :\n\n* The IAM role was recently modified and\n  1. the hourly scanner hasn't yet run to update the list of available roles.\n  2. the list of available roles is current but the API that sits in front of\n     it is using an out of date cached copy\n  3. the list of available roles is current but the Auth0 rule is using an out\n     of date cached copy of the available roles and as a result, isn't passing\n     an \"amr\" claim with your current complete list of groups\n  * If the cause is 1 or 2 you can still assume that role, just not using this\n    menu. Instead pass the role ARN on the command line.\n* The conditions in the role don't allow you to access it because\n  * The role has a different \"Principal\" \"Federated\" value than it should\n    * Dev\n      * Federated : `arn:aws:iam::*:oidc-provider/auth.mozilla.auth0.com/`\n      * Aud : `N7lULzWtfVUDGymwDs0yDEq6ZcwmFazj`\n    * Prod\n      * Federated : `arn:aws:iam::*:oidc-provider/auth-dev.mozilla.auth0.com/`\n      * Aud : `xRFzU2bj7Lrbo3875aXwyxIArdkq1AOT`\n  * The role has the wrong \"Action\" value which should be\n    * `sts:AssumeRoleWithWebIdentity`\n  * The role has an \"aud\" condition that doesn't match the Auth0 client ID\n    being passed in the \"aud\" claim from Auth0\n    * Dev : `xRFzU2bj7Lrbo3875aXwyxIArdkq1AOT`\n    * Prod : `N7lULzWtfVUDGymwDs0yDEq6ZcwmFazj`\n  * The key name of the \"aud\" condition is incorrect\n    * Dev : `auth-dev.mozilla.auth0.com/:aud`\n    * Prod : `auth.mozilla.auth0.com/:aud`\n  * The key name of the \"amr\" condition is incorrect\n    * Dev : `auth-dev.mozilla.auth0.com/:amr`\n    * Prod : `auth.mozilla.auth0.com/:amr`\n  * You aren't a member of any of the groups listed in \"amr\" conditions\n* Your AWS account does not delegate security auditing rights to the Enterprise\n  Information Security team so the group role map builder can't scan the IAM\n  roles in your AWS account\n* There is a bug\n  * in the Auth0 rule that filters the list of groups that you are a member of\n    such that the \"amr\" claim returned to you is missing a group that you need\n    to meet an IAM Role condition\n  * in the group role map builder that produces the map of groups to roles to\n    enable the Auth0 rule and the role picker menu to know which roles are\n    available to you\n  * in the ID token for role API that allows you to exchange your ID token for\n    a list of roles so that the role picker can show you a menu of available\n    roles\n\n## Development\n\nWhen developing the tool and testing you can run it without installing it like\nthis\n\n`python -m mozilla_aws_cli.cli --role-arn arn:aws:iam::123456789012:role/example-role`\n\nNote : You must run `python -m mozilla_aws_cli.cli` instead of\n`python mozilla_aws_cli/cli.py` because mozilla_aws_cli uses absolute imports.\n\n## Creating enterprise / organization configuration\n\nIf you want to deploy the Mozilla AWS CLI across your organization and establish\ndefault configuration values without requiring users to create config files you\ncan do so by implementing a standard `mozilla_aws_cli_config` module.\n\nHere are the steps assuming an example organization called Yoyodyne\n\n1. Create a new code repo. A good name would be `mozilla-aws-cli-yoyodyne`\n2. In that repo create a `setup.py`\n   ```python\n   #!/usr/bin/env python\n\n   from setuptools import setup\n\n   setup(\n       name=\"mozilla-aws-cli-yoyodyne\",\n       description=\"Yoyodyne specific deployment of the mozilla_aws_cli\",\n       install_requires=[\"mozilla_aws_cli\"],\n       packages=[\"mozilla_aws_cli_config\"],\n       url=\"https://github.com/yoyodyne/mozilla-aws-cli-yoyodyne\",\n       version=\"1.0.0\",\n   )\n   ```\n   * `install_requires` depends on the `mozilla_aws_cli` to ensure that if you\n     instruct the user to `pip install mozilla-aws-cli-yoyodyne` they will get\n     the Yoyodyne config and the tool\n3. Create a directory called `mozilla_aws_cli_config`\n   * This is the reserved / well known module name that every organization can\n     implement. This name must be `mozilla_aws_cli_config` exactly and not\n     include any part of your organization name (e.g. Yoyodyne)\n4. Within that `mozilla_aws_cli_config` directory create a single `__init__.py`\n   file. This will contain your organizations default configuration settings\n5. In this `__init__.py` file create a single variable called `config`\n   containing your organizations default configuration settings.\n   * Yoyodyne's `__init__.py` might look like\n     ```python\n     config = {\n         \"client_id\": \"abcdefghiJKLMNOPQRSTUVWXYZ012345\",\n         \"idtoken_for_roles_url\": \"https://roles-and-aliases.sso.yoyodyne.com/roles\",\n         \"well_known_url\": \"https://auth.yoyodyne.auth0.com/.well-known/openid-configuration\"\n     }\n     ```\n\nThe resulting repository called `mozilla-aws-cli-yoyodyne` would look like this\n\n```\nmozilla-aws-cli-yoyodyne/\n\u251c\u2500\u2500 mozilla_aws_cli_config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 setup.py\n```\n\n## Other projects in this space\n\n* https://github.com/aidan-/aws-cli-federator\n* https://github.com/Nike-Inc/gimme-aws-creds\n* https://github.com/sportradar/aws-azure-login\n* https://github.com/oktadeveloper/okta-aws-cli-assume-role\n* https://github.com/jmhale/okta-awscli\n* https://github.com/prolane/samltoawsstskeys\n* https://github.com/physera/onelogin-aws-cli\n* https://github.com/kxseven/axe/blob/master/bin/subcommands/axe-token-krb5formauth-create\n* https://github.com/openstandia/aws-cli-oidc\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mozilla-iam/mozilla-aws-cli", "keywords": "maws Mozilla AWS CLI", "license": "", "maintainer": "", "maintainer_email": "", "name": "mozilla-aws-cli", "package_url": "https://pypi.org/project/mozilla-aws-cli/", "platform": "", "project_url": "https://pypi.org/project/mozilla-aws-cli/", "project_urls": {"Homepage": "https://github.com/mozilla-iam/mozilla-aws-cli"}, "release_url": "https://pypi.org/project/mozilla-aws-cli/1.1.1/", "requires_dist": ["appdirs", "Click (>=6.0)", "flask (>=1.0.2)", "future", "requests (>=2.20.1)", "python-jose", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "python-jose ; extra == 'test'", "requests-mock ; extra == 'test'", "mock ; (python_version < \"3.3\") and extra == 'test'"], "requires_python": "", "summary": "Command line tool to enable accessing AWS using federated single sign on", "version": "1.1.1"}, "last_serial": 6669195, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "c8163568cb60da149229b43565c41750", "sha256": "214685ff3900c7d99a9b5e0b28689714f1a6ca6e282e858767202c20fb7d1eba"}, "downloads": -1, "filename": "mozilla_aws_cli-0.0.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "c8163568cb60da149229b43565c41750", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 355794, "upload_time": "2019-11-20T01:41:51", "upload_time_iso_8601": "2019-11-20T01:41:51.631245Z", "url": "https://files.pythonhosted.org/packages/28/8d/6c7e01d868882d3159d9871a942ab9627de4ae1dbedc2d12b50c20eb102e/mozilla_aws_cli-0.0.2-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "696ae27f8afc90788dca5ef4df086d2b", "sha256": "0291804df824c1dbd3e8d6d3e68e5841ea09ab528ab97c8f2dd6ca2ad6f004e2"}, "downloads": -1, "filename": "mozilla_aws_cli-0.0.2.tar.gz", "has_sig": true, "md5_digest": "696ae27f8afc90788dca5ef4df086d2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 479593, "upload_time": "2019-11-20T01:41:55", "upload_time_iso_8601": "2019-11-20T01:41:55.176435Z", "url": "https://files.pythonhosted.org/packages/7c/9b/eaf235371d86a570f9aeb82e9312278d6e8aba81ee605210fe1821790f20/mozilla_aws_cli-0.0.2.tar.gz"}], "0.1.0": [{"comment_text": "", "digests": {"md5": "6a58cedbfc53bb66073c887c8ed8acd8", "sha256": "86b7c0fca657833c5b23504dff9e656ad2fbee2eb156f9bac995caf897d009c4"}, "downloads": -1, "filename": "mozilla_aws_cli-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "6a58cedbfc53bb66073c887c8ed8acd8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 354964, "upload_time": "2019-11-20T18:23:50", "upload_time_iso_8601": "2019-11-20T18:23:50.131509Z", "url": "https://files.pythonhosted.org/packages/ed/f2/8614ea740bde0bd9a14a8e6bf6701ae8ddc4a742c866426bb67702cbd752/mozilla_aws_cli-0.1.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "4be3b77118a006897af89795cbe0db53", "sha256": "6282df0d60742fb11eafd7794a9625b8830b3ace44e3dc0d944b9569a08fb76d"}, "downloads": -1, "filename": "mozilla_aws_cli-0.1.0.tar.gz", "has_sig": true, "md5_digest": "4be3b77118a006897af89795cbe0db53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 134354, "upload_time": "2019-11-20T18:23:52", "upload_time_iso_8601": "2019-11-20T18:23:52.177452Z", "url": "https://files.pythonhosted.org/packages/c0/8d/2b4f80b996c805be2d2b6ce8aab2a87a45fe8113c08c0f3bbf4cc34e0411/mozilla_aws_cli-0.1.0.tar.gz"}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c111d7a24b10b8230f8928fa84d1c63a", "sha256": "4c0b2d86dde677ef553322b67c2f6c1a96f3414b3bf2360986dfee2ff6c786ea"}, "downloads": -1, "filename": "mozilla_aws_cli-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c111d7a24b10b8230f8928fa84d1c63a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 354974, "upload_time": "2019-11-21T18:47:58", "upload_time_iso_8601": "2019-11-21T18:47:58.891244Z", "url": "https://files.pythonhosted.org/packages/89/68/ac061a423789d2bd40d7f4d9622ef8e551423ae7829b70afd19be1d41ad9/mozilla_aws_cli-0.1.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "07a533487b901dccfdc3cd1047636b5b", "sha256": "1b4f64bbfd835be1b61f5672e4778f9a21426c6df318aab1357121c5a4bcc965"}, "downloads": -1, "filename": "mozilla_aws_cli-0.1.1.tar.gz", "has_sig": false, "md5_digest": "07a533487b901dccfdc3cd1047636b5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 130073, "upload_time": "2019-11-21T18:48:00", "upload_time_iso_8601": "2019-11-21T18:48:00.812423Z", "url": "https://files.pythonhosted.org/packages/dc/a9/b89f3ff6e0687cf36dd0dfbd57a10c66017ee102b3e007a176d33672ce74/mozilla_aws_cli-0.1.1.tar.gz"}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9a900b78141459044c867804795f9eb5", "sha256": "2e3e3f4182bc1ca6d58096d878ba9f87ce0102302ff707e53d8e609995fe767f"}, "downloads": -1, "filename": "mozilla_aws_cli-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "9a900b78141459044c867804795f9eb5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 359747, "upload_time": "2019-12-06T22:32:05", "upload_time_iso_8601": "2019-12-06T22:32:05.226668Z", "url": "https://files.pythonhosted.org/packages/66/93/d5987e17c7b736135c33c4eb6a6656ed8a59dd08b0057cfbf0cde79c5f6e/mozilla_aws_cli-0.2.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1a8b90e2b21590cd5f615dcf77fae01b", "sha256": "eceae6fd9dd4dba142c04c68257fdb11ad3409c8874f83426f2f856be427ecc2"}, "downloads": -1, "filename": "mozilla_aws_cli-0.2.0.tar.gz", "has_sig": true, "md5_digest": "1a8b90e2b21590cd5f615dcf77fae01b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 488452, "upload_time": "2019-12-06T22:32:11", "upload_time_iso_8601": "2019-12-06T22:32:11.429951Z", "url": "https://files.pythonhosted.org/packages/f7/b9/61d563de94b7d0d89a946fef904b4561dc05fc36860eb80b114a4c079a47/mozilla_aws_cli-0.2.0.tar.gz"}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f19dafdb0e51d6a69f5e9fe71a2476bf", "sha256": "dc0faf192d6d055c504b4e499de604fe173ddd543a25ffbf4de301185668d186"}, "downloads": -1, "filename": "mozilla_aws_cli-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f19dafdb0e51d6a69f5e9fe71a2476bf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 360659, "upload_time": "2020-02-08T12:36:49", "upload_time_iso_8601": "2020-02-08T12:36:49.636265Z", "url": "https://files.pythonhosted.org/packages/16/15/e216a6ebeca8f5343e9a70fe97f545a6a69fae56bb44b04dd40dd56c017c/mozilla_aws_cli-1.0.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "ba5d24cd72ee87e262f604ee074ddcbd", "sha256": "10d9376edf6dbd18936807ad1d7f0ae9c153f4501b654b489752378b01311adc"}, "downloads": -1, "filename": "mozilla_aws_cli-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ba5d24cd72ee87e262f604ee074ddcbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 136607, "upload_time": "2020-02-08T12:36:51", "upload_time_iso_8601": "2020-02-08T12:36:51.122865Z", "url": "https://files.pythonhosted.org/packages/a6/2a/c1b68e1a7e1307e37398dd747e9f08bf692567adb5843c5e09c20a40ae2d/mozilla_aws_cli-1.0.0.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a4c528ed4e83de8154e6f1b319c05c2e", "sha256": "9c2f1783a7b14b926a5c732d7cfe74feaf7194174629d655e52a229003a0eae8"}, "downloads": -1, "filename": "mozilla_aws_cli-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a4c528ed4e83de8154e6f1b319c05c2e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 360741, "upload_time": "2020-02-13T21:15:27", "upload_time_iso_8601": "2020-02-13T21:15:27.163885Z", "url": "https://files.pythonhosted.org/packages/6f/7e/6ccde184b2bc6edb034467682c96b5669b5db84002944be045e348960da6/mozilla_aws_cli-1.1.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "3363a2eb474f660a31ed90774ecb7597", "sha256": "af54a9ea057967c799c150b292fd0459a480c0478728cf73c4c79c717795fdc0"}, "downloads": -1, "filename": "mozilla_aws_cli-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3363a2eb474f660a31ed90774ecb7597", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 136599, "upload_time": "2020-02-13T21:15:28", "upload_time_iso_8601": "2020-02-13T21:15:28.580721Z", "url": "https://files.pythonhosted.org/packages/c8/6b/0c9a0f294810f84b843dc0fbd0e21e96ccf3674abb994d3a8fabe6eff7b7/mozilla_aws_cli-1.1.0.tar.gz"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "7b8374b2a52f2526a7fbf181071ff808", "sha256": "b57a1894a84996130e1ddae3ab529b0608f8c37b7d2020a0a06908e0ce0158f9"}, "downloads": -1, "filename": "mozilla_aws_cli-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7b8374b2a52f2526a7fbf181071ff808", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 360782, "upload_time": "2020-02-20T16:40:35", "upload_time_iso_8601": "2020-02-20T16:40:35.780774Z", "url": "https://files.pythonhosted.org/packages/86/9d/b2d0cc6b41dbfd6bae5e29990a7319cff73f0e7583c13d497d13f29af8bb/mozilla_aws_cli-1.1.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "674d9886661bb3a2174e015785a6cc66", "sha256": "1156a7e3df176343223b87bbfa6c5590af10a91390ae60cc43529c4132d81e5e"}, "downloads": -1, "filename": "mozilla_aws_cli-1.1.1.tar.gz", "has_sig": false, "md5_digest": "674d9886661bb3a2174e015785a6cc66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 136640, "upload_time": "2020-02-20T16:40:37", "upload_time_iso_8601": "2020-02-20T16:40:37.535150Z", "url": "https://files.pythonhosted.org/packages/3c/89/b4d81887e78fd345babccb9108fbdf6930ac3497ec6453fbdd9336b40338/mozilla_aws_cli-1.1.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b8374b2a52f2526a7fbf181071ff808", "sha256": "b57a1894a84996130e1ddae3ab529b0608f8c37b7d2020a0a06908e0ce0158f9"}, "downloads": -1, "filename": "mozilla_aws_cli-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7b8374b2a52f2526a7fbf181071ff808", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 360782, "upload_time": "2020-02-20T16:40:35", "upload_time_iso_8601": "2020-02-20T16:40:35.780774Z", "url": "https://files.pythonhosted.org/packages/86/9d/b2d0cc6b41dbfd6bae5e29990a7319cff73f0e7583c13d497d13f29af8bb/mozilla_aws_cli-1.1.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "674d9886661bb3a2174e015785a6cc66", "sha256": "1156a7e3df176343223b87bbfa6c5590af10a91390ae60cc43529c4132d81e5e"}, "downloads": -1, "filename": "mozilla_aws_cli-1.1.1.tar.gz", "has_sig": false, "md5_digest": "674d9886661bb3a2174e015785a6cc66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 136640, "upload_time": "2020-02-20T16:40:37", "upload_time_iso_8601": "2020-02-20T16:40:37.535150Z", "url": "https://files.pythonhosted.org/packages/3c/89/b4d81887e78fd345babccb9108fbdf6930ac3497ec6453fbdd9336b40338/mozilla_aws_cli-1.1.1.tar.gz"}]}