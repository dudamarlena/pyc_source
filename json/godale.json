{"info": {"author": "Joachim Ungar", "author_email": "joachim.ungar@eox.at", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# godale\n\nDebauchery tools for concurrent task execution.\n\n[![pipeline status](https://gitlab.eox.at/maps/godale/badges/master/pipeline.svg)](https://gitlab.eox.at/maps/godale/commits/master)\n[![coverage report](https://gitlab.eox.at/maps/godale/badges/master/coverage.svg)](https://gitlab.eox.at/maps/godale/commits/master)\n\nHere you find wrappers around some `concurrent.futures`, `multiprocessing` and `billiard` functions\nto facilitate switching between parallelization implementations:\n\n- `concurrent.futures` multithreading: Python 3 standard tool for multithreading\n- `concurrent.futures` multiprocessing: Python 3 standard tool for multiprocessing\n- `multiprocessing` multiprocessing: Python 3 standard tool for multiprocessing\n- `billiard` multiprocessing: Multiprocessing for `celery` workers.\n\nAll four currently implemented wrappers handle parallel execution of the tasks and yield\nresult (`FinishedTask`) objects having `result()` and `exception()` methods. This enables\ncatching of exceptions without cancelling remaining tasks.\n\n\n## Usage:\n\n\n```python\nfrom godale import Executor\n\n# the first function argument will be replaced by items from the \"items\" argument below\n# subsequent arguments and keyword arguments can be passed on using \"fargs\" and \"fkwargs\"\ndef _worker_function(a, b, some_kwarg=None):\n    return a * b\n\n\n# multiprocessing the Python 3 way\nexecutor = Executor(executor=\"concurrent_processes\")\nfor task in executor.as_completed(\n    func=_worker_function,  # function to be executed\n    iterable=range(100),  # items to be parallelized\n    fargs=(10, ),  # other function arguments\n    fkwargs={\"a_kwarg\"=True}  # function keyword arguments\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n\n# multithreading the Python 3 way\nexecutor = Executor(executor=\"concurrent_threads\")\nfor task in executor.as_completed(\n    func=_worker_function,\n    iterable=range(100),\n    fargs=(10, )\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n\n# multiprocessing within a celery worker\nexecutor = Executor(executor=\"billiard\")\nfor task in executor.as_completed(\n    func=_worker_function,\n    iterable=range(100),\n    fargs=(10, )\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n\n# using the multiprocessing standard module\nexecutor = Executor(executor=\"multiprocessing\")\nfor task in executor.as_completed(\n    func=_worker_function,\n    iterable=range(100),\n    fargs=(10, )\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n\n# use different start_method than \"fork\"\n# NOTE: with concurrent.futures and Python 3.6 and earlier, \"start_method\" other than\n# \"fork\" will raise an RuntimeError\nfor task in executor.as_completed(\n    func=_worker_function,\n    iterable=range(100),\n    fargs=(10, ),\n    start_method=\"spawn\"\n):\n    try:\n        print(task.result())\n    except ValueError:\n        print(\"task failed\")\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "godale", "package_url": "https://pypi.org/project/godale/", "platform": "", "project_url": "https://pypi.org/project/godale/", "project_urls": null, "release_url": "https://pypi.org/project/godale/0.2/", "requires_dist": ["billiard"], "requires_python": "", "summary": "concurrent execution in various flavors", "version": "0.2"}, "last_serial": 6536895, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "972a42c91964cb181cb0959a78c0c5fd", "sha256": "3594ee90af5c13382089104deaeed61ae6774f7f8c355c247bc89d628255f013"}, "downloads": -1, "filename": "godale-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "972a42c91964cb181cb0959a78c0c5fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6291, "upload_time": "2020-01-29T09:15:40", "upload_time_iso_8601": "2020-01-29T09:15:40.931106Z", "url": "https://files.pythonhosted.org/packages/41/f1/f4c8e1ba12bffe0896ce7dd387413fdab670dab65b3b09eb90a94f96ab6c/godale-0.2-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "972a42c91964cb181cb0959a78c0c5fd", "sha256": "3594ee90af5c13382089104deaeed61ae6774f7f8c355c247bc89d628255f013"}, "downloads": -1, "filename": "godale-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "972a42c91964cb181cb0959a78c0c5fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6291, "upload_time": "2020-01-29T09:15:40", "upload_time_iso_8601": "2020-01-29T09:15:40.931106Z", "url": "https://files.pythonhosted.org/packages/41/f1/f4c8e1ba12bffe0896ce7dd387413fdab670dab65b3b09eb90a94f96ab6c/godale-0.2-py3-none-any.whl"}]}