{"info": {"author": "Filippo Squillace", "author_email": "feel.sqoox@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools", "Topic :: System :: Shells", "Topic :: System :: Software Distribution", "Topic :: Utilities"], "description": "Pearl\n=====\n\n<h1 align=\"center\">\n    <a href=\"https://github.com/pearl-core/pearl\"><img\n        alt=\"Pearl\"\n        width=250px\n        src=\"https://rawgit.com/pearl-core/logo/master/pearl.png\"></a>\n</h1>\n\n|Project Status|Donation|Communication|\n|:-----------:|:--------:|:-----------:|\n|[![Build status](https://api.travis-ci.org/pearl-core/pearl.png?branch=master)](https://travis-ci.org/pearl-core/pearl) [![PyPi version](https://img.shields.io/pypi/v/pearl)](https://pypi.org/project/pearl/) [![PyPi status](https://img.shields.io/pypi/status/pearl)](https://pypi.org/project/pearl/) [![PyPi downloads](https://img.shields.io/pypi/dm/pearl)](https://pypi.org/project/pearl/) | [![Github Sponsors](https://img.shields.io/badge/GitHub-Sponsors-orange.svg)](https://github.com/sponsors/fsquillace) [![PayPal](https://img.shields.io/badge/PayPal-Donation-blue.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=8LEHQKBCYTACY) | [![Join the gitter chat at https://gitter.im/pearl-core/pearl](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pearl-core/pearl?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) |\n\n**Table of Contents**\n- [Description](#description)\n- [Quickstart](#quickstart)\n- [Installation](#installation)\n  - [Dependencies](#dependencies)\n  - [Linux](#linux)\n  - [OSX](#osx)\n- [Create your own Pearl package](#create-your-own-pearl-package)\n- [Create your own Pearl repository](#create-your-own-pearl-repository)\n- [Comparison with alternative solutions](#comparison-with-alternative-solutions)\n- [Troubleshooting](#troubleshooting)\n- [Contributing](#contributing)\n- [Donating](#donating)\n- [Authors](#authors)\n\nDescription\n===========\n**Pearl** is a lightweight package manager for automating reproducible environments\nbetween different systems (Linux and OSX).\nIt can be used for dotfiles, plugins, programs and any form of code\naccessible via git.\n\nAs soon as a package gets installed, its content can be activated out of the box\naccording to certain events, like, for instance, a shell startup (Bash, Zsh or Fish) or\nan editor startup (Vim or Emacs). This is possible via a smart and simple\n[hook mechanism](#create-your-own-pearl-package)\nthat integrates the package content within the Pearl ecosystem.\n\nThe main advantages on using Pearl are:\n\n- Create your own Pearl package in a very simple way.\n- Full control and sync of your dotfiles across different systems.\n- Automatic bootstrap of the package content whenever shells or editors get started.\n- Access to a wide range of existing packages via the [OPH (Official Pearl Hub)](https://github.com/pearl-hub).\n- Allows to create your own shareable package repository.\n- [Comparison](#comparison-with-alternative-solutions) with alternative solutions\n- Stable codebase with 100+ unit tests and exhaustive integration tests via [Travis](https://travis-ci.org/pearl-core/pearl) for Linux and OSX.\n- Small number of [dependencies](#dependencies) needed in order to ensure compatibility with most of the systems.\n\nQuickstart\n==========\nThere are two main use cases for Pearl which will be explained here below:\n\nUse case 1: Create custom package\n---------------------\nThe following example creates a Pearl package containing dotfiles. In this example we are going to create a very simple\ndotfile for `git`.\n\n```sh\n$> pearl create mydotfiles ~/dotfiles\n```\nThis will create a directory `pearl-config` in `~/dotfiles` containing all the templates to help you\nstart writing a Pearl package. `~/dotfiles` does not need to be an empty directory.\n\nAdditionally, the local repository in `$XDG_CONFIG_HOME/pearl/pearl.conf` (defaults to `~/.config/pearl/pearl.conf`)\nwill be updated with the new package entry called `mydotfiles`.\nThis tells to Pearl where to look for the package:\n\n```sh\n$> cat ~/.config/pearl/pearl.conf\n...\n...\nPEARL_PACKAGES[\"mydotfiles\"] = {\"url\": \"~/dotfiles\"}\n```\n\nPlace the git config inside `~/dotfiles` directory:\n\n```sh\n$> cd ~/dotfiles\n$> echo -e \"[alias]\\n    cfg = config\" > gitconfig\n```\n\nYou need now to give instructions about how to link the `gitconfig` into the system.\nThis is possible through the `pearl-config/hooks.sh` file. Just update it with the following:\n\n```bash\npost_install() {\n    link git \"${PEARL_PKGDIR}/gitconfig\"\n    return 0\n}\n\npost_update() {\n    post_install\n}\n\npre_remove() {\n    unlink git \"${PEARL_PKGDIR}/gitconfig\"\n    return 0\n}\n```\n\nThis tells to Pearl to `link` the git config located in `\"${PEARL_PKGDIR}/gitconfig\"` (`${PEARL_PKGDIR}` is a builtin variable)\nto the `git` program just after the package installation. Conversely, before removal, this tells to `unlink` the same config file.\n\nNow, just install the package and you will see the changes already reflected:\n\n```sh\n$> pearl install mydotfiles\n$> # The new git config is ready!\n$> git cfg -l\n```\n\nOnce the package is completed, you can upload it to a git repository and\njust fetch it from there by updating `~/.config/pearl/pearl.conf`:\n```sh\n$> cat ~/.config/pearl/pearl.conf\n...\n...\nPEARL_PACKAGES[\"mydotfiles\"] = {\"url\": \"https://github.com/pearluser/mydotfiles.git\"}\n```\n\nThere are way more things you can do with Pearl!\nFor more details about the `pearl-config` content, look at the [section](#create-your-own-pearl-package) below.\n\nUse case 2: Use Pearl Hub repository\n------------------------\nYou can just use existing packages from the Pearl Hub repository.\nIt contains a big list of packages about dotfiles, programs and plugins for many known applications.\n\nFor instance, look to the entire list of packages:\n\n```sh\n$> pearl list\n```\n\nIf interested to search only for dotfiles:\n\n```sh\n$> pearl search dotfiles\npearl/dot-gtk \n    Awesome gtk dotfiles\npearl/kyrat \n    20 lines script that brings dotfiles in a ssh session\npearl/dot-mutt \n    Awesome Mutt dotfiles\npearl/dot-emacs \n    Awesome emacs dotfiles\npearl/dot-git \n    Awesome git dotfiles\npearl/dot-screen \n    Awesome screen dotfiles\npearl/dot-tmux\n    Awesome Tmux dotfiles\npearl/dot-vim\n    Awesome vim dotfiles\npearl/dot-firefox\n    Awesome Firefox dotfiles\npearl/dot-terms\n    Awesome terms dotfiles (i.e. urxvt)\npearl/dot-bash\n    Awesome bash dotfiles\n```\n\n### Recommended Pearl Hub packages to install:\n\n- [cmd](https://github.com/pearl-hub/cmd)\n- [kyrat](https://github.com/pearl-hub/kyrat)\n- [ranger](https://github.com/pearl-hub/ranger)\n- [sesaila](https://github.com/pearl-hub/sesaila)\n- [trash-cli](https://github.com/pearl-hub/trash-cli)\n- [txum](https://github.com/pearl-hub/txum)\n\nInstallation\n============\n\nDependencies\n------------\nBefore installing Pearl be sure that all dependencies are properly installed in your system.\nThe Pearl dependencies are the following:\n\n### Mandatory\n- [python (>=3.5)](https://www.python.org/)\n- [bash (>=4.1)](https://www.gnu.org/software/bash/)\n- [git (>=1.8.5)](https://git-scm.com/)\n\n### Optional\nThe following are not mandatory dependencies but can be handy to have for the hook functions in Pearl package.\nAll the Linux distributions have these dependencies already installed.\n\n- [GNU coreutils](https://www.gnu.org/software/coreutils/)\n- [grep](https://www.gnu.org/software/grep/) \n- [sed](https://www.gnu.org/software/sed/) \n\n### Additional shells supported\nPearl supports also the following shells:\n\n- [fish (>=2.2.0)](https://fishshell.com/)\n- [zsh (>=5.2)](http://www.zsh.org/)\n\n\nLinux\n-----\n\n### Arch Linux\n\nPearl can be installed in Arch Linux through AUR.\nThe package is [pearl-git](https://aur.archlinux.org/packages/pearl-git/).\n\nFor example, to install Pearl via [yay](https://github.com/Jguer/yay) AUR helper:\n```\n$> yay -S pearl-git\n```\n\nAny other AUR helpers can be found [here](https://wiki.archlinux.org/index.php/AUR_helpers).\n\n### Other Linux distributions\n\nAssuming all Pearl [dependencies](#dependencies) are properly installed\nin the system, to install Pearl you can use the `pip` command.\nUnless there is a specific use case, it is not a good option to use virtual environments such as\n`virtualenv` or `conda` because otherwise Pearl will be only visible within that environment.\nIt is recommended to use the system-wide `pip` which is generally locate in `/usr/bin/pip`.\nThe following will install the package in your `$HOME` directory (`~/.local/`):\n```\n$> /usr/bin/pip install --user pearl\n$> export PATH=\"$HOME/.local/bin:$PATH\"\n```\n\nPearl command will be located in `~/.local/bin/pearl`\n\nTo create the `$PEARL_HOME` directory and the new pearl configuration file from template, run: \n```\n$> pearl init\n```\n\nOSX\n---\nIn order to install all Pearl dependencies, you first need to install [Homebrew](http://brew.sh/).\n\nTo install all the needed dependencies via Homebrew:\n```sh\n$> brew update\n$> brew install bash git coreutils grep gnu-sed python\n```\n\nThe following will install the package under `/usr/local`:\n```\n$> # If the bin path is not already in $PATH:\n$> export PATH=\"/usr/local/bin:$PATH\"\n$> pip3 install pearl\n```\n\nPearl command will be located in `/usr/local/bin/pearl`\n\nTo create the `$PEARL_HOME` directory and the new pearl configuration file from template, run: \n```\n$> pearl init\n```\n\n**IMPORTANT NOTE**: Pearl gets loaded through `~/.bashrc`. The problem is that in OSX,\nthe terminal opens a login shell and only `~/.bash_profile` will get executed.\nRun the following only if `~/.bashrc` is not loaded within `~/.bash_profile` file:\n\n```sh\n$> echo \"[[ -f $HOME/.bashrc ]] && source $HOME/.bashrc\" >> ~/.bash_profile\n```\n\nThis will make sure that `~/.bashrc` will run at shell startup.\n\nCreate your own Pearl package\n===============\n**Any git repository is already a Pearl package**. For instance, in order\nto manage a dotfiles repository in Pearl, you just need to change\nthe Pearl configuration file located in `$XDG_CONFIG_HOME/pearl/pearl.conf`.\n\nAdd the following line to `pearl.conf` file:\n\n```python\nPEARL_PACKAGES = {\n    \"mydotfiles\": {\n        \"url\": \"https://github.com/user/mydotfiles.git\",\n        \"description\": \"My dotfiles\"\n    },\n}\n```\n\nIn other words, update the `PEARL_PACKAGES` dictionary with a new entry containing the\nname of the package (i.e. `mydotfiles`),\nthe git url (i.e. `https://github.com/user/mydotfiles.git`) and an optional description.\n\n***That's it!*** The package will be ready to be managed by the Pearl system.\n\n## Structure of a Pearl package ##\nYour own git repository can contain an **optional** directory\nnamed `pearl-config` used by Pearl to integrate the package with the Pearl environment.\n\n    / (package root)\n    \u2502\n    \u251c\u2500\u2500 pearl-config (optional directory)\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 hooks.sh\n    \u2502   \u251c\u2500\u2500 config.sh\n    \u2502   \u251c\u2500\u2500 config.bash\n    \u2502   \u251c\u2500\u2500 config.zsh\n    \u2502   \u251c\u2500\u2500 config.fish\n    \u2502   \u251c\u2500\u2500 config.vim\n    \u2502   \u251c\u2500\u2500 config.el\n    \u2502   \u2514\u2500\u2500 package.conf\n    \u2502\n    \u2514\u2500\u2500 (additional package content)\n\nThe files inside `pearl-config` are also **optional** script/configuration files:\n\n- `hooks.sh` - contains the [hooks functions](#hook-functions) executed during the `install`, `update` and `remove` events.\n- `config.sh` - will be sourced whenever a new Bash/Zsh shell is starting up.\n- `config.bash` - will be sourced whenever a new Bash shell is starting up.\n- `config.zsh` - will be sourced whenever a new Zsh shell is starting up.\n- `config.fish` - will be sourced whenever a new Fish shell is starting up.\n- `config.vim` - will be executed whenever Vim editor is starting up.\n- `config.el` - will be sourced whenever Emacs editor is starting up.\n- `package.conf` - contains optional metadata information (name, author, description, keywords, etc) about the package that are useful when indexing the package in a repository list.\n\nThe following variables can be used in any of the previous scripts:\n\n- `PEARL_HOME`          - Pearl location (`$XDG_DATA_HOME/pearl` which by default is `$HOME/.local/share/pearl`)\n- `PEARL_PKGDIR`        - Pearl package location\n- `PEARL_PKGVARDIR`     - Pearl package location containing data needed for package\n- `PEARL_PKGNAME`       - Pearl package name\n- `PEARL_PKGREPONAME`   - Pearl package repo name (useful to detect and interact with packages within the same repo)\n\nAdditionally, the script `hooks.sh` can use the utility functions available in\n[Buava](https://github.com/fsquillace/buava) and Pearl [*utils*](lib/utils) directory that\nmake easier the integration with Pearl ecosystem.\n\nUseful examples of Pearl packages can be checked in the\n[Official Pearl Hub](https://github.com/pearl-hub).\n\n### The hooks.sh script ###\n#### Hook functions ####\n- `post_install`  - Called *after* an installation of the package occurs.\n- `pre_update`    - Called *before* an update of the package occurs.\n- `post_update`   - Called *after* an update of the package occurs.\n- `pre_remove`    - Called *before* a removal of the package occurs.\n\n#### An hooks.sh script example ####\n\n```bash\npost_install() {\n    warn \"Remember to setup your config located in: ~/.dotfile\"\n    # Do a smart backup before modifying the file\n    backup ${HOME}/.dotfile\n    \"# New dotfile\" > ${HOME}/.dotfile\n    if ask \"Are you sure to link the tmux config?\" \"Y\"\n    then\n        link tmux \"$PEARL_PKGDIR/mytmux.conf\"\n    fi\n\n    info \"Awesome - new package installed!\"\n    return 0\n}\npost_update() {\n    post_install\n    return 0\n}\npre_remove() {\n    info \"dotfiles package removed\"\n    unlink tmux \"$PEARL_PKGDIR/mytmux.conf\"\n\n    # Do an idempotent delete\n    delete ${HOME}/.dotfile\n    return 0\n}\n```\n\nThe `info` and `warn` are functions that print a message\nusing different colors (namely cyan and yellow).\n\nThe `link` `unlink` are idempotent functions (the result will not change\nif the function will be called multiple times) that are able\nto link/unlink a config file in order to be loaded at startup by a certain program.\n\nThe `ask` function will make installation interactive, asking user whether to link tmux config or not.\n\nThe `backup` keeps the last three backups of the file and do not perform backup\nif the file has not been modified since the latest backup. The `delete` is a\nfunction for idempotent remove (it will not raise an error if the file\nno longer exist).\n\nAll these functions belong to the [Buava](https://github.com/fsquillace/buava) package\nin [`utils.sh`](https://github.com/fsquillace/buava/blob/master/lib/utils.sh)\nand to the Pearl [`utils.sh`](lib/utils/utils.sh) script. You can use them\ninside the `hooks.sh` to any hook function.\n\n**Very important note**: All the hook functions **must** be\n[**idempotent**](https://en.wikipedia.org/wiki/Idempotence)\n(the commands of each hook function must produce the same result even if\nthe command gets executed multiple times).\nAll buava commands are idempotent and this will help to write hook functions\nvery quickly.\n\n**Note**: For OSX system, the GNU version `sed` and `grep` are automatically\nimported in `hooks.sh` and can be directly used if needed.\n\n### The package.conf file\n`package.conf` is located in `pearl-config` directory and is meant to contain package metadata.\nTo simplify the creation of new packages, this file is completely optional.\nThis file may contain name of the package, description, author, os compatibility, license and more.\nIt can be also used to establish dependencies between packages.\n\nPlease **note** that `package.conf` is only meant to encapsulate package information within the package itself\nbut they are not directly consumed by the Pearl program. In fact, Pearl only reads from the `pearl.conf` file which is\nwhere the metadata information can be also stored.\n\nTo give a better idea, take a look at the Pearl Hub\n[repo.conf](https://github.com/pearl-hub/repo-v2/blob/master/pearl-config/repo.conf).\nThe [repo-builder](https://github.com/pearl-core/repo-builder/) is the script responsible to periodically\nextract the `package.conf` metadata from each package and update the Pearl Hub `repo.conf`.\n\nFor a local package you can manually include such information directly in the `pearl.conf` file. This is an example of\npackage defined in `pearl.conf` which depends on the `pearl/cmd` package:\n\n```python\nPEARL_PACKAGES = {\n    'mydotfiles': {\n        \"url\": '/home/user/my/folder/dotfiles/',\n        \"description\": \"This package contains dotfiles\",\n        \"author\": \"David Smith <dsmith@abc.com>\",\n        \"depends\": (\n            \"pearl/cmd\",\n        )\n    },\n}\n```\n\nIf you do not need such features for your package, just ignore this file.\n\n## Create a Pearl package from a local directory ##\nPearl package system will work even for local directories. This is particularly useful\nwhenever a Pearl package needs to be tested before pushing to a git repository.\n\nFor instance, the following lines in `pearl.conf` file will add a package located in\n`/home/joe/dotfiles`:\n\n```python\nPEARL_PACKAGES = {\n    \"mydotfiles\": {\n        \"url\": \"/home/user/mydotfiles\",\n        \"description\": \"My dotfiles\"\n    },\n}\n```\n\nThe directory path must be an absolute path.\n\nThe package will be ready to be managed by the Pearl system.\n\nThe directory content can be structured in the exact way as described\nin the [section](#structure-of-a-pearl-package) above.\n\n## Use third-party git repository not available in Pearl Hub ##\nIf you want to use a third-party git repository\nthat is not available in the [Official Pearl Hub](https://github.com/pearl-hub),\nyou can:\n\n* Create your own git repository and use the `PEARL_PKGVARDIR` directory (recommended)\n* Create your own git repository and use [git submodule](https://git-scm.com/docs/git-submodule)\n* Point directly to the third-party git repository\n\nTo see examples of Pearl packages from third-party git repos take a look at the\n[Official Pearl Hub](https://github.com/pearl-hub).\n\n### Create your own git repository and use the `PEARL_PKGVARDIR` directory (recommended) ###\nYou can use the `PEARL_PKGVARDIR` directory during the installation phase to install the third-party git repository.\nThis is the best way to incorporate third-party project into Pearl ecosystem.\n\nHere it is an example of `hooks.sh` file which install the ranger file manager into the directory `${PEARL_PKGVARDIR}/ranger`:\n\n```bash\nfunction post_install(){\n    install_or_update_git_repo https://github.com/ranger/ranger.git \"${PEARL_PKGVARDIR}/ranger\" master\n}\n\nfunction post_update(){\n    post_install\n}\n\nfunction pre_remove(){\n    rm -rf ${PEARL_PKGVARDIR}/ranger\n}\n```\n\nThe function `install_or_update_git_repo` comes from the [Buava](https://github.com/fsquillace/buava)\nlibrary in [`utils.sh`](https://github.com/fsquillace/buava/blob/master/lib/utils.sh)\nwhich is natively available in Pearl during the installation.\nYou can even use the functions `install_git_repo` or `update_git_repo` which respectively install or update the git repository.\n\nFor a full example take a look at the [ranger](https://github.com/pearl-hub/ranger) Pearl Hub package.\n\n### Create your own git repository and use git submodule ###\nInside your git repository, you just need to add the third-party git repo as a\n[git submodule](https://git-scm.com/docs/git-submodule).\nFor instance, to add the [powerline](https://github.com/powerline/powerline) in your Pearl package,\nyou can introduce a submodule in the `module` directory:\n\n```sh\n$> git submodule add https://github.com/powerline/powerline.git module\n```\n\nThe filesystem structure of the package will become something like this:\n\n    / (package root)\n    \u2502\n    \u251c\u2500\u2500 pearl-config   (optional directory)\n    \u251c\u2500\u2500 module/        (contains third-party code)\n    \u2514\u2500\u2500 (additional package content)\n\nThen, you just need to modify the config scripts in order to integrate the third-party\nproject inside Pearl environment.\n\n### Point directly to the third-party git repository ###\nLet's suppose you want to install the [vim-rails](https://github.com/tpope/vim-rails) plugin.\nIn your Pearl configuration (`$XDG_CONFIG_HOME/pearl/pearl.conf`), add your new Pearl package:\n\n```python\nPEARL_PACKAGES = {\n    \"vim-rails\": {\n        \"url\": \"https://github.com/tpope/vim-rails.git\",\n        \"description\": \"Ruby on Rails power tools\"\n    },\n}\n```\n\nInstall the package:\n\n```sh\n$> pearl install vim-rails\n```\n\nVoila', your new vim plugin is ready to be used!\n\nThis approach is particularly useful whenever you do not need to specify\nany pearl config to *\"enrich\"* the third-party project inside\nthe Pearl environment.\n\n\nCreate your own Pearl repository\n===============\nA Pearl repository is just a git repository containing a file located in `pearl-config/pearl.conf`\nwith a list of packages. For instance, the *OPH* repository is available\n[here](https://github.com/pearl-hub/repo-v2).\n\nIn order to use the new repository (i.e. \"https://github.com/myrepo/pearl-repo.git\"),\nupdate the `pearl.conf` file by adding the following line:\n\n```python\nPEARL_REPOS += (\"https://github.com/myrepo/pearl-repo.git\",)\n```\n\nComparison with alternative solutions\n=====================================\nHere we are going to compare Pearl with other solutions according to the following dimensions:\n\n**Modular**\n\nAbility of the tool to split configurations and/or programs into different modules.\nIts importance is because in case configs are broken you can still manage other modules which you are more confident they works.\nFor instance, if your `vim` config does not work you are still able to manage all other dotfiles because they are independent from each other.\nObviously, Pearl, by design, allows modularization through packages.\n\n**General purpose**\n\nTools can be either `general` (manage any kind of programs) or `dotfiles-specific` (limited to dotfiles only).\n\n**Simple**\n\nIndicates how easy is to setup and use the tool. Between all tools, [Ansible](https://www.ansible.com/)\nis the one which has a steep learning curve. Ansible is a powerful software for IT\nautomation which can be widely used for many use cases.\nDespite of this, Ansible has few drawbacks when using it for lightweight forms of automation compared to Pearl:\n\n- Pearl uses bash for writing simple scripts for automation:\n  - it makes easier the integration with other programs in the system (without existing Playbooks may be hard and tedious to achieve this in Ansible);\n  - bash is a powerful, accessible and well-known language;\n- Ansible requires way more dependencies than Pearl;\n- Ansible requires knowledge about how Ansible Playbooks works;\n- Pearl uses built-in [functions](https://github.com/fsquillace/buava/blob/master/README.md#table-of-buava-functions) and [variables](#structure-of-a-pearl-package) which heavily simplify construction of scripts for automation;\n- Pearl makes easier to remove packages and restore the system to an initial state;\n\n**Diversity**\n\nIndicates whether the tool handles diverse management for configurations/programs when dealing with heterogeneous machines.\nThere are multiple ways to handle diversity through Pearl:\n\n- one way is to create just one package and write bash functions which handle specific logic for each machine.\n- Alternatively, you can create a base package containing common functionality and use a package specific for each machine.\nThis is possible thanks to the ability to define dependencies between packages.\n\n**Portable**\n\nAbility of the tools to be used in multiple platforms. Pearl can be used on both Linux and OSX.\n\nComparison\n----------\n\n|                 | Pearl | Ansible | yadm | vcsh | homesick |\n| --------------- | ----- | ------- | ---- | ---- | -------- |\n| Modular         | Yes   | Yes     | No   | Yes  | Yes      |\n| General purpose | Yes   | Yes     | No   | No   | No       |\n| Diversity       | Yes   | Yes     | Yes  | Yes  | Yes      |\n| Simple          | Yes   | No      | Yes  | Yes  | Yes      |\n| Portable        | Yes   | Yes     | Yes  | Yes  | Yes      |\n\nTroubleshooting\n===============\n\n## Corrupted Pearl Home directory ##\n\n> **Q**: What should I do if I accidentally removed files/packages in `$PEARL_HOME`?\n\n> **A**: You can recover the structure of the `$PEARL_HOME` by running:\n\n```sh\n$> pearl init\n```\n\n> The command will create all the essential directories and symlinks in `$PEARL_HOME`.\n> It is harmless to run the `init` command multiple times since it is idempotent.\n\n## Corrupted package ##\n\n> **Q**: Why I can no longer update/remove a package?\n\n> **A**: This is probably because either one of the hook functions\n> is failing or the package content is corrupted. You can forcely remove the package:\n\n```sh\n$> pearl --force remove <packagename>\n```\n\n> which bypass hook functions that are failing. If that does not even work,\n> you can delete a package by simply removing its directory:\n\n```sh\n$> rm -rf $PEARL_HOME/packages/pearl/<packagename>\n```\n\n> After that, you can reinstall the package again.\n> The Pearl packages contain a dedicated directory `var` for storing\n> data needed for the package itself.\n> The `var` data are always managed by the package and they never gets deleted by Pearl\n> during the package removal.\n> If you want to delete the content in `var` package:\n\n```sh\n$> rm -rf $PEARL_HOME/var/pearl/<packagename>\n```\n\n## Package shell variables/functions not visible in current shell after installation ##\n\n> **Q**: Why are not package's environment variables/functions visible in\n> my current shell after installing/updating the package?\n\n> **A**: After package install/update, the variables or\n> functions related to the current shell and defined in `pearl-config/config.*`\n> may not be available because a reload of Pearl configuration file is required.\n> You can fix this by simply run the function:\n\n```sh\npearl-source\n```\n\n> which reloads the configuration.\n> The use of such function is not always required but depends on\n> whether the variables/functions involve the current shell where the\n> package `install`/`update` occurred (i.e. a new variable defined in `config.sh`\n> and the current shell is a bash or zsh). Alternatively, user can always\n> create a new shell and the package resources will be available as\n> expected.\n\n## Error during package install\n\n> Q: Why Do I get the following error:\n\n```sh\nError on executing 'post_install' hook. Rolling back...\n```\n\n> A: This occurs when the `post_install` hook function fails.\n> Pearl will attempt to roll back and force a removal of the package. In this way\n> you can attempt to install the package again once the hook function gets\n> fixed.\n\nContributing\n============\n\nYou could help improving Pearl and the [OPH](https://github.com/pearl-hub) in the following ways:\n\n- [Reporting Bugs](CONTRIBUTING.md#reporting-bugs)\n- [Suggesting Enhancements](CONTRIBUTING.md#suggesting-enhancements)\n- [Writing Code](CONTRIBUTING.md#your-first-code-contribution)\n\nDonating\n========\nTo sustain the project please consider funding by donations through\nthe [GitHub Sponsors page](https://github.com/sponsors/fsquillace/).\n\nAuthors\n=======\nPearl was originally created by [Filippo Squillace (feel.sqoox@gmail.com)](https://github.com/fsquillace).\n\nHere is a list of [**really appreciated contributors**](https://github.com/pearl-core/pearl/graphs/contributors)!\n\n[![](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/images/0)](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/links/0)[![](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/images/1)](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/links/1)[![](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/images/2)](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/links/2)[![](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/images/3)](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/links/3)[![](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/images/4)](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/links/4)[![](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/images/5)](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/links/5)[![](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/images/6)](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/links/6)[![](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/images/7)](https://sourcerer.io/fame/fsquillace/pearl-core/pearl/links/7)\n\n\n# Change Log #\n\n## [2.3.3][v233] - 2020-02-20 ##\n\n* Add FUNDING file\n* Add new sections in README\n* Add PyPi badges in README\n\n## [2.3.2][v232] - 2020-02-15 ##\n\n* Show traceback only on unexpected exception\n  * To see traceback about pearl error, use the `-v` option\n* Add ability to remove packages even when they do not exist in repository anymore\n\n## [2.3.1][v231] - 2020-01-29 ##\n\n* Fix bug when removing packages\n* Refactor README.md\n\n## [2.3.0][v230] - 2020-01-25 ##\n\n* Handle dependencies between packages\n  * During `install`, `update` and `emerge` packages dependencies will be included as well.\n  * During `remove` only packages not required by others can be removed.\n* Include `Required by` in `info` command\n\n## [2.2.0][v220] - 2020-01-17 ##\n\n* Add `info` command\n* Make `search` looking at keywords field\n\n## [2.1.2][v212] - 2020-01-14 ##\n\n* Change name PyPI package from `pearcli` to `pearl`\n* Add `package.conf`\n\n## [2.1.1][v211] - 2020-01-13 ##\n\n* Replace `install.sh` with `hooks.sh`\n  * `install.sh` will still be valid until next releases\n* Fail if no command is specified\n\n## [2.1.0][v210] - 2020-01-12 ##\n\n* Add `create` command\n* Fix procedure to install Pearl in OSX\n* Fix ci to upload to PyPI\n\n## [2.0.2][v202] - 2020-01-11 ##\n\n* Add instructions to install Pearl in Arch Linux\n* Fix bug for version option\n\n## [2.0.1][v201] - 2020-01-11 ##\n\n* Manual intervention to switch to Pearl v2\n  * [Migration page](https://github.com/pearl-core/pearl/wiki/Migration-to-Pearl-version-2)\n* Codebase re-written in Python\n* Remove the `post_remove`\n* `pearl.conf` is not a python script. This requires manual intervention. Take a look at the `pearl.conf.template` file in codebase\n* `pearl-metadata` directory is finally deprecated\n* Add `--no-confirm` option\n* Add `--force` option\n  * This option bypasses failures even during the hook function execution\n* Add `--verbose` option\n  * `-vv` allows to enable xtrace in hook functions\n* Add `--update-repos` option\n* Shortcut commands (i.e. `i` to specify `install` command) are no longer available\n* Pearl file locations change drastically in order to be complaint with the\n[XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)\n  * As of now, `pearl.conf` resides in `$XDG_CONFIG_HOME/pearl` (default `~/.config/pearl`)\n  * The new location for `$PEARL_HOME` is `$XDG_DATA_HOME/pearl` (default `~/.local/share/pearl`)\n* Remove the variables `$PEARL_ROOT` and `$PEARL_TEMPORARY`\n\n## [1.8.2][v182] - 2019-10-13 ##\n\n* Update `README.md` file\n\n## [1.8.1][v181] - 2019-07-13 ##\n\n* Update `buava`:\n  * New view action for `setup_configuration` helper function\n\n## [1.8.0][v180] - 2019-06-03 ##\n\n* Add roll back mechanism during install package\n* Add `grep` and `sed` as optional dependencies since they may be used in hook functions\n* Add newer `buava`:\n  * `backup` function\n  * `delete` function\n  * `ideavim` and `gvim` dotfiles for (`un`)`link` functions\n  * `install_or_update_vim_plugin_git_repo` function\n  *  Add GNU `sed` and `grep` for OSX compat functions\n\n## [1.7.2][v172] - 2019-01-15 ##\n\n* Fix variables `PEARL_PKGNAME` `PEARL_PKGREPONAME` for vim and emacs boot\n\n## [1.7.1][v171] - 2018-08-11 ##\n\n* Deprecate pathogen\n* Ensure to `cd` when updating package pointing to local directory\n* Fix when package specified with full name does not exist\n* More log info when Git URL package change\n* Proceed even if `install.sh` is syntatically incorrect (prevent block for fixing the broken package)\n* Improve doc and add section about comparison with Ansible\n\n## [1.7.0][v170] - 2018-07-05 ##\n\n* Add the idempotent `emerge` command which update/install packages.\n* No longer support the use of USR1 signal to source the Pearl config to the parent process. To explictly do that run `pearl-source` command instead.\n\n## [1.6.3][v163] - 2018-06-22 ##\n\n* Location of the repo file is `pearl-config/pearl.conf`. Backward compatibility will be kept until 2.0.0\n* Make the branch name inferred from repo's HEAD rather than hardcode the branch with `master`\n\n## [1.6.2][v162] - 2018-06-09 ##\n\n* Add variables `PEARL_PKGNAME` `PEARL_PKGREPONAME`\n* Fix boot vim for deprecating `pearl-metadata`\n* Update doc to use dynamic updates for third-party git repos\n* Add the buava git repo helpers\n\n## [1.6.1][v161] - 2018-02-04 ##\n\n* Fix import `osx-compat.sh`\n* Fix update Pearl submodules during updates\n\n## [1.6.0][v160] - 2018-02-03 ##\n\n* Change directory name to `pearl-config`. Pearl version `2.0.0` will deprecate `pearl-metadata`\n* `link_to_path` to customize symlink name\n* Changes in `buava` for Pearl configs:\n  * `osx_detect` function to detect the OS platform\n  * Improved `choose` function with indexes\n  * Add `ssh` for `[un]link` function\n\n## [1.5.6][v156] - 2017-08-31 ##\n\n* Fix Integ tests\n\n## [1.5.5][v155] - 2017-08-31 ##\n\n* Update Buava:\n  * Update `download` function\n  * Add `choose`, `input` and `contain_elements` functions\n\n## [1.5.4][v154] - 2017-08-28 ##\n\n* Update Buava:\n  * Add `download` function\n  * vimperator gtk2 programs for `[un]link` functions\n\n## [1.5.3][v153] - 2017-06-29 ##\n\n* Add [Pear test utils](https://github.com/pearl-core/test-utils) as new dependency\n* Add [Bunit](https://github.com/fsquillace/bunit) as new dependency\n* Add [Buava](https://github.com/fsquillace/buava) as new dependency\n* Inform about the trap on USR1 signal\n\n## [1.5.2][v152] - 2017-01-07 ##\n\n* Add support for new OSX image in Travis\n* Fallback to a default temp directory if `tty` does not work\n\n## [1.5.1][v151] - 2016-11-15 ##\n\n* Fix git --no-parser log for missing newline\n\n## [1.5.0][v150] - 2016-11-13 ##\n\n* Provide (un)link from/to in utils.sh\n* Provide list of last commits during add/update package\n* Fix `unlink_from_path` when source file is a symlink\n\n## [1.4.5][v145] - 2016-11-11 ##\n\n* Provide (un)link from/to PATH variable in utils.sh\n\n## [1.4.4][v144] - 2016-09-26 ##\n\n* Improving doc and add checkstyle\n\n## [1.4.3][v143] - 2016-05-25 ##\n\n* Remove the requirement of updating the PATH on OSX\n\n## [1.4.2][v142] - 2016-05-10 ##\n\n* Add support for OSX\n* Add check for existing `PEARL_HOME` variable for emacs/vim boot scripts\n* Add `PEARL_HOME/bin` directory to have symlinks for the Pearl packages executables\n* Avoid polluting `PATH` variable by introducing a check first\n\n## [1.4.1][v141] - 2016-04-30 ##\n\n* Introduce `$PEARL_PKGVARDIR` on boot scripts\n* Packages do not need to have `master` as default branch\n* Change the installation process to avoid [pipe bash problem](https://www.idontplaydarts.com/2016/04/detecting-curl-pipe-bash-server-side/)\n* Ensure to get the most updated `post_update` function\n* Refactor unit tests in `test-package.sh`\n\n## [1.4.0][v140] - 2016-04-23 ##\n\n* Add a dedicated directory `$PEARL_PKGVARDIR` for the Pearl packages in order to store data\n  needed during the execution of the package itself\n* Add warning in case of an old version of git or bash\n* Introduce `$PEARL_PKGDIR` environment variable for emacs and vim config files\n* Change the definition of public API\n\n## [1.3.1][v131] - 2016-04-21 ##\n\n* Fix compatibility with Bash 4.1\n* Integration tests with fixed Bash and Git versions\n\n## [1.3.0][v130] - 2016-04-20 ##\n\n* Provide the definition of public API\n* Add the emacs hook\n* Use a better approach to return values from bash functions\n* Change location of the boot files for pearl.fish and pearl.sh\n* Introduce the standard documentation for functions\n* Use try/catch approach to handle errors\n\n## [1.2.0][v120] - 2016-04-14 ##\n\n* Fix the removal of packages by querying the local directory\n* Add (un)link functions for utils.sh\n\n## [1.1.0][v110] - 2016-04-09 ##\n\n* Check if Git URL changed during updates\n* Introduce the template for new Pearl packages\n* Local directories can be used as Pearl packages\n* Add VERSION file\n\n## [1.0.1][v101] - 2016-04-08 ##\n\n* Update docs\n* Add travis and integration tests\n* Introduce the installer\n\n## [1.0.0][v100] - 2016-04-03 ##\n\n* Initial commit.\n\n<!--  Links -->\n\n[v100]: https://github.com/pearl-core/pearl/releases/tag/1.0.0\n[v101]: https://github.com/pearl-core/pearl/releases/tag/1.0.1\n[v110]: https://github.com/pearl-core/pearl/releases/tag/1.1.0\n[v120]: https://github.com/pearl-core/pearl/releases/tag/1.2.0\n[v130]: https://github.com/pearl-core/pearl/releases/tag/1.3.0\n[v131]: https://github.com/pearl-core/pearl/releases/tag/1.3.1\n[v140]: https://github.com/pearl-core/pearl/releases/tag/1.4.0\n[v141]: https://github.com/pearl-core/pearl/releases/tag/1.4.1\n[v142]: https://github.com/pearl-core/pearl/releases/tag/1.4.2\n[v143]: https://github.com/pearl-core/pearl/releases/tag/1.4.3\n[v144]: https://github.com/pearl-core/pearl/releases/tag/1.4.4\n[v145]: https://github.com/pearl-core/pearl/releases/tag/1.4.5\n[v150]: https://github.com/pearl-core/pearl/releases/tag/1.5.0\n[v151]: https://github.com/pearl-core/pearl/releases/tag/1.5.1\n[v152]: https://github.com/pearl-core/pearl/releases/tag/1.5.2\n[v153]: https://github.com/pearl-core/pearl/releases/tag/1.5.3\n[v154]: https://github.com/pearl-core/pearl/releases/tag/1.5.4\n[v155]: https://github.com/pearl-core/pearl/releases/tag/1.5.5\n[v156]: https://github.com/pearl-core/pearl/releases/tag/1.5.6\n[v160]: https://github.com/pearl-core/pearl/releases/tag/1.6.0\n[v161]: https://github.com/pearl-core/pearl/releases/tag/1.6.1\n[v162]: https://github.com/pearl-core/pearl/releases/tag/1.6.2\n[v163]: https://github.com/pearl-core/pearl/releases/tag/1.6.3\n[v170]: https://github.com/pearl-core/pearl/releases/tag/1.7.0\n[v171]: https://github.com/pearl-core/pearl/releases/tag/1.7.1\n[v172]: https://github.com/pearl-core/pearl/releases/tag/1.7.2\n[v180]: https://github.com/pearl-core/pearl/releases/tag/1.8.0\n[v181]: https://github.com/pearl-core/pearl/releases/tag/1.8.1\n[v182]: https://github.com/pearl-core/pearl/releases/tag/1.8.2\n[v201]: https://github.com/pearl-core/pearl/releases/tag/2.0.1\n[v202]: https://github.com/pearl-core/pearl/releases/tag/2.0.2\n[v210]: https://github.com/pearl-core/pearl/releases/tag/2.1.0\n[v211]: https://github.com/pearl-core/pearl/releases/tag/2.1.1\n[v212]: https://github.com/pearl-core/pearl/releases/tag/2.1.2\n[v220]: https://github.com/pearl-core/pearl/releases/tag/2.2.0\n[v230]: https://github.com/pearl-core/pearl/releases/tag/2.3.0\n[v231]: https://github.com/pearl-core/pearl/releases/tag/2.3.1\n[v232]: https://github.com/pearl-core/pearl/releases/tag/2.3.2\n[v233]: https://github.com/pearl-core/pearl/releases/tag/2.3.3\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/pearl-core/pearl/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pearl-core/pearl", "keywords": "pearl,shell,dotfiles,package manager", "license": "GNU General Public License v3", "maintainer": "", "maintainer_email": "", "name": "pearl", "package_url": "https://pypi.org/project/pearl/", "platform": "", "project_url": "https://pypi.org/project/pearl/", "project_urls": {"Download": "https://github.com/pearl-core/pearl/releases", "Homepage": "http://github.com/pearl-core/pearl"}, "release_url": "https://pypi.org/project/pearl/2.3.3/", "requires_dist": ["coverage; extra == 'dev'", "flake8; extra == 'dev'", "pip; extra == 'dev'", "pytest; extra == 'dev'", "Sphinx; extra == 'dev'", "tox; extra == 'dev'", "twine; extra == 'dev'", "watchdog; extra == 'dev'"], "requires_python": ">=3.5", "summary": "Pearl is a lightweight package manager for automating reproducible environments between different systems (Linux and OSX).It can be used for dotfiles, plugins, programs and any form of code accessible via git.", "version": "2.3.3"}, "last_serial": 6671797, "releases": {"0.0.1": [], "2.1.2": [{"comment_text": "", "digests": {"md5": "b5e2c0db2443e5046602b7434f7b3040", "sha256": "320c346b32584078f64ff90e2e35e4a4b15ec0147573571326be6ed174a6c775"}, "downloads": -1, "filename": "pearl-2.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b5e2c0db2443e5046602b7434f7b3040", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 82447, "upload_time": "2020-01-14T21:59:35", "upload_time_iso_8601": "2020-01-14T21:59:35.104614Z", "url": "https://files.pythonhosted.org/packages/10/c3/8b385fe7b5426c4810b527f3e34b88538f53870f80b4119024f7dc94753b/pearl-2.1.2-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8f573a6193cc90e794b125ca0d44b24d", "sha256": "38b290a1d1499254248cacc834861789e907020c89c0e1de21c18ef6eaf1ae04"}, "downloads": -1, "filename": "pearl-2.1.2.tar.gz", "has_sig": false, "md5_digest": "8f573a6193cc90e794b125ca0d44b24d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 110610, "upload_time": "2020-01-14T21:59:36", "upload_time_iso_8601": "2020-01-14T21:59:36.903374Z", "url": "https://files.pythonhosted.org/packages/2c/57/97d2a3c4b9d75cf61dad39c8177af770f285554c94e86adfd39bacf18105/pearl-2.1.2.tar.gz"}], "2.2.0": [{"comment_text": "", "digests": {"md5": "144227ddfebc9ae934bdf5b930e6def9", "sha256": "4621e7ba5991fa9f5cd9281763524527db123e80ef1fe303c76c601cf9a5e0c4"}, "downloads": -1, "filename": "pearl-2.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "144227ddfebc9ae934bdf5b930e6def9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 83064, "upload_time": "2020-01-17T21:35:34", "upload_time_iso_8601": "2020-01-17T21:35:34.702880Z", "url": "https://files.pythonhosted.org/packages/57/e5/249a132ea86d7576f055d5172d11887d231f1779ffe801c3fcd9df34f143/pearl-2.2.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "b7f726f01c484d7135f2b4d04daa7c33", "sha256": "5f04aa619bf7b2f2b9c18f30cd5970478ffd29d59634cf2ff774902ba16b87ae"}, "downloads": -1, "filename": "pearl-2.2.0.tar.gz", "has_sig": false, "md5_digest": "b7f726f01c484d7135f2b4d04daa7c33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 112354, "upload_time": "2020-01-17T21:35:36", "upload_time_iso_8601": "2020-01-17T21:35:36.733548Z", "url": "https://files.pythonhosted.org/packages/99/26/86b715c270c5a0dd356200ca5b3434f140ef9a828d6010564a28e5fabc54/pearl-2.2.0.tar.gz"}], "2.3.0": [{"comment_text": "", "digests": {"md5": "2820f634430a6a883b35dd5c3560a61e", "sha256": "08490d3e2abb728e2bcd03e3a5b797038b0dcfcf053d644b0c12c68009930eaf"}, "downloads": -1, "filename": "pearl-2.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2820f634430a6a883b35dd5c3560a61e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 43932, "upload_time": "2020-01-25T11:49:18", "upload_time_iso_8601": "2020-01-25T11:49:18.363222Z", "url": "https://files.pythonhosted.org/packages/06/8e/76f845feac0753c5c6cc1a68237bc4fbf73a3d96dd40a6b72f37dc3f1cf4/pearl-2.3.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "30a1e619bedff51bfbafac42a9979a05", "sha256": "c05a97f0dd720ad0da5992c5969f6ba606c26ef8b0cb4cdf3b592c4e041a5573"}, "downloads": -1, "filename": "pearl-2.3.0.tar.gz", "has_sig": false, "md5_digest": "30a1e619bedff51bfbafac42a9979a05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 83211, "upload_time": "2020-01-25T11:49:19", "upload_time_iso_8601": "2020-01-25T11:49:19.909381Z", "url": "https://files.pythonhosted.org/packages/31/de/9b1ef99308c8b162f1e8714cf0abf720edf906980f83ab9e56c82f6f2d63/pearl-2.3.0.tar.gz"}], "2.3.1": [{"comment_text": "", "digests": {"md5": "8e1c2bdcf98638a0e1397fa734e2599e", "sha256": "137a08209da10324b0bdd6a0b0fb77144ab870b2b882f1b7598fcc8f05d7f8e1"}, "downloads": -1, "filename": "pearl-2.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8e1c2bdcf98638a0e1397fa734e2599e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 44540, "upload_time": "2020-01-29T22:03:41", "upload_time_iso_8601": "2020-01-29T22:03:41.662784Z", "url": "https://files.pythonhosted.org/packages/7b/54/e4e53ff4129b42854b5bcbd6d9ad07213d16edb01acca3e8158dead33661/pearl-2.3.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7db52fb5e9679e8c6860b93095efdd9a", "sha256": "d4a596135335963fc99a4f1835980d1fcae7f791c6311d316569448098af87d7"}, "downloads": -1, "filename": "pearl-2.3.1.tar.gz", "has_sig": false, "md5_digest": "7db52fb5e9679e8c6860b93095efdd9a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 85123, "upload_time": "2020-01-29T22:03:43", "upload_time_iso_8601": "2020-01-29T22:03:43.676823Z", "url": "https://files.pythonhosted.org/packages/d5/a6/8a1f9f5d82435b479dce4e88bab7c5c7417348d46560735038fddd51092a/pearl-2.3.1.tar.gz"}], "2.3.2": [{"comment_text": "", "digests": {"md5": "6f975dd585b3f34c0adca3a58eccddff", "sha256": "0e3690e8420bd5290df5057eea5efefe296753fd431074f74b0d8adbf8d4ecb6"}, "downloads": -1, "filename": "pearl-2.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6f975dd585b3f34c0adca3a58eccddff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 45116, "upload_time": "2020-02-15T10:56:13", "upload_time_iso_8601": "2020-02-15T10:56:13.830035Z", "url": "https://files.pythonhosted.org/packages/3b/4a/e29e6193e683069403f99909b4d05b2000f4efdf2177170152d301b99ab3/pearl-2.3.2-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "6776262a2da286ae55bb22545d201771", "sha256": "dc3b38e5903809066c0d353cdce907db3016965b62a456375b8501ab92037b3d"}, "downloads": -1, "filename": "pearl-2.3.2.tar.gz", "has_sig": false, "md5_digest": "6776262a2da286ae55bb22545d201771", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 85977, "upload_time": "2020-02-15T10:56:15", "upload_time_iso_8601": "2020-02-15T10:56:15.265607Z", "url": "https://files.pythonhosted.org/packages/3c/12/729032a612bbcf16e61e18e0d8930f149af22effaeacadff22df8b3db835/pearl-2.3.2.tar.gz"}], "2.3.3": [{"comment_text": "", "digests": {"md5": "d1eede8130b281a8c4126d3a8d931554", "sha256": "feae44590b43ca7e9f61cdb8e58d276c4cbf3e1415ecb297cb2f9c5108c887e8"}, "downloads": -1, "filename": "pearl-2.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d1eede8130b281a8c4126d3a8d931554", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 45762, "upload_time": "2020-02-21T00:46:41", "upload_time_iso_8601": "2020-02-21T00:46:41.402273Z", "url": "https://files.pythonhosted.org/packages/4e/39/59776c2ab6b9d48bf93f3b25471e426ae081efabcf6465a4c7d6e198e9fa/pearl-2.3.3-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "007f691a1525d4fa941a6245d09dae24", "sha256": "09fb1e4fd85eeefec166db63b5905da2873b232cc609a6079e555a6c0dc7dce4"}, "downloads": -1, "filename": "pearl-2.3.3.tar.gz", "has_sig": false, "md5_digest": "007f691a1525d4fa941a6245d09dae24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 88500, "upload_time": "2020-02-21T00:46:43", "upload_time_iso_8601": "2020-02-21T00:46:43.086887Z", "url": "https://files.pythonhosted.org/packages/73/e5/1b45c94b9e19d1677bb8ad8ffb459b4d38461b3ebd981e7d3af2bc46f3ef/pearl-2.3.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "d1eede8130b281a8c4126d3a8d931554", "sha256": "feae44590b43ca7e9f61cdb8e58d276c4cbf3e1415ecb297cb2f9c5108c887e8"}, "downloads": -1, "filename": "pearl-2.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d1eede8130b281a8c4126d3a8d931554", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 45762, "upload_time": "2020-02-21T00:46:41", "upload_time_iso_8601": "2020-02-21T00:46:41.402273Z", "url": "https://files.pythonhosted.org/packages/4e/39/59776c2ab6b9d48bf93f3b25471e426ae081efabcf6465a4c7d6e198e9fa/pearl-2.3.3-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "007f691a1525d4fa941a6245d09dae24", "sha256": "09fb1e4fd85eeefec166db63b5905da2873b232cc609a6079e555a6c0dc7dce4"}, "downloads": -1, "filename": "pearl-2.3.3.tar.gz", "has_sig": false, "md5_digest": "007f691a1525d4fa941a6245d09dae24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 88500, "upload_time": "2020-02-21T00:46:43", "upload_time_iso_8601": "2020-02-21T00:46:43.086887Z", "url": "https://files.pythonhosted.org/packages/73/e5/1b45c94b9e19d1677bb8ad8ffb459b4d38461b3ebd981e7d3af2bc46f3ef/pearl-2.3.3.tar.gz"}]}