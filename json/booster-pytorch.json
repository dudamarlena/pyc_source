{"info": {"author": "Valentin Lievin", "author_email": "valentin.lievin@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Booster\n\nA lightweight library to ease the training and the debugging of deep neural networks with PyTorch. Data structures and paradigms.\n\n## Data Structures\n\n### Diagnostic\n\nA two level dictionary structure to store the model diagnostics. Compatible with Tensorboard datastructure.\n\nExample:\n\n```python\nfrom booster.data import Diagnostic\n\ndata = {\n'loss' : {'nll' : [45., 58.], 'kl': [22., 18.]},\n'info : {'batch_size' : 16, 'runtime' : 0.01}\n}\n\ndiagnostic = Diagnostic(data)\n```\n\n### Aggregator\n\nA module to compute the running average of the diagnostics.\n\n```python\nfrom booster.data import Aggregator, Diagnostic\n\naggregator = Aggregator()\n...\naggregator.initialize()\nfor x in loader:\n  data = op_step(model, data)\n  aggregator.update(data)\n\nsummmary = aggregator.data # summary is a Diagnostic\nsummmary = summary.to('cpu')\n```\n\nThe output is a Diagnostic object and can easily be dumped to Tensorboard.\n\n```python\n# log to tensorboard\nwriter = SummaryWriter(log_dir=\"....\")\nsummary.log(writer, global_step)\n```\n\n## Pipeline: model + evaluator\n\nAn Evaluator computes the loss and the diagnostics. The pipeline fuses the model forward pass with the evaluator and can be wrapped into a custom Dataparallel class that handles the diagnostics.\n\n```python\n# fuse model + evaluator\npipeline = BoosterPipeline(model, evaluator)\n\n# wrap as DataParallel\nparallel_pipeline = DataParallelPipeline(pipeline, device_ids=device_ids)\n\n# evaluate model on multiple devices and gather loss and diagnostics\ndata = next(iter(loader))\nloss, diagnostics = parallel_pipeline(data) \n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vlievin/booster-pytorch", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "booster-pytorch", "package_url": "https://pypi.org/project/booster-pytorch/", "platform": "", "project_url": "https://pypi.org/project/booster-pytorch/", "project_urls": {"Homepage": "https://github.com/vlievin/booster-pytorch"}, "release_url": "https://pypi.org/project/booster-pytorch/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A lightweight library to ease the training and the debugging of deep neural networks with PyTorch. Data structures and paradigms.", "version": "0.0.1"}, "last_serial": 6051761, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a733190dc8e3f5c13fc80fbf776e1a83", "sha256": "8aefb907553abe188f68bb6e98f9302702c3ef475db6570d218b67a297c0a8d1"}, "downloads": -1, "filename": "booster-pytorch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a733190dc8e3f5c13fc80fbf776e1a83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9284, "upload_time": "2019-10-30T10:03:21", "upload_time_iso_8601": "2019-10-30T10:03:21.930778Z", "url": "https://files.pythonhosted.org/packages/b1/cb/3c6fa9efe2ed9c997abd2507062193f42be9cb1d6ae89de9ec5e3bf100a3/booster-pytorch-0.0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a733190dc8e3f5c13fc80fbf776e1a83", "sha256": "8aefb907553abe188f68bb6e98f9302702c3ef475db6570d218b67a297c0a8d1"}, "downloads": -1, "filename": "booster-pytorch-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a733190dc8e3f5c13fc80fbf776e1a83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9284, "upload_time": "2019-10-30T10:03:21", "upload_time_iso_8601": "2019-10-30T10:03:21.930778Z", "url": "https://files.pythonhosted.org/packages/b1/cb/3c6fa9efe2ed9c997abd2507062193f42be9cb1d6ae89de9ec5e3bf100a3/booster-pytorch-0.0.1.tar.gz"}]}