{"info": {"author": "Microsoft Corporation", "author_email": "ascl@microsoft.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Azure Storage File Share client library for Python\nAzure File Share storage offers fully managed file shares in the cloud that are accessible via the industry standard [Server Message Block (SMB) protocol](https://docs.microsoft.com/windows/desktop/FileIO/microsoft-smb-protocol-and-cifs-protocol-overview). Azure file shares can be mounted concurrently by cloud or on-premises deployments of Windows, Linux, and macOS. Additionally, Azure file shares can be cached on Windows Servers with Azure File Sync for fast access near where the data is being used.\n\nAzure file shares can be used to:\n\n* Replace or supplement on-premises file servers\n* \"Lift and shift\" applications\n* Simplify cloud development with shared application settings, diagnostic share, and Dev/Test/Debug tools\n\n[Source code](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/azure/storage/fileshare) | [Package (PyPI)](https://pypi.org/project/azure-storage-file-share/) | [API reference documentation](https://aka.ms/azsdk-python-storage-fileshare-ref) | [Product documentation](https://docs.microsoft.com/azure/storage/) | [Samples](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples)\n\n## Getting started\n\n### Prerequisites\n* Python 2.7, or 3.5 or later is required to use this package.\n* You must have an [Azure subscription](https://azure.microsoft.com/free/) and an\n[Azure storage account](https://docs.microsoft.com/azure/storage/common/storage-account-overview) to use this package.\n\n### Install the package\nInstall the Azure Storage File Share client library for Python with [pip](https://pypi.org/project/pip/):\n\n```bash\npip install azure-storage-file-share\n```\n\n### Create a storage account\nIf you wish to create a new storage account, you can use the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-portal),\n[Azure PowerShell](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-powershell),\nor [Azure CLI](https://docs.microsoft.com/azure/storage/common/storage-quickstart-create-account?tabs=azure-cli):\n\n```bash\n# Create a new resource group to hold the storage account -\n# if using an existing resource group, skip this step\naz group create --name my-resource-group --location westus2\n\n# Create the storage account\naz storage account create -n my-storage-account-name -g my-resource-group\n```\n\n### Create the client\nThe Azure Storage File Share client library for Python allows you to interact with four types of resources: the storage\naccount itself, file shares, directories, and files. Interaction with these resources starts with an instance of a\n[client](#clients). To create a client object, you will need the storage account's file service URL and a\ncredential that allows you to access the storage account:\n\n```python\nfrom azure.storage.fileshare import ShareServiceClient\n\nservice = ShareServiceClient(account_url=\"https://<my-storage-account-name>.file.core.windows.net/\", credential=credential)\n```\n\n#### Looking up the account URL\nYou can find the storage account's file service URL using the\n[Azure Portal](https://docs.microsoft.com/azure/storage/common/storage-account-overview#storage-account-endpoints),\n[Azure PowerShell](https://docs.microsoft.com/powershell/module/az.storage/get-azstorageaccount),\nor [Azure CLI](https://docs.microsoft.com/cli/azure/storage/account?view=azure-cli-latest#az-storage-account-show):\n\n```bash\n# Get the file service URL for the storage account\naz storage account show -n my-storage-account-name -g my-resource-group --query \"primaryEndpoints.file\"\n```\n\n#### Types of credentials\nThe `credential` parameter may be provided in a number of different forms, depending on the type of\n[authorization](https://docs.microsoft.com/azure/storage/common/storage-auth) you wish to use:\n1. To use a [shared access signature (SAS) token](https://docs.microsoft.com/azure/storage/common/storage-sas-overview),\n   provide the token as a string. If your account URL includes the SAS token, omit the credential parameter.\n   You can generate a SAS token from the Azure Portal under \"Shared access signature\" or use one of the `generate_sas()`\n   functions to create a sas token for the storage account, share, or file:\n\n    ```python\n    from datetime import datetime, timedelta\n    from azure.storage.fileshare import ShareServiceClient, generate_account_sas, ResourceTypes, AccountSasPermissions\n\n    sas_token = generate_account_sas(\n        account_name=\"<storage-account-name>\",\n        account_key=\"<account-access-key>\",\n        resource_types=ResourceTypes(service=True),\n        permission=AccountSasPermissions(read=True),\n        expiry=datetime.utcnow() + timedelta(hours=1)\n    )\n\n    share_service_client = ShareServiceClient(account_url=\"https://<my_account_name>.file.core.windows.net\", credential=sas_token)\n    ```\n\n2. To use a storage account [shared key](https://docs.microsoft.com/rest/api/storageservices/authenticate-with-shared-key/)\n   (aka account key or access key), provide the key as a string. This can be found in the Azure Portal under the \"Access Keys\" \n   section or by running the following Azure CLI command:\n\n    ```az storage account keys list -g MyResourceGroup -n MyStorageAccount```\n\n    Use the key as the credential parameter to authenticate the client:\n    ```python\n    from azure.storage.fileshare import ShareServiceClient\n    service = ShareServiceClient(account_url=\"https://<my_account_name>.file.core.windows.net\", credential=\"<account_access_key>\")\n    ```\n\n#### Creating the client from a connection string\nDepending on your use case and authorization method, you may prefer to initialize a client instance with a storage\nconnection string instead of providing the account URL and credential separately. To do this, pass the storage\nconnection string to the client's `from_connection_string` class method:\n\n```python\nfrom azure.storage.fileshare import ShareServiceClient\n\nconnection_string = \"DefaultEndpointsProtocol=https;AccountName=xxxx;AccountKey=xxxx;EndpointSuffix=core.windows.net\"\nservice = ShareServiceClient.from_connection_string(conn_str=connection_string)\n```\n\nThe connection string to your storage account can be found in the Azure Portal under the \"Access Keys\" section or by running the following CLI command:\n\n```bash\naz storage account show-connection-string -g MyResourceGroup -n MyStorageAccount\n```\n\n## Key concepts\nThe following components make up the Azure File Share Service:\n* The storage account itself\n* A file share within the storage account\n* An optional hierarchy of directories within the file share\n* A file within the file share, which may be up to 1 TiB in size\n\nThe Azure Storage File Share client library for Python allows you to interact with each of these components through the\nuse of a dedicated client object.\n\n### Clients\nFour different clients are provided to to interact with the various components of the File Share Service:\n1. [ShareServiceClient](https://aka.ms/azsdk-python-storage-fileshare-shareserviceclient) -\n    this client represents interaction with the Azure storage account itself, and allows you to acquire preconfigured\n    client instances to access the file shares within. It provides operations to retrieve and configure the service\n    properties as well as list, create, and delete shares within the account. To perform operations on a specific share,\n    retrieve a client using the `get_share_client` method.\n2. [ShareClient](https://aka.ms/azsdk-python-storage-fileshare-shareclient) -\n    this client represents interaction with a specific file share (which need not exist yet), and allows you to acquire\n    preconfigured client instances to access the directories and files within. It provides operations to create, delete,\n    configure, or create snapshots of a share and includes operations to create and enumerate the contents of\n    directories within it. To perform operations on a specific directory or file, retrieve a client using the\n    `get_directory_client` or `get_file_client` methods.\n3. [ShareDirectoryClient](https://aka.ms/azsdk-python-storage-fileshare-sharedirectoryclient) -\n    this client represents interaction with a specific directory (which need not exist yet). It provides operations to\n    create, delete, or enumerate the contents of an immediate or nested subdirectory, and includes operations to create\n    and delete files within it. For operations relating to a specific subdirectory or file, a client for that entity can\n    also be retrieved using the `get_subdirectory_client` and `get_file_client` functions.\n4. [ShareFileClient](http://aka.ms/azsdk-python-storage-fileshare-sharefileclient) -\n    this client represents interaction with a specific file (which need not exist yet). It provides operations to\n    upload, download, create, delete, and copy a file.\n\nFor details on path naming restrictions, see [Naming and Referencing Shares, Directories, Files, and Metadata](https://docs.microsoft.com/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata).\n\n## Examples\nThe following sections provide several code snippets covering some of the most common Storage File Share tasks, including:\n\n* [Creating a file share](#creating-a-file-share \"Creating a file share\")\n* [Uploading a file](#uploading-a-file \"Uploading a file\")\n* [Downloading a file](#downloading-a-file \"Downloading a file\")\n* [Listing contents of a directory](#listing-contents-of-a-directory \"Listing contents of a directory\")\n\n### Creating a file share\nCreate a file share to store your files\n\n```python\nfrom azure.storage.fileshare import ShareClient\n\nshare = ShareClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"my_share\")\nshare.create_share()\n```\n\nUse the async client to create a file share\n\n```python\nfrom azure.storage.fileshare.aio import ShareClient\n\nshare = ShareClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"my_share\")\nawait share.create_share()\n```\n\n### Uploading a file\nUpload a file to the share\n\n```python\nfrom azure.storage.fileshare import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"my_share\", file_path=\"my_file\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as source_file:\n    file_client.upload_file(source_file)\n```\n\nUpload a file asynchronously\n\n```python\nfrom azure.storage.fileshare.aio import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"my_share\", file_path=\"my_file\")\n\nwith open(\"./SampleSource.txt\", \"rb\") as source_file:\n    await file_client.upload_file(source_file)\n```\n\n### Downloading a file\nDownload a file from the share\n\n```python\nfrom azure.storage.fileshare import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"my_share\", file_path=\"my_file\")\n\nwith open(\"DEST_FILE\", \"wb\") as file_handle:\n    data = file_client.download_file()\n    data.readinto(file_handle)\n```\n\nDownload a file asynchronously\n\n```python\nfrom azure.storage.fileshare.aio import ShareFileClient\n\nfile_client = ShareFileClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"my_share\", file_path=\"my_file\")\n\nwith open(\"DEST_FILE\", \"wb\") as file_handle:\n    data = await file_client.download_file()\n    await data.readinto(file_handle)\n```\n\n### Listing contents of a directory\nList all directories and files under a parent directory\n\n```python\nfrom azure.storage.fileshare import ShareDirectoryClient\n\nparent_dir = ShareDirectoryClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"my_share\", directory_path=\"parent_dir\")\n\nmy_list = list(parent_dir.list_directories_and_files())\nprint(my_list)\n```\n\nList contents of a directory asynchronously\n\n```python\nfrom azure.storage.fileshare.aio import ShareDirectoryClient\n\nparent_dir = ShareDirectoryClient.from_connection_string(conn_str=\"<connection_string>\", share_name=\"my_share\", directory_path=\"parent_dir\")\n\nmy_files = []\nasync for item in parent_dir.list_directories_and_files():\n    my_files.append(item)\nprint(my_files)\n```\n\n## Optional Configuration\n\nOptional keyword arguments that can be passed in at the client and per-operation level. \n\n### Retry Policy configuration\n\nUse the following keyword arguments when instantiating a client to configure the retry policy:\n\n* __retry_total__ (int): Total number of retries to allow. Takes precedence over other counts.\nPass in `retry_total=0` if you do not want to retry on requests. Defaults to 10.\n* __retry_connect__ (int): How many connection-related errors to retry on. Defaults to 3.\n* __retry_read__ (int): How many times to retry on read errors. Defaults to 3.\n* __retry_status__ (int): How many times to retry on bad status codes. Defaults to 3.\n* __retry_to_secondary__ (bool): Whether the request should be retried to secondary, if able.\nThis should only be enabled of RA-GRS accounts are used and potentially stale data can be handled.\nDefaults to `False`.\n\n### Other client / per-operation configuration\n\nOther optional configuration keyword arguments that can be specified on the client or per-operation.\n\n**Client keyword arguments:**\n\n* __connection_timeout__ (int): Optionally sets the connect and read timeout value, in seconds.\n* __transport__ (Any): User-provided transport to send the HTTP request.\n\n**Per-operation keyword arguments:**\n\n* __raw_response_hook__ (callable): The given callback uses the response returned from the service.\n* __raw_request_hook__ (callable): The given callback uses the request before being sent to service.\n* __client_request_id__ (str): Optional user specified identification of the request.\n* __user_agent__ (str): Appends the custom value to the user-agent header to be sent with the request.\n* __logging_enable__ (bool): Enables logging at the DEBUG level. Defaults to False. Can also be passed in at\nthe client level to enable it for all requests.\n* __headers__ (dict): Pass in custom headers as key, value pairs. E.g. `headers={'CustomValue': value}`\n\n\n## Troubleshooting\n### General\nStorage File clients raise exceptions defined in [Azure Core](https://github.com/Azure/azure-sdk-for-python/blob/master/sdk/core/azure-core/README.md).\nAll File service operations will throw a `StorageErrorException` on failure with helpful [error codes](https://docs.microsoft.com/rest/api/storageservices/file-service-error-codes).\n\n### Logging\nThis library uses the standard\n[logging](https://docs.python.org/3/library/logging.html) library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport logging\nfrom azure.storage.fileshare import ShareServiceClient\n\n# Create a logger for the 'azure.storage.fileshare' SDK\nlogger = logging.getLogger('azure.storage.fileshare')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nservice_client = ShareServiceClient.from_connection_string(\"your_connection_string\", logging_enable=True)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```py\nservice_client.get_service_properties(logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nGet started with our [File Share samples](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples).\n\nSeveral Storage File Share Python SDK samples are available to you in the SDK's GitHub repository. These samples provide example code for additional scenarios commonly encountered while working with Storage File Share:\n\n* [file_samples_hello_world.py](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_hello_world.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_hello_world_async.py)) - Examples found in this article:\n    * Client creation\n    * Create a file share\n    * Upload a file\n\n* [file_samples_authentication.py](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_authentication.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_authentication_async.py)) - Examples for authenticating and creating the client:\n    * From a connection string\n    * From a shared access key\n    * From a shared access signature token\n\n* [file_samples_service.py](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_service.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_service_async.py)) - Examples for interacting with the file service:\n    * Get and set service properties\n    * Create, list, and delete shares\n    * Get a share client\n\n* [file_samples_share.py](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_share.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_share_async.py)) - Examples for interacting with file shares:\n    * Create a share snapshot\n    * Set share quota and metadata\n    * List directories and files\n    * Get the directory or file client to interact with a specific entity\n\n* [file_samples_directory.py](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_directory.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_directory_async.py)) - Examples for interacting with directories:\n    * Create a directory and add files\n    * Create and delete subdirectories\n    * Get the subdirectory client\n\n* [file_samples_client.py](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_client.py) ([async version](https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share/samples/file_samples_client_async.py)) - Examples for interacting with files:\n    * Create, upload, download, and delete files\n    * Copy a file from a URL\n\n### Additional documentation\nFor more extensive documentation on Azure File Share storage, see the [Azure File Share storage documentation](https://docs.microsoft.com/azure/storage/files/) on docs.microsoft.com.\n\n## Contributing\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n\n# Release History\n\n## 12.1.1 (2020-03-10)\n\n**Notes**\n- The `StorageUserAgentPolicy` is now replaced with the `UserAgentPolicy` from azure-core. With this, the custom user agents are now added as a prefix instead of being appended.\n\n## 12.1.0\n\n**New features**\n- Added support for the 2019-07-07 service version, and added `api_version` parameter to clients.\n- `ShareLeaseClient` was introduced to both sync and async versions of the SDK, which allows users to perform operations on file leases.\n- `failed_handles_count` info was included in `close_handle` and `close_all_handles` result.\n- Added support for obtaining premium file properties in `list_shares` and `get_share_properties`.\n- Added support for additional `start_copy_from_url` parameters - `file_permission`, `permission_key`, `file_attributes`, `file_creation_time`, `file_last_write_time`, `ignore_read_only`, and `set_archive_attribute`.\n\n**Fixes and improvements**\n- Fixed a bug: `clear_range` API was not working.\n\n**Fixes**\n- Responses are always decoded as UTF8\n\n## 12.0.0\n\n**New features**\n- Added `delete_directory` method to the `share_client`.\n- All the clients now have a `close()` method to close the sockets opened by the client when using without a context manager.\n\n**Fixes and improvements**\n- Fixes a bug where determining length breaks while uploading a file when provided with an invalid fileno.\n\n**Breaking changes**\n- `close_handle(handle)` and `close_all_handles()` no longer return int. These functions return a dictionary which has the number of handles closed and number of handles failed to be closed.\n\n## 12.0.0b5\n\n**Important: This package was previously named azure-storage-file**\n\nGoing forward, to use this SDK, please install `azure-storage-file-share`.\nAdditionally:\n- The namespace within the package has also been renamed to `azure.storage.fileshare`.\n- `FileServiceClient` has been renamed to `ShareServiceClient`.\n- `DirectoryClient` has been renamed to `ShareDirectoryClient`.\n- `FileClient` has been renamed to `ShareFileClient`.\n\n**Additional Breaking changes**\n\n- `ShareClient` now accepts only `account_url` with mandatory a string param `share_name`.\nTo use a share_url, the method `from_share_url` must be used.\n- `ShareDirectoryClient` now accepts only `account_url` with mandatory string params `share_name` and `directory_path`.\nTo use a directory_url, the method `from_directory_url` must be used.\n- `ShareFileClient` now accepts only `account_url` with mandatory string params `share_name` and\n`file_path`. To use a file_url, the method `from_file_url` must be used.\n- `file_permission_key` parameter has been renamed to `permission_key`\n- `set_share_access_policy` has required parameter `signed_identifiers`.\n- `NoRetry` policy has been removed. Use keyword argument `retry_total=0` for no retries.\n- Removed types that were accidentally exposed from two modules. Only `ShareServiceClient`, `ShareClient`, `ShareDirectoryClient` and `ShareFileClient` should be imported from azure.storage.fileshare.aio\n- Some parameters have become keyword only, rather than positional. Some examples include:\n  - `loop`\n  - `max_concurrency`\n  - `validate_content`\n  - `timeout` etc.\n- Client and model files have been made internal. Users should import from the top level modules `azure.storage.fileshare` and `azure.storage.fileshare.aio` only.\n- The `generate_shared_access_signature` methods on each of `ShareServiceClient`, `ShareClient` and `ShareFileClient` have been replaced by module level functions `generate_account_sas`, `generate_share_sas` and `generate_file_sas`.\n- `start_range` and `end_range` params are now renamed to and behave like`offset` and `length` in\nthe following APIs:\n  - download_file\n  - upload_range\n  - upload_range_from_url\n  - clear_range\n  - get_ranges\n- `StorageStreamDownloader` is no longer iterable. To iterate over the file data stream, use `StorageStreamDownloader.chunks`.\n- The public attributes of `StorageStreamDownloader` have been limited to:\n  - `name` (str): The name of the file.\n  - `path` (str): The full path of the file.\n  - `share` (str): The share the file will be downloaded from.\n  - `properties` (`FileProperties`): The properties of the file.\n  - `size` (int): The size of the download. Either the total file size, or the length of a subsection if sepcified. Previously called `download_size`.\n- `StorageStreamDownloader` now has new functions:\n  - `readall()`: Reads the complete download stream, returning bytes. This replaces the functions `content_as_bytes` and `content_as_text` which have been deprecated.\n  - `readinto(stream)`: Download the complete stream into the supplied writable stream, returning the number of bytes written. This replaces the function `download_to_stream` which has been deprecated.\n- `ShareFileClient.close_handles` and `ShareDirectoryClient.close_handles` have both been replaced by two functions each; `close_handle(handle)` and `close_all_handles()`. These functions are blocking and return integers (the number of closed handles) rather than polling objects.\n- `get_service_properties` now returns a dict with keys consistent to `set_service_properties`\n\n**New features**\n\n- `ResourceTypes`, `NTFSAttributes`, and `Services` now have method `from_string` which takes parameters as a string.\n\n\n## 12.0.0b4\n\n**Breaking changes**\n\n- Permission models.\n  - `AccountPermissions`, `SharePermissions` and `FilePermissions` have been renamed to\n  `AccountSasPermissions`, `ShareSasPermissions` and `FileSasPermissions` respectively.\n  - enum-like list parameters have been removed from all three of them.\n  - `__add__` and `__or__` methods are removed.\n- `max_connections` is now renamed to `max_concurrency`.\n\n**New features**\n\n- `AccountSasPermissions`, `FileSasPermissions`, `ShareSasPermissions` now have method `from_string` which\ntakes parameters as a string.\n\n## 12.0.0b3\n\n**New features**\n- Added upload_range_from_url API to write the bytes from one Azure File endpoint into the specified range of another Azure File endpoint.\n- Added set_http_headers for directory_client, create_permission_for_share and get_permission_for_share APIs.\n- Added optional parameters for smb properties related parameters for create_file*, create_directory* related APIs and set_http_headers API.\n- Updated get_properties for directory and file so that the response has SMB properties.\n\n**Dependency updates**\n- Adopted [azure-core](https://pypi.org/project/azure-core/) 1.0.0b3\n  - If you later want to revert to previous versions of azure-storage-file, or another Azure SDK\n  library requiring azure-core 1.0.0b1 or azure-core 1.0.0b2, you must explicitly install\n  the specific version of azure-core as well. For example:\n\n  `pip install azure-core==1.0.0b2 azure-storage-file==12.0.0b2`\n\n**Fixes and improvements**\n- Fix where content-type was being added in the request when not mentioned explicitly.\n\n\n## 12.0.0b2\n\n**Breaking changes**\n- Renamed `copy_file_from_url` to `start_copy_from_url` and changed behaviour to return a dictionary of copy properties rather than a polling object. Status of the copy operation can be retrieved with the `get_file_properties` operation.\n- Added `abort_copy` operation to the `FileClient` class. This replaces the previous abort operation on the copy status polling operation.\n- The behavior of listing operations has been modified:\n    - The previous `marker` parameter has been removed.\n    - The iterable response object now supports a `by_page` function that will return a secondary iterator of batches of results. This function supports a `continuation_token` parameter to replace the previous `marker` parameter.\n- The new listing behaviour is also adopted by the `receive_messages` operation:\n    - The receive operation returns a message iterator as before.\n    - The returned iterator supports a `by_page` operation to receive messages in batches.\n\n**New features**\n- Added async APIs to subnamespace `azure.storage.file.aio`.\n- Distributed tracing framework OpenCensus is now supported.\n\n**Dependency updates**\n- Adopted [azure-core](https://pypi.org/project/azure-core/) 1.0.0b2\n  - If you later want to revert to azure-storage-file 12.0.0b1, or another Azure SDK\n  library requiring azure-core 1.0.0b1, you must explicitly install azure-core\n  1.0.0b1 as well. For example:\n\n  `pip install azure-core==1.0.0b1 azure-storage-file==12.0.0b1`\n\n**Fixes and improvements**\n- Fix for closing file handles - continuation token was not being passed to subsequent calls.\n- General refactor of duplicate and shared code.\n\n\n## 12.0.0b1\n\nVersion 12.0.0b1 is the first preview of our efforts to create a user-friendly and Pythonic client library for Azure Storage Files. For more information about this, and preview releases of other Azure SDK libraries, please visit\nhttps://aka.ms/azure-sdk-preview1-python.\n\n**Breaking changes: New API design**\n- Operations are now scoped to a particular client:\n    - `FileServiceClient`: This client handles account-level operations. This includes managing service properties and listing the shares within an account.\n    - `ShareClient`: The client handles operations for a particular share. This includes creating or deleting that share, as well as listing the directories within that share, and managing properties and metadata.\n    - `DirectoryClient`: The client handles operations for a particular directory. This includes creating or deleting that directory, as well as listing the files and subdirectories, and managing properties and metadata.\n    - `FileClient`: The client handles operations for a particular file. This includes creating or deleting that file, as well as upload and download data and managing properties.\n\n    These clients can be accessed by navigating down the client hierarchy, or instantiated directly using URLs to the resource (account, share, directory or file).\n    For full details on the new API, please see the [reference documentation](http://azure.github.io/azure-sdk-for-python/ref/azure.storage.file.html).\n- The copy file operation now returns a polling object that can be used to check the status of the operation, as well as abort the operation.\n- The `close_handles` operation now return a polling object that can be used to check the status of the operation.\n- Download operations now return a streaming object that can download data in multiple ways:\n    - Iteration: The streamer is an iterable object that will download and yield the content in chunks. Only supports single threaded download.\n    - `content_as_bytes`: Return the entire file content as bytes. Blocking operation that supports multi-threaded download.\n    - `content_as_text`: Return the entire file content as decoded text. Blocking operation that supports multi-threaded download.\n    - `download_to_stream`: Download the entire content to an open stream handle (e.g. an open file). Supports multi-threaded download.\n- New underlying REST pipeline implementation, based on the new `azure.core` library.\n- Client and pipeline configuration is now available via keyword arguments at both the client level, and per-operation. See reference documentation for a full list of optional configuration arguments.\n- New error hierarchy:\n    - All service errors will now use the base type: `azure.core.exceptions.HttpResponseError`\n    - The are a couple of specific exception types derived from this base type for common error scenarios:\n        - `ResourceNotFoundError`: The resource (e.g. queue, message) could not be found. Commonly a 404 status code.\n        - `ResourceExistsError`: A resource conflict - commonly caused when attempting to create a resource that already exists.\n        - `ResourceModifiedError`: The resource has been modified (e.g. overwritten) and therefore the current operation is in conflict. Alternatively this may be raised if a condition on the operation is not met.\n        - `ClientAuthenticationError`: Authentication failed.\n- Operation `set_file_properties` has been renamed to `set_http_headers`.\n- Operations `get_file_to_<output>` have been replaced with `download_file`. See above for download output options.\n- Operations `create_file_from_<input>` have been replace with `upload_file`.\n- Operations `get_share_acl` and `set_share_acl` have been renamed to `get_share_access_policy` and `set_share_access_policy`.\n- Operation `set_share_properties` has been renamed to `set_share_quota`.\n- Operation `snapshot_share` has been renamed to `create_snapshot`.\n- Operation `copy_file` has been renamed to `copy_file_from_url`.\n- No longer have specific operations for `get_metadata` - use `get_properties` instead.\n- No longer have specific operations for `exists` - use `get_properties` instead.\n- Operation `update_range` has been renamed to `upload_range`.\n\n## 2.0.1\n- Updated dependency on azure-storage-common.\n\n## 2.0.0\n- Support for 2018-11-09 REST version. Please see our REST API documentation and blogs for information about the related added features.\n- Added an option to get share stats in bytes.\n- Added support for listing and closing file handles.\n\n## 1.4.0\n\n- azure-storage-nspkg is not installed anymore on Python 3 (PEP420-based namespace package)\n\n## 1.3.1\n\n- Fixed design flaw where get_file_to_* methods buffer entire file when max_connections is set to 1.\n\n## 1.3.0\n\n- Support for 2018-03-28 REST version. Please see our REST API documentation and blog for information about the related added features.\n\n## 1.2.0rc1\n\n- Support for 2017-11-09 REST version. Please see our REST API documentation and blog for information about the related added features.\n\n## 1.1.0\n\n- Support for 2017-07-29 REST version. Please see our REST API documentation and blogs for information about the related added features.\n- Error message now contains the ErrorCode from the x-ms-error-code header value.\n\n## 1.0.0\n\n- The package has switched from Apache 2.0 to the MIT license.\n- Fixed bug where get_file_to_* cannot get a single byte when start_range and end_range are both equal to 0.\n- Metadata keys are now case-preserving when fetched from the service. Previously they were made lower-case by the library.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "azure-storage-file-share", "package_url": "https://pypi.org/project/azure-storage-file-share/", "platform": "", "project_url": "https://pypi.org/project/azure-storage-file-share/", "project_urls": {"Homepage": "https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/storage/azure-storage-file-share"}, "release_url": "https://pypi.org/project/azure-storage-file-share/12.1.1/", "requires_dist": ["azure-core (<2.0.0,>=1.2.2)", "msrest (>=0.6.10)", "cryptography (>=2.1.4)", "futures ; python_version<'3.0'", "azure-storage-nspkg (<4.0.0,>=3.0.0) ; python_version<'3.0'", "enum34 (>=1.0.4) ; python_version<'3.4'", "typing ; python_version<'3.5'"], "requires_python": "", "summary": "Microsoft Azure Azure File Share Storage Client Library for Python", "version": "12.1.1"}, "last_serial": 6796194, "releases": {"12.0.0": [{"comment_text": "", "digests": {"md5": "0ab1b345fedc17923b6b7ecb317e2cc8", "sha256": "8fb96866f28201a73c74c64555f147e5368c9dd82fc52331a9f1d6b15cd925fa"}, "downloads": -1, "filename": "azure_storage_file_share-12.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ab1b345fedc17923b6b7ecb317e2cc8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 180747, "upload_time": "2019-12-04T21:58:06", "upload_time_iso_8601": "2019-12-04T21:58:06.928377Z", "url": "https://files.pythonhosted.org/packages/2e/d9/70bdf3e9713e1c6c09eb03278f5466a93094328093670d8a20ab0d4dbe92/azure_storage_file_share-12.0.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "0a2414775a66edfce4d458c057bf8dc1", "sha256": "8f26bd40a06c0aa370ba8102794a7e3c4da5b241a1db8ff17b5589b6c7dcc595"}, "downloads": -1, "filename": "azure-storage-file-share-12.0.0.zip", "has_sig": false, "md5_digest": "0a2414775a66edfce4d458c057bf8dc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 284393, "upload_time": "2019-12-04T21:58:09", "upload_time_iso_8601": "2019-12-04T21:58:09.099319Z", "url": "https://files.pythonhosted.org/packages/f9/dc/3f133aa5082478bb3b33bd763147724789842a78e28efb4f01bc6c6b1e8e/azure-storage-file-share-12.0.0.zip"}], "12.0.0b5": [{"comment_text": "", "digests": {"md5": "304b36c85ef39cc9cfa75ce73a227ca7", "sha256": "77c0d1049d7b5daad762c2bc9b3297f82fa19e5f6f0447267a6b733c48ab4fd4"}, "downloads": -1, "filename": "azure_storage_file_share-12.0.0b5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "304b36c85ef39cc9cfa75ce73a227ca7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 180173, "upload_time": "2019-10-31T23:49:42", "upload_time_iso_8601": "2019-10-31T23:49:42.135432Z", "url": "https://files.pythonhosted.org/packages/6a/b3/463d3d17454192e744f11979cc755d1cce23d1034ea592f793010291bd9a/azure_storage_file_share-12.0.0b5-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "84670fb1c9d0cbf609cc6405e2b00a97", "sha256": "62bc4a683ef2f2670604b92fb261123975a57faee5ea8a691a43a7bdb7cd2c75"}, "downloads": -1, "filename": "azure-storage-file-share-12.0.0b5.zip", "has_sig": false, "md5_digest": "84670fb1c9d0cbf609cc6405e2b00a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3239032, "upload_time": "2019-10-31T23:49:45", "upload_time_iso_8601": "2019-10-31T23:49:45.208582Z", "url": "https://files.pythonhosted.org/packages/43/71/1f80bbf8b90700b4af7c0c0acf1450a589166218cc7cc44b68f50ef75363/azure-storage-file-share-12.0.0b5.zip"}], "12.1.0": [{"comment_text": "", "digests": {"md5": "10f75ab0612cbe4e865efa93b31a649c", "sha256": "94461f8dd8a958705afd1ca415e9d7f42e2524fa9851fbe395afeabe0302d583"}, "downloads": -1, "filename": "azure_storage_file_share-12.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "10f75ab0612cbe4e865efa93b31a649c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 196528, "upload_time": "2020-02-12T23:30:54", "upload_time_iso_8601": "2020-02-12T23:30:54.204112Z", "url": "https://files.pythonhosted.org/packages/b1/5c/e7250d2df0e1a3890f81200cb60692a4cbe0ef317554c7dc29755b6f10e7/azure_storage_file_share-12.1.0-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "2383b59f1f0f5baa3a21bac097d0a398", "sha256": "24ef07f031fcaf59d62249d3fed7f87c49ef0ea318ca4cfcb1ffe60bae4406ad"}, "downloads": -1, "filename": "azure-storage-file-share-12.1.0.zip", "has_sig": false, "md5_digest": "2383b59f1f0f5baa3a21bac097d0a398", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 309407, "upload_time": "2020-02-12T23:30:56", "upload_time_iso_8601": "2020-02-12T23:30:56.990242Z", "url": "https://files.pythonhosted.org/packages/34/ad/1cf5e03c7861413d03996617e42b40690a61039bcb3e12972db44c0c1f8b/azure-storage-file-share-12.1.0.zip"}], "12.1.1": [{"comment_text": "", "digests": {"md5": "df76c0d9a313b29c67e9a30e544256d9", "sha256": "5d355264a37a44197f5af4e3eb6342689dd8c4c39f60368a17d7a44dab59891d"}, "downloads": -1, "filename": "azure_storage_file_share-12.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df76c0d9a313b29c67e9a30e544256d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 196701, "upload_time": "2020-03-11T23:31:16", "upload_time_iso_8601": "2020-03-11T23:31:16.927452Z", "url": "https://files.pythonhosted.org/packages/d2/de/091ec9c5237da56f330c0214c9e10cab8c7126c7bb53f93278825d84231a/azure_storage_file_share-12.1.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8a74804f070ce3eb6a1276d7ac1632a8", "sha256": "661ed9669b9fbb3163899294d28f11f7c135336e1513aab6bd1ff9ef3c6febb3"}, "downloads": -1, "filename": "azure-storage-file-share-12.1.1.zip", "has_sig": false, "md5_digest": "8a74804f070ce3eb6a1276d7ac1632a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 309754, "upload_time": "2020-03-11T23:31:19", "upload_time_iso_8601": "2020-03-11T23:31:19.160915Z", "url": "https://files.pythonhosted.org/packages/b1/91/5bb7cb8db130aed9f0c585683b517b69d6c932ed868a2320c71278b995af/azure-storage-file-share-12.1.1.zip"}]}, "urls": [{"comment_text": "", "digests": {"md5": "df76c0d9a313b29c67e9a30e544256d9", "sha256": "5d355264a37a44197f5af4e3eb6342689dd8c4c39f60368a17d7a44dab59891d"}, "downloads": -1, "filename": "azure_storage_file_share-12.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df76c0d9a313b29c67e9a30e544256d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 196701, "upload_time": "2020-03-11T23:31:16", "upload_time_iso_8601": "2020-03-11T23:31:16.927452Z", "url": "https://files.pythonhosted.org/packages/d2/de/091ec9c5237da56f330c0214c9e10cab8c7126c7bb53f93278825d84231a/azure_storage_file_share-12.1.1-py2.py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8a74804f070ce3eb6a1276d7ac1632a8", "sha256": "661ed9669b9fbb3163899294d28f11f7c135336e1513aab6bd1ff9ef3c6febb3"}, "downloads": -1, "filename": "azure-storage-file-share-12.1.1.zip", "has_sig": false, "md5_digest": "8a74804f070ce3eb6a1276d7ac1632a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 309754, "upload_time": "2020-03-11T23:31:19", "upload_time_iso_8601": "2020-03-11T23:31:19.160915Z", "url": "https://files.pythonhosted.org/packages/b1/91/5bb7cb8db130aed9f0c585683b517b69d6c932ed868a2320c71278b995af/azure-storage-file-share-12.1.1.zip"}]}