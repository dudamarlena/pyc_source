{"info": {"author": "TensorTom", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.8"], "description": "aiohttp_csrf\n============\n\nThe library provides csrf (xsrf) protection for `aiohttp.web`__.\n\n.. _aiohttp_web: https://docs.aiohttp.org/en/latest/web.html\n\n__ aiohttp_web_\n\n.. image:: https://img.shields.io/travis/wikibusiness/aiohttp-csrf.svg\n    :target: https://travis-ci.org/wikibusiness/aiohttp-csrf\n\nBasic usage\n-----------\n\nThe library allows you to implement csrf (xsrf) protection for requests\n\n\nBasic usage example:\n\n.. code-block:: python\n\n    import aiohttp_csrf\n    from aiohttp import web\n\n    FORM_FIELD_NAME = '_csrf_token'\n    COOKIE_NAME = 'csrf_token'\n\n\n    def make_app():\n        csrf_policy = aiohttp_csrf.policy.FormPolicy(FORM_FIELD_NAME)\n\n        csrf_storage = aiohttp_csrf.storage.CookieStorage(COOKIE_NAME)\n\n        app = web.Application()\n\n        aiohttp_csrf.setup(app, policy=csrf_policy, storage=csrf_storage)\n\n        app.middlewares.append(aiohttp_csrf.csrf_middleware)\n\n        async def handler_get_form_with_token(request):\n            token = await aiohttp_csrf.generate_token(request)\n\n\n            body = '''\n                <html>\n                    <head><title>Form with csrf protection</title></head>\n                    <body>\n                        <form method=\"POST\" action=\"/\">\n                            <input type=\"hidden\" name=\"{field_name}\" value=\"{token}\" />\n                            <input type=\"text\" name=\"name\" />\n                            <input type=\"submit\" value=\"Say hello\">\n                        </form>\n                    </body>\n                </html>\n            '''  # noqa\n\n            body = body.format(field_name=FORM_FIELD_NAME, token=token)\n\n            return web.Response(\n                body=body.encode('utf-8'),\n                content_type='text/html',\n            )\n\n        async def handler_post_check(request):\n            post = await request.post()\n\n            body = 'Hello, {name}'.format(name=post['name'])\n\n            return web.Response(\n                body=body.encode('utf-8'),\n                content_type='text/html',\n            )\n\n        app.router.add_route(\n            'GET',\n            '/',\n            handler_get_form_with_token,\n        )\n\n        app.router.add_route(\n            'POST',\n            '/',\n            handler_post_check,\n        )\n\n        return app\n\n\n    web.run_app(make_app())\n\n\nInitialize\n~~~~~~~~~~\n\n\nFirst of all, you need to initialize ``aiohttp_csrf`` in your application:\n\n.. code-block:: python\n\n    app = web.Application()\n\n    csrf_policy = aiohttp_csrf.policy.FormPolicy(FORM_FIELD_NAME)\n\n    csrf_storage = aiohttp_csrf.storage.CookieStorage(COOKIE_NAME)\n\n    aiohttp_csrf.setup(app, policy=csrf_policy, storage=csrf_storage)\n\n\nMiddleware and decorators\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nAfter initialize you can use ``@aiohttp_csrf.csrf_protect`` for handlers, that you want to protect.\nOr you can initialize ``aiohttp_csrf.csrf_middleware`` and do not disturb about using decorator (`full middleware example here`_):\n\n.. _full middleware example here: demo/middleware.py\n\n.. code-block:: python\n\n    ...\n    app.middlewares.append(aiohttp_csrf.csrf_middleware)\n    ...\n\n\nIn this case all your handlers will be protected.\n\n\n**Note:** we strongly recommend to use ``aiohttp_csrf.csrf_middleware`` and ``@aiohttp_csrf.csrf_exempt`` instead of manually managing with ``@aiohttp_csrf.csrf_protect``.\nBut if you prefer to use ``@aiohttp_csrf.csrf_protect``, don't forget to use ``@aiohttp_csrf.csrf_protect`` for both methods: GET and POST\n(`manual protection example`_)\n\n.. _manual protection example: demo/manual_protection.py\n\n\nIf you want to use middleware, but need handlers without protection, you can use ``@aiohttp_csrf.csrf_exempt``.\nMark you handler with this decorator and this handler will not check the token:\n\n.. code-block:: python\n\n    @aiohttp_csrf.csrf_exempt\n    async def handler_post_not_check(request):\n        ...\n\n\n\nGenerate token\n~~~~~~~~~~~~~~\n\nFor generate token you need to call ``aiohttp_csrf.generate_token`` in your handler:\n\n.. code-block:: python\n\n    @aiohttp_csrf.csrf_protect\n    async def handler_get(request):\n        token = await aiohttp_csrf.generate_token(request)\n        ...\n\n\nAdvanced usage\n--------------\n\n\nPolicies\n~~~~~~~~\n\nYou can use different policies for check tokens. Library provides 3 types of policy:\n\n- **FormPolicy**. This policy will search token in the body of your POST request (Usually use for forms) or as a GET variable of the same name. You need to specify name of field that will be checked.\n- **HeaderPolicy**. This policy will search token in headers of your POST request (Usually use for AJAX requests). You need to specify name of header that will be checked.\n- **FormAndHeaderPolicy**. This policy combines behavior of **FormPolicy** and **HeaderPolicy**.\n\nYou can implement your custom policies if needed. But make sure that your custom policy implements ``aiohttp_csrf.policy.AbstractPolicy`` interface.\n\nStorages\n~~~~~~~~\n\nYou can use different types of storages for storing token. Library provides 2 types of storage:\n\n- **CookieStorage**. Your token will be stored in cookie variable. You need to specify cookie name.\n- **SessionStorage**. Your token will be stored in session. You need to specify session variable name.\n\n**Important:** If you want to use session storage, you need setup aiohttp_session in your application\n(`session storage example`_)\n\n.. _session storage example: demo/session_storage.py#L22\n\nYou can implement your custom storages if needed. But make sure that your custom storage implements ``aiohttp_csrf.storage.AbstractStorage`` interface.\n\n\nToken generators\n~~~~~~~~~~~~~~~~\n\nYou can use different token generator in your application.\nBy default storages using ``aiohttp_csrf.token_generator.SimpleTokenGenerator``\n\nBut if you need more secure token generator - you can use ``aiohttp_csrf.token_generator.HashedTokenGenerator``\n\nAnd you can implement your custom token generators if needed. But make sure that your custom token generator implements ``aiohttp_csrf.token_generator.AbstractTokenGenerator`` interface.\n\n\nInvalid token behavior\n~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, if token is invalid, ``aiohttp_csrf`` will raise ``aiohttp.web.HTTPForbidden`` exception.\n\nYou have ability to specify your custom error handler. It can be:\n\n- **callable instance. Input parameter - aiohttp request.**\n\n.. code-block:: python\n\n    def custom_error_handler(request):\n        # do something\n        return aiohttp.web.Response(status=403)\n\n    # or\n\n    async def custom_async_error_handler(request):\n        # await do something\n        return aiohttp.web.Response(status=403)\n\nIt will be called instead of protected handler.\n\n- **sub class of Exception**. In this case this Exception will be raised.\n\n.. code-block:: python\n\n    class CustomException(Exception):\n        pass\n\n\nYou can specify custom error handler globally, when initialize ``aiohttp_csrf`` in your application:\n\n.. code-block:: python\n\n    ...\n    class CustomException(Exception):\n        pass\n\n    ...\n    aiohttp_csrf.setup(app, policy=csrf_policy, storage=csrf_storage, error_renderer=CustomException)\n    ...\n\nIn this case custom error handler will be applied to all protected handlers.\n\nOr you can specify custom error handler locally, for specific handler:\n\n.. code-block:: python\n\n    ...\n    class CustomException(Exception):\n        pass\n\n    ...\n    @aiohttp_csrf.csrf_protect(error_renderer=CustomException)\n    def handler_with_custom_csrf_error(request):\n        ...\n\n\nIn this case custom error handler will be applied to this handler only.\nFor all other handlers will be applied global error handler.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TensorTom/aiohttp-csrf", "keywords": "csrf,xsrf,aiohttp", "license": "", "maintainer": "", "maintainer_email": "", "name": "aiohttp-csrf", "package_url": "https://pypi.org/project/aiohttp-csrf/", "platform": "", "project_url": "https://pypi.org/project/aiohttp-csrf/", "project_urls": {"Homepage": "https://github.com/TensorTom/aiohttp-csrf"}, "release_url": "https://pypi.org/project/aiohttp-csrf/0.0.2/", "requires_dist": ["aiohttp (>=3.2.0)", "aiohttp-session (>=2.4.0) ; extra == 'session'"], "requires_python": "", "summary": "('CSRF protection for aiohttp.web',)", "version": "0.0.2"}, "last_serial": 6753266, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "a7c4f7d34c9ebf6e94c8280d79da634e", "sha256": "a958cc1369b7a0f55f46a19fa18f95488144f9b563cb439f8c23e9741ebe1606"}, "downloads": -1, "filename": "aiohttp_csrf-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a7c4f7d34c9ebf6e94c8280d79da634e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7593, "upload_time": "2020-03-05T05:23:03", "upload_time_iso_8601": "2020-03-05T05:23:03.441634Z", "url": "https://files.pythonhosted.org/packages/c5/6a/f7791d75bc1dbb66ef0bec703189173ed8e07050a965df95767e354cd0ec/aiohttp_csrf-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1bc10528ad730f22989af6b10f32f5d0", "sha256": "f167400661265fdf787f436297fef84d3bbb5b9239fb4d5ca4f7f93e0ae1f37a"}, "downloads": -1, "filename": "aiohttp-csrf-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1bc10528ad730f22989af6b10f32f5d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7736, "upload_time": "2020-03-05T05:23:05", "upload_time_iso_8601": "2020-03-05T05:23:05.874506Z", "url": "https://files.pythonhosted.org/packages/13/f7/3ba87964d0e5e46b768fd8ef386bda0beb33eb1426f93d72ea0075ab36e9/aiohttp-csrf-0.0.2.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a7c4f7d34c9ebf6e94c8280d79da634e", "sha256": "a958cc1369b7a0f55f46a19fa18f95488144f9b563cb439f8c23e9741ebe1606"}, "downloads": -1, "filename": "aiohttp_csrf-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a7c4f7d34c9ebf6e94c8280d79da634e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7593, "upload_time": "2020-03-05T05:23:03", "upload_time_iso_8601": "2020-03-05T05:23:03.441634Z", "url": "https://files.pythonhosted.org/packages/c5/6a/f7791d75bc1dbb66ef0bec703189173ed8e07050a965df95767e354cd0ec/aiohttp_csrf-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1bc10528ad730f22989af6b10f32f5d0", "sha256": "f167400661265fdf787f436297fef84d3bbb5b9239fb4d5ca4f7f93e0ae1f37a"}, "downloads": -1, "filename": "aiohttp-csrf-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1bc10528ad730f22989af6b10f32f5d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7736, "upload_time": "2020-03-05T05:23:05", "upload_time_iso_8601": "2020-03-05T05:23:05.874506Z", "url": "https://files.pythonhosted.org/packages/13/f7/3ba87964d0e5e46b768fd8ef386bda0beb33eb1426f93d72ea0075ab36e9/aiohttp-csrf-0.0.2.tar.gz"}]}