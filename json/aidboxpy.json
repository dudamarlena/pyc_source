{"info": {"author": "beda.software", "author_email": "fhirpy@beda.software", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://travis-ci.org/beda-software/aidbox-py.svg?branch=master)](https://travis-ci.org/beda-software/aidbox-py)\n[![codecov](https://codecov.io/gh/beda-software/aidbox-py/branch/master/graph/badge.svg)](https://codecov.io/gh/beda-software/aidbox-py)\n[![pypi](https://img.shields.io/pypi/v/aidbox.svg)](https://pypi.python.org/pypi/aidbox)\n\n# aidbox-py\nAidbox client for python.\nThis package provides an API for CRUD operations over Aidbox resources.\n\nThe library is based on [fhir-py](https://github.com/beda-software/fhir-py) and the main difference between libraries in our case is the way they represent resource references (read more about [differences](https://docs.aidbox.app/basic-concepts/aidbox-and-fhir-formats)).\n\nAidbox-py also going to support some Aidbox features like _assoc operation, AidboxQuery and so on.\n\nMost examples from [fhir-py readme](https://github.com/beda-software/fhir-py/blob/master/README.md) also work for aidbox-py (but you need to replace FHIR client with AsyncAidboxClient/SyncAidboxClient). See base aidbox-py example below.\n\n\n# Getting started\n## Install\nMost recent version:\n`pip install git+https://github.com/beda-software/aidbox-py.git`\nPyPi:\n`pip install aidbox`\n\n## Async example\n```Python\nimport asyncio\nfrom aidboxpy import AsyncAidboxClient\nfrom fhirpy.base.exceptions import (\n    OperationOutcome, ResourceNotFound, MultipleResourcesFound\n)\n\n\nasync def main():\n    # Create an instance\n    client = AsyncAidboxClient(\n        'http://localhost:8080',\n        authorization='Bearer TOKEN'\n    )\n\n    # Search for patients\n    resources = client.resources('Patient')  # Return lazy search set\n    resources = resources.search(name='John').limit(10).page(2).sort('name')\n    patients = await resources.fetch()  # Returns a list of AsyncAidboxResource\n\n    # Get exactly one resource\n    try:\n        patient = await client.resources('Practitioner') \\\n            .search(id='id').get()\n    except ResourceNotFound:\n        pass\n    except MultipleResourcesFound:\n        pass\n\n    # Validate resource\n    try:\n        await client.resource(\n            'Person',\n            custom_prop='123',\n            telecom=True\n        ).is_valid()\n    except OperationOutcome as e:\n        print('Error: {}'.format(e))\n\n    # Create Organization resource\n    organization = client.resource(\n        'Organization',\n        name='beda.software',\n        active=False\n    )\n    await organization.save()\n\n    # Get patient resource by reference and delete\n    patient_ref = client.reference('Patient', 'new_patient')\n    patient_res = await patient_ref.to_resource()\n    await patient_res.delete()\n\n    # Iterate over search set and change organization\n    org_resources = client.resources('Organization').search(active=False)\n    async for org_resource in org_resources:\n        org_resource['active'] = True\n        await org_resource.save()\n\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n\n# API\nImport library:\n\n`from aidboxpy import SyncAidboxClient`\n\nor\n\n`from aidboxpy import AsyncAidboxClient`\n\nTo create AidboxClient instance use:\n\n`SyncAidboxClient(url, authorization='', extra_headers={})`\n\nor\n\n`AsyncAidboxClient(url, authorization='', extra_headers={})`\n\nReturns an instance of the connection to the server which provides:\n* .reference(resource_type, id, reference, **kwargs) - returns `SyncAidboxReference`/`AsyncAidboxReference` to the resource\n* .resource(resource_type, **kwargs) - returns `SyncAidboxResource`/`AsyncAidboxResource` which described below\n* .resources(resource_type) - returns `SyncAidboxSearchSet`/`AsyncAidboxSearchSet`\n\n`SyncAidboxResource`/`AsyncAidboxResource`\n\nprovides:\n* .serialize() - serializes resource\n* .get_by_path(path, default=None) \u2013 gets the value at path of resource\n* .save() - creates or updates resource instance\n* .delete() - deletes resource instance\n* .to_reference(**kwargs) - returns  `SyncAidboxReference`/`AsyncAidboxReference` for this resource\n\n`SyncAidboxReference`/`AsyncAidboxReference`\n\nprovides:\n* .to_resource() - returns `SyncAidboxResource`/`AsyncAidboxResource` for this reference\n\n`SyncAidboxSearchSet`/`AsyncAidboxSearchSet`\n\nprovides:\n* .search(param=value)\n* .limit(count)\n* .page(page)\n* .sort(*args)\n* .elements(*args, exclude=False)\n* .include(resource_type, attr=None, recursive=False, iterate=False)\n* .revinclude(resource_type, attr=None, recursive=False, iterate=False)\n* .has(*args, **kwargs)\n* .assoc(elements)\n* `async` .fetch() - makes query to the server and returns a list of `Resource` filtered by resource type\n* `async` .fetch_all() - makes query to the server and returns a full list of `Resource` filtered by resource type\n* `async` .fetch_raw() - makes query to the server and returns a raw Bundle `Resource`\n* `async` .first() - returns `Resource` or None\n* `async` .get(id=None) - returns `Resource` or raises `ResourceNotFound` when no resource found or MultipleResourcesFound when more than one resource found (parameter 'id' is deprecated)\n* `async` .count() - makes query to the server and returns the total number of resources that match the SearchSet\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/beda-software/aidbox-py", "keywords": "aidbox", "license": "", "maintainer": "", "maintainer_email": "", "name": "aidboxpy", "package_url": "https://pypi.org/project/aidboxpy/", "platform": "", "project_url": "https://pypi.org/project/aidboxpy/", "project_urls": {"Homepage": "http://github.com/beda-software/aidbox-py"}, "release_url": "https://pypi.org/project/aidboxpy/1.1.0/", "requires_dist": ["fhirpy (==1.1.0)"], "requires_python": "", "summary": "Aidbox client for python", "version": "1.1.0"}, "last_serial": 6360443, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "8656a0d9e319f7eb672c084a31ac091f", "sha256": "997b2a82c00f04e35d82317cfa65b245ede9d529a8e139f958a40dec6a8ea143"}, "downloads": -1, "filename": "aidboxpy-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8656a0d9e319f7eb672c084a31ac091f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4977, "upload_time": "2019-12-26T04:53:37", "upload_time_iso_8601": "2019-12-26T04:53:37.224846Z", "url": "https://files.pythonhosted.org/packages/bc/15/b908004b8b4f6658bfe5c79db1f016a356ea69f4adf9b94e64d14d6311d2/aidboxpy-1.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "af327896d9b861dcec1ed98137d03635", "sha256": "cdc00c8951b827893970a434fcb557143d594d2345fdc86775d12c00ad722587"}, "downloads": -1, "filename": "aidboxpy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "af327896d9b861dcec1ed98137d03635", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5362, "upload_time": "2019-12-26T04:53:39", "upload_time_iso_8601": "2019-12-26T04:53:39.765515Z", "url": "https://files.pythonhosted.org/packages/ab/9e/efdcb2d1601ecc52ad38b932ed9b7dbc020841154fb7370846822cbf238f/aidboxpy-1.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "8656a0d9e319f7eb672c084a31ac091f", "sha256": "997b2a82c00f04e35d82317cfa65b245ede9d529a8e139f958a40dec6a8ea143"}, "downloads": -1, "filename": "aidboxpy-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8656a0d9e319f7eb672c084a31ac091f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4977, "upload_time": "2019-12-26T04:53:37", "upload_time_iso_8601": "2019-12-26T04:53:37.224846Z", "url": "https://files.pythonhosted.org/packages/bc/15/b908004b8b4f6658bfe5c79db1f016a356ea69f4adf9b94e64d14d6311d2/aidboxpy-1.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "af327896d9b861dcec1ed98137d03635", "sha256": "cdc00c8951b827893970a434fcb557143d594d2345fdc86775d12c00ad722587"}, "downloads": -1, "filename": "aidboxpy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "af327896d9b861dcec1ed98137d03635", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5362, "upload_time": "2019-12-26T04:53:39", "upload_time_iso_8601": "2019-12-26T04:53:39.765515Z", "url": "https://files.pythonhosted.org/packages/ab/9e/efdcb2d1601ecc52ad38b932ed9b7dbc020841154fb7370846822cbf238f/aidboxpy-1.1.0.tar.gz"}]}