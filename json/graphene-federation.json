{"info": {"author": "Igor Kasianov", "author_email": "super.hang.glider@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries"], "description": "# graphene-federation\nFederation support for graphene\n\nBuild: [![CircleCI](https://circleci.com/gh/preply/graphene-federation.svg?style=svg)](https://circleci.com/gh/preply/graphene-federation)\n\n\nFederation specs implementation on top of Python graphene lib \nhttps://www.apollographql.com/docs/apollo-server/federation/federation-spec/\n\nBased on discussion: https://github.com/graphql-python/graphene/issues/953#issuecomment-508481652\n\nSupports now:\n* sdl (_service fields)  # make possible to add schema in federation (as is)\n* `@key` decorator (entity support) # to perform Queries across service boundaries\n    *  You can use multiple `@key` per each ObjectType\n    ```python\n        @key('id')\n        @key('email')\n        class User(ObjectType):\n            id = Int(required=True)\n            email = String()\n        \n            def __resolve_reference(self, info, **kwargs):\n                if self.id is not None:\n                    return User(id=self.id, email=f'name_{self.id}@gmail.com')\n                return User(id=123, email=self.email)              \n    ```\n* extend  # extend remote types\n* external  # mark field as external \n* requires  # mark that field resolver requires other fields to be pre-fetched\n* provides  # to annotate the expected returned fieldset from a field on a base type that is guaranteed to be selectable by the gateway. \n    * **Base class should be decorated with `@provides`** as well as field on a base type that provides. Check example bellow:\n    ```python\n        import graphene\n        from graphene_federation import provides\n        \n        @provides\n        class ArticleThatProvideAuthorAge(graphene.ObjectType):\n            id = Int(required=True)\n            text = String(required=True)\n            author = provides(Field(User), fields='age')\n    ```\n\n\n```python\nimport graphene\nfrom graphene_federation import build_schema, key\n\n@key(fields='id')  # mark File as Entity and add in EntityUnion https://www.apollographql.com/docs/apollo-server/federation/federation-spec/#key\nclass File(graphene.ObjectType):\n    id = graphene.Int(required=True)\n    name = graphene.String()\n\n    def resolve_id(self, info, **kwargs):\n        return 1\n\n    def resolve_name(self, info, **kwargs):\n        return self.name\n\n    def __resolve_reference(self, info, **kwargs):  # https://www.apollographql.com/docs/apollo-server/api/apollo-federation/#__resolvereference\n        return get_file_by_id(self.id)\n```\n\n\n```python\nimport graphene\nfrom graphene_federation import build_schema\n\n\nclass Query(graphene.ObjectType):\n    ...\n    pass\n\nschema = build_schema(Query)  # add _service{sdl} field in Query\n```\n\n\n```python\nimport graphene\nfrom graphene_federation import external, extend\n\n@extend(fields='id')\nclass Message(graphene.ObjectType):\n    id = external(graphene.Int(required=True))\n\n    def resolve_id(self, **kwargs):\n        return 1\n\n```\n\n### __resolve_reference\n* Each type which is decorated with `@key` or `@extend` is added to `_Entity` union\n* `__resolve_reference` method can be defined for each type that is an entity. This method is called whenever an entity is requested as part of the fulfilling a query plan.\nIf not explicitly defined, default resolver is used. Default resolver just creates instance of type with passed fieldset as kwargs, see [`entity.get_entity_query`](graphene_federation/entity.py) for more details\n* You should define `__resolve_reference`, if you need to extract object before passing it to fields resolvers (example: [FileNode](integration_tests/service_b/src/schema.py))\n* You should not define `__resolve_reference`, if fileds resolvers need only data passed in fieldset (example: [FunnyText](integration_tests/service_a/src/schema.py))\n* read more in [official documentation](https://www.apollographql.com/docs/apollo-server/api/apollo-federation/#__resolvereference)\n------------------------\n\n\n### Known issues:\n1. decorators will not work properly\n* on fields with capitalised letters with `auto_camelcase=True`, for example: `my_ABC_field = String()`\n* on fields with custom names for example `some_field = String(name='another_name')`\n\n---------------------------\n\nFor more details see [examples](examples/)\n\nOr better check [integration_tests](integration_tests/)\n\nAlso cool [example](https://github.com/preply/graphene-federation/issues/1) of integration with Mongoengine\n\n\n### For contribution:\n#### Run tests:\n* `make test`\n* if you've changed Dockerfile or requirements run `make build` before `make test`\n\n---------------------------\n\nAlso, you can read about how we've come to federation at Preply [here](https://medium.com/preply-engineering/apollo-federation-support-in-graphene-761a0512456d)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/preply/graphene-federation/archive/0.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/preply/graphene-federation", "keywords": "graphene,gql,federation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "graphene-federation", "package_url": "https://pypi.org/project/graphene-federation/", "platform": "", "project_url": "https://pypi.org/project/graphene-federation/", "project_urls": {"Download": "https://github.com/preply/graphene-federation/archive/0.1.0.tar.gz", "Homepage": "https://github.com/preply/graphene-federation"}, "release_url": "https://pypi.org/project/graphene-federation/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Federation implementation for graphene", "version": "0.1.0"}, "last_serial": 7056275, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b1afa2932d419ddffc31f3a435021099", "sha256": "082d328f6c9a7905a5aa0ff71af60c49d872fb44af500f8666e2672a61ddba5f"}, "downloads": -1, "filename": "graphene-federation-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b1afa2932d419ddffc31f3a435021099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2281, "upload_time": "2019-08-12T00:09:42", "upload_time_iso_8601": "2019-08-12T00:09:42.853822Z", "url": "https://files.pythonhosted.org/packages/29/49/24e64e56cad0c54c3ad8e1c8e6cb3582349440d09194a086c31f1203baab/graphene-federation-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "88f2885602164213607765b2029fabd9", "sha256": "a960d920952b540a5f543c66b2de0f5a45d5a6d50d16e41e43c42ea665dd8791"}, "downloads": -1, "filename": "graphene-federation-0.0.2.tar.gz", "has_sig": false, "md5_digest": "88f2885602164213607765b2029fabd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4455, "upload_time": "2019-08-12T13:45:38", "upload_time_iso_8601": "2019-08-12T13:45:38.319208Z", "url": "https://files.pythonhosted.org/packages/a9/cf/6f74d9b1e39cd54c8b305fe5add2564b994fa3849f83f371dd2e2c41929b/graphene-federation-0.0.2.tar.gz"}], "0.0.3": [{"comment_text": "", "digests": {"md5": "29b7819a481432ab100ac79838cf6bad", "sha256": "74b393daf8811fdd10e4b8395f33e3be667e0e4f6f9508c372758f6fd38f03c1"}, "downloads": -1, "filename": "graphene-federation-0.0.3.tar.gz", "has_sig": false, "md5_digest": "29b7819a481432ab100ac79838cf6bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4496, "upload_time": "2019-10-16T19:56:54", "upload_time_iso_8601": "2019-10-16T19:56:54.714785Z", "url": "https://files.pythonhosted.org/packages/f5/fa/0d121060c30cc716e61e6b66af7b9dc94e7a4adf13995dc52dfee9c87a5a/graphene-federation-0.0.3.tar.gz"}], "0.0.4": [{"comment_text": "", "digests": {"md5": "087d0ca174ab63d4049e857932185797", "sha256": "529d52da2b5ce9d83f68dd37ef6c4224904aded00d5e4eaf5f044765eac6be8a"}, "downloads": -1, "filename": "graphene-federation-0.0.4.tar.gz", "has_sig": false, "md5_digest": "087d0ca174ab63d4049e857932185797", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5212, "upload_time": "2019-11-02T20:23:59", "upload_time_iso_8601": "2019-11-02T20:23:59.272332Z", "url": "https://files.pythonhosted.org/packages/b5/8b/a96a6c7d082e455f181223e9b9cbc269cc62a97401051a03ae3d369e573d/graphene-federation-0.0.4.tar.gz"}], "0.0.5": [{"comment_text": "", "digests": {"md5": "f30488ee985c0a4a54d1a4101f958c30", "sha256": "2a5495d5d57636545f324bb296f85f4a24f5f27994aeee71cba52fc1f0b5bb4a"}, "downloads": -1, "filename": "graphene-federation-0.0.5.tar.gz", "has_sig": false, "md5_digest": "f30488ee985c0a4a54d1a4101f958c30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5704, "upload_time": "2019-11-21T11:19:16", "upload_time_iso_8601": "2019-11-21T11:19:16.296423Z", "url": "https://files.pythonhosted.org/packages/ab/d1/3f296955c9e36ba4a6831461c632ea0b0e19619b69aaa47fdeff8f8ba52f/graphene-federation-0.0.5.tar.gz"}], "0.0.6": [{"comment_text": "", "digests": {"md5": "0a1f8b53f36824d34366ad2330d47fc2", "sha256": "573769c53d4cd7933dff186536ef9f68e2d9fdcbb8e42d3a1705971b3b48c3a6"}, "downloads": -1, "filename": "graphene-federation-0.0.6.tar.gz", "has_sig": false, "md5_digest": "0a1f8b53f36824d34366ad2330d47fc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5873, "upload_time": "2020-01-09T15:16:59", "upload_time_iso_8601": "2020-01-09T15:16:59.385068Z", "url": "https://files.pythonhosted.org/packages/12/59/beac0d039067598df0b1f241b8998aded065d46c5baab88eb20894278521/graphene-federation-0.0.6.tar.gz"}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d106ae5dbb57873494acaf2ce619ecc5", "sha256": "e44e8e354d0c8eeb03547d5c262d01c868d4ea7d1458512c994176eed80fd2bf"}, "downloads": -1, "filename": "graphene-federation-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d106ae5dbb57873494acaf2ce619ecc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21147061, "upload_time": "2020-04-19T22:38:09", "upload_time_iso_8601": "2020-04-19T22:38:09.305092Z", "url": "https://files.pythonhosted.org/packages/b2/05/de1f007b397bd868f6306e718afe862bab12dd66cc69f05b5c8f8fc69b5e/graphene-federation-0.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "d106ae5dbb57873494acaf2ce619ecc5", "sha256": "e44e8e354d0c8eeb03547d5c262d01c868d4ea7d1458512c994176eed80fd2bf"}, "downloads": -1, "filename": "graphene-federation-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d106ae5dbb57873494acaf2ce619ecc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21147061, "upload_time": "2020-04-19T22:38:09", "upload_time_iso_8601": "2020-04-19T22:38:09.305092Z", "url": "https://files.pythonhosted.org/packages/b2/05/de1f007b397bd868f6306e718afe862bab12dd66cc69f05b5c8f8fc69b5e/graphene-federation-0.1.0.tar.gz"}]}