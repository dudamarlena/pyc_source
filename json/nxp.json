{"info": {"author": "Jonathan Hadida", "author_email": "jonathan.hadida@unknown.invalid", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Text Processing"], "description": "\n<a href=\"https://choosealicense.com/licenses/mpl-2.0/\"><img src=\"assets/license.svg\" alt=\"License: MPLv2\" align=\"middle\" style=\"margin: 0 20px\"></a>\n<a href=\"https://pypi.org/project/nxp/\"><img src=\"assets/pypi.svg\" alt=\"PyPI: nxp\" align=\"middle\" style=\"margin: 0 20px\"></a>\n<a href=\"https://jhadida.github.io/nxp/\"><img src=\"assets/docs.svg\" alt=\"Documentation\" align=\"middle\" style=\"margin: 0 20px\"></a>\n\n# NXP: Natural eXpression Parsing\n\nNXP is a parsing library written in Python 3, inspired by [pyparsing](https://github.com/pyparsing/pyparsing) and [Microsoft Monarch](https://microsoft.github.io/monaco-editor/monarch.html). \n\nIt allows users to do two things:\n\n- Define text patterns by combining Python objects, instead of writing complicated regular expressions.\n- Define and parse complex languages, with a simple dictionary!\n\nIs it really that simple? <br>\nDon't take my word for it; see for yourself with the example below, and the notebooks in the `examples/` folder. :blush:\n\n## Example: LaTeX-like commands\n\nThis is a quick example to illustrate parsing with NXP. We want to parse (very simplified) LaTeX-like patterns `\\command{ body }` in the file `foo.txt`:\n```txt\nInspirational quote:\n\\quote{\n    Time you enjoy wasting is \\it{not} wasted time.\n}\n\nCommand without a body \\command, or with an empty one \\command{}.\n```\n\nThis is how to define a language to match such patterns in NXP:\n```py\nimport nxp\n\n# define these rules separately so they can be re-used\nbackslash = [ r'\\\\\\\\', ('rep','\\\\') ] \ncommand = [ r'\\\\(\\w+)', ('open','command'), ('tag','cmd') ] \n\n# create a parser\nparser = nxp.make_parser({\n\t'lang': {\n\t\t'main': [\n\t\t\tbackslash,  # replace escaped backslashes\n\t\t\tcommand     # open \"command\" scope if we find something like '\\word'\n\t\t],\n\t\t'command': { # the \"command\" scope\n\t\t\t'main': [\n\t\t\t\t[ r'\\{', ('open','command.body'), ('tag','body') ],\n\t\t\t\t\t# open \"body\" subscope if command is followed by '{'\n\t\t\t\t[ None, 'close' ] \n\t\t\t\t\t# otherwise close the scope\n\t\t\t],\n\t\t\t'body': [ # the \"command.body\" scope\n\t\t\t\tbackslash,\n\t\t\t\t[ r'\\\\\\{', ('rep','{') ],\n\t\t\t\t[ r'\\\\\\}', ('rep','}') ],\n\t\t\t\t\t# deal with escapes before looking for a nested command\n\t\t\t\tcommand, \n\t\t\t\t\t# look for nested commands\n\t\t\t\t[ r'\\}', ('tag','/body'), ('close',2) ]\n\t\t\t\t\t# the command ends when the body ends: close both scopes\n\t\t\t]\n\t\t}\n\t}\n})\n\nprint(nxp.parsefile( parser, 'foo.txt' ))\n```\nand the output is a simple AST:\n```\n+ Scope(\"main\"): 3 element(s)\n\t[0] Scope(\"command\"): 2 element(s)\n\t\t[0] \\\\(\\w+)\n\t\t\t(0) (1, 0) - (1, 6) \\quote\n\t\t[1] Scope(\"command.body\"): 3 element(s)\n\t\t\t[0] \\{\n\t\t\t\t(0) (1, 6) - (1, 7) {\n\t\t\t[1] Scope(\"command\"): 2 element(s)\n\t\t\t\t[0] \\\\(\\w+)\n\t\t\t\t\t(0) (2, 30) - (2, 33) \\it\n\t\t\t\t[1] Scope(\"command.body\"): 2 element(s)\n\t\t\t\t\t[0] \\{\n\t\t\t\t\t\t(0) (2, 33) - (2, 34) {\n\t\t\t\t\t[1] \\}\n\t\t\t\t\t\t(0) (2, 37) - (2, 38) }\n\t\t\t[2] \\}\n\t\t\t\t(0) (3, 0) - (3, 1) }\n\t[1] Scope(\"command\"): 1 element(s)\n\t\t[0] \\\\(\\w+)\n\t\t\t(0) (5, 23) - (5, 31) \\command\n\t[2] Scope(\"command\"): 2 element(s)\n\t\t[0] \\\\(\\w+)\n\t\t\t(0) (5, 54) - (5, 62) \\command\n\t\t[1] Scope(\"command.body\"): 2 element(s)\n\t\t\t[0] \\{\n\t\t\t\t(0) (5, 62) - (5, 63) {\n\t\t\t[1] \\}\n\t\t\t\t(0) (5, 63) - (5, 64) }\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jhadida/nxp", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nxp", "package_url": "https://pypi.org/project/nxp/", "platform": "", "project_url": "https://pypi.org/project/nxp/", "project_urls": {"Homepage": "https://github.com/jhadida/nxp"}, "release_url": "https://pypi.org/project/nxp/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Natural eXpression Parsing \u2014 A Python 3 parsing library.", "version": "0.1.0"}, "last_serial": 7054517, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1f53fb5798e34d9a00113375a5aeb233", "sha256": "6795d68e7c2f7f84668609b979980410cff85d050f67452aae3736e38ecfdf66"}, "downloads": -1, "filename": "nxp-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1f53fb5798e34d9a00113375a5aeb233", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 32868, "upload_time": "2020-04-14T09:31:13", "upload_time_iso_8601": "2020-04-14T09:31:13.272357Z", "url": "https://files.pythonhosted.org/packages/c1/5c/87563014e7deb20ecc2fe6b4ce2ad319e3f7bf6c8008cebd681a597d7dd4/nxp-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "079e120aaa21d84cd74d19adbd665dd8", "sha256": "eb72a08854566eecc07cc5815fb1e22c80e661d79b96055c471e6219e0e4bd01"}, "downloads": -1, "filename": "nxp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "079e120aaa21d84cd74d19adbd665dd8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22529, "upload_time": "2020-04-14T09:31:15", "upload_time_iso_8601": "2020-04-14T09:31:15.710294Z", "url": "https://files.pythonhosted.org/packages/ce/27/88d35a957a8c53e461eb0902876171b2a6993b3cd302cba5d8ce55c49781/nxp-0.0.1.tar.gz"}], "0.1.0": [{"comment_text": "", "digests": {"md5": "62fb06714cc001671fd1354f12d23008", "sha256": "82d6d87c5fca6076d8c2f282dc7e799da48f74e5563778b52930a76aa7a332a6"}, "downloads": -1, "filename": "nxp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62fb06714cc001671fd1354f12d23008", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34199, "upload_time": "2020-04-19T15:42:09", "upload_time_iso_8601": "2020-04-19T15:42:09.155016Z", "url": "https://files.pythonhosted.org/packages/e3/2d/240f90616bb45aece00ecd4eadb8910cf2aeaea2db82ecf7bbecc1cb9c0f/nxp-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7041d0ae7e44bcfbbda386e0f477578f", "sha256": "830662dd60b24be8b6fdb528df1c87d60be2f19a5021a2aa3fafcfaa684fbbc1"}, "downloads": -1, "filename": "nxp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7041d0ae7e44bcfbbda386e0f477578f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23236, "upload_time": "2020-04-19T15:42:10", "upload_time_iso_8601": "2020-04-19T15:42:10.687194Z", "url": "https://files.pythonhosted.org/packages/7e/77/35bca8df69c079b337b7a5a2e2825253b8f57a0fe72c38a079473d447e71/nxp-0.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "62fb06714cc001671fd1354f12d23008", "sha256": "82d6d87c5fca6076d8c2f282dc7e799da48f74e5563778b52930a76aa7a332a6"}, "downloads": -1, "filename": "nxp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62fb06714cc001671fd1354f12d23008", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 34199, "upload_time": "2020-04-19T15:42:09", "upload_time_iso_8601": "2020-04-19T15:42:09.155016Z", "url": "https://files.pythonhosted.org/packages/e3/2d/240f90616bb45aece00ecd4eadb8910cf2aeaea2db82ecf7bbecc1cb9c0f/nxp-0.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7041d0ae7e44bcfbbda386e0f477578f", "sha256": "830662dd60b24be8b6fdb528df1c87d60be2f19a5021a2aa3fafcfaa684fbbc1"}, "downloads": -1, "filename": "nxp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7041d0ae7e44bcfbbda386e0f477578f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23236, "upload_time": "2020-04-19T15:42:10", "upload_time_iso_8601": "2020-04-19T15:42:10.687194Z", "url": "https://files.pythonhosted.org/packages/7e/77/35bca8df69c079b337b7a5a2e2825253b8f57a0fe72c38a079473d447e71/nxp-0.1.0.tar.gz"}]}