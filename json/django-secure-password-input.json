{"info": {"author": "zencore", "author_email": "dobetter@zencore.cn", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# django-secure-password-input\n\nA simple django application provides function to encrypt password value with rsa public key before form submit and decrypt at the backend.\n\n## Install\n\n```shell\npip install django-secure-password-input\n```\n\n## Usage\n\n**pro/settings.py**\n\n```python\nINSTALLED_APPS = [\n    ...\n    'django_static_jquery3',\n    'django_secure_password_input',\n    ...\n]\n\nDJANGO_SECURE_PASSWORD_INPUT_RSA_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n......\n-----END RSA PRIVATE KEY-----\n\"\"\"\n\nDJANGO_SECURE_PASSWORD_INPUT_ENCRYPTED_VALUE_PREFIX = \"rsa-encrypted:\"\n```\n\n**Note:**\n\n1. Add django_static_jquery3 and django_secure_password_input in INSTALLED_APPS.\n1. Add your own DJANGO_SECURE_PASSWORD_INPUT_RSA_PRIVATE_KEY and keep it secret. You can generate rsa private key with rsa module in ipython. Copy all things between \"BEGIN RSA PRIVATE KEY\" and \"END RSA PRIVATE KEY\" and must include \"BEGIN RSA PRIVATE KEY\" and \"END RSA PRIVATE KEY\" lines. It will work if you not provide your own private key, it will use the django_secure_password_input's default private key, and it's not safe for you.\n\n    ```python\n    In [3]: import rsa\n\n    In [4]: pk, sk = rsa.newkeys(1024)\n\n    In [5]: print(sk.save_pkcs1().decode())\n    -----BEGIN RSA PRIVATE KEY-----\n    MIICXwIBAAKBgQCluABEZpoy8lIL8oZNBB7xsc8sh5LOBrT1aLW0F1BpguimwUn4\n    K7XDgCP95WWzbp/cHDxl16bKlc15u7TZANOt7iCfdS7BsqXykIh7tts4bl2j95bD\n    bwTcpf5kTr0QuqCtPk//nlHWxexeXerSuFzgiYC8vlwrVX+AvuMBVcDqIQIDAQAB\n    AoGABcH32GiMMPr0WM/rVJ+xB4q6/PwU4K2g+enSblhlBdVzid+rV0EFhq5cEcU3\n    nF1aloYwnwU4GU/NHM6luOL0gbchyksyLKorkNkpElohi1Ek05CCvno7inZ2F4H4\n    iffnGp85TczkUa7NHcHPZwCSz/AWbyPYFtLJebjTorFDxRUCRQDm3kRetWgUYdyJ\n    bn8nwJhR2rg3Cqu/PbSlx7Q7NirYCwr8Zb8HnDEsRuC8ew7p1MEUYLiAAT6gP9yZ\n    b+08eY9AWIQsxwI9ALfCLWo/UbCVbmsFlZjay2Mva4A44ME5vBn4Zky7hR9FxZvC\n    zzdV2d5v+3iygQVfzr8hJQ9Xr96LfAE51wJFAKZ/ZY9oBMeuS/5RUiK5IyDlPDV1\n    3KbvOXjVrYWGax+j1yhvuHUkj9H+y9Uian74kMbBek3Wl/O6Gr4NmmoiwM0HCUvB\n    AjtkfcxYTkheSVoZLPSiowSXOVeQx4oiIXC8wxsu213xvDZU+DRaDpkXDCZ52ySz\n    y7FE1NtviISlL6KhCQJEYI1y9vkvSl+aSj+ayyg6cELqfa/m7XDqsxMId5RTdfcS\n    MIUYyH+SOGlp2QEpJqEWABa8aTw0PD68vftmdichTVQue9w=\n    -----END RSA PRIVATE KEY-----\n    ```\n\n**app/admin.py**\n\n```python\nfrom django.contrib import admin\nfrom django import forms\nfrom django_secure_password_input.fields import DjangoSecurePasswordInput\nfrom .models import Account\n\n\nclass AccountForm(forms.ModelForm):\n    password = DjangoSecurePasswordInput()\n\n    class Meta:\n        model = Account\n        exclude = []\n\nclass AccountAdmin(admin.ModelAdmin):\n    form = AccountForm\n    list_display = [\"username\", \"password\"]\n\nadmin.site.register(Account, AccountAdmin)\n```\n\n**Note:**\n\n1. Create a form, and override password field using type DjangoSecurePasswordInput.\n\n\n## Release\n\n### v0.1.0 2020/03/07\n\n- First release.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "django admin extentions,django secure password input", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-secure-password-input", "package_url": "https://pypi.org/project/django-secure-password-input/", "platform": "", "project_url": "https://pypi.org/project/django-secure-password-input/", "project_urls": null, "release_url": "https://pypi.org/project/django-secure-password-input/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "A simple django application provides function to encrypt password value with rsa public key before form submit and decrypt at the backend.", "version": "0.1.0"}, "last_serial": 6766641, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4a8c2c9e56c56407ef2d7fd148c9c1b0", "sha256": "4ebba0d81b7e7be4fc60d89c77a0e6de80715c324299b637126d0a837f0b463f"}, "downloads": -1, "filename": "django-secure-password-input-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4a8c2c9e56c56407ef2d7fd148c9c1b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62201, "upload_time": "2020-03-07T05:44:41", "upload_time_iso_8601": "2020-03-07T05:44:41.355820Z", "url": "https://files.pythonhosted.org/packages/dd/aa/c4d8d4f990c6496d4d02ac3dc1f84ce37920fc8244604b0fd7379d22fc61/django-secure-password-input-0.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a8c2c9e56c56407ef2d7fd148c9c1b0", "sha256": "4ebba0d81b7e7be4fc60d89c77a0e6de80715c324299b637126d0a837f0b463f"}, "downloads": -1, "filename": "django-secure-password-input-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4a8c2c9e56c56407ef2d7fd148c9c1b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62201, "upload_time": "2020-03-07T05:44:41", "upload_time_iso_8601": "2020-03-07T05:44:41.355820Z", "url": "https://files.pythonhosted.org/packages/dd/aa/c4d8d4f990c6496d4d02ac3dc1f84ce37920fc8244604b0fd7379d22fc61/django-secure-password-input-0.1.0.tar.gz"}]}