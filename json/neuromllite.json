{"info": {"author": "Padraig Gleeson", "author_email": "p.gleeson@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering"], "description": "## NeuroMLlite: a common framework for reading/writing/generating network specifications\n\nWork in progress. For the background to this see here: https://github.com/NeuroML/NetworkShorthand.\n\n![Architecture](images/NetworkShorthand.png)\n\n\n## Examples\nThe best way to see the currently proposed structure is to look at the examples\n\n### Ex. 1: Simple network, 2 populations & projection\n![Ex1](examples/images/Ex1.png)\n\n[JSON](examples/Example1_TestNetwork.json) | [Python script](examples/Example1.py)\n\nCan be exported to:\n- **NeuroML 2** (XML or HDF5 format)\n- **Graph** (see above) \n\n### Ex. 2: Simple network, 2 populations, projection & inputs\n![Ex2](examples/images/Ex2.png)\n\n[JSON](examples/Example2_TestNetwork.json) | [Python script](examples/Example2.py) | [Generated NeuroML2](examples/Example2_TestNetwork.net.nml)\n\nCan be exported to:\n- **NeuroML 2** (XML or HDF5 format)\n- **Graph** (see above) \n\n### Ex. 3: As above, with simulation specification\n\n[JSON for network](examples/Example3_Network.json) | [JSON for simulation](examples/SimExample3.json) | [Python script](examples/Example3.py) | [Generated NeuroML2](examples/Example3_Network.net.nml) | [Generated LEMS](examples/LEMS_SimExample3.xml)\n\nCan be exported to:\n- **NeuroML 2** (XML or HDF5 format)\n- **Graph** (see Ex2) \n\nCan be simulated using:\n- **NetPyNE**\n- **jNeuroML**\n- **NEURON** generated from **jNeuroML**\n- **NetPyNE** generated from **jNeuroML**\n\n\n### Ex. 4: A network with PyNN cells & inputs\n<img alt=\"Ex4\" src=\"examples/images/Ex4.png\" height=\"250\"/>\n\n[JSON](examples/Example4_PyNN.json) | [Python script](examples/Example4.py) | [Generated NeuroML2](examples/Example4_PyNN.net.nml) \n\nCan be exported to:\n- **NeuroML 2** (XML or HDF5 format)\n- **Graph** (see above) \n\nCan be simulated using:\n- **NEST** via **PyNN**\n- **NEURON** via **PyNN**\n- **Brian** via **PyNN**\n- **jNeuroML**\n- **NEURON** generated from **jNeuroML**\n- **NetPyNE** generated from **jNeuroML**\n\n\n### Ex. 5: A network with the Blue Brain Project connectivity data\n<img alt=\"Ex5\" src=\"examples/images/Ex5_BBP_5percent.png\" height=\"150\"/> \n\n<img alt=\"Ex5_1\" src=\"examples/images/bbp1.png\" height=\"200\"/>  <img alt=\"Ex5_2\" src=\"examples/images/bbp2.png\" height=\"200\"/> <img alt=\"Ex5_3\" src=\"examples/images/bbp3.png\" height=\"200\"/> \n\n[JSON](examples/BBP_5percent.json) | [Python script](examples/Example5.py) \n\nCan be exported to:\n- **NeuroML 2** (XML or HDF5 format)\n- **Graph** (see above) \n- **Matrix** (see above) \n\nCan be simulated using:\n- **NetPyNE**\n\n### Ex. 6: A network based on Potjans and Diesmann 2014 (work in progress)\n<img alt=\"Ex6d\" src=\"examples/images/Ex6.dot.png\" height=\"100\"/> <img alt=\"Ex6f\" src=\"examples/images/Ex6.fdp.png\" height=\"100\"/>  <img alt=\"Ex6c\" src=\"examples/images/Ex6.circo.png\" height=\"100\"/> \n<img alt=\"Ex6matrix\" src=\"examples/images/Ex6matrix.png\" height=\"300\"/> \n\n[JSON](examples/Example6_PyNN.json) | [Python script](examples/Example6.py) | [Generated NeuroML2](examples/Example6_PyNN.net.nml) \n\nCan be exported to:\n- **NeuroML 2** (XML or HDF5 format)\n- **Graph** (see above) \n- **Matrix** (see above) \n\n### Ex. 7: A network based on Brunel 2000 (work in progress)\n<img alt=\"Ex7\" src=\"examples/images/Ex7.png\" height=\"250\"/> \n\n[JSON](examples/Example7_Brunel2000.json) | [Python script](examples/Example7.py) | [Generated NeuroML2](examples/Example7_Brunel2000.net.nml) \n\nCan be exported to:\n- **NeuroML 2** (XML or HDF5 format)\n- **Graph** (see above) \n\nCan be simulated using:\n- **jNeuroML**\n\n## Installation & usage\n\nInstallation of the basic framework should be fairly straightforward:\n\n```\ngit clone https://github.com/NeuroML/NeuroMLlite.git\ncd NeuroMLlite\nsudo python setup.py install\n```\n\nThen simple examples can be run:\n\n```\ncd examples\npython Example1.py  #  Generates the JSON representation of the network (console & save to file)\n```\n\nTo generate the NeuroML 2 version of the network, first install pyNeuroML, then use the -nml flag:\n```\nsudo pip install pyNeuroML\npython Example2.py -nml       # Saves the network structure to a *net.nml XML file\n```\n\nOther options (which will require [Neuron](https://neuron.yale.edu/neuron/), [NetPyNE](http://www.netpyne.org/), \n[PyNN](http://neuralensemble.org/PyNN/), [NEST](http://www.nest-simulator.org/), [Brain](http://briansimulator.org/) etc. to be installed) include:\n\n```\npython Example4.py -jnml       # Generate NeuroML2 & LEMS simulation & run using jNeuroML\npython Example4.py -jnmlnrn    # Generate NeuroML2 & LEMS simulation, use jNeuroML to generate Neuron code (py/hoc/mod), then run in Neuron\npython Example4.py -jnmlnrn    # Generate NeuroML2 & LEMS simulation, use jNeuroML to generate NetPyNE code (py/hoc/mod), then run in NetPyNE\npython Example4.py -netpyne    # Generate network in NetPyNE directly & run simulation\npython Example4.py -pynnnrn    # Generate network in PyNN, run using simulator Neuron\npython Example4.py -pynnnest   # Generate network in PyNN, run using simulator NEST\npython Example4.py -pynnbrian  # Generate network in PyNN, run using simulator Brian\n```\n\nGraphs of the network structure can be generated at many levels of detail (1-6) and \nlaid out using [GraphViz](http://graphviz.org/) engines (d - dot (default); c - circo;\n n - neato; f - fdp). See above images for generated examples.\n\n    python Example6.py -graph3d\n    python Example6.py -graph2f\n    python Example6.py -graph1n\n\n\n## Other examples\n\nNeuroMLlite is being tested/used in the following repositories on OSB:\n\n- [Wilson & Cowan](https://github.com/OpenSourceBrain/WilsonCowan/blob/master/NeuroML2/GenerateNetworkOverview.py)\n- [Mejias et al. 2016](https://github.com/OpenSourceBrain/MejiasEtAl2016/blob/master/NeuroML2/GenerateNeuroMLlite.py)\n- [Pospischil et al. 2008](https://github.com/OpenSourceBrain/PospischilEtAl2008/tree/master/NeuroML2/cells/summary)\n- [Bezaire et al. 2016](https://github.com/mbezaire/ca1/tree/development/NeuroML2/network/nmllite)\n- [PING networks](https://github.com/OpenSourceBrain/PINGnets/tree/master/NeuroML2) \n\n[![Build Status](https://travis-ci.org/NeuroML/NeuroMLlite.svg?branch=master)](https://travis-ci.org/NeuroML/NeuroMLlite)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NeuroML/NeuroMLlite", "keywords": "", "license": "LICENSE.lesser", "maintainer": "", "maintainer_email": "", "name": "neuromllite", "package_url": "https://pypi.org/project/neuromllite/", "platform": "", "project_url": "https://pypi.org/project/neuromllite/", "project_urls": {"Homepage": "https://github.com/NeuroML/NeuroMLlite"}, "release_url": "https://pypi.org/project/neuromllite/0.1.9/", "requires_dist": null, "requires_python": "", "summary": "A common JSON based format for compact network specification, closely tied to NeuroML v2", "version": "0.1.9"}, "last_serial": 5682898, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "41be57fef462993552cf7526f1beedb7", "sha256": "c27591e055c9cafa2742a000bd606e11ee285b158d590d8c16b415764a0f718a"}, "downloads": -1, "filename": "neuromllite-0.1.3.tar.gz", "has_sig": false, "md5_digest": "41be57fef462993552cf7526f1beedb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21217, "upload_time": "2018-04-24T11:23:16", "upload_time_iso_8601": "2018-04-24T11:23:16.710943Z", "url": "https://files.pythonhosted.org/packages/fd/cc/610d4ef35f6a320f1d91a25b50a3372ba5a0a6f06192a45586be8cc7d613/neuromllite-0.1.3.tar.gz"}], "0.1.4": [{"comment_text": "", "digests": {"md5": "51cb07c338aab3914a6d6d2b163caf41", "sha256": "06d44fdebd9b80449dadb3fde3d31c9574107b7025c2904db790a66d1fb5d534"}, "downloads": -1, "filename": "neuromllite-0.1.4.tar.gz", "has_sig": false, "md5_digest": "51cb07c338aab3914a6d6d2b163caf41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9803149, "upload_time": "2018-10-01T16:35:21", "upload_time_iso_8601": "2018-10-01T16:35:21.932651Z", "url": "https://files.pythonhosted.org/packages/24/31/40076a995cc6e596f1a03fcbeda66760b37b4b54595823777650159ca79f/neuromllite-0.1.4.tar.gz"}], "0.1.5": [{"comment_text": "", "digests": {"md5": "09f080e3fe6a45b10605d2fd2194594f", "sha256": "086e864f6af62786b25f469b2402b090cc913700f8a69b4716dbb5a9a3dd0c5a"}, "downloads": -1, "filename": "neuromllite-0.1.5.tar.gz", "has_sig": false, "md5_digest": "09f080e3fe6a45b10605d2fd2194594f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9541768, "upload_time": "2018-11-29T13:34:28", "upload_time_iso_8601": "2018-11-29T13:34:28.390729Z", "url": "https://files.pythonhosted.org/packages/cd/72/9810c3e7cec9d78a88c608021f863dd86bb7fca4380f6740dd244141a54c/neuromllite-0.1.5.tar.gz"}], "0.1.7": [{"comment_text": "", "digests": {"md5": "b3ac69f3e774610e67b035b6be88048f", "sha256": "d1bfd0d44f0e27c4796891b9056851859d59fdd8438f6752c4c2e641a128b0e6"}, "downloads": -1, "filename": "neuromllite-0.1.7.tar.gz", "has_sig": false, "md5_digest": "b3ac69f3e774610e67b035b6be88048f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51042, "upload_time": "2019-04-10T17:26:45", "upload_time_iso_8601": "2019-04-10T17:26:45.924173Z", "url": "https://files.pythonhosted.org/packages/1f/f5/8b4b9c74a020d30aed00898f13e8cae99abe0d95577e93efb41689001a48/neuromllite-0.1.7.tar.gz"}], "0.1.9": [{"comment_text": "", "digests": {"md5": "fb29e0d8e77c6704ac053746f35dd62f", "sha256": "e755bb4c166b56f0ec20fdf32edf7385bbac3f3d56e1b6957faf0478de4de448"}, "downloads": -1, "filename": "neuromllite-0.1.9.tar.gz", "has_sig": false, "md5_digest": "fb29e0d8e77c6704ac053746f35dd62f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 434200, "upload_time": "2019-08-15T15:53:55", "upload_time_iso_8601": "2019-08-15T15:53:55.913801Z", "url": "https://files.pythonhosted.org/packages/67/ca/0a691930420a93f7e65e75f91d5e0502b37b2688309b8dede5f2a89a5172/neuromllite-0.1.9.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb29e0d8e77c6704ac053746f35dd62f", "sha256": "e755bb4c166b56f0ec20fdf32edf7385bbac3f3d56e1b6957faf0478de4de448"}, "downloads": -1, "filename": "neuromllite-0.1.9.tar.gz", "has_sig": false, "md5_digest": "fb29e0d8e77c6704ac053746f35dd62f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 434200, "upload_time": "2019-08-15T15:53:55", "upload_time_iso_8601": "2019-08-15T15:53:55.913801Z", "url": "https://files.pythonhosted.org/packages/67/ca/0a691930420a93f7e65e75f91d5e0502b37b2688309b8dede5f2a89a5172/neuromllite-0.1.9.tar.gz"}]}