{"info": {"author": "Playment", "author_email": "dev@playment.in", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## Installation\nYou don't need this source code unless you want to modify the package. If you just want to use the package, just run:\n\n```pip install --upgrade playment```\n\nInstall from source with:\n\n```python setup.py install```\n\nRequirements:\n\n``Python 3.5+``\n\n## Documentation\nPlease visit the docs.playment.io to know more about Playment APIs.\n\n## Usage\n```\nimport playment\nclient = playment.Client(client_key=\"your x-client-key\")\n```\nIt is a secret key required to call Playment APIs. The secret x-client-key ensures that only you are able to access your projects.\nThe x-client-key can be accessed from the settings page of your dashboard.\n\n\n\n#### Get Project Summary\n```\ntry:\n    project_summary = client.get_project_summary(project_id=project_id)\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n```\n\n\n#### Get Project's Batches Summary\nThis will provide all the batches and their summary\n```\ntry:\n    project_batch_summary = client.get_project_batches_summary(project_id=project_id)\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n```\n\n\n#### Get Batch Summary\nThis will provide you summary of batch with its jobs and viewer links.\n```\ntry:\n    batch_summary = client.get_batch_summary(project_id=project_id,\n                                             batch_id=batch_id)\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n```\n\n\n#### Creating a Batch\nThis will return a batch object with batch_id\n:param name: Name for the batch. E.g. John\n:param label: Label for the batch. E.g. Doe\n:param description: Description for the batch. E.g. Alias for unknown.\n```\ntry:\n    batch = client.create_batch(name=\"test_99\", label=\"test_99\", description=\"label\",\n                                project_id=project_id)\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n```\n\n\n#### Creating a Single-Image Based Job \n```\n\n\"\"\"\nPrepare Image Data\n\"\"\"\nimage_url = \"https://example.com/image_url_1\"\nimage_data = playment.ImageData(image_url=image_url)\n\n\"\"\"\nImage Data job creation\n\"\"\"\ntry:\n    job = client.create_job(reference_id=\"55\", tag='image',\n                            data=image_data, project_id=\"project_id\")\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n\n```\n\n\n#### Creating a Sensor Based Job with Multiple Images with only camera sensor.\n```\n\nframes = [\n    \"https://example.com/image_url_1\",\n    \"https://example.com/image_url_2\",\n    \"https://example.com/image_url_3\"\n]\n\n\n\"\"\"\nCreate sensor_data variable\n\"\"\"\nsensor_data = playment.SensorData()\n\n\n\"\"\"\nDefining Sensor: Contain details of sensor\n:param _id: This is the sensor's id.\n:param name: Name of the sensor.\n:param primary_view: Only one of the sensor can have primary_view as true.\n:param state(optional): If you want this sensor not to be annotated, provide state as non_editable. Default is editable.\n\"\"\"\nsensor = playment.Sensor(_id=\"right\", name=\"right\", primary_view=True)\n\n\"\"\"\nAdding Sensor\n\"\"\"\nsensor_data.add_sensor(sensor=sensor)\n\n\"\"\"\nPreparing Frame Data\n\"\"\"\nfor i in range(len(frames)):\n    # Preparing a sensor frame object with sensor frame url and sensor_id\n    sensor_frame_object = playment.SensorFrameObject(frames[i], sensor.id)\n    # Preparing a frame with every sensor\n    frame = playment.Frame(str(i), [sensor_frame_object])\n    # Adding the frame in sensor data\n    sensor_data.add_frame(frame=frame)\n\n\n\"\"\"\nCreating a job with sensor data\n:param reference_id: This will be unique for every job in a given project.\n:param tag: This will be provided by Playment and will only take one type of data. For e.g. ImageData or SensorData.\n:param data: This is the data you are sending to Playment.\n:param batch_id: This is an optional argument which will associate the job to the given batch if its left as none,\n              the job will be associated with the default batch. It is recommended to create a batch for a set of flus.\n:param priority_weight(optional): Range of priority weight is [1,10] and integers only. 10 is the highest priority.\n                                  Default is 5.\n\"\"\"\ntry:\n    job = client.create_job(reference_id=\"54\", tag='sensor_fusion',\n                            data=sensor_data, project_id=\"project_id\")\n\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n\n```\n\n#### Creating a Sensor Based Job with Multiple Images/PCDs.\n```\n\"\"\"\nCollect sensor_poses for cameras w.r.t lidar in your suitable format\n\"\"\"\nsensor_poses = {\n    \"lidar\": {\n        \"heading\": {\"w\": 1, \"x\": 0,\n                    \"y\": 0, \"z\": 0},\n        \"position\": {\"x\": 0, \"y\": 0, \"z\": 0}\n    },\n    \"camera_1\": {\n        \"heading\": {\"w\": -0.4512317755370607, \"x\": 0.5520064554320538,\n                    \"y\": -0.5425287998749007, \"z\": 0.444231087625815},\n        \"position\": {\"x\": 0, \"y\": 0, \"z\": 0}\n    },\n    \"camera_2\": {\n        \"heading\": {\"w\": -0.7029770474706961, \"x\": 0.6997847239102162,\n                    \"y\": 0.10452563699437759, \"z\": -0.07210410614207517},\n        \"position\": {\"x\": 0, \"y\": 0, \"z\": 0}\n    }\n}\n\n\"\"\"\nCollect frames for every sensor.\n\"\"\"\nlidar_frames = [\n    \"https://example.com/pcd_url_1\",\n    \"https://example.com/pcd_url_2\"\n]\n\ncamera_1_frames = [\n    \"https://example.com/image_url_1\",\n    \"https://example.com/image_url_2\"\n]\n\ncamera_2_frames = [\n    \"https://example.com/image_url_3\",\n    \"https://example.com/image_url_4\"\n]\n\n\"\"\"\nInitialize sensor_data\n\"\"\"\nsensor_data = playment.SensorData()\n\n\"\"\"\nDefining Sensor: This will contain detail about sensor's attributes.\n:param _id: This is the sensor's id.\n:param name: Name of the sensor.\n:param primary_view: Only one of the sensor can have primary_view as true.\n:param state(optional): If you want this sensor not to be annotated, provide state as non_editable. Default is editable.\n:param modality: This is the type of sensor.\n:param intrinsics: In case of a camera modality sensor we will need the sensor intrinsics. \n                This field should ideally become part of the sensor configuration, and not be sent as part of each Job.\n                \"cx\": principal point x value\n                \"cy\": principal point y value\n                \"fx\": focal length in x axis\n                \"fy\": focal length in y axis\n                \"k1\": 1st radial distortion coefficient\n                \"k2\": 2nd radial distortion coefficient\n                \"k3\": 3rd radial distortion coefficient\n                \"k4\": 4th radial distortion coefficient\n                \"p1\": 1st tangential distortion coefficient\n                \"p2\": 2nd tangential distortion coefficient\n                \"skew\": camera skew coefficient\n                \"scale_factor\": The factor by which the image has been downscaled (=2 if original image is twice as\n                                large as the downscaled image)\n\"\"\"\n\n\"\"\"\nPreparing Lidar Sensor\n\"\"\"\nlidar_sensor = playment.Sensor(_id=\"lidar\", name=\"lidar\", primary_view=True, modality=\"lidar\")\nsensor_data.add_sensor(lidar_sensor)\n\n\"\"\"\nPreparing Camera Sensor for camera_1\n\"\"\"\ncamera_1_intrinsics = playment.Intrinsics(\n    cx=1024.56301417, cy=592.004009216, fx=1050.21459961, fy=1051.06384277,\n    k1=0, k2=0, k3=0, k4=0, p1=0, p2=0, skew=0, scale_factor=1\n)\ncamera_1 = playment.Sensor(_id=\"camera_1\", name=\"camera_1\", primary_view=False,\n                           modality=\"camera\", intrinsics=camera_1_intrinsics)\nsensor_data.add_sensor(camera_1)\n\n\"\"\"\nPreparing Camera Sensor for camera_2\n\"\"\"\ncamera_2_intrinsics = playment.Intrinsics(\n    cx=1013.0894433, cy=596.331393608, fx=2209.12548828, fy=2209.49682617,\n    k1=0, k2=0, k3=0, k4=0, p1=0, p2=0, skew=0, scale_factor=1\n)\ncamera_2 = playment.Sensor(_id=\"camera_2\", name=\"camera_2\", primary_view=True, modality=\"camera\")\ncamera_2.add_intrinsics(camera_2_intrinsics)\nsensor_data.add_sensor(camera_2)\n\n\"\"\"\nPreparing frame data\n\"\"\"\n\nfor i in range(len(lidar_frames)):\n    # Preparing a sensor frame object with sensor frame url and sensor_id\n    lidar_sensor = playment.SensorFrameObject(data_url=lidar_frames[i], sensor_id=\"lidar\")\n    lidar_heading = playment.Heading(\n        w=sensor_poses['lidar']['heading']['w'],\n        x=sensor_poses['lidar']['heading']['x'],\n        y=sensor_poses['lidar']['heading']['y'],\n        z=sensor_poses['lidar']['heading']['z']\n    )\n    lidar_position = playment.Position(\n        x=sensor_poses['lidar']['position']['x'],\n        y=sensor_poses['lidar']['position'][\"y\"],\n        z=sensor_poses['lidar']['position'][\"z\"]\n    )\n\n    lidar_sensor_pose = playment.SensorPose(heading=lidar_heading, position=lidar_position)\n    lidar_sensor.add_sensor_pose(lidar_sensor_pose)\n\n    camera_1_sensor = playment.SensorFrameObject(data_url=camera_1_frames[i], sensor_id=\"camera_1\")\n    camera_1_heading = playment.Heading(\n        w=sensor_poses['camera_1']['heading']['w'],\n        x=sensor_poses['camera_1']['heading']['x'],\n        y=sensor_poses['camera_1']['heading']['y'],\n        z=sensor_poses['camera_1']['heading']['z']\n    )\n    camera_1_position = playment.Position(\n        x=sensor_poses['camera_1']['position']['x'],\n        y=sensor_poses['camera_1']['position'][\"y\"],\n        z=sensor_poses['camera_1']['position'][\"z\"]\n    )\n\n    camera_1_sensor_pose = playment.SensorPose(heading=camera_1_heading, position=camera_1_position)\n    camera_1_sensor.add_sensor_pose(camera_1_sensor_pose)\n\n    camera_2_sensor = playment.SensorFrameObject(data_url=camera_2_frames[i], sensor_id=\"camera_2\")\n    camera_2_heading = playment.Heading(\n        w=sensor_poses['camera_2']['heading']['w'],\n        x=sensor_poses['camera_2']['heading']['x'],\n        y=sensor_poses['camera_2']['heading']['y'],\n        z=sensor_poses['camera_2']['heading']['z']\n    )\n    camera_2_position = playment.Position(\n        x=sensor_poses['camera_2']['position']['x'],\n        y=sensor_poses['camera_2']['position'][\"y\"],\n        z=sensor_poses['camera_2']['position'][\"z\"]\n    )\n\n    camera_2_sensor_pose = playment.SensorPose(heading=camera_2_heading, position=camera_2_position)\n    camera_2_sensor.add_sensor_pose(camera_2_sensor_pose)\n\n    # Preparing a frame with every sensor\n    frame = playment.Frame(frame_id=str(i), sensors=[lidar_sensor, camera_1_sensor, camera_2_sensor])\n    # Adding the frame in sensor data\n    sensor_data.add_frame(frame)\n\n\n\"\"\"\nSensor Data job creation\n\"\"\"\ntry:\n    job = client.create_job(reference_id=\"54\", tag='sensor_fusion',\n                            data=sensor_data, project_id=\"project_id\")\n\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n\n```\n\n#### Creating a Job with metadata\nmetadata: You can send any type of data in metadata which can be useful in the task or record of any other data related to that job. \n\n```\nimage_url = \"https://example.com/image_url\"\nmetadata = {\n    \"reference_image_1\":\"https://example.com/reference_image_url_1\",\n    \"reference_image_2\":\"https://example.com/reference_image_url_2\"\n}\nimage_data = playment.ImageData(image_url=image_url, metadata=metadata)\n\ntry:\n    job = client.create_job(reference_id=\"55\", tag='image',\n                            data=image_data, project_id=\"project_id\")\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n\n```\n\n#### Create Jobs with High Priority and associating them with a batch\n```\nimage_url = \"https://example.com/image_url\"\nimage_data = playment.ImageData(image_url=image_url)\n\ntry:\n    job = client.create_job(reference_id=\"55\", tag='image',\n                            data=image_data, project_id=\"project_id\",\n                            priority_weight=10, batch_id=\"batch_id\")\nexcept playment.PlaymentException as e:\n    print(e.code, e.message, e.data)\n```\n\n#### Get Job Result\n```\ntry:\n    job_result = client.get_job_result(project_id=\"project_id\",\n                                       job_id=\"job_id\")\nexcept playment.exception.PlaymentException as e:\n    print(e.code, e.message, e.data)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/crowdflux/playment-sdk-python.git", "keywords": "playment", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "playment", "package_url": "https://pypi.org/project/playment/", "platform": "", "project_url": "https://pypi.org/project/playment/", "project_urls": {"Homepage": "https://github.com/crowdflux/playment-sdk-python.git"}, "release_url": "https://pypi.org/project/playment/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "A Python package to interact with Playment's APIs.", "version": "1.0.3"}, "last_serial": 7015140, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "c42d4047b273b2af153ea5657aa5168a", "sha256": "c8659c60fe7a5ba22529487ee45d3b1f50ebfbd0fe7b83281c5a148428bbcb5f"}, "downloads": -1, "filename": "playment-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c42d4047b273b2af153ea5657aa5168a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9043, "upload_time": "2020-04-01T12:41:38", "upload_time_iso_8601": "2020-04-01T12:41:38.433944Z", "url": "https://files.pythonhosted.org/packages/bc/1b/e96df663c4692f8b9fce921a208357c374a24929eb8615c1d54e2018c87d/playment-1.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "70a4c19188336cc01d6faf018070a137", "sha256": "e708d01c8a7b1c5791774f1d44d837053f436f29d6408d94bda8b2a9018455f3"}, "downloads": -1, "filename": "playment-1.0.1.tar.gz", "has_sig": false, "md5_digest": "70a4c19188336cc01d6faf018070a137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9837, "upload_time": "2020-04-01T12:41:41", "upload_time_iso_8601": "2020-04-01T12:41:41.038492Z", "url": "https://files.pythonhosted.org/packages/18/13/fd07e9a77ee9335cfd8107cd6952b830f68e411f2b2d5731721a26d0b7dd/playment-1.0.1.tar.gz"}], "1.0.2": [{"comment_text": "", "digests": {"md5": "bca8ca3fe97cb7833a6c849d36c0ab63", "sha256": "ebe4b9f7cabc46c55d4a347f0b3d5aa0779bb059de6a9faf7fc0b04e3ea14048"}, "downloads": -1, "filename": "playment-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bca8ca3fe97cb7833a6c849d36c0ab63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9011, "upload_time": "2020-04-01T16:24:09", "upload_time_iso_8601": "2020-04-01T16:24:09.518949Z", "url": "https://files.pythonhosted.org/packages/c7/cf/1294306680e0c4c4b47674ce37fe2d7ef804482d875f645f7e77e10f491f/playment-1.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "cef2234a4c90d0f5c2c318206f1cb2e8", "sha256": "f350129b93aa084e9d7b89038162f14df88416206733ed10b35e51cb31c5aa03"}, "downloads": -1, "filename": "playment-1.0.2.tar.gz", "has_sig": false, "md5_digest": "cef2234a4c90d0f5c2c318206f1cb2e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9765, "upload_time": "2020-04-01T16:24:11", "upload_time_iso_8601": "2020-04-01T16:24:11.293872Z", "url": "https://files.pythonhosted.org/packages/6b/55/0e85d1ed56098a2c547ecc3303648b99ad5169961219fcae6b4ad0758142/playment-1.0.2.tar.gz"}], "1.0.3": [{"comment_text": "", "digests": {"md5": "5b16b3a2e07decac3323c7c9627b3f05", "sha256": "a952c88659a475763baa8957dc06d970bac3a5a8bfd89a5187f1e4e309de6201"}, "downloads": -1, "filename": "playment-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5b16b3a2e07decac3323c7c9627b3f05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23341, "upload_time": "2020-04-14T07:00:36", "upload_time_iso_8601": "2020-04-14T07:00:36.195589Z", "url": "https://files.pythonhosted.org/packages/1d/5d/53f14d5e8faf1fb89803b9197ea267bcbd0ba5c07e684fce49c7bf59e43a/playment-1.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "302721b6d28f25b4fa852f27614a3d70", "sha256": "605e61a2bb306ded598ddd35902127722ee77a76f5243366f5a2105fc060b2e2"}, "downloads": -1, "filename": "playment-1.0.3.tar.gz", "has_sig": false, "md5_digest": "302721b6d28f25b4fa852f27614a3d70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14672, "upload_time": "2020-04-14T07:00:38", "upload_time_iso_8601": "2020-04-14T07:00:38.224428Z", "url": "https://files.pythonhosted.org/packages/4f/dc/96d3f7cfaba167b90bfa6bca1c2eeda807b8ef00f90d98db51111c1549c1/playment-1.0.3.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b16b3a2e07decac3323c7c9627b3f05", "sha256": "a952c88659a475763baa8957dc06d970bac3a5a8bfd89a5187f1e4e309de6201"}, "downloads": -1, "filename": "playment-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5b16b3a2e07decac3323c7c9627b3f05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23341, "upload_time": "2020-04-14T07:00:36", "upload_time_iso_8601": "2020-04-14T07:00:36.195589Z", "url": "https://files.pythonhosted.org/packages/1d/5d/53f14d5e8faf1fb89803b9197ea267bcbd0ba5c07e684fce49c7bf59e43a/playment-1.0.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "302721b6d28f25b4fa852f27614a3d70", "sha256": "605e61a2bb306ded598ddd35902127722ee77a76f5243366f5a2105fc060b2e2"}, "downloads": -1, "filename": "playment-1.0.3.tar.gz", "has_sig": false, "md5_digest": "302721b6d28f25b4fa852f27614a3d70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14672, "upload_time": "2020-04-14T07:00:38", "upload_time_iso_8601": "2020-04-14T07:00:38.224428Z", "url": "https://files.pythonhosted.org/packages/4f/dc/96d3f7cfaba167b90bfa6bca1c2eeda807b8ef00f90d98db51111c1549c1/playment-1.0.3.tar.gz"}]}