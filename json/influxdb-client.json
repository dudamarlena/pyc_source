{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Database", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "influxdb-client-python\n======================\n\n.. marker-index-start\n\n.. image:: https://circleci.com/gh/influxdata/influxdb-client-python.svg?style=svg\n   :target: https://circleci.com/gh/influxdata/influxdb-client-python\n   :alt: CircleCI\n\n\n.. image:: https://codecov.io/gh/influxdata/influxdb-client-python/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/influxdata/influxdb-client-python\n   :alt: codecov\n\n.. image:: https://img.shields.io/circleci/project/github/influxdata/influxdb-client-python/master.svg\n   :target: https://circleci.com/gh/influxdata/influxdb-client-python\n   :alt: CI status\n\n.. image:: https://img.shields.io/pypi/v/influxdb-client.svg\n   :target: https://pypi.org/project/influxdb-client/\n   :alt: PyPI package\n\n.. image:: https://img.shields.io/pypi/pyversions/influxdb-client.svg\n   :target: https://pypi.python.org/pypi/influxdb-client\n   :alt: Supported Python versions\n\n.. image:: https://readthedocs.org/projects/influxdb-client/badge/?version=latest\n   :target: https://influxdb-client.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation status\n\n.. image:: https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social\n   :target: https://www.influxdata.com/slack\n   :alt: Slack Status\n\n.. _documentation: https://influxdb-client.readthedocs.io\n\nInfluxDB 2.0 python client library.\n\n**Note: Use this client library with InfluxDB 2.x and InfluxDB 1.8+. For connecting to InfluxDB 1.7 or earlier instances, use the `influxdb-python <https://github.com/influxdata/influxdb-python>`_ client library.**\n\nInfluxDB 2.0 client features\n----------------------------\n\n- Querying data\n    - using the Flux language\n    - into csv, raw data, `flux_table <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/flux_table.py#L5>`_ structure, `Pandas DataFrame <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html>`_\n    - `How to queries <#queries>`_\n- Writing data using\n    - `Line Protocol <https://docs.influxdata.com/influxdb/v1.6/write_protocols/line_protocol_tutorial>`_\n    - `Data Point <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write/point.py#L16>`__\n    - `RxPY <https://rxpy.readthedocs.io/en/latest/>`__ Observable\n    - `How to writes <#writes>`_\n- `InfluxDB 2.0 API <https://github.com/influxdata/influxdb/blob/master/http/swagger.yml>`_ client for management\n    - the client is generated from the `swagger <https://github.com/influxdata/influxdb/blob/master/http/swagger.yml>`_ by using the `openapi-generator <https://github.com/OpenAPITools/openapi-generator>`_\n    - organizations & users management\n    - buckets management\n    - tasks management\n    - authorizations\n    - health check\n    - ...\n- `InfluxDB 1.8 API compatibility`_\n- Examples\n    - `Connect to InfluxDB Cloud`_\n    - `How to efficiently import large dataset`_\n    - `Efficiency write data from IOT sensor`_\n    - `How to use Jupyter + Pandas + InfluxDB 2`_\n\nInstallation\n------------\n.. marker-install-start\n\nInfluxDB python library uses `RxPY <https://github.com/ReactiveX/RxPY>`__ - The Reactive Extensions for Python (RxPY).\n\n**Python 3.6** or later is required.\n\n.. note::\n\n    The client uses ``ciso8601`` for parsing dates. ``ciso8601`` is much faster than built-in Python datetime. Since it's written as a ``C`` module the best way is build it from sources:\n\n    **Windows**:\n\n    You have to install `Visual C++ Build Tools 2015 <http://go.microsoft.com/fwlink/?LinkId=691126&fixForIE=.exe>`_ to build ``ciso8601`` by ``pip``.\n\n    **conda**:\n\n    Install from sources: ``conda install -c conda-forge/label/cf202003 ciso8601``.\n\npip install\n^^^^^^^^^^^\n\nThe python package is hosted on `PyPI <https://pypi.org/project/influxdb-client/>`_, you can install latest version directly:\n\n.. code-block:: sh\n\n   pip install influxdb-client\n\nThen import the package:\n\n.. code-block:: python\n\n   import influxdb_client\n\nSetuptools\n^^^^^^^^^^\n\nInstall via `Setuptools <http://pypi.python.org/pypi/setuptools>`_.\n\n.. code-block:: sh\n\n   python setup.py install --user\n\n(or ``sudo python setup.py install`` to install the package for all users)\n\n.. marker-install-end\n\nGetting Started\n---------------\n\nPlease follow the `Installation`_ and then run the following:\n\n.. marker-query-start\n\n.. code-block:: python\n\n   from influxdb_client import InfluxDBClient, Point\n   from influxdb_client.client.write_api import SYNCHRONOUS\n\n   bucket = \"my-bucket\"\n\n   client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\")\n\n   write_api = client.write_api(write_options=SYNCHRONOUS)\n   query_api = client.query_api()\n\n   p = Point(\"my_measurement\").tag(\"location\", \"Prague\").field(\"temperature\", 25.3)\n\n   write_api.write(bucket=bucket, record=p)\n\n   ## using Table structure\n   tables = query_api.query('from(bucket:\"my-bucket\") |> range(start: -10m)')\n\n   for table in tables:\n       print(table)\n       for row in table.records:\n           print (row.values)\n\n\n   ## using csv library\n   csv_result = query_api.query_csv('from(bucket:\"my-bucket\") |> range(start: -10m)')\n   val_count = 0\n   for row in csv_result:\n       for cell in row:\n           val_count += 1\n\n\n.. marker-query-end\n\nClient configuration\n--------------------\n\nVia File\n^^^^^^^^\nA client can be configured via ``*.ini`` file in segment ``influx2``.\n\nThe following options are supported:\n\n- ``url`` - the url to connect to InfluxDB\n- ``org`` - default destination organization for writes and queries\n- ``token`` - the token to use for the authorization\n- ``timeout`` - socket timeout in ms (default value is 10000)\n\n.. code-block:: python\n\n    self.client = InfluxDBClient.from_config_file(\"config.ini\")\n\n.. code-block::\n\n    [influx2]\n    url=http://localhost:9999\n    org=my-org\n    token=my-token\n    timeout=6000\n\nVia Environment Properties\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nA client can be configured via environment properties.\n\nSupported properties are:\n\n- ``INFLUXDB_V2_URL`` - the url to connect to InfluxDB\n- ``INFLUXDB_V2_ORG`` - default destination organization for writes and queries\n- ``INFLUXDB_V2_TOKEN`` - the token to use for the authorization\n- ``INFLUXDB_V2_TIMEOUT`` - socket timeout in ms (default value is 10000)\n\n.. code-block:: python\n\n    self.client = InfluxDBClient.from_env_properties()\n\n.. marker-index-end\n\n\nHow to use\n----------\n\nWrites\n^^^^^^\n.. marker-writes-start\n\nThe `WriteApi <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write_api.py>`_ supports synchronous, asynchronous and batching writes into InfluxDB 2.0.\nThe data should be passed as a `InfluxDB Line Protocol <https://docs.influxdata.com/influxdb/v1.6/write_protocols/line_protocol_tutorial/>`_\\ , `Data Point <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write/point.py>`_ or Observable stream.\n\n*The default instance of WriteApi use batching.*\n\nThe data could be written as\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n1. ``string`` or ``bytes`` that is formatted as a InfluxDB's line protocol\n2. `Data Point <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/write/point.py#L16>`__ structure\n3. Dictionary style mapping with keys: ``measurement``, ``tags``, ``fields`` and ``time``\n4. List of above items\n5. A ``batching`` type of write also supports an ``Observable`` that produce one of an above item\n\n\nBatching\n\"\"\"\"\"\"\"\"\n\n.. marker-batching-start\n\nThe batching is configurable by ``write_options``\\ :\n\n.. list-table::\n   :header-rows: 1\n\n   * - Property\n     - Description\n     - Default Value\n   * - **batch_size**\n     - the number of data pointx to collect in a batch\n     - ``1000``\n   * - **flush_interval**\n     - the number of milliseconds before the batch is written\n     - ``1000``\n   * - **jitter_interval**\n     - the number of milliseconds to increase the batch flush interval by a random amount\n     - ``0``\n   * - **retry_interval**\n     - the number of milliseconds to retry unsuccessful write. The retry interval is used when the InfluxDB server does not specify \"Retry-After\" header.\n     - ``1000``\n\n\n.. code-block:: python\n\n   import rx\n   from rx import operators as ops\n\n   from influxdb_client import InfluxDBClient, Point, WriteOptions\n   from influxdb_client.client.write_api import SYNCHRONOUS\n\n   _client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\")\n   _write_client = _client.write_api(write_options=WriteOptions(batch_size=500,\n                                                                flush_interval=10_000,\n                                                                jitter_interval=2_000,\n                                                                retry_interval=5_000))\n\n   \"\"\"\n   Write Line Protocol formatted as string\n   \"\"\"\n   _write_client.write(\"my-bucket\", \"my-org\", \"h2o_feet,location=coyote_creek water_level=1.0 1\")\n   _write_client.write(\"my-bucket\", \"my-org\", [\"h2o_feet,location=coyote_creek water_level=2.0 2\",\n                                               \"h2o_feet,location=coyote_creek water_level=3.0 3\"])\n\n   \"\"\"\n   Write Line Protocol formatted as byte array\n   \"\"\"\n   _write_client.write(\"my-bucket\", \"my-org\", \"h2o_feet,location=coyote_creek water_level=1.0 1\".encode())\n   _write_client.write(\"my-bucket\", \"my-org\", [\"h2o_feet,location=coyote_creek water_level=2.0 2\".encode(),\n                                               \"h2o_feet,location=coyote_creek water_level=3.0 3\".encode()])\n\n   \"\"\"\n   Write Dictionary-style object\n   \"\"\"\n   _write_client.write(\"my-bucket\", \"my-org\", {\"measurement\": \"h2o_feet\", \"tags\": {\"location\": \"coyote_creek\"},\n                                               \"fields\": {\"water_level\": 1.0}, \"time\": 1})\n   _write_client.write(\"my-bucket\", \"my-org\", [{\"measurement\": \"h2o_feet\", \"tags\": {\"location\": \"coyote_creek\"},\n                                               \"fields\": {\"water_level\": 2.0}, \"time\": 2},\n                                               {\"measurement\": \"h2o_feet\", \"tags\": {\"location\": \"coyote_creek\"},\n                                               \"fields\": {\"water_level\": 3.0}, \"time\": 3}])\n\n   \"\"\"\n   Write Data Point\n   \"\"\"\n   _write_client.write(\"my-bucket\", \"my-org\", Point(\"h2o_feet\").tag(\"location\", \"coyote_creek\").field(\"water_level\", 4.0).time(4))\n   _write_client.write(\"my-bucket\", \"my-org\", [Point(\"h2o_feet\").tag(\"location\", \"coyote_creek\").field(\"water_level\", 5.0).time(5),\n                                               Point(\"h2o_feet\").tag(\"location\", \"coyote_creek\").field(\"water_level\", 6.0).time(6)])\n\n   \"\"\"\n   Write Observable stream\n   \"\"\"\n   _data = rx \\\n       .range(7, 11) \\\n       .pipe(ops.map(lambda i: \"h2o_feet,location=coyote_creek water_level={0}.0 {0}\".format(i)))\n\n   _write_client.write(\"my-bucket\", \"my-org\", _data)\n\n\n   \"\"\"\n   Close client\n   \"\"\"\n   _write_client.__del__()\n   _client.__del__()\n\n.. marker-batching-end\n\nDefault Tags\n\"\"\"\"\"\"\"\"\"\"\"\"\n.. marker-default-tags-start\n\nSometimes is useful to store same information in every measurement e.g. ``hostname``, ``location``, ``customer``.\nThe client is able to use static value or env property as a tag value.\n\nThe expressions:\n\n- ``California Miner`` - static value\n- ``${env.hostname}`` - environment property\n\nVia API\n_______\n\n.. code-block:: python\n\n    point_settings = PointSettings()\n    point_settings.add_default_tag(\"id\", \"132-987-655\")\n    point_settings.add_default_tag(\"customer\", \"California Miner\")\n    point_settings.add_default_tag(\"data_center\", \"${env.data_center}\")\n\n    self.write_client = self.client.write_api(write_options=SYNCHRONOUS, point_settings=point_settings)\n\n.. code-block:: python\n\n    self.write_client = self.client.write_api(write_options=SYNCHRONOUS,\n                                                  point_settings=PointSettings(**{\"id\": \"132-987-655\",\n                                                                                  \"customer\": \"California Miner\"}))\n\nVia Configuration file\n______________________\n\nIn a ini configuration file you are able to specify default tags by ``tags`` segment.\n\n.. code-block:: python\n\n    self.client = InfluxDBClient.from_config_file(\"config.ini\")\n\n.. code-block::\n\n    [influx2]\n    url=http://localhost:9999\n    org=my-org\n    token=my-token\n    timeout=6000\n\n    [tags]\n    id = 132-987-655\n    customer = California Miner\n    data_center = ${env.data_center}\n\nVia Environment Properties\n__________________________\nYou are able to specify default tags by environment properties with prefix ``INFLUXDB_V2_TAG_``.\n\nExamples:\n\n- ``INFLUXDB_V2_TAG_ID``\n- ``INFLUXDB_V2_TAG_HOSTNAME``\n\n.. code-block:: python\n\n    self.client = InfluxDBClient.from_env_properties()\n\n.. marker-default-tags-end\n\nAsynchronous client\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nData are writes in an asynchronous HTTP request.\n\n.. code-block:: python\n\n   from influxdb_client  import InfluxDBClient\n   from influxdb_client.client.write_api import ASYNCHRONOUS\n\n   client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\")\n   write_client = client.write_api(write_options=ASYNCHRONOUS)\n\n   ...\n\n   client.__del__()\n\nSynchronous client\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nData are writes in a synchronous HTTP request.\n\n.. code-block:: python\n\n   from influxdb_client  import InfluxDBClient\n   from influxdb_client .client.write_api import SYNCHRONOUS\n\n   client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\")\n   write_client = client.write_api(write_options=SYNCHRONOUS)\n\n   ...\n\n   client.__del__()\n\nQueries\n^^^^^^^\n\nThe result retrieved by `QueryApi <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/query_api.py>`_  could be formatted as a:\n\n1. Flux data structure: `FluxTable <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/flux_table.py#L5>`_, `FluxColumn <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/flux_table.py#L22>`_ and `FluxRecord <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/flux_table.py#L31>`_\n2. `csv.reader <https://docs.python.org/3.4/library/csv.html#reader-objects>`__ which will iterate over CSV lines\n3. Raw unprocessed results as a ``str`` iterator\n4. `Pandas DataFrame <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html>`_\n\nThe API also support streaming ``FluxRecord`` via `query_stream <https://github.com/influxdata/influxdb-client-python/blob/master/influxdb_client/client/query_api.py#L77>`_, see example below:\n\n.. code-block:: python\n\n    from influxdb_client import InfluxDBClient, Point, Dialect\n    from influxdb_client.client.write_api import SYNCHRONOUS\n\n    client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\")\n\n    write_api = client.write_api(write_options=SYNCHRONOUS)\n    query_api = client.query_api()\n\n    \"\"\"\n    Prepare data\n    \"\"\"\n\n    _point1 = Point(\"my_measurement\").tag(\"location\", \"Prague\").field(\"temperature\", 25.3)\n    _point2 = Point(\"my_measurement\").tag(\"location\", \"New York\").field(\"temperature\", 24.3)\n\n    write_api.write(bucket=\"my-bucket\", record=[_point1, _point2])\n\n    \"\"\"\n    Query: using Table structure\n    \"\"\"\n    tables = query_api.query('from(bucket:\"my-bucket\") |> range(start: -10m)')\n\n    for table in tables:\n        print(table)\n        for record in table.records:\n            print(record.values)\n\n    print()\n    print()\n\n    \"\"\"\n    Query: using Stream\n    \"\"\"\n    records = query_api.query_stream('from(bucket:\"my-bucket\") |> range(start: -10m)')\n\n    for record in records:\n        print(f'Temperature in {record[\"location\"]} is {record[\"_value\"]}')\n\n    \"\"\"\n    Interrupt a stream after retrieve a required data\n    \"\"\"\n    large_stream = query_api.query_stream('from(bucket:\"my-bucket\") |> range(start: -100d)')\n    for record in large_stream:\n        if record[\"location\"] == \"New York\":\n            print(f'New York temperature: {record[\"_value\"]}')\n            break\n\n    large_stream.close()\n\n    print()\n    print()\n\n    \"\"\"\n    Query: using csv library\n    \"\"\"\n    csv_result = query_api.query_csv('from(bucket:\"my-bucket\") |> range(start: -10m)',\n                                     dialect=Dialect(header=False, delimiter=\",\", comment_prefix=\"#\", annotations=[],\n                                                     date_time_format=\"RFC3339\"))\n    for csv_line in csv_result:\n        if not len(csv_line) == 0:\n            print(f'Temperature in {csv_line[9]} is {csv_line[6]}')\n\n    \"\"\"\n    Close client\n    \"\"\"\n    client.__del__()\n\nPandas DataFrame\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n.. marker-pandas-start\n\n.. note:: For DataFrame querying you should install Pandas dependency via ``pip install influxdb-client[extra]``.\n\n.. note:: Note that if a query returns more then one table then the client generates a ``DataFrame`` for each of them.\n\nThe ``client`` is able to retrieve data in `Pandas DataFrame <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html>`_ format thought ``query_data_frame``:\n\n.. code-block:: python\n\n    from influxdb_client import InfluxDBClient, Point, Dialect\n    from influxdb_client.client.write_api import SYNCHRONOUS\n\n    client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\")\n\n    write_api = client.write_api(write_options=SYNCHRONOUS)\n    query_api = client.query_api()\n\n    \"\"\"\n    Prepare data\n    \"\"\"\n\n    _point1 = Point(\"my_measurement\").tag(\"location\", \"Prague\").field(\"temperature\", 25.3)\n    _point2 = Point(\"my_measurement\").tag(\"location\", \"New York\").field(\"temperature\", 24.3)\n\n    write_api.write(bucket=\"my-bucket\", record=[_point1, _point2])\n\n    \"\"\"\n    Query: using Pandas DataFrame\n    \"\"\"\n    data_frame = query_api.query_data_frame('from(bucket:\"my-bucket\") '\n                                            '|> range(start: -10m) '\n                                            '|> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\") '\n                                            '|> keep(columns: [\"location\", \"temperature\"])')\n    print(data_frame.to_string())\n\n    \"\"\"\n    Close client\n    \"\"\"\n    client.__del__()\n\nOutput:\n\n.. code-block::\n\n        result table  location  temperature\n    0  _result     0  New York         24.3\n    1  _result     1    Prague         25.3\n\n.. marker-pandas-end\n\nExamples\n^^^^^^^^\n\nHow to efficiently import large dataset\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe following example shows how to import dataset with dozen megabytes.\nIf you would like to import gigabytes of data then use our multiprocessing example: `import_data_set_multiprocessing.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/import_data_set_multiprocessing.py>`_ for use a full capability of your hardware.\n\n* sources - `import_data_set.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/import_data_set.py>`_\n\n.. code-block:: python\n\n   \"\"\"\n   Import VIX - CBOE Volatility Index - from \"vix-daily.csv\" file into InfluxDB 2.0\n\n   https://datahub.io/core/finance-vix#data\n   \"\"\"\n\n   from collections import OrderedDict\n   from csv import DictReader\n\n   import rx\n   from rx import operators as ops\n\n   from influxdb_client import InfluxDBClient, Point, WriteOptions\n\n   def parse_row(row: OrderedDict):\n       \"\"\"Parse row of CSV file into Point with structure:\n\n           financial-analysis,type=ily close=18.47,high=19.82,low=18.28,open=19.82 1198195200000000000\n\n       CSV format:\n           Date,VIX Open,VIX High,VIX Low,VIX Close\\n\n           2004-01-02,17.96,18.68,17.54,18.22\\n\n           2004-01-05,18.45,18.49,17.44,17.49\\n\n           2004-01-06,17.66,17.67,16.19,16.73\\n\n           2004-01-07,16.72,16.75,15.5,15.5\\n\n           2004-01-08,15.42,15.68,15.32,15.61\\n\n           2004-01-09,16.15,16.88,15.57,16.75\\n\n           ...\n\n       :param row: the row of CSV file\n       :return: Parsed csv row to [Point]\n       \"\"\"\n\n       \"\"\"\n        For better performance is sometimes useful directly create a LineProtocol to avoid unnecessary escaping overhead:\n        \"\"\"\n        # from pytz import UTC\n        # import ciso8601\n        # from influxdb_client.client.write.point import EPOCH\n        #\n        # time = (UTC.localize(ciso8601.parse_datetime(row[\"Date\"])) - EPOCH).total_seconds() * 1e9\n        # return f\"financial-analysis,type=vix-daily\" \\\n        #        f\" close={float(row['VIX Close'])},high={float(row['VIX High'])},low={float(row['VIX Low'])},open={float(row['VIX Open'])} \" \\\n        #        f\" {int(time)}\"\n\n       return Point(\"financial-analysis\") \\\n           .tag(\"type\", \"vix-daily\") \\\n           .field(\"open\", float(row['VIX Open'])) \\\n           .field(\"high\", float(row['VIX High'])) \\\n           .field(\"low\", float(row['VIX Low'])) \\\n           .field(\"close\", float(row['VIX Close'])) \\\n           .time(row['Date'])\n\n\n   \"\"\"\n   Converts vix-daily.csv into sequence of datad point\n   \"\"\"\n   data = rx \\\n       .from_iterable(DictReader(open('vix-daily.csv', 'r'))) \\\n       .pipe(ops.map(lambda row: parse_row(row)))\n\n   client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\", debug=True)\n\n   \"\"\"\n   Create client that writes data in batches with 50_000 items.\n   \"\"\"\n   write_api = client.write_api(write_options=WriteOptions(batch_size=50_000, flush_interval=10_000))\n\n   \"\"\"\n   Write data into InfluxDB\n   \"\"\"\n   write_api.write(bucket=\"my-bucket\", record=data)\n   write_api.__del__()\n\n   \"\"\"\n   Querying max value of CBOE Volatility Index\n   \"\"\"\n   query = 'from(bucket:\"my-bucket\")' \\\n           ' |> range(start: 0, stop: now())' \\\n           ' |> filter(fn: (r) => r._measurement == \"financial-analysis\")' \\\n           ' |> max()'\n   result = client.query_api().query(query=query)\n\n   \"\"\"\n   Processing results\n   \"\"\"\n   print()\n   print(\"=== results ===\")\n   print()\n   for table in result:\n       for record in table.records:\n           print('max {0:5} = {1}'.format(record.get_field(), record.get_value()))\n\n   \"\"\"\n   Close client\n   \"\"\"\n   client.__del__()\n\n.. marker-writes-end\n\n\nEfficiency write data from IOT sensor\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n.. marker-iot-start\n\n* sources - `iot_sensor.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/iot_sensor.py>`_\n\n.. code-block:: python\n\n   \"\"\"\n   Efficiency write data from IOT sensor - write changed temperature every minute\n   \"\"\"\n   import atexit\n   import platform\n   from datetime import timedelta\n\n   import psutil as psutil\n   import rx\n   from rx import operators as ops\n\n   from influxdb_client import InfluxDBClient, WriteApi, WriteOptions\n\n   def on_exit(db_client: InfluxDBClient, write_api: WriteApi):\n       \"\"\"Close clients after terminate a script.\n\n       :param db_client: InfluxDB client\n       :param write_api: WriteApi\n       :return: nothing\n       \"\"\"\n       write_api.__del__()\n       db_client.__del__()\n\n\n   def sensor_temperature():\n       \"\"\"Read a CPU temperature. The [psutil] doesn't support MacOS so we use [sysctl].\n\n       :return: actual CPU temperature\n       \"\"\"\n       os_name = platform.system()\n       if os_name == 'Darwin':\n           from subprocess import check_output\n           output = check_output([\"sysctl\", \"machdep.xcpm.cpu_thermal_level\"])\n           import re\n           return re.findall(r'\\d+', str(output))[0]\n       else:\n           return psutil.sensors_temperatures()[\"coretemp\"][0]\n\n\n   def line_protocol(temperature):\n       \"\"\"Create a InfluxDB line protocol with structure:\n\n           iot_sensor,hostname=mine_sensor_12,type=temperature value=68\n\n       :param temperature: the sensor temperature\n       :return: Line protocol to write into InfluxDB\n       \"\"\"\n\n       import socket\n       return 'iot_sensor,hostname={},type=temperature value={}'.format(socket.gethostname(), temperature)\n\n\n   \"\"\"\n   Read temperature every minute; distinct_until_changed - produce only if temperature change\n   \"\"\"\n   data = rx\\\n       .interval(period=timedelta(seconds=60))\\\n       .pipe(ops.map(lambda t: sensor_temperature()),\n             ops.distinct_until_changed(),\n             ops.map(lambda temperature: line_protocol(temperature)))\n\n   _db_client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\", debug=True)\n\n   \"\"\"\n   Create client that writes data into InfluxDB\n   \"\"\"\n   _write_api = _db_client.write_api(write_options=WriteOptions(batch_size=1))\n   _write_api.write(bucket=\"my-bucket\", record=data)\n\n\n   \"\"\"\n   Call after terminate a script\n   \"\"\"\n   atexit.register(on_exit, _db_client, _write_api)\n\n   input()\n\n.. marker-iot-end\n\nConnect to InfluxDB Cloud\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThe following example demonstrate a simplest way how to write and query date with the InfluxDB Cloud.\n\nAt first point you should create an authentication token as is described `here <https://v2.docs.influxdata.com/v2.0/security/tokens/create-token/>`_.\n\nAfter that you should configure properties: ``influx_cloud_url``, ``influx_cloud_token``, ``bucket`` and ``org`` in a ``influx_cloud.py`` example.\n\nThe last step is run a python script via: ``python3 influx_cloud.py``.\n\n* sources - `influx_cloud.py <https://github.com/influxdata/influxdb-client-python/blob/master/examples/influx_cloud.py>`_\n\n.. code-block:: python\n\n    \"\"\"\n    Connect to InfluxDB 2.0 - write data and query them\n    \"\"\"\n\n    from datetime import datetime\n\n    from influxdb_client import Point, InfluxDBClient\n    from influxdb_client.client.write_api import SYNCHRONOUS\n\n    \"\"\"\n    Configure credentials\n    \"\"\"\n    influx_cloud_url = 'https://us-west-2-1.aws.cloud2.influxdata.com'\n    influx_cloud_token = '...'\n    bucket = '...'\n    org = '...'\n\n    client = InfluxDBClient(url=influx_cloud_url, token=influx_cloud_token)\n    try:\n        kind = 'temperature'\n        host = 'host1'\n        device = 'opt-123'\n\n        \"\"\"\n        Write data by Point structure\n        \"\"\"\n        point = Point(kind).tag('host', host).tag('device', device).field('value', 25.3).time(time=datetime.utcnow())\n\n        print(f'Writing to InfluxDB cloud: {point.to_line_protocol()} ...')\n\n        write_api = client.write_api(write_options=SYNCHRONOUS)\n        write_api.write(bucket=bucket, org=org, record=point)\n\n        print()\n        print('success')\n        print()\n        print()\n\n        \"\"\"\n        Query written data\n        \"\"\"\n        query = f'from(bucket: \"{bucket}\") |> range(start: -1d) |> filter(fn: (r) => r._measurement == \"{kind}\")'\n        print(f'Querying from InfluxDB cloud: \"{query}\" ...')\n        print()\n\n        query_api = client.query_api()\n        tables = query_api.query(query=query, org=org)\n\n        for table in tables:\n            for row in table.records:\n                print(f'{row.values[\"_time\"]}: host={row.values[\"host\"]},device={row.values[\"device\"]} '\n                      f'{row.values[\"_value\"]} \u00b0C')\n\n        print()\n        print('success')\n\n    except Exception as e:\n        print(e)\n    finally:\n        client.close()\n\nHow to use Jupyter + Pandas + InfluxDB 2\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThe first example shows how to use client capabilities to predict stock price via `Keras <https://keras.io>`_, `TensorFlow <https://www.tensorflow.org>`_, `sklearn <https://scikit-learn.org/stable/>`_:\n\nThe example is taken from `Kaggle <https://www.kaggle.com/chaitanyacc4/predicting-stock-prices-of-apple-inc>`_.\n\n* sources - `stock-predictions.ipynb <notebooks/stock-predictions.ipynb>`_\n\n.. image:: https://raw.githubusercontent.com/influxdata/influxdb-client-python/master/docs/images/stock-price-prediction.gif\n\nResult:\n\n.. image:: https://raw.githubusercontent.com/influxdata/influxdb-client-python/master/docs/images/stock-price-prediction-results.png\n\nThe second example shows how to use client capabilities to realtime visualization via `hvPlot <https://hvplot.pyviz.org>`_, `Streamz <https://streamz.readthedocs.io/en/latest/>`_, `RxPY <https://rxpy.readthedocs.io/en/latest/>`_:\n\n* sources - `realtime-stream.ipynb <notebooks/realtime-stream.ipynb>`_\n\n.. image:: https://raw.githubusercontent.com/influxdata/influxdb-client-python/master/docs/images/realtime-result.gif\n\n\nAdvanced Usage\n--------------\n\nGzip support\n^^^^^^^^^^^^\n.. marker-gzip-start\n\n``InfluxDBClient`` does not enable gzip compression for http requests by default. If you want to enable gzip to reduce transfer data's size, you can call:\n\n.. code-block:: python\n\n   from influxdb_client import InfluxDBClient\n\n   _db_client = InfluxDBClient(url=\"http://localhost:9999\", token=\"my-token\", org=\"my-org\", enable_gzip=True)\n\n.. marker-gzip-end\n\nInfluxDB 1.8 API compatibility\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`InfluxDB 1.8.0 introduced forward compatibility APIs <https://docs.influxdata.com/influxdb/latest/tools/api/#influxdb-2-0-api-compatibility-endpoints>`_ for InfluxDB 2.0. This allow you to easily move from InfluxDB 1.x to InfluxDB 2.0 Cloud or open source.\n\nThe following forward compatible APIs are available:\n\n=======================================================  ====================================================================================================  =======\n API                                                     Endpoint                                                                                              Description\n=======================================================  ====================================================================================================  =======\n`query_api.py <influxdb_client/client/query_api.py>`_    `/api/v2/query <https://docs.influxdata.com/influxdb/latest/tools/api/#api-v2-query-http-endpoint>`_  Query data in InfluxDB 1.8.0+ using the InfluxDB 2.0 API and `Flux <https://docs.influxdata.com/flux/latest/>`_ (endpoint should be enabled by `flux-enabled option <https://docs.influxdata.com/influxdb/latest/administration/config/#flux-enabled-false>`_)\n`write_api.py <influxdb_client/client/write_api.py>`_    `/api/v2/write <https://docs.influxdata.com/influxdb/latest/tools/api/#api-v2-write-http-endpoint>`_  Write data to InfluxDB 1.8.0+ using the InfluxDB 2.0 API\n`health() <influxdb_client/client/influxdb_client.py>`_  `/health <https://docs.influxdata.com/influxdb/latest/tools/api/#health-http-endpointt>`_             Check the health of your InfluxDB instance\n=======================================================  ====================================================================================================  =======\n\nFor detail info see `InfluxDB 1.8 example <examples/influxdb_18_example.py>`_.\n\nLocal tests\n-----------\n\n.. code-block:: python\n\n    # start/restart InfluxDB2 on local machine using docker\n    ./scripts/influxdb-restart.sh\n\n    # install requirements\n    pip install -r requirements.txt --user\n    pip install -r extra-requirements.txt --user\n    pip install -r test-requirements.txt --user\n\n    # run unit & integration tests\n    pytest tests\n\n\nContributing\n------------\n\nBug reports and pull requests are welcome on GitHub at `https://github.com/influxdata/influxdb-client-python <https://github.com/influxdata/influxdb-client-python>`_.\n\nLicense\n-------\n\nThe gem is available as open source under the terms of the `MIT License <https://opensource.org/licenses/MIT>`_.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/influxdata/influxdb-client-python", "keywords": "InfluxDB,InfluxDB Python Client", "license": "", "maintainer": "", "maintainer_email": "", "name": "influxdb-client", "package_url": "https://pypi.org/project/influxdb-client/", "platform": "", "project_url": "https://pypi.org/project/influxdb-client/", "project_urls": {"Homepage": "https://github.com/influxdata/influxdb-client-python"}, "release_url": "https://pypi.org/project/influxdb-client/1.6.0/", "requires_dist": ["rx (>=3.0.1)", "certifi (>=14.05.14)", "six (>=1.10)", "python-dateutil (>=2.5.3)", "setuptools (>=21.0.0)", "urllib3 (>=1.15.1)", "ciso8601 (>=2.1.1)", "pytz (>=2019.1)", "pandas (>=0.25.3) ; extra == 'extra'"], "requires_python": ">=3.6", "summary": "InfluxDB 2.0 Python client library", "version": "1.6.0"}, "last_serial": 7037907, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "90eea8dd4fa23c2afc0f5a6f1e7c30c1", "sha256": "2c301eb8a836e680d7115f6f501ea94876f275965806b03154dc020216158930"}, "downloads": -1, "filename": "influxdb_client-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "90eea8dd4fa23c2afc0f5a6f1e7c30c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 473351, "upload_time": "2019-09-26T16:04:14", "upload_time_iso_8601": "2019-09-26T16:04:14.907316Z", "url": "https://files.pythonhosted.org/packages/88/d3/03b3c6094236b5b79f371046b63c2297c02a08e5f37f9b1eda3a02167b6e/influxdb_client-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "bf8339c5753e3e9969add92ca38abc90", "sha256": "db331e0e93159dddeb65635e56f676390ff1f4de4f1b87c3584d71cfc213af98"}, "downloads": -1, "filename": "influxdb_client-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bf8339c5753e3e9969add92ca38abc90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 173157, "upload_time": "2019-09-26T16:04:18", "upload_time_iso_8601": "2019-09-26T16:04:18.194023Z", "url": "https://files.pythonhosted.org/packages/b4/7c/c6aa47811805f8225b416805452c8de62ced20bb5848e680030641d159f4/influxdb_client-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "40f2bfc12f82dfc5aba45f404315134d", "sha256": "c8fee37aa08b572a0deabcdb194e3e049518d2be16784b59428225e1822cff0f"}, "downloads": -1, "filename": "influxdb_client-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "40f2bfc12f82dfc5aba45f404315134d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 473357, "upload_time": "2019-09-26T16:14:06", "upload_time_iso_8601": "2019-09-26T16:14:06.936587Z", "url": "https://files.pythonhosted.org/packages/55/ce/f5c4ff5e7648ef3fdb12d0ec98ee1609078507e3098191c9948a54816d86/influxdb_client-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a51bd941fef4ee16cb52f77cbc89fc69", "sha256": "46d5b09fb2d8a3144cb955ff3c15a3269fd394392af61dceae136d8fd30cae16"}, "downloads": -1, "filename": "influxdb_client-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a51bd941fef4ee16cb52f77cbc89fc69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 173178, "upload_time": "2019-09-26T16:14:09", "upload_time_iso_8601": "2019-09-26T16:14:09.467969Z", "url": "https://files.pythonhosted.org/packages/c5/b1/eda3629299689ed27685ae4011476aa1e1703a4e26f6c9c9142f20488f82/influxdb_client-0.0.2.tar.gz"}], "1.0.0": [{"comment_text": "", "digests": {"md5": "3ea0fce7face07a35c0c97c2e3664985", "sha256": "50a445ade982cb812ca5eb0726f2885a149e06665a60ce17e037874b9dc8a6b3"}, "downloads": -1, "filename": "influxdb_client-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3ea0fce7face07a35c0c97c2e3664985", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 483450, "upload_time": "2019-11-11T09:46:54", "upload_time_iso_8601": "2019-11-11T09:46:54.470779Z", "url": "https://files.pythonhosted.org/packages/10/21/3c3cc500ea0d0855671e0d6bb364e7d0a34e69fd02bcb96d9581c9ff11b9/influxdb_client-1.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "380985c4bf3ff6a96a7a8241e24ab2ac", "sha256": "3dd4e1eb6a04990830a8acd39296d8a35ee27a6e50fb53fa57277f5a335a9ea6"}, "downloads": -1, "filename": "influxdb_client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "380985c4bf3ff6a96a7a8241e24ab2ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 180271, "upload_time": "2019-11-11T09:46:57", "upload_time_iso_8601": "2019-11-11T09:46:57.145219Z", "url": "https://files.pythonhosted.org/packages/b9/2d/3047e0e305ea29b30186ca4615386cfd17135e35b8f5ce39dd0e4fe56840/influxdb_client-1.0.0.tar.gz"}], "1.1.0": [{"comment_text": "", "digests": {"md5": "751e805189d71ed132bddc9c1d483601", "sha256": "3e9ee9fb35ed6cb29ddff10f5b393326f71b8d5134335afaf137639178f0b345"}, "downloads": -1, "filename": "influxdb_client-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "751e805189d71ed132bddc9c1d483601", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 486424, "upload_time": "2019-11-18T09:09:00", "upload_time_iso_8601": "2019-11-18T09:09:00.101849Z", "url": "https://files.pythonhosted.org/packages/5c/b8/1658ee32e2761f1eb9ec58877d93ce8124cda6d137578e6ff81338120023/influxdb_client-1.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "c79c928397affa959d3dbc79754783d1", "sha256": "43e68acd13a5daaa9a438825769b87e166443f02bc29b8cd1863bbce81cf3f87"}, "downloads": -1, "filename": "influxdb_client-1.1.0.tar.gz", "has_sig": false, "md5_digest": "c79c928397affa959d3dbc79754783d1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 183632, "upload_time": "2019-11-18T09:09:02", "upload_time_iso_8601": "2019-11-18T09:09:02.476304Z", "url": "https://files.pythonhosted.org/packages/d6/05/70532f08944779818bdb21594265f01652eba1661b0fa7b6710bfcfafd12/influxdb_client-1.1.0.tar.gz"}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bffcebf4ba4041e55d375ca704028866", "sha256": "1105dd18e30438da19a76d73a1264638fd424b328349111f87c79a179d74c854"}, "downloads": -1, "filename": "influxdb_client-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bffcebf4ba4041e55d375ca704028866", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 523471, "upload_time": "2019-12-06T09:17:14", "upload_time_iso_8601": "2019-12-06T09:17:14.187672Z", "url": "https://files.pythonhosted.org/packages/7a/af/2f52275eba725eae97e39e503bb258ef2d588fccf9ee312b88b6e3f579af/influxdb_client-1.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "738cac0f25c861317a3f1b98b6f8628c", "sha256": "d08f7ab7baed81b8e2efdc3af359034276ba04771c154e867f49cc39747b7c3a"}, "downloads": -1, "filename": "influxdb_client-1.2.0.tar.gz", "has_sig": false, "md5_digest": "738cac0f25c861317a3f1b98b6f8628c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 192689, "upload_time": "2019-12-06T09:17:16", "upload_time_iso_8601": "2019-12-06T09:17:16.704752Z", "url": "https://files.pythonhosted.org/packages/92/65/011d8dc6a44ae8a8d1e4f27d72c578365197c6fe108557b451e5a51d7eef/influxdb_client-1.2.0.tar.gz"}], "1.3.0": [{"comment_text": "", "digests": {"md5": "629b01668fa615c90b545aec1c806689", "sha256": "bb728c98276998cd8d66b957021f9e451ec3d0cc791ce0344fdf831096a98f97"}, "downloads": -1, "filename": "influxdb_client-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "629b01668fa615c90b545aec1c806689", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 478857, "upload_time": "2020-01-17T09:24:15", "upload_time_iso_8601": "2020-01-17T09:24:15.531315Z", "url": "https://files.pythonhosted.org/packages/ce/a2/a268408c5ba18d7c71ef634cba7fe090da45215690ace6ea2b2e9c4f0f5c/influxdb_client-1.3.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "66debce75beabc2d4251be68d8e65da3", "sha256": "ecf6213418f3099c45a4d761735e8c1c7e433cd6404282e298e70a7444cd8db8"}, "downloads": -1, "filename": "influxdb_client-1.3.0.tar.gz", "has_sig": false, "md5_digest": "66debce75beabc2d4251be68d8e65da3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 188834, "upload_time": "2020-01-17T09:24:18", "upload_time_iso_8601": "2020-01-17T09:24:18.386806Z", "url": "https://files.pythonhosted.org/packages/54/e5/17963473c455cb3be4a7a7e85a65568007efb80834952d34dae957d8bfea/influxdb_client-1.3.0.tar.gz"}], "1.4.0": [{"comment_text": "", "digests": {"md5": "3d60d602315dae2faffdade74442fb08", "sha256": "365632e3e40460ae64693cb79bc9ff21981e53dc7c8ab2429a388f38a64c3ad9"}, "downloads": -1, "filename": "influxdb_client-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3d60d602315dae2faffdade74442fb08", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 481364, "upload_time": "2020-02-14T08:33:44", "upload_time_iso_8601": "2020-02-14T08:33:44.741993Z", "url": "https://files.pythonhosted.org/packages/1c/69/0c6c436485d2cf6b56f51ac3d027b9bd556db3e9ff3dec1346257a5a2353/influxdb_client-1.4.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "2ef0571e4c43b10eac675d3c651327c2", "sha256": "e5ee68e384eac8b0ae46ccb1fd375022429730e75b6e3017117f3b7ebe652388"}, "downloads": -1, "filename": "influxdb_client-1.4.0.tar.gz", "has_sig": false, "md5_digest": "2ef0571e4c43b10eac675d3c651327c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 192603, "upload_time": "2020-02-14T08:33:47", "upload_time_iso_8601": "2020-02-14T08:33:47.665602Z", "url": "https://files.pythonhosted.org/packages/c5/3d/956d03ec9d689bea2b9515ebed590ecf9db0376d73ef705d34b139ce918a/influxdb_client-1.4.0.tar.gz"}], "1.5.0": [{"comment_text": "", "digests": {"md5": "e7a687f58d97c002f548180d9716a15d", "sha256": "1a5ebe0f8d4835a123308fbc23459a9458c7f6a392aaac9fa99f6e1c7794e08b"}, "downloads": -1, "filename": "influxdb_client-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e7a687f58d97c002f548180d9716a15d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 484175, "upload_time": "2020-03-13T08:36:41", "upload_time_iso_8601": "2020-03-13T08:36:41.279810Z", "url": "https://files.pythonhosted.org/packages/cb/bb/06f064277ba3e8e5a09fa627947d338b7d1663f68a7650fbe5ff9e4a9585/influxdb_client-1.5.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "764d7db38121d0643f33133fa2cecb0e", "sha256": "3f84400107dfce9e5ac044468b9bf2c4f185de81162813811f8c74453e4d62c2"}, "downloads": -1, "filename": "influxdb_client-1.5.0.tar.gz", "has_sig": false, "md5_digest": "764d7db38121d0643f33133fa2cecb0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 196613, "upload_time": "2020-03-13T08:36:43", "upload_time_iso_8601": "2020-03-13T08:36:43.649272Z", "url": "https://files.pythonhosted.org/packages/8c/ec/3fe6a73a636444e0813df0d2713b6a09ffe9ca913015aa95e7ebe364ed78/influxdb_client-1.5.0.tar.gz"}], "1.6.0": [{"comment_text": "", "digests": {"md5": "7385ea5fdbc9406c1ac9b63fdc904c10", "sha256": "41a737032b74e25ee211f0599fc008db5fe9668f13008b672eef9c0fa00625e2"}, "downloads": -1, "filename": "influxdb_client-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7385ea5fdbc9406c1ac9b63fdc904c10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 485629, "upload_time": "2020-04-17T06:13:45", "upload_time_iso_8601": "2020-04-17T06:13:45.493329Z", "url": "https://files.pythonhosted.org/packages/e4/7a/893f33f32e2984437e49a42e6b7e9a3e673a772ac1c1f5e8ea713a83ed25/influxdb_client-1.6.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "2e30e223e11c93fedbc3a1d8fa2decc6", "sha256": "1ba837b941b7e1f3175f2751f1a7fd050106b57a577a76f87846457d25dd0a85"}, "downloads": -1, "filename": "influxdb_client-1.6.0.tar.gz", "has_sig": false, "md5_digest": "2e30e223e11c93fedbc3a1d8fa2decc6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 200214, "upload_time": "2020-04-17T06:13:47", "upload_time_iso_8601": "2020-04-17T06:13:47.894632Z", "url": "https://files.pythonhosted.org/packages/41/63/257b04764f765cde8590fc865956f37438932989b54a4e7b0908cc070bb9/influxdb_client-1.6.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "7385ea5fdbc9406c1ac9b63fdc904c10", "sha256": "41a737032b74e25ee211f0599fc008db5fe9668f13008b672eef9c0fa00625e2"}, "downloads": -1, "filename": "influxdb_client-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7385ea5fdbc9406c1ac9b63fdc904c10", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 485629, "upload_time": "2020-04-17T06:13:45", "upload_time_iso_8601": "2020-04-17T06:13:45.493329Z", "url": "https://files.pythonhosted.org/packages/e4/7a/893f33f32e2984437e49a42e6b7e9a3e673a772ac1c1f5e8ea713a83ed25/influxdb_client-1.6.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "2e30e223e11c93fedbc3a1d8fa2decc6", "sha256": "1ba837b941b7e1f3175f2751f1a7fd050106b57a577a76f87846457d25dd0a85"}, "downloads": -1, "filename": "influxdb_client-1.6.0.tar.gz", "has_sig": false, "md5_digest": "2e30e223e11c93fedbc3a1d8fa2decc6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 200214, "upload_time": "2020-04-17T06:13:47", "upload_time_iso_8601": "2020-04-17T06:13:47.894632Z", "url": "https://files.pythonhosted.org/packages/41/63/257b04764f765cde8590fc865956f37438932989b54a4e7b0908cc070bb9/influxdb_client-1.6.0.tar.gz"}]}