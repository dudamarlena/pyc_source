{"info": {"author": "Ross Jacobs", "author_email": "rj@swit.sh", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "# pre-commit hooks\n\nThis is a [pre-commit](https://pre-commit.com) hooks repo that\nintegrates C/C++ linters [clang-format](https://clang.llvm.org/docs/ClangFormatStyleOptions.html), [clang-tidy](https://clang.llvm.org/extra/clang-tidy/), and [oclint](http://oclint.org/).\n\n## Example Usage\n\nWith `int main() { int i; return 10; }` in a file, all three linters should fail on commit:\n\n<img src=\"https://dl.dropboxusercontent.com/s/xluan7x39wx6fss/c_linters_failing.png\" width=\"66%\" height=\"66%\">\n\nThe above uses this `.pre-commit-config.yaml`:\n\n```yaml\nfail_fast: false\nrepos:\n  - repo: https://github.com/pocc/pre-commit-hooks\n    sha: master\n    hooks:\n      - id: clang-format\n        args: [--style=Google]\n      - id: clang-tidy\n        args: [-checks=*, -warnings-as-errors=*]\n      - id: oclint\n        args: [-enable-clang-static-analyzer, -enable-global-analysis]\n```\n\n_Note that for your config yaml, you can supply your own args or remove the args line entirely,\ndepending on your use case._\n\n## Using the Hooks\n\n### Prerequisites\n\n_You will need to install these utilities in order to use them._ _Your package\nmanager may already have them._\n\n- `brew install llvm oclint`\n- `apt install clang-format clang-tidy oclint`\n\nBash is required to use these hooks as all 3 invoking scripts are written in it.\n\n### Hook Info\n\n|                                                                          | What it does                                              | Fix Inplace            |\n| ------------------------------------------------------------------------ | --------------------------------------------------------- | ---------------------- |\n| [clang-format](https://clang.llvm.org/docs/ClangFormatStyleOptions.html) | Formats C/C++ code according to a style                   | -i                     |\n| [clang-tidy](https://clang.llvm.org/extra/clang-tidy/)                   | clang-based C/C++ linter                                  | -fix, --fix-errors [1] |\n| [oclint](http://oclint.org/)                                             | static code analysis tool for C, C++ and Objective-C code | N/A                    |\n\n[1]: `-fix` will fail if there are compiler errors. `-fix-errors` will `-fix`\nand fix compiler errors if it can, like missing semicolons.\n\n### Enforcing linter version with --version\n\nSome linters change behavior between versions. To enforce a linter version\n8.0.0, for example, add `--version=8.0.0` to `args:` for that linter. Note that\nthis is a pre-commit hook arg and passing it to the linter will cause an error.\n\n### Compilation Database\n\n`clang-tidy` and `oclint` both expect a\n[compilation database](https://clang.llvm.org/docs/JSONCompilationDatabase.html).\nBoth of the hooks for them will ignore the error for not having one.\n\nYou can generate with one `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ...` if you\nhave a cmake-based project.\n\n### The -- option\n\nOptions after `--` like `-std=c++11` will be interpreted correctly for\n`clang-tidy` and `oclint`. Make sure they sequentially follow the `--` argument\nin the hook's args list.\n\n## Testing\n\nTo run the tests and verify `clang-format`, `clang-tidy`, and `oclint` are\nworking as expected on your system, use `pytest --runslow`. This will work\non both bash and python branches.\n\n### Example testing with python branch\n\nThe default is to skip most (29/51) tests as to run them all takes ~60s. These\npytest options are available to add test types:\n\n* `--runslow`: oclint and clang-tidy `-fix`/`--fix-errors` tests take extra time\n* `--internal`: Internal class tests to ensure internal/shell APIs match\n\n\n**Note**: You can parallelize these tests with `pytest-xdist`.\nAdding `-n 16` to the command divides runtime by ~6x in my testing.\n\nTo run all tests serially, run `pytest -x -vvv --internal --runslow` like so:\n\n```bash\npre-commit-hooks$ pytest -x -vvv --internal --runslow\n============================= test session starts ==============================\nplatform darwin -- Python 3.7.6, pytest-5.4.1, py-1.7.0, pluggy-0.13.1 -- /usr/local/opt/python/bin/python3.7\ncachedir: .pytest_cache\nrootdir: /Users/pre-commit-hooks/code/pre-commit-hooks, inifile: pytest.ini\ncollected 27 items\n\ntests/test_hooks.py::TestHooks::test_run[run_cmd_class clang-format on /Users/pre-commit-hooks/code/pre-commit-hooks/tests/files/ok.c] PASSED [  3%]\ntests/test_hooks.py::TestHooks::test_run[run_cmd_class clang-tidy on /Users/pre-commit-hooks/code/pre-commit-hooks/tests/files/ok.c] PASSED [  7%]\n...\n\n============================= 51 passed in 61.86s ==============================\n```\n\n## Additional Resources\n\n### clang-format\n\n* [Official Docs](https://clang.llvm.org/docs/ClangFormatStyleOptions.html)\n* [clang-format\n  Guide](https://embeddedartistry.com/blog/2017/10/23/creating-and-enforcing-a-coding-standard-with-clang-format) -\n  a good overview and a great place to get started\n* [clang-format Configurator](https://zed0.co.uk/clang-format-configurator/) - Website to\n  interactively design your config while\n* [clang-format Options Explorer](https://clangformat.com/) - Website to interactively\n  understand various options\n\n### clang-tidy\n\n* [Official Docs](https://clang.llvm.org/extra/clang-tidy/)\n* [clang-tidy\n  guide](https://www.kdab.com/clang-tidy-part-1-modernize-source-code-using-c11c14/) -\n  Good place to start\n* [Example\n  usage](https://github.com/KratosMultiphysics/Kratos/wiki/How-to-use-Clang-Tidy-to-automatically-correct-code) -\n  Explanation of how to use clang-tidy by the creators of Kratos\n* [Add your own\n  checks](https://devblogs.microsoft.com/cppblog/exploring-clang-tooling-part-1-extending-clang-tidy/) -\n  Function names must be _awesome_!\n\n### oclint\n\n* [Official Docs](http://oclint.org/)\n* [Fastlane Integration](https://docs.fastlane.tools/actions/oclint/)\n\n## License\n\nApache 2.0", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pocc/pre-commit-hooks", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "CLinters", "package_url": "https://pypi.org/project/CLinters/", "platform": "", "project_url": "https://pypi.org/project/CLinters/", "project_urls": {"Homepage": "https://github.com/pocc/pre-commit-hooks"}, "release_url": "https://pypi.org/project/CLinters/1.0.0/", "requires_dist": null, "requires_python": ">=3.6.1", "summary": "pre-commit hooks for C linters", "version": "1.0.0"}, "last_serial": 6861425, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8c6ae26bcebdf9811d0ff6f2089d8aa8", "sha256": "42a5419c8927ac4ae6654273ad3ad790f20e8d8256fbea6dfc4e7b12d9e873e1"}, "downloads": -1, "filename": "CLinters-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8c6ae26bcebdf9811d0ff6f2089d8aa8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 7074, "upload_time": "2020-03-22T19:08:21", "upload_time_iso_8601": "2020-03-22T19:08:21.450656Z", "url": "https://files.pythonhosted.org/packages/ce/21/797f27c28783db44d6c4c5b706ebde58d408cef5b2248bde4a594596362b/CLinters-1.0.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c6ae26bcebdf9811d0ff6f2089d8aa8", "sha256": "42a5419c8927ac4ae6654273ad3ad790f20e8d8256fbea6dfc4e7b12d9e873e1"}, "downloads": -1, "filename": "CLinters-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8c6ae26bcebdf9811d0ff6f2089d8aa8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 7074, "upload_time": "2020-03-22T19:08:21", "upload_time_iso_8601": "2020-03-22T19:08:21.450656Z", "url": "https://files.pythonhosted.org/packages/ce/21/797f27c28783db44d6c4c5b706ebde58d408cef5b2248bde4a594596362b/CLinters-1.0.0.tar.gz"}]}