{"info": {"author": "Kelvin Gakuo", "author_email": "kelvingakuo@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5"], "description": "# fycharts\nA fully-fledged installable python package for extracting **top 200** and **viral 50** charts off of [spotifycharts.com](http://spotifycharts.com)\n\nIn a nutshell, the unofficial Spotify Charts API\n\n## CONTENTS\n1. [Installation](#in)\n2. [Sample](#sample)\n3. [Functions for data extraction and the parameters they accept](#funcs)\n4. [Format for data returned](#format)\n5. [Supported country codes](#codes)\n6. [A note about dates](#dates)\n6. [Turbo-boosted recipe](#turbo)\n7. [Utilities you may find useful](#utils)\n8. [Changelog](#change)\n\n## INSPIRATION\nThis was built to fill the gap left when Spotify deprecated their official Spotify charts API. It arose as a needed crawler for the Spotify data analysis and machine learning project done [here](https://kelvingakuo.github.io)\n\n## INSTALLATION <a id=\"in\"></a>\n```bash\npip install fycharts\n```\n\n## SAMPLE USAGE <a id=\"sample\"></a>\nSay you want to extract top 200 daily charts for all time, all regions\n```python\nmyCrawler.py\n\nfrom fycharts.SpotifyCharts import SpotifyCharts\n\napi = SpotifyCharts()\napi.top200Daily(output_file = \"top_200_daily.csv\")\n```\n\nOr you want viral 50 daily charts for January 2019 in the us and globally, to be written into a csv file and a SQLLite db *Note: This works only for fycharts>=3.0.0*\n```python\nmyCrawler.py\n\nfrom fycharts.SpotifyCharts import SpotifyCharts\nimport sqlalchemy\n\napi = SpotifyCharts()\nconnector = sqlalchemy.create_engine(\"sqlite:///spotifycharts.db\", echo=False)\napi.viral50Daily(output_file = \"viral_50_daily.csv\", output_db = connector, webhook = \"https://mywebhookssite.com/post/\", start = \"2019-01-01\", end = \"2019-01-31\", region = [\"us\", \"global\"])\n```\n\nRun your program. \n```bash\npython myCrawler.py\n```\nWatch the terminal for helpful information.\n\n## FUNCTIONS AND PARAMETERS <a id= \"funcs\"></a>\nFor all the charts provided by Spotify, four functions exist:\n1. top200Weekly()\n2. top200Daily()\n3. viral50Weekly()\n4. viral50Daily()\n\nAll four functions take the following parameters:\n#### Ouput options\n1. output_file - CSV file to write the data to (Compulsory for fycharts<3.0.0)\n2. output_db - A connector object for any database supported by SQLAlchemy (only available in fycharts>=3.0.0)\n3. webhook - A http endpoint (or list of endpoints) to POST the extracted data to (only available in fycharts>=3.0.0)\n\n    *Create webhooks for testing here: https://webhook.site/ or here: https://beeceptor.com/*\n\n#### Parameters (Optional)\n1. start - Start date of range of interest as string with the format YYYY-MM-DD\n2. end - End date of range of interest as string with the format YYYY-MM-DD\n3. region - Region (or a list of regions e.g. [\"global\", \"us\", \"fr\"]) of interest, as a country abbreviation code. \"global\" is also valid\n\n    *Refer to [SUPPORTED COUNTRY CODES SO FAR](#codes) below for supported regions.*\n\nIf not specified, data is extracted for all dates, all regions\n\n## DATA RETURNED  <a id= \"format\"></a>\nThe data extracted from spotifycharts.com is written to the output with the following fields:\n1. Position - The song's position during that week or day\n2. Track Name - Name of the song\n3. Artist - Name of artist\n4. Streams - Number of streams for that week or day. **Only applicable to top 200 charts**\n5. date - This varies\n\n    For instance if you set 'start = 2020-01-03' & 'end = 2020-01-15'\n\n    For daily charts -> YYYY-MM-DD e.g 2020-01-03\n\n    For top 200 weekly chart -> week_start_date--week_end_date e.g 2020-01-03--2020-01-10\n\n    For viral 50 weekly chart -> week_start_date--week_start_date e.g 2020-01-03--2020-01-03\n\n6. region - Region of the chart as a code\n\n7. spotify_id - Spotify track id ('id' for fycharts < 3.0.0)\n\n**Note:** When writing to a db, fycharts is setup to write:\n    1. viral50Daily to the table ```viral_50_daily```\n    2. viral50Weekly to the table ```viral_50_weekly```\n    3. top200Daily to the table ```top_200_daily```\n    4. top200Weekly to the table ```top_200_weekly```\n\n**Note:** To REST endpoints, a JSON payload is sent with the structure:\n```bash\n{\n  \"chart\": \"top_200_daily\",\n  \"data\": [\n    {\n      \"Position\": 1,\n      \"Track Name\": \"The Box\",\n      \"Artist\": \"Roddy Ricch\",\n      \"Streams\": 2278155,\n      \"date\": \"2020-01-03\",\n      \"region\": \"us\",\n      \"spotify_id\": \"0nbXyq5TXYPCO7pr3N8S4I\"\n    },\n    {\n      \"Position\": 2,\n      \"Track Name\": \"Yummy\",\n      \"Artist\": \"Justin Bieber\",\n      \"Streams\": 1863557,\n      \"date\": \"2020-01-03\",\n      \"region\": \"us\",\n      \"spotify_id\": \"41L3O37CECZt3N7ziG2z7l\"\n    },\n  ]\n}\n```\n\n## SUPPORTED COUNTRY CODES SO FAR  <a id= \"codes\"></a>\n|   |   |   |   |   |   |   |   |\n|---|---|---|---|---|---|---|---|\n|ad |ca |dk |gr |is |mx |ph |sv |\n|ar |ch |do |gt |it |my |pl |th |\n|at |cl |ec |hk |jp |ni |pt |tr |\n|au |co |ee |hn |lt |nl |py |tw |\n|be |cr |es |hu |lu |no |ro |us |\n|bg |cy |fi |id |lv |nz |se |uy |\n|bo |cz |fr |ie |mc |pa |sg |vn |\n|br |de |gb |il |mt |pe |sk |global|\n\n## ABOUT DATES <a id = \"dates\"></a>\nThe start date of the range you\"re interested in, is very specific for each chart. If you enter an invalid date, you'll be prompted with a list of suggestions and given a choice whether to use fycharts' suggestion or your own.\n\n*If using multithreading to run multiple functions, the prompt comes up but is non-blocking. You can still respond*\n\n## A RECIPE ON STERIODS  <a id= \"turbo\"></a>\n\nTo fully take advantage of multithreading, you may write your code as follows:\n\n```python\nmyCrawler.py\n\nimport sqlalchemy\nimport threading\n\nfrom fycharts.SpotifyCharts import SpotifyCharts\n\ndef main():\n    api = SpotifyCharts()\n    connector = sqlalchemy.create_engine(\"sqlite:///spotifycharts.db\", echo=False)\n    hooks = [\"https://mywebhookssite.com/post/\", \"http://asecondsite.net/post\"]\n\n    a_thread = threading.Thread(target = api.top200Daily, kwargs = {\"output_file\": \"top_200_daily.csv\", \"output_db\": connector, \"webhook\": hooks, \"start\": \"2020-01-03\", \"end\":\"2020-01-12\", \"region\": [\"global\", \"us\"]})\n    b_thread = threading.Thread(target = api.top200Weekly, kwargs = {\"output_file\": \"top_200_weekly.csv\", \"output_db\": connector, \"webhook\": hooks, \"start\": \"2020-01-03\", \"end\":\"2020-01-12\", \"region\": [\"global\", \"us\"]})\n    c_thread = threading.Thread(target = api.viral50Daily, kwargs = {\"output_file\": \"viral_50_daily.csv\", \"output_db\": connector, \"webhook\": hooks, \"start\": \"2020-01-03\", \"end\":\"2020-01-12\", \"region\": [\"global\", \"us\"]})\n    d_thread = threading.Thread(target = api.viral50Weekly, kwargs = {\"output_file\": \"viral_50_weekly.csv\", \"output_db\": connector, \"webhook\": hooks, \"start\": \"2020-01-02\", \"end\":\"2020-01-12\", \"region\": [\"global\", \"us\"]})\n\n    a_thread.start()\n    b_thread.start()\n    c_thread.start()\n    d_thread.start()\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n**TAKE NOTE:** **DO NOT** SHARE THE OUTPUT DESTINATION ACROSS THE FUNCTIONS i.e. each function should be writing to its own set of outputs\n\n## UTILITY FUNCTIONS <a id = \"utils\"></a>\nThis library exposes some functions that you may find of use:\n\n1. validDates(start, end, desired)\n\nThis function prints a list of valid dates for the kind of data you are interested in.\n\n#### Parameters\n1. start - Start date of range of interest as string with the format YYYY-MM-DD\n2. end - End date of range of interest as string with the format YYYY-MM-DD\n3. desired - A string specifying the kind of data desired\n\n        Accepts:\n            * top200Daily\n            * top200Weekly\n            * viral50Daily\n            * viral50Weekly\n\n## CHANGELOG <a id = \"change\"></a>\n*This changelog follows a loose version of semantic versioning*\n### 3.1.0 4th Feb 2020\n**Added**\n* Identifying info to payload POSTed to webhook\n\n### 3.0.0 4th Feb 2020\n**Added**\n* Accepting a DB connector to write data to db\n* Accepting a list of REST endpoints to post data to  \n\n**Fixed**\n* A bug in file validation\n\n**Changed**\n* The Spotify track id column name from 'id' to 'spotify_id'\n\n### 2.0.1 31st Jan 2020\n**Fixed**\n* A bug in setting the column titles when multiple regions are requested\n\n### 2.0.0 30th Jan 2020\n**Added**\n* Multithreading to increase crawling speeds\n* Custom exceptions\n* A utility method to print valid dates\n* Accepting a list of regions\n\n**Improved**\n* The documentation\n\n### 1.2.0 5th April 2019\n* Improved date verification\n\n### 1.0.1 5th Jan 2019\n* Renamed the project to fycharts\n\n### 1.0.0 26th Dec 2018\n* Released project named \"Spotify-Charts-API\"\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kelvingakuo/fycharts", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fycharts", "package_url": "https://pypi.org/project/fycharts/", "platform": "", "project_url": "https://pypi.org/project/fycharts/", "project_urls": {"Homepage": "https://github.com/kelvingakuo/fycharts"}, "release_url": "https://pypi.org/project/fycharts/3.1.0/", "requires_dist": ["pandas", "requests"], "requires_python": "", "summary": "A fully-fledged installable python package for extracting top 200 and viral 50 charts off of spotifycharts.com", "version": "3.1.0"}, "last_serial": 6568317, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "b3e9f45ad588bac081320a7fa617d4f1", "sha256": "2773f41cd7c94b928da21aafd9953ac66bfb318f6f3a9d7565281ccc964801bd"}, "downloads": -1, "filename": "fycharts-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b3e9f45ad588bac081320a7fa617d4f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8408, "upload_time": "2019-01-05T00:17:17", "upload_time_iso_8601": "2019-01-05T00:17:17.465772Z", "url": "https://files.pythonhosted.org/packages/a6/82/94980b505f84d4970fe7d6770a4d47822e2f197812d420fc3b9b0032381e/fycharts-1.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d36e7f8ba88df34e9c4c948040d3f7df", "sha256": "7aed1339e9aae7780579329389d8da226e11afd38ac263ee6615537ade34f979"}, "downloads": -1, "filename": "fycharts-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d36e7f8ba88df34e9c4c948040d3f7df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6148, "upload_time": "2019-01-05T00:17:20", "upload_time_iso_8601": "2019-01-05T00:17:20.038781Z", "url": "https://files.pythonhosted.org/packages/f7/dc/e3ec7e8e9454c24d0731a30447552c0f5d3129bf6557e69929b1de6f2387/fycharts-1.0.1.tar.gz"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "bb0fce142488d64ebfa48c72e916b554", "sha256": "63f3125969575ce1be775bd9b7b3fa866efbda8838ba565163106f8e5a3d64a3"}, "downloads": -1, "filename": "fycharts-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bb0fce142488d64ebfa48c72e916b554", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8379, "upload_time": "2019-01-05T00:27:15", "upload_time_iso_8601": "2019-01-05T00:27:15.838817Z", "url": "https://files.pythonhosted.org/packages/6c/fa/dd0a811c4b24ab1c0cec03c709a5a8e750cb8f38919d6633c68a8d11882d/fycharts-1.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f3d98c65d8b5194c6fa17191b2dae7d2", "sha256": "24915c10835636118da57dc270ce313d9009a54f0664c68010eeee5191e4e51d"}, "downloads": -1, "filename": "fycharts-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f3d98c65d8b5194c6fa17191b2dae7d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6098, "upload_time": "2019-01-05T00:27:17", "upload_time_iso_8601": "2019-01-05T00:27:17.314444Z", "url": "https://files.pythonhosted.org/packages/05/b4/da5dab3f2f3f7cbbe82c571519de28245dacf8c702c5887a3193d4cf94ad/fycharts-1.1.1.tar.gz"}], "1.2.0": [{"comment_text": "", "digests": {"md5": "de6fe759ef7e3a1817db4800f4ca602a", "sha256": "635291f2ed014fae80b7e8c75ff07fdfae9f59fe038a0749f3475f2afa0d2994"}, "downloads": -1, "filename": "fycharts-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "de6fe759ef7e3a1817db4800f4ca602a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7445, "upload_time": "2019-04-04T22:41:00", "upload_time_iso_8601": "2019-04-04T22:41:00.893888Z", "url": "https://files.pythonhosted.org/packages/85/c6/afbc47f4c0b6da96e2f8969e174f01686a2eeaa6e0d95c2148364935d3b9/fycharts-1.2.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8a621597acec240c9dbc85432298ef0a", "sha256": "6680fad43ba6311471b4ce97f455e93114ae6e01cd997919b0f9552ef4b2f286"}, "downloads": -1, "filename": "fycharts-1.2.0.tar.gz", "has_sig": false, "md5_digest": "8a621597acec240c9dbc85432298ef0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6080, "upload_time": "2019-04-04T22:41:02", "upload_time_iso_8601": "2019-04-04T22:41:02.632135Z", "url": "https://files.pythonhosted.org/packages/11/25/ce2b3dbba3c409807025ca5fb69dd28218037b7189b32b907f0093a72c50/fycharts-1.2.0.tar.gz"}], "2.0.0": [{"comment_text": "", "digests": {"md5": "ac00d48e08dc079ff402f7d9e58b689b", "sha256": "579e343fb75357b3885978aeb0b5c48bcb3d1e15bdb37ba8205a6e7dcae68669"}, "downloads": -1, "filename": "fycharts-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ac00d48e08dc079ff402f7d9e58b689b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8991, "upload_time": "2020-01-30T13:13:36", "upload_time_iso_8601": "2020-01-30T13:13:36.034789Z", "url": "https://files.pythonhosted.org/packages/14/f2/e346eae71a0dbb52a598d94015196fdd635ebef6bfcd1ab23af3fd1e384e/fycharts-2.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "8a5dc3a7e2f398dd234a37917a917b3c", "sha256": "c728d382d3f5bc35df611f61ddc2e67ba091d998110b5e0015c833b408f1b92d"}, "downloads": -1, "filename": "fycharts-2.0.0.tar.gz", "has_sig": false, "md5_digest": "8a5dc3a7e2f398dd234a37917a917b3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7744, "upload_time": "2020-01-30T13:13:37", "upload_time_iso_8601": "2020-01-30T13:13:37.732963Z", "url": "https://files.pythonhosted.org/packages/6f/5f/86d1cb1f203a7d6d14493b2b9f480f36859e6b39e9cf3218bac0f4237454/fycharts-2.0.0.tar.gz"}], "2.0.1": [{"comment_text": "", "digests": {"md5": "78f4d117d197d2f9569627f55fcf56bf", "sha256": "7e0d9fca78e74cc2976735997ca48867605a6b2870b7a7104cc05426af9afb3e"}, "downloads": -1, "filename": "fycharts-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "78f4d117d197d2f9569627f55fcf56bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9328, "upload_time": "2020-01-31T11:46:32", "upload_time_iso_8601": "2020-01-31T11:46:32.688069Z", "url": "https://files.pythonhosted.org/packages/b7/05/45eac7cec798ff85f96ece30ae4cb6bddbd30cacb34591e7a2a526ef4ee8/fycharts-2.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f02076d942ce2f598920c897b020aa51", "sha256": "4ffe9b6c70072d67e3189adfeea0407c3d24aa5a07e3bdf6978015bc80517f83"}, "downloads": -1, "filename": "fycharts-2.0.1.tar.gz", "has_sig": false, "md5_digest": "f02076d942ce2f598920c897b020aa51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8257, "upload_time": "2020-01-31T11:46:34", "upload_time_iso_8601": "2020-01-31T11:46:34.716575Z", "url": "https://files.pythonhosted.org/packages/96/cc/1cef99db9e9193df022ebe58142f5c359e74c2c7377a3a087bad917d1763/fycharts-2.0.1.tar.gz"}], "3.0.0": [{"comment_text": "", "digests": {"md5": "fa573ead9bda4334093d010883d22fae", "sha256": "c41805f5d9f8a9dfe1b8e9fb232957d5847dbdb257ece922bff5ef8cbf0f6819"}, "downloads": -1, "filename": "fycharts-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fa573ead9bda4334093d010883d22fae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11128, "upload_time": "2020-02-04T12:02:38", "upload_time_iso_8601": "2020-02-04T12:02:38.046006Z", "url": "https://files.pythonhosted.org/packages/7c/dc/2bf43eb4aabce0d540072d9df10c98cbd5216cd4760b22875c1004e0cd25/fycharts-3.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7e37a1b7d512984916430ebae247a8de", "sha256": "097cfa460670154aeeca9443e7422be5e4a48b432d8ae15a9cc287618eb086f0"}, "downloads": -1, "filename": "fycharts-3.0.0.tar.gz", "has_sig": false, "md5_digest": "7e37a1b7d512984916430ebae247a8de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13068, "upload_time": "2020-02-04T12:02:40", "upload_time_iso_8601": "2020-02-04T12:02:40.178661Z", "url": "https://files.pythonhosted.org/packages/2f/4b/41edf386efb184cfeab8f647809831599128e1936c99fe5e42093a3f130a/fycharts-3.0.0.tar.gz"}], "3.1.0": [{"comment_text": "", "digests": {"md5": "502f3f683a564b1673f3af0a6b1b2834", "sha256": "ba68486a1d3dc0d145157aa068554aab26c9fd2cf97a7a9bc041e02cd91af36e"}, "downloads": -1, "filename": "fycharts-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "502f3f683a564b1673f3af0a6b1b2834", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11370, "upload_time": "2020-02-04T12:25:19", "upload_time_iso_8601": "2020-02-04T12:25:19.261281Z", "url": "https://files.pythonhosted.org/packages/c0/40/6fe548eae6f35fbbb7965080d849fc17ca1e5ab559af67b9c837a71acbd5/fycharts-3.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f956ccbbe3195d69d85949091d3055fa", "sha256": "a6286396cf66fb83ffa15a6c3c01c5aac0271bfa05d0f19121873ee3be6b9227"}, "downloads": -1, "filename": "fycharts-3.1.0.tar.gz", "has_sig": false, "md5_digest": "f956ccbbe3195d69d85949091d3055fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13532, "upload_time": "2020-02-04T12:25:21", "upload_time_iso_8601": "2020-02-04T12:25:21.751424Z", "url": "https://files.pythonhosted.org/packages/84/f5/68e732ba5ff4d842a350d57a48a8ba9645bbff193aa13bdda2729e0ba53f/fycharts-3.1.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "502f3f683a564b1673f3af0a6b1b2834", "sha256": "ba68486a1d3dc0d145157aa068554aab26c9fd2cf97a7a9bc041e02cd91af36e"}, "downloads": -1, "filename": "fycharts-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "502f3f683a564b1673f3af0a6b1b2834", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11370, "upload_time": "2020-02-04T12:25:19", "upload_time_iso_8601": "2020-02-04T12:25:19.261281Z", "url": "https://files.pythonhosted.org/packages/c0/40/6fe548eae6f35fbbb7965080d849fc17ca1e5ab559af67b9c837a71acbd5/fycharts-3.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "f956ccbbe3195d69d85949091d3055fa", "sha256": "a6286396cf66fb83ffa15a6c3c01c5aac0271bfa05d0f19121873ee3be6b9227"}, "downloads": -1, "filename": "fycharts-3.1.0.tar.gz", "has_sig": false, "md5_digest": "f956ccbbe3195d69d85949091d3055fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13532, "upload_time": "2020-02-04T12:25:21", "upload_time_iso_8601": "2020-02-04T12:25:21.751424Z", "url": "https://files.pythonhosted.org/packages/84/f5/68e732ba5ff4d842a350d57a48a8ba9645bbff193aa13bdda2729e0ba53f/fycharts-3.1.0.tar.gz"}]}