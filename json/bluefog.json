{"info": {"author": "Bicheng Ying", "author_email": "bichengying@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython"], "description": "Bluefog\n=======\n\n.. image:: https://travis-ci.com/ybc1991/bluefog.svg?token=me5bQ3zp2qcSz5D3yVNC&branch=master\n    :target: https://travis-ci.com/ybc1991/bluefog\n\n.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :target: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :alt: License\n\n.. image:: https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\n    :target: https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\n    \nOverview\n--------\nBluefog is a distributed training framework for Tensorflow and PyTorch\nbased on diffusion/consensus-type algorithm. The goal of Bluefog is to make\ndistributed machine learning fast and fault-tolerant in the heterogeneous\nenvironment and users are easy to set up and run experiments without worrying\ntoo many low-level details.\n\nREPOSITORY IS STILL A WORK IN PROGRESS.\n\nPhilosophy\n----------\nThere are already lots of well-designed and production-level distributed\nmachine learning algorithms, libraries, frameworks, or tools.\nWhat is the main different between Bluefog project and others?  \nWhy can Bluefog outperform others? \nWhich scenario is more suitable for Bluefog?\n\n\nBefore answering above questions, *Demystifying \nParallel and Distributed Deep Learning* [1]_ paper has a great conclusion:\n\n::\n\n The world of deep learning is brimming with concurrency. Even if an aspect\n is sequential, its consistency requirements can be reduced, due to the\n robustness of nonlinear optimization, to increase concurrency while \n still attaining reasonable accuracy, if no better.\n \nThe main philosophy is we can sacrifice the consistency or sequential requirement\nto gain faster trainning speed, more robust system, and more friendly to the\nheterogeneous enviroment.\n\n[Add more technique details here.]\n\nTo comparison with the other algorithms/libraries, we need to demystifying several\nimportance perspectives viewing a distributed machine learning library first.\n\nThe Spectrum of Distributed Machine Learning Algorithm\n------------------------------------------------------\nCurrent machine learning problem is always associated with\nthe large scale of dataset and highly complexity of the model.\nThis provides us lots of ascpects and options to design the algorithm \nso that the multi-core CPU/GPU in the distributed computation system\ncan be fully exploited. We list the most relevant and important \nconsiderations here.\n\n* From the aspect of data and modeling concurrency:\n\n  1. Data Parallelism\n  2. Model Parallelism\n  3. Pipeline Parallelism\n\n  The above three techniques are not exclusive to each other. For example,\n  tensorflow allow users can utilize all three techniques at the same time.\n  The Bluefog project focused on Data Parallelism.\n  One reason, of course, is the base algorithm derived based on the assumption\n  that the dataset is distributed over different nodes. But, more importantly, \n  among these three techniques, data parallelism is the most popular approaches\n  thanks to its excellent scalability and flexibility on almost any model.\n\n* From the aspect of communication architecture:\n\n  1. Parameter Server(PS) ---- (Distributed but still centralized)\n\n    - Sharded PS \n    - Hierarchical PS\n\n  2. Peer-to-Peer ----- (Distributed but also decentralized)\n\n    - Ring-AllReduce\n    - Neighbor-Collective\n\n  Apparently, Bluefog project belongs to the peer-to-peer model. Multiple nodes/machines\n  will distributedly and no centralized node will gather all the informations.\n\n* From the aspect of parameter consistency:\n\n  In the distributed learning system, parameter consistency means the similarity\n  between the parameter stored in the local machine. We list five typical \n  algorithms from strongest consistency to weakest consistency.\n\n  1. Model Replication\n  2. Delayed Updating (like asynchronous algorithm.)\n  3. Model Averaging\n  4. Ensemble Learning\n\n  Bluefog project focused on the asynchronous training through the\n  diffusion/consensus algorithm, which is one kind of\n  model averaging algorithms. The parameter learned in different nodes \n  through the Bluefog algorithm are slightly different. But unlike \n  ensemble learning, all nodes are highly similar.\n\n* From the aspect of updating synchronization:\n\n  1. Synchronous updating\n  2. Stale-Synchronous updating\n  3. Asynchronous updating\n  \n  Typically, the more \"asynchronous\" updating, the faster on the training. However, \n  we will loss the parameter consistency.\n\n* From the aspect of information fusion:\n\n  1. Averaging over the gradients\n  2. Averaging over the parameter/iterates\n  3. Averaging over the dual variable\n  \n  Most strong consistency algorithm is averaging over the gradients. However, Bluefog project\n  is averaging over the parameter directly. One advantage of averaging over the parameter is\n  the resilient on the noise or error. Also, noticing these three methods are not exclusive. \n\n* From the aspect of reducing communication cost:\n\n  1. Temporal compression (Fine- vs Coarse-Grained Fusion)\n  2. Spatial compression (Sparse/Sliced tensors)\n  3. Btye compression (Quantization)\n  4. Neighbor compression (Selecting less neighbors)\n\n  We don't have any implementation to support it yet. We do plan to support it in\n  the future.\n  \n.. [1] Demystifying Parallel and Distributed Deep Learning: An In-Depth Concurrency Analysis (https://arxiv.org/abs/1802.09941)", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ybc1991/bluefog", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Bluefog", "package_url": "https://pypi.org/project/Bluefog/", "platform": "", "project_url": "https://pypi.org/project/Bluefog/", "project_urls": {"Homepage": "https://github.com/ybc1991/bluefog"}, "release_url": "https://pypi.org/project/Bluefog/0.1.0.post1/", "requires_dist": null, "requires_python": ">=3.7.0", "summary": "A distributed training framework for diffusion or consensus-type algorithm.", "version": "0.1.0.post1"}, "last_serial": 7051560, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "95add8482a7a9831bddaeed00b34957a", "sha256": "f99225e8e401fed3027e65a44d1f61decc58a6f139e4761d8a38b94b3052fa29"}, "downloads": -1, "filename": "Bluefog-0.1.0.tar.gz", "has_sig": false, "md5_digest": "95add8482a7a9831bddaeed00b34957a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 5231883, "upload_time": "2020-04-18T23:35:58", "upload_time_iso_8601": "2020-04-18T23:35:58.983749Z", "url": "https://files.pythonhosted.org/packages/10/82/8cfe1ff483544aee440a1765cb64e54ea883fb626ae434587d032571b4b1/Bluefog-0.1.0.tar.gz"}], "0.1.0.post1": []}, "urls": []}