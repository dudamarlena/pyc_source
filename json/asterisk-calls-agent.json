{"info": {"author": "Odooist", "author_email": "odooist@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "####################\nAsterisk Calls Agent\n####################\n.. image:: https://apps.odoo.com/apps/modules/13.0/asterisk_calls/icon.png\n\n.. contents:: \n\nIntroduction\n++++++++++++\n\nAsterisk Calls Agent is a middleware software used as a bridge between `Odoo <http://odoo.com>`_ \nand `Asterisk IP-PBX <http://asterisk.org>`_.\n\nUsing Asterisk Calls client makes Odoo a phone applications platform because all development is \ndone on Odoo level so every Odoo developer can quickly and easily integrate Asterisk\nfeatures with any Odoo module.\n\nThe Agent architecture is a callback based where every callback is an Odoo method.\n\nIn many cases the Agent will just work as is without any modification like it works in\n`Asterisk Calls <https://apps.odoo.com/apps/modules/13.0/asterisk_calls/>`_ application.\n\nDependencies\n++++++++++++\nAsterisk Calls Agent is based on `Nameko <http://nameko.io>`_ - a wonderful microservice framework for Python.\n\nAsterisk Calls Agent is very small because Odoo related operations come from `nameko-odoo <http://github.com/litnimax/nameko-odoo>`_ library\nand Asterisk related operations come from `nameko-ami <https://github.com/litnimax/nameko-ami>`_ library.\n\nThough Asterisk Calls Agent was developed as a base for commercial module `Asterisk Calls <https://apps.odoo.com/apps/modules/13.0/asterisk_calls/>`_ it was \ndecided to make the Agent open and free under LGPL license so that all the Odoo world can benefit from it.\n\nInstallation\n++++++++++++\nCurrently before installing this package your should manually installed the required dependencies:\n\n.. code:: bash\n\n  pip3 install -r requirements.txt\n\nAfter that you can install it from PyPi:\n\n.. code:: bash\n\n  pip3 install asterisk-calls-agent\n\nConfiguration\n+++++++++++++\nAgent\n-----\nNameko style config is used. See `config.yml <config.yml>`_ for a default config.\n\n#TODO: Describe configuration options here.\n\nAsterisk\n--------\n\nSee `Asterisk Calls module <https://apps.odoo.com/apps/modules/13.0/asterisk_calls#doc>`_ documentation on preparing Asterisk for the Agent.\n\nRunning Asterisk Calls Agent\n++++++++++++++++++++++++++++\nYou can start the Agent manually from any place like this:\n\n.. code:: bash\n\n  nameko run --config=config.yml asterisk_calls_client\n\nYou can also create a systemd service file ``asterisk_calls_agent.service`` and \ninstall it for starting the Agent at boot (adjust it for your environment).\n\n.. code:: bash\n\n  [Unit]\n  Description=Asterisk Calls Odoo connector\n  After=network.target\n\n  [Service]\n  Environment=\"ASTERISK_SYSTEM_NAME=asterisk\"\n  User=root\n  ExecStart=/usr/local/bin/nameko run --config=/etc/asterisk_calls_agent.yml asterisk_calls_agent\n  Restart=always\n  RemainAfterExit=no\n  StandardOutput=syslog\n  StandardError=syslog\n  SyslogIdentifier=ASTERISK_CALLS_AGENT\n\n  [Install]\n  WantedBy=multi-user.target\n\n**And activate it**:\n\n.. code:: bash\n\n  systemctl daemon-reload\n  systemctl enable asterisk_calls_agent\n  systemctl start asterisk_calls_agent\n  systemctl status asterisk_calls_agent\n\nSupport & Contributing\n++++++++++++++++++++++\nFeel free to create new tickets on issues and ideas.\n\nDevelopment\n+++++++++++\nAs was said in the very beginning development is done on Odoo layer.\n\nThe Agent will forward to Odoo specified \n`AMI messages <https://wiki.asterisk.org/wiki/display/AST/Asterisk+13+AMI+Events>`_. \n\nIn order to know which AMI messages to forward your should define your \nEVENT_MAP in config file.\n\nLet's imagine that we want to collect call details records. In this case you need to\nmap ``Cdr`` event to Odoo's model and method which will receive it. \nAdd the following section to ``config.yml``:\n\n.. code:: yaml\n\n  EVENT_MAP:\n    - name: Cdr\n      type: AMI\n      model: asterisk_calls.call\n      method: create_cdr\n\n\nNow in Odoo application named ``asterisk_calls`` (just an example) create a method \n``create_cdr`` with the following contents:\n\n.. code:: python\n\n    class Call(models.Model):\n      _name = 'asterisk_calls.call'\n      _description = 'Call Log'\n      \n      src = fields.Char()\n      dst = fields.Char()\n      channel = fields.Char()\n      # The rest fields are ommited...\n  \n      @api.model\n      def create_cdr(self, event):\n          get = event['headers'].get\n          data = {\n              'accountcode': get('AccountCode'),\n              'src': get('Source'),\n              'dst': get('Destination'),\n              'dcontext': get('DestinationContext'),\n              'clid': get('CallerID'),\n              'channel': get('Channel'),\n              'dstchannel': get('DestinationChannel'),\n              'lastapp': get('LastApplication'),\n              'lastdata': get('LastData'),\n              'started': get('StartTime') or False,\n              'answered': get('AnswerTime') or False,\n              'ended': get('EndTime') or False,\n              'duration': get('Duration'),\n              'billsec': get('BillableSeconds'),\n              'disposition': get('Disposition'),\n              'amaflags': get('AMAFlags'),\n              'uniqueid': get('UniqueID') or get('Uniqueid'),\n              'linkedid': get('Linkedid'),\n              'userfield': get('UserField'),\n              'system_name': get('SystemName'),\n          }\n          self.create(data)\n          return True\n\nThat's it.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/odooist/asterisk-calls-agent", "keywords": "", "license": "LGPL-3", "maintainer": "", "maintainer_email": "", "name": "asterisk-calls-agent", "package_url": "https://pypi.org/project/asterisk-calls-agent/", "platform": "", "project_url": "https://pypi.org/project/asterisk-calls-agent/", "project_urls": {"Homepage": "https://gitlab.com/odooist/asterisk-calls-agent"}, "release_url": "https://pypi.org/project/asterisk-calls-agent/1.8/", "requires_dist": null, "requires_python": "", "summary": "Asterisk connector for Asterisk Calls Odoo application.", "version": "1.8"}, "last_serial": 6576676, "releases": {"1.6": [{"comment_text": "", "digests": {"md5": "19fa1608825a03e0e99b8f71ade706f5", "sha256": "9856f073b86a80b7dd6355f373df7c30e72ba795ce2fc5977410387badde7d2e"}, "downloads": -1, "filename": "asterisk-calls-agent-1.6.tar.gz", "has_sig": false, "md5_digest": "19fa1608825a03e0e99b8f71ade706f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17339, "upload_time": "2020-01-28T10:56:48", "upload_time_iso_8601": "2020-01-28T10:56:48.827972Z", "url": "https://files.pythonhosted.org/packages/ee/0a/ab9048298e98a0c7910c52824e0b8ec4277d270daa09de2285c0ec592fc8/asterisk-calls-agent-1.6.tar.gz"}], "1.7": [{"comment_text": "", "digests": {"md5": "2aaa5a4aeed63f6828af8d93d9916d61", "sha256": "f5fea41143cf99d310e73558e574c278e8a3eb56ae9f6a182a104269e808fcf6"}, "downloads": -1, "filename": "asterisk-calls-agent-1.7.tar.gz", "has_sig": false, "md5_digest": "2aaa5a4aeed63f6828af8d93d9916d61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17355, "upload_time": "2020-01-29T09:28:32", "upload_time_iso_8601": "2020-01-29T09:28:32.957301Z", "url": "https://files.pythonhosted.org/packages/8c/da/d0fbf46ad333d3762e69ca34f9949c86dec80c2e658233d80cd43f16f87d/asterisk-calls-agent-1.7.tar.gz"}], "1.8": [{"comment_text": "", "digests": {"md5": "f8302fee0cd50a0cdc1d47253ba3b043", "sha256": "e7cee89591339c605b2c5b8301544ed078dc1e247ea11d40922270f0f5fb08ce"}, "downloads": -1, "filename": "asterisk-calls-agent-1.8.tar.gz", "has_sig": false, "md5_digest": "f8302fee0cd50a0cdc1d47253ba3b043", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19522, "upload_time": "2020-02-05T15:52:26", "upload_time_iso_8601": "2020-02-05T15:52:26.202143Z", "url": "https://files.pythonhosted.org/packages/b8/d0/aa3e3fc5f53693479f9c4eb7afa95eb9045158591d2ee30fc37ff79ef8a0/asterisk-calls-agent-1.8.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8302fee0cd50a0cdc1d47253ba3b043", "sha256": "e7cee89591339c605b2c5b8301544ed078dc1e247ea11d40922270f0f5fb08ce"}, "downloads": -1, "filename": "asterisk-calls-agent-1.8.tar.gz", "has_sig": false, "md5_digest": "f8302fee0cd50a0cdc1d47253ba3b043", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19522, "upload_time": "2020-02-05T15:52:26", "upload_time_iso_8601": "2020-02-05T15:52:26.202143Z", "url": "https://files.pythonhosted.org/packages/b8/d0/aa3e3fc5f53693479f9c4eb7afa95eb9045158591d2ee30fc37ff79ef8a0/asterisk-calls-agent-1.8.tar.gz"}]}