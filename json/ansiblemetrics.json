{"info": {"author": "Stefano Dalla Palma", "author_email": "stefano.dallapalma0@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://travis-ci.com/radon-h2020/radon-ansible-metrics.svg?token=5ombixLKK1T1YhFSj8KX&branch=master)](https://travis-ci.com/radon-h2020/radon-ansible-metrics)\n\n\n# ansible-metrics\nA python module that provides metrics for Ansible scripts.\n\nThis repository contains 50 metrics currently implemented in Python 3.6. Although, there are 5 more implicit metrics that can be derived by combining the implemented ones.\nSee the [documentation](https://github.com/radon-h2020/radon-ansible-metrics/blob/master/docs/README.md) for further details.\n\n\n## How to install and import modules locally\n\nFirst, install the necessary dependencies with the command:\n\n```pip3 install -r requirements.txt```\n\nYou can install the package locally from the project root folder with the command:\n\n```pip3 install . ```\n\nOnce the installation succeed you can import the module in your python application with:\n\n```python\nimport ansiblemetrics\n```\n\nFor example, if you want to call the metric LOC, execute the following instructions:\n\n```python\nfrom ansiblemetrics.general.loc import LOC\nfrom io import StringIO\n\nmetric = LOC(StringIO('key:value'))\nprint(metric.count())\n```\n\nThe general pattern is \n\n```python\nfrom ansiblemetrics.<general|playbook|tasks>.<Metric> import <Metric>\nmetric = <Metric>('StringIO object representing a playbook')\nprint(metric.count())\n```\n\n## How to use\n\nOnce installed, typing ```ansible-metrics``` will return information on usage:\n\n```\nusage: ansible-metrics [-h] [-v] file\n\nExtract metrics from Ansible scripts. If no optional parameter is passed, the\ntool computes only the general metrics which are suitable for both playbooks\nand task files.\n\npositional arguments:\n  file           input file path (playbook or tasks file)\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --version  show program's version number and exit\n\n ```\n\n\n## How to contribute\n\nFirst, clone the repository as following:\n\n```git clone https://github.com/radon-h2020/radon-ansible-metrics.git```\n\nThen, move to the folder location and run\n\n```pip3 install requirements.txt```\n\nto install dependencies.\n\nExecute ```pytest tests``` to run the test suite.\n\n\n### Step 1: Create a new branch to work on the metric\nCreate a branch on purpose to work on the metric implementation and testing.\n\nMove to project folder and run the following commands:\n* ```git checkout master``` to move to branch ```master```\n* ```git pull``` to be sure to be updated with the latest version\n* ```git checkout -b <metric_name>``` to create and move to the new working branch. The name is up to you, but it would be usefull to call it with the metric's name or acronym\n\n\n### Step 2: Document metric\nIn [docs/README.md](https://github.com/radon-h2020/radon-ansible-metrics/tree/master/docs/README.md) insert the name of the metrics and link it to its documentation in the folder [docs/playbook](https://github.com/radon-h2020/radon-ansible-metrics/tree/master/docs/playbook).\n\nName the documentation file as the extended metric name, in uppercase with underscores (\\_) in places of blank spaces. For example, if the metric is *\"Number of loops\"* then create the file *docs/playbook/NUMBER_OF_LOOPS.md*.\n\nThe documentation should contain at least the following elements:\n\n* a **unique name**;\n* an **acronym** (3/4 letters) to be used to identify it and to name the script implementing it;\n* a **description** that explains its purpose;\n* the **input** parameters;\n* the **output** type;\n* an **example of a playbook** for the problem at hand and the expected result of the metric wrt that playbook. The playbook of the example must be included in the test case testing the metric, along with further examples, if needed.\n* an **example on how to call** the method that implement the metric. \n\n\n### Step 3: Create Test Case\n* Create a test case in the tests folder and name it with *tests_<metric_acronym>_<method_to_test>.py*. For example, to test the method ```count()``` of metric \"Number of loops (NLP)\", the script path would results like *tests/playbook/test_nlp_count.py*.\n\n<TODO: To insert example of test case>\n\n### Step 4: Implement metric\nCreate a script in folder *ansiblemetrics/playbook/* and name it as *<metric_acronym>.py*. \n\nDefine the method to test with an empty body.\n\nRun ```pytest``` to make sure test cases implemented at Step 3 **fail**.\n\nImplement the body of the function.\n\nRun ```pytest``` again to make sure test cases implemented at Step 3 **pass**.\n\n\n### Step 4: Commit your work\nMove to project folder and run the following commands:\n* ```git add <modified_file>``` for each modified files, ```git add .``` to add all modified files (be carefull that the right files are added whn using this option)\n* ```git status``` is helpful to check what files have been changed/added/deleted.\n* Once ready, run ```git commit -m \"A message describing the work done\"```\n* Finally, ```git push origin/<branch_name>``` and open a pull request if you desire to integrate your changes to the master branch.\n\n\nFor further information about the implemented classes, please refer to the [wiki](https://github.com/radon-h2020/radon-ansible-metrics/wiki).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/radon-h2020/radon-ansible-metrics/archive/0.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/radon-h2020/radon-ansible-metrics", "keywords": "", "license": "", "maintainer": "Stefano Dalla Palma", "maintainer_email": "", "name": "ansiblemetrics", "package_url": "https://pypi.org/project/ansiblemetrics/", "platform": "", "project_url": "https://pypi.org/project/ansiblemetrics/", "project_urls": {"Download": "https://github.com/radon-h2020/radon-ansible-metrics/archive/0.0.1.tar.gz", "Homepage": "https://github.com/radon-h2020/radon-ansible-metrics"}, "release_url": "https://pypi.org/project/ansiblemetrics/0.1/", "requires_dist": null, "requires_python": "", "summary": "A module to measure metrics on Ansible scripts", "version": "0.1"}, "last_serial": 6669741, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1aa6ef3b0de6c44dd85572feb741fd3d", "sha256": "b4dc6f26affd648dbb2e1ec9e997ab48d54e92318203672c43ec76091208ff4a"}, "downloads": -1, "filename": "ansiblemetrics-0.1.tar.gz", "has_sig": false, "md5_digest": "1aa6ef3b0de6c44dd85572feb741fd3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29962, "upload_time": "2020-02-20T18:00:11", "upload_time_iso_8601": "2020-02-20T18:00:11.927512Z", "url": "https://files.pythonhosted.org/packages/14/2f/0aa1332d587cd5c2715b59509e1366e9cd5f82288f0fcc7f2e64fafe7185/ansiblemetrics-0.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "1aa6ef3b0de6c44dd85572feb741fd3d", "sha256": "b4dc6f26affd648dbb2e1ec9e997ab48d54e92318203672c43ec76091208ff4a"}, "downloads": -1, "filename": "ansiblemetrics-0.1.tar.gz", "has_sig": false, "md5_digest": "1aa6ef3b0de6c44dd85572feb741fd3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29962, "upload_time": "2020-02-20T18:00:11", "upload_time_iso_8601": "2020-02-20T18:00:11.927512Z", "url": "https://files.pythonhosted.org/packages/14/2f/0aa1332d587cd5c2715b59509e1366e9cd5f82288f0fcc7f2e64fafe7185/ansiblemetrics-0.1.tar.gz"}]}