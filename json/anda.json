{"info": {"author": "Vojtech Kase", "author_email": "vojtech.kase@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# anda\n\nThis is a Python package to collecting, manipulation and visualizing ancient Mediterranean data. It focus on their temporal, textual and spatial elements.\n\nIt is structured into several gradually evolving parts, mainly `gr`, `concs`, `textnet`, and `imda`\n\n### gr\n\nThis module is dedicated to preprocessing of ancient Greek textual data. It contains functions for lemmatization, posttagging and translation. It relies heavely on Morhesus Dictionary.\n\nOn the top is the function `get_lemmatized_sentences(string)`.\n\n(1) `get_lemmatized_sentences(string, all_lemmata=False, filter_by_postag=None, involve_unknown=False)`:  it receives a raw Greek text of any kind and extent as its input  Such input is  processed by a series of subsequent functions embedded within each other, which might be also used independently\n\n(1) `get_sentences()` splits the string into sentences by common sentence separators.\n\n(2) `lemmatize_string(sentence)`  first calls `tokenize_string()`, which makes a basic cleaning and stopwords filtering for the sentence, and returns a list of words. Subsequently, each word from the tokenized sentence is sent either to `return_first_lemma()` or to `return_all_unique_lemmata()`, on the basis of the value of the parameter `all_lemmata=` (set to `False` by default). \n\n(4) `return_all_unique_lemmata()`goes to the `morpheus_dict` values and returns all unique lemmata.\n\n(5) Parameter `filter_by_postag=` (default `None`) enables to sub-select  chosen word types from the tokens, on the basis of first character in the tag \"p\" . Thus, to choose only  nouns, adjectives, and verbs, you can set  `filter_by_postag=[\"n\", \"a\", \"v\"].`\n\nNext to the lemmatization, there is also a series of functions for translations, like `return_all_unique_translations(word, filter_by_postag=None, involve_unknown=False)`, useful for any wordform, and `lemma_translator(word)`, where we already have a lemma.\n\nAs a next step, I will put these functions into a package. Perhaps some of my functions could also be implemented into the cltk package. Hopefully I will soon update this post with a link to a repo containing its code and refs.\n\n### concs\n\nThis module contains functions for working\n\n### textnet\n\nThis module contains functions for generating, analyzing and visualizing word co-occurrence networks. It has been designed especially for working with textual data in ancient Greek. \n\n### imda\n\nThis module will serve for importing various ancient Mediterranean resources. Most of them will be imported directly from open third-party online resources. However, some of them have been preprocessed as part of the SDAM project.\n\nThe ideal is that it will work like this:\n\n```\nimda.list_datasets()\n>>> ['roman_provinces_117', 'EDH', 'roman_cities_hanson', 'orbis_network']\n```\n\nAnd:\n\n```python\nrp = imda.import_dataset(\"roman_provinces_117\", \"gdf\")\ntype(rp)\n>>>geopandas.geodataframe\n```\n\n### Versions history\n\n* 0.0.1 - initial installation\n*\u00a00.0.2 - requirements in gr\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sdam-au/anda", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "anda", "package_url": "https://pypi.org/project/anda/", "platform": "", "project_url": "https://pypi.org/project/anda/", "project_urls": {"Homepage": "https://github.com/sdam-au/anda"}, "release_url": "https://pypi.org/project/anda/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package collecting various functions to work with ancient Mediterranean datasets (textual, spatial, etc.)", "version": "0.0.2"}, "last_serial": 6549717, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dde8b4283dc5c371374d17859a46c483", "sha256": "4db51d5d9b54af1f8ae40591a9dd6e7b56c87a7d383d8a3b8eb870b67369cd8c"}, "downloads": -1, "filename": "anda-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dde8b4283dc5c371374d17859a46c483", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12183, "upload_time": "2020-01-31T14:24:04", "upload_time_iso_8601": "2020-01-31T14:24:04.247206Z", "url": "https://files.pythonhosted.org/packages/90/b2/0b01478d9117bd87c708a5cfdae7302215a583afe3389a80555bed3bb7fd/anda-0.0.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "2b1bc42c4b1281094dab11d7f1e77f28", "sha256": "6a95af9b7659631b0ebb8d75df6669555ea7035c9ddab6c6a49eac521c6af136"}, "downloads": -1, "filename": "anda-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2b1bc42c4b1281094dab11d7f1e77f28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10556, "upload_time": "2020-01-31T14:24:06", "upload_time_iso_8601": "2020-01-31T14:24:06.916241Z", "url": "https://files.pythonhosted.org/packages/2c/dd/41e5e9d2a894591f2957a4dec66d1a2d2c1cf97865af7e0817abceceed3d/anda-0.0.1.tar.gz"}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c0c108cdf371ad2b3582c704b243d498", "sha256": "7e86a456eff189f1ce24013b9f5ad21f4094f47bbe2ca198d50a953082fac660"}, "downloads": -1, "filename": "anda-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c0c108cdf371ad2b3582c704b243d498", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12480, "upload_time": "2020-01-31T14:30:30", "upload_time_iso_8601": "2020-01-31T14:30:30.330601Z", "url": "https://files.pythonhosted.org/packages/e4/6b/e4f8a53e9e34dd78bf7a54b7f93d024dfc2265f5a5f74dfd093f2653ae42/anda-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1043df0ac5724d4570c8d0019fad01d2", "sha256": "039ca7222867a3f7b32ae3a745a0ca9bf4259b6e924d963eedae06581c8d215d"}, "downloads": -1, "filename": "anda-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1043df0ac5724d4570c8d0019fad01d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12291, "upload_time": "2020-01-31T14:30:31", "upload_time_iso_8601": "2020-01-31T14:30:31.630324Z", "url": "https://files.pythonhosted.org/packages/7c/ff/39c455116a9fce6322c67425c4c8ed0136c8351c5c4e42841322857501ad/anda-0.0.2.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "c0c108cdf371ad2b3582c704b243d498", "sha256": "7e86a456eff189f1ce24013b9f5ad21f4094f47bbe2ca198d50a953082fac660"}, "downloads": -1, "filename": "anda-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c0c108cdf371ad2b3582c704b243d498", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12480, "upload_time": "2020-01-31T14:30:30", "upload_time_iso_8601": "2020-01-31T14:30:30.330601Z", "url": "https://files.pythonhosted.org/packages/e4/6b/e4f8a53e9e34dd78bf7a54b7f93d024dfc2265f5a5f74dfd093f2653ae42/anda-0.0.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1043df0ac5724d4570c8d0019fad01d2", "sha256": "039ca7222867a3f7b32ae3a745a0ca9bf4259b6e924d963eedae06581c8d215d"}, "downloads": -1, "filename": "anda-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1043df0ac5724d4570c8d0019fad01d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12291, "upload_time": "2020-01-31T14:30:31", "upload_time_iso_8601": "2020-01-31T14:30:31.630324Z", "url": "https://files.pythonhosted.org/packages/7c/ff/39c455116a9fce6322c67425c4c8ed0136c8351c5c4e42841322857501ad/anda-0.0.2.tar.gz"}]}