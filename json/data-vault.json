{"info": {"author": "Michal Krassowski", "author_email": "krassowski.michal+pypi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: IPython", "Framework :: Jupyter", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Database", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: User Interfaces", "Topic :: System :: Archiving", "Topic :: System :: Archiving :: Compression", "Topic :: Utilities"], "description": "IPython data-vault\n==================\n\n|Build Status| |codecov| |MIT License| |Binder| |DOI|\n\nIPython magic for simple, organized, compressed and encrypted storage &\ntransfer of files between notebooks.\n\nBackground and demo\n-------------------\n\nRight tool for a simple job\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``%vault`` magic provides a reproducible caching mechanism for\nvariables exchange between notebooks. The cache is compressed,\npersistent and safe.\n\nDifferently to the builtin ``%store`` magic, the variables are stored in\nplain sight, in a zipped archive, so that they can be easily accessed\nfor manual inspection, or for the use by other tools.\n\nDemonstration by usage:\n~~~~~~~~~~~~~~~~~~~~~~~\n\nLet\u2019s open the vault (it will be created if not here yet):\n\n.. code:: python\n\n   %open_vault -p data/storage.zip\n\nGenerate some dummy dataset:\n\n.. code:: python\n\n   from pandas import DataFrame\n   from random import choice, randint\n   cities = ['London', 'Delhi', 'Tokyo', 'Lagos', 'Warsaw', 'Chongqing']\n   salaries = DataFrame([\n       {'salary': randint(0, 100), 'city': choice(cities)}\n       for i in range(10000)\n   ])\n\nStore variable in a module\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAnd store it in the vault:\n\n.. code:: python\n\n   %vault store salaries in datasets\n\n..\n\n   Stored salaries (None \u2192 40CA7812) at Sunday, 08. Dec 2019 11:58\n\nA short description is printed out (including a CRC32 hashsum and a\ntimestamp) by default, but can be disabled by passing\n``--timestamp False`` to ``%open_vault`` magic. Even more information\nenhancing the reproducibility is `stored in the cell\nmetadata <#metadata-for-storage-operations>`__.\n\nImport variable from a module\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWe can now load the stored DataFrame in another (or the same) notebook:\n\n.. code:: python\n\n   %vault import salaries from datasets\n\n..\n\n   Imported salaries (40CA7812) at Sunday, 08. Dec 2019 12:02\n\nThanks to (optional) `memory optimizations <#memory-optimizations>`__ we\nsaved some RAM (87% as compared to unoptimized ``pd.read_csv()``\nresult). To track how many MB were saved use ``--report_memory_gain``\nsetting which will display memory optimization results below imports,\nfor example:\n\n   Reduced memory usage by 87.28%, from 0.79 MB to 0.10 MB.\n\nImport variable as something else\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf we already have the salaries variable, we can use ``as``, just like\nin the Python import system.\n\n.. code:: python\n\n   %vault import salaries from datasets as salaries_dataset\n\nStore or import with a custom function\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   from pandas import read_csv\n   to_csv = lambda df: df.to_csv()\n   %vault store salaries in datasets with to_csv as salaries_csv\n   %vault import salaries_csv from datasets with read_csv\n\nImport an arbitrary file\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n   from pandas import read_excel\n   %vault import 'cars.xlsx' as cars_dataset with read_excel\n\nMore examples are available in the\n`Examples.ipynb <https://github.com/krassowski/data-vault/blob/master/Example.ipynb>`__\nnotebook, which can be `run interactively in the\nbrowser <https://mybinder.org/v2/gh/krassowski/data-vault/master?filepath=Example.ipynb>`__.\n\nGoals\n~~~~~\n\nSyntax: - easy to understand in plain language (avoid abbreviations when\npossible), - while intuitive for Python developers, - \u2026but sufficiently\ndifferent so that it would not be mistaken with Python constructs - for\nexample, we could have ``%from x import y``, but this looks very like\nnormal Python; having ``%vault from x import y`` makes it sufficiently\neasy to distinguish - star imports are better avoided, thus not\nsupported - as imports may be confusing if there is more than one\n\nReproducibility: - promote good reproducible and traceable organization\nof files: - promote storage in plain text files and the use of DataFrame\n> pickling is often an easy solution, but it can cause hurtful problems\nin prototyping phase (which is what notebooks are often used for): if\nyou pickle you objects, then change the class definition and attempt to\nload your data again you are likely to fail severly; this is why the\nplain text files are the default option in this package (but pickling is\nsupported too!). - print out a short hashsum and human-readable datetime\n(always in UTC), - while providing even more details in cell metadata -\nallow to trace instances of the code being modified post execution\n\nSecurity:\n\n-  think of it as a tool to minimize the damage in case of accidental\n   ``git add`` of data files (even if those should have been elsewhere\n   and ``.gitignore``\\ d in the first place),\n-  or, as an additional layer of security for already anonymized data,\n-  but this tool is **not** aimed at facilitating the storage of highly\n   sensitive data\n-  you have to set a password, or explicitly set ``--secure False`` to\n   get rid of a security warning\n\nFeatures overview\n-----------------\n\nMetadata for storage operations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEach operation will print out the timestamp and the CRC32 short checksum\nof the files involved. The timestamp of the operation is reported in the\nUTC timezone in a human-readable format.\n\nThis can be disabled by setting ``-t False`` or ``--timestamp False``,\nhowever for the sake of reproducibility it is encouraged to keep this\ninformation visible in the notebook.\n\nMore precise information including the SHA256 cheksum (with a lower\nprobability of collisions), and a full timestamp (to detect potential\nrace condition errors in file write operations) are embedded in the\nmetadata of the cell. You can disable this by setting \u2013metadata False.\n\nThe exact command line is also stored in the metadata, so that if you\naccidentally modify the code cell without re-running the code, the\nchange can be tracked down.\n\nStorage\n~~~~~~~\n\nIn order to enforce interoperability plain text files are used for\npandas DataFrame and Series objects. Other variables are stores as\npickle objects. The location of the storage archive on the disk defaults\nto ``storage.zip`` in the current directory, and can changed using\n``%open_vault`` magic:\n\n.. code:: python\n\n   %open_vault -p custom_storage.zip\n\nEncryption\n^^^^^^^^^^\n\n   **The encryption is not intended as a high security mechanism, but\n   only as an additional layer of protection for already anonymized\n   data.**\n\nThe password to encrypt the storage archive is retrieved from the\nenvironmental variable, using a name provided in ``encryption_variable``\nduring the setup.\n\n.. code:: python\n\n   %open_vault -e ENV_STORAGE_KEY\n\nMemory optimizations\n~~~~~~~~~~~~~~~~~~~~\n\nPandas DataFrames are by-default memory optimized by conversion of\nstring variables to (ordered) categorical columns (pandas equivalent of\nR\u2019s factors/levels). Each string column will be tested for the memory\nimprovement and the optimization will be only applied if it does reduce\nthe memory usage.\n\nWhy ZIP and not HDF?\n~~~~~~~~~~~~~~~~~~~~\n\nThe storage archive is conceptually similar to Hierarchical Data Format\n(e.g.\u00a0HDF5) object - it contains: - a hierarchy of files, and - a\nmetadata files\n\nI believe that HDF may be the future, but this future is not here yet -\nnumerous issues with the packages handling the HDF files, as well as low\nperformance and compression rate prompted me to stay with a simple zip\nformat now.\n\nZIP is a popular file format with known features and limitations - files\ncan be password encrypted, while the file list is always accessible.\nThis is okay given that the code of the project is assumed to be public,\nand only the files in the storage area are assumed to be of encrypted,\nincreasing the security in case of unauthorized access.\n\nAs the limitations of the ZIP encryption are assumed to be a common\nknowledge, I hope that managing expectations of the level of security\noffered by this package will be easier.\n\nInstallation and requirements\n-----------------------------\n\nPre-requirements: - Python 3.6+ - 7zip (16.02+) (see\n`below <#installing-7-zip>`__ for Ubuntu and Mac commands)\n\nInstallation:\n~~~~~~~~~~~~~\n\n.. code:: bash\n\n   pip3 install data_vault\n\nInstalling 7-zip\n~~~~~~~~~~~~~~~~\n\nInstallers for Windows can be downloaded from the `7-zip\nwebsite <https://www.7-zip.org/download.html>`__.\n\nFor other systems you can use packages from the default repositories:\n\nUbuntu\n^^^^^^\n\n.. code:: bash\n\n   sudo apt-get install -y p7zip-full\n\nMac\n^^^\n\n.. code:: bash\n\n   brew install p7zip\n\n.. |Build Status| image:: https://travis-ci.org/krassowski/data-vault.svg?branch=master\n   :target: https://travis-ci.org/krassowski/data-vault\n.. |codecov| image:: https://codecov.io/gh/krassowski/data-vault/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/krassowski/data-vault\n.. |MIT License| image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat\n   :target: http://choosealicense.com/licenses/mit/\n.. |Binder| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/krassowski/data-vault/master?filepath=Example.ipynb\n.. |DOI| image:: https://zenodo.org/badge/226589892.svg\n   :target: https://zenodo.org/badge/latestdoi/226589892", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/krassowski/data-vault", "keywords": "jupyter,jupyterlab,notebook,ipython,storage,store,magic,vault", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "data-vault", "package_url": "https://pypi.org/project/data-vault/", "platform": "", "project_url": "https://pypi.org/project/data-vault/", "project_urls": {"Homepage": "https://github.com/krassowski/data-vault"}, "release_url": "https://pypi.org/project/data-vault/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "IPython magic for simple, organized, compressed and encrypted: storage & transfer of files between notebooks", "version": "0.4.1"}, "last_serial": 6923012, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "861c0ea4d08f76fc2998773a454f1c54", "sha256": "3d35d19367caa5b2b4c5331c22fc118914d4b5cb300ced39a549f6272dcbf315"}, "downloads": -1, "filename": "data_vault-0.1.tar.gz", "has_sig": false, "md5_digest": "861c0ea4d08f76fc2998773a454f1c54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18330, "upload_time": "2019-12-08T18:43:06", "upload_time_iso_8601": "2019-12-08T18:43:06.535616Z", "url": "https://files.pythonhosted.org/packages/fa/dd/636e010d1bd84eeb1a509517d178ffb27debb136ad564f77037b9196df59/data_vault-0.1.tar.gz"}], "0.2": [{"comment_text": "", "digests": {"md5": "8d4e3089e43a09f2ff98ccb22beef94e", "sha256": "375532b13fa78646adb521dd8d4b03652dbb07c38d57cf073826f41ccfc91f5a"}, "downloads": -1, "filename": "data_vault-0.2.tar.gz", "has_sig": false, "md5_digest": "8d4e3089e43a09f2ff98ccb22beef94e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18391, "upload_time": "2019-12-08T20:02:44", "upload_time_iso_8601": "2019-12-08T20:02:44.750439Z", "url": "https://files.pythonhosted.org/packages/d8/0f/47aef0fe837ce74f655b34138f23793805a6279c483c1c4666103c712871/data_vault-0.2.tar.gz"}], "0.3": [{"comment_text": "", "digests": {"md5": "21d28d3f839fc358a041a65bcbef239d", "sha256": "2cfb33d357186c4267d57ae7e02dadcc09a1c079b1bbc1c324f0624e7e118d22"}, "downloads": -1, "filename": "data_vault-0.3.tar.gz", "has_sig": false, "md5_digest": "21d28d3f839fc358a041a65bcbef239d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18672, "upload_time": "2019-12-09T19:26:32", "upload_time_iso_8601": "2019-12-09T19:26:32.563802Z", "url": "https://files.pythonhosted.org/packages/54/81/4fb62a99c93bc17fb62147ca0644e6fafe2974f5488912145c4951c43c81/data_vault-0.3.tar.gz"}], "0.4": [{"comment_text": "", "digests": {"md5": "f4718774bd29b158c4c147dedd6355fd", "sha256": "18421102525a7a010c4165fe5f9396309bf2e27a180d8f8556394b2732665886"}, "downloads": -1, "filename": "data_vault-0.4.tar.gz", "has_sig": false, "md5_digest": "f4718774bd29b158c4c147dedd6355fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18838, "upload_time": "2020-02-04T16:12:32", "upload_time_iso_8601": "2020-02-04T16:12:32.244319Z", "url": "https://files.pythonhosted.org/packages/08/f0/42c3378550011458144409d5e15a57cb945980466e0a7f058a5c91f2f4c1/data_vault-0.4.tar.gz"}], "0.4.1": [{"comment_text": "", "digests": {"md5": "501f38c3917c133b6cc24bfcdcb0757d", "sha256": "4a165d194ceb155388899a0ca8b3ac627afe3c9a0628029102aa3265751e15dc"}, "downloads": -1, "filename": "data_vault-0.4.1.tar.gz", "has_sig": false, "md5_digest": "501f38c3917c133b6cc24bfcdcb0757d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19080, "upload_time": "2020-03-31T20:11:27", "upload_time_iso_8601": "2020-03-31T20:11:27.899980Z", "url": "https://files.pythonhosted.org/packages/52/ca/19eb419a51817fbe4a1d245be653c67b9e8a25672f55781a25dc5f8f4d9c/data_vault-0.4.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "501f38c3917c133b6cc24bfcdcb0757d", "sha256": "4a165d194ceb155388899a0ca8b3ac627afe3c9a0628029102aa3265751e15dc"}, "downloads": -1, "filename": "data_vault-0.4.1.tar.gz", "has_sig": false, "md5_digest": "501f38c3917c133b6cc24bfcdcb0757d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19080, "upload_time": "2020-03-31T20:11:27", "upload_time_iso_8601": "2020-03-31T20:11:27.899980Z", "url": "https://files.pythonhosted.org/packages/52/ca/19eb419a51817fbe4a1d245be653c67b9e8a25672f55781a25dc5f8f4d9c/data_vault-0.4.1.tar.gz"}]}