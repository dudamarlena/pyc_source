{"info": {"author": "Derek Berger", "author_email": "dmberger.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Introduction\n\nA python library for investigating some of the basic / classical elements of\nRandom Matrix Theory, including eigenvalue generation, trimming, unfolding and\ncomputation and plotting of some popular spectral observables.\n\n# Table of Contents\n- [Introduction](#introduction)\n- [Table of Contents](#table-of-contents)\n  - [Notes on Development](#notes-on-development)\n- [Installation](#installation)\n  - [Local Installation Using `venv` (recommended)](#local-installation-using-venv-recommended)\n  - [Global Installation](#global-installation)\n  - [Windows](#windows)\n- [A Brief Tour](#a-brief-tour)\n- [Documentation](#documentation)\n  - [API Overview](#api-overview)\n    - [Main Classes and Methods](#main-classes-and-methods)\n- [Development](#development)\n  - [Installation](#installation-1)\n  - [Testing](#testing)\n- [Limitations](#limitations)\n\n\n\n## Notes on Development\n\nThis libary is still undergoing significant development. The overall API (e.g.\nbasic classes, properties, and methods) will likely remain stable from this\npoint, but function and method arguments are still quite likely to change. I\ncan't provide any guarantees at this point that numerical results will be stable\nfrom version to version.\n\nIn the meantime, please feel free to post issues or ask *any* questions relating\nto the library on [Github](https://github.com/stfxecutables/empyricalRMT/issues).\n\n# Installation\n\nAs always, using a virtual environment is recommended to minimize the chance of\nconflicts. However, you _should_ be okay doing a global `pip install empyricalRMT`\nto try out the library.\n\n\n## Local Installation Using `venv` (recommended)\n\nNavigate to the project that you wish to use empyricalRMT in.\n\n```bash\ncd MyProject\n```\n\nCreate and active the virtual environment. Replace \"env\" with whatever name\nyou prefer.\n\n```bash\npython -m venv env && source env/bin/activate\n```\n\nNow install locally either from pip:\n\n```bash\npip install --upgrade empyricalRMT\n```\n\nor from source:\n\n```bash\ngit clone https://github.com/stfxecutables/empyricalRMT /path/to/your/favourite/location/empyricalRMT\ncd MyProject  #\npip install -e /path/to/your/favourite/location/empyricalRMT\n```\n\nIf using Windows (which I haven't tested this library on), you *should* be able to\ninstall this in whatever manner you usually install libraries from source or pip.\n\n\n## Global Installation\n\nVia pip:\n\n```bash\npip install empyricalRMT\n```\n\nFrom source:\n\n```bash\ngit clone https://github.com/stfxecutables/empyricalRMT\ncd empyricalRMT\npip install -e .\n```\n\nNote that this will install the library \"globally\" if you haven't activated\na virtual environment of some kind.\n\n\n\n## Windows\n\nThe above *should* still all work on Windows, although you may have to follow\n[modified instructions for setting up the *venv*](https://docs.python.org/3/library/venv.html).\n\nIf you run into issues specific to this library that you think might be\nWindows-related, please do report them, but keep in mind I currently can only\ntest on Windows via virtual machine :(\n\n# A Brief Tour\n\nNumerically investigate the extent to which a GOE matrix agrees with theory:\n\n```python\nimport empyricalRMT as rmt\n\nfrom empyricalRMT.construct import generate_eigs\nfrom empyricalRMT.eigenvalues import Eigenvalues\n\n# generate eigenvalues from a 1000x1000 matrix from the Gaussian Orthogonal Ensemble\nvals = generate_eigs(matsize=1000, kind=\"goe\")\neigs = Eigenvalues(eigs)\n\n# verify Wigner's semicircle law:\neigs.plot_distribution()\n```\n![Wigner's Semicircle](readme/semicircle.png)\n\n```python\n# unfold the eigenvalues via Wigner's semi-circle law:\nunfolded = eigs.unfold(smoother=\"goe\")\n# or unfold via polynomial:\nunfolded = eigs.unfold(smoother=\"poly\", degree=7)\n# optionally detrend unfolded vals via Empirical Mode Decomposition:\nunfolded = eigs.unfold(smoother=\"poly\", degree=7, detrend=True)\n\n# plot some classic observables and compare to theory\nensembles = [\"poisson\", \"goe\"]  # theoretically expected curves to plot\nunfolded.plot_nnsd(ensembles=ensembles)  # nearest neighbours spacings\nunfolded.plot_nnnsd(ensembles=[\"goe\"])  # next-nearest neighbours spacings\nunfolded.plot_spectral_rigidity(ensembles=ensembles)\nunfolded.plot_level_variance(ensembles=ensembles)\n```\n![nnsd](readme/nnsd.png)\n![nnnsd](readme/nnnsd.png)\n![rigidity](readme/rigidity.png)\n![variance](readme/variance.png)\n\nVisually inspect / detect a bad unfolding fit:\n\n```python\nfrom empyricalRMT.eigenvalues import Eigenvalues\n\n# generate time series data\nT = np.random.standard_normal([1000, 250])\neigs = Eigenvalues.from_time_series(T, trim_zeros=False)\nunfolded = eigs.unfold(degree=5)\nunfolded.plot_fit()\n```\n\n![bad fit](readme/unfoldfit.png)\n\n\nSample eigenvalues from *large* GOE matrices (provided they can fit in memory) ***fast*** via\n[equivalently distributed tridiagonal matrices](https://dspace.mit.edu/handle/1721.1/115982):\n\n```python\nfrom empyricalRMT.construct import generate_eigs\n\neigs = generate_eigs(matsize=30000, kind=\"goe\", log=True)\n\n\"\"\" Output:\n>>> 15:40:39 (Mar10) -- computing eigenvalues...\n>>> 15:41:05 (Mar10) -- computed eigenvalues.\n\"\"\"\n```\nE.g. under 30 seconds (Processor: 4-core / 8-threads, Intel(R)\nXeon(R) CPU E3-1575M v5 @ 3.00GHz).\n\n\n\n\n# Documentation\n\nThe [source code](https://github.com/stfxecutables/empyricalRMT/tree/master/empyricalRMT)\nis well documented, so be sure to read the documentation comments. If you are\nusing Python interactively (e.g. in a Jupyter notebook or REPL) then these\ncomments are quickly available by calling `help(rmt_object)`. If you are using\na decent IDE or editor with appropriate extensions (e.g. PyCharm, VS Code) you\nshould be able to see the documentation on mouse hover or via your editor shortcuts.\n\nThis README also includes an API overview below, which can be used if you want a\nquick overview of the available features, or if you want to access the\ndocumentation interactively.\n\n## API Overview\n\nThe below should allow easier access to documentation via Python's native `help`\ne.g. via calls like `help(Eigenvalues.trim_report)`. The various functions,\nmethods, and properties below do not represent an exhaustive (or even\nnecessarily up-to-date) list of what is available in the library, and are\nintended simply as an overview for convenience. Full and updated documentation\ncan be found in the source code.\n\n### Main Classes and Methods\n\nClass for working with or extracting raw (e.g. untrimmed, not-yet unfolded)\neigenvalues:\n\n```python\nfrom empyricalRMT.eigenvalues import Eigenvalues\n\nclass Eigenvalues  # subclass of EigVals\n  # Constructors\n  .__init__()\n  .from_correlations()\n  .from_time_series()\n\n  # Properties\n  .values\n  .vals\n  .eigenvalues\n  .eigs\n\n  # Methods\n  .trim_report()\n  .get_best_trimmed()\n  .trim_marchenko_pastur()\n  .trim_manually()\n  .trim_unfold_auto()\n  .trim_interactively()  # Not implemented!\n  .unfold()\n```\n\nUtilities for operating on unfolded eigenvalues:\n\n```python\nfrom empyricalRMT.unfold import Unfolded\n\nclass Unfolded  # subclass of EigVals\n  # Properties\n  .values\n  .vals\n\n  # Methods\n  .spectral_rigidity()\n  .level_variance()\n  .plot_fit()\n  .plot_nnsd()\n  .plot_next_nnsd()\n  .plot_nnsd()\n  .plot_spectral_rigidity()\n  .plot_level_variance()\n  .plot_observables()\n  .evaluate_smoother()\n  .ensemble_compare()  # Under active development. Beware!\n```\n\nMinimal class only returned from trimming functions:\n\n```python\nfrom empyricalRMT.trim import Trimmed\n\nclass Trimmed  # subclass of EigVals\n  # Constructors\n  .__init__()\n\n  # Properties\n  .values\n  .vals\n\n  # Methods\n  .unfold()\n  .unfold_auto()\n```\n\nShared methods for above classes (not intended to be used directly):\n\n```python\nclass EigVals  # methods and properties common to Eigenvalues, Trimmed, Unfolded classes\n  # Properties\n  .original_values\n  .original_eigs\n  .original_eigenvalues\n  .values\n  .vals\n  .steps\n  .spacings\n\n  # Methods\n  .step_function()\n  .plot_sorted()\n  .plot_distribution()\n  .plot_steps()\n  .plot_spacings()\n```\n\nUtilities for summarizing trims and unfoldings:\n\n```python\nfrom empyricalRMT.trim import TrimReport\n\nclass TrimReport\n  # Properties\n  .trim_indices\n  .untrimmed\n  .summary\n  .unfoldings\n\n  # Methods\n  .use_trim_iteration()\n  .evaluate()\n  .best_overall()\n  .unfold_trimmed()\n  .plot_trim_steps()\n  .to_csv()\n```\n\nExpected ensemble curves and/or distribution values:\n\n```python\nfrom empyricalRMT.ensemble import GOE, GUE, GSE, GDE, Poisson\n\nclass Ensemble  # base class for classes: GOE, GUE, GSE, Poisson / GDE\n  # Static Methods\n  .nnsd()\n  .nnnsd()\n  .spectral_rigidity()\n  .level_variance()\n```\n\nFunctions for generating eigenvalues according to various ensembles:\n\n```python\nimport empyricalRMT.construct as rmt\n\nrmt.generate_eigs()\nrmt.goe_unfolded()\nrmt.tracy_widom_eigs()\n```\n\n# Development\n\n## Installation\n\nAssuming you want your `venv` virtual environment to be named \"env\":\n\n```bash\ngit clone https://github.com/stfxecutables/empyricalRMT\ncd empyricalRMT\npython -m venv env\nsource env/bin/activate\npython -m pip install -r requirements-dev.txt\npip install -e .  # to make editable\n```\n\n## Testing\n\nTo run all tests, run:\n\n```bash\npython -m pytest -v\n```\n\nThere are a number of pytest _marks_ labelling different testing aspects.\nBrief descriptions can be found in `pytest.ini`. However, likely most useful\nwill be running:\n\n```bash\npython -m pytest -v -m fast\n```\n\nwhich runs all tests that _shouldn't_ take too long to execute.\n\n# Limitations\n\nThis library was and is being developed on a reasonably decent machine (4 cores\n/ 8 threads, 3.00GHz, 64GB RAM) that is currently running Ubuntu 18.04 LTS. Out\nof convenience, I have used Numba, but I know that this is not the most portable\nsolution available, and may result in some issues.\n\nDefault values for most parameters were chosen because they provided reasonably\naccurate results (e.g. when compared to as predicted by theory) in reasonable\namounts of time on *this machine*. I have tested the library on my old 2015\nMacBook, and the defaults seem *okay*, but it is possible that they may not work\nwell on your machine, especially with regards to memory. I hope to implement\nmethods that can work around memory issues in the future (e.g. using memory\nmaps, dask, and perhaps more sophisticated methods in some cases) but for now,\nthis is a limitation of the library.\n\nAddtionally, RMT results are theoretical, and many results only hold as N\napproaches infinity. In practice, it seems that floating-point precision issues\n(whether in numerical integration, solving of eigenproblems, or in the\nconvergence of some of the stochastic methods used in this library) plus the\nreality of working with finite matrices means that there are significant limits\non the extent to which simulations agree with theory, especially when looking at\nlong-range spectral observables (e.g. spectral rigidity or level number variance\nfor L > 20).\n\nFinally, I am just a dabbler in RMT. I have tried to limit myself to\nimplementing only aspects I feel I understand, but I may have made some basic\nerrors in implementation or understanding at some point. If you notice any\nissues or mistakes, corrections are always warmly welcomed!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/stfxecutables/empyricalRMT", "keywords": "RMT RandomMatrixTheory spectral observables eigenvalues unfolding", "license": "MIT", "maintainer": "Derek Berger", "maintainer_email": "", "name": "empyricalRMT", "package_url": "https://pypi.org/project/empyricalRMT/", "platform": "", "project_url": "https://pypi.org/project/empyricalRMT/", "project_urls": {"Homepage": "https://github.com/stfxecutables/empyricalRMT"}, "release_url": "https://pypi.org/project/empyricalRMT/0.4.0/", "requires_dist": ["numba (==0.48.0)", "typing-extensions (==3.7.4.1)", "colorama (==0.4.1)", "pandas (==0.24.2)", "statsmodels (==0.11.1)", "seaborn (==0.9.0)", "nibabel (==2.4.1)", "pyod (==0.7.4)", "scipy (==1.3.0)", "matplotlib (==3.1.2)", "multiprocess (==0.70.7)", "numpy (==1.16.4)", "progressbar33 (==2.4)", "EMD-signal (==0.2.8)", "scikit-learn (==0.22.2.post1)"], "requires_python": ">=3.5", "summary": "Eigenvalue unfolding and spectral observable computation", "version": "0.4.0"}, "last_serial": 6883885, "releases": {"0.1.dev0": [{"comment_text": "", "digests": {"md5": "bef70680b8155bbfdb565d15d256a9e6", "sha256": "d624cdb6543e03dc56245d55f8f78195ef1e2cfbf23f5128a23396c57901c3d5"}, "downloads": -1, "filename": "empyricalRMT-0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "bef70680b8155bbfdb565d15d256a9e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4768, "upload_time": "2019-08-19T22:27:02", "upload_time_iso_8601": "2019-08-19T22:27:02.035531Z", "url": "https://files.pythonhosted.org/packages/0e/f0/06f14ae266713c853317c2576907a66ee2486a4bca4459dbf55c7496e624/empyricalRMT-0.1.dev0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "db2de0f16dca77d8c1442ea11d2981a6", "sha256": "6d128f2656d9076fe130d29b7cf76e46b4054645df93e2ed8618852fc24a3675"}, "downloads": -1, "filename": "empyricalRMT-0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "db2de0f16dca77d8c1442ea11d2981a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3582, "upload_time": "2019-08-19T22:27:06", "upload_time_iso_8601": "2019-08-19T22:27:06.380727Z", "url": "https://files.pythonhosted.org/packages/e4/b6/db80a87af8c9376fda001feb1a050a318c7fecb1cd86affb64599a74e6e4/empyricalRMT-0.1.dev0.tar.gz"}], "0.2.dev0": [{"comment_text": "", "digests": {"md5": "ed589679e12088769e06a63f1adc5ab0", "sha256": "8ab2c0ae4aa2e6bbfbc8bf9cea5ce551f5a44ef3ea1464cd9eef54b9e02e290f"}, "downloads": -1, "filename": "empyricalRMT-0.2.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "ed589679e12088769e06a63f1adc5ab0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 50875, "upload_time": "2020-03-10T17:24:51", "upload_time_iso_8601": "2020-03-10T17:24:51.041007Z", "url": "https://files.pythonhosted.org/packages/47/07/31f067fb9ea89bf307a9983a5555c3ff719247c0b7bde5427480b628e48d/empyricalRMT-0.2.dev0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "463f5dd7d03ac62b5e99de928640aee4", "sha256": "498d0f8d20cfa53db3c3d9600820a25432b957a69fec07dae3be94b35d941eb0"}, "downloads": -1, "filename": "empyricalRMT-0.2.dev0.tar.gz", "has_sig": false, "md5_digest": "463f5dd7d03ac62b5e99de928640aee4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 45724, "upload_time": "2020-03-10T17:24:53", "upload_time_iso_8601": "2020-03-10T17:24:53.114694Z", "url": "https://files.pythonhosted.org/packages/55/38/b71a8085877909a5aeb7797123a4456be84999fe5023f4e1a5d61732b5cb/empyricalRMT-0.2.dev0.tar.gz"}], "0.2.dev4": [{"comment_text": "", "digests": {"md5": "0ad186b9f3b4303cd7f02d6183478c43", "sha256": "8cf80ea62411cc85ab095887db9a613133585e85803d00e5ee83c0137f1929e1"}, "downloads": -1, "filename": "empyricalRMT-0.2.dev4-py3-none-any.whl", "has_sig": false, "md5_digest": "0ad186b9f3b4303cd7f02d6183478c43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 72170, "upload_time": "2020-03-10T18:05:25", "upload_time_iso_8601": "2020-03-10T18:05:25.318683Z", "url": "https://files.pythonhosted.org/packages/fb/d7/1b8d41a1bf0839bf8274f8fd982b6dee9c1ed3ecbca495c0ed1fb61020e6/empyricalRMT-0.2.dev4-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "549803ae5ed2d813dcb5d5837651b5b3", "sha256": "453459351105b59b48296168e8bafc75e413199cee05fc30ab6eef35d58e456f"}, "downloads": -1, "filename": "empyricalRMT-0.2.dev4.tar.gz", "has_sig": false, "md5_digest": "549803ae5ed2d813dcb5d5837651b5b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 60919, "upload_time": "2020-03-10T18:05:27", "upload_time_iso_8601": "2020-03-10T18:05:27.040976Z", "url": "https://files.pythonhosted.org/packages/ee/60/ddcb1e2f1f90dabdcdf860809901fb5a67ecbc20c8710bcba858372b1ece/empyricalRMT-0.2.dev4.tar.gz"}], "0.3.dev0": [{"comment_text": "", "digests": {"md5": "7d743df43bb4471964aa5b752e500fef", "sha256": "0b0da0b191f681fe3fca859f25b85a70c858e4c5d9ab29bc3453e2a2bc5b8481"}, "downloads": -1, "filename": "empyricalRMT-0.3.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "7d743df43bb4471964aa5b752e500fef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 74301, "upload_time": "2020-03-11T01:20:20", "upload_time_iso_8601": "2020-03-11T01:20:20.706566Z", "url": "https://files.pythonhosted.org/packages/4a/b0/935f3a6fc08fc636c0fe92499eef7ed5912f5bc0ee6196be948a7deb9592/empyricalRMT-0.3.dev0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "5d581e4fe90b7105e4bad5124f37967a", "sha256": "40de835fd99f5ce9fd3c6052403013978231110ea7872a3aea03e3b78ef45c9b"}, "downloads": -1, "filename": "empyricalRMT-0.3.dev0.tar.gz", "has_sig": false, "md5_digest": "5d581e4fe90b7105e4bad5124f37967a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 67331, "upload_time": "2020-03-11T01:20:22", "upload_time_iso_8601": "2020-03-11T01:20:22.509221Z", "url": "https://files.pythonhosted.org/packages/5b/a5/bf4f309ef43a1e56d841ba0e1c8a08d18dc7924ffea587aa5f662e6bf2e9/empyricalRMT-0.3.dev0.tar.gz"}], "0.3.dev1": [{"comment_text": "", "digests": {"md5": "1d507da239fa53e0122ba4fac48434e1", "sha256": "ca17f319ec6e39675eb8c1e66fa7362058ade0eb4e9b932e957f4875e46cdd6a"}, "downloads": -1, "filename": "empyricalRMT-0.3.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "1d507da239fa53e0122ba4fac48434e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 74460, "upload_time": "2020-03-11T01:44:39", "upload_time_iso_8601": "2020-03-11T01:44:39.162942Z", "url": "https://files.pythonhosted.org/packages/90/09/4565c7e664e830be715eceba98ad596b1cb9c3d87fd683f5784eee47145a/empyricalRMT-0.3.dev1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "74f5a42d9232003587d600c8a6c2fde6", "sha256": "0687a511d159b970a029fbc215c8eabe1f6785f9cb8d65a7416abf786168db49"}, "downloads": -1, "filename": "empyricalRMT-0.3.dev1.tar.gz", "has_sig": false, "md5_digest": "74f5a42d9232003587d600c8a6c2fde6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 67749, "upload_time": "2020-03-11T01:44:41", "upload_time_iso_8601": "2020-03-11T01:44:41.402263Z", "url": "https://files.pythonhosted.org/packages/0f/3c/3971500d88302063a77cff62dfff1e9d83d5b754c4c9b0f95d4323511d62/empyricalRMT-0.3.dev1.tar.gz"}], "0.4.0": [{"comment_text": "", "digests": {"md5": "14f3c519dfdb79d543a7d410015f596e", "sha256": "ebc46144b76e5a646dcd4fd7a9b5b165f86686175495f24e8214e1633f8f657c"}, "downloads": -1, "filename": "empyricalRMT-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "14f3c519dfdb79d543a7d410015f596e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 79657, "upload_time": "2020-03-25T19:08:04", "upload_time_iso_8601": "2020-03-25T19:08:04.709359Z", "url": "https://files.pythonhosted.org/packages/7e/d5/16af24029c749c5c0c96579e742fc072b83c14cf8e559fd5bbc089017d23/empyricalRMT-0.4.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "6a5327a8f91bf7f1186c2d2f43d44807", "sha256": "29e3f091058dabf0e01d5fe7bb7a18593bcf594e276e1a9b573ebe4ff1926ab5"}, "downloads": -1, "filename": "empyricalRMT-0.4.0.tar.gz", "has_sig": false, "md5_digest": "6a5327a8f91bf7f1186c2d2f43d44807", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 72337, "upload_time": "2020-03-25T19:08:07", "upload_time_iso_8601": "2020-03-25T19:08:07.371114Z", "url": "https://files.pythonhosted.org/packages/64/d1/9ac4ccb39bef223059fc4e8687bfc323bd5e1ee6648620db44addb38ebdd/empyricalRMT-0.4.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "14f3c519dfdb79d543a7d410015f596e", "sha256": "ebc46144b76e5a646dcd4fd7a9b5b165f86686175495f24e8214e1633f8f657c"}, "downloads": -1, "filename": "empyricalRMT-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "14f3c519dfdb79d543a7d410015f596e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 79657, "upload_time": "2020-03-25T19:08:04", "upload_time_iso_8601": "2020-03-25T19:08:04.709359Z", "url": "https://files.pythonhosted.org/packages/7e/d5/16af24029c749c5c0c96579e742fc072b83c14cf8e559fd5bbc089017d23/empyricalRMT-0.4.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "6a5327a8f91bf7f1186c2d2f43d44807", "sha256": "29e3f091058dabf0e01d5fe7bb7a18593bcf594e276e1a9b573ebe4ff1926ab5"}, "downloads": -1, "filename": "empyricalRMT-0.4.0.tar.gz", "has_sig": false, "md5_digest": "6a5327a8f91bf7f1186c2d2f43d44807", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 72337, "upload_time": "2020-03-25T19:08:07", "upload_time_iso_8601": "2020-03-25T19:08:07.371114Z", "url": "https://files.pythonhosted.org/packages/64/d1/9ac4ccb39bef223059fc4e8687bfc323bd5e1ee6648620db44addb38ebdd/empyricalRMT-0.4.0.tar.gz"}]}