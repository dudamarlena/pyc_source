{"info": {"author": "DataRobot", "author_email": "info@datarobot.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# README\n\nCustom Model Runner\n\n## About\nThe DataRobot Custom Model Runner is a tool that allows you to test python custom models locally. The testing verifies that a custom model can successfully run and make predictions before you upload it to DataRobot. However, this testing is only for development purposes. DataRobot recommends that any custom model you wish to deploy should also be tested in the Custom Model Workshop after uploading it.\n\n## Installation\n\n```pip install datarobot-cmrunner```\n\n## Usage\n\nHelp:  \n```cmrun -help```\n\n### Content of the Model Folder\nThe model folder should contain your model artifacts and any other code needed for cmrun to run your model.\n`cmrun` has built in support for the following libraries; if your model is based on one of these libraries, `cmrun` expects your\nmodel artifact to have a matching file extension\n\n| Library | File Extension | Example |\n| --- | --- | --- |\n| scikit-learn | *.pkl | sklean-regressor.pkl |\n| xgboost | *.pkl | xgboost-regressor.pkl |\n| PyTorch | *.pth | torch-regressor.pth |\n| keras | *.h5 | keras-regressor.h5 |\n\nThis tool makes the following assumption about your serialized model:\n- The data sent to custom model can be used to make predictions without\nadditional pre-processing\n- Regression models return a single floating point per row of prediction data\n- Binary classification models return two floating point values that sum to 1.0 per row of prediction data\n  - The first value is the positive class probability, the second is the negative class probability\n- There is a single pkl/pth/h5 file present\n\nIf these assumptions are incorrect for your model, `cmrun` supports several hooks for custom code.  If needed,\ninclude any necessary hooks in a file called `custom.py` alongside your model artifacts in your model folder:\n- `init() -> None`\n  - Executed once before loading your model\n- `load_model(input_dir: str) -> Any`\n  - `input_dir` is the directory to load serialized models from\n  - If used, this hook must return a non-None value\n  - Can be used to load supported models if your model has multiple artifacts, or for loading models that\n  `cmrun` does not natively support\n- `transform(data: DataFrame, model: Any) -> DataFrame`\n  - `data` is the dataframe given to `cmrun` to make predictions on\n  - `model` is the deserialized model loaded by `cmrun` or by `load_model`, if supplied\n  - Intended to apply transformations to the prediction data before making predictions. This is most useful\n  if `cmrun` supports the model's library, but your model requires additional data processing before it can make predictions\n- `predict(data: DataFrame, model: Any, positive_class_label: Optional[str], negative_class_label: Optional[str], *args: List[Any], **kwargs: Dict[str, Any]) -> DataFrame`\n  - `data` is the dataframe to make predictions against. If `transform` is supplied, `data` will be the transformed data.\n  - `model` is the deserialized model loaded by `cmrun` or by `load_model`, if supplied\n  - `positive_class_label` is the positive class label for a binary classification model, or `None` for regression\n  - `negative_class_label` is the negative class label for a binary classification model, or `None` for regression\n  - This method should return predictions as a dataframe with the following format:\n    - Binary Classification: must have columns for each class label with floating- point class probabilities as values. Each row\n    should sum to 1.0\n    - Regression: must have a single column called `Predictions` with numerical values\n  - This hook is only needed if you would like to use `cmrun` with a framework not natively supported by the tool.\n- `post_process(predictions: DataFrame, model: Any) -> DataFrame`\n  - `predictions` is the dataframe of predictions produced by `cmrun` or by the `predict` hook, if supplied\n  - `model` is the deserialized model loaded by `cmrun` or by `load_model`, if supplied\n  - This method should return predictions as a dataframe with the following format:\n    - Binary Classification: must have columns for each class label with floating- point class probabilities as values. Each row\n    should sum to 1.0\n    - Regression: must have a single column called `Predictions` with numerical values\n  - This method is only needed if your model's output does not match the above expectations\n\n#### Run a custom binary classification model   \nMake batch predictions with a custom binary classification model. Optionally, specify an output file. Otherwise, predictions are returned to the command line:  \n```cmrun  -m ~/custom_model/ --input 10k.csv  --positive-class-label yes --negative-class-label no --output 10k-results.csv --verbose```\n\n#### Run a custom regression model\nMake batch predictions with a custom regression model:  \n```cmrun  -m ~/custom_model/ --input fast-iron.csv --verbose```\n\n#### Run a custom model with a prediction server\nThe CM Runner can run as a prediction server in addition to making batch predictions. To do so, provide a server address argument:  \n```cmrun -m ~/custom model --server localhost:6789```\n\nThe CM Runner prediction server provides the following routes. You may provide the environment variable URL_PREFIX. Note that URLs must end with /.\n\n* A GET URL_PREFIX/ route, which checks if the server is alive.  \nExample: GET http://localhost:6789/\n\n* A POST URL_PREFIX/shutdown/ route, which shuts the server down.  \nExample: POST http://localhost:6789/shutdown/\n\n* A POST URL_PREFIX/predict/ route, which returns predictions on data.  \nExample: POST http://localhost:6789/predict/  \nFor this /predict/ route, provide inference data (for the model to make predictions) as form data with a <key:value> pair, where:  \nkey = X  \nvalue = filename of the CSV that contains the inference data\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://datarobot.com", "keywords": "", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "datarobot-cmrunner", "package_url": "https://pypi.org/project/datarobot-cmrunner/", "platform": "", "project_url": "https://pypi.org/project/datarobot-cmrunner/", "project_urls": {"Homepage": "http://datarobot.com"}, "release_url": "https://pypi.org/project/datarobot-cmrunner/1.0.9/", "requires_dist": ["flask", "numpy", "pandas", "requests", "jinja2", "mlpiper (==2.2.0)", "rpy2 (==3.2.6) ; (python_version >= \"3.6\") and extra == 'r'", "scipy ; extra == 'keras'", "numpy ; extra == 'keras'", "h5py ; extra == 'keras'", "keras ; extra == 'keras'", "tensorflow ; extra == 'keras'", "scikit-learn ; extra == 'scikit-learn'", "scipy ; extra == 'scikit-learn'", "numpy ; extra == 'scikit-learn'", "torch ; extra == 'torch'", "numpy ; extra == 'torch'", "scikit-learn ; extra == 'torch'", "scipy ; extra == 'torch'", "scipy ; extra == 'xgboost'", "numpy ; extra == 'xgboost'", "xgboost ; extra == 'xgboost'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Custom Model Runner", "version": "1.0.9"}, "last_serial": 7035796, "releases": {"1.0.9": [{"comment_text": "", "digests": {"md5": "ed8fd190c5c14bcd69236737613fba56", "sha256": "1a9c0b1d418026d2409f3d9444fe8d3de2f85a2f16f9173adb4b3a9488ef27f0"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed8fd190c5c14bcd69236737613fba56", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 820961, "upload_time": "2020-04-16T21:45:29", "upload_time_iso_8601": "2020-04-16T21:45:29.499720Z", "url": "https://files.pythonhosted.org/packages/81/6a/8949c2f85cddf8a43922472d06a10e15b5f6d9400e9246e3e230f3b704cd/datarobot_cmrunner-1.0.9-py2.py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed8fd190c5c14bcd69236737613fba56", "sha256": "1a9c0b1d418026d2409f3d9444fe8d3de2f85a2f16f9173adb4b3a9488ef27f0"}, "downloads": -1, "filename": "datarobot_cmrunner-1.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed8fd190c5c14bcd69236737613fba56", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 820961, "upload_time": "2020-04-16T21:45:29", "upload_time_iso_8601": "2020-04-16T21:45:29.499720Z", "url": "https://files.pythonhosted.org/packages/81/6a/8949c2f85cddf8a43922472d06a10e15b5f6d9400e9246e3e230f3b704cd/datarobot_cmrunner-1.0.9-py2.py3-none-any.whl"}]}