{"info": {"author": "Naveen.S", "author_email": "naveensagayaselvaraj@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "![Logo](/ctreport_selenium/ctreport_html/resource/logo.png) \n\n# CT Report for Selenium\n\nctreport-selenium is a simple, creative and customizable report for selenium automation testing using Python.\n\n### Installation and Usage\n\n```pip install ctreport-selenium```\n\n### Define Session \n\nFirst, you should define the session. While creating session session_details and report_options can be defined/modified.\n\nIn session_details, you can provide the current test session details\n\n```\nsession_details = {\n            \"owner\": \"Naveen.S\",\n            \"application\": \"MyApp1\",\n            \"application version\": \"V1.04\",\n            \"os\": \"Windows10\",\n            \"browser\": \"Chrome\"\n        }\n```\n\nIn report_options, below properties can be provided\n\n* title (report title)\n* logo (your company logo)\n* show_reference (reference section)\n* zip_if_screenshot (In case, the screenshot is created then you can select this option to create zip file- report+screenshot )\n\n ```\n report_options = {\n            \"title\": \"Test Report\",\n            \"logo\": r\"D:\\MYLOGO.PNG\",\n            \"show_reference\": True,\n            \"zip_if_screenshot\": True\n        }\n ```\n\n**Start the Session**\n\n```\ndriver = webdriver.Chrome(executable_path=r'chromedriver.exe')\nSession.start(test_name=\"Smoke Test - MyApp1\", \n              path=\"D:\\\\reports\",\n              driver=driver, \n              session_details=session_details, \n              report_options=report_options)\n```\n\n\n### Create Test\nFor each test, you can create an object for the Test class. While creating the object for the Test class you can define the below parameters\n\n* Name\n* Id \n* Description\t\n* Priority (Refer below reference section)\n\n```\ntest = Test(\"Search Fund links\", \n             id=4574,\n             description=\"Search by search term- Fund\",\n             priority=Priority.MEDIUM)\n```\n\n### Methods in Session class\n\n|Method|Description|\n|------|-----------|\n|set_driver(driver)|In case of driver is not passes in Session.start() method later you can pass through this method|\n\n### Methods in Test class\n\n|Method|Description|\n|------|-----------|\n|log(self, \\*message)|Method to record the steps for your test in the report <br> ```self.test.log(\"Navigate to search page\")```|\n|error(self, \\*message, exception=None, takescreenshot=False)|Method to record the error message in the report|\n|broken(self, \\*err)|Method to mark the current test as Broken and record the exceptions<br> Broken - Test case stopped due to fatal errors(check the reference section)|\n|skip(self, message)|Method to skip the current test|\n|take_screenshot(self, message=None)|Method to take screenshot|\n|assert_are_equal(self, actual, expected, description=None, onfail_screenshot=False)|Mark the assertion steps and it supports asserting following types <br> *Number* <br> *String* <br> *Boolean* <br> *Dictionary* <br> *List* <br> *Tuple* <br> **Note:** *All assertions are treated as Blocker severity* (check the reference section)|\n|verify_are_equal(self, actual, expected, description=None, severity=Severity.MAJOR, onfail_screenshot=False)|Mark the verification steps and it supports verifing the following types <br> *Number* <br> *String* <br> *Boolean* <br> *Dictionary* <br> *List* <br> *Tuple* <br> (check the reference section)|\n\n\n\n### Finish Test\nEvery test should be finshed before next test start/before Session ends\n```\ntest.finish()\n```\n\n### End Sesion\nSession should be end at end of your script\n```\nSession.end()\n```\n\n## Reference \n\n### Status\n\nStatus: Test status after execution\n\n |Status|Description|\n |------|-----------|\n |Pass |Test case is passed without any verification/assertion/fatal errors|\n |Fail|Test case is failed due to verification/assertion errors|\n |Skip|Test case skipped due to blocker or critical issue in dependencies|\n |Broken|Test case stopped due to fatal errors|\n\n### Priority\n\nPriority: Applies to test case\n\n|Priority|Description|\n|--------|-----------|\n|High|Test case on the most important features of the application|\n|Medium|Test case on features of the application which is next to High priority test cases|\n|Low|Test case on features of the application which is considered to be executed rarely|\n\n### Severity\n\nSeverity: Applies to verification and assertion statements\n\nNote: All assertions are treated as Blocker severity\n\n|Severity|Description|\n|--------|-----------|\n|Blocker|The system or functionality is currently unavailable to continue working on the application because of this incident|\n|Critical|Essential functionality is not functioning and no acceptable workaround|\n|Major|Essential functionality is not functioning unless acceptable workaround is implemented|\n|Minor|Minor inconvenience in the functionality and application remains operational|\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/naveens33/ctreport-selenium/archive/0.1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://naveens33.github.io/ctreport-selenium/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ctreport-selenium", "package_url": "https://pypi.org/project/ctreport-selenium/", "platform": "", "project_url": "https://pypi.org/project/ctreport-selenium/", "project_urls": {"Download": "https://github.com/naveens33/ctreport-selenium/archive/0.1.1.tar.gz", "Homepage": "https://naveens33.github.io/ctreport-selenium/"}, "release_url": "https://pypi.org/project/ctreport-selenium/1.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "ctreport-selenium is a simple, creative and customizable report for selenium automation testing using Python.", "version": "1.1.1"}, "last_serial": 7025219, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "5c10d98baafa09a03367d8a0b23db7ce", "sha256": "9642ad58a0c0f7be357177206c68ef17aced42393964214d3df2296d20fda649"}, "downloads": -1, "filename": "ctreport_selenium-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c10d98baafa09a03367d8a0b23db7ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28365, "upload_time": "2020-04-11T14:20:21", "upload_time_iso_8601": "2020-04-11T14:20:21.664460Z", "url": "https://files.pythonhosted.org/packages/98/02/49b8cc5fa92faddae3ef1e9885bb1068c67f24942cb5802caa281d052af4/ctreport_selenium-1.1.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "994d35bf495329a236903bd14ca8ff6b", "sha256": "6f8a7b9dff368426acd3016ecb855e176a3fcea130f78c2e5006e70d7d5fb4fd"}, "downloads": -1, "filename": "ctreport_selenium-1.1.0.tar.gz", "has_sig": false, "md5_digest": "994d35bf495329a236903bd14ca8ff6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18322, "upload_time": "2020-04-11T14:20:24", "upload_time_iso_8601": "2020-04-11T14:20:24.208147Z", "url": "https://files.pythonhosted.org/packages/26/9f/29649ff7a57623e15b145a5a52e7890eec279d86f05f8adb5465a3b35133/ctreport_selenium-1.1.0.tar.gz"}], "1.1.1": [{"comment_text": "", "digests": {"md5": "3270daf6c98ab1d54d2e2a28f51146ce", "sha256": "4e9b048abea6cb21d09a48d9a62101fac5274523e076951f32d7b26fef48fa27"}, "downloads": -1, "filename": "ctreport_selenium-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3270daf6c98ab1d54d2e2a28f51146ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30012, "upload_time": "2020-04-15T14:58:19", "upload_time_iso_8601": "2020-04-15T14:58:19.825184Z", "url": "https://files.pythonhosted.org/packages/f3/bf/e5df9d5f3970134d1ee3a24f05800131764b6990f865dfb89ca939a763fa/ctreport_selenium-1.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1647469a9bb442d3ef942e97c414a648", "sha256": "221a69e7f1ea5ee632d82b8ad78e0ef14852a8f93249e2c5b3716e86a4f66ea3"}, "downloads": -1, "filename": "ctreport_selenium-1.1.1.tar.gz", "has_sig": false, "md5_digest": "1647469a9bb442d3ef942e97c414a648", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21552, "upload_time": "2020-04-15T14:58:23", "upload_time_iso_8601": "2020-04-15T14:58:23.081379Z", "url": "https://files.pythonhosted.org/packages/4f/a5/e4f0edc6e704557afddf03635901c10c79e58cc8c4b2b3433a48ea54c166/ctreport_selenium-1.1.1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "3270daf6c98ab1d54d2e2a28f51146ce", "sha256": "4e9b048abea6cb21d09a48d9a62101fac5274523e076951f32d7b26fef48fa27"}, "downloads": -1, "filename": "ctreport_selenium-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3270daf6c98ab1d54d2e2a28f51146ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 30012, "upload_time": "2020-04-15T14:58:19", "upload_time_iso_8601": "2020-04-15T14:58:19.825184Z", "url": "https://files.pythonhosted.org/packages/f3/bf/e5df9d5f3970134d1ee3a24f05800131764b6990f865dfb89ca939a763fa/ctreport_selenium-1.1.1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1647469a9bb442d3ef942e97c414a648", "sha256": "221a69e7f1ea5ee632d82b8ad78e0ef14852a8f93249e2c5b3716e86a4f66ea3"}, "downloads": -1, "filename": "ctreport_selenium-1.1.1.tar.gz", "has_sig": false, "md5_digest": "1647469a9bb442d3ef942e97c414a648", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21552, "upload_time": "2020-04-15T14:58:23", "upload_time_iso_8601": "2020-04-15T14:58:23.081379Z", "url": "https://files.pythonhosted.org/packages/4f/a5/e4f0edc6e704557afddf03635901c10c79e58cc8c4b2b3433a48ea54c166/ctreport_selenium-1.1.1.tar.gz"}]}