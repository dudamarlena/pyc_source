{"info": {"author": "Matthew G. Monteleone", "author_email": "mgm@mgm.dev", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "Atlas API\n==========\n\nPython Bindings for the Atlas Public API\n\nThis project intends to create a fairly opinionated set of bindings for the Atlas Public API which makes interacting\nwith Atlas using Python easier. The API makes extensive use of enums and other helper type objects to take some\nof the guess work of administering Atlas clusters with Python.\n\nIn most cases objects will be returned based upon the structure of the json returned but the API Endpoints. These objects\nare defined either in the `specs.py` module or in a module named after the objects themselves (`alerts.py` for example).\n\n\nAll calls to the Atlas API require API credentials, you can configure them in your Atlas project.\n\n\n`Atlas API <https://docs.atlas.mongodb.com/api/>`__\n\n`Configure Atlas API Access <https://docs.atlas.mongodb.com/configure-api-access/>`__\n\n`Current state of the python-atlasapi support <https://github.com/mgmonteleone/python-atlasapi/blob/master/API.rst>`__\n\n\n.. image:: https://img.shields.io/pypi/l/atlasapi.svg\n     :target: https://pypi.org/project/atlasapi/\n\n.. image:: https://img.shields.io/pypi/status/atlasapi.svg\n     :target: https://pypi.org/project/atlasapi/\n\n.. image:: https://img.shields.io/pypi/pyversions/atlasapi.svg\n     :target: https://pypi.org/project/atlasapi/\n\n\nDocumentation\n-------------\n.. image:: https://readthedocs.org/projects/python-atlasapi/badge/?version=latest\n     :target: https://python-atlasapi.readthedocs.io/en/latest/?badge=latest Found at https://python-atlasapi.readthedocs.io/\n\nFound at https://python-atlasapi.readthedocs.io/\n\nAutobuilt on each commit.\n\nInstallation\n------------\n\nThis package is available for Python 3.6+.\n\n.. image:: https://badge.fury.io/py/atlasapi.svg\n     :target: https://pypi.org/project/atlasapi/\n\n\nYou can install the latest released version from pypi.\n\n.. code:: bash\n\n    pip3 install atlasapi\n\n\n\n\nUsage\n-----\n\nGet All Database Users\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n\n    a = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    # Low level Api\n    details = a.DatabaseUsers.get_all_database_users(pageNum=1, itemsPerPage=100)\n\n    # Iterable\n    for user in a.DatabaseUsers.get_all_database_users(iterable=True):\n        print(user[\"username\"])\n\nCreate a Database User\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n    from atlasapi.specs import DatabaseUsersPermissionsSpecs, RoleSpecs\n\n    a = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    p = DatabaseUsersPermissionsSpecs(\"test\", \"password for test user\")\n    p.add_roles(\"test-db\",\n                [RoleSpecs.dbAdmin,\n                RoleSpecs.readWrite])\n    p.add_role(\"other-test-db\", RoleSpecs.readWrite, \"a_collection\")\n\n    details = a.DatabaseUsers.create_a_database_user(p)\n\nUpdate a Database User\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n    from atlasapi.specs import DatabaseUsersUpdatePermissionsSpecs, RoleSpecs\n\n    a = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    # Update roles and password\n    p = DatabaseUsersUpdatePermissionsSpecs(\"password for test user\")\n    p.add_role(\"test-db\", RoleSpecs.read, \"a_collection\")\n\n    details = a.DatabaseUsers.update_a_database_user(\"test\", p)\n\nDelete a Database User\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n\n    a = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    details = a.DatabaseUsers.delete_a_database_user(\"test\")\n\nGet a Single Database User\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n\n    a = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    details = a.DatabaseUser.get_a_single_database_user(\"test\")\n\nProjects\n^^^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n\n    a = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    # Get All Projects\n    for project in a.Projects.get_all_projects(iterable=True):\n        print(project[\"name\"])\n\n    # Get One Project\n    details = a.Projects.get_one_project(\"59a03f423b34b9132757aa0d\")\n\n    # Create a Project\n    details = a.Projects.create_a_project(\"test\", \"599eed989f78f769464d28cc\")\n\nClusters\n^^^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n    from atlasapi.clusters import  AdvancedOptions\n\n    a = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    # Is existing cluster ?\n    a.Clusters.is_existing_cluster(\"cluster-dev\")\n\n    # Get All Clusters\n    for cluster in a.Clusters.get_all_clusters(iterable=True):\n        print(cluster[\"name\"])\n\n    # Get a Single Cluster\n    details = a.Clusters.get_a_single_cluster(\"cluster-dev\")\n\n    # Delete a Cluster (dry run, raise ErrConfirmationRequested)\n    details = a.Clusters.delete_a_cluster(\"cluster-dev\")\n\n    # Delete a Cluster (approved)\n    details = a.Clusters.delete_a_cluster(\"cluster-dev\", areYouSure=True)\n\n    # Create a Simple Replica Set Cluster\n\n    details = a.Clusters.create_basic_rs(name=\"cluster-dev\")\n\n    # Create a cluster\n\n    provider_settings: ProviderSettings = ProviderSettings()\n    regions_config = RegionConfig()\n    replication_specs = ReplicationSpecs(regions_config={provider_settings.region_name: regions_config.__dict__})\n\n    cluster_config = ClusterConfig(name='test2',\n                               providerSettings=provider_settings,\n                               replication_specs=replication_specs)\n\n    output = a.Clusters.create_a_cluster(cluster_config)\n\n\n    # Modify a cluster\n    existing_config = a.Clusters.get_a_single_cluster_as_obj(cluster=TEST_CLUSTER_NAME)\n    out.providerSettings.instance_size_name = InstanceSizeName.M10\n    out.disk_size_gb = 13\n    new_config = a.Clusters.modify_a_cluster('pyAtlasAPIClustersTest', out)\n    pprint(new_config)\n\n    # Modify cluster instance size\n\n    a.Clusters.modify_cluster_instanct_size(cluster='pyAtlasAPIClustersTest',new_cluster_size=InstanceSizeName.M20)\n\n    # Pause(unpause) a cluster\n\n    a.Clusters.pause_cluster(cluster='pyAtlasAPIClustersTest', toggle_if_paused=True)\n\n\n    # Get Advanced Options\n    a.Clusters.get_single_cluster_advanced_options(cluster='pyAtlasAPIClustersTest')\n\n    # Set Advanced Options\n    options = AdvancedOptions(failIndexKeyTooLong=True)\n    self.a.Clusters.modify_cluster_advanced_options(cluster='pyAtlasAPIClustersTest',\n                                                                    advanced_options=options)\n\nAlerts\n^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n    from atlasapi.specs import AlertStatusSpec\n\n    a = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    # Get All Alerts in OPEN status\n    for alert in a.Alerts.get_all_alerts(AlertStatusSpec.OPEN, iterable=True):\n        print(alert[\"id\"])\n\n    # Get an Alert\n    details = a.Alerts.get_an_alert(\"597f221fdf9db113ce1755cd\")\n\n    # Acknowledge an Alert (BROKEN)\n    #  until (now + 6 hours)\n    from datetime import datetime, timezone, timedelta\n    now = datetime.now(timezone.utc)\n    until = now + timedelta(hours=6)\n    details = a.Alerts.acknowledge_an_alert(\"597f221fdf9db113ce1755cd\", until, \"Acknowledge reason\")\n\n    #  forever (BROKEN)\n    details = a.Alerts.acknowledge_an_alert_forever(\"597f221fdf9db113ce1755cd\", \"Acknowledge reason\")\n\n    # Unacknowledge an Alert (BROKEN\n    details = a.Alerts.unacknowledge_an_alert(\"597f221fdf9db113ce1755cd\")\n\n\n\nMetrics (Measurements)\n^^^^^^^^^^^^^^^^^^^^^^\nExamples coming soon.\n\nLogs\n^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from atlasapi.atlas import Atlas\n    from atlasapi.specs import AlertStatusSpec\n\n    atlas = Atlas(\"<user>\",\"<password>\",\"<groupid>\")\n\n    atlas.Hosts.fill_host_list()\n    test_host = atlas.Hosts.host_list[0]\n    print(f'Will get a mongod log for {test_host.hostname}')\n    out = atlas.Hosts.get_loglines_for_host(host_obj=test_host, log_name=AtlasLogNames.MONGODB)\n    for each_line in out:\n        print(each_line.__dict__)\n\n\nWhitelists\n^^^^^^^^^^\nExamples coming soon.\n\nMaintenance Windows\n^^^^^^^^^^^^^^^^^^^\n\nExamples coming soon.\n\n\n\n\n\nError Types\n-----------\n\nAbout ErrAtlasGeneric\n^^^^^^^^^^^^^^^^^^^^^\n\nAll ErrAtlas* Exception class inherit from ErrAtlasGeneric.\n\n.. code:: python\n\n    try:\n        ...\n    except ErrAtlasGeneric as e:\n        c, details = e.getAtlasResponse()\n\n- 'c'\n    HTTP return code (4xx or 5xx for an error, 2xx otherwise)\n- 'details'\n    Response payload\n\nExceptions\n^^^^^^^^^^\n\n- ErrRole\n    A role is not compatible with Atlas\n- ErrPagination\n    An issue occurs during a \"Get All\" function with 'iterable=True'\n- ErrPaginationLimits\n    Out of limit on 'pageNum' or 'itemsPerPage' parameters\n- ErrAtlasBadRequest\n    Something was wrong with the client request.\n- ErrAtlasUnauthorized\n    Authentication is required\n- ErrAtlasForbidden\n    Access to the specified resource is not permitted.\n- ErrAtlasNotFound\n    The requested resource does not exist.\n- ErrAtlasMethodNotAllowed\n    The HTTP method is not supported for the specified resource.\n- ErrAtlasConflict\n    This is typically the response to a request to create or modify a property of an entity that is unique when an existing entity already exists with the same value for that property.\n- ErrAtlasServerErrors\n    Something unexpected went wrong.\n- ErrConfirmationRequested\n    Confirmation requested to execute the call.\n\n\n\nBugs or Issues\n--------------\n\nPlease report bugs, issues or feature requests to `Github\nIssues <https://github.com/mgmonteleone/python-atlasapi/issues>`__\n\nTesting\n-------\n\n`Circle Ci <https://circleci.com/gh/mgmonteleone/python-atlasapi/>`__\n\ndevelop\n\n.. image:: https://circleci.com/gh/mgmonteleone/python-atlasapi/tree/develop.svg?style=svg&circle-token=34ce5f4745b141a0ee643bd212d85359c0594884\n    :target: https://circleci.com/gh/mgmonteleone/python-atlasapi/tree/develop\n\nmaster\n\n.. image:: https://circleci.com/gh/mgmonteleone/python-atlasapi/tree/master.svg?style=svg&circle-token=34ce5f4745b141a0ee643bd212d85359c0594884\n    :target: https://circleci.com/gh/mgmonteleone/python-atlasapi/tree/master\n\n.. image:: https://readthedocs.org/projects/python-atlasapi/badge/?version=latest\n     :target: https://python-atlasapi.readthedocs.io/en/latest/?badge=latest\n       :alt: Documentation Status\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mgmonteleone/python-atlasapi", "keywords": "atlas,mongo,mongodb,cloud,api", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "atlasapi", "package_url": "https://pypi.org/project/atlasapi/", "platform": "", "project_url": "https://pypi.org/project/atlasapi/", "project_urls": {"Homepage": "https://github.com/mgmonteleone/python-atlasapi"}, "release_url": "https://pypi.org/project/atlasapi/0.11.0/", "requires_dist": ["requests", "python-dateutil", "isodate", "future", "pytz", "coolname", "nose"], "requires_python": ">=3.6", "summary": "Expose MongoDB Atlas Cloud provider APIs", "version": "0.11.0"}, "last_serial": 6578082, "releases": {"0.10.2": [{"comment_text": "", "digests": {"md5": "ccba4f2e5b6de1abc2f857ca0f370be6", "sha256": "b1d894722a1a4c8f9a2c6e51d4cbcca2335ad844d579c9e88b7dd3c57ae71744"}, "downloads": -1, "filename": "atlasapi-0.10.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ccba4f2e5b6de1abc2f857ca0f370be6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 45513, "upload_time": "2019-11-20T06:50:44", "upload_time_iso_8601": "2019-11-20T06:50:44.961203Z", "url": "https://files.pythonhosted.org/packages/48/8d/e9cdd8af36b05ef6c21327ebf2ac5e2a843802f7636e7320c2f0be52359a/atlasapi-0.10.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d8bcb5131119d31f4524c85871f3c961", "sha256": "86b2058c26525f0ee71e61d866cc184d05da387c1d7117951d742469b6c66c40"}, "downloads": -1, "filename": "atlasapi-0.10.2.tar.gz", "has_sig": false, "md5_digest": "d8bcb5131119d31f4524c85871f3c961", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36976, "upload_time": "2019-11-20T06:50:46", "upload_time_iso_8601": "2019-11-20T06:50:46.910065Z", "url": "https://files.pythonhosted.org/packages/2f/b9/10b75d0aba2440f5a2c9fe293ca484fc84945cfa8c6fba0768b78afd888f/atlasapi-0.10.2.tar.gz"}], "0.11.0": [{"comment_text": "", "digests": {"md5": "a68b8087abac44b423ed25773e2d287f", "sha256": "617bcbc2e2498ecf79c7d82a3d668ab2330dece4086dc159961bf03fbcdbf740"}, "downloads": -1, "filename": "atlasapi-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a68b8087abac44b423ed25773e2d287f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 55765, "upload_time": "2020-02-05T20:47:02", "upload_time_iso_8601": "2020-02-05T20:47:02.902783Z", "url": "https://files.pythonhosted.org/packages/db/35/f8dfbb2b53f0aeb89ca9a7516cb53195dfb56033941348b3abb1608b1a92/atlasapi-0.11.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "90ab8bbb9906a1e5a032bcf6ece2409d", "sha256": "f8cc34c3bbc85827772cee9c947057071b351b48cd667d7984449f556982cc93"}, "downloads": -1, "filename": "atlasapi-0.11.0.tar.gz", "has_sig": false, "md5_digest": "90ab8bbb9906a1e5a032bcf6ece2409d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44240, "upload_time": "2020-02-05T20:47:05", "upload_time_iso_8601": "2020-02-05T20:47:05.112168Z", "url": "https://files.pythonhosted.org/packages/21/c2/9ab4b195e62fd9b30ede3ca8d28815d72a5968a36c3533bd5dfd96658eca/atlasapi-0.11.0.tar.gz"}], "0.5.2": [{"comment_text": "", "digests": {"md5": "96121e51ad053c920dc85d7da3fcf513", "sha256": "6ecb6082dfbeb519ca8d41fa4eb6c8239733976e8ff70ef1008e880afd6bd68e"}, "downloads": -1, "filename": "atlasapi-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "96121e51ad053c920dc85d7da3fcf513", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13055, "upload_time": "2018-01-01T20:08:36", "upload_time_iso_8601": "2018-01-01T20:08:36.519241Z", "url": "https://files.pythonhosted.org/packages/98/d7/b719171e39a53d53de6462b5512e6c10f796747a8964c0cc62cee97860d8/atlasapi-0.5.2-py3-none-any.whl"}], "0.5.3": [{"comment_text": "", "digests": {"md5": "000a2bdfd3bea0f698eab40b533773ea", "sha256": "db06a594b6353e3d631deeb32b34d9f113e38908263dd7fb8cf581dbd368e0bb"}, "downloads": -1, "filename": "atlasapi-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "000a2bdfd3bea0f698eab40b533773ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 14427, "upload_time": "2018-01-03T16:13:14", "upload_time_iso_8601": "2018-01-03T16:13:14.011533Z", "url": "https://files.pythonhosted.org/packages/19/79/845f808ac7af19c14bbba0c19bae1eccd17cdf5ed677c42b07e4a606c55f/atlasapi-0.5.3-py3-none-any.whl"}], "0.5.4": [{"comment_text": "", "digests": {"md5": "54d3f4dad1726e032cf8498eab2c4f94", "sha256": "a6d486f47c61d3144602760bb67ed910c47529db7bd4da8e05cccc39eb03aca8"}, "downloads": -1, "filename": "atlasapi-0.5.4-py3-none-any.whl", "has_sig": false, "md5_digest": "54d3f4dad1726e032cf8498eab2c4f94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15041, "upload_time": "2018-01-03T23:15:31", "upload_time_iso_8601": "2018-01-03T23:15:31.816645Z", "url": "https://files.pythonhosted.org/packages/29/cc/b1332908a622b719095b3969c9436fd0d9d5d4fff5305579218b05ac14e4/atlasapi-0.5.4-py3-none-any.whl"}]}, "urls": [{"comment_text": "", "digests": {"md5": "a68b8087abac44b423ed25773e2d287f", "sha256": "617bcbc2e2498ecf79c7d82a3d668ab2330dece4086dc159961bf03fbcdbf740"}, "downloads": -1, "filename": "atlasapi-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a68b8087abac44b423ed25773e2d287f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 55765, "upload_time": "2020-02-05T20:47:02", "upload_time_iso_8601": "2020-02-05T20:47:02.902783Z", "url": "https://files.pythonhosted.org/packages/db/35/f8dfbb2b53f0aeb89ca9a7516cb53195dfb56033941348b3abb1608b1a92/atlasapi-0.11.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "90ab8bbb9906a1e5a032bcf6ece2409d", "sha256": "f8cc34c3bbc85827772cee9c947057071b351b48cd667d7984449f556982cc93"}, "downloads": -1, "filename": "atlasapi-0.11.0.tar.gz", "has_sig": false, "md5_digest": "90ab8bbb9906a1e5a032bcf6ece2409d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44240, "upload_time": "2020-02-05T20:47:05", "upload_time_iso_8601": "2020-02-05T20:47:05.112168Z", "url": "https://files.pythonhosted.org/packages/21/c2/9ab4b195e62fd9b30ede3ca8d28815d72a5968a36c3533bd5dfd96658eca/atlasapi-0.11.0.tar.gz"}]}