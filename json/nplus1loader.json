{"info": {"author": "Mark Vartanyan", "author_email": "kolypto@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://api.travis-ci.org/kolypto/py-nplusone-loader.png?branch=master)](https://travis-ci.org/kolypto/py-nplusone-loader)\n[![Pythons](https://img.shields.io/badge/python-3.6%E2%80%933.8-blue.svg)](.travis.yml)\n\nAn SqlAlchemy loader that solves the N+1 problem\n\nTL;DR\n=====\n\nWhat happens if you touch an unloaded column or relationship while looping over results from the DB?\n\n```python\nusers = ssn.query(User).all()\n\nfor user in users:\n    user.articles  # load a relationship\n```\n\nRight. If you have 1000 users, you'll end up with 1000 queries.\n\nHere's a simple solution for you that will lazy-load an attribute for all those users with just one query:\n\n```python\nfrom nplus1loader import default_columns, nplus1loader\n\nusers = ssn.query(User).options(\n    default_columns(User),\n    nplus1loader('*')\n).all()\n\nfor user in users:\n    user.articles\n```\n\nIt will only make 1 query to load all the users, then when it sees that you want articles,\nit will only make 1 additional query to load all articles\u00b9 for those users.\n\n\u00b9: it will actually make 1 query per 500 users.\n\nThe N+1 Problem\n===============\n\nFirst of all, what's the N+1 problem?\nSuppose you have the following code which loads a number of objects from the DB,\nbut some fields are deferred:\n\n    users = ssn.query(User).options(\n        load_only('id')  # worst case scenario\n    )\n\nAnd then somewhere in the code some `jsonify()` function decides to check one of\nthe unloaded properties:\n\n    for user in users:\n        user.state  # load the attribute\n\nBecause the attribute hasn't been loaded on the whole collection...\nit will trigger N queries to load that attribute on every iteration of the loop.\nCrying shame.\n\nIn many cases we can tell SqlAlchemy to load exactly the attributes we are going\nto use, but in other cases that's utterly impossible.\n\nThe Solution\n============\n\nThis module offers a solution: when your code *touches* one unloaded attribute\non a collection, it assumes that you're going to iterate through them, and loads\nall of them for you.\n\nThe solution is, however, not all-encompassing: you only enable it where you see fit.\nIt's implemented as a load option, like this:\n\n    from nplus1loader import nplus1loader\n\n    users = ssn.query(User).options(\n        load_only('id'),  # worst case scenario\n        nplus1loader('*')  # include every column and every relationship\n    )\n\nNow, whenever you touch any unloaded column or relationship on any of those loaded users,\nthe attribute will be loaded for all User instance in that session.\nSo now, you can safely iterate through them.\n\nWarning: do not rely on this mechanism; only use it as a safeguard for production.\nIt is recommended that you do something like this instead:\n\n    from nplus1loader import default_columns, raiseload_all, nplus1loader\n\n    users = ssn.query(User).options(\n        default_columns(User),\n        raiseload_all('*') if in_testing else nplus1loader('*')\n    )\n\nMake sure you import the module first in order for those options to get registered :)\n\n    import nplus1loader\n\nOne minor inconvenience\n=======================\n\nDid you notice the `default_columns()` load option?\nYou'll have to insert it early into your query, I'm sorry.\n\nThis is because nplus1loader('*') is a catch-all column loader option.\nIn other words, if no column strategies are given by you, there are no loaded columns,\nand this nplus1loader('*') will handle all columns!\n\nThis is not what we want. We would instead want to apply the defaults... then override them...\nand put this nplus1loader('*') in the end. But that's not possible with SqlAlchemy.\n\nSo we have to live with this default_columns(Model): it reads the default loading strategies\nfrom your Model and applies it early. In other words, it knows which columns are deferred by default.\n\nIf you don't put it there, nplus1loader() will remove all columns from the query, and you'll get\nthis weird error:\n\n    sqlalchemy.exc.InvalidRequestError: Query contains no columns with which to SELECT from.\n\nThis is effectively the same as `defer('*')`.\n\nNow... why can't we just undefer('*') everything?\nBecause that's not right with some Column(deferred=True), and Column(deferred_group='password'),\nwhich have other preferences about being loaded.\n\nLogging\n=======\n\nAll logging is done to the 'lib.db.nplus1loader.NPlusOneLazyColumnLoader' logger:\n\n    05:09:37 [W] nplus1loader.NPlusOneLazyColumnLoader: Number.es: N+1 loading of 4 instances\n    emitted by: _nplusone_lazy_loading() nplus1loader/strategies.py:76\n\nOther solutions\n===============\n\n* [operator/sqlalchemy_bulk_lazy_loader](https://github.com/operator/sqlalchemy_bulk_lazy_loader)\n  only supports relationships and not columns, has code copy-pasted from an old SqlAlchemy version,\n  requires re-configuring your relationships on the model (lazy='bulk')\n* [operator/sqlalchemy_bulk_lazy_loader](operator/sqlalchemy_bulk_lazy_loader)\n  is a monitoring tool; it does not solve the N+1 problem at all\n\nBoth projects served as a source of inspiration.\n\n\n\nDatabase support\n================\n\nTested with:\n\n* PostgreSQL\n* MySQL\n* SQLite\n\n\n\nOther Included Tools\n====================\n\nHandle specific attributes\n--------------------------\n\nThe `nplus1loader` package has other tools that you might find useful.\n\nFirst of all, you can be more specific about which attributes you want to have handled by the N+1 loader.\nYou can opt to handle only relationships, all, or specific ones:\n\n    nplus1loader_rels('*')\n    nplus1loader_rels(relationshop_name, ...)\n\nor you can opt to handle only columns:\n\n    nplus1loader_cols('*')\n    nplus1loader_cols(column_name, ...)\n\n`default_columns(Model)`\n------------------------\n\nThis loader option takes the default defer()/undefer() settings from a model and sets them on a Query.\nIn itself, this option is useless, but it enables you to alter the defaults by using other loading options.\n\nIn particular, `nplus1loader('*')` won't work unless you provide `default_columns()` first.\n\n\n`raiseload_all('*')`\n--------------------\n\nRaiseload for both columns and relationships.\n\nExample:\n\n    ssn.query(User).options(\n        default_columns('id'),\n        # Raise an error if any attribute at all is lazy-loaded\n        raiseload_all('*')\n    )\n\nThe error that it throws is `nplus1loader.LazyLoadingAttributeError()`, so it's easy to catch in your code ;)\n\n\n`raiseload_col(*columns)`\n-------------------------\n\nRaiseload for columns. Use to fine-tune.\n\nExample:\n\n    ssn.query(User).options(\n        load_only('id'),\n        # Raise an error if any other column is lazy-loaded\n        raiseload_col('*')\n    )\n\nYou can also specify individual columns as a list.\n\nThe error that it throws is `nplus1loader.LazyLoadingAttributeError()`.\n\n\n`raiseload_rel(*relations)`\n---------------------------\n\nRaiseload for relatioships. Use to fine-tune.\n\nIt's essentially the same as `sqlalchemy.orm.raiseload()`, but throws the `nplus1loader.LazyLoadingAttributeError()`\nerror instead.\n\n\n`bulk_load_attribute_for_instance_states()`\n-------------------------------------------\n\nThis is the heart of N+1 loader. You give it a list of instances, name one unlaoded attribute,\nand it makes just one query to load this attribute's value from the database, and efficiently\naugments all the existing instances with the loaded value of this attribute.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kolypto/py-nplus1loader", "keywords": "sqlalchemy,nplus1", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "nplus1loader", "package_url": "https://pypi.org/project/nplus1loader/", "platform": "any", "project_url": "https://pypi.org/project/nplus1loader/", "project_urls": {"Homepage": "https://github.com/kolypto/py-nplus1loader"}, "release_url": "https://pypi.org/project/nplus1loader/1.0.0/", "requires_dist": ["sqlalchemy (>=1.3.0)", "funcy"], "requires_python": ">= 3.6", "summary": "SqlAlchemy N+1 Loader: a solution to the N+1 problem", "version": "1.0.0"}, "last_serial": 7027650, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "fb1b23caea90bf31e0f4719f9e16e28d", "sha256": "7dbe9fe313a30afc197e4cc734979bae5d0a31c2d9731be0defc196f7e3a1344"}, "downloads": -1, "filename": "nplus1loader-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fb1b23caea90bf31e0f4719f9e16e28d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 14533, "upload_time": "2020-04-15T21:36:09", "upload_time_iso_8601": "2020-04-15T21:36:09.396925Z", "url": "https://files.pythonhosted.org/packages/e5/83/afc9dbb3ee582e2dfd5c99d066b219af2e34a68d433c441408219565d3f5/nplus1loader-1.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "197d1aa9863454eda32a917025a5c32f", "sha256": "cf85715c0eed41c10178003773819490e5993256bbb74d1bbc539c88de0b8698"}, "downloads": -1, "filename": "nplus1loader-1.0.0.tar.gz", "has_sig": false, "md5_digest": "197d1aa9863454eda32a917025a5c32f", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 12925, "upload_time": "2020-04-15T21:36:11", "upload_time_iso_8601": "2020-04-15T21:36:11.138632Z", "url": "https://files.pythonhosted.org/packages/a8/6c/593b61f9adbcfe5c5ba56d3f6c1a4d775bdc0e61108eedbab68b5a85c0bc/nplus1loader-1.0.0.tar.gz"}], "1.0.0b1": [{"comment_text": "", "digests": {"md5": "e5d9daf93966a93a6c4b861225064b12", "sha256": "a8be89ad4ff598546773501f47113cb082057116a70111aae164ee43dca0564f"}, "downloads": -1, "filename": "nplus1loader-1.0.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "e5d9daf93966a93a6c4b861225064b12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 14555, "upload_time": "2020-04-15T21:00:10", "upload_time_iso_8601": "2020-04-15T21:00:10.804726Z", "url": "https://files.pythonhosted.org/packages/fd/bb/bd531bb08f836f1e2cd8a85af77ceb4f7e0261181ec608ff3ce694a61fa9/nplus1loader-1.0.0b1-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "29f9c1e78d9d4d643b0471eb99f7faab", "sha256": "5ba0124d40dad827e8e5f68a711fd746b3f4aaa0c384cd45d71a82af352a6766"}, "downloads": -1, "filename": "nplus1loader-1.0.0b1.tar.gz", "has_sig": false, "md5_digest": "29f9c1e78d9d4d643b0471eb99f7faab", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 12925, "upload_time": "2020-04-15T21:00:12", "upload_time_iso_8601": "2020-04-15T21:00:12.883525Z", "url": "https://files.pythonhosted.org/packages/ad/9b/4c22aade365e8a9fe2f35aae074f80183c1ea08192b4fe7ad0dd3d889fec/nplus1loader-1.0.0b1.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb1b23caea90bf31e0f4719f9e16e28d", "sha256": "7dbe9fe313a30afc197e4cc734979bae5d0a31c2d9731be0defc196f7e3a1344"}, "downloads": -1, "filename": "nplus1loader-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fb1b23caea90bf31e0f4719f9e16e28d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.6", "size": 14533, "upload_time": "2020-04-15T21:36:09", "upload_time_iso_8601": "2020-04-15T21:36:09.396925Z", "url": "https://files.pythonhosted.org/packages/e5/83/afc9dbb3ee582e2dfd5c99d066b219af2e34a68d433c441408219565d3f5/nplus1loader-1.0.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "197d1aa9863454eda32a917025a5c32f", "sha256": "cf85715c0eed41c10178003773819490e5993256bbb74d1bbc539c88de0b8698"}, "downloads": -1, "filename": "nplus1loader-1.0.0.tar.gz", "has_sig": false, "md5_digest": "197d1aa9863454eda32a917025a5c32f", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 12925, "upload_time": "2020-04-15T21:36:11", "upload_time_iso_8601": "2020-04-15T21:36:11.138632Z", "url": "https://files.pythonhosted.org/packages/a8/6c/593b61f9adbcfe5c5ba56d3f6c1a4d775bdc0e61108eedbab68b5a85c0bc/nplus1loader-1.0.0.tar.gz"}]}