{"info": {"author": "Lex Draven", "author_email": "lexman2@yandex.ru", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# README #\n\nA simple library for testing your own python code.\n\nKey Features:\n\n\n\n * no third-party dependencies, only standard library is used\n * no need to inherit from any classes\n * no need to name your files and/or tests with a prefix or a postfix called 'test'\n * it is possible to interract with native python assert as well as library asserts\n * simple and clear work with tests, data providers, checks, etc.\n * ability to run based on a file with settings or passing arguments on command line\n * automatic search for all tests within a current folder and subfolders\n * flexible configuration of both tests and their groups, the ability to group tests and run only selected groups\n * the ability to use both the built-in results processing tool and write your own one\n * the ability to group, stop test by timeout, parallel launch, mocking without installing extra plugins\n\n\n### Installation ###\n\nJust use your pip\n\n``pip install checking``\n\n\n### First test ###\nSimple example:\n\n```\nfrom checking import *\n\ndef my_function_to_test(a,b)\n    return a + b\n\n@test\ndef any_name_you_like():\n    # Check  1+1=2\n    equals(2, my_function_to_test(1,1))\n\nif __name__ == '__main__':\n    # Runs all tests in current module\n    start()\n```\nOnly functions marked with @test annotation can be considered as a test and will be ran, you can name your tests whatever you feel like do,\nthe main point is to put @test annotation\n\n## Basic Asserts\n\nYou can manipulate with simple Python assert if you want, but it is recommended to use simple and readable library asserts.\n\n###### Standard checks:\n\n```\n#!python\n@test\ndef checks_basic_asserts():\n    is_true('1', 'Error message') # checks, if value is True\n    is_false([], 'Error message') # checks, if value is False\n    equals(1, 1, 'Error message') # checks, if two objects are equal (==)\n    not_equals(1, 2, 'Error message') # checks, if two objects are equal (!=)\n    is_none(None, 'Error message') # checks, if object is None\n    not_none('1', 'Error message') # checks, if object is not None\n    contains(1, [1, 2, 3], 'Error message') # checks, if the second argument contains the first arg\n    not_contains(4, [1, 2, 3], 'Error message') # checks, if the second argument does not contains the first arg\n    is_zero(0, 'Error message') # checks, if argument is equal to 0 (it can be int or float)\n    is_positive(1, 'Error message') # checks, if argument is bigger than 0 (for int or float), or len of argument is positive(for Sequence)\n    is_negative(-1, 'Error message') # checks, if argument is smaller then 0 (it can be int or float)\n\n```\nMessages in all asserts are optional, but it strongly recommended to use them!\n\n###### Work with or without exceptions\nIf you need to check the exception raises and its message you can write test like:\n\n```\n#!python\n@test\ndef check_with_exception():\n    with waiting_exception(ZeroDivisionError) as e:\n        x = 1 / 0 # Here exception will be raised!\n    assert e.message == 'division by zero' # Check message (using python assert)\n\n```\nIf no exception will be raised or it will be exception of another type then test will fail.\nPay attention that you should check message (if you need) after exiting context manager, but not inside its scope!\n\nYou cannot use BaseException here and it strongly recommended not to use Exception as parent of all exceptions!\n\nIn some cases you have just need to run some code and make sure no exception raised. There is a special way for that:\n\n```\n#!python\n@test\ndef no_exceptions_bad():\n    do_something() # Bad way! No asserts here, is that a test???\n\n@test\ndef check_no_exception_raises():\n    with no_exception_expected(): # Explicitly say that we are not waiting exceptions\n        do_something() # Good way!\n\n\n```\nIf any exception will be raised then test will fail\n\n###### Managing test during execution\n\nSometimes, you need to fail or brake test in execution time on some reason (wrong OS, parameters, etc.)\n\n```\n#!python\n@test\ndef must_fail_on_condition():\n    if some_condition():\n        test_fail('Expected fail!')\n\n\n@test\ndef must_be_broken():\n    if some_condition():\n        test_brake('Expected brake!')\n\n```\n\n\n### Soft and Fluent Asserts\n\n###### Soft Assert\n\nSoft Assert is a convenient way to check a few conditions before a failure. Standard test is preferably fail fast, \nand if some checks fail then the test stops. But sometimes you need to check a list of conditions, and check them to fail only at the end of the test, \nwith all information what checks were failed.\nFor instance, you have a json object and want to checks all its fields, but also do not want to stop test at first failed check \nbecause you want to know the state of all other fields!\n\n```\n#!python\n\n@test\ndef check_all_json_fields():\n    my_json = get_my_json_somethere()\n\n    soft_assert = SoftAssert() # Creates an object of soft assert\n    soft_assert.check(lambda : equals(1, my_json['field1'], 'message')) # Check field, test will not fail here!\n    soft_assert.check(lambda : equals('text', my_json['field2'], 'message'))\n    soft_assert.contains(1,my_json['list'])\n    soft_assert.assert_all() # If something wrong, test will fail here!\n\n```\n**Attention!** You always should use assert_all() at the end of the test, only at the moment all exception (if something went wrong) \nwill be raise.\n\n\n###### Fluent Assert\n\nFluent assert is just a sugar to make chains of checks for the object; they are simple, readable, but it is NOT a soft asserts!\nIf one of the checks will fail - test stops!\nFluent asserts have analogues of the basic asserts, but also have their own types; you can find\nthem all in checking/classes/fluent_asserts.py\n\n```\n#!python\n\n@test\ndef check_list_valid():\n    my_list = get_my_list_somethere()\n\n    verify(my_list).is_not_none().AND.is_a(list).AND.contains(2).AND.is_sorted()\n\n```\n\n\n## Data Providers\n\nOften you need to run the same test with different data, there is @data annotation for that target. Mark function you want with @data annotation and\nyou can use it in your tests. The function for data-provider should not have arguments and it has to return iterable, sequence or generator.\n\n**Important!** Name of the provider has to be unique, you can specify it in parameter @data(name='provider') or it takes the function name by default\nIt it not necessary to have data-provider with the test (in the same module)\n\nData-provider takes values one by one and pushes it to your test.\n```\n#!python\n# Create data-provider\n@data\ndef pairs():\n    return [(1, 1, 2), (2, 2, 4)]  # Returns list of tuples\n\n\n@test(data_provider='pairs')  # Specify what provider to use\ndef check_sum(it):  # Here we must have 1 argument for values of data-provider\n    equals(it[0] + it[1], it[2])  # Checks sum of first and second elements of tuple equal to third element\n\n```\n\n## Test Parameters\n\nTest is a function that marked with @test annotation, you can manage them with bunch of parameters:\n\n**enabled** (bool) - if it is False then test will not be run, and all other parameters ignored. By default enabled = True\n\n**name** (str) - name of the test, if not specify the function name will be used\n\n**description** (str) - test description. If absent, will be taken from function docs. If both description and function\n    doc exists, description wins.\n\n**data_provider** (str) - name of the provider to use with test. If specified, test should have one argument, \nto get values from provider. If no providers found with that name then exception will raise!\n\n**retries** (int) - how many times to run the test if it is failed. If test does not fail, no more runs attempted. By defaut it is 1\n\n**groups** (Tuple[str]) - tuple of group names test belongs to, each test is a part of a some group, by default group is the module name, where test places\nIt is the way to manage and collect tests to any groups.\n\n**priority** (int) - priority of the test, by default it is 0. The higher value means that test will execute later.\nPriority is a way to run tests in some order.\n\n**timeout** (int) - amount of time to wait test ends. If time is over, thread of the test will be interrupted and test will be mark as broken.\nShould be used carefully because of potential memory leaks!\n\n**only_if** (Callable[None, bool]) - function which will be run before the test, and should return bool. Test will be execute only then if function returns 'True'!\nIt is a way to make condition for some test, for instance, run only if the OS is Linux.\n\n\n## Fixtures\n\nEach test group or all test-suite can have preconditions and post-actions. For example, open DB connection before test starts and close it after that.\nYou can easily make it with before/after fixtures. The function that marked with before/after should be without arguments.\n\n@before  - run function before EACH test in group, by default group is current module, but you can specify it with parameter\n\n@after  - run function after EACH test in group, by default group is current module, but you can specify it with parameter.\nThis function will not be run if there is @before and it failed!\n\n```\n#!python\n@before(group_name='api')\ndef my_func():\n    do_some_precondition()\n\n@after(group_name='api')\ndef another_func():\n    do_post_actions()\n\n```\n\n@before_group - function run once before running test in group, by default group is current module, but you can specify it with parameter.\n\n@after_group - function run once after running all test in group, by default group is current module, but you can specify it with parameter. \nThis function will not be run if there is @before_group and it failed, except using parameter always_run = True\n\n```\n#!python\n@before_group(name='api')\ndef my_func():\n    do_some_precondition_for_whole_group()\n\n@after_group(name='api', always_run =True)\ndef another_func():\n    do_post_actions_for_whole_group()\n\n```\n\n@before_suite - function runs once before any group at start of the test-suite\n\n\n@after_suite - function run once after all groups, at the end of the test-suite.\nThis function will not be run if there is @before_suite and it failed, except using parameter 'always_run = True'\n\n```\n#!python\n@before_suite\ndef my_func():\n    print('start suite!')\n\n@after_suite(always_run =True)\ndef another_func():\n    print('will be printed, even if before_suite failed!')\n\n```\n\n## Mock and Spy\n\nFor testing purposes you sometimes need to fake some behaviour or to isolate your application from any other classes/libraries etc.\n\nIf you need your test to use fake object, without doing any real calls, yoy can use mocks:\n\n\n**1. Fake one of the builtin function.**\n\nLet say you need to test function which is using standard input() inside. \n\nBut you cannot wait for real user input during the test, so fake it with mock object.\n\n```\n#!python\n\ndef our_weird_function_with_input_inside():\n    text = input()\n    return text.upper()\n\n@test\ndef mock_builtins_input():\n    with mock_builtins('input', lambda : 'test'): # Now input() just returns 'test', it is not to wait for user input\n        result_text = our_weird_function_with_input_inside()\n        equals('TEST', result_text)\n\n\n```\n\n**2. Fake function of the 3-d party library**\n\nFor working with other modules and libraries in test module, you need to import this module and to mock it function.\n\nFor example, you need to test function, which is using requests.get inside, but you do not want to make real http\nrequest. Let it mock\n\nsome_module_to_test.py\n```\n#!python\nimport requests\n\ndef func_with_get_inside(url):\n    response = requests.get(url)\n    return response.text\n\n```\n\nour_tests.py\n```\n#!python\nimport requests # need to import it for mock!\n\nfrom some_module_to_test import func_with_get_inside\n\n@test\ndef mock_requests_get():\n    # Lets create fake object\n    class Fake:\n        def __init__(self):\n            self.text = 'test'\n\n    with mock(requests, 'get', lambda x:Fake()): # Mock real requests with fake object\n        equals('test', func_with_get_inside('https://yandex.ru')) # Now no real requests be performed!\n\n\n```\n\n**3. Spy object**\n\nSpy is the object which has all attributes of original, but spy not performed any action, \nall methods return None (if not specified what to return). Therefore, spy log all actions and arguments.\nIt can be useful if your code has inner object and you need to test what functions were called.\n\n```\n#!python\n\ndef function_with_str_inside(value):\n    # Suppose we need to check upper was called here inside\n    return value.upper()\n\n@test\ndef spy_for_str():\n    spy = Spy('it is a string') # Spy, which is like str, but it is not str!\n    function_with_str_inside(spy) # Send our spy instead a str\n    is_true(spy.was_function_called('upper')) # Verify upper was called\n\n\n```\n\nYou can even specify what to return when some function of the spy will be called!\n\n```\n#!python\n\ndef function_with_str_inside(value):\n    # Suppose we need to check upper was called here inside\n    return value.upper()\n\n\n@test\ndef spy_with_return():\n    spy = Spy('string')\n    spy.when_call_function_returns('upper', 'test') # Tells what to return, when upper will be call\n    result = function_with_str_inside(spy)\n    is_true(spy.was_function_called('upper'))\n    equals('test', result) # verify our spy returns 'test'\n\n```\n\n\n### Contact me ###\nLexman2@yandex.ru\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/kotolex/atest/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "checking", "package_url": "https://pypi.org/project/checking/", "platform": "", "project_url": "https://pypi.org/project/checking/", "project_urls": {"Homepage": "https://bitbucket.org/kotolex/atest/"}, "release_url": "https://pypi.org/project/checking/0.3.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A small library for testing your code, made by tester for testers", "version": "0.3.0"}, "last_serial": 7059232, "releases": {"0.1.6": [{"comment_text": "", "digests": {"md5": "a62513548216e930ab302ca5e9563d47", "sha256": "c1f504a2c58ebec369565459be5e3074d364f3d5afbfb3fb1fc77613d18319f3"}, "downloads": -1, "filename": "checking-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a62513548216e930ab302ca5e9563d47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38548, "upload_time": "2020-03-16T11:17:29", "upload_time_iso_8601": "2020-03-16T11:17:29.794459Z", "url": "https://files.pythonhosted.org/packages/e0/a7/c28391b7bb7b0ac0f3601abd999e8a2b66b84c069af70f2970ad6ec73a07/checking-0.1.6-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "d9a7ad2636b700416958fcf807c5d0b9", "sha256": "2e65b00ab604e928e48ea1790cf73cf51f0e7e7390b222221dd4e692be4bee7f"}, "downloads": -1, "filename": "checking-0.1.6.tar.gz", "has_sig": false, "md5_digest": "d9a7ad2636b700416958fcf807c5d0b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30858, "upload_time": "2020-03-16T11:17:31", "upload_time_iso_8601": "2020-03-16T11:17:31.036545Z", "url": "https://files.pythonhosted.org/packages/c6/95/1d4cfcc5f0d38f05aba04f4159758ae60a0ee1f2aa0ed5bf823f4d1de281/checking-0.1.6.tar.gz"}], "0.1.7": [{"comment_text": "", "digests": {"md5": "4fe181bc654d89fe0bd5233532cd406d", "sha256": "d66a141fec2af975361b7f5999ee602e1542a3c0273fba4aaa236b0d131dcf3b"}, "downloads": -1, "filename": "checking-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "4fe181bc654d89fe0bd5233532cd406d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 37875, "upload_time": "2020-03-16T11:36:45", "upload_time_iso_8601": "2020-03-16T11:36:45.864432Z", "url": "https://files.pythonhosted.org/packages/d5/b5/e2a397c14e22089261c562076934e0a1e77b047f4cdae32479a5675c82d2/checking-0.1.7-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "b739da6eba0b8e11ac149cd0c728b39f", "sha256": "f33a875df246730bd07b053230ec388481bbc540655cddb7901b0cdc14a2f2d1"}, "downloads": -1, "filename": "checking-0.1.7.tar.gz", "has_sig": false, "md5_digest": "b739da6eba0b8e11ac149cd0c728b39f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28924, "upload_time": "2020-03-16T11:36:47", "upload_time_iso_8601": "2020-03-16T11:36:47.148907Z", "url": "https://files.pythonhosted.org/packages/1d/2e/9d5f0bb9109c6693c69253a2388488e4a3bc62afd88632f0fc385f25b995/checking-0.1.7.tar.gz"}], "0.1.8": [{"comment_text": "", "digests": {"md5": "85385511b0efca1b00a35b235cc1396c", "sha256": "e2aa006be082812d9d72205bee071f28b09fdedd3b8835340b717526e01e1247"}, "downloads": -1, "filename": "checking-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "85385511b0efca1b00a35b235cc1396c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40018, "upload_time": "2020-03-17T06:37:55", "upload_time_iso_8601": "2020-03-17T06:37:55.049910Z", "url": "https://files.pythonhosted.org/packages/35/c7/9f63669c65e715ff85a2061782fc18de3bb532df48a6307685b6485a9f1f/checking-0.1.8-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "1da6143d9a6b28e6470d4f3ab6dafabf", "sha256": "a5b72184774a1750dcd3ed293aa5ba120ea004662979a21006c366b4f231f721"}, "downloads": -1, "filename": "checking-0.1.8.tar.gz", "has_sig": false, "md5_digest": "1da6143d9a6b28e6470d4f3ab6dafabf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 32596, "upload_time": "2020-03-17T06:37:56", "upload_time_iso_8601": "2020-03-17T06:37:56.315487Z", "url": "https://files.pythonhosted.org/packages/49/c7/67ca15e8be0e579f7ab8bf423d2716e148effb16208804bd06ac86f8e233/checking-0.1.8.tar.gz"}], "0.2.2": [{"comment_text": "", "digests": {"md5": "3eacbfaadfdcc3ca9cacafd0ebdceeeb", "sha256": "0d5451bfed43a997f26afc8d32ad7fcc6526350a15179fec5ec7044425b72c6b"}, "downloads": -1, "filename": "checking-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3eacbfaadfdcc3ca9cacafd0ebdceeeb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 39975, "upload_time": "2020-04-02T07:09:08", "upload_time_iso_8601": "2020-04-02T07:09:08.245997Z", "url": "https://files.pythonhosted.org/packages/6d/f7/cb0a2d4ef6ffadd0f61725b051f3dc5de78e7d57fcc19ee9d7b9e39cdd4f/checking-0.2.2-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "7219825257261242a9747c360a93efeb", "sha256": "0eb79ca607a5326f66e63a0a98f1831ea81e44bb242fa10fed52723f11f94d7e"}, "downloads": -1, "filename": "checking-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7219825257261242a9747c360a93efeb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36636, "upload_time": "2020-04-02T07:09:10", "upload_time_iso_8601": "2020-04-02T07:09:10.352869Z", "url": "https://files.pythonhosted.org/packages/2a/b1/197fb8e9a4e4f8c9d745da6905d3bb42178ae2c929d424c4d0d8b550f70a/checking-0.2.2.tar.gz"}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c2326ae8a71bfcea2b4dc6c44b49066e", "sha256": "4f9c3391a66cba5d093bb6eaa97b13e935c49a680b9e1fcef6a7acf20597b615"}, "downloads": -1, "filename": "checking-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c2326ae8a71bfcea2b4dc6c44b49066e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 42775, "upload_time": "2020-04-09T13:04:57", "upload_time_iso_8601": "2020-04-09T13:04:57.101154Z", "url": "https://files.pythonhosted.org/packages/10/23/aed2bda59cb9384a773b4fbb11365a304c233fb2f862fed2e284a9d219a0/checking-0.2.3-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "aac5603850bbc878bf5556e60c774bcd", "sha256": "64bd79a167fea82e108b3a42fc86b381e592c768c381d88a29ab2c00de4c8955"}, "downloads": -1, "filename": "checking-0.2.3.tar.gz", "has_sig": false, "md5_digest": "aac5603850bbc878bf5556e60c774bcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 37890, "upload_time": "2020-04-09T13:04:58", "upload_time_iso_8601": "2020-04-09T13:04:58.147208Z", "url": "https://files.pythonhosted.org/packages/c5/41/5a14a7d57d70ba27e836d97e0343976fdd39e193b89c5323eaede8beb5f7/checking-0.2.3.tar.gz"}], "0.2.5": [{"comment_text": "", "digests": {"md5": "7b6fe59217cc4c300290488d92fee3a6", "sha256": "61ed49e03e344d994a817a6ca77fa51f60b7a20b7baa8f410ce99e1c5fd1cd57"}, "downloads": -1, "filename": "checking-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "7b6fe59217cc4c300290488d92fee3a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 43756, "upload_time": "2020-04-14T10:03:11", "upload_time_iso_8601": "2020-04-14T10:03:11.637228Z", "url": "https://files.pythonhosted.org/packages/2a/c1/4f02004137d28b8d33dae165182b33449b48cc3fa09d64345439bd7476d5/checking-0.2.5-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "193d4509203941234587502fcf002736", "sha256": "a2f9e8b9430d4725e2184fc00f4184fbe56edfaa1c44d26fe5396d9e7e118620"}, "downloads": -1, "filename": "checking-0.2.5.tar.gz", "has_sig": false, "md5_digest": "193d4509203941234587502fcf002736", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38960, "upload_time": "2020-04-14T10:03:12", "upload_time_iso_8601": "2020-04-14T10:03:12.923652Z", "url": "https://files.pythonhosted.org/packages/2a/ff/076478892084a3f9845a284c4edcfb2632dca28a8d54db1bdb7f247e4dd3/checking-0.2.5.tar.gz"}], "0.2.9": [{"comment_text": "", "digests": {"md5": "e04cc98593d7d4e6e65015140a56bdf5", "sha256": "34b1d4e2d8bfb0048478ecc742269458125b8fa4dbec3935306aeb77a9a7f5c5"}, "downloads": -1, "filename": "checking-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "e04cc98593d7d4e6e65015140a56bdf5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35625, "upload_time": "2020-04-20T09:46:45", "upload_time_iso_8601": "2020-04-20T09:46:45.563542Z", "url": "https://files.pythonhosted.org/packages/85/07/81619c2c2401a5878ad55809518b7ca80d81919e5d2188a7691da654332c/checking-0.2.9-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "dab32933166e2f1528673c67ccf1d8a8", "sha256": "b3cb9602a8553ba2af1402dd53a31d98139972887aed90165a9c0cc891c38a82"}, "downloads": -1, "filename": "checking-0.2.9.tar.gz", "has_sig": false, "md5_digest": "dab32933166e2f1528673c67ccf1d8a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33528, "upload_time": "2020-04-20T09:46:46", "upload_time_iso_8601": "2020-04-20T09:46:46.519526Z", "url": "https://files.pythonhosted.org/packages/7e/df/94d8f4efdc7e1149a771995d174dafc7230d814dc932fc049db21aa930c0/checking-0.2.9.tar.gz"}], "0.3.0": [{"comment_text": "", "digests": {"md5": "750722407acd4540f57357b638392895", "sha256": "1d8d78402f05c4fe0273ed9bdabe3fffdeb9dfe217eae6ce61131c4bb5748033"}, "downloads": -1, "filename": "checking-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "750722407acd4540f57357b638392895", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35810, "upload_time": "2020-04-20T10:48:43", "upload_time_iso_8601": "2020-04-20T10:48:43.194553Z", "url": "https://files.pythonhosted.org/packages/42/74/ba2d158c8d5859c61395bc3e4f8e45e093c46cefe8d779fd107d380e2349/checking-0.3.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a33c04362b86e29113afa4cb6a3fe866", "sha256": "f59917a473b1e0ef65ed321c6d63051afd667a7b03965b43ae1be3b30e5d2d0c"}, "downloads": -1, "filename": "checking-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a33c04362b86e29113afa4cb6a3fe866", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33716, "upload_time": "2020-04-20T10:48:44", "upload_time_iso_8601": "2020-04-20T10:48:44.121935Z", "url": "https://files.pythonhosted.org/packages/a8/d8/f5835fb89b0bd8c8e02d30230686ddebff5e443e73124c884ab94e20755a/checking-0.3.0.tar.gz"}]}, "urls": [{"comment_text": "", "digests": {"md5": "750722407acd4540f57357b638392895", "sha256": "1d8d78402f05c4fe0273ed9bdabe3fffdeb9dfe217eae6ce61131c4bb5748033"}, "downloads": -1, "filename": "checking-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "750722407acd4540f57357b638392895", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 35810, "upload_time": "2020-04-20T10:48:43", "upload_time_iso_8601": "2020-04-20T10:48:43.194553Z", "url": "https://files.pythonhosted.org/packages/42/74/ba2d158c8d5859c61395bc3e4f8e45e093c46cefe8d779fd107d380e2349/checking-0.3.0-py3-none-any.whl"}, {"comment_text": "", "digests": {"md5": "a33c04362b86e29113afa4cb6a3fe866", "sha256": "f59917a473b1e0ef65ed321c6d63051afd667a7b03965b43ae1be3b30e5d2d0c"}, "downloads": -1, "filename": "checking-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a33c04362b86e29113afa4cb6a3fe866", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 33716, "upload_time": "2020-04-20T10:48:44", "upload_time_iso_8601": "2020-04-20T10:48:44.121935Z", "url": "https://files.pythonhosted.org/packages/a8/d8/f5835fb89b0bd8c8e02d30230686ddebff5e443e73124c884ab94e20755a/checking-0.3.0.tar.gz"}]}