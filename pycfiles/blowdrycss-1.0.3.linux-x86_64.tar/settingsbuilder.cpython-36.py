# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/starwater/blowdrycss_venv/lib/python3.6/site-packages/blowdrycss/settingsbuilder.py
# Compiled at: 2018-03-07 18:42:13
# Size of source mod 2**32: 11410 bytes
"""
Declares string for building blowdrycss - settings.py.

**Important:** Only called during initial installation.

"""
from __future__ import absolute_import, print_function, unicode_literals
import os
__author__ = 'chad nelson'
__project__ = 'blowdrycss'
blowdrycss_settings_dot_py = '"""\n**Usage Notes:**\n\nThe first time ``blowdrycss`` is run it auto-builds ``blowdrycss_settings.py`` via ``__init__.py``.\nThis makes it easy to find and customize related settings.\n\n**Why such a long name? -- blowdrycss_settings.py**\n\nPopular web frameworks such as django and flask already auto-generate a settings file called ``settings.py``.\nThe longer more specific name is used to prevent naming conflicts, and increase clarity.\n\n**Parameters:**\n\n| markdown_directory (*string*) -- Generally used for development purposes and github documentation.\n\n| project_directory (*string*) -- Path to recursively search for all defined ``file_types``.\n\n| css_directory (*string*) -- Path where the projects CSS files are located.\n\n| docs_directory (*string*) -- Path where Sphinx docs are located (requires sphinx to be installed and run).\n\n| output_file_name (*string*) -- Name of the generated output file contain DRY CSS definitions.\n\n| output_extension (*string*) -- File extension of the generated output file. Must begin with \'.\'\n\n| file_types = (*tuple of strings*) -- All file types/extensions to search for in the defined project_directory\n  that contain encoded class selectors.\n\n| timing_enabled (*bool*) -- Run performance timer to see the performance of ``blowdrycss``.\n\n| markdown_docs (*bool*) -- Generate a markdown files that provides a quick syntax and clashing alias reference.\n  Normally set to False except when posting to github.\n\n| html_docs (*bool*) -- Generate a html file that provides a quick syntax and clashing alias reference.\n\n| rst_docs (*bool*) -- Generate a sphinx rst file that provides a quick syntax and clashing alias reference.\n\n| human_readable (*bool*) -- Generate a standard human readable css file. This file is named ``blowdry.css`` by\n  default.\n\n| minify (*bool*) -- Generate a minified version of the css file. This file is named ``blowdry.min.css`` by default.\n\n| media_queries_enabled (*bool*) -- Generate breakpoint and scaling media queries.\n\n| use_em (*bool*) -- A ``pixels`` to ``em`` unit conversion flag. True enables unit conversion.\n  False disables unit conversions meaning any pixel value remains unchanged.\n\n| base (*int*) -- Base used for unit conversion (typically set to 16). The pixel value will be divided by\n  ``base`` during unit conversion.\n\n| xxsmall (*tuple of floats*) -- (0px, upper limit in pixels)\n\n| xsmall (*tuple of floats*) -- (xxsmall upper limit + 1px, upper limit in pixels)\n\n| small (*tuple of floats*) -- (xsmall upper limit + 1px, upper limit in pixels)\n\n| medium (*tuple of floats*) -- (small upper limit + 1px, upper limit in pixels)\n\n| large (*tuple of floats*) -- (medium upper limit + 1px, upper limit in pixels)\n\n| xlarge (*tuple of floats*) -- (large upper limit + 1px, upper limit in pixels)\n\n| xxlarge (*tuple of floats*) -- (xlarge upper limit + 1px, upper limit in pixels)\n\n| giant (*tuple of floats*) -- (xxlarge upper limit + 1px, upper limit in pixels)\n\n| xgiant (*tuple of floats*) -- (giant upper limit + 1px, upper limit in pixels)\n\n| xxgiant (*tuple of floats*) -- (xgiant upper limit + 1px, 1E+6) [Technically the upper limit is infinity,\n  but CSS does not permit it.]\n\n**Custom Alias Syntax:**\n\n| custom_property_alias_dict (*dict*) -- Contains customized shorthand encodings for a CSS property name.\n  e.g. ``\'c-\'`` is an alias for ``\'color\'``. This saves on typing.\n\n| These encoded class selectors can be used inside of Web project files matching ``file_type``.\n  They can be customized to your liking.\n\n| For more details about how to create custom aliases head on over to :doc:`advancedtopics`.\n\n**cssutils Patch:**\n\n``cssutils`` does not currently support all CSS 3 Units.  The patch in this file allows length units of\n``q``, ``ch``, ``rem``, ``vw``, ``vh``, ``vmin``, and ``vmax``. It also allows angle units of ``turn``.\n\n"""\n\n# python 2\nfrom __future__ import absolute_import, division, unicode_literals\nfrom builtins import round\n\n# builtins\nfrom os import getcwd, path\nfrom string import digits\nfrom logging import DEBUG, INFO, WARNING, ERROR, CRITICAL\n\n# plugins\nfrom cssutils import profile\n\n__project__ = \'blowdrycss\'\n\n\n# Set project_directory to the one containing the files you want to DRY out.\n# Change these to whatever you want.\ncwd = getcwd()\nmarkdown_directory = path.join(cwd, \'docs\', \'markdown\')\nproject_directory = path.join(cwd, \'examplesite\')\ncss_directory = path.join(project_directory, \'css\')\ndocs_directory = path.join(cwd, \'docs\')\n\n# Logging\nlogging_enabled = False\nlogging_level = DEBUG                                       # Allowed: DEBUG, INFO, WARNING, ERROR, CRITICAL\nlog_to_console = False\nlog_to_file = False\nlog_directory = path.join(cwd, \'log\')\nlog_file_name = \'blowdrycss.log\'\none_mega_byte = 1048576\nlog_file_size = 4 * one_mega_byte                           # Max log file size\nlog_backup_count = 1                                        # Maximum number of backup log files.\n\n# Output File\noutput_file_name = \'blowdry\'\noutput_extension = \'.css\'                                   # Must begin with \'.\' Could be anything .scss, .less, etc.\n\n# All file types/extensions to search for in the defined project_directory that contain encoded class selectors.\n# Available formats:\n# (\'*.html\', \'*.js\', \'*.ts\', \'*.vue\', \'*.jinja\', \'*.jinja2\', \'*.jnj\', \'*.ja\', \'*.djt\', \'*.djhtml\',\n#  \'*.cs\', \'*.aspx\', \'*.ascx\', \'*.master\', \'*.erb\', \'*.php\', )\nfile_types = (\'*.html\', )\n\n# Timing\ntime_limit = 1800               # Frequency of a comprehensive run in seconds. See timing.LimitTimer() for details.\n\n# Boolean Flags\nauto_generate = False           # Auto-generate blowdry.css when a file that matches files_types is saved. (Watchdog)\nhide_css_errors = True          # Hide errors and warnings generated by cssutils.\ntiming_enabled = True           # Run performance timer\nmarkdown_docs = False           # Generate a markdown files that provides a quick syntax and clashing alias reference.\nhtml_docs = True                # Generate a html file that provides a quick syntax and clashing alias reference.\nrst_docs = False                # Generate a sphinx rst file that provides a quick syntax and clashing alias reference.\nhuman_readable = True           # Generate a standard human readable css file.\nminify = True                   # Generate a minified version of the css file.\nmedia_queries_enabled = True    # Generate breakpoint and scaling media queries.\n\n# ...Not Implemented Yet...\n# use_hex = True                # Using hex and browser performance: http://jsperf.com/css-color-names-vs-hex-codes/18\n# extra_dry = False             # Combine identical CSS discovered under different class selector names.\n# http_server = False           # Auto-Start a simple webserver on localhost:8080.\n# public_url = False            # Uses ngrok to generate a temporary public url for testings and demo purposes.\n# condense_classes = False      # Edits HTML Files after discovering common patterns (Not DRY do not implement).\n\n# Unit Conversion Defaults\nuse_em = True\nbase = 16\n\n\ndef px_to_em(pixels):\n    """ Convert a numeric value from px to em using ``settings.base`` as the unit conversion factor.\n\n    **Rules:**\n\n    - ``pixels`` shall only contain [0-9.-].\n    - Inputs that contain any other value are simply passed through unchanged.\n    - Default ``base`` is 16 meaning ``16px = 1rem``\n\n    **Note:** Does not check the ``property_name`` or ``use_em`` values.  Rather, it blindly converts\n    whatever input is provided.  The calling method is expected to know what it is doing.\n\n    Rounds float to a maximum of 4 decimal places.\n\n    :type pixels: str, int, float\n    :param pixels: A numeric value with the units stripped.\n    :return: (str)\n\n        - If the input is convertible return the converted number as a string with the units ``em``\n          appended to the end.\n        - If the input is not convertible return the unprocessed input.\n\n    >>> from blowdrycss_settings import px_to_em\n    >>> # settings.use_em = True\n    >>> px_to_em(pixels=\'-16.0\')\n    -1em\n    >>> # settings.use_em = False\n    >>> px_to_em(pixels=\'42px\')\n    42px\n    >>> # Invalid input passes through.\n    >>> px_to_em(pixels=\'invalid\')\n    invalid\n\n    """\n    if set(str(pixels)) <= set(digits + \'-.\'):\n        em = float(pixels) / float(base)\n        em = round(em, 4)\n        em = str(em) + \'em\'                             # Add \'em\'.\n        return em\n    return pixels\n\n\n# Default Screen Breakpoints / Transition Triggers\n# Tuple Format (Lower Limit, Upper Limit) in pixels.\n# Note: These values change if unit conversion is enabled i.e. ``use_em`` is ``True``.\n# Common Screen Resolutions: https://en.wikipedia.org/wiki/List_of_common_resolutions\nxxsmall = (px_to_em(0), px_to_em(120))          # 0.0 - 7.5em\nxsmall = (px_to_em(121), px_to_em(240))         # 7.5625 - 15.0em\nsmall = (px_to_em(241), px_to_em(480))          # 15.0625 - 30.0em\nmedium = (px_to_em(481), px_to_em(720))         # 30.0625 - 45.0em  # Typical mobile device break point @ 720px.\nlarge = (px_to_em(721), px_to_em(1024))         # 45.0625 - 64.0em\nxlarge = (px_to_em(1025), px_to_em(1366))       # 64.0625 - 85.375em\nxxlarge = (px_to_em(1367), px_to_em(1920))      # 85.4375 - 120.0em\ngiant = (px_to_em(1921), px_to_em(2560))        # 120.0625 - 160.0em\nxgiant = (px_to_em(2561), px_to_em(2800))       # 160.0625 - 175.0em\nxxgiant = (px_to_em(2801), px_to_em(10**6))     # 175.0625 - float(\'inf\')) # Python 2.x representation of Infinity.\n\n# Custom CSS Property Syntax\ncustom_property_alias_dict = {\n    \'background\': {\'bg-\', },\n    \'background-color\': {\'bgc-\', \'bg-c-\', \'bg-color-\', },\n    \'color\': {\'c-\', },\n    \'font-size\': {\'fsize-\', \'f-size-\', },\n    \'font-weight\': {\'fweight-\', \'f-weight-\', },\n    \'height\': {\'h-\', },\n    \'margin\': {\'m-\', },\n    \'margin-top\': {\'m-top-\', },\n    \'margin-bottom\': {\'m-bot-\', },\n    \'padding\': {\'p-\', \'pad-\', },\n    \'padding-top\': {\'p-top-\', },\n    \'position\': {\'pos-\', },\n    \'text-align\': {\'talign-\', \'t-align-\', },\n    \'vertical-align\': {\'valign-\', \'v-align-\', },\n    \'width\': {\'w-\', },\n}\n\n# Patches cssutils - Generally this does not need to be edited.\nprofile._MACROS[\'length\'] = r\'0|{num}(em|ex|px|in|cm|mm|pt|pc|q|ch|rem|vw|vh|vmin|vmax)\'\nprofile._MACROS[\'positivelength\'] = r\'0|{positivenum}(em|ex|px|in|cm|mm|pt|pc|q|ch|rem|vw|vh|vmin|vmax)\'\nprofile._MACROS[\'angle\'] = r\'0|{num}(deg|grad|rad|turn)\'\nprofile._resetProperties()\n\n'

def write_blowdrycss_settings_dot_py():
    """ If the file doesn't currently exist, then write a settings override file named ``blowdrycss_settings.py``
    to the users current working directory.

    :return: None

    """
    if not os.path.isfile('blowdrycss_settings.py'):
        with open('blowdrycss_settings.py', 'wb') as (generic_file):
            generic_file.write(bytearray(blowdrycss_settings_dot_py, 'utf-8'))
        print('=' * 44 + '\n Built "blowdrycss_settings.py".\n\n' + ' Open "blowdrycss_settings.py" to customize\n blowdrycss for your project.\n' + '=' * 44)