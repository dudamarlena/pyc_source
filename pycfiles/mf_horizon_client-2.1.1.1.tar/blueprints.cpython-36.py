# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/stanley/PycharmProjects/horizon-python-client/src/mf_horizon_client/client/pipelines/blueprints.py
# Compiled at: 2020-04-13 11:00:26
# Size of source mod 2**32: 6818 bytes
from enum import Enum

class BlueprintType(Enum):
    __doc__ = "\n    A blueprint is a pipeline template in horizon, and must be specified when creating a new pipeline\n\n\n    Nonlinear\n    ===============================================================================================================\n    A nonlinear pipeline combines nonlinear feature generation and selection with a nonlinear regressor to generate\n    forecasts that are at a specific target in the future.\n\n    A number of different regressor types are available here:\n\n        1. Mondrian Forest. An adaptation of the probabilistic Mondrian Forest algorithm - https://arxiv.org/abs/1406.2673\n           Provides Bayesian-esque error bounds, and is our recommended nonlinear regressor of choice.\n        2. XG Boost\n        3. Random Forest.\n\n    The stages of a nonlinear pipeline are as follows:\n\n    A. Forecast Specification\n    B. Stationarization\n    C. Feature Generation\n    D. Feature Filtering\n    E. Feature Refinement\n    F. Nonlinear Backtesting\n    G. Nonlinear Prediction\n\n    Linear\n    ===============================================================================================================\n    A nonlinear pipeline combines nonlinear feature generation with a nonlinear regressor to generate\n    forecasts that are at a specific target in the future.\n\n    The regressor used is a Variational Bayesian Linear Regressor\n\n    The stages of a linear pipeline are as follows:\n\n    A. Forecast Specification\n    B. Stationarization\n    C. Nonlinear Feature Generation\n    D. Feature Filtering\n    E. Feature Refinement\n    F. Linear Backtesting\n    G. Linear Prediction\n\n    Fast Forecasting\n    ===============================================================================================================\n    The fast forecasting pipeline is intended to be used as a quick assessment of a dataset's predictive performance\n    It is identical to the linear pipeline, but does not include Feature Refinement.\n\n    The stages of a linear pipeline are as follows:\n\n    A. Forecast Specification\n    B. Stationarization\n    C. Nonlinear Feature Generation\n    D. Feature Filtering\n    E. Linear Backtesting\n    F. Linear Prediction\n\n    Feature Selection\n    ===============================================================================================================\n    The feature selection pipeline assumes that the input data set already encodes information about a signal's\n    past, such that a horizontal observation vector may be used in a traditional regression sense to map to a target\n    value at a point in the future.\n\n\n          Feat1 | Feat2 | Feat3 | .... | FeatP\n    Obs1  -------------------------------------   t\n    Obs2  -------------------------------------   t-1\n    Obs3  -------------------------------------   t-2\n    ...   .....................................\n    ...   .....................................\n    ObsN  -------------------------------------   t-N\n\n    Two stages of feature selection are then used in order to maximize predictive performance of the feature set\n    on specified future points for a given target\n\n\n    The stages of a linear pipeline are as follows:\n\n    A. Forecast Specification\n    B. Feature Filtering\n    E. Feature Refinement\n\n    Feature Discovery\n    ===============================================================================================================\n    The feature discovery pipeline discovers features to maximize performance for a particular forecast target,\n    at a specified point in the future. Unlike the feature selection pipeline, it does not assume that the signal\n    set has already encoded historical information about the original data's past.\n\n    The stages of a feature discovery pipeline are as follows:\n\n    A. Forecast Specification\n    B. Feature Generation\n    C. Feature Filtering\n    D. Feature Refinement\n\n    Signal Encoding\n    ===============================================================================================================\n    One of Horizon's feature generation methods is to encode signals in the frequency domain, extracting historic\n    lags that will efficiently represent the information contained within them.\n\n    The signal encoding pipeline allows for this functionality to be isolated, where the output is a feature\n    set that has encoded past information about a signal that can be exported from the platform\n\n    The stages of a signal encoding pipeline are as follows:\n\n    A. Forecast Specification\n    B. Feature Generation\n    C. Feature Filtering\n\n    Stationarization\n    ===============================================================================================================\n    Stationarize a signal set and specified target using Augmented Dicky Fuller analysis, and a detrending method\n    for the specified target.\n\n    The stages of a stationarization pipeline are as follows:\n\n    A. Forecast Specification\n    B. Stationarization\n\n    Time-Series Regression\n    ===============================================================================================================\n    Run Horizon's regression algorithms on a pre-encoded signal set.\n\n    Small Data Forecasting\n    ===============================================================================================================\n    Time-series pipeline for small data. Does not contain any backtesting, and uses all the data for model training.\n\n    A. Forecast Specification\n    B. Stationarization\n    C. Linear Feature Generation\n    D. Feature Filtering\n    E. Feature Refinement\n    G. Linear Prediction\n\n    Variational Forecasting\n    ===============================================================================================================\n    Creates a stacked lag-embedding matrix by combining a two-stage feature generation and selection process, with\n    lag-only feature generation.\n\n    A. Forecast Specification\n    B. Stationarization\n    C. Linear Feature Generation\n    D. Feature Filtering\n    E. Linear Feature Generation\n    F. Feature Filtering\n    G. Linear Backtesting\n    H. Linear Prediction\n\n    Custom\n    ===============================================================================================================\n    Advanced: Contains only a forecast specification stage for adding stages manually.\n\n    N.B. There is no validation on stage addition.\n    "
    nonlinear = 'NONLINEAR'
    linear = 'LINEAR'
    fast_forecasting = 'FAST_FORECAST'
    feature_selection = 'FEATURE_SELECTION'
    feature_discovery = 'FEATURE_DISCOVERY'
    signal_encoding = 'SIGNAL_ENCODING'
    stationarisation = 'STATIONARISATION'
    time_series_regression = 'REGRESSION_ONLY'
    variational_forecasting = 'VARIATIONAL_FORECASTING'
    custom = 'CUSTOM'
    small_data = 'SMALL_DATA'