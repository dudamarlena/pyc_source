# uncompyle6 version 3.6.7
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: /usr/local/lib/python3.6/dist-packages/configfiles/gen/patcher.py
# Compiled at: 2018-11-05 09:00:56
# Size of source mod 2**32: 2240 bytes
__doc__ = '\nGenerates update scripts to patch files\n'
from diff_match_patch import diff_match_patch
import os.path, os
from ..local import DotConfigFiles
diff_match_patch = diff_match_patch()
TEMPLATE = '\n# GENERATED BY PATCHER.py\n# Patches files {}\nfrom diff_match_patch import diff_match_patch\ndiff_match_patch = diff_match_patch()\n\npatches = {}\n\nfor f in patches:\n    with open(f[0], "r") as re:\n        text = re.read()\n    text, results = diff_match_patch.patch_apply(diff_match_patch.patch_fromText(f[1]), text)\n    if not all(results):\n        raise ValueError(\'\'\'file differs to much from original\'\'\')\n    with open(f[0], "w") as wi:\n        wi.write(text)\n    print("Updated " + f[0])\n'
TEMPLATE_WRITE = '\n# GENERATED BY PATCHER.py\n# Creates files {}\nimport os\n\nfiles = {}\n\nfor f, c in files:\n    if not os.path.exists(os.path.dirname(f)) and os.path.dirname(f) != "":\n        os.makedirs(os.path.dirname(f))\n        print("Created directory " + os.path.dirname(f))\n    with open(f, "w") as wi:\n        wi.write(c)\nprint("Create files")\n'

def create_template_write(db: DotConfigFiles, file_array):
    """
    Create a write script for files created
    """
    home_dir = os.path.dirname(db.load_file)
    files = []
    for f in file_array:
        p = os.path.join(home_dir, f)
        with open(p, 'r') as (g):
            files.append((f, g.read()))

    files = repr(files)
    return TEMPLATE_WRITE.format(repr(file_array), files)


def create_template_update(db: DotConfigFiles, file_array):
    """
    Create a patch script
    """
    home_dir = os.path.dirname(db.load_file)
    files = []
    for f in file_array:
        entry = [f, None]
        with db.filemon.open_version(f, 'r') as (original):
            with open(os.path.join(home_dir, f), 'r') as (newer):
                orig = original.read().decode('utf-8')
                new = newer.read()
                diffs = diff_match_patch.diff_main(orig, new)
                print(diffs)
                diff_match_patch.diff_cleanupSemantic(diffs)
                entry[1] = diff_match_patch.patch_make(orig, diffs)
                entry[1] = diff_match_patch.patch_toText(entry[1])
        files.append(entry)

    files = repr(files)
    return TEMPLATE.format(repr(file_array), files)