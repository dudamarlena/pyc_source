# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/mark/devel/grandma/tests/test_grandma.py
# Compiled at: 2011-09-30 09:05:02
import unittest
from nose.tools import ok_
from grandma.grandma import t_ways

def check_combinations(result, gold):
    """
    Check if the required results are contained in the computed
    combinations.
    """
    cases = list(result)
    print cases
    for g in gold:
        contained = False
        for r in cases:
            contained = True
            for k in g.keys():
                if g[k] != r[k]:
                    contained = False
                    break

            if contained:
                break

        ok_(contained, '%s is not contained in computed result!' % g)


def check_invalid_combinations(result, gold):
    """
    Verify that the results do not contain any invalid combinations.
    """
    for g in gold:
        contained = False
        for r in result:
            contained = True
            for k in g.keys():
                if g[k] != r[k]:
                    contained = False
                    break

            if contained:
                break

        ok_(not contained, '%s is contained in computed result!' % g)


def test_1_way():
    """Test 1-way combination of three parameters."""
    data = {'p1': [
            'v1_1', 'v1_2', 'v1_3'], 
       'p2': [
            'v2_1', 'v2_2', 'v2_3', 'v2_4'], 
       'p3': [
            'v3_1', 'v3_2', 'v3_3', 'v3_4', 'v3_5']}
    constraints = []
    result = t_ways(data, 1)
    gold = [{'p1': 'v1_1'}, {'p1': 'v1_2'}, {'p1': 'v1_3'}, {'p2': 'v2_1'}, {'p2': 'v2_2'}, {'p2': 'v2_3'}, {'p2': 'v2_4'}, {'p3': 'v3_1'}, {'p3': 'v3_2'}, {'p3': 'v3_3'}, {'p3': 'v3_4'}, {'p3': 'v3_5'}]
    check_combinations(result, gold)


def test_2_way():
    """Test 2-way combination of three parameters."""
    data = {'p1': [
            'v1_1', 'v1_2', 'v1_3'], 
       'p2': [
            'v2_1', 'v2_2', 'v2_3', 'v2_4'], 
       'p3': [
            'v3_1', 'v3_2', 'v3_3', 'v3_4', 'v3_5']}
    constraints = []
    result = t_ways(data, 2)
    gold = [{'p1': 'v1_1', 'p2': 'v2_1'}, {'p1': 'v1_2', 'p2': 'v2_1'}, {'p1': 'v1_3', 'p2': 'v2_1'}, {'p1': 'v1_1', 'p2': 'v2_2'}, {'p1': 'v1_2', 'p2': 'v2_2'}, {'p1': 'v1_3', 'p2': 'v2_2'}, {'p1': 'v1_1', 'p2': 'v2_3'}, {'p1': 'v1_2', 'p2': 'v2_3'}, {'p1': 'v1_3', 'p2': 'v2_3'}, {'p1': 'v1_1', 'p2': 'v2_4'}, {'p1': 'v1_2', 'p2': 'v2_4'}, {'p1': 'v1_3', 'p2': 'v2_4'}, {'p1': 'v1_1', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p3': 'v3_3'}, {'p1': 'v1_1', 'p3': 'v3_4'}, {'p1': 'v1_2', 'p3': 'v3_4'}, {'p1': 'v1_3', 'p3': 'v3_4'}, {'p1': 'v1_1', 'p3': 'v3_5'}, {'p1': 'v1_2', 'p3': 'v3_5'}, {'p1': 'v1_3', 'p3': 'v3_5'}, {'p2': 'v2_1', 'p3': 'v3_1'}, {'p2': 'v2_2', 'p3': 'v3_1'}, {'p2': 'v2_3', 'p3': 'v3_1'}, {'p2': 'v2_4', 'p3': 'v3_1'}, {'p2': 'v2_1', 'p3': 'v3_2'}, {'p2': 'v2_2', 'p3': 'v3_2'}, {'p2': 'v2_3', 'p3': 'v3_2'}, {'p2': 'v2_4', 'p3': 'v3_2'}, {'p2': 'v2_1', 'p3': 'v3_3'}, {'p2': 'v2_2', 'p3': 'v3_3'}, {'p2': 'v2_3', 'p3': 'v3_3'}, {'p2': 'v2_4', 'p3': 'v3_3'}, {'p2': 'v2_1', 'p3': 'v3_4'}, {'p2': 'v2_2', 'p3': 'v3_4'}, {'p2': 'v2_3', 'p3': 'v3_4'}, {'p2': 'v2_4', 'p3': 'v3_4'}, {'p2': 'v2_1', 'p3': 'v3_5'}, {'p2': 'v2_2', 'p3': 'v3_5'}, {'p2': 'v2_3', 'p3': 'v3_5'}, {'p2': 'v2_4', 'p3': 'v3_5'}]
    check_combinations(result, gold)


def test_3_way():
    """
    Test 3-way combination of three parameters. All possible combinations
    must be contained! 
    """
    data = {'p1': [
            'v1_1', 'v1_2', 'v1_3'], 
       'p2': [
            'v2_1', 'v2_2', 'v2_3', 'v2_4'], 
       'p3': [
            'v3_1', 'v3_2', 'v3_3', 'v3_4', 'v3_5']}
    constraints = []
    result = t_ways(data, 3)
    gold = [{'p1': 'v1_1', 'p2': 'v2_1', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p2': 'v2_1', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_3'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_4'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_5'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_3'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_4'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_5'}, {'p1': 'v1_1', 'p2': 'v2_4', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p2': 'v2_4', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p2': 'v2_4', 'p3': 'v3_3'}, {'p1': 'v1_1', 'p2': 'v2_4', 'p3': 'v3_4'}, {'p1': 'v1_1', 'p2': 'v2_4', 'p3': 'v3_5'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_4'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_5'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_4'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_5'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_4'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_5'}, {'p1': 'v1_2', 'p2': 'v2_4', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p2': 'v2_4', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p2': 'v2_4', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p2': 'v2_4', 'p3': 'v3_4'}, {'p1': 'v1_2', 'p2': 'v2_4', 'p3': 'v3_5'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_4'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_5'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_4'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_5'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_4'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_5'}, {'p1': 'v1_3', 'p2': 'v2_4', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p2': 'v2_4', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p2': 'v2_4', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p2': 'v2_4', 'p3': 'v3_4'}, {'p1': 'v1_3', 'p2': 'v2_4', 'p3': 'v3_5'}]
    check_combinations(result, gold)


def test_incompats():
    """
    Test incompatibilities. All possible combinations
    must be contained! 
    """
    data = {'p1': [
            'v1_1', 'v1_2', 'v1_3'], 
       'p2': [
            'v2_1', 'v2_2', 'v2_3', 'v2_4'], 
       'p3': [
            'v3_1', 'v3_2', 'v3_3', 'v3_4', 'v3_5']}
    incompats = [
     {'p2': [
             'v2_4'], 
        'p3': [
             'v3_4', 'v3_5']}]
    constraints = []
    result = t_ways(data, 3, incompats=incompats)
    gold = [{'p1': 'v1_1', 'p2': 'v2_1', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p2': 'v2_1', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p2': 'v2_1', 'p3': 'v3_3'}, {'p1': 'v1_1', 'p2': 'v2_1', 'p3': 'v3_4'}, {'p1': 'v1_1', 'p2': 'v2_1', 'p3': 'v3_5'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_3'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_4'}, {'p1': 'v1_1', 'p2': 'v2_2', 'p3': 'v3_5'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_3'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_4'}, {'p1': 'v1_1', 'p2': 'v2_3', 'p3': 'v3_5'}, {'p1': 'v1_1', 'p2': 'v2_4', 'p3': 'v3_1'}, {'p1': 'v1_1', 'p2': 'v2_4', 'p3': 'v3_2'}, {'p1': 'v1_1', 'p2': 'v2_4', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_4'}, {'p1': 'v1_2', 'p2': 'v2_1', 'p3': 'v3_5'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_4'}, {'p1': 'v1_2', 'p2': 'v2_2', 'p3': 'v3_5'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_3'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_4'}, {'p1': 'v1_2', 'p2': 'v2_3', 'p3': 'v3_5'}, {'p1': 'v1_2', 'p2': 'v2_4', 'p3': 'v3_1'}, {'p1': 'v1_2', 'p2': 'v2_4', 'p3': 'v3_2'}, {'p1': 'v1_2', 'p2': 'v2_4', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_4'}, {'p1': 'v1_3', 'p2': 'v2_1', 'p3': 'v3_5'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_4'}, {'p1': 'v1_3', 'p2': 'v2_2', 'p3': 'v3_5'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_3'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_4'}, {'p1': 'v1_3', 'p2': 'v2_3', 'p3': 'v3_5'}, {'p1': 'v1_3', 'p2': 'v2_4', 'p3': 'v3_1'}, {'p1': 'v1_3', 'p2': 'v2_4', 'p3': 'v3_2'}, {'p1': 'v1_3', 'p2': 'v2_4', 'p3': 'v3_3'}]
    gold_invalid = [{'p2': 'v2_4', 'p3': 'v3_4'}, {'p2': 'v2_4', 'p3': 'v3_5'}]
    check_invalid_combinations(result, gold_invalid)