# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/rsutton/workarea/env/eulxml/lib/python2.7/site-packages/eulxml/xpath/parsetab.py
# Compiled at: 2016-04-26 10:58:33
_tabversion = '3.8'
_lr_method = 'LALR'
_lr_signature = '56748FBAE38180EF52A4F153B0081CF8'
_lr_action_items = {'CLOSE_BRACKET': ([1, 3, 5, 7, 8, 10, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 26, 28, 30, 31, 33, 34, 35, 36, 38, 41, 53, 54, 57, 61, 62, 63, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 92, 93], [-24, -32, -16, -39, -21, -18, -29, -44, -53, -28, -37, -43, -15, -14, -17, -35, -52, -42, -45, -48, -25, -39, -20, -11, -54, -19, -51, -39, -47, -26, 90, -49, -55, -36, -38, -46, -7, -6, -2, -10, -1, -8, -5, -3, -4, -9, -22, -23, -13, -12, -33, -27, -50, -56, -34]), 'ABBREV_PATH_SEP': ([0, 1, 3, 4, 7, 8, 9, 11, 12, 13, 14, 17, 19, 21, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 61, 63, 67, 68, 69, 71, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93], [2, -24, -32, 2, -39, -21, 2, -29, -44, -53, -28, -37, -43, 56, 58, -35, -52, -42, -45, -48, 2, -25, -39, 56, 2, -54, 56, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -51, -39, -47, -26, -49, -55, -36, -38, -46, -22, -23, 56, 56, -33, -27, -50, 2, -56, -34]), 'NCNAME': ([0, 2, 4, 9, 10, 18, 25, 27, 32, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 64, 82, 91], [7, 34, 7, 7, 34, 54, -31, 34, 7, 7, 69, -30, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 34, 34, 34, 34, 69, 69, 7]), 'DIV_OP': ([1, 3, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 26, 28, 30, 31, 33, 34, 35, 36, 38, 40, 41, 53, 54, 57, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94], [-24, -32, -16, -39, -21, -18, -29, -44, -53, -28, 48, -37, -43, -15, -14, -17, -35, -52, -42, -45, -48, -25, -39, -20, -11, -54, 48, -19, -51, -39, -47, -26, 48, -49, 48, -55, -36, -38, -46, -7, 48, 48, -10, 48, -8, 48, 48, 48, -9, -22, -23, -13, -12, -33, -27, -50, -56, -34, 48]), 'COLON': ([7, 34, 54], [39, 64, 82]), 'REL_OP': ([1, 3, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 26, 28, 30, 31, 33, 34, 35, 36, 38, 40, 41, 53, 54, 57, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94], [-24, -32, -16, -39, -21, -18, -29, -44, -53, -28, 51, -37, -43, -15, -14, -17, -35, -52, -42, -45, -48, -25, -39, -20, -11, -54, 51, -19, -51, -39, -47, -26, 51, -49, 51, -55, -36, -38, -46, -7, -6, 51, -10, 51, -8, -5, 51, -4, -9, -22, -23, -13, -12, -33, -27, -50, -56, -34, 51]), 'MINUS_OP': ([0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94], [4, -24, -32, 4, -16, -39, -21, 4, -18, -29, -44, -53, -28, 44, -37, -43, -15, -14, -17, -35, -52, -42, -45, -48, 4, -25, -39, -20, -11, 4, -54, 44, -19, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -51, -39, -47, -26, 44, -49, 44, -55, -36, -38, -46, -7, -6, 44, -10, 44, -8, -5, 44, 44, -9, -22, -23, -13, -12, -33, -27, -50, 4, -56, -34, 44]), 'OPEN_BRACKET': ([1, 3, 7, 12, 13, 17, 19, 22, 23, 26, 28, 30, 31, 33, 34, 38, 53, 54, 57, 61, 63, 67, 68, 69, 71, 88, 89, 90, 92, 93], [32, -32, -39, -44, -53, -37, -43, 32, -35, -52, -42, -45, -48, 32, -39, -54, -51, -39, -47, 32, -49, -55, -36, -38, -46, -33, 32, -50, -56, -34]), 'OR_OP': ([1, 3, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 26, 28, 30, 31, 33, 34, 35, 36, 38, 40, 41, 53, 54, 57, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94], [-24, -32, -16, -39, -21, -18, -29, -44, -53, -28, 47, -37, -43, -15, -14, -17, -35, -52, -42, -45, -48, -25, -39, -20, -11, -54, 47, -19, -51, -39, -47, -26, 47, -49, 47, -55, -36, -38, -46, -7, -6, -2, -10, -1, -8, -5, -3, -4, -9, -22, -23, -13, -12, -33, -27, -50, -56, -34, 47]), 'OPEN_PAREN': ([0, 4, 6, 9, 24, 29, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 70, 91], [9, 9, 37, 9, 60, -41, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, -40, 9]), 'PATH_SEP': ([0, 1, 3, 4, 7, 8, 9, 11, 12, 13, 14, 17, 19, 21, 22, 23, 26, 28, 30, 31, 32, 33, 34, 35, 37, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 61, 63, 67, 68, 69, 71, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93], [10, -24, -32, 10, -39, -21, 10, -29, -44, -53, -28, -37, -43, 55, 59, -35, -52, -42, -45, -48, 10, -25, -39, 55, 10, -54, 55, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, -51, -39, -47, -26, -49, -55, -36, -38, -46, -22, -23, 55, 55, -33, -27, -50, 10, -56, -34]), 'ABBREV_STEP_PARENT': ([0, 2, 4, 9, 10, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 91], [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]), 'INTEGER': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]), 'ABBREV_STEP_SELF': ([0, 2, 4, 9, 10, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 91], [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14]), '$end}
_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y

del _lr_action_items
_lr_goto_items = {'NodeTest': ([0, 2, 4, 9, 10, 27, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 91], [1, 1, 1, 1, 1, 61, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 'ArgumentList': ([37], [65]), 'PredicateList': ([1, 61], [33, 89]), 'FuncQName': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]), 'NameTest': ([0, 2, 4, 9, 10, 27, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 91], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), 'Expr': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [16, 36, 40, 62, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 94]), 'AxisSpecifier': ([0, 2, 4, 9, 10, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 91], [27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27]), 'Number': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 'VariableReference': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]), 'QName': ([0, 2, 4, 9, 10, 18, 27, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 91], [17, 17, 17, 17, 17, 53, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]), 'Step': ([0, 2, 4, 9, 10, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 91], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 83, 84, 8, 8, 8]), 'Predicate': ([1, 22, 33, 61, 89], [31, 57, 63, 31, 63]), 'FunctionCall': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]), 'AbbreviatedAbsoluteLocationPath': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), 'FormalArguments': ([6], [38]), 'AbsoluteLocationPath': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]), 'RelativeLocationPath': ([0, 2, 4, 9, 10, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58, 59, 91], [21, 35, 21, 21, 41, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 85, 86, 21]), 'FilterExpr': ([0, 4, 9, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 91], [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22])}
_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y

del _lr_goto_items
_lr_productions = [
 (
  "S' -> Expr", "S'", 1, None, None, None),
 (
  'Expr -> Expr OR_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 44),
 (
  'Expr -> Expr AND_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 45),
 (
  'Expr -> Expr EQUAL_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 46),
 (
  'Expr -> Expr REL_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 47),
 (
  'Expr -> Expr PLUS_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 48),
 (
  'Expr -> Expr MINUS_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 49),
 (
  'Expr -> Expr MULT_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 50),
 (
  'Expr -> Expr DIV_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 51),
 (
  'Expr -> Expr MOD_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 52),
 (
  'Expr -> Expr UNION_OP Expr', 'Expr', 3, 'p_expr_boolean', 'parserules.py', 53),
 (
  'Expr -> MINUS_OP Expr', 'Expr', 2, 'p_expr_unary', 'parserules.py', 59),
 (
  'Expr -> FilterExpr PATH_SEP RelativeLocationPath', 'Expr', 3, 'p_path_expr_binary', 'parserules.py', 69),
 (
  'Expr -> FilterExpr ABBREV_PATH_SEP RelativeLocationPath', 'Expr', 3, 'p_path_expr_binary', 'parserules.py', 70),
 (
  'Expr -> RelativeLocationPath', 'Expr', 1, 'p_path_expr_unary', 'parserules.py', 76),
 (
  'Expr -> AbsoluteLocationPath', 'Expr', 1, 'p_path_expr_unary', 'parserules.py', 77),
 (
  'Expr -> AbbreviatedAbsoluteLocationPath', 'Expr', 1, 'p_path_expr_unary', 'parserules.py', 78),
 (
  'Expr -> FilterExpr', 'Expr', 1, 'p_path_expr_unary', 'parserules.py', 79),
 (
  'AbsoluteLocationPath -> PATH_SEP', 'AbsoluteLocationPath', 1, 'p_absolute_location_path_rootonly', 'parserules.py', 89),
 (
  'AbsoluteLocationPath -> PATH_SEP RelativeLocationPath', 'AbsoluteLocationPath', 2, 'p_absolute_location_path_subpath', 'parserules.py', 95),
 (
  'AbbreviatedAbsoluteLocationPath -> ABBREV_PATH_SEP RelativeLocationPath', 'AbbreviatedAbsoluteLocationPath', 2, 'p_abbreviated_absolute_location_path', 'parserules.py', 101),
 (
  'RelativeLocationPath -> Step', 'RelativeLocationPath', 1, 'p_relative_location_path_simple', 'parserules.py', 107),
 (
  'RelativeLocationPath -> RelativeLocationPath PATH_SEP Step', 'RelativeLocationPath', 3, 'p_relative_location_path_binary', 'parserules.py', 113),
 (
  'RelativeLocationPath -> RelativeLocationPath ABBREV_PATH_SEP Step', 'RelativeLocationPath', 3, 'p_relative_location_path_binary', 'parserules.py', 114),
 (
  'Step -> NodeTest', 'Step', 1, 'p_step_nodetest', 'parserules.py', 124),
 (
  'Step -> NodeTest PredicateList', 'Step', 2, 'p_step_nodetest_predicates', 'parserules.py', 130),
 (
  'Step -> AxisSpecifier NodeTest', 'Step', 2, 'p_step_axis_nodetest', 'parserules.py', 136),
 (
  'Step -> AxisSpecifier NodeTest PredicateList', 'Step', 3, 'p_step_axis_nodetest_predicates', 'parserules.py', 142),
 (
  'Step -> ABBREV_STEP_SELF', 'Step', 1, 'p_step_abbrev', 'parserules.py', 148),
 (
  'Step -> ABBREV_STEP_PARENT', 'Step', 1, 'p_step_abbrev', 'parserules.py', 149),
 (
  'AxisSpecifier -> AXISNAME AXIS_SEP', 'AxisSpecifier', 2, 'p_axis_specifier_full', 'parserules.py', 159),
 (
  'AxisSpecifier -> ABBREV_AXIS_AT', 'AxisSpecifier', 1, 'p_axis_specifier_abbrev', 'parserules.py', 165),
 (
  'NodeTest -> NameTest', 'NodeTest', 1, 'p_node_test_name_test', 'parserules.py', 175),
 (
  'NodeTest -> NODETYPE OPEN_PAREN CLOSE_PAREN', 'NodeTest', 3, 'p_node_test_type_simple', 'parserules.py', 181),
 (
  'NodeTest -> NODETYPE OPEN_PAREN LITERAL CLOSE_PAREN', 'NodeTest', 4, 'p_node_test_type_literal', 'parserules.py', 190),
 (
  'NameTest -> STAR_OP', 'NameTest', 1, 'p_name_test_star', 'parserules.py', 203),
 (
  'NameTest -> NCNAME COLON STAR_OP', 'NameTest', 3, 'p_name_test_prefix_star', 'parserules.py', 209),
 (
  'NameTest -> QName', 'NameTest', 1, 'p_name_test_qname', 'parserules.py', 215),
 (
  'QName -> NCNAME COLON NCNAME', 'QName', 3, 'p_qname_prefixed', 'parserules.py', 227),
 (
  'QName -> NCNAME', 'QName', 1, 'p_qname_unprefixed', 'parserules.py', 233),
 (
  'FuncQName -> NCNAME COLON FUNCNAME', 'FuncQName', 3, 'p_funcqname_prefixed', 'parserules.py', 239),
 (
  'FuncQName -> FUNCNAME', 'FuncQName', 1, 'p_funcqname_unprefixed', 'parserules.py', 245),
 (
  'FilterExpr -> VariableReference', 'FilterExpr', 1, 'p_filter_expr_simple', 'parserules.py', 255),
 (
  'FilterExpr -> LITERAL', 'FilterExpr', 1, 'p_filter_expr_simple', 'parserules.py', 256),
 (
  'FilterExpr -> Number', 'FilterExpr', 1, 'p_filter_expr_simple', 'parserules.py', 257),
 (
  'FilterExpr -> FunctionCall', 'FilterExpr', 1, 'p_filter_expr_simple', 'parserules.py', 258),
 (
  'FilterExpr -> OPEN_PAREN Expr CLOSE_PAREN', 'FilterExpr', 3, 'p_filter_expr_grouped', 'parserules.py', 266),
 (
  'FilterExpr -> FilterExpr Predicate', 'FilterExpr', 2, 'p_filter_expr_predicate', 'parserules.py', 272),
 (
  'PredicateList -> Predicate', 'PredicateList', 1, 'p_predicate_list_single', 'parserules.py', 285),
 (
  'PredicateList -> PredicateList Predicate', 'PredicateList', 2, 'p_predicate_list_recursive', 'parserules.py', 291),
 (
  'Predicate -> OPEN_BRACKET Expr CLOSE_BRACKET', 'Predicate', 3, 'p_predicate', 'parserules.py', 298),
 (
  'VariableReference -> DOLLAR QName', 'VariableReference', 2, 'p_variable_reference', 'parserules.py', 308),
 (
  'Number -> FLOAT', 'Number', 1, 'p_number', 'parserules.py', 318),
 (
  'Number -> INTEGER', 'Number', 1, 'p_number', 'parserules.py', 319),
 (
  'FunctionCall -> FuncQName FormalArguments', 'FunctionCall', 2, 'p_function_call', 'parserules.py', 329),
 (
  'FormalArguments -> OPEN_PAREN CLOSE_PAREN', 'FormalArguments', 2, 'p_formal_arguments_empty', 'parserules.py', 338),
 (
  'FormalArguments -> OPEN_PAREN ArgumentList CLOSE_PAREN', 'FormalArguments', 3, 'p_formal_arguments_list', 'parserules.py', 344),
 (
  'ArgumentList -> Expr', 'ArgumentList', 1, 'p_argument_list_single', 'parserules.py', 350),
 (
  'ArgumentList -> ArgumentList COMMA Expr', 'ArgumentList', 3, 'p_argument_list_recursive', 'parserules.py', 356)]