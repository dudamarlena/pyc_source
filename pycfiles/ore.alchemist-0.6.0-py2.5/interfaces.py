# uncompyle6 version 3.7.4
# Python bytecode 2.5 (62131)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.5-i386/egg/ore/alchemist/interfaces.py
# Compiled at: 2008-09-11 20:29:53
from zope.interface import Interface, Attribute, directlyProvides
from zope.interface.common.mapping import IEnumerableMapping
from zope.app.container.interfaces import IContainer
from zope import schema

class TransmutationException(Exception):
    """
    schema translation exception
    """
    pass


class IAlchemistTransmutation(Interface):

    def transmute(schema, **kw):
        """
        translates the schema and returns the translation.
        
        translations and kw are specific to the translation being performed.
        """
        pass


class IDatabaseEngine(Interface):
    """
    configuration and access to pooled database connection
    """
    pass


class IEngineVocabularyUtility(Interface):
    engines = schema.Iterable(title='RDB Engines', description='Available RDB Engines')


class IDomainVocabularyUtility(Interface):
    domain_classes = schema.Iterable(title='Domain Classes', description='Registered Domain Classes')


class IAlchemistContainer(IContainer):
    """
    a domain record container
    """
    domain_class = schema.Choice(title='Domain Class', description='The Python Path of the Domain Class', required=True, vocabulary='Alchemist Domain Classes')
    domain_model = Attribute('domain_model', 'The domain class')

    def query(**kw):
        """
        return the specified children of the container
        """
        pass

    def batch(order_by=(), start=0, limit=20):
        """
        return a batch of contents with the given offset and size, and ordered
        by given listing of columns
        """
        pass


class ITableSchema(Interface):
    """
    base interface for autogenerated schemas/interfaces derived
    from sqlalchemy table definitions
    """
    pass


class IAlchemistContent(ITableSchema):
    """
    base interface for autogenerated schemas/interfaces derived
    from rdb definitions
    """
    pass


class ISQLAlchemyMetadata(Interface):
    """ marker for sqlalchemy.BoundMetaData objects
    """
    pass


class ISchemaIntrospector(IEnumerableMapping):
    """ a read dictionary interfaces to tables """

    def bind(metadata=None, engine=None):
        """
        binds introspector to a particular bound metadata, if metadata is none, create a new
        metadata and bind to the passed in engine
        """
        pass

    def bindEngine(engine, schema_name=None):
        """
        bind the engine to the introspector, creates an internal bound metadata to the engine.
        """
        pass

    def bindMetadata(metadata):
        """
        bind the introspector to the bound metadata, the metadata utilized will be the parent
        for any introspected tables returned.
        """
        pass

    metadata = Attribute('metadata', 'Bound Metadata')
    information_schema = Attribute('information_schema', 'the bound metadata containing table definitions for ansi information schema')


class IIModelInterface(Interface):
    """
    marker interface on generated table schema interfaces, ie. a marker for interfaces
    """
    pass


class IModelAnnotation(Interface):
    """
    """

    def getDisplayColumns():
        """
        return the columns that should be displayed
        """
        pass


class IModelDescriptor(IEnumerableMapping):
    """
    captures model behavior encapsulated in a set of fields, which are
    accessible via the enumerable mapping
    """
    pass


class IRelationChange(Interface):
    """
    attached to modified events to allow for introspecting relation changes
    """
    pass


class IModelDescriptorField(Interface):
    modes = schema.ASCIILine(title='View Usage Modes for Field', description='Pipe separated string of different modes.. add|edit|view|search|listing are all valid')
    view_widget = schema.Object(Interface, title='A Custom Widget Factory for Read Views', required=False)
    view_permission = schema.ASCIILine(title='Read Permission', description='If the user does not have this permission this field will not appear in read views', required=False)
    edit_widget = schema.Object(Interface, title='A Custom Widget Factory for Write Views', required=False)
    edit_permission = schema.ASCIILine(title='Read Permission', description='If the user does not have this permission this field will not appear in write views', required=False)
    add_widget = schema.Object(Interface, title='A Custom Widget Factory for Add Views', required=False)
    search_widget = schema.ASCIILine(title='A Custom Search Widget Factory', required=False)
    listing_column = schema.Object(Interface, title='A Custom Column Widget for Listing Views', required=False)