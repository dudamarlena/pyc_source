# uncompyle6 version 3.7.4
# Python bytecode 3.8 (3413)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: C:\Users\User\AppData\Local\Temp\pip-install-oj_abz_z\hypothesis\hypothesis\strategies\_internal\strings.py
# Compiled at: 2020-01-12 08:06:33
# Size of source mod 2**32: 3319 bytes
from hypothesis.errors import InvalidArgument
from hypothesis.internal import charmap
from hypothesis.internal.conjecture.utils import integer_range
from hypothesis.internal.intervalsets import IntervalSet
from hypothesis.strategies._internal.strategies import MappedSearchStrategy, SearchStrategy

class OneCharStringStrategy(SearchStrategy):
    __doc__ = 'A strategy which generates single character strings of text type.'

    def __init__(self, whitelist_categories=None, blacklist_categories=None, blacklist_characters=None, min_codepoint=None, max_codepoint=None, whitelist_characters=None):
        if not set(whitelist_categories or ()).issubset(charmap.categories()):
            raise AssertionError
        else:
            assert set(blacklist_categories or ()).issubset(charmap.categories())
            intervals = charmap.query(include_categories=whitelist_categories,
              exclude_categories=blacklist_categories,
              min_codepoint=min_codepoint,
              max_codepoint=max_codepoint,
              include_characters=whitelist_characters,
              exclude_characters=blacklist_characters)
            arguments = intervals or [
             (
              'whitelist_categories', whitelist_categories),
             (
              'blacklist_categories', blacklist_categories),
             (
              'whitelist_characters', whitelist_characters),
             (
              'blacklist_characters', blacklist_characters),
             (
              'min_codepoint', min_codepoint),
             (
              'max_codepoint', max_codepoint)]
            raise InvalidArgument('No characters are allowed to be generated by this combination of arguments: ' + ', '.join(('%s=%r' % arg for arg in arguments if arg[1] is not None)))
        self.intervals = IntervalSet(intervals)
        self.zero_point = self.intervals.index_above(ord('0'))

    def do_draw(self, data):
        i = integer_range(data, 0, (len(self.intervals) - 1), center=(self.zero_point))
        return chr(self.intervals[i])


class StringStrategy(MappedSearchStrategy):
    __doc__ = 'A strategy for text strings, defined in terms of a strategy for lists of\n    single character text strings.'

    def __init__(self, list_of_one_char_strings_strategy):
        super().__init__(strategy=list_of_one_char_strings_strategy)

    def __repr__(self):
        return "%r.map(u''.join)" % self.mapped_strategy

    def pack(self, ls):
        return ''.join(ls)


class FixedSizeBytes(SearchStrategy):

    def __init__(self, size):
        self.size = size

    def do_draw(self, data):
        return bytes(data.draw_bytes(self.size))