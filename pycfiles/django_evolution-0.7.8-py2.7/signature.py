# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.11-x86_64/egg/django_evolution/tests/signature.py
# Compiled at: 2018-06-14 23:17:51
tests = '\n>>> from django.db import models\n>>> from django_evolution import signature\n>>> from django_evolution.diff import Diff\n>>> from django_evolution.tests.utils import (test_proj_sig, register_models,\n...                                           deregister_models)\n>>> from pprint import pprint\n>>> from django.contrib.contenttypes import generic\n>>> from django.contrib.contenttypes.models import ContentType\n\n# First, a model that has one of everything so we can validate all cases\n# for a signature\n>>> class Anchor1(models.Model):\n...     value = models.IntegerField()\n\n>>> class Anchor2(models.Model):\n...     value = models.IntegerField()\n\n>>> class Anchor3(models.Model):\n...     value = models.IntegerField()\n...     # Host a generic key here, too\n...     content_type = models.ForeignKey(ContentType)\n...     object_id = models.PositiveIntegerField(db_index=True)\n...     content_object = generic.GenericForeignKey(\'content_type\',\'object_id\')\n\n>>> anchors = [(\'Anchor1\', Anchor1),(\'Anchor2\', Anchor2),(\'Anchor3\', Anchor3)]\n\n>>> class SigModel(models.Model):\n...     char_field = models.CharField(max_length=20)\n...     int_field = models.IntegerField()\n...     null_field = models.IntegerField(null=True, db_column=\'size_column\')\n...     id_card = models.IntegerField(unique=True, db_index=True)\n...     dec_field = models.DecimalField(max_digits=10, decimal_places=4)\n...     ref1 = models.ForeignKey(Anchor1)\n...     ref2 = models.ForeignKey(Anchor1, related_name=\'other_sigmodel\')\n...     ref3 = models.ForeignKey(Anchor2, db_column=\'value\', db_index=True)\n...     ref4 = models.ForeignKey(\'self\')\n...     ref5 = models.ManyToManyField(Anchor3)\n...     ref6 = models.ManyToManyField(Anchor3, related_name=\'other_sigmodel\')\n...     ref7 = models.ManyToManyField(\'self\')\n...     # Plus a generic foreign key - the Generic itself should be ignored\n...     content_type = models.ForeignKey(ContentType)\n...     object_id = models.PositiveIntegerField(db_index=True)\n...     content_object = generic.GenericForeignKey(\'content_type\',\'object_id\')\n...     # Plus a generic relation, which should be ignored\n...     generic = generic.GenericRelation(Anchor3)\n\n>>> class ParentModel(models.Model):\n...     parent_field = models.CharField(max_length=20)\n\n>>> class ChildModel(ParentModel):\n...     child_field = models.CharField(max_length=20)\n\n# Store the base signatures\n>>> database_sig = signature.create_database_sig(\'db_multi\')\n>>> base_cache = register_models(database_sig,\n...     (\'Anchor1\', Anchor1), (\'Anchor2\', Anchor2), (\'Anchor3\', Anchor3),\n...     (\'TestModel\', SigModel), (\'ParentModel\', ParentModel),\n...     (\'ChildModel\', ChildModel),\n...     register_indexes=True)\n\n# You can create a model signature for a model\n>>> pprint(signature.create_model_sig(SigModel))\n{\'fields\': {\'char_field\': {\'field_type\': <class \'django.db.models.fields.CharField\'>,\n                           \'max_length\': 20},\n            \'content_type\': {\'field_type\': <class \'django.db.models.fields.related.ForeignKey\'>,\n                             \'related_model\': \'contenttypes.ContentType\'},\n            \'dec_field\': {\'decimal_places\': 4,\n                          \'field_type\': <class \'django.db.models.fields.DecimalField\'>,\n                          \'max_digits\': 10},\n            \'id\': {\'field_type\': <class \'django.db.models.fields.AutoField\'>,\n                   \'primary_key\': True},\n            \'id_card\': {\'db_index\': True,\n                        \'field_type\': <class \'django.db.models.fields.IntegerField\'>,\n                        \'unique\': True},\n            \'int_field\': {\'field_type\': <class \'django.db.models.fields.IntegerField\'>},\n            \'null_field\': {\'db_column\': \'size_column\',\n                           \'field_type\': <class \'django.db.models.fields.IntegerField\'>,\n                           \'null\': True},\n            \'object_id\': {\'db_index\': True,\n                          \'field_type\': <class \'django.db.models.fields.PositiveIntegerField\'>},\n            \'ref1\': {\'field_type\': <class \'django.db.models.fields.related.ForeignKey\'>,\n                     \'related_model\': \'tests.Anchor1\'},\n            \'ref2\': {\'field_type\': <class \'django.db.models.fields.related.ForeignKey\'>,\n                     \'related_model\': \'tests.Anchor1\'},\n            \'ref3\': {\'db_column\': \'value\',\n                     \'field_type\': <class \'django.db.models.fields.related.ForeignKey\'>,\n                     \'related_model\': \'tests.Anchor2\'},\n            \'ref4\': {\'field_type\': <class \'django.db.models.fields.related.ForeignKey\'>,\n                     \'related_model\': \'tests.TestModel\'},\n            \'ref5\': {\'field_type\': <class \'django.db.models.fields.related.ManyToManyField\'>,\n                     \'related_model\': \'tests.Anchor3\'},\n            \'ref6\': {\'field_type\': <class \'django.db.models.fields.related.ManyToManyField\'>,\n                     \'related_model\': \'tests.Anchor3\'},\n            \'ref7\': {\'field_type\': <class \'django.db.models.fields.related.ManyToManyField\'>,\n                     \'related_model\': \'tests.TestModel\'}},\n \'meta\': {\'__unique_together_applied\': True,\n          \'db_table\': \'tests_testmodel\',\n          \'db_tablespace\': \'\',\n          \'index_together\': [],\n          \'pk_column\': \'id\',\n          \'unique_together\': []}}\n\n>>> pprint(signature.create_model_sig(ChildModel))\n{\'fields\': {\'child_field\': {\'field_type\': <class \'django.db.models.fields.CharField\'>,\n                            \'max_length\': 20},\n            \'parentmodel_ptr\': {\'field_type\': <class \'django.db.models.fields.related.OneToOneField\'>,\n                                \'primary_key\': True,\n                                \'related_model\': \'tests.ParentModel\',\n                                \'unique\': True}},\n \'meta\': {\'__unique_together_applied\': True,\n          \'db_table\': \'tests_childmodel\',\n          \'db_tablespace\': \'\',\n          \'index_together\': [],\n          \'pk_column\': \'parentmodel_ptr_id\',\n          \'unique_together\': []}}\n\n# Now, a useful test model we can use for evaluating diffs\n>>> class BaseModel(models.Model):\n...     name = models.CharField(max_length=20)\n...     age = models.IntegerField()\n...     ref = models.ForeignKey(Anchor1)\n>>> start = register_models(database_sig, (\'TestModel\', BaseModel),\n...                         register_indexes=True, *anchors)\n\n>>> start_sig = test_proj_sig((\'TestModel\', BaseModel), *anchors)\n\n# An identical model gives an empty Diff\n>>> class TestModel(models.Model):\n...     name = models.CharField(max_length=20)\n...     age = models.IntegerField()\n...     ref = models.ForeignKey(Anchor1)\n\n>>> end = register_models(database_sig, (\'TestModel\', TestModel),\n...                       register_indexes=True, *anchors)\n>>> test_sig = test_proj_sig((\'TestModel\',TestModel), *anchors)\n>>> d = Diff(start_sig, test_sig)\n>>> d.is_empty()\nTrue\n>>> d.evolution()\n{}\n\n# Adding a field gives a non-empty diff\n>>> class AddFieldModel(models.Model):\n...     name = models.CharField(max_length=20)\n...     age = models.IntegerField()\n...     ref = models.ForeignKey(Anchor1)\n...     date_of_birth = models.DateField()\n\n>>> end = register_models(database_sig, (\'TestModel\', AddFieldModel), *anchors)\n>>> test_sig = test_proj_sig((\'TestModel\',AddFieldModel), *anchors)\n>>> d = Diff(start_sig, test_sig)\n>>> d.is_empty()\nFalse\n>>> print [str(e) for e in d.evolution()[\'tests\']] # Add Field\n["AddField(\'TestModel\', \'date_of_birth\', models.DateField, initial=<<USER VALUE REQUIRED>>)"]\n\n# Deleting a field gives a non-empty diff\n>>> class DeleteFieldModel(models.Model):\n...     name = models.CharField(max_length=20)\n...     ref = models.ForeignKey(Anchor1)\n\n>>> end = register_models(database_sig, (\'TestModel\', DeleteFieldModel), *anchors)\n>>> test_sig = test_proj_sig((\'TestModel\',DeleteFieldModel), *anchors)\n>>> d = Diff(start_sig, test_sig)\n>>> d.is_empty()\nFalse\n>>> print [str(e) for e in d.evolution()[\'tests\']] # Delete Field\n["DeleteField(\'TestModel\', \'age\')"]\n\n# Renaming a field is caught as 2 diffs\n# (For the moment - long term, this should hint as a Rename)\n>>> class RenameFieldModel(models.Model):\n...     full_name = models.CharField(max_length=20)\n...     age = models.IntegerField()\n...     ref = models.ForeignKey(Anchor1)\n\n>>> end = register_models(database_sig, (\'TestModel\', RenameFieldModel), *anchors)\n>>> test_sig = test_proj_sig((\'TestModel\',RenameFieldModel), *anchors)\n>>> d = Diff(start_sig, test_sig)\n>>> d.is_empty()\nFalse\n>>> print [str(e) for e in d.evolution()[\'tests\']] # Rename Field\n["AddField(\'TestModel\', \'full_name\', models.CharField, initial=<<USER VALUE REQUIRED>>, max_length=20)", "DeleteField(\'TestModel\', \'name\')"]\n\n# Adding a property to a field which was not present in the original Model\n>>> class AddPropertyModel(models.Model):\n...     name = models.CharField(max_length=20)\n...     age = models.IntegerField(null=True)\n...     ref = models.ForeignKey(Anchor1)\n\n>>> end = register_models(database_sig, (\'TestModel\', AddPropertyModel), *anchors)\n>>> test_sig = test_proj_sig((\'TestModel\',AddPropertyModel), *anchors)\n>>> d = Diff(start_sig, test_sig)\n>>> d.is_empty()\nFalse\n\n>>> print [str(e) for e in d.evolution()[\'tests\']] # Change Field - add property\n["ChangeField(\'TestModel\', \'age\', initial=None, null=True)"]\n\n# Since we can\'t check the evolutions, check the diff instead\n>>> print d\nIn model tests.TestModel:\n    In field \'age\':\n        Property \'null\' has changed\n\n# Adding a property of a field which was not present in the original Model, but\n# is now set to the default for that property.\n>>> class AddDefaultPropertyModel(models.Model):\n...     name = models.CharField(max_length=20)\n...     age = models.IntegerField(null=False)\n...     ref = models.ForeignKey(Anchor1)\n\n>>> end = register_models(database_sig, (\'TestModel\', AddDefaultPropertyModel), *anchors)\n>>> test_sig = test_proj_sig((\'TestModel\',AddDefaultPropertyModel), *anchors)\n>>> d = Diff(start_sig, test_sig)\n>>> d.is_empty()\nTrue\n>>> print d.evolution()\n{}\n\n# Changing a property of a field\n>>> class ChangePropertyModel(models.Model):\n...     name = models.CharField(max_length=30)\n...     age = models.IntegerField()\n...     ref = models.ForeignKey(Anchor1)\n\n>>> end = register_models(database_sig, (\'TestModel\', ChangePropertyModel), *anchors)\n>>> test_sig = test_proj_sig((\'TestModel\',ChangePropertyModel), *anchors)\n>>> d = Diff(start_sig, test_sig)\n>>> d.is_empty()\nFalse\n\n>>> print [str(e) for e in d.evolution()[\'tests\']] # Change Field - change property\n["ChangeField(\'TestModel\', \'name\', initial=None, max_length=30)"]\n\n# Since we can\'t check the evolutions, check the diff instead\n>>> print d\nIn model tests.TestModel:\n    In field \'name\':\n        Property \'max_length\' has changed\n\n# Changing the model that a ForeignKey references\n>>> class ChangeFKModel(models.Model):\n...     name = models.CharField(max_length=20)\n...     age = models.IntegerField()\n...     ref = models.ForeignKey(Anchor2)\n\n>>> end = register_models(database_sig, (\'TestModel\', ChangeFKModel), *anchors)\n>>> test_sig = test_proj_sig((\'TestModel\',ChangeFKModel), *anchors)\n>>> d = Diff(start_sig, test_sig)\n>>> d.is_empty()\nFalse\n\n>>> print [str(e) for e in d.evolution()[\'tests\']] # Change Field - change property\n["ChangeField(\'TestModel\', \'ref\', initial=None, related_model=\'tests.Anchor2\')"]\n\n# Clean up after the applications that were installed\n>>> deregister_models()\n\n'