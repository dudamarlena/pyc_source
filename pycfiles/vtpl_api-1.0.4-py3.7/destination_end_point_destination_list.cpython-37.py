# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build\bdist.win32\egg\vtpl_api\models\destination_end_point_destination_list.py
# Compiled at: 2019-11-14 01:19:39
# Size of source mod 2**32: 6532 bytes
"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""
import pprint, re, six

class DestinationEndPointDestinationList(object):
    __doc__ = 'NOTE: This class is auto generated by OpenAPI Generator.\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n    '
    openapi_types = {'source_id':'str', 
     'type':'DestinationType', 
     'base_url':'str', 
     'name':'str', 
     'user':'str', 
     '_pass':'str'}
    attribute_map = {'source_id':'sourceId', 
     'type':'type', 
     'base_url':'baseUrl', 
     'name':'name', 
     'user':'user', 
     '_pass':'pass'}

    def __init__(self, source_id=None, type=None, base_url=None, name=None, user=None, _pass=None):
        """DestinationEndPointDestinationList - a model defined in OpenAPI"""
        self._source_id = None
        self._type = None
        self._base_url = None
        self._name = None
        self._user = None
        self._DestinationEndPointDestinationList__pass = None
        self.discriminator = None
        if source_id is not None:
            self.source_id = source_id
        if type is not None:
            self.type = type
        if base_url is not None:
            self.base_url = base_url
        if name is not None:
            self.name = name
        if user is not None:
            self.user = user
        if _pass is not None:
            self._pass = _pass

    @property
    def source_id(self):
        """Gets the source_id of this DestinationEndPointDestinationList.  # noqa: E501

        :return: The source_id of this DestinationEndPointDestinationList.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DestinationEndPointDestinationList.

        :param source_id: The source_id of this DestinationEndPointDestinationList.  # noqa: E501
        :type: str
        """
        self._source_id = source_id

    @property
    def type(self):
        """Gets the type of this DestinationEndPointDestinationList.  # noqa: E501

        :return: The type of this DestinationEndPointDestinationList.  # noqa: E501
        :rtype: DestinationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DestinationEndPointDestinationList.

        :param type: The type of this DestinationEndPointDestinationList.  # noqa: E501
        :type: DestinationType
        """
        self._type = type

    @property
    def base_url(self):
        """Gets the base_url of this DestinationEndPointDestinationList.  # noqa: E501

        :return: The base_url of this DestinationEndPointDestinationList.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this DestinationEndPointDestinationList.

        :param base_url: The base_url of this DestinationEndPointDestinationList.  # noqa: E501
        :type: str
        """
        self._base_url = base_url

    @property
    def name(self):
        """Gets the name of this DestinationEndPointDestinationList.  # noqa: E501

        :return: The name of this DestinationEndPointDestinationList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinationEndPointDestinationList.

        :param name: The name of this DestinationEndPointDestinationList.  # noqa: E501
        :type: str
        """
        self._name = name

    @property
    def user(self):
        """Gets the user of this DestinationEndPointDestinationList.  # noqa: E501

        :return: The user of this DestinationEndPointDestinationList.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DestinationEndPointDestinationList.

        :param user: The user of this DestinationEndPointDestinationList.  # noqa: E501
        :type: str
        """
        self._user = user

    @property
    def _pass(self):
        """Gets the _pass of this DestinationEndPointDestinationList.  # noqa: E501

        :return: The _pass of this DestinationEndPointDestinationList.  # noqa: E501
        :rtype: str
        """
        return self._DestinationEndPointDestinationList__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this DestinationEndPointDestinationList.

        :param _pass: The _pass of this DestinationEndPointDestinationList.  # noqa: E501
        :type: str
        """
        self._DestinationEndPointDestinationList__pass = _pass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x:                 if hasattr(x, 'to_dict'):
x.to_dict() # Avoid dead code: x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item:                 if hasattr(item[1], 'to_dict'):
(item[0], item[1].to_dict()) # Avoid dead code: item, value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinationEndPointDestinationList):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other