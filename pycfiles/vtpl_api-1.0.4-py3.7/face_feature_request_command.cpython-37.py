# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build\bdist.win32\egg\vtpl_api\models\face_feature_request_command.py
# Compiled at: 2019-11-14 01:19:39
# Size of source mod 2**32: 5585 bytes
"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""
import pprint, re, six

class FaceFeatureRequestCommand(object):
    __doc__ = 'NOTE: This class is auto generated by OpenAPI Generator.\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n    '
    openapi_types = {'destination':'DestinationEndPoint', 
     'command':'Commands', 
     'snaps':'list[str]', 
     'snap_upload_models':'list[SnapUploadModel]'}
    attribute_map = {'destination':'destination', 
     'command':'command', 
     'snaps':'snaps', 
     'snap_upload_models':'snapUploadModels'}

    def __init__(self, destination=None, command=None, snaps=None, snap_upload_models=None):
        """FaceFeatureRequestCommand - a model defined in OpenAPI"""
        self._destination = None
        self._command = None
        self._snaps = None
        self._snap_upload_models = None
        self.discriminator = None
        if destination is not None:
            self.destination = destination
        if command is not None:
            self.command = command
        if snaps is not None:
            self.snaps = snaps
        if snap_upload_models is not None:
            self.snap_upload_models = snap_upload_models

    @property
    def destination(self):
        """Gets the destination of this FaceFeatureRequestCommand.  # noqa: E501

        :return: The destination of this FaceFeatureRequestCommand.  # noqa: E501
        :rtype: DestinationEndPoint
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this FaceFeatureRequestCommand.

        :param destination: The destination of this FaceFeatureRequestCommand.  # noqa: E501
        :type: DestinationEndPoint
        """
        self._destination = destination

    @property
    def command(self):
        """Gets the command of this FaceFeatureRequestCommand.  # noqa: E501

        :return: The command of this FaceFeatureRequestCommand.  # noqa: E501
        :rtype: Commands
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this FaceFeatureRequestCommand.

        :param command: The command of this FaceFeatureRequestCommand.  # noqa: E501
        :type: Commands
        """
        self._command = command

    @property
    def snaps(self):
        """Gets the snaps of this FaceFeatureRequestCommand.  # noqa: E501

        _id of faceSnap #$ref: '#/components/schemas/faceSnap'  # noqa: E501

        :return: The snaps of this FaceFeatureRequestCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._snaps

    @snaps.setter
    def snaps(self, snaps):
        """Sets the snaps of this FaceFeatureRequestCommand.

        _id of faceSnap #$ref: '#/components/schemas/faceSnap'  # noqa: E501

        :param snaps: The snaps of this FaceFeatureRequestCommand.  # noqa: E501
        :type: list[str]
        """
        self._snaps = snaps

    @property
    def snap_upload_models(self):
        """Gets the snap_upload_models of this FaceFeatureRequestCommand.  # noqa: E501

        :return: The snap_upload_models of this FaceFeatureRequestCommand.  # noqa: E501
        :rtype: list[SnapUploadModel]
        """
        return self._snap_upload_models

    @snap_upload_models.setter
    def snap_upload_models(self, snap_upload_models):
        """Sets the snap_upload_models of this FaceFeatureRequestCommand.

        :param snap_upload_models: The snap_upload_models of this FaceFeatureRequestCommand.  # noqa: E501
        :type: list[SnapUploadModel]
        """
        self._snap_upload_models = snap_upload_models

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x:                 if hasattr(x, 'to_dict'):
x.to_dict() # Avoid dead code: x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item:                 if hasattr(item[1], 'to_dict'):
(item[0], item[1].to_dict()) # Avoid dead code: item, value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FaceFeatureRequestCommand):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other