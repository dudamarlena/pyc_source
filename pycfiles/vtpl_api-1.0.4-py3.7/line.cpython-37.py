# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build\bdist.win32\egg\vtpl_api\models\line.py
# Compiled at: 2019-11-14 01:19:39
# Size of source mod 2**32: 4644 bytes
"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""
import pprint, re, six

class Line(object):
    __doc__ = 'NOTE: This class is auto generated by OpenAPI Generator.\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n    '
    openapi_types = {'id':'int', 
     'line_type':'LineType', 
     'vertices':'list[Vertex]', 
     'config':'list[Config]'}
    attribute_map = {'id':'id', 
     'line_type':'lineType', 
     'vertices':'vertices', 
     'config':'config'}

    def __init__(self, id=1, line_type=None, vertices=None, config=None):
        """Line - a model defined in OpenAPI"""
        self._id = None
        self._line_type = None
        self._vertices = None
        self._config = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if line_type is not None:
            self.line_type = line_type
        if vertices is not None:
            self.vertices = vertices
        if config is not None:
            self.config = config

    @property
    def id(self):
        """Gets the id of this Line.  # noqa: E501

        :return: The id of this Line.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Line.

        :param id: The id of this Line.  # noqa: E501
        :type: int
        """
        self._id = id

    @property
    def line_type(self):
        """Gets the line_type of this Line.  # noqa: E501

        :return: The line_type of this Line.  # noqa: E501
        :rtype: LineType
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """Sets the line_type of this Line.

        :param line_type: The line_type of this Line.  # noqa: E501
        :type: LineType
        """
        self._line_type = line_type

    @property
    def vertices(self):
        """Gets the vertices of this Line.  # noqa: E501

        :return: The vertices of this Line.  # noqa: E501
        :rtype: list[Vertex]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices):
        """Sets the vertices of this Line.

        :param vertices: The vertices of this Line.  # noqa: E501
        :type: list[Vertex]
        """
        self._vertices = vertices

    @property
    def config(self):
        """Gets the config of this Line.  # noqa: E501

        :return: The config of this Line.  # noqa: E501
        :rtype: list[Config]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Line.

        :param config: The config of this Line.  # noqa: E501
        :type: list[Config]
        """
        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x:                 if hasattr(x, 'to_dict'):
x.to_dict() # Avoid dead code: x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item:                 if hasattr(item[1], 'to_dict'):
(item[0], item[1].to_dict()) # Avoid dead code: item, value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Line):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other