# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build\bdist.win32\egg\vtpl_api\models\meta_face_event.py
# Compiled at: 2019-11-14 01:19:39
# Size of source mod 2**32: 5235 bytes
"""
    Engine api

    Engine APIs  # noqa: E501

    The version of the OpenAPI document: 1.0.4
    Generated by: https://openapi-generator.tech
"""
import pprint, re, six

class MetaFaceEvent(object):
    __doc__ = 'NOTE: This class is auto generated by OpenAPI Generator.\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n    '
    openapi_types = {'registered_face_id':'str', 
     'age':'int', 
     'sex':'Gender', 
     'event_id':'str'}
    attribute_map = {'registered_face_id':'registeredFaceId', 
     'age':'age', 
     'sex':'sex', 
     'event_id':'eventId'}

    def __init__(self, registered_face_id='', age=0, sex=None, event_id='0'):
        """MetaFaceEvent - a model defined in OpenAPI"""
        self._registered_face_id = None
        self._age = None
        self._sex = None
        self._event_id = None
        self.discriminator = None
        self.registered_face_id = registered_face_id
        if age is not None:
            self.age = age
        if sex is not None:
            self.sex = sex
        if event_id is not None:
            self.event_id = event_id

    @property
    def registered_face_id(self):
        """Gets the registered_face_id of this MetaFaceEvent.  # noqa: E501

        registeredFaceId of '#/components/schemas/registeredFace'  # noqa: E501

        :return: The registered_face_id of this MetaFaceEvent.  # noqa: E501
        :rtype: str
        """
        return self._registered_face_id

    @registered_face_id.setter
    def registered_face_id(self, registered_face_id):
        """Sets the registered_face_id of this MetaFaceEvent.

        registeredFaceId of '#/components/schemas/registeredFace'  # noqa: E501

        :param registered_face_id: The registered_face_id of this MetaFaceEvent.  # noqa: E501
        :type: str
        """
        self._registered_face_id = registered_face_id

    @property
    def age(self):
        """Gets the age of this MetaFaceEvent.  # noqa: E501

        Age of person predicted by face engine during face event  # noqa: E501

        :return: The age of this MetaFaceEvent.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this MetaFaceEvent.

        Age of person predicted by face engine during face event  # noqa: E501

        :param age: The age of this MetaFaceEvent.  # noqa: E501
        :type: int
        """
        self._age = age

    @property
    def sex(self):
        """Gets the sex of this MetaFaceEvent.  # noqa: E501

        :return: The sex of this MetaFaceEvent.  # noqa: E501
        :rtype: Gender
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this MetaFaceEvent.

        :param sex: The sex of this MetaFaceEvent.  # noqa: E501
        :type: Gender
        """
        self._sex = sex

    @property
    def event_id(self):
        """Gets the event_id of this MetaFaceEvent.  # noqa: E501

        Source EventId  # noqa: E501

        :return: The event_id of this MetaFaceEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this MetaFaceEvent.

        Source EventId  # noqa: E501

        :param event_id: The event_id of this MetaFaceEvent.  # noqa: E501
        :type: str
        """
        self._event_id = event_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x:                 if hasattr(x, 'to_dict'):
x.to_dict() # Avoid dead code: x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item:                 if hasattr(item[1], 'to_dict'):
(item[0], item[1].to_dict()) # Avoid dead code: item, value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetaFaceEvent):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other