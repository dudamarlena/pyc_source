# uncompyle6 version 3.7.4
# Python bytecode 2.5 (62131)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.3-i386/egg/tgcrud/release.py
# Compiled at: 2008-07-08 11:38:38
version = '1.0.2'
description = 'Genrate CRUD interface in TurboGears'
long_description = '\ntgcrud is an  TurboGears command extension,\nwhich could generate a sqlobject/sqlalchemy backend \neditor/crud (create, read, update, delete) interface based \non your Model with kid template. \nIt could be plugged into any projects even if you don\'t use kid template.\n\nThe generated codes are fully customizable.\ntgcrud heavily use form widgets and show you many\nTG 1.0 features in it\'s controllers/templates.\n\nPlease refer to http://docs.turbogears.org/1.0/CRUDTemplate for detail\n\nThe command follow the TurboGears quickstart template style,  you could easily add\nidentity, form validation, paginate in your crud interface. \n\nIf you are a TG beginer, tgcrud help you create a general\nadmin skeleton based on your model.\n\nIf you are an experienced TG developer, you could get it in minutes\nsince it just done the basic procedure that every time you write a\nmanagement interface of your model.\n\nFeatures\n----------------------\n\nFully customizable admin interface (the create, read, update, delete functions) with easy to extend(form validation, identity, paginate) templates.\n\nNo Magic\n\n    * The generated codes are normal TG source.\n    * No extra magic encapsulation. No need to rewrite the interface when you need extra flexibility (not the same as Rails\'scaffold)\n    * Separate Form definition from Model (not the same as  Django admin)\n    * Use standard TurboGears syntax and code organization.\n    * It\'s a good crud implementation reference by TG.\n\nTurboGears\n\n    * Bundles a TurboGears "tg-admin crud" command.\n    * Support SQLObject and SQLAlchemy models\n    * tgcrud kid interface works for you no matter whatever template engine you currently choose for your project.\n    * You could customize the model relationship by widgets(document shows how to customize 1-to-1, 1-to-many, many-to-many relationship with widgets. Or you could do it in your way)\n    * Takes advantage of TurboGears form widgets and validation. you\'d hardly need to modify the HTML.\n\n    \nInstall\n----------\n\nThe \'tgcrud\' command extension is available in Python CheeseShop and\nTurboGears svn.\n\nYou can use setuptools to install tgcrud with following command::\n\n    $ easy_install tgcrud\n\nor download the source code and install tgcrud manually.\n\nScreencast\n--------------\n\nYes, there\'s a \'Make a Book Site with TurboGears\' screencast with tgcrud.\n\nIf you are an experienced TG developer, you could skip to the third.\n\nIf you are new to TG, you may want to watch all of them to get familiar with TurboGears.\n\n\t- Quickstart TurboGears project, 6.5MB\n\t\n\t  http://files.turbogears.org/video/openbook1.swf\n\t\n\t- Design model with toolbox utilities, 7.7MB\n\t\n\t  http://files.turbogears.org/video/openbook2.swf\n\t\n\t- tgcrud, the TG\'s scaffold, 5.2 MB\n\t\n\t  http://files.turbogears.org/video/openbook3.swf\n\nWith tgcrud you could easily generate a Rails scaffold\nstyle CRUD interface. The difference is all code in tgcrud is\nimplicit, which leads to more easy customization.\n\nUsage\n----------\n\n\t1. Define your model in model.py\n\t\n\t2. Once you\'ve defined your model,\n\t   you could use "tg-admin crud" command to generate the crud pack.\n\t   The syntax is::\n\t\n\t       $ tg-admin crud [model class name] [package name]\n\t\n\t   e.x if the model name is BookMark,\n\t   and the package name we want is BookMarkController, the command is::\n\t\n\t       $ tg-admin crud BookMark BookMarkController\n\t\n\t   Then the \'admin\' package is generated.\n              \n\t   You just need take several minutes to customize the formfield to\n\t   have a proper crud interface.\n\t\n\t   ..note:: you could estimate the result by passing "--dry-run" to the command, such as::\n\t\n\t           $ tg-admin crud BookMark BookMarkController --dry-run\n\t\n\t       With this argument the command will not effect your physical directories. \n\t\n\t\n\t3. Import the package to your controllers.py with a line:\n\t\n\t   from BookMarkController import BookMarkController\n\t\n\t   and add a branch on your Root()::\n\t\n\t       foo = BookMarkController()\n\t\n\t4. Customize the form filed in admin/controllers.py\n\t\n\t5. Open the http://localhost:8080/foo to use the customizable interface.\n\nPlease check http://docs.turbogears.org/1.0/CRUDTemplate for detail instructions.\n\nChangeLog\n-------------------------\n\n1.0.2\n    * Expand compatibility to all TurboGears 1 version\n\n1.0.1\n    * Minor template updates\n\n1.0\n    * Fully SQLAlchemy support with\n        * SQLObject/SQLAlchemy auto detection \n        * Able to specify the primary id\n    * Minor template updates\n\n'
author = 'Fred Lin'
email = 'gasolin+tg@gmail.com'
copyright = 'Fred Lin 2007, 2008'
url = 'http://docs.turbogears.org/1.0/CRUDTemplate'
download_url = 'http://www.python.org/pypi/tgcrud/'
license = 'MIT'