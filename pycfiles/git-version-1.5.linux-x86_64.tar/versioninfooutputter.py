# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /usr/local/lib/python2.7/dist-packages/gitversionbuilder/versioninfooutputter.py
# Compiled at: 2015-09-21 09:58:23


def to_cpp(version_info):
    return _CppFormatter().format(version_info)


def to_python(version_info):
    return _PythonFormatter().format(version_info)


class _Formatter(object):

    def __init__(self):
        pass

    def format(self, version_info):
        return self.main_formatter(version_info, self._format_is_stable(version_info) + self._format_tag_interpretation(version_info))

    def _format_is_stable(self, version_info):
        if not version_info.git_tag_exists:
            return self.is_stable_formatter(False)
        else:
            tag_interpretation = version_info.interpret_tag_name()
            if tag_interpretation is not None:
                return self.is_stable_formatter(tag_interpretation.is_stable)
            return ''
            return

    def _format_tag_interpretation(self, version_info):
        tag_interpretation = version_info.interpret_tag_name()
        if tag_interpretation is None:
            return ''
        else:
            formatted_version_components = self.version_components_formatter(tag_interpretation.version_components)
            return self.tag_interpretation_formatter(tag_interpretation, formatted_version_components)
            return


class _CppFormatter(_Formatter):

    def main_formatter(self, version_info, other_variables):
        return '\n// ---------------------------------------------------\n// This file is autogenerated by git-version.\n// DO NOT MODIFY!\n// ---------------------------------------------------\n\n#pragma once\n#ifndef MESSMER_GITVERSION_VERSION_H\n#define MESSMER_GITVERSION_VERSION_H\n\nnamespace version {\n  constexpr const char *VERSION_STRING = "%s";\n  constexpr const char *GIT_TAG_NAME = "%s";\n  constexpr const unsigned int GIT_COMMITS_SINCE_TAG = %d;\n  constexpr const char *GIT_COMMIT_ID = "%s";\n  constexpr bool MODIFIED_SINCE_COMMIT = %s;\n  constexpr bool IS_DEV_VERSION = %s;\n%s\n}\n\n#endif\n' % (version_info.version_string, version_info.git_tag_name, version_info.git_commits_since_tag,
         version_info.git_commit_id, str(version_info.modified_since_commit).lower(), str(version_info.is_dev).lower(),
         other_variables)

    def is_stable_formatter(self, is_stable):
        return '\n  constexpr bool IS_STABLE_VERSION = %s;\n' % str(is_stable).lower()

    def tag_interpretation_formatter(self, tag_interpretation, version_components):
        return '\n  constexpr const char *VERSION_COMPONENTS[] = %s;\n  constexpr const char *VERSION_TAG = "%s";\n' % (version_components, tag_interpretation.version_tag)

    def version_components_formatter(self, version_components):
        return '{"' + ('", "').join(version_components) + '"}'


class _PythonFormatter(_Formatter):

    def main_formatter(self, version_info, other_variables):
        return '\n# ---------------------------------------------------\n# This file is autogenerated by git-version.\n# DO NOT MODIFY!\n# ---------------------------------------------------\n\nVERSION_STRING = "%s"\nGIT_TAG_NAME = "%s"\nGIT_COMMITS_SINCE_TAG = %d\nGIT_COMMIT_ID = "%s"\nMODIFIED_SINCE_COMMIT = %s\nIS_DEV_VERSION = %s\n%s\n' % (version_info.version_string, version_info.git_tag_name, version_info.git_commits_since_tag,
         version_info.git_commit_id, version_info.modified_since_commit, version_info.is_dev, other_variables)

    def is_stable_formatter(self, is_stable):
        return '\nIS_STABLE_VERSION = %s\n' % is_stable

    def tag_interpretation_formatter(self, tag_interpretation, version_components):
        return '\nVERSION_COMPONENTS = %s\nVERSION_TAG = "%s"\n' % (version_components, tag_interpretation.version_tag)

    def version_components_formatter(self, version_components):
        return '["' + ('", "').join(version_components) + '"]'