# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /users/payno/.local/share/virtualenvs/tomwer_venc/lib/python3.7/site-packages/orangecontrib/tomwer/widgets/reconstruction/FtseriesOW.py
# Compiled at: 2020-03-06 02:01:31
# Size of source mod 2**32: 7358 bytes
__authors__ = [
 'C. Nemoz', 'H. Payno']
__license__ = 'MIT'
__date__ = '25/10/2016'
from Orange.widgets import widget, gui
from Orange.widgets.settings import Setting
from Orange.widgets.widget import Input, Output
from orangecontrib.tomwer.orange.settings import CallbackSettingsHandler
from tomwer.core.process.reconstruction.ftseries.ftseries import _Ftseries, logger
from tomwer.gui.reconstruction.ftserie import FtserieWidget
from tomwer.web.client import OWClient
from tomwer.core.scan.scanbase import TomoBase
from silx.gui import qt

class FtseriesOW(widget.OWWidget, OWClient):
    name = 'ftseries reconstruction'
    id = 'orange.widgets.tomwer.ftseries'
    description = 'This widget manage the reconstruction of acquisitions'
    icon = 'icons/bricks.png'
    priority = 13
    category = 'esrfWidgets'
    keywords = ['tomography', 'file', 'tomwer']
    want_main_area = True
    resizing_enabled = True
    allows_cycle = True
    compress_signal = False
    settingsHandler = CallbackSettingsHandler()
    _rpSetting = Setting(dict())
    sigScanReady = qt.Signal()
    assert len(_Ftseries.inputs) == 2

    class Inputs:
        assert _Ftseries.inputs[0].name == 'change recons params'
        recons_param_changed = Input(name=(_Ftseries.inputs[0].name), type=(_Ftseries.inputs[0].type),
          doc=(_Ftseries.inputs[0].doc))
        data_in = Input(name=(_Ftseries.inputs[1].name), type=(_Ftseries.inputs[1].type),
          doc=(_Ftseries.inputs[1].doc))

    assert len(_Ftseries.outputs) == 1

    class Outputs:
        data_out = Output(name=(_Ftseries.outputs[0].name), type=(_Ftseries.outputs[0].type),
          doc=(_Ftseries.outputs[0].doc))

    def __init__(self, parent=None, _connect_handler=True, recons_params=None):
        """
        Widget which read the .hdf5 generated by octave and modify it.
        Then run a subprocess to call octave and run ftseries

        :param bool _connect_handler: True if we want to store the modifications
                                      on the setting. Need for unit test since
                                      keep alive qt widgets.
        :param recons_params: reconsparameter to be used by the FTWidget.
                              If None, some will be created.
        :type: :class:`QReconsParams`
        """
        OWClient.__init__(self, (logger,))
        widget.OWWidget.__init__(self, parent)
        self._ftserie = FtserieWidget(recons_params=recons_params)
        self._ftserie.hideExecuteButton()
        if self._rpSetting != dict():
            try:
                self._ftserie.recons_params.load_from_dict(self._rpSetting)
            except:
                logger.warning('fail to load reconstruction settings')

        self._ftserie.sigScanReady.connect(self._signalReconsReady)
        _layout = gui.vBox(self.mainArea, self.name).layout()
        _layout.addWidget(self._ftserie)
        types = qt.QDialogButtonBox.Ok | qt.QDialogButtonBox.Cancel
        self._controlButtons = qt.QDialogButtonBox(parent=self)
        self._controlButtons.setStandardButtons(types)
        _layout.addWidget(self._controlButtons)
        self._controlButtons.setVisible(False)
        self.updatePath = self._ftserie.updatePath
        self.load = self._ftserie.load
        self.save = self._ftserie.save
        self.getFileEditor = self._ftserie.getReconsParamSetEditor
        self.setH5Exploration = self._ftserie.setH5Exploration
        self.setReconsParams = self._ftserie.set_recons_params
        if _connect_handler is True:
            self.settingsHandler.addCallback(self._updateSettingsVals)
        self._ftserie.reconsStack.sigReconsStarted.connect(self._FtseriesOW__processing_start)
        self._ftserie.reconsStack.sigReconsFinished.connect(self._FtseriesOW__processing_end)
        self._ftserie.reconsStack.sigReconsFailed.connect(self._FtseriesOW__processing_end)
        self._ftserie.reconsStack.sigReconsMissParams.connect(self._FtseriesOW__processing_end)
        self._controlButtons.accepted.connect(self.accept)
        self._controlButtons.rejected.connect(self.reject_from_dialog)

    def _signalReconsReady(self, scan):
        assert isinstance(scan, TomoBase)
        self.Outputs.data_out.send(scan)
        self.sigScanReady.emit()

    @Inputs.recons_param_changed
    def updateReconsParam(self, ftseries):
        self._ftserie.updateReconsParam(ftseries)
        self._controlButtons.setVisible(True)
        self.show()
        self.exec_()
        self._controlButtons.setVisible(False)

    @Inputs.data_in
    def pathReceived(self, scan):
        if scan is None:
            return
        assert isinstance(scan, TomoBase)
        self._ftserie.pathReceived(scan)

    def _updateSettingsVals(self):
        self._rpSetting = self._ftserie.recons_params.to_dict()

    @property
    def recons_params(self):
        return self._ftserie.recons_params

    def accept(self):
        widget.OWWidget.accept(self)
        self._ftserie.process(self._ftserie._scan)

    def reject_from_dialog(self):
        widget.OWWidget.reject(self)
        self._signalReconsReady(self._ftserie._scan)

    def __processing_start(self, scan):
        self.processing_state(scan=scan, working=True)

    def __processing_end(self, scan):
        self.processing_state(scan=scan, working=False)

    def processing_state(self, scan, working: bool) -> None:
        try:
            if working:
                self.processing_info('processing %s' % scan.path)
            else:
                self.Processing.clear()
        except Exception:
            pass

    def close(self):
        self._ftserie.reconsStack.stop()
        super(FtseriesOW, self).close()