# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.6-x86_64/egg/projex/xbuild/templ.py
# Compiled at: 2016-07-03 23:28:12
""" 
Defines the templates for this build.
"""
NSISPACKAGE = "\n    ; install the product\n    SetOutPath '$INSTDIR\\{product}\\'\n    \n    ; install python source code\n    File /nonfatal /r /x .svn /x *.pyc {compilepath}\\*\n    \n    ; install the auto-generated documentation\n    SetOutPath '$INSTDIR\\{product}\\resources\\docs\\'\n    File /nonfatal /r /x .svn /x *.pyc {buildpath}\\docs\\*\n    \n    ; install the license\n    SetOutPath '$INSTDIR\\{product}\\'\n    File /nonfatal {buildpath}\\license.txt\n    \n    SetOutPath '$INSTDIR\\{product}\\resources\\'\n    File /nonfatal {buildpath}\\{product}.xdk\n"
NSISCHOOSEDIRECTORY = '!insertmacro MUI_PAGE_DIRECTORY'
NSISMODULE = "\n    ; install the product\n    SetOutPath '$INSTDIR'\n    \n    ; install python module\n    File /nonfatal {compilepath}\n"
NSISLICENSERADIO = '\n!define MUI_LICENSEPAGE_RADIOBUTTONS\n'
NSISLIB = '!include "MUI2.nsh"\n!include LogicLib.nsh\n\n; defined by the xbuild system\n!define MUI_ABORTWARNING\n!define MUI_PRODUCT                     \'{product}\'\n!define MUI_VERSION                     \'{version}\'\n!define MUI_COMPANY                     \'{company}\'\n!define MUI_ICON                        \'{logo}\'\n!define MUI_UNICON                      \'{logo}\'\n!define MUI_COMPONENTSPAGE_SMALLDESC\n!define MUI_BGCOLOR                     \'ffffff\'\n!define MUI_INSTFILESPAGE_PROGRESSBAR   \'colored\'\n\n{require_license_approval}\n\n!define MUI_HEADERIMAGE \n!define MUI_HEADERIMAGE_BITMAP          \'{header_image}\'\n!define MUI_WELCOMEFINISHPAGE_BITMAP    \'{finish_image}\'\n\nBrandingText \'{product} {version} from {company}\'\nInstallDir \'{instpath}\'\n\n; define the name of the product\nName \'{product} {version}\'\n\n; define the generated output file\nOutFile \'{outpath}\\{instname}-{platform}.exe\'\nRequestExecutionLevel admin\n\n#SilentInstall silent\n\n!insertmacro MUI_PAGE_WELCOME\n!insertmacro MUI_PAGE_LICENSE \'license.txt\'\n{choose_directory}\n!insertmacro MUI_PAGE_INSTFILES\n\n!insertmacro MUI_LANGUAGE \'{language}\'\n\n; pre section plugins\n{pre_section_plugins}\n\n; include the customized install and uninstall files\nSection \'Install\'\n    ; install plugins\n    {install_plugins}\n\n    {install}\n    \n    ; register the product\n    WriteRegStr HKLM \'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{company}\\{product}\' \'DisplayName\' \'{product} (remove only)\'\n    WriteRegStr HKLM \'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{company}\\{product}\' \'UninstallString\' \'$INSTDIR\\{product}\\uninstall-{exname}.exe\'\n    \n    ; create the uninstaller\n    WriteUninstaller \'$INSTDIR\\{product}\\uninstall-{exname}.exe\'\n    \nSectionEnd\n\nSection \'Uninstall\'\n    ; uninstall section plugins\n    {uninstall_plugins}\n\n    ; call the uninstaller\n    RMDir /r \'$INSTDIR\'\n    Delete \'$DESKTOP\\{product}.lnk\'\n    \n    ; remove the registry information\n    DeleteRegKey HKLM \'SOFTWARE\\{company}\\{product}\'\n    DeleteRegKey HKLM \'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{company}\\{product}\'\n\nSectionEnd\n\n; post section plugins\n{post_section_plugins}\n'
NSISAPP = '\\\n!include "MUI2.nsh"\n!include LogicLib.nsh\n\n; define variables\nVar StartMenuFolder\n\n; defined by the xbuild system\n!define MUI_ABORTWARNING\n!define MUI_PRODUCT                     \'{product}\'\n!define MUI_VERSION                     \'{version}\'\n!define MUI_COMPANY                     \'{company}\'\n!define MUI_ICON                        \'{logo}\'\n!define MUI_UNICON                      \'{logo}\'\n!define MUI_COMPONENTSPAGE_SMALLDESC\n!define MUI_BGCOLOR                     \'ffffff\'\n!define MUI_INSTFILESPAGE_PROGRESSBAR   \'colored\'\n\n{signed}\n{require_license_approval}\n\n!define MUI_HEADERIMAGE \n!define MUI_HEADERIMAGE_BITMAP          \'{header_image}\'\n!define MUI_WELCOMEFINISHPAGE_BITMAP    \'{finish_image}\'\n\n;Start Menu Folder Page Configuration\n!define MUI_STARTMENUPAGE_REGISTRY_ROOT \'HKCU\' \n!define MUI_STARTMENUPAGE_REGISTRY_KEY \'Software\\{company}\\{product}\'\n!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME \'Start Menu Folder\'\n!define MUI_STARTMENUPAGE_DEFAULTFOLDER \'{product}\'\n\n!define MUI_FINISHPAGE_SHOWREADME\n!define MUI_FINISHPAGE_SHOWREADME_NOTCHECKED\n!define MUI_FINISHPAGE_SHOWREADME_TEXT "Create Desktop Shortcut"\n!define MUI_FINISHPAGE_SHOWREADME_FUNCTION "CreateDesktopIcon"\n\n!define MUI_FINISHPAGE_RUN \'$INSTDIR\\{product}\\{exname}.exe\'\n!define MUI_FINISHPAGE_RUN_TEXT \'Launch {product}\'\n\nBrandingText \'{product} {version} from {company}\'\n\nInstallDir \'{instpath}\'\n\n; define the name of the product\nName \'{product} {version}\'\nRequestExecutionLevel admin\n\n!ifdef INNER\n    !echo "Building Signed Uninstaller"\n    OutFile "{buildpath}\\setup-{exname}-uninstall.exe"\n!else\n    ; generate the signable installer\n    !system \'"{nsis_exe}" /DINNER "{__file__}"\' = 0\n    \n    ; run the installer that was just created\n    !system \'{buildpath}\\setup-{exname}-uninstall.exe --silent\' = 2\n    \n    !ifdef SIGNED\n    ; sign the uninstaller\n    !system \'{signcmd} {buildpath}\\uninstall-{exname}.exe\' = 0\n    !endif\n    \n    !echo "Building Installer"\n    OutFile \'{outpath}\\{instname}-{platform}.exe\'\n!endif\n\n#SilentInstall silent\n\n!insertmacro MUI_PAGE_WELCOME\n!insertmacro MUI_PAGE_LICENSE \'license.txt\'\n!insertmacro MUI_PAGE_STARTMENU Application $StartMenuFolder\n{choose_directory}\n!insertmacro MUI_PAGE_INSTFILES\n!insertmacro MUI_PAGE_FINISH\n\n!ifdef INNER\n    !insertmacro MUI_UNPAGE_CONFIRM\n    !insertmacro MUI_UNPAGE_INSTFILES\n!endif\n\n!insertmacro MUI_LANGUAGE \'{language}\'\n\nFunction .onInit\n!ifdef INNER\n    WriteUninstaller "{buildpath}\\uninstall-{exname}.exe"\n    Quit\n!endif\nFunctionEnd\n\nFunction CreateDesktopIcon\n    ; create desktop shortcuts\n    CreateShortCut \'$DESKTOP\\{product}.lnk\' \'$INSTDIR\\{product}\\{exname}.exe\'\nFunctionEnd\n\n; pre section plugins\n{pre_section_plugins}\n\n; include the customized install and uninstall files\nSection \'Install\'\n    SetShellVarContext all\n\n    ; install the product\n    SetOutPath \'$INSTDIR\\{product}\'\n\n    ; install section plugins\n    {install_plugins}\n\n    ; install application code\n    File /nonfatal /r /x .svn /x *.pyc {compilepath}\\*\n    \n    ; store the installation folder\n    WriteRegStr HKCU \'Software\\{company}\\{product}\' \'\' \'$INSTDIR\\{product}\'\n    \n    ; register the product\n    WriteRegStr HKLM \'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{company}\\{product}\' \'DisplayName\' \'{product} (remove only)\'\n    WriteRegStr HKLM \'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{company}\\{product}\' \'UninstallString\' \'$INSTDIR\\{product}\\uninstall-{exname}.exe\'\n    \n    !insertmacro MUI_STARTMENU_WRITE_BEGIN Application\n        ;create start-menu items\n        CreateDirectory \'$SMPROGRAMS\\$StartMenuFolder\'\n        CreateShortCut \'$SMPROGRAMS\\$StartMenuFolder\\Uninstall {product}.lnk\' \'$INSTDIR\\{product}\\uninstall-{exname}.exe\' \'\' \'$INSTDIR\\{product}\\uninstall-{exname}.exe\' 0\n        CreateShortCut \'$SMPROGRAMS\\$StartMenuFolder\\{product}.lnk\' \'$INSTDIR\\{product}\\{exname}.exe\' \'\' \'$INSTDIR\\{product}\\{exname}.exe\' 0\n    !insertmacro MUI_STARTMENU_WRITE_END\n\n    ; create the uninstaller\n    !ifndef INNER\n    File {buildpath}\\uninstall-{exname}.exe\n    !endif\n    \n    ; additional commands\n{addtl_commands}\n\nSectionEnd\n\n!ifdef INNER\nSection \'Uninstall\'\n    SetShellVarContext all\n\n    ; uninstall section plugins\n    {uninstall_plugins}\n\n    ; call the uninstaller\n    Delete \'$INSTDIR\\uninstall-{exname}.exe\'\n    RMDir /r \'$INSTDIR\'\n    \n    ; remove the registry information\n    DeleteRegKey HKLM \'SOFTWARE\\{company}\\{product}\'\n    DeleteRegKey HKLM \'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{company}\\{product}\'\n    \n    ; remove the start menu information\n    !insertmacro MUI_STARTMENU_GETFOLDER Application $StartMenuFolder\n    Delete \'$SMPROGRAMS\\$StartMenuFolder\\{product}.lnk\'\n    Delete \'$SMPROGRAMS\\$StartMenuFolder\\Uninstall {product}.lnk\'\n    RMDir \'$SMPROGRAMS\\$StartMenuFolder\'\n    \n    ; remove the registry key\n    DeleteRegKey /ifempty HKCU \'Software\\{company}\\{product}\'\n\n    ; remove the desktop information\n    Delete \'$DESKTOP\\{product}.lnk\'\n    \nSectionEnd\n!endif\n\n; post section plugins\n{post_section_plugins}\n'
SETUPFILE = "import os\nfrom setuptools import setup, find_packages\nimport {name}\n\nhere = os.path.abspath(os.path.dirname(__file__))\ntry:\n    with open(os.path.join(here, 'README.md')) as f:\n        README = f.read()\nexcept IOError:\n    README = {name}.__doc__\n\ntry:\n    VERSION = {name}.__version__\nexcept AttributeError:\n    VERSION = '{version}'\n\ntry:\n    REQUIREMENTS = {name}.__depends__\nexcept AttributeError:\n    REQUIREMENTS = []\n\nsetup(\n    name = '{distname}',\n    version = VERSION,\n    author = '{author}',\n    author_email = '{author_email}',\n    maintainer = '{author}',\n    maintainer_email = '{author_email}',\n    description = '''{brief}''',\n    license = '{license}',\n    keywords = '{keywords}',\n    url = '{url}',\n    include_package_data=True,\n    packages = find_packages(),\n    install_requires = REQUIREMENTS,\n    tests_require = REQUIREMENTS,\n    long_description= README,\n    classifiers=[{classifiers}],\n)"
SPECTREE = "dataset += Tree(r'{path}', prefix='{prefix}', excludes=[{excludes}])\n"
SPECDATA = "dataset += [(r'{name}', r'{path}', r'{type}')]\n"
SPECFILE_CLI = "cli = EXE(pyz,\n          results.scripts,\n          exclude_binaries={excludeBinaries},\n          name=os.path.join(os.path.join(r'build',\n                                         r'pyi.{platform}',\n                                         r'{cliname}',\n                                         r'{cliname}.exe')),\n          debug={debug},\n          strip={strip},\n          icon=r'{logo}',\n          upx={upx},\n          console=True)\n\ncoll = COLLECT(exe,\n               cli,\n               results.binaries,\n               results.zipfiles,\n               dataset,\n               strip={strip},\n               upx={upx},\n               name=os.path.join(r'{distpath}', r'{exname}'))\n"
SPECFILE_COLLECT = "coll = COLLECT(exe,\n               results.binaries,\n               results.zipfiles,\n               dataset,\n               strip={strip},\n               upx={upx},\n               name=os.path.join(r'{distpath}', r'{exname}'))\n"
SPECFILE = "# -*- mode: python -*-\nimport logging\nimport os\nimport sys\n\nlogger = logging.getLogger(__name__)\n\n# define analysis options\nhookpaths = [{hookpaths}]\nhiddenimports = [{hiddenimports}]\nexcludes = [{excludes}]\n\n# generate the analysis for our executable\nresults = Analysis([r'{runtime}'],\n                   pathex=[r'{srcpath}/..'],\n                   hiddenimports=hiddenimports,\n                   hookspath=hookpaths,\n                   excludes=excludes)\n\ndataset = results.datas\n\n# load any additional data information\n{datasets}\n\npyz = PYZ(results.pure)\nexe = EXE(pyz,\n          results.scripts,\n          exclude_binaries={excludeBinaries},\n          name=os.path.join(os.path.join(r'build',\n                                         r'pyi.{platform}',\n                                         r'{exname}',\n                                         r'{exname}.exe')),\n          debug={debug},\n          strip={strip},\n          icon=r'{logo}',\n          upx={upx},\n          console={console})\n\n{collect}\n"
SPECFILE_ONEFILE = "# -*- mode: python -*-\nimport logging\nimport os\nimport sys\n\nlogger = logging.getLogger(__name__)\n\n# define analysis options\nhookpaths = [{hookpaths}]\nhiddenimports = [{hiddenimports}]\nexcludes = [{excludes}]\n\n# generate the analysis for our executable\nresults = Analysis([r'{runtime}'],\n                   pathex=[r'{srcpath}/..'],\n                   hiddenimports=hiddenimports,\n                   hookspath=hookpaths,\n                   excludes=excludes)\n\ndataset = results.datas\n\n# load any additional data information\n{datasets}\n\npyz = PYZ(results.pure)\nexe = EXE(pyz,\n          results.scripts,\n          results.binaries,\n          results.zipfiles,\n          dataset,\n          name=os.path.join(os.path.join(r'build',\n                                         r'pyi.{platform}',\n                                         r'{exname}',\n                                         r'{exname}.exe')),\n          debug={debug},\n          strip={strip},\n          icon=r'{logo}',\n          upx={upx},\n          console={console})\n\ncoll = COLLECT(exe,\n               dataset,\n               strip={strip},\n               upx={upx},\n               name=os.path.join(r'{distpath}', r'{exname}'))\n"