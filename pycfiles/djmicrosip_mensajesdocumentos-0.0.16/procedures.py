# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: C:\GitHub\django-microsip-base\django_microsip_base\django_microsip_base\apps\plugins\djmicrosip_puntos\djmicrosip_puntos\custom_db\core\procedures.py
# Compiled at: 2015-06-01 14:40:26
procedures = {}
procedures_fijos = []
procedures['SIC_PUNTOS_ARTICULOS_AT'] = "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_ARTICULOS_AT\n    as\n    BEGIN\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'ARTICULOS' and rf.RDB$FIELD_NAME = 'SIC_PUNTOS')) then\n            execute statement 'ALTER TABLE ARTICULOS ADD SIC_PUNTOS SMALLINT';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'ARTICULOS' and rf.RDB$FIELD_NAME = 'SIC_DINERO_ELECTRONICO')) then\n            execute statement 'ALTER TABLE ARTICULOS ADD SIC_DINERO_ELECTRONICO NUMERIC(15,2)';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'ARTICULOS' and rf.RDB$FIELD_NAME = 'SIC_HEREDA_PUNTOS')) then\n            execute statement 'ALTER TABLE ARTICULOS ADD SIC_HEREDA_PUNTOS SMALLINT';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'ARTICULOS' and rf.RDB$FIELD_NAME = 'SIC_CARPETA_ID')) then\n            execute statement 'ALTER TABLE ARTICULOS ADD SIC_CARPETA_ID ENTERO_ID';\n    END  \n    "
procedures['SIC_PUNTOS_LINEASARTICULOS_AT'] = "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_LINEASARTICULOS_AT\n    as\n    BEGIN\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'LINEAS_ARTICULOS' and rf.RDB$FIELD_NAME = 'SIC_DINERO_ELECTRONICO')) then\n            execute statement 'ALTER TABLE LINEAS_ARTICULOS ADD SIC_DINERO_ELECTRONICO NUMERIC(15,2)';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'LINEAS_ARTICULOS' and rf.RDB$FIELD_NAME = 'SIC_PUNTOS')) then\n            execute statement 'ALTER TABLE LINEAS_ARTICULOS ADD SIC_PUNTOS SMALLINT';\n        \n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'LINEAS_ARTICULOS' and rf.RDB$FIELD_NAME = 'SIC_HEREDA_PUNTOS')) then\n            execute statement 'ALTER TABLE LINEAS_ARTICULOS ADD SIC_HEREDA_PUNTOS SMALLINT';\n    END  \n    "
procedures['SIC_PUNTOS_GRUPOSLINEAS_AT'] = "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_GRUPOSLINEAS_AT\n    as\n    BEGIN\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'GRUPOS_LINEAS' and rf.RDB$FIELD_NAME = 'SIC_DINERO_ELECTRONICO')) then\n            execute statement 'ALTER TABLE GRUPOS_LINEAS ADD SIC_DINERO_ELECTRONICO NUMERIC(15,2)';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'GRUPOS_LINEAS' and rf.RDB$FIELD_NAME = 'SIC_PUNTOS')) then\n            execute statement 'ALTER TABLE GRUPOS_LINEAS ADD SIC_PUNTOS SMALLINT';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'GRUPOS_LINEAS' and rf.RDB$FIELD_NAME = 'SIC_HEREDA_PUNTOS')) then\n            execute statement 'ALTER TABLE GRUPOS_LINEAS ADD SIC_HEREDA_PUNTOS SMALLINT';\n    END  \n    "
procedures['SIC_PUNTOS_CLIENTES_AT'] = "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_CLIENTES_AT\n    as\n    BEGIN\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_TIPO_TARJETA')) then\n            execute statement 'ALTER TABLE CLIENTES ADD SIC_TIPO_TARJETA CHAR(1)';\n        \n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_HEREDA_VALORPUNTOS')) then\n            execute statement 'ALTER TABLE CLIENTES ADD SIC_HEREDA_VALORPUNTOS SMALLINT DEFAULT 1';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_VALOR_PUNTOS')) then\n            execute statement 'ALTER TABLE CLIENTES ADD SIC_VALOR_PUNTOS NUMERIC(15,2) DEFAULT 0';\n        \n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_HEREDAR_PUNTOS_A')) then\n            execute statement 'ALTER TABLE CLIENTES ADD SIC_HEREDAR_PUNTOS_A ENTERO_ID';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_FECHA_CORTE')) then\n            execute statement 'ALTER TABLE CLIENTES ADD SIC_FECHA_CORTE DATE';\n        \n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_PUNTOS_VIGENCIA_INICIO')) then\n            execute statement 'ALTER TABLE CLIENTES ADD SIC_PUNTOS_VIGENCIA_INICIO DATE';\n        \n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_PUNTOS_VIGENCIA_FIN')) then\n            execute statement 'ALTER TABLE CLIENTES ADD SIC_PUNTOS_VIGENCIA_FIN DATE';\n\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_APLICAR_DSCTO')) then\n            execute statement 'ALTER TABLE CLIENTES ADD SIC_APLICAR_DSCTO SMALLINT DEFAULT 0';\n    END\n    "
procedures['SIC_PUNTOS_LIBRESCLIENTES_AT'] = "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_LIBRESCLIENTES_AT\n    as\n    BEGIN\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'LIBRES_CLIENTES' and rf.RDB$FIELD_NAME = 'HEREDAR_PUNTOS_A')) then\n            execute statement 'ALTER TABLE LIBRES_CLIENTES ADD HEREDAR_PUNTOS_A ENTERO_ID'; \n    END  \n    "
procedures['SIC_PUNTOS_TIPOSCLIENTES_AT'] = "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_TIPOSCLIENTES_AT\n    as\n    BEGIN\n        if (not exists(\n        select 1 from RDB$RELATION_FIELDS rf\n        where rf.RDB$RELATION_NAME = 'TIPOS_CLIENTES' and rf.RDB$FIELD_NAME = 'SIC_VALOR_PUNTOS')) then\n            execute statement 'ALTER TABLE TIPOS_CLIENTES ADD SIC_VALOR_PUNTOS NUMERIC(15,2) DEFAULT 0';\n    END  \n    "
procedures_fijos.append({'name': 'SIC_PUNTOS_GET_VIGENCIA', 
   'procedure': "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_GET_VIGENCIA (\n    cliente_id integer)\n    returns (\n      vigencia_fin_fecha date,\n      vigencia_inicio_fecha date)\n    as\n    declare variable vigencia_inicioper_fecha date;\n    declare variable vigencia_finper_fecha date;\n    declare variable frecuencia integer;\n    declare variable frecuencia_tipo char(1);\n    declare variable a_sumar integer;\n    declare variable fecha_temporal date;\n    declare variable ciclo smallint;\n    declare variable contador integer;\n    begin\n      /* Este procedimiento calcula las fechas de vigencia segun cliente y fechas de vigencias definidas en\n      cliente o en preferencias de empresa de aplicacion. */\n      /*\n\n      */\n      /*Inicializar variables*/\n      select sic_puntos_vigencia_inicio, sic_puntos_vigencia_fin from clientes where cliente_id = :cliente_id into :vigencia_inicioper_fecha, :vigencia_finper_fecha;\n      frecuencia = null;\n\n      if (vigencia_inicioper_fecha is null) then\n      begin\n        select VALOR FROM REGISTRY WHERE NOMBRE = 'SIC_Puntos_VigenciaInicioPeriodoFecha' INTO :vigencia_inicioper_fecha;\n        select VALOR FROM REGISTRY WHERE NOMBRE = 'SIC_Puntos_VigenciaFinPeriodoFecha' INTO :vigencia_finper_fecha;\n        select VALOR FROM REGISTRY WHERE NOMBRE = 'SIC_Puntos_VigenciaFrecuenciaTipo' INTO :frecuencia_tipo;\n        select VALOR FROM REGISTRY WHERE NOMBRE = 'SIC_Puntos_VigenciaFrecuencia' INTO :frecuencia;\n      end\n\n      vigencia_inicio_fecha = vigencia_inicioper_fecha;\n      vigencia_fin_fecha =  vigencia_finper_fecha;\n\n      if (not frecuencia is null) then\n      begin\n        contador = 1;\n        ciclo = 1;\n\n        while ( ciclo = 1 ) do\n        begin\n          a_sumar = frecuencia*contador;\n\n          if (frecuencia_tipo = 'S') then\n            fecha_temporal = dateadd(week, a_sumar, vigencia_inicioper_fecha);\n          if (frecuencia_tipo = 'M') then\n            fecha_temporal = dateadd(month, a_sumar, vigencia_inicioper_fecha);\n          if (frecuencia_tipo = 'A') then\n            fecha_temporal = dateadd(year, a_sumar, vigencia_inicioper_fecha);\n          if (frecuencia_tipo = 'D') then\n            fecha_temporal = dateadd(day, a_sumar, vigencia_inicioper_fecha);\n\n          if( fecha_temporal <= current_date ) then\n            vigencia_inicio_fecha = fecha_temporal;\n          else\n          begin\n            vigencia_fin_fecha = fecha_temporal;\n            ciclo = 0;\n          end\n\n          contador = contador + 1;\n        end\n      end\n\n      if ( vigencia_fin_fecha > vigencia_finper_fecha ) then\n        vigencia_fin_fecha = vigencia_finper_fecha;\n        if (vigencia_inicio_fecha > vigencia_finper_fecha) then\n          vigencia_inicio_fecha = dateadd(day, -1, vigencia_fin_fecha);\n\n      if ( vigencia_fin_fecha is null ) then\n        vigencia_fin_fecha = current_date;\n\n      suspend;\n    end\n    "})
procedures_fijos.append({'name': 'SIC_PUNTOS_GETCLIENTETARJETA', 
   'procedure': "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_GETCLIENTETARJETA (\n        i_docto_id integer,\n        i_docto_sys varchar(2))\n    returns (\n        o_cliente_id integer,\n        o_paga_cliente_id integer,\n        o_recibe_cliente_id integer)\n    as\n    declare variable v_documento_cliente_id integer;\n    declare variable v_cliente_eventual_id integer;\n    declare variable v_cliente_tipo_nombre char(50);\n    declare variable v_cliente_clave varchar(20);\n    declare variable v_cliente_clave_id integer;\n    declare variable v_cliente_heredar_puntos_a integer;\n    declare variable v_documento_tipo char(1);\n    declare variable v_documento_de_puntos char(1);\n    begin\n      v_documento_de_puntos = 'N';\n      if(i_docto_sys = 'PV') then\n      begin\n        select tipo_docto, clave_cliente, cliente_id from doctos_pv where docto_pv_id = :i_docto_id\n        into :v_documento_tipo, :v_cliente_clave, :v_documento_cliente_id;\n\n        /* Si es una venta o una devolucion */\n        if(v_documento_tipo = 'V' or v_documento_tipo = 'D' ) then\n          v_documento_de_puntos = 'S';\n      end\n      else if(i_docto_sys = 'VE') then\n      begin\n        select tipo_docto, clave_cliente, cliente_id from doctos_ve where docto_ve_id = :i_docto_id\n        into :v_documento_tipo, :v_cliente_clave, :v_documento_cliente_id;\n        /* Si es una remision o una factura */\n        if(v_documento_tipo = 'R' or  v_documento_tipo = 'F' ) then\n          v_documento_de_puntos = 'S';\n      end\n\n      /* si es un documento de puntos */\n      if(v_documento_de_puntos = 'S') then\n      begin\n        /* Se saca el cliente para manejar puntos de la clave_cliente indicada en el documento */\n        select cliente_id from claves_clientes where clave_cliente = :v_cliente_clave into :v_cliente_clave_id;\n        /* si tiene clave */\n        if (not v_cliente_clave_id is null) then\n        begin\n          o_paga_cliente_id = v_cliente_clave_id;\n          /* Se sacan los datos del cliente [v_cliente_heredar_puntos_a, v_cliente_tipo_nombre ] */\n          SELECT c.sic_heredar_puntos_a, tc.nombre\n          FROM clientes c left join tipos_clientes tc\n          on c.tipo_cliente_id = tc.tipo_cliente_id\n          WHERE\n          cliente_id = :v_cliente_clave_id\n          into :v_cliente_heredar_puntos_a, :v_cliente_tipo_nombre;\n\n          /* ////////////////////////////////////// */\n          /* // CAMBIA CLIENTE QUE RECIBE PUNTOS // */\n          /* ////////////////////////////////////// */\n          o_recibe_cliente_id = v_cliente_clave_id;\n\n          /*Si hereda los puntos */\n          if (not v_cliente_heredar_puntos_a is null)then\n            o_recibe_cliente_id =  v_cliente_heredar_puntos_a;\n        \n          /* ////////////////////////////////// */\n          /* // CAMBIA CLIENTE SI ES TARJETA // */\n          /* ////////////////////////////////// */\n          o_cliente_id = null;\n\n          /* Si es una tarjeta de puntos */\n          if (v_cliente_tipo_nombre ='TARJETA PROMOCION') then\n          begin\n            /* Se saca cliente eventual */\n            select valor from registry where nombre = 'CLIENTE_EVENTUAL_PV_ID' into :v_cliente_eventual_id;\n            /*si esta definido el cliente eventual */\n            if (not v_cliente_eventual_id is null) then\n              o_cliente_id = v_cliente_eventual_id;\n            else\n              exception EX_SIC_CLIENTE_SIN_SALDO 'Por favor define el cliente eventual en preferencias de la empresa';\n          end\n        end /* end si el cliente no tiene clave */\n      end\n    end\n    "})
procedures_fijos.append({'name': 'SIC_PUNTOS_GETDATOSCLIENTE', 
   'procedure': "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_GETDATOSCLIENTE (\n        docto_pv_id integer,\n        cliente_tarjeta_id integer)\n    returns (\n        sic_puntos_pago integer,\n        sic_valor_puntos_pago numeric(15,2),\n        sic_dinero_electronico_pago numeric(15,2))\n    as\n    declare variable venta_descuento_importe double precision;\n    declare variable valor_puntos_pago double precision;\n    declare variable cliente_hereda_valorpuntos smallint;\n    declare variable cliente_tipo_tarjeta integer;\n    declare variable cliente_aplicar_descuento_sin_tarjeta smallint;\n    declare variable valor_puntos numeric(15,2);\n    declare variable cliente_tipo_id integer;\n    declare variable dinero_electronico_pago double precision;\n    declare variable puntos_pago integer;\n    declare variable cliente_valor_puntos numeric(15,2);\n    begin\n        select dp.dscto_importe from doctos_pv dp where dp.docto_pv_id = :docto_pv_id\n        into :venta_descuento_importe;\n\n        /*DATOS DEL CLIENTE TARJETA*/\n        SELECT sic_tipo_tarjeta, sic_hereda_valorpuntos, sic_valor_puntos, tipo_cliente_id, sic_aplicar_dscto\n        FROM clientes\n        WHERE cliente_id = :cliente_tarjeta_id\n        INTO :cliente_tipo_tarjeta, :cliente_hereda_valorpuntos, :cliente_valor_puntos, :cliente_tipo_id, :cliente_aplicar_descuento_sin_tarjeta;\n        \n        /*DATOS el cliente hereda el valor de los puntos\n        si tiene un tipo de cliente y si hereda puntos */\n        IF ( NOT cliente_tipo_id IS NULL AND cliente_hereda_valorpuntos = 1) THEN\n        BEGIN\n            SELECT sic_valor_puntos\n            FROM tipos_clientes\n            WHERE tipo_cliente_id = :cliente_tipo_id\n            INTO :cliente_valor_puntos;\n        END\n\n        IF(cliente_valor_puntos IS NULL) THEN\n            cliente_valor_puntos = 0;\n\n        IF((cliente_tipo_tarjeta = 'P' OR cliente_tipo_tarjeta = 'D' ) AND :venta_descuento_importe > 0 ) THEN\n        BEGIN\n            IF (cliente_tipo_tarjeta='D') THEN\n            BEGIN\n                valor_puntos_pago =  0;\n                puntos_pago =  0;\n                dinero_electronico_pago = venta_descuento_importe;\n            END\n            ELSE IF (cliente_tipo_tarjeta='P') THEN\n            BEGIN\n                valor_puntos = cliente_valor_puntos;\n                IF (valor_puntos > 0) THEN\n                    puntos_pago =  venta_descuento_importe/valor_puntos;\n                ELSE\n                    puntos_pago = 0;\n\n                valor_puntos_pago =  valor_puntos;\n                dinero_electronico_pago = 0;\n            END\n\n            sic_dinero_electronico_pago = :dinero_electronico_pago;\n            sic_valor_puntos_pago = :valor_puntos_pago;\n            sic_puntos_pago = :puntos_pago;\n\n\n        end\n\n    end\n    "})
procedures_fijos.append({'name': 'SIC_PUNTOS_PUNTOSDOCTOSCLIENTE', 
   'procedure': "\n    CREATE OR ALTER PROCEDURE SIC_PUNTOS_PUNTOSDOCTOSCLIENTE (\n      sic_cliente_tarjeta_id integer not null,\n      docto_ignora_folio char(9) not null)\n    returns (\n      documentos_total_dinero_elect double precision,\n      documentos_total_puntos integer)\n    as\n      declare variable devoluciones_dinero_elect double precision;\n      declare variable devoluciones_puntos integer;\n      declare variable dineroadescontar double precision;\n      declare variable ventas_dinero_elect_pago double precision;\n      declare variable ventas_dinero_elect double precision;\n      declare variable ventas_puntos_pago integer;\n      declare variable ventas_puntos integer;\n      declare variable vigencia_inicio_fecha date;\n      declare variable vigencia_fin_fecha date;\n    begin\n       /* sacar total de puntos y dinero electronico */\n      EXECUTE PROCEDURE sic_puntos_get_vigencia(:sic_cliente_tarjeta_id)\n      RETURNING_VALUES vigencia_fin_fecha, vigencia_inicio_fecha;\n\n      /* SACAMOS TOTALES EXCLUYENDO LA VENTA INDICADA EN EL FOLIO A IGNORAR */\n      select sum(sic_puntos), sum(sic_dinero_electronico), sum(sic_dineroadescontar) from doctos_pv\n      where fecha <= :vigencia_fin_fecha and\n        fecha >= :vigencia_inicio_fecha and\n        tipo_docto = 'V' and (estatus = 'N' or estatus = 'D' )and\n        sic_cliente_tarjeta = :sic_cliente_tarjeta_id and\n        folio <> :docto_ignora_folio\n      into :ventas_puntos, :ventas_dinero_elect, :dineroadescontar;\n\n      /* SACAMOS TOTALES de PAGOS EXCLUYENDO LA VENTA INDICADA EN EL FOLIO A IGNORAR */\n      select sum(sic_puntos_pago), sum(sic_dinero_electronico_pago) from doctos_pv dpv\n      join claves_clientes cc on cc.clave_cliente = dpv.clave_cliente\n      where\n        dpv.fecha <= :vigencia_fin_fecha and\n        dpv.fecha >= :vigencia_inicio_fecha and\n        dpv.tipo_docto = 'V' and (dpv.estatus = 'N' or dpv.estatus = 'D' )and\n        dpv.folio <> :docto_ignora_folio and\n        cc.cliente_id = :sic_cliente_tarjeta_id\n      into :ventas_puntos_pago, :ventas_dinero_elect_pago;\n\n      /* SACAMOS TOTALES DE DEVOLUCIONES */\n      select sum(sic_puntos), sum(sic_dinero_electronico) from doctos_pv\n      where fecha <= :vigencia_fin_fecha and\n        fecha >= :vigencia_inicio_fecha and\n        tipo_docto = 'D' and estatus = 'N' and\n        sic_cliente_tarjeta = :sic_cliente_tarjeta_id\n      into :devoluciones_puntos, :devoluciones_dinero_elect;\n\n      if (devoluciones_puntos is null) then\n        devoluciones_puntos =0;\n      if (ventas_puntos is null) then\n        ventas_puntos = 0;\n      if (ventas_puntos_pago is null) then\n        ventas_puntos_pago = 0;\n      \n      if (ventas_dinero_elect is null) then\n        ventas_dinero_elect =0;\n      if (ventas_dinero_elect_pago is null) then\n        ventas_dinero_elect_pago =0;\n      if (devoluciones_dinero_elect is null) then\n        devoluciones_dinero_elect =0;\n      \n      documentos_total_puntos = ventas_puntos - ventas_puntos_pago - devoluciones_puntos;\n      documentos_total_dinero_elect =  ventas_dinero_elect - ventas_dinero_elect_pago - dineroadescontar - devoluciones_dinero_elect;\n    end\n    "})