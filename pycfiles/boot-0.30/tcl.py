# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/fabrizio/Dropbox/free_range_factory/boot/boot_pkg/tcl.py
# Compiled at: 2012-08-26 08:47:18
import os

def make_xilinx(syn_out_dir, tld_file, vhdl_files, constraints_file, dev_family, dev_device, dev_package, dev_speed):
    """ make_xilinx(syn_out_dir, tld_file, vhdl_files, constraints_file,
                       dev_family,dev_device, dev_package, dev_speed):
        Generate and save a Xilinx ISE xtclsh script.
    """
    vhdl_files = '[ list ../' + (' ../').join(vhdl_files) + ' ]'
    if len(constraints_file) == 0:
        constraints_file = ''
    else:
        if len(constraints_file) > 0:
            constraints_file = constraints_file[0]
            constraints_file = os.path.basename(constraints_file)
            constraints_file = '../' + constraints_file
        content = '#\n# xil_syn_script.tcl\n#\n# script to synthesize your design using xtclsh from Xiling ISE\n# usage: xtclsh src/build/xil_syn_script.tcl\n#\n# this file is automatically generated by "boot"\n#\n# to use this script you need Xilinx ISE 12.x or later\n#\n# for some help:\n#      www.xilinx.com/itp/xilinx10/books/docs/dev/dev.pdf\n\n# output folder\nset compile_directory   %s\n\n# top-level desing file\nset tld_file            %s\n\n# input source files:\nset vhdl_files          %s\n\n# constraint file\nset constraints_file    %s\n\n# Xilinx CableServer host PC:\nset cableserver_host {}\n\nset proj $tld_file\n\nputs "Running ISE xtclsh script: \\"xil_syn_script.tcl\\" automatically generated"\n\nif { $cableserver_host == "" } {\n  puts "Running with the board connected to the local machine.\\n"\n} else {\n  puts "Running with the board connected to $cableserver_host.\\n"\n}\n\n# Set compile directory\nif {![file isdirectory $compile_directory]} {\n  file mkdir $compile_directory\n   }\ncd $compile_directory\n\n\n# Create a new project or open project\nset proj_exists [file exists $proj.xise]\n\nif {$proj_exists == 0} {\n    puts "Creating a new Xilinx ISE project ..."\n    project new $proj.xise\n\n    # Project settings\n    project set family  %s\n    project set device  %s\n    project set package %s\n    project set speed   %s\n\n    # Add source files to the project\n    foreach filename $vhdl_files {\n      xfile add $filename\n    }\n    xfile add $constraints_file\n\n    # Make sure $source_directory is properly set\n    if { ! [catch {set source_directory $source_directory}] } {\n      project set "Macro Search Path" $source_directory -process Translate\n    }\n\n} else {\n\n    puts "Opening existing Xilinx ISE project"\n\n    # Open the existing project\n    project open $proj.xise\n}\n\n# Implementation properties options\n\n# TRANSLATE (often good to set this)\nproject set "Allow Unmatched LOC Constraints" true -process "Translate"\nproject set "Allow Unmatched Timing Group Constraints" "true" -process "Translate"\n\n# GENERATE PROGRAMMING FILE (good to set this for Xula-200 board)\nproject set "Unused IOB Pins" "Float" -process "Generate Programming File"\nproject set "FPGA Start-Up Clock" "JTAG Clock" -process "Generate Programming File"\n\n# MAP\n#project set "Map Effort Level" Medium -process map\n#project set "Perform Timing-Driven Packing and Placement" true -process map\n#project set "Register Duplication" true -process map\n#project set "Retiming" true -process map\n\n# PAR\n#project set "Place & Route Effort Level (Overall)" Standard\n#project set "Extra Effort (Highest PAR level only)" Normal\n\n# Implement Design\nputs "Implement Design..."\n# process run "Implement Design"\nprocess run "Generate Programming File"\nproject close\n\n# All done\nputs "End of ISE Tcl script.\\n"\n\n# Download .bit file into your FPGA/CPLD device using impact\n\n# impact cannot be directly run via xtclsh, instead\n# an impact script file will be created  and run\nset impact_script_filename impact_script.scr\nset bit_filename $tld_file.bit\n\nif [catch {set f_id [open $impact_script_filename w]} msg] {\n  puts "Can\'t create $impact_script_filename"\n  puts $msg\n  exit\n}\n\n# For Spartan3E starter kit\nif { $cableserver_host == "" } {\n        # Assume using locally connected board\n        puts $f_id "setMode -bscan"\n        puts $f_id "setCable -p usb21"\n\n} else {\n        # Assume using cableserver on cableserver_host\n        puts $f_id "setMode -bscan"\n        puts $f_id "setCable -p usb21 -server $cableserver_host"\n}\nputs $f_id "addDevice -position 1 -file $bit_filename"\nputs $f_id "addDevice -p 2 -part xcf04s"\nputs $f_id "addDevice -p 3 -part xc2c64a"\nputs $f_id "readIdcode -p 1"\nputs $f_id "program -p 1"\nputs $f_id "quit"\nclose $f_id\n\n#puts "\\n Switch on the Spartan3E board, connect the USB cable."\n#puts -nonewline "  Press Enter when you are ready to download...\\a"\n#flush stdout\n#\n# The "gets" command fails with the following message, if running within\n# the ISE Project Navigator GUI.\n#\n#   channel "stdin" wasn\'t opened for reading\n#\n#if [catch {gets stdin ignore_me} msg] {\n#  puts "\\n\\n *** $msg"\n#  puts " *** Carrying on regardless ...\\n"\n#  flush stdout\n#}\n# run impact script redirecting stdout\n# set impact_p [open "|impact -batch $impact_script_filename" r]\n# while {![eof $impact_p]} { gets $impact_p line ; puts $line }\n# close $impact\n\n# END\n' % ('src/build', tld_file, vhdl_files, constraints_file,
         dev_family, dev_device, dev_package, dev_speed)
        try:
            if os.path.isdir(syn_out_dir):
                _fl = os.path.join(syn_out_dir, 'xil_syn_script.tcl')
                open(_fl, 'w').write(content)
                print 'Successfully generated Xilinx script file:', _fl
            else:
                print 'Xilinx script not generated.'
                return 1
        except:
            print 'Problems in writing, you might have permission problems.'
            return 1

    return 0