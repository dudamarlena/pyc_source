# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.9-intel/egg/suds/store.py
# Compiled at: 2014-02-26 03:37:27
"""
Contains XML text for documents to be distributed
with the suds lib.  Also, contains classes for accessing
these documents.
"""
from StringIO import StringIO
from logging import getLogger
log = getLogger(__name__)
encoding = '<?xml version="1.0" encoding="UTF-8"?>\n    <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://schemas.xmlsoap.org/soap/encoding/" targetNamespace="http://schemas.xmlsoap.org/soap/encoding/">\n\n     <xs:attribute name="root">\n       <xs:annotation>\n         <xs:documentation>\n           \'root\' can be used to distinguish serialization roots from other\n           elements that are present in a serialization but are not roots of\n           a serialized value graph\n         </xs:documentation>\n       </xs:annotation>\n       <xs:simpleType>\n         <xs:restriction base="xs:boolean">\n           <xs:pattern value="0|1"/>\n         </xs:restriction>\n       </xs:simpleType>\n     </xs:attribute>\n\n      <xs:attributeGroup name="commonAttributes">\n        <xs:annotation>\n          <xs:documentation>\n            Attributes common to all elements that function as accessors or\n            represent independent (multi-ref) values.  The href attribute is\n            intended to be used in a manner like CONREF.  That is, the element\n            content should be empty iff the href attribute appears\n          </xs:documentation>\n        </xs:annotation>\n        <xs:attribute name="id" type="xs:ID"/>\n        <xs:attribute name="href" type="xs:anyURI"/>\n        <xs:anyAttribute namespace="##other" processContents="lax"/>\n      </xs:attributeGroup>\n\n      <!-- Global Attributes.  The following attributes are intended to be usable via qualified attribute names on any complex type referencing them. -->\n\n      <!-- Array attributes. Needed to give the type and dimensions of an array\'s contents, and the offset for partially-transmitted arrays. -->\n\n      <xs:simpleType name="arrayCoordinate">\n        <xs:restriction base="xs:string"/>\n      </xs:simpleType>\n\n      <xs:attribute name="arrayType" type="xs:string"/>\n      <xs:attribute name="offset" type="tns:arrayCoordinate"/>\n\n      <xs:attributeGroup name="arrayAttributes">\n        <xs:attribute ref="tns:arrayType"/>\n        <xs:attribute ref="tns:offset"/>\n      </xs:attributeGroup>\n\n      <xs:attribute name="position" type="tns:arrayCoordinate"/>\n\n      <xs:attributeGroup name="arrayMemberAttributes">\n        <xs:attribute ref="tns:position"/>\n      </xs:attributeGroup>\n\n      <xs:group name="Array">\n        <xs:sequence>\n          <xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>\n        </xs:sequence>\n      </xs:group>\n\n      <xs:element name="Array" type="tns:Array"/>\n      <xs:complexType name="Array">\n        <xs:annotation>\n          <xs:documentation>\n           \'Array\' is a complex type for accessors identified by position\n          </xs:documentation>\n        </xs:annotation>\n        <xs:group ref="tns:Array" minOccurs="0"/>\n        <xs:attributeGroup ref="tns:arrayAttributes"/>\n        <xs:attributeGroup ref="tns:commonAttributes"/>\n      </xs:complexType>\n\n      <!-- \'Struct\' is a complex type for accessors identified by name.\n           Constraint: No element may be have the same name as any other,\n           nor may any element have a maxOccurs > 1. -->\n\n      <xs:element name="Struct" type="tns:Struct"/>\n\n      <xs:group name="Struct">\n        <xs:sequence>\n          <xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded" processContents="lax"/>\n        </xs:sequence>\n      </xs:group>\n\n      <xs:complexType name="Struct">\n        <xs:group ref="tns:Struct" minOccurs="0"/>\n        <xs:attributeGroup ref="tns:commonAttributes"/>\n      </xs:complexType>\n\n      <!-- \'Base64\' can be used to serialize binary data using base64 encoding\n           as defined in RFC2045 but without the MIME line length limitation. -->\n\n      <xs:simpleType name="base64">\n        <xs:restriction base="xs:base64Binary"/>\n      </xs:simpleType>\n\n     <!-- Element declarations corresponding to each of the simple types in the\n          XML Schemas Specification. -->\n\n      <xs:element name="duration" type="tns:duration"/>\n      <xs:complexType name="duration">\n        <xs:simpleContent>\n          <xs:extension base="xs:duration">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="dateTime" type="tns:dateTime"/>\n      <xs:complexType name="dateTime">\n        <xs:simpleContent>\n          <xs:extension base="xs:dateTime">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n\n\n      <xs:element name="NOTATION" type="tns:NOTATION"/>\n      <xs:complexType name="NOTATION">\n        <xs:simpleContent>\n          <xs:extension base="xs:QName">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n\n      <xs:element name="time" type="tns:time"/>\n      <xs:complexType name="time">\n        <xs:simpleContent>\n          <xs:extension base="xs:time">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="date" type="tns:date"/>\n      <xs:complexType name="date">\n        <xs:simpleContent>\n          <xs:extension base="xs:date">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="gYearMonth" type="tns:gYearMonth"/>\n      <xs:complexType name="gYearMonth">\n        <xs:simpleContent>\n          <xs:extension base="xs:gYearMonth">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="gYear" type="tns:gYear"/>\n      <xs:complexType name="gYear">\n        <xs:simpleContent>\n          <xs:extension base="xs:gYear">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="gMonthDay" type="tns:gMonthDay"/>\n      <xs:complexType name="gMonthDay">\n        <xs:simpleContent>\n          <xs:extension base="xs:gMonthDay">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="gDay" type="tns:gDay"/>\n      <xs:complexType name="gDay">\n        <xs:simpleContent>\n          <xs:extension base="xs:gDay">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="gMonth" type="tns:gMonth"/>\n      <xs:complexType name="gMonth">\n        <xs:simpleContent>\n          <xs:extension base="xs:gMonth">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="boolean" type="tns:boolean"/>\n      <xs:complexType name="boolean">\n        <xs:simpleContent>\n          <xs:extension base="xs:boolean">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="base64Binary" type="tns:base64Binary"/>\n      <xs:complexType name="base64Binary">\n        <xs:simpleContent>\n          <xs:extension base="xs:base64Binary">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="hexBinary" type="tns:hexBinary"/>\n      <xs:complexType name="hexBinary">\n        <xs:simpleContent>\n         <xs:extension base="xs:hexBinary">\n           <xs:attributeGroup ref="tns:commonAttributes"/>\n         </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="float" type="tns:float"/>\n      <xs:complexType name="float">\n        <xs:simpleContent>\n          <xs:extension base="xs:float">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="double" type="tns:double"/>\n      <xs:complexType name="double">\n        <xs:simpleContent>\n          <xs:extension base="xs:double">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="anyURI" type="tns:anyURI"/>\n      <xs:complexType name="anyURI">\n        <xs:simpleContent>\n          <xs:extension base="xs:anyURI">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="QName" type="tns:QName"/>\n      <xs:complexType name="QName">\n        <xs:simpleContent>\n          <xs:extension base="xs:QName">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n\n      <xs:element name="string" type="tns:string"/>\n      <xs:complexType name="string">\n        <xs:simpleContent>\n          <xs:extension base="xs:string">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="normalizedString" type="tns:normalizedString"/>\n      <xs:complexType name="normalizedString">\n        <xs:simpleContent>\n          <xs:extension base="xs:normalizedString">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="token" type="tns:token"/>\n      <xs:complexType name="token">\n        <xs:simpleContent>\n          <xs:extension base="xs:token">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="language" type="tns:language"/>\n      <xs:complexType name="language">\n        <xs:simpleContent>\n          <xs:extension base="xs:language">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="Name" type="tns:Name"/>\n      <xs:complexType name="Name">\n        <xs:simpleContent>\n          <xs:extension base="xs:Name">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="NMTOKEN" type="tns:NMTOKEN"/>\n      <xs:complexType name="NMTOKEN">\n        <xs:simpleContent>\n          <xs:extension base="xs:NMTOKEN">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="NCName" type="tns:NCName"/>\n      <xs:complexType name="NCName">\n        <xs:simpleContent>\n          <xs:extension base="xs:NCName">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="NMTOKENS" type="tns:NMTOKENS"/>\n      <xs:complexType name="NMTOKENS">\n        <xs:simpleContent>\n          <xs:extension base="xs:NMTOKENS">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="ID" type="tns:ID"/>\n      <xs:complexType name="ID">\n        <xs:simpleContent>\n          <xs:extension base="xs:ID">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="IDREF" type="tns:IDREF"/>\n      <xs:complexType name="IDREF">\n        <xs:simpleContent>\n          <xs:extension base="xs:IDREF">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="ENTITY" type="tns:ENTITY"/>\n      <xs:complexType name="ENTITY">\n        <xs:simpleContent>\n          <xs:extension base="xs:ENTITY">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="IDREFS" type="tns:IDREFS"/>\n      <xs:complexType name="IDREFS">\n        <xs:simpleContent>\n          <xs:extension base="xs:IDREFS">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="ENTITIES" type="tns:ENTITIES"/>\n      <xs:complexType name="ENTITIES">\n        <xs:simpleContent>\n          <xs:extension base="xs:ENTITIES">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="decimal" type="tns:decimal"/>\n      <xs:complexType name="decimal">\n        <xs:simpleContent>\n          <xs:extension base="xs:decimal">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="integer" type="tns:integer"/>\n      <xs:complexType name="integer">\n        <xs:simpleContent>\n          <xs:extension base="xs:integer">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="nonPositiveInteger" type="tns:nonPositiveInteger"/>\n      <xs:complexType name="nonPositiveInteger">\n        <xs:simpleContent>\n          <xs:extension base="xs:nonPositiveInteger">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="negativeInteger" type="tns:negativeInteger"/>\n      <xs:complexType name="negativeInteger">\n        <xs:simpleContent>\n          <xs:extension base="xs:negativeInteger">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="long" type="tns:long"/>\n      <xs:complexType name="long">\n        <xs:simpleContent>\n          <xs:extension base="xs:long">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="int" type="tns:int"/>\n      <xs:complexType name="int">\n        <xs:simpleContent>\n          <xs:extension base="xs:int">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="short" type="tns:short"/>\n      <xs:complexType name="short">\n        <xs:simpleContent>\n          <xs:extension base="xs:short">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="byte" type="tns:byte"/>\n      <xs:complexType name="byte">\n        <xs:simpleContent>\n          <xs:extension base="xs:byte">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="nonNegativeInteger" type="tns:nonNegativeInteger"/>\n      <xs:complexType name="nonNegativeInteger">\n        <xs:simpleContent>\n          <xs:extension base="xs:nonNegativeInteger">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="unsignedLong" type="tns:unsignedLong"/>\n      <xs:complexType name="unsignedLong">\n        <xs:simpleContent>\n          <xs:extension base="xs:unsignedLong">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="unsignedInt" type="tns:unsignedInt"/>\n      <xs:complexType name="unsignedInt">\n        <xs:simpleContent>\n          <xs:extension base="xs:unsignedInt">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="unsignedShort" type="tns:unsignedShort"/>\n      <xs:complexType name="unsignedShort">\n        <xs:simpleContent>\n          <xs:extension base="xs:unsignedShort">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="unsignedByte" type="tns:unsignedByte"/>\n      <xs:complexType name="unsignedByte">\n        <xs:simpleContent>\n          <xs:extension base="xs:unsignedByte">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="positiveInteger" type="tns:positiveInteger"/>\n      <xs:complexType name="positiveInteger">\n        <xs:simpleContent>\n          <xs:extension base="xs:positiveInteger">\n            <xs:attributeGroup ref="tns:commonAttributes"/>\n          </xs:extension>\n        </xs:simpleContent>\n      </xs:complexType>\n\n      <xs:element name="anyType"/>\n    </xs:schema>\n    '

class DocumentStore():
    """
    The I{suds} document store provides a local repository
    for xml documnts.
    @cvar protocol: The URL protocol for the store.
    @type protocol: str
    @cvar store: The mapping of URL location to documents.
    @type store: dict
    """
    protocol = 'suds'
    store = {'schemas.xmlsoap.org/soap/encoding/': encoding}

    def open(self, url):
        """
        Open a document at the specified url.
        @param url: A document URL.
        @type url: str
        @return: A file pointer to the document.
        @rtype: StringIO
        """
        protocol, location = self.split(url)
        if protocol == self.protocol:
            return self.find(location)
        else:
            return
            return

    def find(self, location):
        """
        Find the specified location in the store.
        @param location: The I{location} part of a URL.
        @type location: str
        @return: An input stream to the document.
        @rtype: StringIO
        """
        try:
            content = self.store[location]
            return StringIO(content)
        except:
            reason = 'location "%s" not in document store' % location
            raise Exception, reason

    def split(self, url):
        """
        Split the url into I{protocol} and I{location}
        @param url: A URL.
        @param url: str
        @return: (I{url}, I{location})
        @rtype: tuple
        """
        parts = url.split('://', 1)
        if len(parts) == 2:
            return parts
        else:
            return (
             None, url)
            return