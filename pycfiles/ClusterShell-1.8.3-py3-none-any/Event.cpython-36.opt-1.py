# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /ClusterShell/Event.py
# Compiled at: 2019-12-07 15:34:33
# Size of source mod 2**32: 5902 bytes
"""
ClusterShell Event handling.

This module contains the base class :class:`.EventHandler` which defines
a simple interface to handle events generated by :class:`.Worker`,
:class:`.EventTimer` and :class:`.EventPort` objects.
"""

class EventHandler(object):
    __doc__ = 'ClusterShell EventHandler interface.\n\n    Derived class should implement any of the following methods to listen for\n    :class:`.Worker`, :class:`.EventTimer` or :class:`.EventPort` selected\n    events. If not implemented, the default behavior is to do nothing.\n    '

    def ev_start(self, worker):
        """
        Called to indicate that a worker has just started.

        :param worker: :class:`.Worker` derived object
        """
        pass

    def ev_pickup(self, worker, node):
        """
        Called for each node to indicate that a worker command for a
        specific node (or key) has just started.

        .. warning:: The signature of :meth:`EventHandler.ev_pickup` changed
            in ClusterShell 1.8, please update your :class:`.EventHandler`
            derived classes and add the node argument.

        *New in version 1.7.*

        :param worker: :class:`.Worker` derived object
        :param node: node (or key)
        """
        pass

    def ev_read(self, worker, node, sname, msg):
        """
        Called to indicate that a worker has data to read from a specific
        node (or key).

        .. warning:: The signature of :meth:`EventHandler.ev_read` changed
            in ClusterShell 1.8, please update your :class:`.EventHandler`
            derived classes and add the node, sname and msg arguments.

        :param worker: :class:`.Worker` derived object
        :param node: node (or key)
        :param sname: stream name
        :param msg: message
        """
        pass

    def ev_error(self, worker):
        """
        Called to indicate that a worker has error to read on stderr from
        a specific node (or key).

        [DEPRECATED] use ev_read instead and test if sname is 'stderr'

        :param worker: :class:`.Worker` object

        Available worker attributes:
        * :attr:`.Worker.current_node` - node (or key)
        * :attr:`.Worker.current_errmsg` - read error message
        """
        pass

    def ev_written(self, worker, node, sname, size):
        """
        Called to indicate that some writing has been done by the worker to a
        node on a given stream. This event is only generated when ``write()``
        is previously called on the worker.

        This handler may be called very often depending on the number of target
        nodes, the amount of data to write and the block size used by the
        worker.

        *New in version 1.7.*

        :param worker: :class:`.Worker` derived object
        :param node: node (or) key
        :param sname: stream name
        :param size: amount of bytes that has just been written to node/stream
            associated with this event
        """
        pass

    def ev_hup(self, worker, node, rc):
        """
        Called for each node to indicate that a worker command for a specific
        node has just finished.

        .. warning:: The signature of :meth:`EventHandler.ev_hup` changed
            in ClusterShell 1.8, please update your :class:`.EventHandler`
            derived classes to add the node and rc arguments.

        :param worker: :class:`.Worker` derived object
        :param node: node (or key)
        :param rc: command return code (or None if the worker doesn't support
            command return codes)
        """
        pass

    def ev_timeout(self, worker):
        """
        Called to indicate that a worker has timed out (worker timeout only).

        [DEPRECATED] use ev_close instead and check if timedout is True

        :param worker: :class:`.Worker` object
        """
        pass

    def ev_close(self, worker, timedout):
        """
        Called to indicate that a worker has just finished.

        .. warning:: The signature of :meth:`EventHandler.ev_close` changed
            in ClusterShell 1.8, please update your :class:`.EventHandler`
            derived classes to add the timedout argument. Please use this
            argument instead of the method ``ev_timeout``.

        :param worker: :class:`.Worker` derived object
        :param timedout: boolean set to True if the worker has timed out
        """
        pass

    def ev_msg(self, port, msg):
        """
        Called to indicate that a message has been received on an EnginePort.

        Used to deliver messages reliably between tasks.

        :param port: EnginePort object on which a message has been received
        :param msg: the message object received
        """
        pass

    def ev_timer(self, timer):
        """
        Called to indicate that a timer is firing.

        :param timer: :class:`.EngineTimer` object that is firing
        """
        pass

    def _ev_routing(self, worker, arg):
        """
        Routing event (private). Called to indicate that a (meta)worker has just
        updated one of its route path. You can safely ignore this event.
        """
        pass