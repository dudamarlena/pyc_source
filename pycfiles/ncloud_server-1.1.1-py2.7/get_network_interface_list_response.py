# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.9-x86_64/egg/ncloud_server/model/get_network_interface_list_response.py
# Compiled at: 2020-05-13 01:24:46
"""
    server

    OpenAPI spec version: 2019-10-17T10:28:43Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint, re, six
from ncloud_server.model.network_interface import NetworkInterface

class GetNetworkInterfaceListResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    swagger_types = {'request_id': 'str', 
       'return_code': 'str', 
       'return_message': 'str', 
       'total_rows': 'int', 
       'network_interface_list': 'list[NetworkInterface]'}
    attribute_map = {'request_id': 'requestId', 
       'return_code': 'returnCode', 
       'return_message': 'returnMessage', 
       'total_rows': 'totalRows', 
       'network_interface_list': 'networkInterfaceList'}

    def __init__(self, request_id=None, return_code=None, return_message=None, total_rows=None, network_interface_list=None):
        """GetNetworkInterfaceListResponse - a model defined in Swagger"""
        self._request_id = None
        self._return_code = None
        self._return_message = None
        self._total_rows = None
        self._network_interface_list = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if return_code is not None:
            self.return_code = return_code
        if return_message is not None:
            self.return_message = return_message
        if total_rows is not None:
            self.total_rows = total_rows
        if network_interface_list is not None:
            self.network_interface_list = network_interface_list
        return

    @property
    def request_id(self):
        """Gets the request_id of this GetNetworkInterfaceListResponse.  # noqa: E501

        :return: The request_id of this GetNetworkInterfaceListResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GetNetworkInterfaceListResponse.

        :param request_id: The request_id of this GetNetworkInterfaceListResponse.  # noqa: E501
        :type: str
        """
        self._request_id = request_id

    @property
    def return_code(self):
        """Gets the return_code of this GetNetworkInterfaceListResponse.  # noqa: E501

        :return: The return_code of this GetNetworkInterfaceListResponse.  # noqa: E501
        :rtype: str
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this GetNetworkInterfaceListResponse.

        :param return_code: The return_code of this GetNetworkInterfaceListResponse.  # noqa: E501
        :type: str
        """
        self._return_code = return_code

    @property
    def return_message(self):
        """Gets the return_message of this GetNetworkInterfaceListResponse.  # noqa: E501

        :return: The return_message of this GetNetworkInterfaceListResponse.  # noqa: E501
        :rtype: str
        """
        return self._return_message

    @return_message.setter
    def return_message(self, return_message):
        """Sets the return_message of this GetNetworkInterfaceListResponse.

        :param return_message: The return_message of this GetNetworkInterfaceListResponse.  # noqa: E501
        :type: str
        """
        self._return_message = return_message

    @property
    def total_rows(self):
        """Gets the total_rows of this GetNetworkInterfaceListResponse.  # noqa: E501

        :return: The total_rows of this GetNetworkInterfaceListResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this GetNetworkInterfaceListResponse.

        :param total_rows: The total_rows of this GetNetworkInterfaceListResponse.  # noqa: E501
        :type: int
        """
        self._total_rows = total_rows

    @property
    def network_interface_list(self):
        """Gets the network_interface_list of this GetNetworkInterfaceListResponse.  # noqa: E501

        :return: The network_interface_list of this GetNetworkInterfaceListResponse.  # noqa: E501
        :rtype: list[NetworkInterface]
        """
        return self._network_interface_list

    @network_interface_list.setter
    def network_interface_list(self, network_interface_list):
        """Sets the network_interface_list of this GetNetworkInterfaceListResponse.

        :param network_interface_list: The network_interface_list of this GetNetworkInterfaceListResponse.  # noqa: E501
        :type: list[NetworkInterface]
        """
        self._network_interface_list = network_interface_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetNetworkInterfaceListResponse):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other