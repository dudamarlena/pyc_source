# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/dpopowich/work/googlewsgiservlets/tutorial/lifecycle.py
# Compiled at: 2011-11-02 16:42:19
from TutorialBase import *

class lifecycle(HTMLPage):
    """An explanation of the lifecycle of a request."""
    title = 'Request Life-Cycle'

    def write_content(self):
        self.writeln(OVERVIEW)


OVERVIEW = make_overview('\nIt is assumed you have an understanding of WSGI applications and how\nthey are called by servers and gateways.  If you\'re not familiar with\nWSGI, I recommend you review [PEP\n3333](http://www.python.org/dev/peps/pep-3333/) now.\n\n____\n\nIn the [first tutorial](index) it was mentioned `HTMLPage` subclasses\n`WSGIServlet`.  To exploit the full power of servlets it is\nrecommended you have a solid understanding of the following code:\n\n<pre class="codesample">\n 1. class WSGIServlet(object):\n 2. \n 3.     def __call__(self, environ, start_response):\n 4.\n 5.         try:\n 6.             self._pre_lifecycle()\n 7.             self._lifecycle()\n 8.         finally:\n 9.             self._post_lifecycle()\n10.         return ...\n11.\n12.     def _pre_lifecycle(self):\n13.        ...\n14. \n15.     def _lifecycle(self):\n16.        raise NotImplementedError\n17.\n18.     def _post_lifecycle(self):\n19.         ...\n</pre>\n\nWith your knowledge of how WSGI works, you can see instances of\nWSGIServlet are callable and their signature follows the protocol of\nWSGI applications.  For each request processed by a servlet, a series\nof methods is called on the servlet in a specific order.  The above\nsimplified code illustrates what happens: in lines 5-10, in a `try`\nstatement, the following methods are called in order:\n\n        _pre_lifecycle() ===> _lifecycle() ===> _post_lifecyce()\n\n\n  * **_pre_lifecycle()**: The base class implementation initializes\n      the `form` and `session` attributes, making them available for\n      `_lifecycle()`.\n\n  * **_lifecycle()**: This is where the real work of a servlet\n      happens, generating the response sent back to the client.  Note,\n      however, the base class raises `NotImplementedError`, making it\n      an Abstract Base Class.  WSGIServlets comes with three\n      subclasses implementing `_lifecycle`: `HTMLPage`, which is this\n      tutorial\'s focus, `JSONRPCServer`, a servlet creating json-rpc\n      services (a tutorial is coming up) and `Dispatcher`, a servlet\n      which allows mixing many servlets along with static content\n      under one servlet (this tutorial is an example of such an\n      application).\n\n  * **_post_lifecycle()**: The base class implementation garbage\n      collects `form` and, if `session` was used, saves the session\n      state and garbage collects `session`.\n\nCreating a new type of servlet is a matter of subclassing\n`WSGIServlet` and, minimally, implementing `_lifecycle`.  This is how\n`HTMLPage` implements `_lifecycle`:\n\n<pre class="codesample">\n 1.   def _lifecycle(self):\n 2.       try:\n 3.           self.prep()\n 4.           if not self.write_html():\n 5.               raise HTTPNoContent\n 6.       finally:\n 7.           self.wrapup()\n</pre>\n\n  * `prep` is called to do any pre-processing, before generating the\n  response.  The base class method is a no-op.  This is a good place\n  to validate incoming data, open database connections, initialize\n  variables for the request, etc.  Note the return value is ignored.\n\n  * `write_html` is where the response is generated and output written\n  to the client.  Typically, you will not need to override this\n  method.  The next servlet in the tutorial will cover what happens in\n  `write_html`.  Note how the return value, if false, raises\n  `HTTPNoContent`.  Raising exceptions for preemptive returns will be\n  covered later.\n\n  * `wrapup` is where any necessary post-processing occurs.  The base\n  class method is a no-op.  Here is the place to do any clean-up of\n  external connections, conditionally invalidate sessions, etc.  Note\n  the return value is ignored.\n\nThe next servlet will review the functionality of `write_html`.\n\n')