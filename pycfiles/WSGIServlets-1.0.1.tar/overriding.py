# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/dpopowich/work/googlewsgiservlets/tutorial/overriding.py
# Compiled at: 2011-11-02 16:42:30
import cgi
from SitePage import *

class overriding(SitePage):
    """How to manage page layout by overriding HTMLPage methods."""
    title = 'Overriding HTMLPage Methods'

    def write_content(self):
        self.writeln(OVERVIEW)


OVERVIEW = make_overview('\nAs discussed previously, most servlets will subclass `HTMLPage` and therefore have `write_html` called as part, if not all, of the\nresponse to a request.  Here we will explore this method.\n\nIt is implemented, simply, as follows:\n\n        def write_html(self):\n            self.write_doctype()\n            self.writeln(\'<HTML>\')\n            self.write_head()\n            self.write_body()\n            self.writeln(\'</HTML>\')\n            return True\n\nIf you are familiar with the HTML specification you will recognize\nthis method writes a well-formed HTML document: the declaration of the\ndocument type (`<!DOCTYPE...>` element) followed by the opening\n`<HTML>` tag; the HEAD element (`<HEAD>...</HEAD>`) followed by the\nBODY element (`<BODY>...</BODY>`); lastly, the closing `</HTML>` tag.\nYou should note the method returns `True` which lets the caller know a\nresponse was generated.\n\n`write_doctype` is fully described in the API reference.\n\n`write_head` calls a series of methods which generate the HEAD element\ncontent.  In turn, the content these methods send to the client is\ncontrolled by the setting of numerous instance variables: `js`, `css`,\n`css_links`, etc.  Many have been demonstrated earlier in this\ntutorial.  See the API reference for complete details.\n\n`write_body` is where the content is generated.  Between writing the\n`<BODY>` and `</BODY>` tags, `write_body` calls `write_body_parts`.\nThe base implementation of `write_body_parts` is implemented as:\n\n        def write_body_parts(self):\n            self.write_content()\n    \nYou may wonder why `write_body` calls `write_body_parts` if the method\nonly calls `write_content`.  Why not have `write_body` call\n`write_content` and be done with it?  Mainly, having a method between\n`write_body` and `write_content` makes it much easier to modify page\nlayout.\n\nFor example, imagine a company website with a standard page\nlayout like this:\n\n    ---------------------------------------------------\n    |            |                                    |\n    | SIDEBAR    |  CONTENT                           |\n    |            |                                    |\n    |            |                                    |\n    |            |                                    |\n    |            |                                    |\n    ---------------------------------------------------\n\nThis is a fairly common page layout and is easily implemented in\nservlets by overriding `write_body_parts` which, in one possible\nimplementation, can write out a series of DIV elements (along with the\nnecessary css) and inside the DIV elements, call methods to generate\nthe output of the sidebar and content; something like this:\n\n    def write_body_parts(self):\n\n        self.writeln(\'<div id="sidebar">\')\n        self.write_sidebar()\n        self.writeln(\'</div>\')\n        self.writeln(\'<div id="content">\')\n        self.write_content()\n        self.writeln(\'</div>\')\n\nIf the above implementation of `write_body_parts` is placed in an\nabstract base class (which also has the implementation for\n`write_sidebar`) and every servlet in the site inherits from it, then\nevery page on the site will have the common sidebar.\n\nThis is what we have done for this servlet.  It does not inherit from\n`HTMLPage` like all the other servlets thus far, but from another\nservlet, `SitePage`, which in turn inherits from `HTMLPage`.  If you\nview the python source you will see the only method implemented in\nthis servlet is `write_content`.  `SitePage`, defined in\n[SitePage.py](SitePage.py), overrides `write_body_parts` which\ngenerates the DIVs and calls `write_sidebar` and `write_content` in\nthe appropriate places.  The sidebar for this *site* provides links to\nall the tutorials.\n\nThe next servlet will demonstrate the ease of modifying page layout\neither by modifying the implementation in the abstract base class or\nby extending the implementation.\n\n')