# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/dpopowich/work/googlewsgiservlets/tutorial/dispatching.py
# Compiled at: 2011-11-02 15:00:30
from TutorialBase import *

class dispatching(HTMLPage):
    """How to mix servlets and static content under one servlet."""
    title = 'The Dispatcher'

    def write_content(self):
        self.writeln(OVERVIEW)


OVERVIEW = make_overview('\nUp to this point we have been looking at functionality provided by\n`HTMLPage`, the servlet for creating HTML content, and `WSGIServlet`,\nthe base class for all servlets.  There are two other subclasses of\n`WSGIServlet` that come with the standard distribution of\nwsgiservlets:\n\n  1. `Dispatcher`, which allows you to mix several servlets and static\n      content under the control of one servlet.  This whole tutorial\n      is an example of dispatching.\n  2. `JSONRPCServer`, which aids in creating JSON-RPC services.\n\nThis servlet will review `Dispatcher`.  The next servlet will review\n`JSONRPCServer`.\n\n\n* * *\n\n\n## Dispatcher\n\n`Dispatcher` does not generate any content, but is a dispatching agent\nin the truest sense: incoming requests are processed and passed on to\nanother agent which handles the request.  Dispatchers determine how to\npass on the request by looking at `PATH_INFO`.\n      \nWhen constructing a `Dispatcher` you need to pass in one or both of\nthe following keyword arguments to the constructor:\n\n  1. `docroot`, a string, the path to the document root containing static\n      content.  This must be an existing directory.\n  2. `servlet_mapping`, a mapping of names to servlet classes of the\n      form:\n\n> *name* => `WSGIServletClass`  \n> or   \n> *name* => `(WSGIServletClass, args [, kw])`\n\nIn the first form, the name maps to a `WSGIServlet` *class* (not an\ninstance).  In the second, a tuple is specified with `args`, a tuple,\nand `kw`, a dict, the positional parameters and keyword arguments,\nrespectively, to be passed to the constructor of the servlet class.\nIf not specified, `args` defaults to an empty tuple and `kw` an empty\ndict.\n\nAfter a dispatcher receives a request, `PATH_INFO` is inspected and the\nfirst component (i.e., `path_info_list[0]`), if it exists, is looked\nup in `servlet_mapping` and if a servlet is found an instance is\ncreated:\n\n        servlet = WSGIServletClass(*args, **kw)\n\nThen `subrequest` is called on the servlet instance, processing the\nrequest and returning the results to the client.  See the reference\ndocumentation for details about making subrequests.\n\nIf a servlet class is not found in `servlet_mapping`, it is assumed\n`PATH_INFO` refers to a static file relative to `docroot`.  If such a\nfile exists, the file is returned as the content.\n\nIf no mapping is found and no file is found (or `docroot` was never\nspecified), `HTTPNotFound` (a 404) is raised.\n\nThere are other configuration options you can specify when creating\nyour dispatcher: 1) a default servlet if `PATH_INFO` is empty, 2) the\ndirectory index files to search for if the referenced static file is a\ndirectory (e.g., `index.html`), 3) what static files to forbid access\nto when requested (raising `HTTPForbidden`).  Forbidding certain files\nbased on filename patterns allows you to co-locate source code with\nstatic files without worry of exposing your source to the WWW.\n\nSee the reference documentation for details about configuring your\ndispatcher and look at the tutorial implementation as an example.\n\n')