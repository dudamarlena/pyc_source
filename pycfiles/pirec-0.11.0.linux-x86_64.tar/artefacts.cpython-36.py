# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/jstutters/.virtualenvs/pirec/lib/python3.6/site-packages/pirec/artefacts.py
# Compiled at: 2017-11-07 07:45:36
# Size of source mod 2**32: 4829 bytes
"""Module containing the :class:`pirec.artefacts.Artefact` base class and subclasses."""
from __future__ import absolute_import
import os, tarfile, tempfile
from .utils import file_sha1sum

class Artefact(object):
    __doc__ = "Base class for Pirec artefacts (files consumed by and generated by processes).\n\n    Args:\n        filename (str): The filename of the artefact.\n        extension (str): The extension of the artefact's filename.\n\n    Keyword args:\n        exists (boolean): If true raise an exception if the file does not exist.\n\n    Raises:\n        :class:`exceptions.ValueError`: If ``filename`` does not end with ``extension``.\n        :class:`exceptions.IOError`: If ``filename`` does not exist.\n    "

    def __init__(self, filename, extension, exists=True):
        """Initialize the artefact."""
        if not filename.endswith(extension):
            raise ValueError('Extension is not {0!r}'.format(extension))
        if exists:
            if not os.path.exists(filename):
                raise IOError('No such file: {0!r}'.format(filename))
        self._filename = filename
        self._ext_length = len(extension)
        self._abspath = os.path.abspath(filename)

    def checksum(self):
        """Calculate the SHA-1 checksum of the file."""
        return file_sha1sum(self.filename)

    def exists(self):
        """Return ``True`` if :attr:`Artefact.filename` exists."""
        return os.path.exists(self.filename)

    @property
    def abspath(self):
        """The file's absolute path."""
        return self._abspath

    @property
    def basename(self):
        """The filename without the extension.

        .. code:: python

            >> Artefact('/dir/file.txt').basename
            '/dir/file'
        """
        return self._filename[:-self._ext_length]

    @property
    def justname(self):
        """The filename without the extension and directory components.

        .. code:: python

            >> Artefact('/dir/file.txt').justname
            'file'
        """
        return os.path.basename(self._filename)[:-self._ext_length]

    @property
    def dirname(self):
        """Return the directory component of the filename.

        .. code:: python

            >> Artefact('/dir/file.txt').dirname()
            '/dir'
        """
        return os.path.dirname(self._filename)

    def dereference(self):
        """Remove any directory components from the filename.

        .. code:: python

            >> a = Artefact('/dir/file.txt')
            >> a.dereference()
            >> a.filename
            'file.txt'
        """
        self._filename = os.path.basename(self._filename)

    @property
    def filename(self):
        """The artefact's filename."""
        return self._filename

    def __repr__(self):
        return '{0}({1!r})'.format(self.__class__.__name__, self.filename)


class NiiGzImage(Artefact):
    __doc__ = 'An artefact for ``.nii.gz`` images.\n\n    Args:\n        filename (str): The filename of the artefact.\n\n    Keyword args:\n        exists (boolean): If true raise an exception if the file does not exist.\n    '
    extension = '.nii.gz'

    def __init__(self, filename, exists=True):
        """Initialize the artefact."""
        super(NiiGzImage, self).__init__(filename, self.extension, exists)

    def __repr__(self):
        return '{0}({1!r})'.format(self.__class__.__name__, self.filename)


class TextFile(Artefact):
    __doc__ = 'An artefact for ``.txt`` files.\n\n    Args:\n        filename (str): The filename of the artefact.\n\n    Keyword args:\n        exists (boolean): If true raise an exception if the file does not exist.\n    '
    extension = '.txt'

    def __init__(self, filename, exists=True):
        """Initialize the artefact."""
        super(TextFile, self).__init__(filename, (self.extension), exists=True)

    def __repr__(self):
        return '{0}({1!r})'.format(self.__class__.__name__, self.filename)


def get_targz_artefact(archive_filename, filename, artefact_cls, strip_dirname=True):
    """Get an artefact from a ``.tar.gz`` file.

    Args:
        archive_name (str): The filename of the container.
        filename (str): The filename of the artefact.
        artefact_cls (Artefact): The class of the artefact.
    """
    dirname = os.path.basename(archive_filename)[0:-7]
    temp_file_handle, temp_name = tempfile.mkstemp(suffix=(artefact_cls.extension))
    with tarfile.open(archive_filename, 'r:gz') as (tf):
        if strip_dirname:
            member_name = os.path.join(dirname, filename)
        else:
            member_name = filename
        target_member = tf.getmember(member_name)
        extracted_file = tf.extractfile(target_member)
        with os.fdopen(temp_file_handle, 'wb') as (temp_file):
            temp_file.write(extracted_file.read())
    return artefact_cls(temp_name)