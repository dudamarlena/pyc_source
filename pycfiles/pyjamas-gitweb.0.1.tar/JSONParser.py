# uncompyle6 version 3.6.7
# Python bytecode 2.5 (62131)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: /usr/lib/python2.5/site-packages/pyjamas/JSONParser.py
# Compiled at: 2008-09-03 09:02:13
JS('\n/*\nJSONEncode:\n    +---------------+-------------------+---------------+\n    | PYGWT         | Python            | JSON          |\n    +===============+===================+===============+\n    | pyjslib_Dict  | dict              | object        |\n    +---------------+-------------------+---------------+\n    | pyjslib_List  | list, tuple       | array         |\n    +---------------+-------------------+---------------+\n    | string        | str, unicode      | string        |\n    +---------------+-------------------+---------------+\n    | number        | int, long, float  | number        |\n    +---------------+-------------------+---------------+\n    | true          | True              | true          |\n    +---------------+-------------------+---------------+\n    | false         | False             | false         |\n    +---------------+-------------------+---------------+\n    | null          | None              | null          |\n    +---------------+-------------------+---------------+\n\n\nJSONDecode:\n    +---------------+-------------------+--------------+\n    | JSON          | Python            | PYGWT        |\n    +===============+===================+==============+\n    | object        | dict              | pyjslib_Dict |\n    +---------------+-------------------+--------------+\n    | array         | list              | pyjslib_List |\n    +---------------+-------------------+--------------+\n    | string        | unicode           | string       |\n    +---------------+-------------------+--------------+\n    | number (int)  | int, long         | number       |\n    +---------------+-------------------+--------------+\n    | number (real) | float             | number       |\n    +---------------+-------------------+--------------+\n    | true          | True              | true         |\n    +---------------+-------------------+--------------+\n    | false         | False             | false        |\n    +---------------+-------------------+--------------+\n    | null          | None              | null         |\n    +---------------+-------------------+--------------+\n*/\n')

class JSONParser:

    def decode(self, str):
        return self.jsObjectToPy(self.parseJSON(str))

    def decodeAsObject(self, str):
        return self.jsObjectToPyObject(self.parseJSON(str))

    def encode(self, obj):
        return self.toJSONString(obj)

    def jsObjectToPy(self, obj):
        JS('\n        if (pyjslib_isArray(obj)) {\n            for (var i in obj) obj[i] = this.jsObjectToPy(obj[i]);\n            obj=new pyjslib_List(obj);\n            }\n        else if (pyjslib_isObject(obj)) {\n            for (var i in obj) obj[i]=this.jsObjectToPy(obj[i]);\n            obj=new pyjslib_Dict(obj);\n            }\n        \n        return obj;\n        ')

    def jsObjectToPyObject(self, obj):
        JS('\n        if (pyjslib_isArray(obj)) {\n            for (var i in obj) obj[i] = this.jsObjectToPyObject(obj[i]);\n            obj=new pyjslib_List(obj);\n            }\n        else if (pyjslib_isObject(obj)) {\n            if (obj["__jsonclass__"]) {\n                var class_name = obj["__jsonclass__"][0];\n                class_name = class_name.replace(".", "_");\n                \n                var new_obj = eval("new " + class_name + "()");\n                delete obj["__jsonclass__"];\n                for (var i in obj) new_obj[i] = this.jsObjectToPyObject(obj[i]);\n                obj = new_obj;\n                }\n            else {\n                for (var i in obj) obj[i]=this.jsObjectToPyObject(obj[i]);\n                obj=new pyjslib_Dict(obj);\n                }       \n            }\n        \n        return obj;\n        ')

    def toJSONString(self, obj):
        JS('\n   var m = {\n            \'\\b\': \'\\\\b\',\n            \'\\t\': \'\\\\t\',\n            \'\\n\': \'\\\\n\',\n            \'\\f\': \'\\\\f\',\n            \'\\r\': \'\\\\r\',\n            \'"\' : \'\\\\"\',\n            \'\\\\\': \'\\\\\\\\\'\n        },\n        s = {\n            array: function (x) {\n                var a = [\'[\'], b, f, i, l = x.length, v;\n                for (i = 0; i < l; i += 1) {\n                    v = x[i];\n                    f = s[typeof v];\n                    if (f) {\n                        v = f(v);\n                        if (typeof v == \'string\') {\n                            if (b) {\n                                a[a.length] = \',\';\n                            }\n                            a[a.length] = v;\n                            b = true;\n                        }\n                    }\n                }\n                a[a.length] = \']\';\n                return a.join(\'\');\n            },\n            \'boolean\': function (x) {\n                return String(x);\n            },\n            \'undefined\':function (x) {\n               return "null";\n            },\n            \'null\': function (x) {\n                return "null";\n            },\n            number: function (x) {\n                return isFinite(x) ? String(x) : \'null\';\n            },\n            object: function (x) {\n                if (x) {\n                    if (x instanceof Array) {\n                        return s.array(x);\n                    }\n                    if (x instanceof __pyjslib_List) {\n                        return s.array(x.l);\n                    }\n                    if (x instanceof __pyjslib_Dict) {\n                        return s.object(x.d);\n                    }\n                    var a = [\'{\'], b, f, i, v;\n                    for (i in x) {\n                        v = x[i];\n                        f = s[typeof v];\n                        if (f) {\n                            v = f(v);\n                            if (typeof v == \'string\') {\n                                if (b) {\n                                    a[a.length] = \',\';\n                                }\n                                a.push(s.string(i), \':\', v);\n                                b = true;\n                            }\n                        }\n                    }\n                    a[a.length] = \'}\';\n                    return a.join(\'\');\n                }\n                return \'null\';\n            },\n            string: function (x) {\n                if (/["\\\\\\x00-\\x1f]/.test(x)) {\n                    x = x.replace(/([\\x00-\\x1f\\\\"])/g, function(a, b) {\n                        var c = m[b];\n                        if (c) {\n                            return c;\n                        }\n                        c = b.charCodeAt();\n                        return \'\\\\u00\' +\n                            Math.floor(c / 16).toString(16) +\n                            (c % 16).toString(16);\n                    });\n                }\n                return \'"\' + x + \'"\';\n            }\n        };\n\n        f=s[typeof obj];\n        return f(obj);\n        ')

    def parseJSON(self, str):
        JS('\n        try {\n            return (/^("(\\\\.|[^"\\\\\\n\\r])*?"|[,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t])+?$/.test(str)) &&\n                eval(\'(\' + str + \')\');\n        } catch (e) {\n            return false;\n        }\n        ')