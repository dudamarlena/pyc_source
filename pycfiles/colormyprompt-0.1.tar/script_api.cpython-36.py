# uncompyle6 version 3.6.7
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.macosx-10.7-x86_64/egg/colormeshop/api/script_api.py
# Compiled at: 2018-07-29 03:49:51
# Size of source mod 2**32: 23621 bytes
__doc__ = '\n    カラーミーショップ API\n\n    # カラーミーショップ API  [カラーミーショップ](https://shop-pro.jp) APIでは、受注の検索や商品情報の更新を行うことができます。  ## 利用手順  はじめに、カラーミーデベロッパーアカウントを用意します。[デベロッパー登録ページ](https://api.shop-pro.jp/developers/sign_up)から登録してください。  次に、[登録ページ](https://api.shop-pro.jp/oauth/applications/new)からアプリケーション登録を行ってください。 スマートフォンのWebViewを利用する場合は、リダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を入力してください。  その後、カラーミーショップアカウントの認証ページを開きます。認証ページのURLは、`https://api.shop-pro.jp/oauth/authorize`に必要なパラメータをつけたものです。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面で確認できるクライアントID| |`response_type`|"code"という文字列| |`scope`| 別表参照| |`redirect_url`|アプリケーション登録時に入力したリダイレクトURL|  `scope`は、以下のうち、アプリケーションが利用したい機能をスペース区切りで指定してください。  |スコープ|機能| |---|---| |`read_products`|商品データの参照| |`write_products`|在庫データの更新| |`read_sales`|受注・顧客データの参照| |`write_sales`|受注データの更新|  以下のようなURLとなります。  ``` https://api.shop-pro.jp/oauth/authorize?client_id=CLIENT_ID&redirect_uri=REDIRECT_URL&response_type=code&scope=read_products%20write_products ```  初めてこのページを訪れる場合は、カラーミーショップアカウントのIDとパスワードの入力を求められます。 承認ボタンを押すと、このアプリケーションがショップのデータにアクセスすることが許可され、リダイレクトURLへリダイレクトされます。  承認された場合は、`code`というクエリパラメータに認可コードが付与されます。承認がキャンセルされた、またはエラーが起きた場合は、 `error`パラメータにエラーの内容を表す文字列が与えられます。  アプリケーション登録時のリダイレクトURLに`urn:ietf:wg:oauth:2.0:oob`を指定した場合は、以下のようなURLにリダイレクトされます。 末尾のパスが認可コードになっています。  ``` https://api.shop-pro.jp/oauth/authorize/AUTH_CODE ```  認可コードの有効期限は発行から10分間です。  最後に、認可コードとアクセストークンを交換します。以下のパラメータを付けて、`https://api.shop-pro.jp/oauth/token`へリクエストを送ります。  |パラメータ名|値| |---|---| |`client_id`|アプリケーション詳細画面に表示されているクライアントID| |`client_secret`|アプリケーション詳細画面に表示されているクライアントシークレット| |`code`|取得した認可コード| |`grant_type`|"authorization_code"という文字列| |`redirect_uri`|アプリケーション登録時に入力したリダイレクトURL|  ```console # curl での例  $ curl -X POST \\   -d\'client_id=CLIENT_ID\' \\   -d\'client_secret=CLIENT_SECRET\' \\   -d\'code=CODE\' \\   -d\'grant_type=authorization_code\'   \\   -d\'redirect_uri=REDIRECT_URI\'  \\   \'https://api.shop-pro.jp/oauth/token\' ```  リクエストが成功すると、以下のようなJSONが返ってきます。  ```json {   "access_token": "d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX",   "token_type": "bearer",   "scope": "read_products write_products" } ```  アクセストークンに有効期限はありませんが、許可済みアプリケーション一覧画面から失効させることができます。なお、同じ認可コードをアクセストークンに交換できるのは1度だけです。  取得したアクセストークンは、Authorizationヘッダに入れて使用します。以下にショップ情報を取得する際の例を示します。  ```console # curlの例  $ curl -H \'Authorization: Bearer d461ab8XXXXXXXXXXXXXXXXXXXXXXXXX\' https://api.shop-pro.jp/v1/shop.json ```  ## エラー  カラーミーショップAPI v1では  - エラーコード - エラーメッセージ - ステータスコード  の配列でエラーを表現します。以下に例を示します。  ```json {   "errors": [     {       "code": 404100,       "message": "レコードが見つかりませんでした。",       "status": 404     }   ] } ```   # noqa: E501\n\n    OpenAPI spec version: 1.0.0\n    Generated by: https://openapi-generator.tech\n'
from __future__ import absolute_import
import re, six
from colormeshop.api_client import ApiClient

class ScriptApi(object):
    """ScriptApi"""

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_script_tag(self, unknown_base_type, **kwargs):
        """スクリプトタグの作成  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_script_tag(unknown_base_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param object unknown_base_type: 作成するスクリプトタグの情報 (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return (self.create_script_tag_with_http_info)(unknown_base_type, **kwargs)
        else:
            data = (self.create_script_tag_with_http_info)(unknown_base_type, **kwargs)
            return data

    def create_script_tag_with_http_info(self, unknown_base_type, **kwargs):
        """スクリプトタグの作成  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_script_tag_with_http_info(unknown_base_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param object unknown_base_type: 作成するスクリプトタグの情報 (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'unknown_base_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method create_script_tag" % key)
            params[key] = val

        del params['kwargs']
        if 'unknown_base_type' not in params or params['unknown_base_type'] is None:
            raise ValueError('Missing the required parameter `unknown_base_type` when calling `create_script_tag`')
        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'unknown_base_type' in params:
            body_params = params['unknown_base_type']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = [
         'OAuth2']
        return self.api_client.call_api('/v1/script_tags.json',
          'POST', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='object',
          auth_settings=auth_settings,
          async=(params.get('async')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def delete_script_tag(self, script_tag_id, **kwargs):
        """スクリプトタグの削除  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_script_tag(script_tag_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int script_tag_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return (self.delete_script_tag_with_http_info)(script_tag_id, **kwargs)
        else:
            data = (self.delete_script_tag_with_http_info)(script_tag_id, **kwargs)
            return data

    def delete_script_tag_with_http_info(self, script_tag_id, **kwargs):
        """スクリプトタグの削除  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_script_tag_with_http_info(script_tag_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int script_tag_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'script_tag_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete_script_tag" % key)
            params[key] = val

        del params['kwargs']
        if 'script_tag_id' not in params or params['script_tag_id'] is None:
            raise ValueError('Missing the required parameter `script_tag_id` when calling `delete_script_tag`')
        collection_formats = {}
        path_params = {}
        if 'script_tag_id' in params:
            path_params['scriptTagId'] = params['script_tag_id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        auth_settings = [
         'OAuth2']
        return self.api_client.call_api('/v1/script_tags/{scriptTagId}.json',
          'DELETE', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type=None,
          auth_settings=auth_settings,
          async=(params.get('async')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def get_script_tag(self, script_tag_id, **kwargs):
        """スクリプトタグの取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_script_tag(script_tag_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int script_tag_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return (self.get_script_tag_with_http_info)(script_tag_id, **kwargs)
        else:
            data = (self.get_script_tag_with_http_info)(script_tag_id, **kwargs)
            return data

    def get_script_tag_with_http_info(self, script_tag_id, **kwargs):
        """スクリプトタグの取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_script_tag_with_http_info(script_tag_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int script_tag_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'script_tag_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_script_tag" % key)
            params[key] = val

        del params['kwargs']
        if 'script_tag_id' not in params or params['script_tag_id'] is None:
            raise ValueError('Missing the required parameter `script_tag_id` when calling `get_script_tag`')
        collection_formats = {}
        path_params = {}
        if 'script_tag_id' in params:
            path_params['scriptTagId'] = params['script_tag_id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = [
         'OAuth2']
        return self.api_client.call_api('/v1/script_tags/{scriptTagId}.json',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='object',
          auth_settings=auth_settings,
          async=(params.get('async')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def get_script_tags(self, **kwargs):
        """スクリプトタグの取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_script_tags(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return (self.get_script_tags_with_http_info)(**kwargs)
        else:
            data = (self.get_script_tags_with_http_info)(**kwargs)
            return data

    def get_script_tags_with_http_info(self, **kwargs):
        """スクリプトタグの取得  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_script_tags_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_script_tags" % key)
            params[key] = val

        del params['kwargs']
        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = [
         'OAuth2']
        return self.api_client.call_api('/v1/script_tags.json',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='object',
          auth_settings=auth_settings,
          async=(params.get('async')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def update_script_tag(self, script_tag_id, unknown_base_type, **kwargs):
        """スクリプトタグの更新  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_script_tag(script_tag_id, unknown_base_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int script_tag_id: (required)
        :param object unknown_base_type: 作成するスクリプトタグの情報 (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return (self.update_script_tag_with_http_info)(script_tag_id, unknown_base_type, **kwargs)
        else:
            data = (self.update_script_tag_with_http_info)(script_tag_id, unknown_base_type, **kwargs)
            return data

    def update_script_tag_with_http_info(self, script_tag_id, unknown_base_type, **kwargs):
        """スクリプトタグの更新  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_script_tag_with_http_info(script_tag_id, unknown_base_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int script_tag_id: (required)
        :param object unknown_base_type: 作成するスクリプトタグの情報 (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'script_tag_id', 'unknown_base_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method update_script_tag" % key)
            params[key] = val

        del params['kwargs']
        if 'script_tag_id' not in params or params['script_tag_id'] is None:
            raise ValueError('Missing the required parameter `script_tag_id` when calling `update_script_tag`')
        if 'unknown_base_type' not in params or params['unknown_base_type'] is None:
            raise ValueError('Missing the required parameter `unknown_base_type` when calling `update_script_tag`')
        collection_formats = {}
        path_params = {}
        if 'script_tag_id' in params:
            path_params['scriptTagId'] = params['script_tag_id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'unknown_base_type' in params:
            body_params = params['unknown_base_type']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = [
         'OAuth2']
        return self.api_client.call_api('/v1/script_tags/{scriptTagId}.json',
          'PUT', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='object',
          auth_settings=auth_settings,
          async=(params.get('async')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)