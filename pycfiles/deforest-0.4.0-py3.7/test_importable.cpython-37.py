# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/deforest/tests/test_importable.py
# Compiled at: 2020-03-13 12:34:54
# Size of source mod 2**32: 11887 bytes
import unittest, tempfile, json
from deforest.deforest import deforest_file, main
from click.testing import CliRunner

class TestImportableMethods(unittest.TestCase):
    raw_file_input = '\nAWSTemplateFormatVersion: "2010-09-09"\nDescription: A sample template\nParameters:\n  HelloWorld:\n    Type: String\nResources:\n  MyEC2Instance: #An inline comment\n    Type: "AWS::EC2::Instance"\n    Properties:\n      ImageId: "ami-0ff8a91507f77f867" #Another comment -- This is a Linux AMI\n      InstanceType: t2.micro\n      KeyName: testkey\n      BlockDeviceMappings:\n        - DeviceName: /dev/sdm\n          Ebs:\n            VolumeType: io1\n            Iops: 200\n            DeleteOnTermination: false\n            VolumeSize: 20\n  MyRestApi:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Description: "This is a description"\n      Body:\n        swagger: "2.0"\n        info:\n          title: ReqValidators Sample\n          version: 1.0.0\n        schemes:\n          - https\n        basePath: "/v1"\n        produces:\n          - application/json\n        x-amazon-apigateway-request-validators:\n          all:\n            validateRequestBody: true\n            validateRequestParameters: true\n          params-only:\n            validateRequestBody: false\n            validateRequestParameters: true\n        x-amazon-apigateway-request-validator: params-only\n        paths:\n          "/validation":\n            post:\n              x-amazon-apigateway-request-validator: all\n              parameters:\n                - in: header\n                  name: h1\n                  required: true\n                - in: body\n                  name: RequestBodyModel\n                  required: true\n                  schema:\n                    "$ref": "#/definitions/RequestBodyModel"\n              responses:\n                "200":\n                  schema:\n                    type: array\n                    items:\n                      "$ref": "#/definitions/Error"\n                  headers:\n                    test-method-response-header:\n                      type: string\n              security:\n                - api_key: []\n              x-amazon-apigateway-auth:\n                type: none\n              x-amazon-apigateway-integration:\n                type: http\n                uri: !Sub "${RegionalPrefix}-http://petstore-demo-endpoint.execute-api.com/petstore/pets"\n                httpMethod: POST\n                requestParameters:\n                  integration.request.header.custom_h1: method.request.header.h1\n                responses:\n                  2\\d{2}:\n                    statusCode: "200"\n                  default:\n                    statusCode: "400"\n                    responseParameters:\n                      method.response.header.test-method-response-header: "\'static value\'"\n                    responseTemplates:\n                      application/json: json 400 response template\n                      application/xml: xml 400 response template\n            get:\n              parameters:\n                - name: q1\n                  in: query\n                  required: true\n              responses:\n                "200":\n                  schema:\n                    type: array\n                    items:\n                      "$ref": "#/definitions/Error"\n                  headers:\n                    test-method-response-header:\n                      type: string\n              security:\n                - api_key: []\n              x-amazon-apigateway-auth:\n                type: none\n              x-amazon-apigateway-integration:\n                type: http\n                uri: !GetAtt HelloWorld.Arn\n                httpMethod: GET\n                requestParameters:\n                  integration.request.querystring.type: method.request.querystring.q1\n                responses:\n                  2\\d{2}:\n                    statusCode: "200"\n                  default:\n                    statusCode: "400"\n                    responseParameters:\n                      method.response.header.test-method-response-header: "\'static value\'"\n                    responseTemplates:\n                      application/json: json 400 response template\n                      application/xml: xml 400 response template\n        definitions:\n          RequestBodyModel:\n            type: object\n            properties:\n              id:\n                type: integer\n              type:\n                type: string\n                enum:\n                  - dog\n                  - cat\n                  - fish\n              name:\n                type: string\n              price:\n                type: number\n                minimum: 25\n                maximum: 500\n            required:\n              - type\n              - name\n              - price\n          Error:\n            type: object\n            properties: {}\n  MySecondRestAPI:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Description: "This is a description"\n      Body:\n        swagger: "2.0"\n        info:\n          title: The second REST API sample\n          version: 1.0.1\n        schemes:\n          - https\n        basePath: "/v1"\n        produces:\n          - application/json\n        x-amazon-apigateway-request-validators:\n          all:\n            validateRequestBody: true\n            validateRequestParameters: true\n          params-only:\n            validateRequestBody: false\n            validateRequestParameters: true\n        x-amazon-apigateway-request-validator: params-only\n        paths:\n          "/validation":\n            post:\n              x-amazon-apigateway-request-validator: all\n              parameters:\n                - in: header\n                  name: h1\n                  required: true\n                - in: body\n                  name: RequestBodyModel\n                  required: true\n                  schema:\n                    "$ref": "#/definitions/RequestBodyModel"\n              responses:\n                "200":\n                  schema:\n                    type: array\n                    items:\n                      "$ref": "#/definitions/Error"\n                  headers:\n                    test-method-response-header:\n                      type: string\n              security:\n                - api_key: []\n              x-amazon-apigateway-auth:\n                type: none\n              x-amazon-apigateway-integration:\n                type: http\n                uri: !Sub "${RegionalPrefix}-http://petstore-demo-endpoint.execute-api.com/petstore/pets"\n                httpMethod: POST\n                requestParameters:\n                  integration.request.header.custom_h1: method.request.header.h1\n                responses:\n                  2\\d{2}:\n                    statusCode: "200"\n                  default:\n                    statusCode: "400"\n                    responseParameters:\n                      method.response.header.test-method-response-header: "\'static value\'"\n                    responseTemplates:\n                      application/json: json 400 response template\n                      application/xml: xml 400 response template\n            get:\n              parameters:\n                - name: q1\n                  in: query\n                  required: true\n              responses:\n                "200":\n                  schema:\n                    type: array\n                    items:\n                      "$ref": "#/definitions/Error"\n                  headers:\n                    test-method-response-header:\n                      type: string\n              security:\n                - api_key: []\n              x-amazon-apigateway-auth:\n                type: none\n              x-amazon-apigateway-integration:\n                type: http\n                uri: !GetAtt HelloWorld.Arn\n                httpMethod: GET\n                requestParameters:\n                  integration.request.querystring.type: method.request.querystring.q1\n                responses:\n                  2\\d{2}:\n                    statusCode: "200"\n                  default:\n                    statusCode: "400"\n                    responseParameters:\n                      method.response.header.test-method-response-header: "\'static value\'"\n                    responseTemplates:\n                      application/json: json 400 response template\n                      application/xml: xml 400 response template\n        definitions:\n          RequestBodyModel:\n            type: object\n            properties:\n              id:\n                type: integer\n              type:\n                type: string\n                enum:\n                  - dog\n                  - cat\n                  - fish\n              name:\n                type: string\n              price:\n                type: number\n                minimum: 25\n                maximum: 500\n            required:\n              - type\n              - name\n              - price\n          Error:\n            type: object\n            properties: {}\n'
    parsed = [
     {'produces':[
       'application/json'], 
      'paths':{'/validation': {'post':{'responses':{'200': {'schema':{'items':{'$ref': '#/definitions/Error'},  'type':'array'},  'headers':{'test-method-response-header': {'type': 'string'}}}},  'security':[{'api_key': []}],  'parameters':[{'in':'header',  'name':'h1',  'required':True}, {'required':True,  'in':'body',  'name':'RequestBodyModel',  'schema':{'$ref': '#/definitions/RequestBodyModel'}}]},  'get':{'security':[{'api_key': []}],  'parameters':[{'in':'query',  'name':'q1',  'required':True}],  'responses':{'200': {'schema':{'items':{'$ref': '#/definitions/Error'},  'type':'array'},  'headers':{'test-method-response-header': {'type': 'string'}}}}}}},  'definitions':{'Error':{'properties':{},  'type':'object'},  'RequestBodyModel':{'properties':{'id':{'type': 'integer'},  'type':{'type':'string',  'enum':['dog', 'cat', 'fish']},  'price':{'maximum':500,  'type':'number',  'minimum':25},  'name':{'type': 'string'}},  'type':'object',  'required':['type', 'name', 'price']}},  'swagger':'2.0',  'schemes':['https'],  'info':{'title':'ReqValidators Sample',  'version':'1.0.0'},  'basePath':'/v1'}, {'produces':['application/json'],  'paths':{'/validation': {'post':{'responses':{'200': {'schema':{'items':{'$ref': '#/definitions/Error'},  'type':'array'},  'headers':{'test-method-response-header': {'type': 'string'}}}},  'security':[{'api_key': []}],  'parameters':[{'in':'header',  'name':'h1',  'required':True}, {'required':True,  'in':'body',  'name':'RequestBodyModel',  'schema':{'$ref': '#/definitions/RequestBodyModel'}}]},  'get':{'security':[{'api_key': []}],  'parameters':[{'in':'query',  'name':'q1',  'required':True}],  'responses':{'200': {'schema':{'items':{'$ref': '#/definitions/Error'},  'type':'array'},  'headers':{'test-method-response-header': {'type': 'string'}}}}}}},  'definitions':{'Error':{'properties':{},  'type':'object'},  'RequestBodyModel':{'properties':{'id':{'type': 'integer'},  'type':{'type':'string',  'enum':['dog', 'cat', 'fish']},  'price':{'maximum':500,  'type':'number',  'minimum':25},  'name':{'type': 'string'}},  'type':'object',  'required':['type', 'name', 'price']}},  'swagger':'2.0',  'schemes':['https'],  'info':{'title':'The second REST API sample',  'version':'1.0.1'},  'basePath':'/v1'}]

    def test_valid_format(self):
        output = deforest_file(self.raw_file_input)
        self.maxDiff = None
        self.assertEqual(json.dumps(output, sort_keys=True), json.dumps((self.parsed), sort_keys=True))

    def test_main_method(self):
        with tempfile.NamedTemporaryFile() as (tf):
            tf.write(self.raw_file_input.encode('utf-8'))
            tf.flush()
            runner = CliRunner()
            result = runner.invoke(main, [(f"{tf.name}")])
            assert result.exit_code == 0