# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/datalogue/models/pipeline_template.py
# Compiled at: 2020-05-13 11:17:34
# Size of source mod 2**32: 2298 bytes
from typing import Optional, Union, Dict
from uuid import UUID
from datalogue.errors import DtlError
from datalogue.dtl_utils import map_option, _parse_uuid

class PipelineTemplate:
    __doc__ = '\n    A local pipeline template. Once created, this template can be\n    passed mapped inputs to generate pipelines or jobs\n\n    :param name: a name for this template\n    :param template: the structure of the template, as a YAML-styled\n    string. Please see https://mustache.github.io/mustache.5.html\n    :param dummy_input_map: an example of data that will be used to\n    validate this template upon creation, unless disabled upon the\n    creation step\n    :param :id: will be generated by the backend upon creation and used to\n    reference this template\n    '

    def __init__(self, name: str, template: str, dummy_input_map: Optional[Dict[(str, str)]]=None, id: Optional[UUID]=None):
        self.name = name
        self.template = template
        self.dummy_input_map = dummy_input_map
        self.id = id

    def __eq__(self, other):
        return self.name == other.name and self.id == other.id

    def __repr__(self):
        return f"{self.__class__.__name__}(\nid: {self.id!r},\nname: {self.name!r},\ntemplate: {self.template}\n)"

    def _as_payload(self) -> Union[(DtlError, dict)]:
        payload = {'name':self.name, 
         'template':self.template, 
         'dummy_input_map':self.dummy_input_map}
        return payload

    @staticmethod
    def _from_payload(payload: dict) -> Union[(DtlError, 'PipelineTemplate')]:
        name = payload.get('name')
        if name is None:
            return DtlError("'name' is missing for a template")
        else:
            id = map_option(payload.get('id'), _parse_uuid)
            template = payload.get('template')
            created_by = payload.get('createdBy')
            created_at = payload.get('createdAt')
            updated_at = payload.get('updatedAt')
            last_update_by = map_option(payload.get('lastUpdateBy'), _parse_uuid)
            return PipelineTemplate(name, template, id=id)