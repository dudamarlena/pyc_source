# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: D:\Documents\GitHub\luxpy\luxpy\spectrum\basics\spectral_databases.py
# Compiled at: 2019-10-04 04:39:44
# Size of source mod 2**32: 29401 bytes
"""
Module for loading light source (spd) and reflectance (rfl) spectra databases
=============================================================================

 :_S_PATH: Path to light source spectra data.

 :_R_PATH: Path to with spectral reflectance data

 :_IESTM3015: Database with spectral reflectances related to and light source 
            spectra contained excel calculator of IES TM30-15 publication.
            
 :_IESTM3018: Database with spectral reflectances related to and light source 
            spectra contained excel calculator of IES TM30-18 publication.

 :_IESTM3015_S: Database with only light source spectra contained in the 
              IES TM30-15 excel calculator.
              
 :_IESTM3018_S: Database with only light source spectra contained in the 
              IES TM30-18 excel calculator.

 :_CIE_ILLUMINANTS: | Database with CIE illuminants: 
                    | * 'E', 'D65', 'A', 'C',
                    | * 'F1', 'F2', 'F3', 'F4', 'F5', 'F6',
                      'F7', 'F8', 'F9', 'F10', 'F11', 'F12'
                      
 :_CIE_E, _CIE_D65, _CIE_A, _CIE_C, _CIE_F4: Some CIE illuminants for easy use.

 :_CRI_RFL: | Database with spectral reflectance functions for various 
              color rendition calculators:
            | * `CIE 13.3-1995 (8, 14 munsell samples) <http://www.cie.co.at/index.php/index.php?i_ca_id=303>`_
            | * `CIE 224:2015 (99 set) <http://www.cie.co.at/index.php?i_ca_id=1027>`_
            | * `CRI2012 (HL17 & HL1000 spectrally uniform and 210 real samples) <http://journals.sagepub.com/doi/abs/10.1177/1477153513481375>`_
            | * `IES TM30 (99, 4880 sepctrally uniform samples) <https://www.ies.org/store/technical-memoranda/ies-method-for-evaluating-light-source-color-rendition>`_
            | * `MCRI (10 familiar object set) <http://www.sciencedirect.com/science/article/pii/S0378778812000837>`_
            | * `CQS (v7.5 and v9.0 sets) <http://spie.org/Publications/Journal/10.1117/1.3360335>`_

 :_MUNSELL: Database (dict) with 1269 Munsell spectral reflectance functions 
            and Value (V), Chroma (C), hue (h) and (ab) specifications.
           
 :_RFL: | Database (dict) with RFLs, including:
        | * all those in _CRI_RFL, 
        | * the 1269 Matt Munsell samples (see also _MUNSELL),
        | * the 24 Macbeth ColorChecker samples,
        | * the 215 samples proposed by Opstelten, J.J. , 1983, The establishment of a representative set of test colours
        |   for the specification of the colour rendering properties of light sources, CIE-20th session, Amsterdam. 
        | * the 114120 RFLs from `(capbone.com/spectral-reflectance-database/)<114120 RFLs from https://capbone.com/spectral-reflectance-database/>`_
            
.. codeauthor:: Kevin A.G. Smet (ksmet1977 at gmail.com)
"""
from luxpy import np, copy, _PKG_PATH, _SEP, getdata
__all__ = [
 '_R_PATH', '_S_PATH', '_IESTM3015', '_IESTM3015_S',
 '_IESTM3018', '_IESTM3018_S', '_CRI_RFL', '_CIE_ILLUMINANTS',
 '_CIE_E', '_CIE_D65', '_CIE_A', '_CIE_C', '_CIE_F4',
 '_RFL', '_MUNSELL']
_S_PATH = _PKG_PATH + _SEP + 'data' + _SEP + 'spds' + _SEP
_R_PATH = _PKG_PATH + _SEP + 'data' + _SEP + 'rfls' + _SEP
_IESTM3015 = {'S': {'data': getdata((_S_PATH + 'IESTM30_15_Sspds.dat'), kind='np').transpose()}}
_IESTM3015['S']['info'] = getdata((_S_PATH + 'IESTM30_15_Sinfo.txt'), kind='np', header='infer', verbosity=False)
_IESTM3015_S = _IESTM3015['S']
_IESTM3018 = {'S': {'data': getdata((_S_PATH + 'IESTM30_15_Sspds.dat'), kind='np').transpose()}}
_IESTM3018['S']['info'] = getdata((_S_PATH + 'IESTM30_15_Sinfo.txt'), kind='np', header='infer', verbosity=False)
_IESTM3018_S = _IESTM3018['S']
E = np.array([np.linspace(360, 830, 471), np.ones(471)])
_CIE_E = E.copy()
D65 = getdata((_S_PATH + 'D65.dat'), kind='np').T
_CIE_D65 = D65.copy()
A = getdata((_S_PATH + 'A.dat'), kind='np').T
_CIE_A = A.copy()
C = np.array([[360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830],
 [
  0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00045381, 0.00047198, 0.00049063, 0.0005097, 0.00052916, 0.00054897, 0.00056908, 0.00058947, 0.00061008, 0.00063088, 0.00065183, 0.0006729, 0.0006941, 0.00071545, 0.00073697, 0.00075868, 0.0007806, 0.00080274, 0.0008251, 0.00084768, 0.00087048, 0.0008935, 0.00091673, 0.00094016, 0.00096375, 0.00098751, 0.0010114, 0.0010354, 0.0010596, 0.0010839, 0.0011084, 0.001133, 0.0011576, 0.0011822, 0.0012068, 0.0012312, 0.0012554, 0.0012794, 0.001303, 0.0013262, 0.001349, 0.0013713, 0.0013931, 0.0014143, 0.0014349, 0.0014549, 0.0014743, 0.0014931, 0.0015113, 0.0015288, 0.0015457, 0.0015619, 0.0015774, 0.0015922, 0.0016061, 0.0016193, 0.0016315, 0.0016428, 0.0016532, 0.0016625, 0.0016708, 0.0016781, 0.0016843, 0.0016896, 0.001694, 0.0016976, 0.0017005, 0.0017027, 0.0017042, 0.001705, 0.0017052, 0.0017049, 0.001704, 0.0017028, 0.0017014, 0.0016997, 0.001698, 0.0016963, 0.0016948, 0.0016936, 0.0016928, 0.0016926, 0.0016928, 0.0016935, 0.0016944, 0.0016956, 0.0016969, 0.0016983, 0.0016997, 0.0017011, 0.0017025, 0.0017036, 0.0017046, 0.0017055, 0.0017061, 0.0017064, 0.0017066, 0.0017064, 0.0017059, 0.0017051, 0.0017038, 0.0017022, 0.0017001, 0.0016974, 0.0016942, 0.0016904, 0.0016859, 0.0016806, 0.0016746, 0.0016677, 0.0016598, 0.001651, 0.0016413, 0.0016307, 0.0016195, 0.0016076, 0.0015952, 0.0015823, 0.001569, 0.0015554, 0.0015416, 0.0015275, 0.0015134, 0.0014992, 0.0014851, 0.0014712, 0.0014574, 0.0014441, 0.0014311, 0.0014186, 0.0014068, 0.0013957, 0.0013853, 0.0013756, 0.0013668, 0.0013588, 0.0013517, 0.0013454, 0.0013401, 0.0013358, 0.0013325, 0.0013303, 0.0013291, 0.0013289, 0.0013295, 0.0013309, 0.0013331, 0.0013359, 0.0013393, 0.0013433, 0.0013477, 0.0013524, 0.0013575, 0.0013629, 0.0013685, 0.0013743, 0.0013803, 0.0013863, 0.0013923, 0.0013982, 0.001404, 0.0014096, 0.001415, 0.0014201, 0.001425, 0.0014295, 0.0014337, 0.0014375, 0.001441, 0.001444, 0.0014467, 0.0014489, 0.0014506, 0.0014519, 0.0014528, 0.0014531, 0.0014531, 0.0014525, 0.0014515, 0.00145, 0.0014481, 0.0014456, 0.0014428, 0.0014395, 0.0014358, 0.0014317, 0.0014273, 0.0014225, 0.0014175, 0.0014123, 0.0014068, 0.0014012, 0.0013954, 0.0013895, 0.0013834, 0.0013772, 0.0013709, 0.0013645, 0.001358, 0.0013515, 0.0013449, 0.0013383, 0.0013318, 0.0013252, 0.0013187, 0.0013123, 0.001306, 0.0012997, 0.0012936, 0.0012876, 0.0012817, 0.0012759, 0.0012702, 0.0012648, 0.0012595, 0.0012544, 0.0012496, 0.0012451, 0.0012409, 0.001237, 0.0012335, 0.0012304, 0.0012277, 0.0012254, 0.0012233, 0.0012216, 0.00122, 0.0012187, 0.0012175, 0.0012165, 0.0012156, 0.0012149, 0.0012142, 0.0012137, 0.0012132, 0.0012128, 0.0012124, 0.0012121, 0.0012119, 0.0012117, 0.0012115, 0.0012114, 0.0012113, 0.0012112, 0.0012111, 0.001211, 0.0012109, 0.0012108, 0.0012106, 0.0012104, 0.0012101, 0.0012098, 0.0012094, 0.001209, 0.0012086, 0.0012082, 0.0012079, 0.0012076, 0.0012074, 0.0012073, 0.0012074, 0.0012077, 0.0012081, 0.0012087, 0.0012093, 0.00121, 0.0012107, 0.0012114, 0.001212, 0.0012125, 0.0012129, 0.0012132, 0.0012133, 0.0012133, 0.0012132, 0.0012129, 0.0012125, 0.0012118, 0.001211, 0.00121, 0.0012088, 0.0012073, 0.0012056, 0.0012037, 0.0012017, 0.0011994, 0.0011971, 0.0011946, 0.001192, 0.0011894, 0.0011868, 0.0011841, 0.0011815, 0.0011788, 0.001176, 0.001173, 0.0011699, 0.0011666, 0.0011631, 0.0011593, 0.0011551, 0.0011507, 0.001146, 0.001141, 0.0011359, 0.0011305, 0.0011251, 0.0011196, 0.001114, 0.0011084, 0.0011029, 0.0010974, 0.001092, 0.0010866, 0.0010813, 0.0010759, 0.0010706, 0.0010653, 0.0010599, 0.0010546, 0.0010493, 0.0010439, 0.0010386, 0.0010333, 0.0010279, 0.0010226, 0.0010172, 0.0010118, 0.0010064, 0.001001, 0.00099562, 0.00099021, 0.00098478, 0.0009793, 0.00097375, 0.00096812, 0.00096239, 0.00095659, 0.00095077, 0.00094497, 0.00093924, 0.0009336, 0.00092805, 0.00092257, 0.00091714, 0.00091174, 0.00090635, 0.00090101, 0.00089575, 0.0008906, 0.00088561, 0.0008808, 0.00087618, 0.00087178, 0.00086758, 0.00086361, 0.00085985, 0.00085625, 0.00085275, 0.00084926, 0.00084573, 0.0008421, 0.00083843, 0.00083478, 0.00083123, 0.00082785, 0.0008247, 0.00082176, 0.00081903, 0.00081648, 0.0008141, 0.00081186, 0.00080978, 0.00080784, 0.00080608, 0.00080447, 0.00080304, 0.00080178, 0.00080069, 0.00079975, 0.00079897, 0.00079835, 0.00079788, 0.0007976, 0.0007975, 0.0007976, 0.0007979, 0.00079837, 0.00079897, 0.00079964, 0.00080035, 0.00080105, 0.00080179, 0.00080258, 0.00080346, 0.00080447, 0.00080565, 0.00080703, 0.00080865, 0.00081053, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272, 0.00081272]])
_CIE_C = C.copy()
F4 = np.array([[380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780],
 [
  0.57, 0.596, 0.622, 0.648, 0.674, 0.7, 0.734, 0.768, 0.802, 0.836, 0.87, 0.892, 0.914, 0.936, 0.958, 0.98, 1.186, 1.392, 1.598, 1.804, 2.01, 4.358, 6.706, 9.054, 11.4, 13.75, 11.39, 9.03, 6.67, 4.31, 1.95, 1.878, 1.806, 1.734, 1.662, 1.59, 1.624, 1.658, 1.692, 1.726, 1.76, 1.794, 1.828, 1.862, 1.896, 1.93, 1.964, 1.998, 2.032, 2.066, 2.1, 7.736, 13.37, 19.01, 24.64, 30.28, 25.83, 21.38, 16.93, 12.48, 8.03, 6.934, 5.838, 4.742, 3.646, 2.55, 2.58, 2.61, 2.64, 2.67, 2.7, 2.724, 2.748, 2.772, 2.796, 2.82, 2.838, 2.856, 2.874, 2.892, 2.91, 2.926, 2.942, 2.958, 2.974, 2.99, 3, 3.01, 3.02, 3.03, 3.04, 3.048, 3.056, 3.064, 3.072, 3.08, 3.082, 3.084, 3.086, 3.088, 3.09, 3.09, 3.09, 3.09, 3.09, 3.09, 3.1, 3.11, 3.12, 3.13, 3.14, 3.124, 3.108, 3.092, 3.076, 3.06, 3.048, 3.036, 3.024, 3.012, 3, 2.996, 2.992, 2.988, 2.984, 2.98, 2.986, 2.992, 2.998, 3.004, 3.01, 3.036, 3.062, 3.088, 3.114, 3.14, 3.194, 3.248, 3.302, 3.356, 3.41, 3.508, 3.606, 3.704, 3.802, 3.9, 4.058, 4.216, 4.374, 4.532, 4.69, 4.914, 5.138, 5.362, 5.586, 5.81, 6.112, 6.414, 6.716, 7.018, 7.32, 10.37, 13.43, 16.48, 19.54, 22.59, 21.09, 19.6, 18.1, 16.61, 15.11, 14.86, 14.62, 14.37, 14.13, 13.88, 14.37, 14.86, 15.35, 15.84, 16.33, 16.8, 17.27, 17.74, 18.21, 18.68, 19.07, 19.46, 19.86, 20.25, 20.64, 21.37, 22.1, 22.82, 23.55, 24.28, 24.68, 25.07, 25.47, 25.86, 26.26, 25.66, 25.07, 24.47, 23.88, 23.28, 23.21, 23.14, 23.08, 23.01, 22.94, 22.78, 22.62, 22.46, 22.3, 22.14, 21.89, 21.65, 21.4, 21.16, 20.91, 20.61, 20.32, 20.02, 19.73, 19.43, 19.09, 18.75, 18.42, 18.08, 17.74, 17.39, 17.04, 16.7, 16.35, 16, 15.68, 15.37, 15.05, 14.74, 14.42, 14.05, 13.68, 13.3, 12.93, 12.56, 12.23, 11.91, 11.58, 11.26, 10.93, 10.65, 10.37, 10.08, 9.802, 9.52, 9.252, 8.984, 8.716, 8.448, 8.18, 7.946, 7.712, 7.478, 7.244, 7.01, 6.808, 6.606, 6.404, 6.202, 6, 5.822, 5.644, 5.466, 5.288, 5.11, 4.96, 4.81, 4.66, 4.51, 4.36, 4.226, 4.092, 3.958, 3.824, 3.69, 3.578, 3.466, 3.354, 3.242, 3.13, 3.032, 2.934, 2.836, 2.738, 2.64, 2.56, 2.48, 2.4, 2.32, 2.24, 2.174, 2.108, 2.042, 1.976, 1.91, 1.868, 1.826, 1.784, 1.742, 1.7, 1.638, 1.576, 1.514, 1.452, 1.39, 1.348, 1.306, 1.264, 1.222, 1.18, 1.15, 1.12, 1.09, 1.06, 1.03, 1, 0.97, 0.94, 0.91, 0.88, 0.852, 0.824, 0.796, 0.768, 0.74, 0.72, 0.7, 0.68, 0.66, 0.64, 0.62, 0.6, 0.58, 0.56, 0.54, 0.53, 0.52, 0.51, 0.5, 0.49, 0.484, 0.478, 0.472, 0.466, 0.46, 0.452, 0.444, 0.436, 0.428, 0.42, 0.41, 0.4, 0.39, 0.38, 0.37, 0.37, 0.37, 0.37, 0.37, 0.37, 0.362, 0.354, 0.346, 0.338, 0.33, 0.334, 0.338, 0.342, 0.346, 0.35, 0.352, 0.354, 0.356, 0.358, 0.36, 0.35, 0.34, 0.33, 0.32, 0.31, 0.3, 0.29, 0.28, 0.27, 0.26, 0.246, 0.232, 0.218, 0.204, 0.19]])
_CIE_F4 = F4.copy()
F1, F2, F3, F4_, F5, F6, F7, F8, F9, F10, F11, F12 = [np.vstack((_IESTM3015['S']['data'][0], _IESTM3015['S']['data'][(i + 1)])) for i in range(12)]
_CIE_ILLUMINANTS = {'types':['E', 'D65', 'A', 'C', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'],  'E':E, 
 'D65':D65,  'A':A,  'C':C,  'F1':F1, 
 'F2':F2,  'F3':F3,  'F4':F4,  'F5':F5,  'F6':F6,  'F7':F7,  'F8':F8,  'F9':F9,  'F10':F10,  'F11':F11,  'F12':F12}
del E
del D65
del A
del C
del F1
del F2
del F3
del F4
del F5
del F6
del F7
del F8
del F9
del F10
del F11
del F12
_CIE133_1995 = {'14': getdata((_R_PATH + 'CIE_13_3_1995_R14.dat'), kind='np').T}
_CIE133_1995['8'] = _CIE133_1995['14'][0:9].copy()
_IESTM3015['R'] = {'4880': {'5nm': getdata((_R_PATH + 'IESTM30_15_R4880.dat'), kind='np').T}}
_IESTM3015['R']['99'] = {'1nm': getdata((_R_PATH + 'IESTM30_15_R99_1nm.dat'), kind='np').T}
_IESTM3015['R']['99']['5nm'] = getdata((_R_PATH + 'IESTM30_15_R99_5nm.dat'), kind='np').T
temp = getdata((_R_PATH + 'IESTM30_15_R99info.dat'), kind='df').values[0]
ies99categories = ['nature', 'skin', 'textiles', 'paints', 'plastic', 'printed', 'color system']
_IESTM3015['R']['99']['info'] = [ies99categories[int(i - 1)] for i in temp]
_CIE224_2017 = {'99': {'1nm': getdata((_R_PATH + 'CIE224_2017_R99_1nm.dat'), kind='np').T}}
_CIE224_2017['99']['5nm'] = getdata((_R_PATH + 'CIE224_2017_R99_5nm.dat'), kind='np').T
_CIE224_2017['99']['info'] = _IESTM3015['R']['99']['info']
_IESTM3018['R'] = copy.deepcopy(_IESTM3015['R'])
_IESTM3018['R']['99']['1nm'] = _CIE224_2017['99']['1nm']
_IESTM3018['R']['99']['5nm'] = _CIE224_2017['99']['5nm']
_CRI2012 = {'HL17': getdata((_R_PATH + 'CRI2012_HL17.dat'), kind='np').T}
_CRI2012['HL1000'] = getdata((_R_PATH + 'CRI2012_Hybrid14_1000.dat'), kind='np').T
_CRI2012['Real210'] = getdata((_R_PATH + 'CRI2012_R210.dat'), kind='np').T
_MCRI = {'R': getdata((_R_PATH + 'MCRI_R10.dat'), kind='np').T}
_MCRI['info'] = ['apple', 'banana', 'orange', 'lavender', 'smurf', 'strawberry yoghurt', 'sliced cucumber', 'cauliflower', 'caucasian skin', 'N4']
_CQS = {'v7.5': getdata((_R_PATH + 'CQSv7dot5.dat'), kind='np').T}
_CQS['v9.0'] = getdata((_R_PATH + 'CQSv9dot0.dat'), kind='np').T
_OPSTELTEN215 = {'R': getdata((_R_PATH + 'Opstelten1983_215.dat'), kind='np').T}
_CRI_RFL = {'cie-13.3-1995': _CIE133_1995}
_CRI_RFL['cie-224-2017'] = _CIE224_2017
_CRI_RFL['cri2012'] = _CRI2012
_CRI_RFL['ies-tm30-15'] = _IESTM3015['R']
_CRI_RFL['ies-tm30-18'] = _IESTM3018['R']
_CRI_RFL['ies-tm30'] = _IESTM3018['R']
_CRI_RFL['mcri'] = _MCRI['R']
_CRI_RFL['cqs'] = _CQS
_MUNSELL = {'cieobs':'1931_2', 
 'Lw':400.0,  'Yb':0.2}
_MUNSELL['R'] = getdata((_R_PATH + 'Munsell1269.dat'), kind='np').T
temp = getdata((_R_PATH + 'Munsell1269NotationInfo.dat'), kind='np', header='infer', verbosity=0)
_MUNSELL['H'] = temp[:, 1, None]
_MUNSELL['V'] = temp[:, 2, None]
_MUNSELL['C'] = temp[:, 3, None]
_MUNSELL['h'] = temp[:, 4, None]
_MUNSELL['ab'] = temp[:, 5:7]
del temp
del ies99categories
_MACBETH_RFL = {'CC': {'R': getdata((_R_PATH + 'MacbethColorChecker.dat'), kind='np').T}}
try:
    try:
        _CAPBONE_100K_RFL = {'R': np.load(_R_PATH + 'capbone_100k_rfls.npz')['_CAPBONE_100K_RFL']}
        _CAPBONE_100K_RFL['file'] = _R_PATH + 'capbone_100k_rfls.npz'
    except:
        _CAPBONE_100K_RFL = {'R': None}
        _CAPBONE_100K_RFL['file'] = _R_PATH + 'capbone_100k_rfls.npz'

finally:
    _CAPBONE_RFL = {'100k': _CAPBONE_100K_RFL}

_RFL = {'munsell':_MUNSELL, 
 'macbeth':_MACBETH_RFL, 
 'capbone':_CAPBONE_RFL, 
 'opstelten':_OPSTELTEN215, 
 'cri':_CRI_RFL}