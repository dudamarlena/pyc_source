# uncompyle6 version 3.7.4
# Python bytecode 2.3 (62011)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: \Ft\Xml\Xslt\HtmlWriter.py
# Compiled at: 2005-02-09 04:14:48
"""
HTML writer for XSLT processor output

Copyright 2005 Fourthought, Inc. (USA).
Detailed license and copyright information: http://4suite.org/COPYRIGHT
Project home, documentation, distributions: http://4suite.org/
"""
from Ft.Xml import EMPTY_NAMESPACE
from Ft.Xml.Lib import HtmlPrinter, HtmlPrettyPrinter
from Ft.Xml.Xslt import XmlWriter

class HtmlWriter(XmlWriter.XmlWriter):
    """
    Takes events such as those generated by an XSLT processor and
    invokes a serializer to produce HTML. Uses XML syntax for
    elements in a non-empty namespace. Instructs the serializer to
    insert a Content-Type 'meta' element in the first 'head' element.
    """
    __module__ = __name__

    def _completeLastElementAfterMeta(self):
        XmlWriter.XmlWriter._completeLastElement(self)
        return

    def _completeLastElement(self):
        if self._elementName and self._elementUri == EMPTY_NAMESPACE:
            in_head_tag = self._elementName.lower() == 'head'
        else:
            in_head_tag = False
        XmlWriter.XmlWriter._completeLastElement(self)
        if in_head_tag:
            content = '%s; charset=%s' % (self._outputParams.mediaType, self._outputParams.encoding)
            attrs = {'http-equiv': 'Content-Type', 'content': content}
            self._printer.startElement(None, 'meta', {}, attrs)
            self._printer.endElement(None, 'meta')
            self._completeLastElement = self._completeLastElementAfterMeta
        return
        return

    def startDocument(self):
        self._outputParams.setDefault('version', '4.0')
        self._outputParams.setDefault('encoding', 'iso-8859-1')
        self._outputParams.setDefault('indent', 1)
        self._outputParams.setDefault('mediaType', 'text/html')
        encoding = self._outputParams.encoding.encode('ascii')
        version = self._outputParams.version.encode('ascii')
        if self._outputParams.indent:
            printer = HtmlPrettyPrinter.HtmlPrettyPrinter
        else:
            printer = HtmlPrinter.HtmlPrinter
        self._printer = printer(self._stream, encoding)
        self._printer.startDocument(version)
        return