# uncompyle6 version 3.7.4
# Python bytecode 3.8 (3413)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/dpoliuha/work/opensource/swagger2locustio/swagger2locustio/templates/helpers_templates.py
# Compiled at: 2020-05-07 07:40:51
# Size of source mod 2**32: 3740 bytes
"""Module: locustfile templates"""
from jinja2 import Template
HELPER_MAPPING = {}
HELPER_MAPPING.update(dict.fromkeys(['choice'], 'Helper.get_random_choice_from_values(*{values})'))
HELPER_MAPPING.update(dict.fromkeys(['int', 'integer', 'int32', 'int64'], 'Helper.get_random_int()'))
HELPER_MAPPING.update(dict.fromkeys(['positiveint', 'positive_int'], 'Helper.get_random_positive_int()'))
HELPER_MAPPING.update(dict.fromkeys(['negativeint', 'negative_int'], 'Helper.get_random_negative_int()'))
HELPER_MAPPING.update(dict.fromkeys(['float', 'double', 'number'], 'Helper.get_random_float()'))
HELPER_MAPPING.update(dict.fromkeys(['bool', 'boolean'], 'Helper.get_random_bool()'))
HELPER_MAPPING.update(dict.fromkeys(['null'], 'Helper.get_null_value()'))
HELPER_CLASS = Template('import datetime\nimport random\nimport string\n\n\nclass Helper:\n    @staticmethod\n    def get_random_choice_from_values(*args):\n        return random.choice(args)\n\n    @staticmethod\n    def get_random_int(start: int = -100, end: int = 100):\n        return random.randint(start, end)\n\n    @classmethod\n    def get_random_positive_int(cls, start: int = 1, end: int = 100):\n        return cls.get_random_int(start, end)\n\n    @classmethod\n    def get_random_negative_int(cls, start: int = -100, end: int = -1):\n        return cls.get_random_int(start, end)\n\n    @classmethod\n    def get_random_float(cls, start: int = -100, end: int = 100):\n        return random.random() * cls.get_random_int(start, end)\n\n    @staticmethod\n    def get_random_bool():\n        return random.choice([True, False])\n\n    @staticmethod\n    def get_null_value():\n        return None\n\n    @classmethod\n    def get_random_string(cls, min_len: int = 0, max_len: int = 100):\n        string_len = cls.get_random_int(min_len, max_len)\n        return "".join(random.choices(string.ascii_uppercase + string.digits, k=string_len))\n\n    @classmethod\n    def get_random_datetime(\n        cls,\n        result_format: str = "%Y-%m-%d %H:%M:%S",\n        min_timestamp: int = 0,\n        max_timestamp: int = 1600000000\n    ):  # from Unix start time to 09/13/2020 @ 12:26pm (UTC)\n        result = cls.get_random_int(min_timestamp, max_timestamp)\n        result = datetime.datetime.fromtimestamp(result)\n        return result.strftime(result_format)\n\n    @classmethod\n    def get_random_password(cls, min_len: int = 8, max_len: int = 25):\n        string_len = cls.get_random_int(min_len, max_len)\n        return "".join(random.choices(string.ascii_uppercase + string.digits + string.punctuation, k=string_len))\n\n    @classmethod\n    def get_random_email(cls, min_len: int = 10, max_len: int = 25):\n        username_len = cls.get_random_int(min_len, max_len)\n        tld_len = cls.get_random_int(2, 5)\n        username_len -= tld_len\n        domain_len = cls.get_random_int(5, 10)\n        username_len -= domain_len\n        if any(i <= 0 for i in [tld_len, domain_len, username_len]):\n            return cls.get_random_email()\n        tld = "".join(random.choices(string.ascii_lowercase, k=tld_len))\n        domain = "".join(random.choices(string.ascii_uppercase + string.digits, k=domain_len))\n        username = "".join(random.choices(string.ascii_uppercase + string.digits, k=username_len))\n        return f"{ username }@{ domain }.{ tld }"\n\n    @classmethod\n    def get_random_ipv4(cls):\n        result = cls.get_random_int(0, 255)\n        for x in range(3):\n            result += "." + cls.get_random_int(0, 255)\n        return result\n\n    @classmethod\n    def get_random_ipv6(cls):\n        result = "".join(random.choices("abcdef" + string.digits, k=4))\n        for x in range(7):\n            result += ":" + "".join(random.choices("abcdef" + string.digits, k=4))\n        return result\n\n')