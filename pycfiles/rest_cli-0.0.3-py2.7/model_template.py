# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.13-x86_64/egg/generator/model_template.py
# Compiled at: 2018-06-28 04:14:36
__author__ = 'Loi Nguyen <loinguyentrung@gmail.com>'
REST_TEMPLATE = '{\n  "rest": "{app_name}",\n  "name": "app",\n  "config" : "api",\n  "document": "public/docs/api.json",\n  "source": "src",\n  "test": "test",\n  "interface": "../interface/src",\n  "mysql": {\n    "host": "{host}",\n    "username": "{username}",\n    "password": "{password}",\n    "database": "{database}"\n  }\n}\n'
DATABASE_TEMPLATE = "<?php\nreturn [\n    'default' => 'mysql',\n    'migrations' => '_migrations',\n    'connections' => [\n        'mysql' => [\n            'read' => [\n                'host' => ['{host}'],\n            ],\n            'write' => [\n                'host' => ['{host}'],\n            ],\n            'sticky' => true,\n            'driver' => 'mysql',\n            'database' => '{database}',\n            'username' => '{username}',\n            'password' => '{password}',\n            'charset' => 'utf8mb4',\n            'collation' => 'utf8mb4_unicode_ci',\n            'prefix' => '',\n        ],\n    ]\n];\n"
MODEL_TEMPLATE = "\n<?php\nnamespace App\\Model;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\n/**\n * {model_name_with_space}\n *\n * @category   \\App\n * @package    \\App\\Model\n * @version    1.0\n * @since      File available since Release 1.0\n */\nclass {model_name} extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = '{table_name}';\n\n    /**\n     * {model_name} Model constructor\n     */\n    public function {model_name}()\n    {\n    }\n\n    // TODO - Model relationships here\n\n    // AUTO GENERATED - DO NOT MODIFY FROM HERE\n}\n"
MODEL_CONSTRUCTOR_TEMPLATE = "\n    use \\Illuminate\\Database\\Eloquent\\SoftDeletes;\n\n    /**\n     * Override default primary key\n     */\n    protected $primaryKey = 'Id';\n\n    /**\n     * Model generated constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        // Constructor interceptor\n        $this->{model_name}();\n        // Default values for model instance\n{default_setters}\n    }\n"
REPOSITORY_INTERFACE_TEMPLATE = '\n<?php\nnamespace App\\Repository\\{repository_name};\n\nuse App\\Model\\{model_name};\n\n/**\n *  {repository_name_with_space} Interface.\n *\n * @category  \\App\\Repository\n * @package   \\App\\Repository\\{repository_name}\n * @version    1.0\n * @see       \\App\\Repository\\{repository_name}\\{repository_name}\n * @since     File available since Release 1.0\n */\ninterface {repository_name}\n{\n    // TODO - Your interfaces here\n\n    // AUTO GENERATED - DO NOT MODIFY FROM HERE\n}\n\n'
REPOSITORY_IMPLEMENTATION_TEMPLATE = '\n<?php\nnamespace App\\Repository\\{repository_name};\n\nuse App\\Model\\{model_name};\n\n/**\n *  {repository_name_with_space} Implementation.\n *\n * @category  \\App\\Repository\n * @package   \\App\\Repository\\{repository_name}\n * @version    1.0\n * @see       \\App\\Repository\\{repository_name}\\{repository_name}\n * @since     File available since Release 1.0\n */\nclass {repository_name}Impl implements {repository_name}\n{\n    // TODO - Your implementations here\n\n    // AUTO GENERATED - DO NOT MODIFY FROM HERE\n}\n'
REPOSITORY_INTERFACE_BUILTIN_TEMPLATE = '\n    /**\n     * Get last record id of {model_name}.\n     *\n     * @return {model_name} || null\n     */\n    public function getLastRecordIdOf{model_name}();\n\n    /**\n     * Get all records.\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\n     */\n    public function getAll{model_name_plural}();\n\n    /**\n     * Get record by id.\n     *\n     * @param int $id\n     *\n     * @return {model_name} || null\n     */\n    public function get{model_name}ById($id);\n\n    /**\n     * Get record by conditions.\n     *\n     * @param array $conditions\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\n     */\n    public function get{model_name_plural}ByConditions($conditions);\n\n    /**\n     * Insert one record.\n     *\n     * @param {model_name} $record\n     *\n     * @return int\n     */\n    public function save{model_name}($record);\n\n    /**\n     * Insert multiple records.\n     *\n     * @param array $records\n     *\n     * @return bool\n     */\n    public function bulkInsert{model_name_plural}($records);\n\n    /**\n     * Update records by id.\n     *\n     * @param int   $id\n     * @param array $data\n     *\n     * @return bool\n     */\n    public function update{model_name}ById($id, $data);\n\n    /**\n     * Update records by conditions.\n     *\n     * @param array $conditions\n     * @param array $data\n     *\n     * @return bool\n     */\n    public function update{model_name_plural}ByConditions($conditions, $data);\n\n    /**\n     * Delete record by id.\n     *\n     * @param int $id\n     *\n     * @throws \\Exception\n     *\n     * @return bool\n     */\n    public function delete{model_name}ById($id);\n\n    /**\n     * Force delete record by id.\n     *\n     * @param int $id\n     *\n     * @throws \\Exception\n     *\n     * @return bool\n     */\n    public function forceDelete{model_name}ById($id);\n\n    /**\n     * Delete records by conditions.\n     *\n     * @param array $conditions\n     *\n     * @return bool\n     */\n    public function delete{model_name_plural}ByConditions($conditions);\n\n    /**\n     * Delete all records.\n     *\n     * @return bool\n     */\n    public function deleteAll{model_name_plural}();\n\n    /**\n     * Count number of records.\n     *\n     * @return int\n     */\n    public function count{model_name}();\n'
REPOSITORY_IMPLEMENTATION_BUILTIN_TEMPLATE = "\n    /**\n     * Get last record id of {model_name}.\n     *\n     * @return {model_name} || null\n     */\n    public function getLastRecordIdOf{model_name}()\n    {\n        return {model_name}::max('id');\n    }\n    \n    /**\n     * Find all records.\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\n     */\n    public function getAll{model_name_plural}()\n    {\n        return {model_name}::all();\n    }\n\n    /**\n     * Find record by id.\n     *\n     * @param $id\n     *\n     * @return {model_name} || null\n     */\n    public function get{model_name}ById($id)\n    {\n        return {model_name}::find($id);\n    }\n\n    /**\n     * Get record by conditions.\n     *\n     * @param array $conditions\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\n     */\n    public function get{model_name_plural}ByConditions($conditions)\n    {\n        return {model_name}::where($conditions)->get();\n    }\n\n    /**\n     * Save one record.\n     *\n     * @param {model_name} $record\n     *\n     * @return int | bool\n     */\n    public function save{model_name}($record)\n    {\n        $status = $record->save();\n        if (false === $status) {\n            return false;\n        }\n        return $record->getId();\n    }\n\n    /**\n     * Insert multiple records.\n     *\n     * @param array $records\n     *\n     * @return bool\n     */\n    public function bulkInsert{model_name_plural}($records)\n    {\n        $data = [];\n        /** @var \\Illuminate\\Database\\Eloquent\\Model $record */\n        foreach ($records as $record) {\n            $data[] = $record->getAttributes();\n        }\n\n        return {model_name}::insert($data);\n    }\n\n    /**\n     * Update records by id.\n     *\n     * @param int   $id\n     * @param array $data\n     *\n     * @return bool\n     */\n    public function update{model_name}ById($id, $data)\n    {\n        $condition = [\n            {model_name}::ID => $id,\n        ];\n        return {model_name}::where($condition)->update($data);\n    }\n\n    /**\n     * Update records by conditions.\n     *\n     * @param array $conditions\n     * @param array $data\n     *\n     * @return bool\n     */\n    public function update{model_name_plural}ByConditions($conditions, $data)\n    {\n        return {model_name}::where($conditions)->update($data);\n    }\n\n    /**\n     * Delete record by id.\n     *\n     * @param $id\n     *\n     * @throws \\Exception\n     *\n     * @return bool\n     */\n    public function delete{model_name}ById($id)\n    {\n        $object = $this->get{model_name}ById($id);\n        if (null === $object) {\n            // Can not delete undefined object\n            return false;\n        }\n\n        return $object->delete();\n    }\n\n    /**\n     * Force delete record by id.\n     *\n     * @param $id\n     *\n     * @throws \\Exception\n     *\n     * @return bool\n     */\n    public function forceDelete{model_name}ById($id)\n    {\n        $object = $this->get{model_name}ById($id);\n        if (null === $object) {\n            // Can not delete undefined object\n            return false;\n        }\n\n        return $object->forceDelete();\n    }\n\n    /**\n     * Delete records by conditions.\n     *\n     * @param array $conditions\n     *\n     * @return bool\n     */\n    public function delete{model_name_plural}ByConditions($conditions)\n    {\n        return {model_name}::where($conditions)->delete();\n    }\n\n    /**\n     * Delete all records.\n     *\n     * @return void\n     */\n    public function deleteAll{model_name_plural}()\n    {\n        return  {model_name}::truncate();\n    }\n\n    /**\n     * Count number of records.\n     *\n     * @return int\n     */\n    public function count{model_name}()\n    {\n        return {model_name}::count();\n    }\n"
REPOSITORY_INTERFACE_FILTER_TEMPLATE = '\n    /**\n     * {filter_name_label} records by {description_conditions}.\n     *\n{condition_params}\n     *\n     * @return {returned_type}\n     *\n     * @throws \\Exception\n     */\n    public function {filter_name}{model_name_plural}By{camel_conditions}({condition_arguments});'
REPOSITORY_IMPLEMENTATION_FILTER_TEMPLATE = '\n    /**\n     * {filter_name_label} records by {description_conditions}\n     *\n{condition_params}\n     *\n     * @return {returned_type}\n     *\n     * @throws \\Exception\n     */\n    public function {filter_name}{model_name_plural}By{camel_conditions}({condition_arguments})\n    {\n        $condition = [\n{constants_with_values},\n        ];\n        $queryBuilder = {model_name}::where($condition);\n\n        return $queryBuilder->{filter_name}({filter_arguments});\n    }'
SERVICE_INTERFACE_TEMPLATE = '\n<?php\nnamespace App\\Service\\{service_name};\n\n/**\n * {service_name_with_space} Interface.\n *\n * @category  \\App\\Service\n * @package   \\App\\Service\\{service_name}\n * @version    1.0\n * @since     File available since Release 1.0\n */\ninterface {service_name}\n{\n    // TODO - Your interfaces here\n\n    // AUTO GENERATED - DO NOT MODIFY FROM HERE\n}\n\n'
SERVICE_IMPLEMENTATION_TEMPLATE = '\n<?php\nnamespace App\\Service\\{service_name};\n\nuse App\\Repository\\{model_name}Repository\\{model_name}Repository;\n\n/**\n * {service_name_with_space} Implementation.\n *\n * @category  \\App\\Service\n * @package   \\App\\Service\\{service_name}\n * @version   1.0\n * @see       \\App\\Service\\{service_name}\\{service_name}\n * @since     File available since Release 1.0\n */\nclass {service_name}Impl implements {service_name}\n{\n    /**\n     * @var {model_name}Repository ${model_name_variable}Repository\n     */\n    private ${model_name_variable}Repository;\n    \n    public function __constructor({model_name}Repository ${model_name_variable}Repository)\n    {\n        $this->{model_name_variable}Repository = ${model_name_variable}Repository;\n    }   \n    \n    // TODO - Your implementations here\n\n    // AUTO GENERATED - DO NOT MODIFY FROM HERE\n}\n'
SETTER_GETTER_TEMPLATE = "\n    /**\n     * Constant for field `{field_name}`.\n     */\n    const {constant_field_name} = '{field_name}';\n\n    /**\n     * Set {method_name}\n     * This setter will set value for field `{field_name}`.\n     *\n     * @param {field_type} ${camel_variable_name}\n     *\n     * @return \\App\\Model\\{table_name}\n     */\n    public function {setter_name}(${camel_variable_name})\n    {\n        {intercept_filter_set}\n\n        return $this;\n    }\n\n    /**\n     * Get {method_name}\n     * This getter will get value from field `{field_name}`.\n     *\n     * @return {field_type} || null\n     */\n    public function {getter_name}()\n    {\n        {intercept_filter_get}\n    }\n"