# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/envoy_data_plane/google/api.py
# Compiled at: 2020-01-30 00:14:53
# Size of source mod 2**32: 14499 bytes
from dataclasses import dataclass
from typing import List
import betterproto

@dataclass
class Http(betterproto.Message):
    __doc__ = '\n    Defines the HTTP configuration for an API service. It contains a list of\n    [HttpRule][google.api.HttpRule], each specifying the mapping of an RPC\n    method to one or more HTTP REST API methods.\n    '
    rules = betterproto.message_field(1)
    rules: List['HttpRule']
    fully_decode_reserved_expansion = betterproto.bool_field(2)
    fully_decode_reserved_expansion: bool


@dataclass
class HttpRule(betterproto.Message):
    __doc__ = '\n    # gRPC Transcoding gRPC Transcoding is a feature for mapping between a gRPC\n    method and one or more HTTP REST endpoints. It allows developers to build a\n    single API service that supports both gRPC APIs and REST APIs. Many\n    systems, including [Google APIs](https://github.com/googleapis/googleapis),\n    [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC\n    Gateway](https://github.com/grpc-ecosystem/grpc-gateway), and\n    [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature and\n    use it for large scale production services. `HttpRule` defines the schema\n    of the gRPC/REST mapping. The mapping specifies how different portions of\n    the gRPC request message are mapped to the URL path, URL query parameters,\n    and HTTP request body. It also controls how the gRPC response message is\n    mapped to the HTTP response body. `HttpRule` is typically specified as an\n    `google.api.http` annotation on the gRPC method. Each mapping specifies a\n    URL path template and an HTTP method. The path template may refer to one or\n    more fields in the gRPC request message, as long as each field is a non-\n    repeated field with a primitive (non-message) type. The path template\n    controls how fields of the request message are mapped to the URL path.\n    Example:     service Messaging {       rpc GetMessage(GetMessageRequest)\n    returns (Message) {         option (google.api.http) = {             get:\n    "/v1/{name=messages/*}"         };       }     }     message\n    GetMessageRequest {       string name = 1; // Mapped to URL path.     }\n    message Message {       string text = 1; // The resource content.     }\n    This enables an HTTP REST to gRPC mapping as below: HTTP | gRPC -----|-----\n    `GET /v1/messages/123456`  | `GetMessage(name: "messages/123456")` Any\n    fields in the request message which are not bound by the path template\n    automatically become HTTP query parameters if there is no HTTP request\n    body. For example:     service Messaging {       rpc\n    GetMessage(GetMessageRequest) returns (Message) {         option\n    (google.api.http) = {             get:"/v1/messages/{message_id}"\n    };       }     }     message GetMessageRequest {       message SubMessage {\n    string subfield = 1;       }       string message_id = 1; // Mapped to URL\n    path.       int64 revision = 2;    // Mapped to URL query parameter\n    `revision`.       SubMessage sub = 3;    // Mapped to URL query parameter\n    `sub.subfield`.     } This enables a HTTP JSON to RPC mapping as below:\n    HTTP | gRPC -----|----- `GET\n    /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id:\n    "123456" revision: 2 sub: SubMessage(subfield: "foo"))` Note that fields\n    which are mapped to URL query parameters must have a primitive type or a\n    repeated primitive type or a non-repeated message type. In the case of a\n    repeated type, the parameter can be repeated in the URL as\n    `...?param=A&param=B`. In the case of a message type, each field of the\n    message is mapped to a separate parameter, such as\n    `...?foo.a=A&foo.b=B&foo.c=C`. For HTTP methods that allow a request body,\n    the `body` field specifies the mapping. Consider a REST update method on\n    the message resource collection:     service Messaging {       rpc\n    UpdateMessage(UpdateMessageRequest) returns (Message) {         option\n    (google.api.http) = {           patch: "/v1/messages/{message_id}"\n    body: "message"         };       }     }     message UpdateMessageRequest {\n    string message_id = 1; // mapped to the URL       Message message = 2;   //\n    mapped to the body     } The following HTTP JSON to RPC mapping is enabled,\n    where the representation of the JSON in the request body is determined by\n    protos JSON encoding: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 {\n    "text": "Hi!" }` | `UpdateMessage(message_id: "123456" message { text:\n    "Hi!" })` The special name `*` can be used in the body mapping to define\n    that every field not bound by the path template should be mapped to the\n    request body.  This enables the following alternative definition of the\n    update method:     service Messaging {       rpc UpdateMessage(Message)\n    returns (Message) {         option (google.api.http) = {           patch:\n    "/v1/messages/{message_id}"           body: "*"         };       }     }\n    message Message {       string message_id = 1;       string text = 2;     }\n    The following HTTP JSON to RPC mapping is enabled: HTTP | gRPC -----|-----\n    `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:\n    "123456" text: "Hi!")` Note that when using `*` in the body mapping, it is\n    not possible to have HTTP parameters, as all fields not bound by the path\n    end in the body. This makes this option more rarely used in practice when\n    defining REST APIs. The common usage of `*` is in custom methods which\n    don\'t use the URL at all for transferring data. It is possible to define\n    multiple HTTP methods for one RPC by using the `additional_bindings`\n    option. Example:     service Messaging {       rpc\n    GetMessage(GetMessageRequest) returns (Message) {         option\n    (google.api.http) = {           get: "/v1/messages/{message_id}"\n    additional_bindings {             get:\n    "/v1/users/{user_id}/messages/{message_id}"           }         };       }\n    }     message GetMessageRequest {       string message_id = 1;       string\n    user_id = 2;     } This enables the following two alternative HTTP JSON to\n    RPC mappings: HTTP | gRPC -----|----- `GET /v1/messages/123456` |\n    `GetMessage(message_id: "123456")` `GET /v1/users/me/messages/123456` |\n    `GetMessage(user_id: "me" message_id: "123456")` ## Rules for HTTP mapping\n    1. Leaf request fields (recursive expansion nested messages in the request\n    message) are classified into three categories:    - Fields referred by the\n    path template. They are passed via the URL path.    - Fields referred by\n    the [HttpRule.body][google.api.HttpRule.body]. They are passed via the HTTP\n    request body.    - All other fields are passed via the URL query\n    parameters, and the      parameter name is the field path in the request\n    message. A repeated      field can be represented as multiple query\n    parameters under the same      name.  2. If\n    [HttpRule.body][google.api.HttpRule.body] is "*", there is no URL query\n    parameter, all fields     are passed via URL path and HTTP request body.\n    3. If [HttpRule.body][google.api.HttpRule.body] is omitted, there is no\n    HTTP request body, all     fields are passed via URL path and URL query\n    parameters. ### Path template syntax     Template = "/" Segments [ Verb ] ;\n    Segments = Segment { "/" Segment } ;     Segment  = "*" | "**" | LITERAL |\n    Variable ;     Variable = "{" FieldPath [ "=" Segments ] "}" ;\n    FieldPath = IDENT { "." IDENT } ;     Verb     = ":" LITERAL ; The syntax\n    `*` matches a single URL path segment. The syntax `**` matches zero or more\n    URL path segments, which must be the last part of the URL path except the\n    `Verb`. The syntax `Variable` matches part of the URL path as specified by\n    its template. A variable template must not contain other variables. If a\n    variable matches a single path segment, its template may be omitted, e.g.\n    `{var}` is equivalent to `{var=*}`. The syntax `LITERAL` matches literal\n    text in the URL path. If the `LITERAL` contains any reserved character,\n    such characters should be percent-encoded before the matching. If a\n    variable contains exactly one path segment, such as `"{var}"` or\n    `"{var=*}"`, when such a variable is expanded into a URL path on the client\n    side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The\n    server side does the reverse decoding. Such variables show up in the\n    [Discovery\n    Document](https://developers.google.com/discovery/v1/reference/apis) as\n    `{var}`. If a variable contains multiple path segments, such as\n    `"{var=foo/*}"` or `"{var=**}"`, when such a variable is expanded into a\n    URL path on the client side, all characters except `[-_.~/0-9a-zA-Z]` are\n    percent-encoded. The server side does the reverse decoding, except "%2F"\n    and "%2f" are left unchanged. Such variables show up in the [Discovery\n    Document](https://developers.google.com/discovery/v1/reference/apis) as\n    `{+var}`. ## Using gRPC API Service Configuration gRPC API Service\n    Configuration (service config) is a configuration language for configuring\n    a gRPC service to become a user-facing product. The service config is\n    simply the YAML representation of the `google.api.Service` proto message.\n    As an alternative to annotating your proto file, you can configure gRPC\n    transcoding in your service config YAML files. You do this by specifying a\n    `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same\n    effect as the proto annotation. This can be particularly useful if you have\n    a proto that is reused in multiple services. Note that any transcoding\n    specified in the service config will override any matching transcoding\n    configuration in the proto. Example:     http:       rules:         #\n    Selects a gRPC method and applies HttpRule to it.         - selector:\n    example.v1.Messaging.GetMessage           get:\n    /v1/messages/{message_id}/{sub.subfield} ## Special notes When gRPC\n    Transcoding is used to map a gRPC to JSON REST endpoints, the proto to JSON\n    conversion must follow the [proto3\n    specification](https://developers.google.com/protocol-\n    buffers/docs/proto3#json). While the single segment variable follows the\n    semantics of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2\n    Simple String Expansion, the multi segment variable **does not** follow RFC\n    6570 Section 3.2.3 Reserved Expansion. The reason is that the Reserved\n    Expansion does not expand special characters like `?` and `#`, which would\n    lead to invalid URLs. As the result, gRPC Transcoding uses a custom\n    encoding for multi segment variables. The path variables **must not** refer\n    to any repeated or mapped field, because client libraries are not capable\n    of handling such variable expansion. The path variables **must not**\n    capture the leading "/" character. The reason is that the most common use\n    case "{var}" does not capture the leading "/" character. For consistency,\n    all path variables must share the same behavior. Repeated message fields\n    must not be mapped to URL query parameters, because no client library can\n    support such complicated mapping. If an API needs to use a JSON array for\n    request or response body, it can map the request or response body to a\n    repeated field. However, some gRPC Transcoding implementations may not\n    support this feature.\n    '
    selector = betterproto.string_field(1)
    selector: str
    get = betterproto.string_field(2, group='pattern')
    get: str
    put = betterproto.string_field(3, group='pattern')
    put: str
    post = betterproto.string_field(4, group='pattern')
    post: str
    delete = betterproto.string_field(5, group='pattern')
    delete: str
    patch = betterproto.string_field(6, group='pattern')
    patch: str
    custom = betterproto.message_field(8, group='pattern')
    custom: 'CustomHttpPattern'
    body = betterproto.string_field(7)
    body: str
    response_body = betterproto.string_field(12)
    response_body: str
    additional_bindings = betterproto.message_field(11)
    additional_bindings: List['HttpRule']


@dataclass
class CustomHttpPattern(betterproto.Message):
    __doc__ = 'A custom pattern is used for defining custom HTTP verb.'
    kind = betterproto.string_field(1)
    kind: str
    path = betterproto.string_field(2)
    path: str