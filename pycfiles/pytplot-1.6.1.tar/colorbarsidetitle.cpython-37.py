# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/runner/work/PyTplot/PyTplot/pytplot/HTMLPlotter/CustomModels/colorbarsidetitle.py
# Compiled at: 2020-04-24 00:12:01
# Size of source mod 2**32: 3400 bytes
from bokeh.models.annotations import ColorBar
from bokeh.util.compiler import TypeScript
ts_code = '\nimport {ColorBar, ColorBarView} from "models/annotations/color_bar"\nimport * as p from "core/properties"\nimport {Context2d} from "core/util/canvas"\n\nconst SHORT_DIM = 25\n\nexport class ColorBarSideTitleView extends ColorBarView {\n  model: ColorBarSideTitle\n  protected image: HTMLCanvasElement\n\n  compute_legend_dimensions(): {width: number, height: number} {\n    const image_dimensions = this._computed_image_dimensions()\n    const [image_height, image_width] = [image_dimensions.height, image_dimensions.width]\n\n    const label_extent = this._get_label_extent()\n    const title_extent = this._title_extent()\n    const tick_extent = this._tick_extent()\n    const {padding} = this.model\n\n    let legend_height: number, legend_width: number\n    legend_height = image_height\n    legend_width = image_width + tick_extent + label_extent + title_extent + 2*padding\n\n    return {width: legend_width, height: legend_height}\n  }\n\n  protected _draw_image(ctx: Context2d): void {\n    const image = this._computed_image_dimensions()\n    ctx.save()\n    ctx.setImageSmoothingEnabled(false)\n    ctx.globalAlpha = this.model.scale_alpha\n    ctx.drawImage(this.image, 0, 0, image.width, image.height)\n    if (this.visuals.bar_line.doit) {\n      this.visuals.bar_line.set_value(ctx)\n      ctx.strokeRect(0, 0, image.width, image.height)\n    }\n    ctx.restore()\n  }\n\n  protected _draw_title(ctx: Context2d): void {\n    if (!this.visuals.title_text.doit)\n      return\n    const label_extent = this._get_label_extent()\n    const tick_extent = this._tick_extent()\n    const {padding} = this.model\n    ctx.save()\n    this.visuals.title_text.set_value(ctx)\n    ctx.rotate(-Math.PI/2)\n    ctx.fillText(this.model.title, -this.plot_view.frame._height.value * 0.5 , this.image.width + tick_extent + label_extent + 4*padding)\n    ctx.textAlign="center"\n    ctx.restore()\n  }\n\n  /*protected*/ _get_image_offset(): {x: number, y: number} {\n    // Returns image offset relative to legend bounding box\n    const x = this.model.padding\n    const y = 0\n    return {x, y}\n  }\n\n  _computed_image_dimensions(): {height: number, width: number} {\n    const frame_height = this.plot_view.frame._height.value\n    let height: number, width: number\n    if (this.model.height == \'auto\') {\n        height = frame_height\n    } else\n    height = this.model.height\n\n    width = this.model.width == \'auto\' ? SHORT_DIM : this.model.width\n\n    return {width, height}\n  }\n\n  // }}}\n}\n\nexport namespace ColorBarSideTitle {\n  export type Attrs = p.AttrsOf<Props>\n\n  export type Props = ColorBar.Props\n}\n\nexport interface ColorBarSideTitle extends ColorBarSideTitle.Attrs {}\n\nexport class ColorBarSideTitle extends ColorBar {\n  properties: ColorBarSideTitle.Props\n  \n  constructor(attrs?: Partial<ColorBarSideTitle.Attrs>) {\n    super(attrs)\n  }\n\n  static initClass(): void {\n    this.prototype.default_view = ColorBarSideTitleView\n  }\n}\n\nColorBarSideTitle.initClass()\n\n'

class ColorBarSideTitle(ColorBar):
    __implementation__ = TypeScript(ts_code)