# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.13-x86_64/egg/elasticsearch/notebook.py
# Compiled at: 2017-12-19 17:02:27
# Size of source mod 2**32: 10956 bytes
import json, uuid, jinja2, IPython.core.displaypub, IPython.display
CSS = '\n.renderjson a              { text-decoration: none; }\n.renderjson .disclosure    { color: crimson;\n                             font-size: 80%;\n                             text-decoration: none; }\n.renderjson .syntax        { color: grey; }\n.renderjson .string        { color: red; }\n.renderjson .number        { color: darkmagenta; }\n.renderjson .boolean       { color: plum; }\n.renderjson .key           { color: blue; }\n.renderjson .keyword       { color: goldenrodyellow; }\n.renderjson .object.syntax { color: seagreen; }\n.renderjson .array.syntax  { color: salmon; }\n'
JS = '// Copyright © 2013-2014 David Caldwell <david@porkrind.org>\n//\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n// OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n// CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n// Usage\n// -----\n// The module exports one entry point, the `renderjson()` function. It takes in\n// the JSON you want to render as a single argument and returns an HTML\n// element.\n//\n// Options\n// -------\n// renderjson.set_icons("+", "-")\n//   This Allows you to override the disclosure icons.\n//\n// renderjson.set_show_to_level(level)\n//   Pass the number of levels to expand when rendering. The default is 0, which\n//   starts with everything collapsed. As a special case, if level is the string\n//   "all" then it will start with everything expanded.\n//\n// renderjson.set_max_string_length(length)\n//   Strings will be truncated and made expandable if they are longer than\n//   `length`. As a special case, if `length` is the string "none" then\n//   there will be no truncation. The default is "none".\n//\n// renderjson.set_sort_objects(sort_bool)\n//   Sort objects by key (default: false)\n//\n// Theming\n// -------\n// The HTML output uses a number of classes so that you can theme it the way\n// you\'d like:\n//     .disclosure    ("⊕", "⊖")\n//     .syntax        (",", ":", "{", "}", "[", "]")\n//     .string        (includes quotes)\n//     .number\n//     .boolean\n//     .key           (object key)\n//     .keyword       ("null", "undefined")\n//     .object.syntax ("{", "}")\n//     .array.syntax  ("[", "]")\n\nvar module;\n(module||{}).exports = renderjson = (function() {\n    var themetext = function(/* [class, text]+ */) {\n        var spans = [];\n        while (arguments.length)\n            spans.push(append(span(Array.prototype.shift.call(arguments)),\n                              text(Array.prototype.shift.call(arguments))));\n        return spans;\n    };\n    var append = function(/* el, ... */) {\n        var el = Array.prototype.shift.call(arguments);\n        for (var a=0; a<arguments.length; a++)\n            if (arguments[a].constructor == Array)\n                append.apply(this, [el].concat(arguments[a]));\n            else\n                el.appendChild(arguments[a]);\n        return el;\n    };\n    var prepend = function(el, child) {\n        el.insertBefore(child, el.firstChild);\n        return el;\n    }\n    var isempty = function(obj) { for (var k in obj) if (obj.hasOwnProperty(k)) return false;\n                                  return true; }\n    var text = function(txt) { return document.createTextNode(txt) };\n    var div = function() { return document.createElement("div") };\n    var span = function(classname) { var s = document.createElement("span");\n                                     if (classname) s.className = classname;\n                                     return s; };\n    var A = function A(txt, classname, callback) { var a = document.createElement("a");\n                                                   if (classname) a.className = classname;\n                                                   a.appendChild(text(txt));\n                                                   a.href = \'#\';\n                                                   a.onclick = function() { callback(); return false; };\n                                                   return a; };\n\n    function _renderjson(json, indent, dont_indent, show_level, max_string, sort_objects) {\n        var my_indent = dont_indent ? "" : indent;\n\n        var disclosure = function(open, placeholder, close, type, builder) {\n            var content;\n            var empty = span(type);\n            var show = function() { if (!content) append(empty.parentNode,\n                                                         content = prepend(builder(),\n                                                                           A(renderjson.hide, "disclosure",\n                                                                             function() { content.style.display="none";\n                                                                                          empty.style.display="inline"; } )));\n                                    content.style.display="inline";\n                                    empty.style.display="none"; };\n            append(empty,\n                   A(renderjson.show, "disclosure", show),\n                   themetext(type+ " syntax", open),\n                   A(placeholder, null, show),\n                   themetext(type+ " syntax", close));\n\n            var el = append(span(), text(my_indent.slice(0,-1)), empty);\n            if (show_level > 0)\n                show();\n            return el;\n        };\n\n        if (json === null) return themetext(null, my_indent, "keyword", "null");\n        if (json === void 0) return themetext(null, my_indent, "keyword", "undefined");\n\n        if (typeof(json) == "string" && json.length > max_string)\n            return disclosure(\'"\', json.substr(0,max_string)+" ...", \'"\', "string", function () {\n                return append(span("string"), themetext(null, my_indent, "string", JSON.stringify(json)));\n            });\n\n        if (typeof(json) != "object") // Strings, numbers and bools\n            return themetext(null, my_indent, typeof(json), JSON.stringify(json));\n\n        if (json.constructor == Array) {\n            if (json.length == 0) return themetext(null, my_indent, "array syntax", "[]");\n\n            return disclosure("[", " ... ", "]", "array", function () {\n                var as = append(span("array"), themetext("array syntax", "[", null, "\\n"));\n                for (var i=0; i<json.length; i++)\n                    append(as,\n                           _renderjson(json[i], indent+"    ", false, show_level-1, max_string, sort_objects),\n                           i != json.length-1 ? themetext("syntax", ",") : [],\n                           text("\\n"));\n                append(as, themetext(null, indent, "array syntax", "]"));\n                return as;\n            });\n        }\n\n        // object\n        if (isempty(json))\n            return themetext(null, my_indent, "object syntax", "{}");\n\n        return disclosure("{", "...", "}", "object", function () {\n            var os = append(span("object"), themetext("object syntax", "{", null, "\\n"));\n            for (var k in json) var last = k;\n            var keys = Object.keys(json);\n            if (sort_objects)\n                keys = keys.sort();\n            for (var i in keys) {\n                var k = keys[i];\n                append(os, themetext(null, indent+"    ", "key", \'"\'+k+\'"\', "object syntax", \': \'),\n                       _renderjson(json[k], indent+"    ", true, show_level-1, max_string, sort_objects),\n                       k != last ? themetext("syntax", ",") : [],\n                       text("\\n"));\n            }\n            append(os, themetext(null, indent, "object syntax", "}"));\n            return os;\n        });\n    }\n\n    var renderjson = function renderjson(json)\n    {\n        var pre = append(document.createElement("pre"), _renderjson(json, "", false, renderjson.show_to_level, renderjson.max_string_length, renderjson.sort_objects));\n        pre.className = "renderjson";\n        return pre;\n    }\n    renderjson.set_icons = function(show, hide) { renderjson.show = show;\n                                                  renderjson.hide = hide;\n                                                  return renderjson; };\n    renderjson.set_show_to_level = function(level) { renderjson.show_to_level = typeof level == "string" &&\n                                                                                level.toLowerCase() === "all" ? Number.MAX_VALUE\n                                                                                                              : level;\n                                                     return renderjson; };\n    renderjson.set_max_string_length = function(length) { renderjson.max_string_length = typeof length == "string" &&\n                                                                                         length.toLowerCase() === "none" ? Number.MAX_VALUE\n                                                                                                                         : length;\n                                                          return renderjson; };\n    renderjson.set_sort_objects = function(sort_bool) { renderjson.sort_objects = sort_bool;\n                                                        return renderjson; };\n    // Backwards compatiblity. Use set_show_to_level() for new code.\n    renderjson.set_show_by_default = function(show) { renderjson.show_to_level = show ? Number.MAX_VALUE : 0;\n                                                      return renderjson; };\n    renderjson.set_icons(\'⊕\', \'⊖\');\n    renderjson.set_show_by_default(false);\n    renderjson.set_sort_objects(false);\n    renderjson.set_max_string_length("none");\n    return renderjson;\n})();\n'

def output_cell(json_obj):
    cellid = str(uuid.uuid4())
    IPython.display.display_html(('<div id="{}"></div>'.format(cellid)),
      raw=True)
    IPython.display.display_javascript(jinja2.Template("\n        document.getElementById('{{ cellid }}').appendChild(renderjson.set_icons('▶', '▽').set_show_to_level(10)({{ json_str }}));\n    ").render(cellid=cellid, json_str=(json.dumps(json_obj))),
      raw=True)


def output_notebook():
    html = jinja2.Template('\n        <style>\n        {{ css }}\n        </style>\n        <script type="text/javascript">\n        {{ js }}\n        </script>\n    ').render(css=CSS, js=JS)
    IPython.core.displaypub.publish_display_data({'text/html': html})