# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.5-x86_64/egg/sklearn_pmml/pmml.py
# Compiled at: 2015-04-12 21:11:39
from __future__ import unicode_literals
import io, pyxb, pyxb.binding, pyxb.binding.saxer, pyxb.utils.utility, pyxb.utils.domutils, pyxb.utils.six as _six
_GenerationUID = pyxb.utils.utility.UniqueIdentifier(b'urn:uuid:4d641c54-de23-11e4-83d3-c8e0eb19168d')
_PyXBVersion = b'1.2.4'
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)
import pyxb.binding.datatypes
Namespace = pyxb.namespace.NamespaceForURI(b'http://www.dmg.org/PMML-4_2', create_if_missing=True)
Namespace.configureCategories([b'typeBinding', b'elementBinding'])

def CreateFromDocument(xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """
    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    else:
        if default_namespace is None:
            default_namespace = Namespace.fallbackNamespace()
        saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
        handler = saxer.getContentHandler()
        xmld = xml_text
        if isinstance(xmld, _six.text_type):
            xmld = xmld.encode(pyxb._InputEncoding)
        saxer.parse(io.BytesIO(xmld))
        instance = handler.rootObject()
        return instance


def CreateFromDOM(node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


class MULTIPLE_MODEL_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'MULTIPLE-MODEL-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 77, 4)
    _Documentation = None


MULTIPLE_MODEL_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MULTIPLE_MODEL_METHOD, enum_prefix=None)
MULTIPLE_MODEL_METHOD.majorityVote = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'majorityVote', tag=b'majorityVote')
MULTIPLE_MODEL_METHOD.weightedMajorityVote = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'weightedMajorityVote', tag=b'weightedMajorityVote')
MULTIPLE_MODEL_METHOD.average = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'average', tag=b'average')
MULTIPLE_MODEL_METHOD.weightedAverage = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'weightedAverage', tag=b'weightedAverage')
MULTIPLE_MODEL_METHOD.median = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'median', tag=b'median')
MULTIPLE_MODEL_METHOD.max = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'max', tag=b'max')
MULTIPLE_MODEL_METHOD.sum = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'sum', tag=b'sum')
MULTIPLE_MODEL_METHOD.selectFirst = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'selectFirst', tag=b'selectFirst')
MULTIPLE_MODEL_METHOD.selectAll = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'selectAll', tag=b'selectAll')
MULTIPLE_MODEL_METHOD.modelChain = MULTIPLE_MODEL_METHOD._CF_enumeration.addEnumeration(unicode_value=b'modelChain', tag=b'modelChain')
MULTIPLE_MODEL_METHOD._InitializeFacetMap(MULTIPLE_MODEL_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'MULTIPLE-MODEL-METHOD', MULTIPLE_MODEL_METHOD)

class STD_ANON(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 148, 16)
    _Documentation = None


STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.binarySplit = STD_ANON._CF_enumeration.addEnumeration(unicode_value=b'binarySplit', tag=b'binarySplit')
STD_ANON.multiSplit = STD_ANON._CF_enumeration.addEnumeration(unicode_value=b'multiSplit', tag=b'multiSplit')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)

class STD_ANON_(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 271, 16)
    _Documentation = None


STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.weightedSum = STD_ANON_._CF_enumeration.addEnumeration(unicode_value=b'weightedSum', tag=b'weightedSum')
STD_ANON_.weightedMax = STD_ANON_._CF_enumeration.addEnumeration(unicode_value=b'weightedMax', tag=b'weightedMax')
STD_ANON_.firstHit = STD_ANON_._CF_enumeration.addEnumeration(unicode_value=b'firstHit', tag=b'firstHit')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)

class STD_ANON_2(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 331, 16)
    _Documentation = None


STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.centerBased = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=b'centerBased', tag=b'centerBased')
STD_ANON_2.distributionBased = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=b'distributionBased', tag=b'distributionBased')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

class STD_ANON_3(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 390, 16)
    _Documentation = None


STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.true = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'true', tag=b'true')
STD_ANON_3.false = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'false', tag=b'false')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)

class COMPARE_FUNCTION(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'COMPARE-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 410, 4)
    _Documentation = None


COMPARE_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=COMPARE_FUNCTION, enum_prefix=None)
COMPARE_FUNCTION.absDiff = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'absDiff', tag=b'absDiff')
COMPARE_FUNCTION.gaussSim = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'gaussSim', tag=b'gaussSim')
COMPARE_FUNCTION.delta = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'delta', tag=b'delta')
COMPARE_FUNCTION.equal = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'equal', tag=b'equal')
COMPARE_FUNCTION.table = COMPARE_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'table', tag=b'table')
COMPARE_FUNCTION._InitializeFacetMap(COMPARE_FUNCTION._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'COMPARE-FUNCTION', COMPARE_FUNCTION)

class STD_ANON_4(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 436, 16)
    _Documentation = None


STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.distance = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=b'distance', tag=b'distance')
STD_ANON_4.similarity = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=b'similarity', tag=b'similarity')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)

class STD_ANON_5(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 538, 16)
    _Documentation = None


STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.linearRegression = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value=b'linearRegression', tag=b'linearRegression')
STD_ANON_5.stepwisePolynomialRegression = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value=b'stepwisePolynomialRegression', tag=b'stepwisePolynomialRegression')
STD_ANON_5.logisticRegression = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value=b'logisticRegression', tag=b'logisticRegression')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)

class REGRESSIONNORMALIZATIONMETHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'REGRESSIONNORMALIZATIONMETHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 551, 4)
    _Documentation = None


REGRESSIONNORMALIZATIONMETHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=REGRESSIONNORMALIZATIONMETHOD, enum_prefix=None)
REGRESSIONNORMALIZATIONMETHOD.none = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'none', tag=b'none')
REGRESSIONNORMALIZATIONMETHOD.simplemax = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'simplemax', tag=b'simplemax')
REGRESSIONNORMALIZATIONMETHOD.softmax = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'softmax', tag=b'softmax')
REGRESSIONNORMALIZATIONMETHOD.logit = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'logit', tag=b'logit')
REGRESSIONNORMALIZATIONMETHOD.probit = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'probit', tag=b'probit')
REGRESSIONNORMALIZATIONMETHOD.cloglog = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'cloglog', tag=b'cloglog')
REGRESSIONNORMALIZATIONMETHOD.exp = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'exp', tag=b'exp')
REGRESSIONNORMALIZATIONMETHOD.loglog = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'loglog', tag=b'loglog')
REGRESSIONNORMALIZATIONMETHOD.cauchit = REGRESSIONNORMALIZATIONMETHOD._CF_enumeration.addEnumeration(unicode_value=b'cauchit', tag=b'cauchit')
REGRESSIONNORMALIZATIONMETHOD._InitializeFacetMap(REGRESSIONNORMALIZATIONMETHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'REGRESSIONNORMALIZATIONMETHOD', REGRESSIONNORMALIZATIONMETHOD)

class STD_ANON_6(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 674, 16)
    _Documentation = None


STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.termFrequency = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=b'termFrequency', tag=b'termFrequency')
STD_ANON_6.binary = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=b'binary', tag=b'binary')
STD_ANON_6.logarithmic = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=b'logarithmic', tag=b'logarithmic')
STD_ANON_6.augmentedNormalizedTermFrequency = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=b'augmentedNormalizedTermFrequency', tag=b'augmentedNormalizedTermFrequency')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)

class STD_ANON_7(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 684, 16)
    _Documentation = None


STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.inverseDocumentFrequency = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'inverseDocumentFrequency', tag=b'inverseDocumentFrequency')
STD_ANON_7.none = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'none', tag=b'none')
STD_ANON_7.GFIDF = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'GFIDF', tag=b'GFIDF')
STD_ANON_7.normal = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'normal', tag=b'normal')
STD_ANON_7.probabilisticInverse = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'probabilisticInverse', tag=b'probabilisticInverse')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

class STD_ANON_8(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 695, 16)
    _Documentation = None


STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.none = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=b'none', tag=b'none')
STD_ANON_8.cosine = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=b'cosine', tag=b'cosine')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

class STD_ANON_9(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 710, 16)
    _Documentation = None


STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.euclidean = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=b'euclidean', tag=b'euclidean')
STD_ANON_9.cosine = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=b'cosine', tag=b'cosine')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

class CONT_SCORING_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'CONT-SCORING-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 796, 4)
    _Documentation = None


CONT_SCORING_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CONT_SCORING_METHOD, enum_prefix=None)
CONT_SCORING_METHOD.median = CONT_SCORING_METHOD._CF_enumeration.addEnumeration(unicode_value=b'median', tag=b'median')
CONT_SCORING_METHOD.average = CONT_SCORING_METHOD._CF_enumeration.addEnumeration(unicode_value=b'average', tag=b'average')
CONT_SCORING_METHOD.weightedAverage = CONT_SCORING_METHOD._CF_enumeration.addEnumeration(unicode_value=b'weightedAverage', tag=b'weightedAverage')
CONT_SCORING_METHOD._InitializeFacetMap(CONT_SCORING_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'CONT-SCORING-METHOD', CONT_SCORING_METHOD)

class CAT_SCORING_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'CAT-SCORING-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 803, 4)
    _Documentation = None


CAT_SCORING_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CAT_SCORING_METHOD, enum_prefix=None)
CAT_SCORING_METHOD.majorityVote = CAT_SCORING_METHOD._CF_enumeration.addEnumeration(unicode_value=b'majorityVote', tag=b'majorityVote')
CAT_SCORING_METHOD.weightedMajorityVote = CAT_SCORING_METHOD._CF_enumeration.addEnumeration(unicode_value=b'weightedMajorityVote', tag=b'weightedMajorityVote')
CAT_SCORING_METHOD._InitializeFacetMap(CAT_SCORING_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'CAT-SCORING-METHOD', CAT_SCORING_METHOD)

class STD_ANON_10(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 826, 16)
    _Documentation = None


STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.round = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=b'round', tag=b'round')
STD_ANON_10.ceiling = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=b'ceiling', tag=b'ceiling')
STD_ANON_10.floor = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=b'floor', tag=b'floor')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)

class MINING_FUNCTION(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'MINING-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 894, 4)
    _Documentation = None


MINING_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MINING_FUNCTION, enum_prefix=None)
MINING_FUNCTION.associationRules = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'associationRules', tag=b'associationRules')
MINING_FUNCTION.sequences = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'sequences', tag=b'sequences')
MINING_FUNCTION.classification = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'classification', tag=b'classification')
MINING_FUNCTION.regression = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'regression', tag=b'regression')
MINING_FUNCTION.clustering = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'clustering', tag=b'clustering')
MINING_FUNCTION.timeSeries = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'timeSeries', tag=b'timeSeries')
MINING_FUNCTION.mixed = MINING_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'mixed', tag=b'mixed')
MINING_FUNCTION._InitializeFacetMap(MINING_FUNCTION._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'MINING-FUNCTION', MINING_FUNCTION)

class NUMBER(pyxb.binding.datatypes.double):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'NUMBER')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 919, 4)
    _Documentation = None


NUMBER._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'NUMBER', NUMBER)

class INT_NUMBER(pyxb.binding.datatypes.integer):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'INT-NUMBER')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 922, 4)
    _Documentation = None


INT_NUMBER._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'INT-NUMBER', INT_NUMBER)

class REAL_NUMBER(pyxb.binding.datatypes.double):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'REAL-NUMBER')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 925, 4)
    _Documentation = None


REAL_NUMBER._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'REAL-NUMBER', REAL_NUMBER)

class PROB_NUMBER(pyxb.binding.datatypes.decimal):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'PROB-NUMBER')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 928, 4)
    _Documentation = None


PROB_NUMBER._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'PROB-NUMBER', PROB_NUMBER)

class PERCENTAGE_NUMBER(pyxb.binding.datatypes.decimal):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'PERCENTAGE-NUMBER')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 931, 4)
    _Documentation = None


PERCENTAGE_NUMBER._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'PERCENTAGE-NUMBER', PERCENTAGE_NUMBER)

class FIELD_NAME(pyxb.binding.datatypes.string):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'FIELD-NAME')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 934, 4)
    _Documentation = None


FIELD_NAME._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'FIELD-NAME', FIELD_NAME)

class STD_ANON_11(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 940, 12)
    _Documentation = None


STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.int = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=b'int', tag=b'int')
STD_ANON_11.real = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=b'real', tag=b'real')
STD_ANON_11.string = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=b'string', tag=b'string')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)

class STD_ANON_12(pyxb.binding.basis.STD_list):
    """Simple type that is a list of pyxb.binding.datatypes.int."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 991, 8)
    _Documentation = None
    _ItemType = pyxb.binding.datatypes.int


STD_ANON_12._InitializeFacetMap()

class STD_ANON_13(pyxb.binding.basis.STD_list):
    """Simple type that is a list of pyxb.binding.datatypes.int."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 996, 8)
    _Documentation = None
    _ItemType = pyxb.binding.datatypes.int


STD_ANON_13._InitializeFacetMap()

class STD_ANON_14(pyxb.binding.basis.STD_list):
    """Simple type that is a list of pyxb.binding.datatypes.double."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1001, 8)
    _Documentation = None
    _ItemType = pyxb.binding.datatypes.double


STD_ANON_14._InitializeFacetMap()

class STD_ANON_15(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1012, 16)
    _Documentation = None


STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.diagonal = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=b'diagonal', tag=b'diagonal')
STD_ANON_15.symmetric = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=b'symmetric', tag=b'symmetric')
STD_ANON_15.any = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=b'any', tag=b'any')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)

class STD_ANON_16(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1094, 16)
    _Documentation = None


STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.no = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=b'no', tag=b'no')
STD_ANON_16.yes = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=b'yes', tag=b'yes')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)

class STD_ANON_17(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1252, 16)
    _Documentation = None


STD_ANON_17._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_17, enum_prefix=None)
STD_ANON_17.recommendation = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value=b'recommendation', tag=b'recommendation')
STD_ANON_17.exclusiveRecommendation = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value=b'exclusiveRecommendation', tag=b'exclusiveRecommendation')
STD_ANON_17.ruleAssociation = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value=b'ruleAssociation', tag=b'ruleAssociation')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_enumeration)

class STD_ANON_18(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1262, 16)
    _Documentation = None


STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.confidence = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value=b'confidence', tag=b'confidence')
STD_ANON_18.support = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value=b'support', tag=b'support')
STD_ANON_18.lift = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value=b'lift', tag=b'lift')
STD_ANON_18.leverage = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value=b'leverage', tag=b'leverage')
STD_ANON_18.affinity = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value=b'affinity', tag=b'affinity')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)

class STD_ANON_19(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1273, 16)
    _Documentation = None


STD_ANON_19._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_19, enum_prefix=None)
STD_ANON_19.descending = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value=b'descending', tag=b'descending')
STD_ANON_19.ascending = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value=b'ascending', tag=b'ascending')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_enumeration)

class RESULT_FEATURE(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'RESULT-FEATURE')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1284, 4)
    _Documentation = None


RESULT_FEATURE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RESULT_FEATURE, enum_prefix=None)
RESULT_FEATURE.predictedValue = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'predictedValue', tag=b'predictedValue')
RESULT_FEATURE.predictedDisplayValue = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'predictedDisplayValue', tag=b'predictedDisplayValue')
RESULT_FEATURE.transformedValue = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'transformedValue', tag=b'transformedValue')
RESULT_FEATURE.decision = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'decision', tag=b'decision')
RESULT_FEATURE.probability = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'probability', tag=b'probability')
RESULT_FEATURE.affinity = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'affinity', tag=b'affinity')
RESULT_FEATURE.residual = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'residual', tag=b'residual')
RESULT_FEATURE.standardError = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'standardError', tag=b'standardError')
RESULT_FEATURE.clusterId = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'clusterId', tag=b'clusterId')
RESULT_FEATURE.clusterAffinity = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'clusterAffinity', tag=b'clusterAffinity')
RESULT_FEATURE.entityId = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'entityId', tag=b'entityId')
RESULT_FEATURE.entityAffinity = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'entityAffinity', tag=b'entityAffinity')
RESULT_FEATURE.warning = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'warning', tag=b'warning')
RESULT_FEATURE.ruleValue = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'ruleValue', tag=b'ruleValue')
RESULT_FEATURE.reasonCode = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'reasonCode', tag=b'reasonCode')
RESULT_FEATURE.antecedent = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'antecedent', tag=b'antecedent')
RESULT_FEATURE.consequent = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'consequent', tag=b'consequent')
RESULT_FEATURE.rule = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'rule', tag=b'rule')
RESULT_FEATURE.ruleId = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'ruleId', tag=b'ruleId')
RESULT_FEATURE.confidence = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'confidence', tag=b'confidence')
RESULT_FEATURE.support = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'support', tag=b'support')
RESULT_FEATURE.lift = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'lift', tag=b'lift')
RESULT_FEATURE.leverage = RESULT_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'leverage', tag=b'leverage')
RESULT_FEATURE._InitializeFacetMap(RESULT_FEATURE._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'RESULT-FEATURE', RESULT_FEATURE)

class RULE_FEATURE(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'RULE-FEATURE')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1331, 4)
    _Documentation = None


RULE_FEATURE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RULE_FEATURE, enum_prefix=None)
RULE_FEATURE.antecedent = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'antecedent', tag=b'antecedent')
RULE_FEATURE.consequent = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'consequent', tag=b'consequent')
RULE_FEATURE.rule = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'rule', tag=b'rule')
RULE_FEATURE.ruleId = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'ruleId', tag=b'ruleId')
RULE_FEATURE.confidence = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'confidence', tag=b'confidence')
RULE_FEATURE.support = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'support', tag=b'support')
RULE_FEATURE.lift = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'lift', tag=b'lift')
RULE_FEATURE.leverage = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'leverage', tag=b'leverage')
RULE_FEATURE.affinity = RULE_FEATURE._CF_enumeration.addEnumeration(unicode_value=b'affinity', tag=b'affinity')
RULE_FEATURE._InitializeFacetMap(RULE_FEATURE._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'RULE-FEATURE', RULE_FEATURE)

class STD_ANON_20(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1367, 16)
    _Documentation = None


STD_ANON_20._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_20, enum_prefix=None)
STD_ANON_20.regression = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=b'regression', tag=b'regression')
STD_ANON_20.generalLinear = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=b'generalLinear', tag=b'generalLinear')
STD_ANON_20.multinomialLogistic = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=b'multinomialLogistic', tag=b'multinomialLogistic')
STD_ANON_20.ordinalMultinomial = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=b'ordinalMultinomial', tag=b'ordinalMultinomial')
STD_ANON_20.generalizedLinear = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=b'generalizedLinear', tag=b'generalizedLinear')
STD_ANON_20.CoxRegression = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value=b'CoxRegression', tag=b'CoxRegression')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_enumeration)

class STD_ANON_21(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1388, 16)
    _Documentation = None


STD_ANON_21._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_21, enum_prefix=None)
STD_ANON_21.binomial = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=b'binomial', tag=b'binomial')
STD_ANON_21.gamma = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=b'gamma', tag=b'gamma')
STD_ANON_21.igauss = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=b'igauss', tag=b'igauss')
STD_ANON_21.negbin = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=b'negbin', tag=b'negbin')
STD_ANON_21.normal = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=b'normal', tag=b'normal')
STD_ANON_21.poisson = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=b'poisson', tag=b'poisson')
STD_ANON_21.tweedie = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value=b'tweedie', tag=b'tweedie')
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_enumeration)

class STD_ANON_22(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1499, 16)
    _Documentation = None


STD_ANON_22._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_22, enum_prefix=None)
STD_ANON_22.model = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=b'model', tag=b'model')
STD_ANON_22.robust = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value=b'robust', tag=b'robust')
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_enumeration)

class CUMULATIVE_LINK_FUNCTION(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'CUMULATIVE-LINK-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1581, 4)
    _Documentation = None


CUMULATIVE_LINK_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CUMULATIVE_LINK_FUNCTION, enum_prefix=None)
CUMULATIVE_LINK_FUNCTION.logit = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'logit', tag=b'logit')
CUMULATIVE_LINK_FUNCTION.probit = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'probit', tag=b'probit')
CUMULATIVE_LINK_FUNCTION.cloglog = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'cloglog', tag=b'cloglog')
CUMULATIVE_LINK_FUNCTION.loglog = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'loglog', tag=b'loglog')
CUMULATIVE_LINK_FUNCTION.cauchit = CUMULATIVE_LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'cauchit', tag=b'cauchit')
CUMULATIVE_LINK_FUNCTION._InitializeFacetMap(CUMULATIVE_LINK_FUNCTION._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'CUMULATIVE-LINK-FUNCTION', CUMULATIVE_LINK_FUNCTION)

class LINK_FUNCTION(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'LINK-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1590, 4)
    _Documentation = None


LINK_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LINK_FUNCTION, enum_prefix=None)
LINK_FUNCTION.cloglog = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'cloglog', tag=b'cloglog')
LINK_FUNCTION.identity = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'identity', tag=b'identity')
LINK_FUNCTION.log = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'log', tag=b'log')
LINK_FUNCTION.logc = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'logc', tag=b'logc')
LINK_FUNCTION.logit = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'logit', tag=b'logit')
LINK_FUNCTION.loglog = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'loglog', tag=b'loglog')
LINK_FUNCTION.negbin = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'negbin', tag=b'negbin')
LINK_FUNCTION.oddspower = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'oddspower', tag=b'oddspower')
LINK_FUNCTION.power = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'power', tag=b'power')
LINK_FUNCTION.probit = LINK_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'probit', tag=b'probit')
LINK_FUNCTION._InitializeFacetMap(LINK_FUNCTION._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'LINK-FUNCTION', LINK_FUNCTION)

class STD_ANON_23(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1625, 16)
    _Documentation = None


STD_ANON_23._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_23, enum_prefix=None)
STD_ANON_23.n0 = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value=b'0', tag=b'n0')
STD_ANON_23.n1 = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value=b'1', tag=b'n1')
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_enumeration)

class STD_ANON_24(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1740, 16)
    _Documentation = None


STD_ANON_24._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_24, enum_prefix=None)
STD_ANON_24.Model = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value=b'Model', tag=b'Model')
STD_ANON_24.Error = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value=b'Error', tag=b'Error')
STD_ANON_24.Total = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value=b'Total', tag=b'Total')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_enumeration)

class STD_ANON_25(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1775, 16)
    _Documentation = None


STD_ANON_25._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_25, enum_prefix=None)
STD_ANON_25.n0 = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value=b'0', tag=b'n0')
STD_ANON_25.n1 = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value=b'1', tag=b'n1')
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_enumeration)

class STD_ANON_26(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1872, 16)
    _Documentation = None


STD_ANON_26._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_26, enum_prefix=None)
STD_ANON_26.indicator = STD_ANON_26._CF_enumeration.addEnumeration(unicode_value=b'indicator', tag=b'indicator')
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_enumeration)

class STD_ANON_27(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1937, 16)
    _Documentation = None


STD_ANON_27._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_27, enum_prefix=None)
STD_ANON_27.termFrequency = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value=b'termFrequency', tag=b'termFrequency')
STD_ANON_27.binary = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value=b'binary', tag=b'binary')
STD_ANON_27.logarithmic = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value=b'logarithmic', tag=b'logarithmic')
STD_ANON_27.augmentedNormalizedTermFrequency = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value=b'augmentedNormalizedTermFrequency', tag=b'augmentedNormalizedTermFrequency')
STD_ANON_27._InitializeFacetMap(STD_ANON_27._CF_enumeration)

class STD_ANON_28(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1949, 16)
    _Documentation = None


STD_ANON_28._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_28, enum_prefix=None)
STD_ANON_28.allHits = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value=b'allHits', tag=b'allHits')
STD_ANON_28.bestHits = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value=b'bestHits', tag=b'bestHits')
STD_ANON_28._InitializeFacetMap(STD_ANON_28._CF_enumeration)

class STD_ANON_29(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1986, 16)
    _Documentation = None


STD_ANON_29._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_29, enum_prefix=None)
STD_ANON_29.count = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value=b'count', tag=b'count')
STD_ANON_29.sum = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value=b'sum', tag=b'sum')
STD_ANON_29.average = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value=b'average', tag=b'average')
STD_ANON_29.min = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value=b'min', tag=b'min')
STD_ANON_29.max = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value=b'max', tag=b'max')
STD_ANON_29.multiset = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value=b'multiset', tag=b'multiset')
STD_ANON_29._InitializeFacetMap(STD_ANON_29._CF_enumeration)

class ACTIVATION_FUNCTION(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ACTIVATION-FUNCTION')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2061, 4)
    _Documentation = None


ACTIVATION_FUNCTION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ACTIVATION_FUNCTION, enum_prefix=None)
ACTIVATION_FUNCTION.threshold = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'threshold', tag=b'threshold')
ACTIVATION_FUNCTION.logistic = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'logistic', tag=b'logistic')
ACTIVATION_FUNCTION.tanh = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'tanh', tag=b'tanh')
ACTIVATION_FUNCTION.identity = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'identity', tag=b'identity')
ACTIVATION_FUNCTION.exponential = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'exponential', tag=b'exponential')
ACTIVATION_FUNCTION.reciprocal = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'reciprocal', tag=b'reciprocal')
ACTIVATION_FUNCTION.square = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'square', tag=b'square')
ACTIVATION_FUNCTION.Gauss = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'Gauss', tag=b'Gauss')
ACTIVATION_FUNCTION.sine = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'sine', tag=b'sine')
ACTIVATION_FUNCTION.cosine = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'cosine', tag=b'cosine')
ACTIVATION_FUNCTION.Elliott = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'Elliott', tag=b'Elliott')
ACTIVATION_FUNCTION.arctan = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'arctan', tag=b'arctan')
ACTIVATION_FUNCTION.radialBasis = ACTIVATION_FUNCTION._CF_enumeration.addEnumeration(unicode_value=b'radialBasis', tag=b'radialBasis')
ACTIVATION_FUNCTION._InitializeFacetMap(ACTIVATION_FUNCTION._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'ACTIVATION-FUNCTION', ACTIVATION_FUNCTION)

class NN_NORMALIZATION_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'NN-NORMALIZATION-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2078, 4)
    _Documentation = None


NN_NORMALIZATION_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NN_NORMALIZATION_METHOD, enum_prefix=None)
NN_NORMALIZATION_METHOD.none = NN_NORMALIZATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'none', tag=b'none')
NN_NORMALIZATION_METHOD.simplemax = NN_NORMALIZATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'simplemax', tag=b'simplemax')
NN_NORMALIZATION_METHOD.softmax = NN_NORMALIZATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'softmax', tag=b'softmax')
NN_NORMALIZATION_METHOD._InitializeFacetMap(NN_NORMALIZATION_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'NN-NORMALIZATION-METHOD', NN_NORMALIZATION_METHOD)

class NN_NEURON_ID(pyxb.binding.datatypes.string):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'NN-NEURON-ID')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2085, 4)
    _Documentation = None


NN_NEURON_ID._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'NN-NEURON-ID', NN_NEURON_ID)

class NN_NEURON_IDREF(pyxb.binding.datatypes.string):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'NN-NEURON-IDREF')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2088, 4)
    _Documentation = None


NN_NEURON_IDREF._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'NN-NEURON-IDREF', NN_NEURON_IDREF)

class BASELINE_TEST_STATISTIC(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'BASELINE-TEST-STATISTIC')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2165, 4)
    _Documentation = None


BASELINE_TEST_STATISTIC._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=BASELINE_TEST_STATISTIC, enum_prefix=None)
BASELINE_TEST_STATISTIC.zValue = BASELINE_TEST_STATISTIC._CF_enumeration.addEnumeration(unicode_value=b'zValue', tag=b'zValue')
BASELINE_TEST_STATISTIC.chiSquareIndependence = BASELINE_TEST_STATISTIC._CF_enumeration.addEnumeration(unicode_value=b'chiSquareIndependence', tag=b'chiSquareIndependence')
BASELINE_TEST_STATISTIC.chiSquareDistribution = BASELINE_TEST_STATISTIC._CF_enumeration.addEnumeration(unicode_value=b'chiSquareDistribution', tag=b'chiSquareDistribution')
BASELINE_TEST_STATISTIC.CUSUM = BASELINE_TEST_STATISTIC._CF_enumeration.addEnumeration(unicode_value=b'CUSUM', tag=b'CUSUM')
BASELINE_TEST_STATISTIC.scalarProduct = BASELINE_TEST_STATISTIC._CF_enumeration.addEnumeration(unicode_value=b'scalarProduct', tag=b'scalarProduct')
BASELINE_TEST_STATISTIC._InitializeFacetMap(BASELINE_TEST_STATISTIC._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'BASELINE-TEST-STATISTIC', BASELINE_TEST_STATISTIC)

class SVM_CLASSIFICATION_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'SVM-CLASSIFICATION-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2339, 4)
    _Documentation = None


SVM_CLASSIFICATION_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SVM_CLASSIFICATION_METHOD, enum_prefix=None)
SVM_CLASSIFICATION_METHOD.OneAgainstAll = SVM_CLASSIFICATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'OneAgainstAll', tag=b'OneAgainstAll')
SVM_CLASSIFICATION_METHOD.OneAgainstOne = SVM_CLASSIFICATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'OneAgainstOne', tag=b'OneAgainstOne')
SVM_CLASSIFICATION_METHOD._InitializeFacetMap(SVM_CLASSIFICATION_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'SVM-CLASSIFICATION-METHOD', SVM_CLASSIFICATION_METHOD)

class SVM_REPRESENTATION(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'SVM-REPRESENTATION')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2345, 4)
    _Documentation = None


SVM_REPRESENTATION._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SVM_REPRESENTATION, enum_prefix=None)
SVM_REPRESENTATION.SupportVectors = SVM_REPRESENTATION._CF_enumeration.addEnumeration(unicode_value=b'SupportVectors', tag=b'SupportVectors')
SVM_REPRESENTATION.Coefficients = SVM_REPRESENTATION._CF_enumeration.addEnumeration(unicode_value=b'Coefficients', tag=b'Coefficients')
SVM_REPRESENTATION._InitializeFacetMap(SVM_REPRESENTATION._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'SVM-REPRESENTATION', SVM_REPRESENTATION)

class VECTOR_ID(pyxb.binding.datatypes.string):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'VECTOR-ID')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2389, 4)
    _Documentation = None


VECTOR_ID._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'VECTOR-ID', VECTOR_ID)

class STD_ANON_30(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2491, 16)
    _Documentation = None


STD_ANON_30._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_30, enum_prefix=None)
STD_ANON_30.pointsAbove = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value=b'pointsAbove', tag=b'pointsAbove')
STD_ANON_30.pointsBelow = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value=b'pointsBelow', tag=b'pointsBelow')
STD_ANON_30._InitializeFacetMap(STD_ANON_30._CF_enumeration)

class STD_ANON_31(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2500, 16)
    _Documentation = None


STD_ANON_31._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_31, enum_prefix=None)
STD_ANON_31.max = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=b'max', tag=b'max')
STD_ANON_31.min = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=b'min', tag=b'min')
STD_ANON_31.mean = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=b'mean', tag=b'mean')
STD_ANON_31.neutral = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=b'neutral', tag=b'neutral')
STD_ANON_31.other = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value=b'other', tag=b'other')
STD_ANON_31._InitializeFacetMap(STD_ANON_31._CF_enumeration)

class ELEMENT_ID(pyxb.binding.datatypes.string):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ELEMENT-ID')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2600, 4)
    _Documentation = None


ELEMENT_ID._InitializeFacetMap()
Namespace.addCategoryObject(b'typeBinding', b'ELEMENT-ID', ELEMENT_ID)

class DELIMITER(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'DELIMITER')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2614, 4)
    _Documentation = None


DELIMITER._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DELIMITER, enum_prefix=None)
DELIMITER.sameTimeWindow = DELIMITER._CF_enumeration.addEnumeration(unicode_value=b'sameTimeWindow', tag=b'sameTimeWindow')
DELIMITER.acrossTimeWindows = DELIMITER._CF_enumeration.addEnumeration(unicode_value=b'acrossTimeWindows', tag=b'acrossTimeWindows')
DELIMITER._InitializeFacetMap(DELIMITER._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'DELIMITER', DELIMITER)

class GAP(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'GAP')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2620, 4)
    _Documentation = None


GAP._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=GAP, enum_prefix=None)
GAP.true = GAP._CF_enumeration.addEnumeration(unicode_value=b'true', tag=b'true')
GAP.false = GAP._CF_enumeration.addEnumeration(unicode_value=b'false', tag=b'false')
GAP.unknown = GAP._CF_enumeration.addEnumeration(unicode_value=b'unknown', tag=b'unknown')
GAP._InitializeFacetMap(GAP._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'GAP', GAP)

class STD_ANON_32(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2753, 16)
    _Documentation = None


STD_ANON_32._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_32, enum_prefix=None)
STD_ANON_32.n0 = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=b'0', tag=b'n0')
STD_ANON_32.n1 = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value=b'1', tag=b'n1')
STD_ANON_32._InitializeFacetMap(STD_ANON_32._CF_enumeration)

class OPTYPE(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'OPTYPE')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2762, 4)
    _Documentation = None


OPTYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=OPTYPE, enum_prefix=None)
OPTYPE.categorical = OPTYPE._CF_enumeration.addEnumeration(unicode_value=b'categorical', tag=b'categorical')
OPTYPE.ordinal = OPTYPE._CF_enumeration.addEnumeration(unicode_value=b'ordinal', tag=b'ordinal')
OPTYPE.continuous = OPTYPE._CF_enumeration.addEnumeration(unicode_value=b'continuous', tag=b'continuous')
OPTYPE._InitializeFacetMap(OPTYPE._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'OPTYPE', OPTYPE)

class DATATYPE(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'DATATYPE')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2769, 4)
    _Documentation = None


DATATYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DATATYPE, enum_prefix=None)
DATATYPE.string = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'string', tag=b'string')
DATATYPE.integer = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'integer', tag=b'integer')
DATATYPE.float = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'float', tag=b'float')
DATATYPE.double = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'double', tag=b'double')
DATATYPE.boolean = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'boolean', tag=b'boolean')
DATATYPE.date = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'date', tag=b'date')
DATATYPE.time = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'time', tag=b'time')
DATATYPE.dateTime = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateTime', tag=b'dateTime')
DATATYPE.dateDaysSince0 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateDaysSince[0]', tag=b'dateDaysSince0')
DATATYPE.dateDaysSince1960 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateDaysSince[1960]', tag=b'dateDaysSince1960')
DATATYPE.dateDaysSince1970 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateDaysSince[1970]', tag=b'dateDaysSince1970')
DATATYPE.dateDaysSince1980 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateDaysSince[1980]', tag=b'dateDaysSince1980')
DATATYPE.timeSeconds = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'timeSeconds', tag=b'timeSeconds')
DATATYPE.dateTimeSecondsSince0 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateTimeSecondsSince[0]', tag=b'dateTimeSecondsSince0')
DATATYPE.dateTimeSecondsSince1960 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateTimeSecondsSince[1960]', tag=b'dateTimeSecondsSince1960')
DATATYPE.dateTimeSecondsSince1970 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateTimeSecondsSince[1970]', tag=b'dateTimeSecondsSince1970')
DATATYPE.dateTimeSecondsSince1980 = DATATYPE._CF_enumeration.addEnumeration(unicode_value=b'dateTimeSecondsSince[1980]', tag=b'dateTimeSecondsSince1980')
DATATYPE._InitializeFacetMap(DATATYPE._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'DATATYPE', DATATYPE)

class STD_ANON_33(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2798, 16)
    _Documentation = None


STD_ANON_33._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_33, enum_prefix=None)
STD_ANON_33.valid = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value=b'valid', tag=b'valid')
STD_ANON_33.invalid = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value=b'invalid', tag=b'invalid')
STD_ANON_33.missing = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value=b'missing', tag=b'missing')
STD_ANON_33._InitializeFacetMap(STD_ANON_33._CF_enumeration)

class STD_ANON_34(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2814, 16)
    _Documentation = None


STD_ANON_34._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_34, enum_prefix=None)
STD_ANON_34.openClosed = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value=b'openClosed', tag=b'openClosed')
STD_ANON_34.openOpen = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value=b'openOpen', tag=b'openOpen')
STD_ANON_34.closedOpen = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value=b'closedOpen', tag=b'closedOpen')
STD_ANON_34.closedClosed = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value=b'closedClosed', tag=b'closedClosed')
STD_ANON_34._InitializeFacetMap(STD_ANON_34._CF_enumeration)

class TIMESERIES_ALGORITHM(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'TIMESERIES-ALGORITHM')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2851, 4)
    _Documentation = None


TIMESERIES_ALGORITHM._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TIMESERIES_ALGORITHM, enum_prefix=None)
TIMESERIES_ALGORITHM.ARIMA = TIMESERIES_ALGORITHM._CF_enumeration.addEnumeration(unicode_value=b'ARIMA', tag=b'ARIMA')
TIMESERIES_ALGORITHM.ExponentialSmoothing = TIMESERIES_ALGORITHM._CF_enumeration.addEnumeration(unicode_value=b'ExponentialSmoothing', tag=b'ExponentialSmoothing')
TIMESERIES_ALGORITHM.SeasonalTrendDecomposition = TIMESERIES_ALGORITHM._CF_enumeration.addEnumeration(unicode_value=b'SeasonalTrendDecomposition', tag=b'SeasonalTrendDecomposition')
TIMESERIES_ALGORITHM.SpectralAnalysis = TIMESERIES_ALGORITHM._CF_enumeration.addEnumeration(unicode_value=b'SpectralAnalysis', tag=b'SpectralAnalysis')
TIMESERIES_ALGORITHM._InitializeFacetMap(TIMESERIES_ALGORITHM._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'TIMESERIES-ALGORITHM', TIMESERIES_ALGORITHM)

class TIMESERIES_USAGE(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'TIMESERIES-USAGE')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2871, 4)
    _Documentation = None


TIMESERIES_USAGE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TIMESERIES_USAGE, enum_prefix=None)
TIMESERIES_USAGE.original = TIMESERIES_USAGE._CF_enumeration.addEnumeration(unicode_value=b'original', tag=b'original')
TIMESERIES_USAGE.logical = TIMESERIES_USAGE._CF_enumeration.addEnumeration(unicode_value=b'logical', tag=b'logical')
TIMESERIES_USAGE.prediction = TIMESERIES_USAGE._CF_enumeration.addEnumeration(unicode_value=b'prediction', tag=b'prediction')
TIMESERIES_USAGE._InitializeFacetMap(TIMESERIES_USAGE._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'TIMESERIES-USAGE', TIMESERIES_USAGE)

class TIME_ANCHOR(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'TIME-ANCHOR')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2911, 4)
    _Documentation = None


TIME_ANCHOR._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TIME_ANCHOR, enum_prefix=None)
TIME_ANCHOR.dateTimeMillisecondsSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateTimeMillisecondsSince[0]', tag=b'dateTimeMillisecondsSince0')
TIME_ANCHOR.dateTimeMillisecondsSince1960 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateTimeMillisecondsSince[1960]', tag=b'dateTimeMillisecondsSince1960')
TIME_ANCHOR.dateTimeMillisecondsSince1970 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateTimeMillisecondsSince[1970]', tag=b'dateTimeMillisecondsSince1970')
TIME_ANCHOR.dateTimeMillisecondsSince1980 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateTimeMillisecondsSince[1980]', tag=b'dateTimeMillisecondsSince1980')
TIME_ANCHOR.dateTimeSecondsSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateTimeSecondsSince[0]', tag=b'dateTimeSecondsSince0')
TIME_ANCHOR.dateTimeSecondsSince1960 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateTimeSecondsSince[1960]', tag=b'dateTimeSecondsSince1960')
TIME_ANCHOR.dateTimeSecondsSince1970 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateTimeSecondsSince[1970]', tag=b'dateTimeSecondsSince1970')
TIME_ANCHOR.dateTimeSecondsSince1980 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateTimeSecondsSince[1980]', tag=b'dateTimeSecondsSince1980')
TIME_ANCHOR.dateDaysSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateDaysSince[0]', tag=b'dateDaysSince0')
TIME_ANCHOR.dateDaysSince1960 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateDaysSince[1960]', tag=b'dateDaysSince1960')
TIME_ANCHOR.dateDaysSince1970 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateDaysSince[1970]', tag=b'dateDaysSince1970')
TIME_ANCHOR.dateDaysSince1980 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateDaysSince[1980]', tag=b'dateDaysSince1980')
TIME_ANCHOR.dateMonthsSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateMonthsSince[0]', tag=b'dateMonthsSince0')
TIME_ANCHOR.dateMonthsSince1960 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateMonthsSince[1960]', tag=b'dateMonthsSince1960')
TIME_ANCHOR.dateMonthsSince1970 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateMonthsSince[1970]', tag=b'dateMonthsSince1970')
TIME_ANCHOR.dateMonthsSince1980 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateMonthsSince[1980]', tag=b'dateMonthsSince1980')
TIME_ANCHOR.dateYearsSince0 = TIME_ANCHOR._CF_enumeration.addEnumeration(unicode_value=b'dateYearsSince[0]', tag=b'dateYearsSince0')
TIME_ANCHOR._InitializeFacetMap(TIME_ANCHOR._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'TIME-ANCHOR', TIME_ANCHOR)

class VALID_TIME_SPEC(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'VALID-TIME-SPEC')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2932, 4)
    _Documentation = None


VALID_TIME_SPEC._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=VALID_TIME_SPEC, enum_prefix=None)
VALID_TIME_SPEC.includeAll = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=b'includeAll', tag=b'includeAll')
VALID_TIME_SPEC.includeFromTo = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=b'includeFromTo', tag=b'includeFromTo')
VALID_TIME_SPEC.excludeFromTo = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=b'excludeFromTo', tag=b'excludeFromTo')
VALID_TIME_SPEC.includeSet = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=b'includeSet', tag=b'includeSet')
VALID_TIME_SPEC.excludeSet = VALID_TIME_SPEC._CF_enumeration.addEnumeration(unicode_value=b'excludeSet', tag=b'excludeSet')
VALID_TIME_SPEC._InitializeFacetMap(VALID_TIME_SPEC._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'VALID-TIME-SPEC', VALID_TIME_SPEC)

class TIME_EXCEPTION_TYPE(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'TIME-EXCEPTION-TYPE')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2950, 4)
    _Documentation = None


TIME_EXCEPTION_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TIME_EXCEPTION_TYPE, enum_prefix=None)
TIME_EXCEPTION_TYPE.exclude = TIME_EXCEPTION_TYPE._CF_enumeration.addEnumeration(unicode_value=b'exclude', tag=b'exclude')
TIME_EXCEPTION_TYPE.include = TIME_EXCEPTION_TYPE._CF_enumeration.addEnumeration(unicode_value=b'include', tag=b'include')
TIME_EXCEPTION_TYPE._InitializeFacetMap(TIME_EXCEPTION_TYPE._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'TIME-EXCEPTION-TYPE', TIME_EXCEPTION_TYPE)

class INTERPOLATION_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'INTERPOLATION-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2956, 4)
    _Documentation = None


INTERPOLATION_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=INTERPOLATION_METHOD, enum_prefix=None)
INTERPOLATION_METHOD.none = INTERPOLATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'none', tag=b'none')
INTERPOLATION_METHOD.linear = INTERPOLATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'linear', tag=b'linear')
INTERPOLATION_METHOD.exponentialSpline = INTERPOLATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'exponentialSpline', tag=b'exponentialSpline')
INTERPOLATION_METHOD.cubicSpline = INTERPOLATION_METHOD._CF_enumeration.addEnumeration(unicode_value=b'cubicSpline', tag=b'cubicSpline')
INTERPOLATION_METHOD._InitializeFacetMap(INTERPOLATION_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'INTERPOLATION-METHOD', INTERPOLATION_METHOD)

class STD_ANON_35(pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2974, 16)
    _Documentation = None


STD_ANON_35._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_35, enum_prefix=None)
STD_ANON_35.none = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value=b'none', tag=b'none')
STD_ANON_35.logarithmic = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value=b'logarithmic', tag=b'logarithmic')
STD_ANON_35.squareroot = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value=b'squareroot', tag=b'squareroot')
STD_ANON_35._InitializeFacetMap(STD_ANON_35._CF_enumeration)

class STD_ANON_36(pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2996, 16)
    _Documentation = None


STD_ANON_36._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_36, enum_prefix=None)
STD_ANON_36.additive = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value=b'additive', tag=b'additive')
STD_ANON_36.damped_additive = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value=b'damped_additive', tag=b'damped_additive')
STD_ANON_36.multiplicative = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value=b'multiplicative', tag=b'multiplicative')
STD_ANON_36.damped_multiplicative = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value=b'damped_multiplicative', tag=b'damped_multiplicative')
STD_ANON_36.polynomial_exponential = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value=b'polynomial_exponential', tag=b'polynomial_exponential')
STD_ANON_36._InitializeFacetMap(STD_ANON_36._CF_enumeration)

class STD_ANON_37(pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3017, 16)
    _Documentation = None


STD_ANON_37._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_37, enum_prefix=None)
STD_ANON_37.additive = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value=b'additive', tag=b'additive')
STD_ANON_37.multiplicative = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value=b'multiplicative', tag=b'multiplicative')
STD_ANON_37._InitializeFacetMap(STD_ANON_37._CF_enumeration)

class FIELD_USAGE_TYPE(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'FIELD-USAGE-TYPE')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3058, 4)
    _Documentation = None


FIELD_USAGE_TYPE._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FIELD_USAGE_TYPE, enum_prefix=None)
FIELD_USAGE_TYPE.active = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=b'active', tag=b'active')
FIELD_USAGE_TYPE.predicted = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=b'predicted', tag=b'predicted')
FIELD_USAGE_TYPE.target = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=b'target', tag=b'target')
FIELD_USAGE_TYPE.supplementary = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=b'supplementary', tag=b'supplementary')
FIELD_USAGE_TYPE.group = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=b'group', tag=b'group')
FIELD_USAGE_TYPE.order = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=b'order', tag=b'order')
FIELD_USAGE_TYPE.frequencyWeight = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=b'frequencyWeight', tag=b'frequencyWeight')
FIELD_USAGE_TYPE.analysisWeight = FIELD_USAGE_TYPE._CF_enumeration.addEnumeration(unicode_value=b'analysisWeight', tag=b'analysisWeight')
FIELD_USAGE_TYPE._InitializeFacetMap(FIELD_USAGE_TYPE._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'FIELD-USAGE-TYPE', FIELD_USAGE_TYPE)

class OUTLIER_TREATMENT_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'OUTLIER-TREATMENT-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3070, 4)
    _Documentation = None


OUTLIER_TREATMENT_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=OUTLIER_TREATMENT_METHOD, enum_prefix=None)
OUTLIER_TREATMENT_METHOD.asIs = OUTLIER_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asIs', tag=b'asIs')
OUTLIER_TREATMENT_METHOD.asMissingValues = OUTLIER_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asMissingValues', tag=b'asMissingValues')
OUTLIER_TREATMENT_METHOD.asExtremeValues = OUTLIER_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asExtremeValues', tag=b'asExtremeValues')
OUTLIER_TREATMENT_METHOD._InitializeFacetMap(OUTLIER_TREATMENT_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'OUTLIER-TREATMENT-METHOD', OUTLIER_TREATMENT_METHOD)

class MISSING_VALUE_TREATMENT_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'MISSING-VALUE-TREATMENT-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3077, 4)
    _Documentation = None


MISSING_VALUE_TREATMENT_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MISSING_VALUE_TREATMENT_METHOD, enum_prefix=None)
MISSING_VALUE_TREATMENT_METHOD.asIs = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asIs', tag=b'asIs')
MISSING_VALUE_TREATMENT_METHOD.asMean = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asMean', tag=b'asMean')
MISSING_VALUE_TREATMENT_METHOD.asMode = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asMode', tag=b'asMode')
MISSING_VALUE_TREATMENT_METHOD.asMedian = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asMedian', tag=b'asMedian')
MISSING_VALUE_TREATMENT_METHOD.asValue = MISSING_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asValue', tag=b'asValue')
MISSING_VALUE_TREATMENT_METHOD._InitializeFacetMap(MISSING_VALUE_TREATMENT_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'MISSING-VALUE-TREATMENT-METHOD', MISSING_VALUE_TREATMENT_METHOD)

class INVALID_VALUE_TREATMENT_METHOD(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'INVALID-VALUE-TREATMENT-METHOD')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3086, 4)
    _Documentation = None


INVALID_VALUE_TREATMENT_METHOD._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=INVALID_VALUE_TREATMENT_METHOD, enum_prefix=None)
INVALID_VALUE_TREATMENT_METHOD.returnInvalid = INVALID_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'returnInvalid', tag=b'returnInvalid')
INVALID_VALUE_TREATMENT_METHOD.asIs = INVALID_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asIs', tag=b'asIs')
INVALID_VALUE_TREATMENT_METHOD.asMissing = INVALID_VALUE_TREATMENT_METHOD._CF_enumeration.addEnumeration(unicode_value=b'asMissing', tag=b'asMissing')
INVALID_VALUE_TREATMENT_METHOD._InitializeFacetMap(INVALID_VALUE_TREATMENT_METHOD._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'INVALID-VALUE-TREATMENT-METHOD', INVALID_VALUE_TREATMENT_METHOD)

class STD_ANON_38(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3116, 16)
    _Documentation = None


STD_ANON_38._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_38, enum_prefix=None)
STD_ANON_38.training = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value=b'training', tag=b'training')
STD_ANON_38.test = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value=b'test', tag=b'test')
STD_ANON_38.validation = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value=b'validation', tag=b'validation')
STD_ANON_38._InitializeFacetMap(STD_ANON_38._CF_enumeration)

class STD_ANON_39(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3323, 16)
    _Documentation = None


STD_ANON_39._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_39, enum_prefix=None)
STD_ANON_39.binarySplit = STD_ANON_39._CF_enumeration.addEnumeration(unicode_value=b'binarySplit', tag=b'binarySplit')
STD_ANON_39.multiSplit = STD_ANON_39._CF_enumeration.addEnumeration(unicode_value=b'multiSplit', tag=b'multiSplit')
STD_ANON_39._InitializeFacetMap(STD_ANON_39._CF_enumeration)

class STD_ANON_40(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3369, 16)
    _Documentation = None


STD_ANON_40._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_40, enum_prefix=None)
STD_ANON_40.equal = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value=b'equal', tag=b'equal')
STD_ANON_40.notEqual = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value=b'notEqual', tag=b'notEqual')
STD_ANON_40.lessThan = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value=b'lessThan', tag=b'lessThan')
STD_ANON_40.lessOrEqual = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value=b'lessOrEqual', tag=b'lessOrEqual')
STD_ANON_40.greaterThan = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value=b'greaterThan', tag=b'greaterThan')
STD_ANON_40.greaterOrEqual = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value=b'greaterOrEqual', tag=b'greaterOrEqual')
STD_ANON_40.isMissing = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value=b'isMissing', tag=b'isMissing')
STD_ANON_40.isNotMissing = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value=b'isNotMissing', tag=b'isNotMissing')
STD_ANON_40._InitializeFacetMap(STD_ANON_40._CF_enumeration)

class STD_ANON_41(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3394, 16)
    _Documentation = None


STD_ANON_41._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_41, enum_prefix=None)
STD_ANON_41.or_ = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value=b'or', tag=b'or_')
STD_ANON_41.and_ = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value=b'and', tag=b'and_')
STD_ANON_41.xor = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value=b'xor', tag=b'xor')
STD_ANON_41.surrogate = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value=b'surrogate', tag=b'surrogate')
STD_ANON_41._InitializeFacetMap(STD_ANON_41._CF_enumeration)

class STD_ANON_42(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3413, 16)
    _Documentation = None


STD_ANON_42._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_42, enum_prefix=None)
STD_ANON_42.isIn = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value=b'isIn', tag=b'isIn')
STD_ANON_42.isNotIn = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value=b'isNotIn', tag=b'isNotIn')
STD_ANON_42._InitializeFacetMap(STD_ANON_42._CF_enumeration)

class MISSING_VALUE_STRATEGY(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'MISSING-VALUE-STRATEGY')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3447, 4)
    _Documentation = None


MISSING_VALUE_STRATEGY._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MISSING_VALUE_STRATEGY, enum_prefix=None)
MISSING_VALUE_STRATEGY.lastPrediction = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=b'lastPrediction', tag=b'lastPrediction')
MISSING_VALUE_STRATEGY.nullPrediction = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=b'nullPrediction', tag=b'nullPrediction')
MISSING_VALUE_STRATEGY.defaultChild = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=b'defaultChild', tag=b'defaultChild')
MISSING_VALUE_STRATEGY.weightedConfidence = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=b'weightedConfidence', tag=b'weightedConfidence')
MISSING_VALUE_STRATEGY.aggregateNodes = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=b'aggregateNodes', tag=b'aggregateNodes')
MISSING_VALUE_STRATEGY.none = MISSING_VALUE_STRATEGY._CF_enumeration.addEnumeration(unicode_value=b'none', tag=b'none')
MISSING_VALUE_STRATEGY._InitializeFacetMap(MISSING_VALUE_STRATEGY._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'MISSING-VALUE-STRATEGY', MISSING_VALUE_STRATEGY)

class NO_TRUE_CHILD_STRATEGY(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'NO-TRUE-CHILD-STRATEGY')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3457, 4)
    _Documentation = None


NO_TRUE_CHILD_STRATEGY._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NO_TRUE_CHILD_STRATEGY, enum_prefix=None)
NO_TRUE_CHILD_STRATEGY.returnNullPrediction = NO_TRUE_CHILD_STRATEGY._CF_enumeration.addEnumeration(unicode_value=b'returnNullPrediction', tag=b'returnNullPrediction')
NO_TRUE_CHILD_STRATEGY.returnLastPrediction = NO_TRUE_CHILD_STRATEGY._CF_enumeration.addEnumeration(unicode_value=b'returnLastPrediction', tag=b'returnLastPrediction')
NO_TRUE_CHILD_STRATEGY._InitializeFacetMap(NO_TRUE_CHILD_STRATEGY._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'NO-TRUE-CHILD-STRATEGY', NO_TRUE_CHILD_STRATEGY)

class CTD_ANON(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 209, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __itemRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'itemRef'), b'itemRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_itemRef', pyxb.binding.datatypes.string, required=True)
    __itemRef._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 213, 12)
    __itemRef._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 213, 12)
    itemRef = property(__itemRef.value, __itemRef.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__itemRef.name(): __itemRef})


class CTD_ANON_(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 303, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __SimpleRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimpleRule'), b'SimpleRule', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON__httpwww_dmg_orgPMML_4_2SimpleRule', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 287, 4))
    SimpleRule = property(__SimpleRule.value, __SimpleRule.set, None, None)
    __CompoundRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CompoundRule'), b'CompoundRule', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON__httpwww_dmg_orgPMML_4_2CompoundRule', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 302, 4))
    CompoundRule = property(__CompoundRule.value, __CompoundRule.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON__httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), b'SimplePredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON__httpwww_dmg_orgPMML_4_2SimplePredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4))
    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), b'CompoundPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON__httpwww_dmg_orgPMML_4_2CompoundPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4))
    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), b'SimpleSetPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON__httpwww_dmg_orgPMML_4_2SimpleSetPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4))
    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'True'), b'True_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON__httpwww_dmg_orgPMML_4_2True', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4))
    True_ = property(__True.value, __True.set, None, None)
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'False'), b'False_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON__httpwww_dmg_orgPMML_4_2False', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4))
    False_ = property(__False.value, __False.set, None, None)
    _ElementMap.update({__SimpleRule.name(): __SimpleRule, 
       __CompoundRule.name(): __CompoundRule, 
       __Extension.name(): __Extension, 
       __SimplePredicate.name(): __SimplePredicate, 
       __CompoundPredicate.name(): __CompoundPredicate, 
       __SimpleSetPredicate.name(): __SimpleSetPredicate, 
       __True.name(): __True, 
       __False.name(): __False})
    _AttributeMap.update({})


class CTD_ANON_2(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 343, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_2_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_2_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({})


class CTD_ANON_3(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 351, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __KohonenMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'KohonenMap'), b'KohonenMap', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_3_httpwww_dmg_orgPMML_4_2KohonenMap', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 364, 4))
    KohonenMap = property(__KohonenMap.value, __KohonenMap.set, None, None)
    __Covariances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Covariances'), b'Covariances', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_3_httpwww_dmg_orgPMML_4_2Covariances', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 374, 4))
    Covariances = property(__Covariances.value, __Covariances.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_3_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_3_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __Partition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Partition'), b'Partition', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_3_httpwww_dmg_orgPMML_4_2Partition', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1755, 4))
    Partition = property(__Partition.value, __Partition.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_3_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 359, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 359, 12)
    id = property(__id.value, __id.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_3_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 360, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 360, 12)
    name = property(__name.value, __name.set, None, None)
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'size'), b'size', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_3_size', pyxb.binding.datatypes.nonNegativeInteger)
    __size._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 361, 12)
    __size._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 361, 12)
    size = property(__size.value, __size.set, None, None)
    _ElementMap.update({__KohonenMap.name(): __KohonenMap, 
       __Covariances.name(): __Covariances, 
       __Extension.name(): __Extension, 
       __Array.name(): __Array, 
       __Partition.name(): __Partition})
    _AttributeMap.update({__id.name(): __id, 
       __name.name(): __name, 
       __size.name(): __size})


class CTD_ANON_4(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 365, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_4_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __coord1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'coord1'), b'coord1', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_4_coord1', pyxb.binding.datatypes.float)
    __coord1._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 369, 12)
    __coord1._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 369, 12)
    coord1 = property(__coord1.value, __coord1.set, None, None)
    __coord2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'coord2'), b'coord2', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_4_coord2', pyxb.binding.datatypes.float)
    __coord2._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 370, 12)
    __coord2._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 370, 12)
    coord2 = property(__coord2.value, __coord2.set, None, None)
    __coord3 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'coord3'), b'coord3', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_4_coord3', pyxb.binding.datatypes.float)
    __coord3._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 371, 12)
    __coord3._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 371, 12)
    coord3 = property(__coord3.value, __coord3.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__coord1.name(): __coord1, 
       __coord2.name(): __coord2, 
       __coord3.name(): __coord3})


class CTD_ANON_5(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 375, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_5_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), b'Matrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_5_httpwww_dmg_orgPMML_4_2Matrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4))
    Matrix = property(__Matrix.value, __Matrix.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Matrix.name(): __Matrix})
    _AttributeMap.update({})


class CTD_ANON_6(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 403, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_6_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), b'Matrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_6_httpwww_dmg_orgPMML_4_2Matrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4))
    Matrix = property(__Matrix.value, __Matrix.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Matrix.name(): __Matrix})
    _AttributeMap.update({})


class CTD_ANON_7(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 449, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_7_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_8(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 456, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_8_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_9(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 463, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_9_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_10(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 470, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_10_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_11(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 485, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_11_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_12(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 492, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_12_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_13(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 499, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_13_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_14(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 633, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_14_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_14_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __Taxonomy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Taxonomy'), b'Taxonomy', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_14_httpwww_dmg_orgPMML_4_2Taxonomy', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1071, 4))
    Taxonomy = property(__Taxonomy.value, __Taxonomy.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array, 
       __Taxonomy.name(): __Taxonomy})
    _AttributeMap.update({})


class CTD_ANON_15(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 642, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __TextDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextDocument'), b'TextDocument', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_15_httpwww_dmg_orgPMML_4_2TextDocument', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 649, 4))
    TextDocument = property(__TextDocument.value, __TextDocument.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_15_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__TextDocument.name(): __TextDocument, 
       __Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_16(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 661, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_16_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), b'Matrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_16_httpwww_dmg_orgPMML_4_2Matrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4))
    Matrix = property(__Matrix.value, __Matrix.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Matrix.name(): __Matrix})
    _AttributeMap.update({})


class CTD_ANON_17(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 762, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __InstanceField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'InstanceField'), b'InstanceField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_17_httpwww_dmg_orgPMML_4_2InstanceField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 769, 4))
    InstanceField = property(__InstanceField.value, __InstanceField.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_17_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__InstanceField.name(): __InstanceField, 
       __Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_18(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 770, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_18_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_18_field', pyxb.binding.datatypes.string, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 774, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 774, 12)
    field = property(__field.value, __field.set, None, None)
    __column = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'column'), b'column', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_18_column', pyxb.binding.datatypes.string)
    __column._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 775, 12)
    __column._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 775, 12)
    column = property(__column.value, __column.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __column.name(): __column})


class CTD_ANON_19(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 779, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __KNNInput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'KNNInput'), b'KNNInput', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_19_httpwww_dmg_orgPMML_4_2KNNInput', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 786, 4))
    KNNInput = property(__KNNInput.value, __KNNInput.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_19_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__KNNInput.name(): __KNNInput, 
       __Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_20(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 810, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Target'), b'Target', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_20_httpwww_dmg_orgPMML_4_2Target', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 817, 4))
    Target = property(__Target.value, __Target.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_20_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Target.name(): __Target, 
       __Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_21(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 853, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __MiningModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningModel'), b'MiningModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2MiningModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 33, 4))
    MiningModel = property(__MiningModel.value, __MiningModel.set, None, None)
    __AssociationModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'AssociationModel'), b'AssociationModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2AssociationModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 157, 4))
    AssociationModel = property(__AssociationModel.value, __AssociationModel.set, None, None)
    __RuleSetModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RuleSetModel'), b'RuleSetModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2RuleSetModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 231, 4))
    RuleSetModel = property(__RuleSetModel.value, __RuleSetModel.set, None, None)
    __ClusteringModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModel'), b'ClusteringModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2ClusteringModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 311, 4))
    ClusteringModel = property(__ClusteringModel.value, __ClusteringModel.set, None, None)
    __RegressionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RegressionModel'), b'RegressionModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2RegressionModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 520, 4))
    RegressionModel = property(__RegressionModel.value, __RegressionModel.set, None, None)
    __TextModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextModel'), b'TextModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2TextModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 606, 4))
    TextModel = property(__TextModel.value, __TextModel.set, None, None)
    __NearestNeighborModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NearestNeighborModel'), b'NearestNeighborModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2NearestNeighborModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 719, 4))
    NearestNeighborModel = property(__NearestNeighborModel.value, __NearestNeighborModel.set, None, None)
    __MiningBuildTask = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningBuildTask'), b'MiningBuildTask', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2MiningBuildTask', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 887, 4))
    MiningBuildTask = property(__MiningBuildTask.value, __MiningBuildTask.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Header = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Header'), b'Header', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2Header', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1036, 4))
    Header = property(__Header.value, __Header.set, None, None)
    __NaiveBayesModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NaiveBayesModel'), b'NaiveBayesModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2NaiveBayesModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1129, 4))
    NaiveBayesModel = property(__NaiveBayesModel.value, __NaiveBayesModel.set, None, None)
    __GeneralRegressionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'GeneralRegressionModel'), b'GeneralRegressionModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2GeneralRegressionModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1344, 4))
    GeneralRegressionModel = property(__GeneralRegressionModel.value, __GeneralRegressionModel.set, None, None)
    __TransformationDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TransformationDictionary'), b'TransformationDictionary', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2TransformationDictionary', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1797, 4))
    TransformationDictionary = property(__TransformationDictionary.value, __TransformationDictionary.set, None, None)
    __NeuralNetwork = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NeuralNetwork'), b'NeuralNetwork', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2NeuralNetwork', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2001, 4))
    NeuralNetwork = property(__NeuralNetwork.value, __NeuralNetwork.set, None, None)
    __BaselineModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BaselineModel'), b'BaselineModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2BaselineModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2130, 4))
    BaselineModel = property(__BaselineModel.value, __BaselineModel.set, None, None)
    __SupportVectorMachineModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachineModel'), b'SupportVectorMachineModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2SupportVectorMachineModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2307, 4))
    SupportVectorMachineModel = property(__SupportVectorMachineModel.value, __SupportVectorMachineModel.set, None, None)
    __Scorecard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Scorecard'), b'Scorecard', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2Scorecard', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2471, 4))
    Scorecard = property(__Scorecard.value, __Scorecard.set, None, None)
    __SequenceModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SequenceModel'), b'SequenceModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2SequenceModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2551, 4))
    SequenceModel = property(__SequenceModel.value, __SequenceModel.set, None, None)
    __DataDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DataDictionary'), b'DataDictionary', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2DataDictionary', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2728, 4))
    DataDictionary = property(__DataDictionary.value, __DataDictionary.set, None, None)
    __TimeSeriesModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TimeSeriesModel'), b'TimeSeriesModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2TimeSeriesModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2827, 4))
    TimeSeriesModel = property(__TimeSeriesModel.value, __TimeSeriesModel.set, None, None)
    __TreeModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TreeModel'), b'TreeModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_httpwww_dmg_orgPMML_4_2TreeModel', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3302, 4))
    TreeModel = property(__TreeModel.value, __TreeModel.set, None, None)
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_21_version', pyxb.binding.datatypes.string, required=True)
    __version._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 864, 12)
    __version._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 864, 12)
    version = property(__version.value, __version.set, None, None)
    _ElementMap.update({__MiningModel.name(): __MiningModel, 
       __AssociationModel.name(): __AssociationModel, 
       __RuleSetModel.name(): __RuleSetModel, 
       __ClusteringModel.name(): __ClusteringModel, 
       __RegressionModel.name(): __RegressionModel, 
       __TextModel.name(): __TextModel, 
       __NearestNeighborModel.name(): __NearestNeighborModel, 
       __MiningBuildTask.name(): __MiningBuildTask, 
       __Extension.name(): __Extension, 
       __Header.name(): __Header, 
       __NaiveBayesModel.name(): __NaiveBayesModel, 
       __GeneralRegressionModel.name(): __GeneralRegressionModel, 
       __TransformationDictionary.name(): __TransformationDictionary, 
       __NeuralNetwork.name(): __NeuralNetwork, 
       __BaselineModel.name(): __BaselineModel, 
       __SupportVectorMachineModel.name(): __SupportVectorMachineModel, 
       __Scorecard.name(): __Scorecard, 
       __SequenceModel.name(): __SequenceModel, 
       __DataDictionary.name(): __DataDictionary, 
       __TimeSeriesModel.name(): __TimeSeriesModel, 
       __TreeModel.name(): __TreeModel})
    _AttributeMap.update({__version.name(): __version})


class CTD_ANON_22(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 888, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_22_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_23(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 906, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __extender = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'extender'), b'extender', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_23_extender', pyxb.binding.datatypes.string)
    __extender._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 912, 20)
    __extender._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 912, 20)
    extender = property(__extender.value, __extender.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_23_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 913, 20)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 913, 20)
    name = property(__name.value, __name.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_23_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 914, 20)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 914, 20)
    value_ = property(__value.value, __value.set, None, None)
    _HasWildcardElement = True
    _ElementMap.update({})
    _AttributeMap.update({__extender.name(): __extender, 
       __name.name(): __name, 
       __value.name(): __value})


class CTD_ANON_24(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1037, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_24_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Application = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Application'), b'Application', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_24_httpwww_dmg_orgPMML_4_2Application', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1048, 4))
    Application = property(__Application.value, __Application.set, None, None)
    __Annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Annotation'), b'Annotation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_24_httpwww_dmg_orgPMML_4_2Annotation', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1057, 4))
    Annotation = property(__Annotation.value, __Annotation.set, None, None)
    __Timestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Timestamp'), b'Timestamp', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_24_httpwww_dmg_orgPMML_4_2Timestamp', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1064, 4))
    Timestamp = property(__Timestamp.value, __Timestamp.set, None, None)
    __copyright = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'copyright'), b'copyright', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_24_copyright', pyxb.binding.datatypes.string)
    __copyright._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1044, 12)
    __copyright._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1044, 12)
    copyright = property(__copyright.value, __copyright.set, None, None)
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_24_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1045, 12)
    __description._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1045, 12)
    description = property(__description.value, __description.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Application.name(): __Application, 
       __Annotation.name(): __Annotation, 
       __Timestamp.name(): __Timestamp})
    _AttributeMap.update({__copyright.name(): __copyright, 
       __description.name(): __description})


class CTD_ANON_25(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1049, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_25_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_25_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1053, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1053, 12)
    name = property(__name.value, __name.set, None, None)
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_25_version', pyxb.binding.datatypes.string)
    __version._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1054, 12)
    __version._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1054, 12)
    version = property(__version.value, __version.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__name.name(): __name, 
       __version.name(): __version})


class CTD_ANON_26(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1058, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_26_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_27(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1065, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_27_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_28(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1072, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_28_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __ChildParent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ChildParent'), b'ChildParent', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_28_httpwww_dmg_orgPMML_4_2ChildParent', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1080, 4))
    ChildParent = property(__ChildParent.value, __ChildParent.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_28_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1077, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1077, 12)
    name = property(__name.value, __name.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __ChildParent.name(): __ChildParent})
    _AttributeMap.update({__name.name(): __name})


class CTD_ANON_29(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1104, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_29_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_30(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1111, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_30_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __row = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'row'), b'row', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_30_httpwww_dmg_orgPMML_4_2row', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1118, 4))
    row = property(__row.value, __row.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __row.name(): __row})
    _AttributeMap.update({})


class CTD_ANON_31(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1119, 8)
    _ElementMap = {}
    _AttributeMap = {}
    _HasWildcardElement = True
    _ElementMap.update({})
    _AttributeMap.update({})


class CTD_ANON_32(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1152, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_32_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __BayesInput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BayesInput'), b'BayesInput', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_32_httpwww_dmg_orgPMML_4_2BayesInput', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1159, 4))
    BayesInput = property(__BayesInput.value, __BayesInput.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __BayesInput.name(): __BayesInput})
    _AttributeMap.update({})


class CTD_ANON_33(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1160, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_33_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TargetValueStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TargetValueStats'), b'TargetValueStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_33_httpwww_dmg_orgPMML_4_2TargetValueStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1183, 4))
    TargetValueStats = property(__TargetValueStats.value, __TargetValueStats.set, None, None)
    __PairCounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PairCounts'), b'PairCounts', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_33_httpwww_dmg_orgPMML_4_2PairCounts', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1200, 4))
    PairCounts = property(__PairCounts.value, __PairCounts.set, None, None)
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), b'DerivedField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_33_httpwww_dmg_orgPMML_4_2DerivedField', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4))
    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)
    __fieldName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fieldName'), b'fieldName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_33_fieldName', pyxb.binding.datatypes.string, required=True)
    __fieldName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1171, 12)
    __fieldName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1171, 12)
    fieldName = property(__fieldName.value, __fieldName.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __TargetValueStats.name(): __TargetValueStats, 
       __PairCounts.name(): __PairCounts, 
       __DerivedField.name(): __DerivedField})
    _AttributeMap.update({__fieldName.name(): __fieldName})


class CTD_ANON_34(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1175, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_34_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TargetValueCounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCounts'), b'TargetValueCounts', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_34_httpwww_dmg_orgPMML_4_2TargetValueCounts', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1209, 4))
    TargetValueCounts = property(__TargetValueCounts.value, __TargetValueCounts.set, None, None)
    __fieldName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fieldName'), b'fieldName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_34_fieldName', pyxb.binding.datatypes.string, required=True)
    __fieldName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1180, 12)
    __fieldName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1180, 12)
    fieldName = property(__fieldName.value, __fieldName.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __TargetValueCounts.name(): __TargetValueCounts})
    _AttributeMap.update({__fieldName.name(): __fieldName})


class CTD_ANON_35(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1184, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_35_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TargetValueStat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TargetValueStat'), b'TargetValueStat', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_35_httpwww_dmg_orgPMML_4_2TargetValueStat', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1191, 4))
    TargetValueStat = property(__TargetValueStat.value, __TargetValueStat.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __TargetValueStat.name(): __TargetValueStat})
    _AttributeMap.update({})


class CTD_ANON_36(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1192, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_36_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __AnyDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution'), b'AnyDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_36_httpwww_dmg_orgPMML_4_2AnyDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2200, 4))
    AnyDistribution = property(__AnyDistribution.value, __AnyDistribution.set, None, None)
    __GaussianDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution'), b'GaussianDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_36_httpwww_dmg_orgPMML_4_2GaussianDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2209, 4))
    GaussianDistribution = property(__GaussianDistribution.value, __GaussianDistribution.set, None, None)
    __PoissonDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution'), b'PoissonDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_36_httpwww_dmg_orgPMML_4_2PoissonDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2218, 4))
    PoissonDistribution = property(__PoissonDistribution.value, __PoissonDistribution.set, None, None)
    __UniformDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution'), b'UniformDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_36_httpwww_dmg_orgPMML_4_2UniformDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2226, 4))
    UniformDistribution = property(__UniformDistribution.value, __UniformDistribution.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_36_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1197, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1197, 12)
    value_ = property(__value.value, __value.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __AnyDistribution.name(): __AnyDistribution, 
       __GaussianDistribution.name(): __GaussianDistribution, 
       __PoissonDistribution.name(): __PoissonDistribution, 
       __UniformDistribution.name(): __UniformDistribution})
    _AttributeMap.update({__value.name(): __value})


class CTD_ANON_37(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1201, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_37_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TargetValueCounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCounts'), b'TargetValueCounts', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_37_httpwww_dmg_orgPMML_4_2TargetValueCounts', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1209, 4))
    TargetValueCounts = property(__TargetValueCounts.value, __TargetValueCounts.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_37_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1206, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1206, 12)
    value_ = property(__value.value, __value.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __TargetValueCounts.name(): __TargetValueCounts})
    _AttributeMap.update({__value.name(): __value})


class CTD_ANON_38(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1210, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_38_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TargetValueCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCount'), b'TargetValueCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_38_httpwww_dmg_orgPMML_4_2TargetValueCount', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1217, 4))
    TargetValueCount = property(__TargetValueCount.value, __TargetValueCount.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __TargetValueCount.name(): __TargetValueCount})
    _AttributeMap.update({})


class CTD_ANON_39(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1227, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_39_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __OutputField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'OutputField'), b'OutputField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_39_httpwww_dmg_orgPMML_4_2OutputField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1234, 4))
    OutputField = property(__OutputField.value, __OutputField.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __OutputField.name(): __OutputField})
    _AttributeMap.update({})


class CTD_ANON_40(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1312, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_40_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Decision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Decision'), b'Decision', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_40_httpwww_dmg_orgPMML_4_2Decision', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1321, 4))
    Decision = property(__Decision.value, __Decision.set, None, None)
    __businessProblem = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'businessProblem'), b'businessProblem', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_40_businessProblem', pyxb.binding.datatypes.string)
    __businessProblem._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1317, 12)
    __businessProblem._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1317, 12)
    businessProblem = property(__businessProblem.value, __businessProblem.set, None, None)
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_40_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1318, 12)
    __description._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1318, 12)
    description = property(__description.value, __description.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Decision.name(): __Decision})
    _AttributeMap.update({__businessProblem.name(): __businessProblem, 
       __description.name(): __description})


class CTD_ANON_41(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1322, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_41_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_41_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1326, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1326, 12)
    value_ = property(__value.value, __value.set, None, None)
    __displayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayValue'), b'displayValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_41_displayValue', pyxb.binding.datatypes.string)
    __displayValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1327, 12)
    __displayValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1327, 12)
    displayValue = property(__displayValue.value, __displayValue.set, None, None)
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_41_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1328, 12)
    __description._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1328, 12)
    description = property(__description.value, __description.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__value.name(): __value, 
       __displayValue.name(): __displayValue, 
       __description.name(): __description})


class CTD_ANON_42(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1413, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_42_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Parameter'), b'Parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_42_httpwww_dmg_orgPMML_4_2Parameter', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1420, 4))
    Parameter = property(__Parameter.value, __Parameter.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Parameter.name(): __Parameter})
    _AttributeMap.update({})


class CTD_ANON_43(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1431, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_43_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Predictor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Predictor'), b'Predictor', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_43_httpwww_dmg_orgPMML_4_2Predictor', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1446, 4))
    Predictor = property(__Predictor.value, __Predictor.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Predictor.name(): __Predictor})
    _AttributeMap.update({})


class CTD_ANON_44(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1439, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_44_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Predictor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Predictor'), b'Predictor', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_44_httpwww_dmg_orgPMML_4_2Predictor', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1446, 4))
    Predictor = property(__Predictor.value, __Predictor.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Predictor.name(): __Predictor})
    _AttributeMap.update({})


class CTD_ANON_45(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1458, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_45_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Category'), b'Category', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_45_httpwww_dmg_orgPMML_4_2Category', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1465, 4))
    Category = property(__Category.value, __Category.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Category.name(): __Category})
    _AttributeMap.update({})


class CTD_ANON_46(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1466, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_46_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_46_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1470, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1470, 12)
    value_ = property(__value.value, __value.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__value.name(): __value})


class CTD_ANON_47(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1474, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_47_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __PPCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PPCell'), b'PPCell', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_47_httpwww_dmg_orgPMML_4_2PPCell', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1481, 4))
    PPCell = property(__PPCell.value, __PPCell.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __PPCell.name(): __PPCell})
    _AttributeMap.update({})


class CTD_ANON_48(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1522, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_48_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __PCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PCell'), b'PCell', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_48_httpwww_dmg_orgPMML_4_2PCell', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1529, 4))
    PCell = property(__PCell.value, __PCell.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __PCell.name(): __PCell})
    _AttributeMap.update({})


class CTD_ANON_49(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1573, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_49_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Value'), b'Value', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_49_httpwww_dmg_orgPMML_4_2Value', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2790, 4))
    Value = property(__Value.value, __Value.set, None, None)
    __Interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Interval'), b'Interval', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_49_httpwww_dmg_orgPMML_4_2Interval', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4))
    Interval = property(__Interval.value, __Interval.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Value.name(): __Value, 
       __Interval.name(): __Interval})
    _AttributeMap.update({})


class CTD_ANON_50(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1605, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_50_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __UnivariateStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'UnivariateStats'), b'UnivariateStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_50_httpwww_dmg_orgPMML_4_2UnivariateStats', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1613, 4))
    UnivariateStats = property(__UnivariateStats.value, __UnivariateStats.set, None, None)
    __MultivariateStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MultivariateStats'), b'MultivariateStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_50_httpwww_dmg_orgPMML_4_2MultivariateStats', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1693, 4))
    MultivariateStats = property(__MultivariateStats.value, __MultivariateStats.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __UnivariateStats.name(): __UnivariateStats, 
       __MultivariateStats.name(): __MultivariateStats})
    _AttributeMap.update({})


class CTD_ANON_51(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1669, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_51_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_51_httpwww_dmg_orgPMML_4_2Array', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __modalValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modalValue'), b'modalValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_51_modalValue', pyxb.binding.datatypes.string)
    __modalValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1674, 12)
    __modalValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1674, 12)
    modalValue = property(__modalValue.value, __modalValue.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({__modalValue.name(): __modalValue})


class CTD_ANON_52(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1694, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_52_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __MultivariateStat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MultivariateStat'), b'MultivariateStat', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_52_httpwww_dmg_orgPMML_4_2MultivariateStat', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1702, 4))
    MultivariateStat = property(__MultivariateStat.value, __MultivariateStat.set, None, None)
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetCategory'), b'targetCategory', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_52_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1699, 12)
    __targetCategory._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1699, 12)
    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __MultivariateStat.name(): __MultivariateStat})
    _AttributeMap.update({__targetCategory.name(): __targetCategory})


class CTD_ANON_53(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1798, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __DefineFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DefineFunction'), b'DefineFunction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_53_httpwww_dmg_orgPMML_4_2DefineFunction', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2, 4))
    DefineFunction = property(__DefineFunction.value, __DefineFunction.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_53_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), b'DerivedField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_53_httpwww_dmg_orgPMML_4_2DerivedField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4))
    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)
    _ElementMap.update({__DefineFunction.name(): __DefineFunction, 
       __Extension.name(): __Extension, 
       __DerivedField.name(): __DerivedField})
    _AttributeMap.update({})


class CTD_ANON_54(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1807, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_54_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), b'DerivedField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_54_httpwww_dmg_orgPMML_4_2DerivedField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4))
    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __DerivedField.name(): __DerivedField})
    _AttributeMap.update({})


class CTD_ANON_55(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1895, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_55_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Interval'), b'Interval', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_55_httpwww_dmg_orgPMML_4_2Interval', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4))
    Interval = property(__Interval.value, __Interval.set, None, None)
    __binValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'binValue'), b'binValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_55_binValue', pyxb.binding.datatypes.string, required=True)
    __binValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1900, 12)
    __binValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1900, 12)
    binValue = property(__binValue.value, __binValue.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Interval.name(): __Interval})
    _AttributeMap.update({__binValue.name(): __binValue})


class CTD_ANON_56(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1961, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TableLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), b'TableLocator', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_httpwww_dmg_orgPMML_4_2TableLocator', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4))
    TableLocator = property(__TableLocator.value, __TableLocator.set, None, None)
    __InlineTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), b'InlineTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_httpwww_dmg_orgPMML_4_2InlineTable', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4))
    InlineTable = property(__InlineTable.value, __InlineTable.set, None, None)
    __inField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'inField'), b'inField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_inField', pyxb.binding.datatypes.string, unicode_default=b'string')
    __inField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1969, 12)
    __inField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1969, 12)
    inField = property(__inField.value, __inField.set, None, None)
    __outField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'outField'), b'outField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_outField', pyxb.binding.datatypes.string, unicode_default=b'stem')
    __outField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1970, 12)
    __outField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1970, 12)
    outField = property(__outField.value, __outField.set, None, None)
    __regexField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'regexField'), b'regexField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_regexField', pyxb.binding.datatypes.string, unicode_default=b'regex')
    __regexField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1971, 12)
    __regexField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1971, 12)
    regexField = property(__regexField.value, __regexField.set, None, None)
    __recursive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'recursive'), b'recursive', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_recursive', pyxb.binding.datatypes.boolean, unicode_default=b'false')
    __recursive._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1972, 12)
    __recursive._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1972, 12)
    recursive = property(__recursive.value, __recursive.set, None, None)
    __isCaseSensitive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isCaseSensitive'), b'isCaseSensitive', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_isCaseSensitive', pyxb.binding.datatypes.boolean)
    __isCaseSensitive._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1973, 12)
    __isCaseSensitive._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1973, 12)
    isCaseSensitive = property(__isCaseSensitive.value, __isCaseSensitive.set, None, None)
    __maxLevenshteinDistance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maxLevenshteinDistance'), b'maxLevenshteinDistance', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_maxLevenshteinDistance', pyxb.binding.datatypes.integer)
    __maxLevenshteinDistance._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1974, 12)
    __maxLevenshteinDistance._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1974, 12)
    maxLevenshteinDistance = property(__maxLevenshteinDistance.value, __maxLevenshteinDistance.set, None, None)
    __wordSeparatorCharacterRE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'wordSeparatorCharacterRE'), b'wordSeparatorCharacterRE', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_wordSeparatorCharacterRE', pyxb.binding.datatypes.string)
    __wordSeparatorCharacterRE._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1975, 12)
    __wordSeparatorCharacterRE._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1975, 12)
    wordSeparatorCharacterRE = property(__wordSeparatorCharacterRE.value, __wordSeparatorCharacterRE.set, None, None)
    __tokenize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'tokenize'), b'tokenize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_56_tokenize', pyxb.binding.datatypes.boolean)
    __tokenize._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1976, 12)
    __tokenize._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1976, 12)
    tokenize = property(__tokenize.value, __tokenize.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __TableLocator.name(): __TableLocator, 
       __InlineTable.name(): __InlineTable})
    _AttributeMap.update({__inField.name(): __inField, 
       __outField.name(): __outField, 
       __regexField.name(): __regexField, 
       __recursive.name(): __recursive, 
       __isCaseSensitive.name(): __isCaseSensitive, 
       __maxLevenshteinDistance.name(): __maxLevenshteinDistance, 
       __wordSeparatorCharacterRE.name(): __wordSeparatorCharacterRE, 
       __tokenize.name(): __tokenize})


class CTD_ANON_57(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2030, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_57_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __NeuralInput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NeuralInput'), b'NeuralInput', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_57_httpwww_dmg_orgPMML_4_2NeuralInput', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2091, 4))
    NeuralInput = property(__NeuralInput.value, __NeuralInput.set, None, None)
    __numberOfInputs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfInputs'), b'numberOfInputs', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_57_numberOfInputs', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfInputs._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2035, 12)
    __numberOfInputs._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2035, 12)
    numberOfInputs = property(__numberOfInputs.value, __numberOfInputs.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __NeuralInput.name(): __NeuralInput})
    _AttributeMap.update({__numberOfInputs.name(): __numberOfInputs})


class CTD_ANON_58(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2053, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_58_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __NeuralOutput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NeuralOutput'), b'NeuralOutput', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_58_httpwww_dmg_orgPMML_4_2NeuralOutput', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2121, 4))
    NeuralOutput = property(__NeuralOutput.value, __NeuralOutput.set, None, None)
    __numberOfOutputs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfOutputs'), b'numberOfOutputs', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_58_numberOfOutputs', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfOutputs._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2058, 12)
    __numberOfOutputs._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2058, 12)
    numberOfOutputs = property(__numberOfOutputs.value, __numberOfOutputs.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __NeuralOutput.name(): __NeuralOutput})
    _AttributeMap.update({__numberOfOutputs.name(): __numberOfOutputs})


class CTD_ANON_59(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2175, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_59_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_59_httpwww_dmg_orgPMML_4_2FieldRef', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __AnyDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution'), b'AnyDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_59_httpwww_dmg_orgPMML_4_2AnyDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2200, 4))
    AnyDistribution = property(__AnyDistribution.value, __AnyDistribution.set, None, None)
    __GaussianDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution'), b'GaussianDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_59_httpwww_dmg_orgPMML_4_2GaussianDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2209, 4))
    GaussianDistribution = property(__GaussianDistribution.value, __GaussianDistribution.set, None, None)
    __PoissonDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution'), b'PoissonDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_59_httpwww_dmg_orgPMML_4_2PoissonDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2218, 4))
    PoissonDistribution = property(__PoissonDistribution.value, __PoissonDistribution.set, None, None)
    __UniformDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution'), b'UniformDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_59_httpwww_dmg_orgPMML_4_2UniformDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2226, 4))
    UniformDistribution = property(__UniformDistribution.value, __UniformDistribution.set, None, None)
    __CountTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CountTable'), b'CountTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_59_httpwww_dmg_orgPMML_4_2CountTable', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2242, 4))
    CountTable = property(__CountTable.value, __CountTable.set, None, None)
    __NormalizedCountTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormalizedCountTable'), b'NormalizedCountTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_59_httpwww_dmg_orgPMML_4_2NormalizedCountTable', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2243, 4))
    NormalizedCountTable = property(__NormalizedCountTable.value, __NormalizedCountTable.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __FieldRef.name(): __FieldRef, 
       __AnyDistribution.name(): __AnyDistribution, 
       __GaussianDistribution.name(): __GaussianDistribution, 
       __PoissonDistribution.name(): __PoissonDistribution, 
       __UniformDistribution.name(): __UniformDistribution, 
       __CountTable.name(): __CountTable, 
       __NormalizedCountTable.name(): __NormalizedCountTable})
    _AttributeMap.update({})


class CTD_ANON_60(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2183, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_60_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __AnyDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution'), b'AnyDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_60_httpwww_dmg_orgPMML_4_2AnyDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2200, 4))
    AnyDistribution = property(__AnyDistribution.value, __AnyDistribution.set, None, None)
    __GaussianDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution'), b'GaussianDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_60_httpwww_dmg_orgPMML_4_2GaussianDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2209, 4))
    GaussianDistribution = property(__GaussianDistribution.value, __GaussianDistribution.set, None, None)
    __PoissonDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution'), b'PoissonDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_60_httpwww_dmg_orgPMML_4_2PoissonDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2218, 4))
    PoissonDistribution = property(__PoissonDistribution.value, __PoissonDistribution.set, None, None)
    __UniformDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution'), b'UniformDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_60_httpwww_dmg_orgPMML_4_2UniformDistribution', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2226, 4))
    UniformDistribution = property(__UniformDistribution.value, __UniformDistribution.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __AnyDistribution.name(): __AnyDistribution, 
       __GaussianDistribution.name(): __GaussianDistribution, 
       __PoissonDistribution.name(): __PoissonDistribution, 
       __UniformDistribution.name(): __UniformDistribution})
    _AttributeMap.update({})


class CTD_ANON_61(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2289, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_61_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __VerificationField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'VerificationField'), b'VerificationField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_61_httpwww_dmg_orgPMML_4_2VerificationField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2296, 4))
    VerificationField = property(__VerificationField.value, __VerificationField.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __VerificationField.name(): __VerificationField})
    _AttributeMap.update({})


class CTD_ANON_62(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2297, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_62_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_62_field', pyxb.binding.datatypes.string, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2301, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2301, 12)
    field = property(__field.value, __field.set, None, None)
    __column = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'column'), b'column', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_62_column', pyxb.binding.datatypes.string)
    __column._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2302, 12)
    __column._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2302, 12)
    column = property(__column.value, __column.set, None, None)
    __precision = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'precision'), b'precision', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_62_precision', pyxb.binding.datatypes.double, unicode_default=b'1E-6')
    __precision._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2303, 12)
    __precision._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2303, 12)
    precision = property(__precision.value, __precision.set, None, None)
    __zeroThreshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'zeroThreshold'), b'zeroThreshold', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_62_zeroThreshold', pyxb.binding.datatypes.double, unicode_default=b'1E-16')
    __zeroThreshold._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2304, 12)
    __zeroThreshold._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2304, 12)
    zeroThreshold = property(__zeroThreshold.value, __zeroThreshold.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __column.name(): __column, 
       __precision.name(): __precision, 
       __zeroThreshold.name(): __zeroThreshold})


class CTD_ANON_63(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2352, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_63_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_63_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2356, 12)
    __description._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2356, 12)
    description = property(__description.value, __description.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__description.name(): __description})


class CTD_ANON_64(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2514, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_64_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Characteristic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Characteristic'), b'Characteristic', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_64_httpwww_dmg_orgPMML_4_2Characteristic', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2521, 4))
    Characteristic = property(__Characteristic.value, __Characteristic.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Characteristic.name(): __Characteristic})
    _AttributeMap.update({})


class CTD_ANON_65(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2544, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Apply'), b'Apply', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2Apply', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4))
    Apply = property(__Apply.value, __Apply.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Constant'), b'Constant', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2Constant', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4))
    Constant = property(__Constant.value, __Constant.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2FieldRef', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), b'NormContinuous', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2NormContinuous', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4))
    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), b'NormDiscrete', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2NormDiscrete', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4))
    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), b'Discretize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2Discretize', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4))
    Discretize = property(__Discretize.value, __Discretize.set, None, None)
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), b'MapValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2MapValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4))
    MapValues = property(__MapValues.value, __MapValues.set, None, None)
    __TextIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), b'TextIndex', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2TextIndex', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4))
    TextIndex = property(__TextIndex.value, __TextIndex.set, None, None)
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), b'Aggregate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_65_httpwww_dmg_orgPMML_4_2Aggregate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4))
    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)
    _ElementMap.update({__Apply.name(): __Apply, 
       __Extension.name(): __Extension, 
       __Constant.name(): __Constant, 
       __FieldRef.name(): __FieldRef, 
       __NormContinuous.name(): __NormContinuous, 
       __NormDiscrete.name(): __NormDiscrete, 
       __Discretize.name(): __Discretize, 
       __MapValues.name(): __MapValues, 
       __TextIndex.name(): __TextIndex, 
       __Aggregate.name(): __Aggregate})
    _AttributeMap.update({})


class CTD_ANON_66(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2715, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_66_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Time'), b'Time', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_66_httpwww_dmg_orgPMML_4_2Time', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4))
    Time = property(__Time.value, __Time.set, None, None)
    __SequenceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SequenceReference'), b'SequenceReference', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_66_httpwww_dmg_orgPMML_4_2SequenceReference', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2706, 4))
    SequenceReference = property(__SequenceReference.value, __SequenceReference.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Time.name(): __Time, 
       __SequenceReference.name(): __SequenceReference})
    _AttributeMap.update({})


class CTD_ANON_67(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2722, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_67_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Time'), b'Time', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_67_httpwww_dmg_orgPMML_4_2Time', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4))
    Time = property(__Time.value, __Time.set, None, None)
    __SequenceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SequenceReference'), b'SequenceReference', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_67_httpwww_dmg_orgPMML_4_2SequenceReference', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2706, 4))
    SequenceReference = property(__SequenceReference.value, __SequenceReference.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Time.name(): __Time, 
       __SequenceReference.name(): __SequenceReference})
    _AttributeMap.update({})


class CTD_ANON_68(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2729, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_68_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Taxonomy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Taxonomy'), b'Taxonomy', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_68_httpwww_dmg_orgPMML_4_2Taxonomy', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1071, 4))
    Taxonomy = property(__Taxonomy.value, __Taxonomy.set, None, None)
    __DataField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DataField'), b'DataField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_68_httpwww_dmg_orgPMML_4_2DataField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2738, 4))
    DataField = property(__DataField.value, __DataField.set, None, None)
    __numberOfFields = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfFields'), b'numberOfFields', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_68_numberOfFields', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfFields._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2735, 12)
    __numberOfFields._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2735, 12)
    numberOfFields = property(__numberOfFields.value, __numberOfFields.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Taxonomy.name(): __Taxonomy, 
       __DataField.name(): __DataField})
    _AttributeMap.update({__numberOfFields.name(): __numberOfFields})


class CTD_ANON_69(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3034, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_69_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __MiningField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningField'), b'MiningField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_69_httpwww_dmg_orgPMML_4_2MiningField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3041, 4))
    MiningField = property(__MiningField.value, __MiningField.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __MiningField.name(): __MiningField})
    _AttributeMap.update({})


class CTD_ANON_70(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3094, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_70_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __PredictiveModelQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PredictiveModelQuality'), b'PredictiveModelQuality', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_70_httpwww_dmg_orgPMML_4_2PredictiveModelQuality', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3105, 4))
    PredictiveModelQuality = property(__PredictiveModelQuality.value, __PredictiveModelQuality.set, None, None)
    __ClusteringModelQuality = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModelQuality'), b'ClusteringModelQuality', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_70_httpwww_dmg_orgPMML_4_2ClusteringModelQuality', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3142, 4))
    ClusteringModelQuality = property(__ClusteringModelQuality.value, __ClusteringModelQuality.set, None, None)
    __Correlations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Correlations'), b'Correlations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_70_httpwww_dmg_orgPMML_4_2Correlations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3268, 4))
    Correlations = property(__Correlations.value, __Correlations.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __PredictiveModelQuality.name(): __PredictiveModelQuality, 
       __ClusteringModelQuality.name(): __ClusteringModelQuality, 
       __Correlations.name(): __Correlations})
    _AttributeMap.update({})


class CTD_ANON_71(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3163, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_71_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __LiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph'), b'LiftGraph', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_71_httpwww_dmg_orgPMML_4_2LiftGraph', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3186, 4))
    LiftGraph = property(__LiftGraph.value, __LiftGraph.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __LiftGraph.name(): __LiftGraph})
    _AttributeMap.update({})


class CTD_ANON_72(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3171, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_72_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __LiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph'), b'LiftGraph', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_72_httpwww_dmg_orgPMML_4_2LiftGraph', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3186, 4))
    LiftGraph = property(__LiftGraph.value, __LiftGraph.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __LiftGraph.name(): __LiftGraph})
    _AttributeMap.update({})


class CTD_ANON_73(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3179, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_73_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __LiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph'), b'LiftGraph', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_73_httpwww_dmg_orgPMML_4_2LiftGraph', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3186, 4))
    LiftGraph = property(__LiftGraph.value, __LiftGraph.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __LiftGraph.name(): __LiftGraph})
    _AttributeMap.update({})


class CTD_ANON_74(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3187, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_74_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __XCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'XCoordinates'), b'XCoordinates', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_74_httpwww_dmg_orgPMML_4_2XCoordinates', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3197, 4))
    XCoordinates = property(__XCoordinates.value, __XCoordinates.set, None, None)
    __YCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'YCoordinates'), b'YCoordinates', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_74_httpwww_dmg_orgPMML_4_2YCoordinates', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3205, 4))
    YCoordinates = property(__YCoordinates.value, __YCoordinates.set, None, None)
    __BoundaryValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValues'), b'BoundaryValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_74_httpwww_dmg_orgPMML_4_2BoundaryValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3213, 4))
    BoundaryValues = property(__BoundaryValues.value, __BoundaryValues.set, None, None)
    __BoundaryValueMeans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValueMeans'), b'BoundaryValueMeans', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_74_httpwww_dmg_orgPMML_4_2BoundaryValueMeans', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3221, 4))
    BoundaryValueMeans = property(__BoundaryValueMeans.value, __BoundaryValueMeans.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __XCoordinates.name(): __XCoordinates, 
       __YCoordinates.name(): __YCoordinates, 
       __BoundaryValues.name(): __BoundaryValues, 
       __BoundaryValueMeans.name(): __BoundaryValueMeans})
    _AttributeMap.update({})


class CTD_ANON_75(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3198, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_75_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_75_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({})


class CTD_ANON_76(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3206, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_76_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_76_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({})


class CTD_ANON_77(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3214, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_77_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_77_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({})


class CTD_ANON_78(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3222, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_78_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_78_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({})


class CTD_ANON_79(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3230, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_79_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __ROCGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ROCGraph'), b'ROCGraph', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_79_httpwww_dmg_orgPMML_4_2ROCGraph', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3241, 4))
    ROCGraph = property(__ROCGraph.value, __ROCGraph.set, None, None)
    __positiveTargetFieldValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'positiveTargetFieldValue'), b'positiveTargetFieldValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_79_positiveTargetFieldValue', pyxb.binding.datatypes.string, required=True)
    __positiveTargetFieldValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3235, 12)
    __positiveTargetFieldValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3235, 12)
    positiveTargetFieldValue = property(__positiveTargetFieldValue.value, __positiveTargetFieldValue.set, None, None)
    __positiveTargetFieldDisplayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'positiveTargetFieldDisplayValue'), b'positiveTargetFieldDisplayValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_79_positiveTargetFieldDisplayValue', pyxb.binding.datatypes.string)
    __positiveTargetFieldDisplayValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3236, 12)
    __positiveTargetFieldDisplayValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3236, 12)
    positiveTargetFieldDisplayValue = property(__positiveTargetFieldDisplayValue.value, __positiveTargetFieldDisplayValue.set, None, None)
    __negativeTargetFieldValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'negativeTargetFieldValue'), b'negativeTargetFieldValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_79_negativeTargetFieldValue', pyxb.binding.datatypes.string)
    __negativeTargetFieldValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3237, 12)
    __negativeTargetFieldValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3237, 12)
    negativeTargetFieldValue = property(__negativeTargetFieldValue.value, __negativeTargetFieldValue.set, None, None)
    __negativeTargetFieldDisplayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'negativeTargetFieldDisplayValue'), b'negativeTargetFieldDisplayValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_79_negativeTargetFieldDisplayValue', pyxb.binding.datatypes.string)
    __negativeTargetFieldDisplayValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3238, 12)
    __negativeTargetFieldDisplayValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3238, 12)
    negativeTargetFieldDisplayValue = property(__negativeTargetFieldDisplayValue.value, __negativeTargetFieldDisplayValue.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __ROCGraph.name(): __ROCGraph})
    _AttributeMap.update({__positiveTargetFieldValue.name(): __positiveTargetFieldValue, 
       __positiveTargetFieldDisplayValue.name(): __positiveTargetFieldDisplayValue, 
       __negativeTargetFieldValue.name(): __negativeTargetFieldValue, 
       __negativeTargetFieldDisplayValue.name(): __negativeTargetFieldDisplayValue})


class CTD_ANON_80(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3242, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_80_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __XCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'XCoordinates'), b'XCoordinates', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_80_httpwww_dmg_orgPMML_4_2XCoordinates', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3197, 4))
    XCoordinates = property(__XCoordinates.value, __XCoordinates.set, None, None)
    __YCoordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'YCoordinates'), b'YCoordinates', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_80_httpwww_dmg_orgPMML_4_2YCoordinates', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3205, 4))
    YCoordinates = property(__YCoordinates.value, __YCoordinates.set, None, None)
    __BoundaryValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValues'), b'BoundaryValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_80_httpwww_dmg_orgPMML_4_2BoundaryValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3213, 4))
    BoundaryValues = property(__BoundaryValues.value, __BoundaryValues.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __XCoordinates.name(): __XCoordinates, 
       __YCoordinates.name(): __YCoordinates, 
       __BoundaryValues.name(): __BoundaryValues})
    _AttributeMap.update({})


class CTD_ANON_81(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3252, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_81_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), b'Matrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_81_httpwww_dmg_orgPMML_4_2Matrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4))
    Matrix = property(__Matrix.value, __Matrix.set, None, None)
    __ClassLabels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ClassLabels'), b'ClassLabels', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_81_httpwww_dmg_orgPMML_4_2ClassLabels', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3260, 4))
    ClassLabels = property(__ClassLabels.value, __ClassLabels.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Matrix.name(): __Matrix, 
       __ClassLabels.name(): __ClassLabels})
    _AttributeMap.update({})


class CTD_ANON_82(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3261, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_82_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_82_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({})


class CTD_ANON_83(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3269, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_83_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __CorrelationFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CorrelationFields'), b'CorrelationFields', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_83_httpwww_dmg_orgPMML_4_2CorrelationFields', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3278, 4))
    CorrelationFields = property(__CorrelationFields.value, __CorrelationFields.set, None, None)
    __CorrelationValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CorrelationValues'), b'CorrelationValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_83_httpwww_dmg_orgPMML_4_2CorrelationValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3286, 4))
    CorrelationValues = property(__CorrelationValues.value, __CorrelationValues.set, None, None)
    __CorrelationMethods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CorrelationMethods'), b'CorrelationMethods', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_83_httpwww_dmg_orgPMML_4_2CorrelationMethods', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3294, 4))
    CorrelationMethods = property(__CorrelationMethods.value, __CorrelationMethods.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __CorrelationFields.name(): __CorrelationFields, 
       __CorrelationValues.name(): __CorrelationValues, 
       __CorrelationMethods.name(): __CorrelationMethods})
    _AttributeMap.update({})


class CTD_ANON_84(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3279, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_84_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_84_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({})


class CTD_ANON_85(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3287, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_85_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), b'Matrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_85_httpwww_dmg_orgPMML_4_2Matrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4))
    Matrix = property(__Matrix.value, __Matrix.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Matrix.name(): __Matrix})
    _AttributeMap.update({})


class CTD_ANON_86(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3295, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_86_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), b'Matrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_86_httpwww_dmg_orgPMML_4_2Matrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4))
    Matrix = property(__Matrix.value, __Matrix.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Matrix.name(): __Matrix})
    _AttributeMap.update({})


class CTD_ANON_87(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3423, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_87_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_88(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3430, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_88_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({})


class CTD_ANON_89(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __ParameterField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ParameterField'), b'ParameterField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2ParameterField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 14, 4))
    ParameterField = property(__ParameterField.value, __ParameterField.set, None, None)
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Apply'), b'Apply', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2Apply', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4))
    Apply = property(__Apply.value, __Apply.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Constant'), b'Constant', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2Constant', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4))
    Constant = property(__Constant.value, __Constant.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2FieldRef', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), b'NormContinuous', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2NormContinuous', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4))
    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), b'NormDiscrete', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2NormDiscrete', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4))
    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), b'Discretize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2Discretize', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4))
    Discretize = property(__Discretize.value, __Discretize.set, None, None)
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), b'MapValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2MapValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4))
    MapValues = property(__MapValues.value, __MapValues.set, None, None)
    __TextIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), b'TextIndex', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2TextIndex', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4))
    TextIndex = property(__TextIndex.value, __TextIndex.set, None, None)
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), b'Aggregate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_httpwww_dmg_orgPMML_4_2Aggregate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4))
    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 9, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 9, 12)
    name = property(__name.value, __name.set, None, None)
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'optype'), b'optype', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_optype', OPTYPE, required=True)
    __optype._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 10, 12)
    __optype._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 10, 12)
    optype = property(__optype.value, __optype.set, None, None)
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_89_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 11, 12)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 11, 12)
    dataType = property(__dataType.value, __dataType.set, None, None)
    _ElementMap.update({__ParameterField.name(): __ParameterField, 
       __Apply.name(): __Apply, 
       __Extension.name(): __Extension, 
       __Constant.name(): __Constant, 
       __FieldRef.name(): __FieldRef, 
       __NormContinuous.name(): __NormContinuous, 
       __NormDiscrete.name(): __NormDiscrete, 
       __Discretize.name(): __Discretize, 
       __MapValues.name(): __MapValues, 
       __TextIndex.name(): __TextIndex, 
       __Aggregate.name(): __Aggregate})
    _AttributeMap.update({__name.name(): __name, 
       __optype.name(): __optype, 
       __dataType.name(): __dataType})


class CTD_ANON_90(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 15, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_90_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 16, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 16, 12)
    name = property(__name.value, __name.set, None, None)
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'optype'), b'optype', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_90_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 17, 12)
    __optype._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 17, 12)
    optype = property(__optype.value, __optype.set, None, None)
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_90_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 18, 12)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 18, 12)
    dataType = property(__dataType.value, __dataType.set, None, None)
    _ElementMap.update({})
    _AttributeMap.update({__name.name(): __name, 
       __optype.name(): __optype, 
       __dataType.name(): __dataType})


class CTD_ANON_91(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 22, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Apply'), b'Apply', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2Apply', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4))
    Apply = property(__Apply.value, __Apply.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Constant'), b'Constant', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2Constant', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4))
    Constant = property(__Constant.value, __Constant.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2FieldRef', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), b'NormContinuous', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2NormContinuous', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4))
    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), b'NormDiscrete', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2NormDiscrete', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4))
    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), b'Discretize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2Discretize', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4))
    Discretize = property(__Discretize.value, __Discretize.set, None, None)
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), b'MapValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2MapValues', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4))
    MapValues = property(__MapValues.value, __MapValues.set, None, None)
    __TextIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), b'TextIndex', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2TextIndex', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4))
    TextIndex = property(__TextIndex.value, __TextIndex.set, None, None)
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), b'Aggregate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_httpwww_dmg_orgPMML_4_2Aggregate', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4))
    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)
    __function = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'function'), b'function', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_function', pyxb.binding.datatypes.string, required=True)
    __function._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 27, 12)
    __function._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 27, 12)
    function = property(__function.value, __function.set, None, None)
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mapMissingTo'), b'mapMissingTo', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_mapMissingTo', pyxb.binding.datatypes.string)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 28, 12)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 28, 12)
    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultValue'), b'defaultValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_defaultValue', pyxb.binding.datatypes.string)
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 29, 12)
    __defaultValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 29, 12)
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)
    __invalidValueTreatment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'invalidValueTreatment'), b'invalidValueTreatment', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_91_invalidValueTreatment', INVALID_VALUE_TREATMENT_METHOD, unicode_default=b'returnInvalid')
    __invalidValueTreatment._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 30, 12)
    __invalidValueTreatment._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 30, 12)
    invalidValueTreatment = property(__invalidValueTreatment.value, __invalidValueTreatment.set, None, None)
    _ElementMap.update({__Apply.name(): __Apply, 
       __Extension.name(): __Extension, 
       __Constant.name(): __Constant, 
       __FieldRef.name(): __FieldRef, 
       __NormContinuous.name(): __NormContinuous, 
       __NormDiscrete.name(): __NormDiscrete, 
       __Discretize.name(): __Discretize, 
       __MapValues.name(): __MapValues, 
       __TextIndex.name(): __TextIndex, 
       __Aggregate.name(): __Aggregate})
    _AttributeMap.update({__function.name(): __function, 
       __mapMissingTo.name(): __mapMissingTo, 
       __defaultValue.name(): __defaultValue, 
       __invalidValueTreatment.name(): __invalidValueTreatment})


class CTD_ANON_92(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 34, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Segmentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Segmentation'), b'Segmentation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2Segmentation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 57, 4))
    Segmentation = property(__Segmentation.value, __Segmentation.set, None, None)
    __Regression = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Regression'), b'Regression', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2Regression', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 113, 4))
    Regression = property(__Regression.value, __Regression.set, None, None)
    __DecisionTree = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DecisionTree'), b'DecisionTree', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2DecisionTree', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 130, 4))
    DecisionTree = property(__DecisionTree.value, __DecisionTree.set, None, None)
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 51, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 51, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 52, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 52, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 53, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 53, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_92_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 54, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 54, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Segmentation.name(): __Segmentation, 
       __Regression.name(): __Regression, 
       __DecisionTree.name(): __DecisionTree, 
       __Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __isScorable.name(): __isScorable})


class CTD_ANON_93(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 58, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Segment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Segment'), b'Segment', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_93_httpwww_dmg_orgPMML_4_2Segment', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 66, 4))
    Segment = property(__Segment.value, __Segment.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_93_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __multipleModelMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'multipleModelMethod'), b'multipleModelMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_93_multipleModelMethod', MULTIPLE_MODEL_METHOD, required=True)
    __multipleModelMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 63, 12)
    __multipleModelMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 63, 12)
    multipleModelMethod = property(__multipleModelMethod.value, __multipleModelMethod.set, None, None)
    _ElementMap.update({__Segment.name(): __Segment, 
       __Extension.name(): __Extension})
    _AttributeMap.update({__multipleModelMethod.name(): __multipleModelMethod})


class CTD_ANON_94(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 67, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __MiningModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningModel'), b'MiningModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2MiningModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 33, 4))
    MiningModel = property(__MiningModel.value, __MiningModel.set, None, None)
    __AssociationModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'AssociationModel'), b'AssociationModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2AssociationModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 157, 4))
    AssociationModel = property(__AssociationModel.value, __AssociationModel.set, None, None)
    __RuleSetModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RuleSetModel'), b'RuleSetModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2RuleSetModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 231, 4))
    RuleSetModel = property(__RuleSetModel.value, __RuleSetModel.set, None, None)
    __ClusteringModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModel'), b'ClusteringModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2ClusteringModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 311, 4))
    ClusteringModel = property(__ClusteringModel.value, __ClusteringModel.set, None, None)
    __RegressionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RegressionModel'), b'RegressionModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2RegressionModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 520, 4))
    RegressionModel = property(__RegressionModel.value, __RegressionModel.set, None, None)
    __TextModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextModel'), b'TextModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2TextModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 606, 4))
    TextModel = property(__TextModel.value, __TextModel.set, None, None)
    __NearestNeighborModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NearestNeighborModel'), b'NearestNeighborModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2NearestNeighborModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 719, 4))
    NearestNeighborModel = property(__NearestNeighborModel.value, __NearestNeighborModel.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __NaiveBayesModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NaiveBayesModel'), b'NaiveBayesModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2NaiveBayesModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1129, 4))
    NaiveBayesModel = property(__NaiveBayesModel.value, __NaiveBayesModel.set, None, None)
    __GeneralRegressionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'GeneralRegressionModel'), b'GeneralRegressionModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2GeneralRegressionModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1344, 4))
    GeneralRegressionModel = property(__GeneralRegressionModel.value, __GeneralRegressionModel.set, None, None)
    __NeuralNetwork = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NeuralNetwork'), b'NeuralNetwork', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2NeuralNetwork', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2001, 4))
    NeuralNetwork = property(__NeuralNetwork.value, __NeuralNetwork.set, None, None)
    __BaselineModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BaselineModel'), b'BaselineModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2BaselineModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2130, 4))
    BaselineModel = property(__BaselineModel.value, __BaselineModel.set, None, None)
    __SupportVectorMachineModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachineModel'), b'SupportVectorMachineModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2SupportVectorMachineModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2307, 4))
    SupportVectorMachineModel = property(__SupportVectorMachineModel.value, __SupportVectorMachineModel.set, None, None)
    __Scorecard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Scorecard'), b'Scorecard', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2Scorecard', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2471, 4))
    Scorecard = property(__Scorecard.value, __Scorecard.set, None, None)
    __SequenceModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SequenceModel'), b'SequenceModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2SequenceModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2551, 4))
    SequenceModel = property(__SequenceModel.value, __SequenceModel.set, None, None)
    __TimeSeriesModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TimeSeriesModel'), b'TimeSeriesModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2TimeSeriesModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2827, 4))
    TimeSeriesModel = property(__TimeSeriesModel.value, __TimeSeriesModel.set, None, None)
    __TreeModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TreeModel'), b'TreeModel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2TreeModel', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3302, 4))
    TreeModel = property(__TreeModel.value, __TreeModel.set, None, None)
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), b'SimplePredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2SimplePredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4))
    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), b'CompoundPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2CompoundPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4))
    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), b'SimpleSetPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2SimpleSetPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4))
    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'True'), b'True_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2True', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4))
    True_ = property(__True.value, __True.set, None, None)
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'False'), b'False_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_httpwww_dmg_orgPMML_4_2False', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4))
    False_ = property(__False.value, __False.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 73, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 73, 12)
    id = property(__id.value, __id.set, None, None)
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'weight'), b'weight', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_94_weight', NUMBER, unicode_default=b'1')
    __weight._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 74, 12)
    __weight._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 74, 12)
    weight = property(__weight.value, __weight.set, None, None)
    _ElementMap.update({__MiningModel.name(): __MiningModel, 
       __AssociationModel.name(): __AssociationModel, 
       __RuleSetModel.name(): __RuleSetModel, 
       __ClusteringModel.name(): __ClusteringModel, 
       __RegressionModel.name(): __RegressionModel, 
       __TextModel.name(): __TextModel, 
       __NearestNeighborModel.name(): __NearestNeighborModel, 
       __Extension.name(): __Extension, 
       __NaiveBayesModel.name(): __NaiveBayesModel, 
       __GeneralRegressionModel.name(): __GeneralRegressionModel, 
       __NeuralNetwork.name(): __NeuralNetwork, 
       __BaselineModel.name(): __BaselineModel, 
       __SupportVectorMachineModel.name(): __SupportVectorMachineModel, 
       __Scorecard.name(): __Scorecard, 
       __SequenceModel.name(): __SequenceModel, 
       __TimeSeriesModel.name(): __TimeSeriesModel, 
       __TreeModel.name(): __TreeModel, 
       __SimplePredicate.name(): __SimplePredicate, 
       __CompoundPredicate.name(): __CompoundPredicate, 
       __SimpleSetPredicate.name(): __SimpleSetPredicate, 
       __True.name(): __True, 
       __False.name(): __False})
    _AttributeMap.update({__id.name(): __id, 
       __weight.name(): __weight})


class CTD_ANON_95(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 101, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_95_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_95_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 105, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 105, 12)
    name = property(__name.value, __name.set, None, None)
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayName'), b'displayName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_95_displayName', pyxb.binding.datatypes.string)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 106, 12)
    __displayName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 106, 12)
    displayName = property(__displayName.value, __displayName.set, None, None)
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'optype'), b'optype', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_95_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 107, 12)
    __optype._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 107, 12)
    optype = property(__optype.value, __optype.set, None, None)
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_95_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 108, 12)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 108, 12)
    dataType = property(__dataType.value, __dataType.set, None, None)
    __feature = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'feature'), b'feature', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_95_feature', RESULT_FEATURE)
    __feature._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 109, 12)
    __feature._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 109, 12)
    feature = property(__feature.value, __feature.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_95_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 110, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 110, 12)
    value_ = property(__value.value, __value.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__name.name(): __name, 
       __displayName.name(): __displayName, 
       __optype.name(): __optype, 
       __dataType.name(): __dataType, 
       __feature.name(): __feature, 
       __value.name(): __value})


class CTD_ANON_96(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 114, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __ResultField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ResultField'), b'ResultField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_httpwww_dmg_orgPMML_4_2ResultField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 100, 4))
    ResultField = property(__ResultField.value, __ResultField.set, None, None)
    __RegressionTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RegressionTable'), b'RegressionTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_httpwww_dmg_orgPMML_4_2RegressionTable', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 564, 4))
    RegressionTable = property(__RegressionTable.value, __RegressionTable.set, None, None)
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 124, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 124, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 125, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 125, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 126, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 126, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __normalizationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'normalizationMethod'), b'normalizationMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_96_normalizationMethod', REGRESSIONNORMALIZATIONMETHOD, unicode_default=b'none')
    __normalizationMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 127, 12)
    __normalizationMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 127, 12)
    normalizationMethod = property(__normalizationMethod.value, __normalizationMethod.set, None, None)
    _ElementMap.update({__ResultField.name(): __ResultField, 
       __RegressionTable.name(): __RegressionTable, 
       __Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __normalizationMethod.name(): __normalizationMethod})


class CTD_ANON_97(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 131, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __ResultField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ResultField'), b'ResultField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_httpwww_dmg_orgPMML_4_2ResultField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 100, 4))
    ResultField = property(__ResultField.value, __ResultField.set, None, None)
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __Node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Node'), b'Node', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_httpwww_dmg_orgPMML_4_2Node', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3333, 4))
    Node = property(__Node.value, __Node.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 141, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 141, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 142, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 142, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 143, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 143, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __missingValueStrategy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'missingValueStrategy'), b'missingValueStrategy', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_missingValueStrategy', MISSING_VALUE_STRATEGY, unicode_default=b'none')
    __missingValueStrategy._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 144, 12)
    __missingValueStrategy._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 144, 12)
    missingValueStrategy = property(__missingValueStrategy.value, __missingValueStrategy.set, None, None)
    __missingValuePenalty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'missingValuePenalty'), b'missingValuePenalty', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_missingValuePenalty', PROB_NUMBER, unicode_default=b'1.0')
    __missingValuePenalty._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 145, 12)
    __missingValuePenalty._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 145, 12)
    missingValuePenalty = property(__missingValuePenalty.value, __missingValuePenalty.set, None, None)
    __noTrueChildStrategy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'noTrueChildStrategy'), b'noTrueChildStrategy', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_noTrueChildStrategy', NO_TRUE_CHILD_STRATEGY, unicode_default=b'returnNullPrediction')
    __noTrueChildStrategy._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 146, 12)
    __noTrueChildStrategy._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 146, 12)
    noTrueChildStrategy = property(__noTrueChildStrategy.value, __noTrueChildStrategy.set, None, None)
    __splitCharacteristic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'splitCharacteristic'), b'splitCharacteristic', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_97_splitCharacteristic', STD_ANON, unicode_default=b'multiSplit')
    __splitCharacteristic._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 147, 12)
    __splitCharacteristic._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 147, 12)
    splitCharacteristic = property(__splitCharacteristic.value, __splitCharacteristic.set, None, None)
    _ElementMap.update({__ResultField.name(): __ResultField, 
       __Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __Node.name(): __Node})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __missingValueStrategy.name(): __missingValueStrategy, 
       __missingValuePenalty.name(): __missingValuePenalty, 
       __noTrueChildStrategy.name(): __noTrueChildStrategy, 
       __splitCharacteristic.name(): __splitCharacteristic})


class CTD_ANON_98(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 158, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Item'), b'Item', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2Item', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 186, 4))
    Item = property(__Item.value, __Item.set, None, None)
    __Itemset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Itemset'), b'Itemset', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2Itemset', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 197, 4))
    Itemset = property(__Itemset.value, __Itemset.set, None, None)
    __AssociationRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'AssociationRule'), b'AssociationRule', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2AssociationRule', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 216, 4))
    AssociationRule = property(__AssociationRule.value, __AssociationRule.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 171, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 171, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 172, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 172, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 173, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 173, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __numberOfTransactions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfTransactions'), b'numberOfTransactions', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_numberOfTransactions', INT_NUMBER, required=True)
    __numberOfTransactions._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 174, 12)
    __numberOfTransactions._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 174, 12)
    numberOfTransactions = property(__numberOfTransactions.value, __numberOfTransactions.set, None, None)
    __maxNumberOfItemsPerTA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maxNumberOfItemsPerTA'), b'maxNumberOfItemsPerTA', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_maxNumberOfItemsPerTA', INT_NUMBER)
    __maxNumberOfItemsPerTA._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 175, 12)
    __maxNumberOfItemsPerTA._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 175, 12)
    maxNumberOfItemsPerTA = property(__maxNumberOfItemsPerTA.value, __maxNumberOfItemsPerTA.set, None, None)
    __avgNumberOfItemsPerTA = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'avgNumberOfItemsPerTA'), b'avgNumberOfItemsPerTA', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_avgNumberOfItemsPerTA', REAL_NUMBER)
    __avgNumberOfItemsPerTA._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 176, 12)
    __avgNumberOfItemsPerTA._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 176, 12)
    avgNumberOfItemsPerTA = property(__avgNumberOfItemsPerTA.value, __avgNumberOfItemsPerTA.set, None, None)
    __minimumSupport = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumSupport'), b'minimumSupport', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_minimumSupport', PROB_NUMBER, required=True)
    __minimumSupport._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 177, 12)
    __minimumSupport._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 177, 12)
    minimumSupport = property(__minimumSupport.value, __minimumSupport.set, None, None)
    __minimumConfidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumConfidence'), b'minimumConfidence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_minimumConfidence', PROB_NUMBER, required=True)
    __minimumConfidence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 178, 12)
    __minimumConfidence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 178, 12)
    minimumConfidence = property(__minimumConfidence.value, __minimumConfidence.set, None, None)
    __lengthLimit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'lengthLimit'), b'lengthLimit', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_lengthLimit', INT_NUMBER)
    __lengthLimit._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 179, 12)
    __lengthLimit._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 179, 12)
    lengthLimit = property(__lengthLimit.value, __lengthLimit.set, None, None)
    __numberOfItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfItems'), b'numberOfItems', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_numberOfItems', INT_NUMBER, required=True)
    __numberOfItems._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 180, 12)
    __numberOfItems._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 180, 12)
    numberOfItems = property(__numberOfItems.value, __numberOfItems.set, None, None)
    __numberOfItemsets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfItemsets'), b'numberOfItemsets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_numberOfItemsets', INT_NUMBER, required=True)
    __numberOfItemsets._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 181, 12)
    __numberOfItemsets._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 181, 12)
    numberOfItemsets = property(__numberOfItemsets.value, __numberOfItemsets.set, None, None)
    __numberOfRules = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfRules'), b'numberOfRules', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_numberOfRules', INT_NUMBER, required=True)
    __numberOfRules._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 182, 12)
    __numberOfRules._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 182, 12)
    numberOfRules = property(__numberOfRules.value, __numberOfRules.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_98_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 183, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 183, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Item.name(): __Item, 
       __Itemset.name(): __Itemset, 
       __AssociationRule.name(): __AssociationRule, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __numberOfTransactions.name(): __numberOfTransactions, 
       __maxNumberOfItemsPerTA.name(): __maxNumberOfItemsPerTA, 
       __avgNumberOfItemsPerTA.name(): __avgNumberOfItemsPerTA, 
       __minimumSupport.name(): __minimumSupport, 
       __minimumConfidence.name(): __minimumConfidence, 
       __lengthLimit.name(): __lengthLimit, 
       __numberOfItems.name(): __numberOfItems, 
       __numberOfItemsets.name(): __numberOfItemsets, 
       __numberOfRules.name(): __numberOfRules, 
       __isScorable.name(): __isScorable})


class CTD_ANON_99(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 187, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_99_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_99_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 191, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 191, 12)
    id = property(__id.value, __id.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_99_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 192, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 192, 12)
    value_ = property(__value.value, __value.set, None, None)
    __mappedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mappedValue'), b'mappedValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_99_mappedValue', pyxb.binding.datatypes.string)
    __mappedValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 193, 12)
    __mappedValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 193, 12)
    mappedValue = property(__mappedValue.value, __mappedValue.set, None, None)
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'weight'), b'weight', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_99_weight', REAL_NUMBER)
    __weight._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 194, 12)
    __weight._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 194, 12)
    weight = property(__weight.value, __weight.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__id.name(): __id, 
       __value.name(): __value, 
       __mappedValue.name(): __mappedValue, 
       __weight.name(): __weight})


class CTD_ANON_100(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 198, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __ItemRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ItemRef'), b'ItemRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_100_httpwww_dmg_orgPMML_4_2ItemRef', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 208, 4))
    ItemRef = property(__ItemRef.value, __ItemRef.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_100_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_100_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 203, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 203, 12)
    id = property(__id.value, __id.set, None, None)
    __support = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'support'), b'support', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_100_support', PROB_NUMBER)
    __support._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 204, 12)
    __support._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 204, 12)
    support = property(__support.value, __support.set, None, None)
    __numberOfItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfItems'), b'numberOfItems', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_100_numberOfItems', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfItems._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 205, 12)
    __numberOfItems._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 205, 12)
    numberOfItems = property(__numberOfItems.value, __numberOfItems.set, None, None)
    _ElementMap.update({__ItemRef.name(): __ItemRef, 
       __Extension.name(): __Extension})
    _AttributeMap.update({__id.name(): __id, 
       __support.name(): __support, 
       __numberOfItems.name(): __numberOfItems})


class CTD_ANON_101(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 217, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __antecedent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'antecedent'), b'antecedent', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_antecedent', pyxb.binding.datatypes.string, required=True)
    __antecedent._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 221, 12)
    __antecedent._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 221, 12)
    antecedent = property(__antecedent.value, __antecedent.set, None, None)
    __consequent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'consequent'), b'consequent', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_consequent', pyxb.binding.datatypes.string, required=True)
    __consequent._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 222, 12)
    __consequent._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 222, 12)
    consequent = property(__consequent.value, __consequent.set, None, None)
    __support = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'support'), b'support', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_support', PROB_NUMBER, required=True)
    __support._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 223, 12)
    __support._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 223, 12)
    support = property(__support.value, __support.set, None, None)
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'confidence'), b'confidence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_confidence', PROB_NUMBER, required=True)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 224, 12)
    __confidence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 224, 12)
    confidence = property(__confidence.value, __confidence.set, None, None)
    __lift = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'lift'), b'lift', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_lift', pyxb.binding.datatypes.float)
    __lift._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 225, 12)
    __lift._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 225, 12)
    lift = property(__lift.value, __lift.set, None, None)
    __leverage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'leverage'), b'leverage', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_leverage', pyxb.binding.datatypes.float)
    __leverage._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 226, 12)
    __leverage._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 226, 12)
    leverage = property(__leverage.value, __leverage.set, None, None)
    __affinity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'affinity'), b'affinity', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_affinity', PROB_NUMBER)
    __affinity._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 227, 12)
    __affinity._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 227, 12)
    affinity = property(__affinity.value, __affinity.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_101_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 228, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 228, 12)
    id = property(__id.value, __id.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__antecedent.name(): __antecedent, 
       __consequent.name(): __consequent, 
       __support.name(): __support, 
       __confidence.name(): __confidence, 
       __lift.name(): __lift, 
       __leverage.name(): __leverage, 
       __affinity.name(): __affinity, 
       __id.name(): __id})


class CTD_ANON_102(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 232, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __RuleSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RuleSet'), b'RuleSet', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2RuleSet', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 251, 4))
    RuleSet = property(__RuleSet.value, __RuleSet.set, None, None)
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 245, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 245, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 246, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 246, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 247, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 247, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_102_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 248, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 248, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__RuleSet.name(): __RuleSet, 
       __Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __isScorable.name(): __isScorable})


class CTD_ANON_103(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 252, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __RuleSelectionMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RuleSelectionMethod'), b'RuleSelectionMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_httpwww_dmg_orgPMML_4_2RuleSelectionMethod', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 265, 4))
    RuleSelectionMethod = property(__RuleSelectionMethod.value, __RuleSelectionMethod.set, None, None)
    __SimpleRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimpleRule'), b'SimpleRule', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_httpwww_dmg_orgPMML_4_2SimpleRule', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 287, 4))
    SimpleRule = property(__SimpleRule.value, __SimpleRule.set, None, None)
    __CompoundRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CompoundRule'), b'CompoundRule', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_httpwww_dmg_orgPMML_4_2CompoundRule', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 302, 4))
    CompoundRule = property(__CompoundRule.value, __CompoundRule.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __ScoreDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution'), b'ScoreDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_httpwww_dmg_orgPMML_4_2ScoreDistribution', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3436, 4))
    ScoreDistribution = property(__ScoreDistribution.value, __ScoreDistribution.set, None, None)
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'recordCount'), b'recordCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_recordCount', NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 259, 12)
    __recordCount._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 259, 12)
    recordCount = property(__recordCount.value, __recordCount.set, None, None)
    __nbCorrect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'nbCorrect'), b'nbCorrect', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_nbCorrect', NUMBER)
    __nbCorrect._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 260, 12)
    __nbCorrect._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 260, 12)
    nbCorrect = property(__nbCorrect.value, __nbCorrect.set, None, None)
    __defaultScore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultScore'), b'defaultScore', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_defaultScore', pyxb.binding.datatypes.string)
    __defaultScore._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 261, 12)
    __defaultScore._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 261, 12)
    defaultScore = property(__defaultScore.value, __defaultScore.set, None, None)
    __defaultConfidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultConfidence'), b'defaultConfidence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_103_defaultConfidence', NUMBER)
    __defaultConfidence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 262, 12)
    __defaultConfidence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 262, 12)
    defaultConfidence = property(__defaultConfidence.value, __defaultConfidence.set, None, None)
    _ElementMap.update({__RuleSelectionMethod.name(): __RuleSelectionMethod, 
       __SimpleRule.name(): __SimpleRule, 
       __CompoundRule.name(): __CompoundRule, 
       __Extension.name(): __Extension, 
       __ScoreDistribution.name(): __ScoreDistribution})
    _AttributeMap.update({__recordCount.name(): __recordCount, 
       __nbCorrect.name(): __nbCorrect, 
       __defaultScore.name(): __defaultScore, 
       __defaultConfidence.name(): __defaultConfidence})


class CTD_ANON_104(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 266, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_104_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __criterion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'criterion'), b'criterion', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_104_criterion', STD_ANON_, required=True)
    __criterion._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 270, 12)
    __criterion._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 270, 12)
    criterion = property(__criterion.value, __criterion.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__criterion.name(): __criterion})


class CTD_ANON_105(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 288, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), b'SimplePredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_httpwww_dmg_orgPMML_4_2SimplePredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4))
    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), b'CompoundPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_httpwww_dmg_orgPMML_4_2CompoundPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4))
    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), b'SimpleSetPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_httpwww_dmg_orgPMML_4_2SimpleSetPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4))
    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'True'), b'True_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_httpwww_dmg_orgPMML_4_2True', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4))
    True_ = property(__True.value, __True.set, None, None)
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'False'), b'False_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_httpwww_dmg_orgPMML_4_2False', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4))
    False_ = property(__False.value, __False.set, None, None)
    __ScoreDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution'), b'ScoreDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_httpwww_dmg_orgPMML_4_2ScoreDistribution', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3436, 4))
    ScoreDistribution = property(__ScoreDistribution.value, __ScoreDistribution.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 294, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 294, 12)
    id = property(__id.value, __id.set, None, None)
    __score = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'score'), b'score', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_score', pyxb.binding.datatypes.string, required=True)
    __score._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 295, 12)
    __score._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 295, 12)
    score = property(__score.value, __score.set, None, None)
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'recordCount'), b'recordCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_recordCount', NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 296, 12)
    __recordCount._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 296, 12)
    recordCount = property(__recordCount.value, __recordCount.set, None, None)
    __nbCorrect = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'nbCorrect'), b'nbCorrect', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_nbCorrect', NUMBER)
    __nbCorrect._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 297, 12)
    __nbCorrect._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 297, 12)
    nbCorrect = property(__nbCorrect.value, __nbCorrect.set, None, None)
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'confidence'), b'confidence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_confidence', NUMBER, unicode_default=b'1')
    __confidence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 298, 12)
    __confidence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 298, 12)
    confidence = property(__confidence.value, __confidence.set, None, None)
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'weight'), b'weight', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_105_weight', NUMBER, unicode_default=b'1')
    __weight._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 299, 12)
    __weight._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 299, 12)
    weight = property(__weight.value, __weight.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __SimplePredicate.name(): __SimplePredicate, 
       __CompoundPredicate.name(): __CompoundPredicate, 
       __SimpleSetPredicate.name(): __SimpleSetPredicate, 
       __True.name(): __True, 
       __False.name(): __False, 
       __ScoreDistribution.name(): __ScoreDistribution})
    _AttributeMap.update({__id.name(): __id, 
       __score.name(): __score, 
       __recordCount.name(): __recordCount, 
       __nbCorrect.name(): __nbCorrect, 
       __confidence.name(): __confidence, 
       __weight.name(): __weight})


class CTD_ANON_106(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 312, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __MissingValueWeights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MissingValueWeights'), b'MissingValueWeights', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2MissingValueWeights', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 342, 4))
    MissingValueWeights = property(__MissingValueWeights.value, __MissingValueWeights.set, None, None)
    __Cluster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Cluster'), b'Cluster', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2Cluster', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 350, 4))
    Cluster = property(__Cluster.value, __Cluster.set, None, None)
    __ClusteringField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ClusteringField'), b'ClusteringField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2ClusteringField', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 382, 4))
    ClusteringField = property(__ClusteringField.value, __ClusteringField.set, None, None)
    __ComparisonMeasure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ComparisonMeasure'), b'ComparisonMeasure', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2ComparisonMeasure', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 419, 4))
    ComparisonMeasure = property(__ComparisonMeasure.value, __ComparisonMeasure.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 327, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 327, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 328, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 328, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 329, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 329, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __modelClass = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelClass'), b'modelClass', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_modelClass', STD_ANON_2, required=True)
    __modelClass._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 330, 12)
    __modelClass._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 330, 12)
    modelClass = property(__modelClass.value, __modelClass.set, None, None)
    __numberOfClusters = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfClusters'), b'numberOfClusters', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_numberOfClusters', INT_NUMBER, required=True)
    __numberOfClusters._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 338, 12)
    __numberOfClusters._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 338, 12)
    numberOfClusters = property(__numberOfClusters.value, __numberOfClusters.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_106_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 339, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 339, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__MissingValueWeights.name(): __MissingValueWeights, 
       __Cluster.name(): __Cluster, 
       __ClusteringField.name(): __ClusteringField, 
       __ComparisonMeasure.name(): __ComparisonMeasure, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __modelClass.name(): __modelClass, 
       __numberOfClusters.name(): __numberOfClusters, 
       __isScorable.name(): __isScorable})


class CTD_ANON_107(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 383, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Comparisons = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Comparisons'), b'Comparisons', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_107_httpwww_dmg_orgPMML_4_2Comparisons', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 402, 4))
    Comparisons = property(__Comparisons.value, __Comparisons.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_107_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_107_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 388, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 388, 12)
    field = property(__field.value, __field.set, None, None)
    __isCenterField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isCenterField'), b'isCenterField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_107_isCenterField', STD_ANON_3, unicode_default=b'true')
    __isCenterField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 389, 12)
    __isCenterField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 389, 12)
    isCenterField = property(__isCenterField.value, __isCenterField.set, None, None)
    __fieldWeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fieldWeight'), b'fieldWeight', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_107_fieldWeight', REAL_NUMBER, unicode_default=b'1')
    __fieldWeight._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 397, 12)
    __fieldWeight._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 397, 12)
    fieldWeight = property(__fieldWeight.value, __fieldWeight.set, None, None)
    __similarityScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'similarityScale'), b'similarityScale', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_107_similarityScale', REAL_NUMBER)
    __similarityScale._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 398, 12)
    __similarityScale._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 398, 12)
    similarityScale = property(__similarityScale.value, __similarityScale.set, None, None)
    __compareFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'compareFunction'), b'compareFunction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_107_compareFunction', COMPARE_FUNCTION)
    __compareFunction._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 399, 12)
    __compareFunction._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 399, 12)
    compareFunction = property(__compareFunction.value, __compareFunction.set, None, None)
    _ElementMap.update({__Comparisons.name(): __Comparisons, 
       __Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __isCenterField.name(): __isCenterField, 
       __fieldWeight.name(): __fieldWeight, 
       __similarityScale.name(): __similarityScale, 
       __compareFunction.name(): __compareFunction})


class CTD_ANON_108(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 420, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __euclidean = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'euclidean'), b'euclidean', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2euclidean', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 448, 4))
    euclidean = property(__euclidean.value, __euclidean.set, None, None)
    __squaredEuclidean = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'squaredEuclidean'), b'squaredEuclidean', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2squaredEuclidean', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 455, 4))
    squaredEuclidean = property(__squaredEuclidean.value, __squaredEuclidean.set, None, None)
    __cityBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'cityBlock'), b'cityBlock', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2cityBlock', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 462, 4))
    cityBlock = property(__cityBlock.value, __cityBlock.set, None, None)
    __chebychev = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'chebychev'), b'chebychev', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2chebychev', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 469, 4))
    chebychev = property(__chebychev.value, __chebychev.set, None, None)
    __minkowski = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'minkowski'), b'minkowski', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2minkowski', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 476, 4))
    minkowski = property(__minkowski.value, __minkowski.set, None, None)
    __simpleMatching = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'simpleMatching'), b'simpleMatching', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2simpleMatching', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 484, 4))
    simpleMatching = property(__simpleMatching.value, __simpleMatching.set, None, None)
    __jaccard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'jaccard'), b'jaccard', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2jaccard', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 491, 4))
    jaccard = property(__jaccard.value, __jaccard.set, None, None)
    __tanimoto = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'tanimoto'), b'tanimoto', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2tanimoto', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 498, 4))
    tanimoto = property(__tanimoto.value, __tanimoto.set, None, None)
    __binarySimilarity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'binarySimilarity'), b'binarySimilarity', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2binarySimilarity', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 505, 4))
    binarySimilarity = property(__binarySimilarity.value, __binarySimilarity.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __kind = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'kind'), b'kind', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_kind', STD_ANON_4, required=True)
    __kind._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 435, 12)
    __kind._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 435, 12)
    kind = property(__kind.value, __kind.set, None, None)
    __compareFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'compareFunction'), b'compareFunction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_compareFunction', COMPARE_FUNCTION, unicode_default=b'absDiff')
    __compareFunction._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 443, 12)
    __compareFunction._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 443, 12)
    compareFunction = property(__compareFunction.value, __compareFunction.set, None, None)
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimum'), b'minimum', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_minimum', NUMBER)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 444, 12)
    __minimum._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 444, 12)
    minimum = property(__minimum.value, __minimum.set, None, None)
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maximum'), b'maximum', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_108_maximum', NUMBER)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 445, 12)
    __maximum._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 445, 12)
    maximum = property(__maximum.value, __maximum.set, None, None)
    _ElementMap.update({__euclidean.name(): __euclidean, 
       __squaredEuclidean.name(): __squaredEuclidean, 
       __cityBlock.name(): __cityBlock, 
       __chebychev.name(): __chebychev, 
       __minkowski.name(): __minkowski, 
       __simpleMatching.name(): __simpleMatching, 
       __jaccard.name(): __jaccard, 
       __tanimoto.name(): __tanimoto, 
       __binarySimilarity.name(): __binarySimilarity, 
       __Extension.name(): __Extension})
    _AttributeMap.update({__kind.name(): __kind, 
       __compareFunction.name(): __compareFunction, 
       __minimum.name(): __minimum, 
       __maximum.name(): __maximum})


class CTD_ANON_109(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 477, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_109_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __p_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'p-parameter'), b'p_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_109_p_parameter', NUMBER, required=True)
    __p_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 481, 12)
    __p_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 481, 12)
    p_parameter = property(__p_parameter.value, __p_parameter.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__p_parameter.name(): __p_parameter})


class CTD_ANON_110(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 506, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __c00_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'c00-parameter'), b'c00_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_c00_parameter', NUMBER, required=True)
    __c00_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 510, 12)
    __c00_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 510, 12)
    c00_parameter = property(__c00_parameter.value, __c00_parameter.set, None, None)
    __c01_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'c01-parameter'), b'c01_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_c01_parameter', NUMBER, required=True)
    __c01_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 511, 12)
    __c01_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 511, 12)
    c01_parameter = property(__c01_parameter.value, __c01_parameter.set, None, None)
    __c10_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'c10-parameter'), b'c10_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_c10_parameter', NUMBER, required=True)
    __c10_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 512, 12)
    __c10_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 512, 12)
    c10_parameter = property(__c10_parameter.value, __c10_parameter.set, None, None)
    __c11_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'c11-parameter'), b'c11_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_c11_parameter', NUMBER, required=True)
    __c11_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 513, 12)
    __c11_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 513, 12)
    c11_parameter = property(__c11_parameter.value, __c11_parameter.set, None, None)
    __d00_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'd00-parameter'), b'd00_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_d00_parameter', NUMBER, required=True)
    __d00_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 514, 12)
    __d00_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 514, 12)
    d00_parameter = property(__d00_parameter.value, __d00_parameter.set, None, None)
    __d01_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'd01-parameter'), b'd01_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_d01_parameter', NUMBER, required=True)
    __d01_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 515, 12)
    __d01_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 515, 12)
    d01_parameter = property(__d01_parameter.value, __d01_parameter.set, None, None)
    __d10_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'd10-parameter'), b'd10_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_d10_parameter', NUMBER, required=True)
    __d10_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 516, 12)
    __d10_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 516, 12)
    d10_parameter = property(__d10_parameter.value, __d10_parameter.set, None, None)
    __d11_parameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'd11-parameter'), b'd11_parameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_110_d11_parameter', NUMBER, required=True)
    __d11_parameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 517, 12)
    __d11_parameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 517, 12)
    d11_parameter = property(__d11_parameter.value, __d11_parameter.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__c00_parameter.name(): __c00_parameter, 
       __c01_parameter.name(): __c01_parameter, 
       __c10_parameter.name(): __c10_parameter, 
       __c11_parameter.name(): __c11_parameter, 
       __d00_parameter.name(): __d00_parameter, 
       __d01_parameter.name(): __d01_parameter, 
       __d10_parameter.name(): __d10_parameter, 
       __d11_parameter.name(): __d11_parameter})


class CTD_ANON_111(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 521, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __RegressionTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RegressionTable'), b'RegressionTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2RegressionTable', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 564, 4))
    RegressionTable = property(__RegressionTable.value, __RegressionTable.set, None, None)
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 534, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 534, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 535, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 535, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 536, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 536, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __modelType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelType'), b'modelType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_modelType', STD_ANON_5)
    __modelType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 537, 12)
    __modelType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 537, 12)
    modelType = property(__modelType.value, __modelType.set, None, None)
    __targetFieldName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetFieldName'), b'targetFieldName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_targetFieldName', FIELD_NAME)
    __targetFieldName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 546, 12)
    __targetFieldName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 546, 12)
    targetFieldName = property(__targetFieldName.value, __targetFieldName.set, None, None)
    __normalizationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'normalizationMethod'), b'normalizationMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_normalizationMethod', REGRESSIONNORMALIZATIONMETHOD, unicode_default=b'none')
    __normalizationMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 547, 12)
    __normalizationMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 547, 12)
    normalizationMethod = property(__normalizationMethod.value, __normalizationMethod.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_111_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 548, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 548, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__RegressionTable.name(): __RegressionTable, 
       __Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __modelType.name(): __modelType, 
       __targetFieldName.name(): __targetFieldName, 
       __normalizationMethod.name(): __normalizationMethod, 
       __isScorable.name(): __isScorable})


class CTD_ANON_112(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 565, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __NumericPredictor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NumericPredictor'), b'NumericPredictor', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_112_httpwww_dmg_orgPMML_4_2NumericPredictor', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 576, 4))
    NumericPredictor = property(__NumericPredictor.value, __NumericPredictor.set, None, None)
    __CategoricalPredictor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CategoricalPredictor'), b'CategoricalPredictor', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_112_httpwww_dmg_orgPMML_4_2CategoricalPredictor', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 586, 4))
    CategoricalPredictor = property(__CategoricalPredictor.value, __CategoricalPredictor.set, None, None)
    __PredictorTerm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PredictorTerm'), b'PredictorTerm', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_112_httpwww_dmg_orgPMML_4_2PredictorTerm', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 596, 4))
    PredictorTerm = property(__PredictorTerm.value, __PredictorTerm.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_112_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __intercept = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'intercept'), b'intercept', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_112_intercept', REAL_NUMBER, required=True)
    __intercept._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 572, 12)
    __intercept._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 572, 12)
    intercept = property(__intercept.value, __intercept.set, None, None)
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetCategory'), b'targetCategory', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_112_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 573, 12)
    __targetCategory._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 573, 12)
    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)
    _ElementMap.update({__NumericPredictor.name(): __NumericPredictor, 
       __CategoricalPredictor.name(): __CategoricalPredictor, 
       __PredictorTerm.name(): __PredictorTerm, 
       __Extension.name(): __Extension})
    _AttributeMap.update({__intercept.name(): __intercept, 
       __targetCategory.name(): __targetCategory})


class CTD_ANON_113(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 577, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_113_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_113_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 581, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 581, 12)
    name = property(__name.value, __name.set, None, None)
    __exponent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'exponent'), b'exponent', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_113_exponent', INT_NUMBER, unicode_default=b'1')
    __exponent._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 582, 12)
    __exponent._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 582, 12)
    exponent = property(__exponent.value, __exponent.set, None, None)
    __coefficient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'coefficient'), b'coefficient', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_113_coefficient', REAL_NUMBER, required=True)
    __coefficient._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 583, 12)
    __coefficient._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 583, 12)
    coefficient = property(__coefficient.value, __coefficient.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__name.name(): __name, 
       __exponent.name(): __exponent, 
       __coefficient.name(): __coefficient})


class CTD_ANON_114(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 587, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_114_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_114_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 591, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 591, 12)
    name = property(__name.value, __name.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_114_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 592, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 592, 12)
    value_ = property(__value.value, __value.set, None, None)
    __coefficient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'coefficient'), b'coefficient', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_114_coefficient', REAL_NUMBER, required=True)
    __coefficient._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 593, 12)
    __coefficient._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 593, 12)
    coefficient = property(__coefficient.value, __coefficient.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__name.name(): __name, 
       __value.name(): __value, 
       __coefficient.name(): __coefficient})


class CTD_ANON_115(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 597, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_115_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_115_httpwww_dmg_orgPMML_4_2FieldRef', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_115_name', FIELD_NAME)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 602, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 602, 12)
    name = property(__name.value, __name.set, None, None)
    __coefficient = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'coefficient'), b'coefficient', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_115_coefficient', REAL_NUMBER, required=True)
    __coefficient._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 603, 12)
    __coefficient._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 603, 12)
    coefficient = property(__coefficient.value, __coefficient.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __FieldRef.name(): __FieldRef})
    _AttributeMap.update({__name.name(): __name, 
       __coefficient.name(): __coefficient})


class CTD_ANON_116(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 607, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __TextDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextDictionary'), b'TextDictionary', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2TextDictionary', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 632, 4))
    TextDictionary = property(__TextDictionary.value, __TextDictionary.set, None, None)
    __TextCorpus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextCorpus'), b'TextCorpus', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2TextCorpus', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 641, 4))
    TextCorpus = property(__TextCorpus.value, __TextCorpus.set, None, None)
    __DocumentTermMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DocumentTermMatrix'), b'DocumentTermMatrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2DocumentTermMatrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 660, 4))
    DocumentTermMatrix = property(__DocumentTermMatrix.value, __DocumentTermMatrix.set, None, None)
    __TextModelNormalization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextModelNormalization'), b'TextModelNormalization', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2TextModelNormalization', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 668, 4))
    TextModelNormalization = property(__TextModelNormalization.value, __TextModelNormalization.set, None, None)
    __TextModelSimiliarity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextModelSimiliarity'), b'TextModelSimiliarity', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2TextModelSimiliarity', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 704, 4))
    TextModelSimiliarity = property(__TextModelSimiliarity.value, __TextModelSimiliarity.set, None, None)
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 624, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 624, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 625, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 625, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 626, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 626, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __numberOfTerms = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfTerms'), b'numberOfTerms', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_numberOfTerms', pyxb.binding.datatypes.integer, required=True)
    __numberOfTerms._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 627, 12)
    __numberOfTerms._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 627, 12)
    numberOfTerms = property(__numberOfTerms.value, __numberOfTerms.set, None, None)
    __numberOfDocuments = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfDocuments'), b'numberOfDocuments', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_numberOfDocuments', pyxb.binding.datatypes.integer, required=True)
    __numberOfDocuments._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 628, 12)
    __numberOfDocuments._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 628, 12)
    numberOfDocuments = property(__numberOfDocuments.value, __numberOfDocuments.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_116_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 629, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 629, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__TextDictionary.name(): __TextDictionary, 
       __TextCorpus.name(): __TextCorpus, 
       __DocumentTermMatrix.name(): __DocumentTermMatrix, 
       __TextModelNormalization.name(): __TextModelNormalization, 
       __TextModelSimiliarity.name(): __TextModelSimiliarity, 
       __Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __numberOfTerms.name(): __numberOfTerms, 
       __numberOfDocuments.name(): __numberOfDocuments, 
       __isScorable.name(): __isScorable})


class CTD_ANON_117(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 650, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_117_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_117_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 654, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 654, 12)
    id = property(__id.value, __id.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_117_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 655, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 655, 12)
    name = property(__name.value, __name.set, None, None)
    __length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'length'), b'length', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_117_length', INT_NUMBER)
    __length._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 656, 12)
    __length._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 656, 12)
    length = property(__length.value, __length.set, None, None)
    __file = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'file'), b'file', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_117_file', pyxb.binding.datatypes.string)
    __file._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 657, 12)
    __file._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 657, 12)
    file = property(__file.value, __file.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__id.name(): __id, 
       __name.name(): __name, 
       __length.name(): __length, 
       __file.name(): __file})


class CTD_ANON_118(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 669, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_118_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __localTermWeights = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'localTermWeights'), b'localTermWeights', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_118_localTermWeights', STD_ANON_6, unicode_default=b'termFrequency')
    __localTermWeights._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 673, 12)
    __localTermWeights._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 673, 12)
    localTermWeights = property(__localTermWeights.value, __localTermWeights.set, None, None)
    __globalTermWeights = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'globalTermWeights'), b'globalTermWeights', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_118_globalTermWeights', STD_ANON_7, unicode_default=b'inverseDocumentFrequency')
    __globalTermWeights._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 683, 12)
    __globalTermWeights._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 683, 12)
    globalTermWeights = property(__globalTermWeights.value, __globalTermWeights.set, None, None)
    __documentNormalization = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'documentNormalization'), b'documentNormalization', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_118_documentNormalization', STD_ANON_8, unicode_default=b'none')
    __documentNormalization._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 694, 12)
    __documentNormalization._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 694, 12)
    documentNormalization = property(__documentNormalization.value, __documentNormalization.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__localTermWeights.name(): __localTermWeights, 
       __globalTermWeights.name(): __globalTermWeights, 
       __documentNormalization.name(): __documentNormalization})


class CTD_ANON_119(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 705, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_119_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __similarityType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'similarityType'), b'similarityType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_119_similarityType', STD_ANON_9)
    __similarityType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 709, 12)
    __similarityType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 709, 12)
    similarityType = property(__similarityType.value, __similarityType.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__similarityType.name(): __similarityType})


class CTD_ANON_120(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 720, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __ComparisonMeasure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ComparisonMeasure'), b'ComparisonMeasure', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2ComparisonMeasure', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 419, 4))
    ComparisonMeasure = property(__ComparisonMeasure.value, __ComparisonMeasure.set, None, None)
    __TrainingInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TrainingInstances'), b'TrainingInstances', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2TrainingInstances', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 746, 4))
    TrainingInstances = property(__TrainingInstances.value, __TrainingInstances.set, None, None)
    __KNNInputs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'KNNInputs'), b'KNNInputs', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2KNNInputs', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 778, 4))
    KNNInputs = property(__KNNInputs.value, __KNNInputs.set, None, None)
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 735, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 735, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 736, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 736, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 737, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 737, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __numberOfNeighbors = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfNeighbors'), b'numberOfNeighbors', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_numberOfNeighbors', INT_NUMBER, required=True)
    __numberOfNeighbors._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 738, 12)
    __numberOfNeighbors._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 738, 12)
    numberOfNeighbors = property(__numberOfNeighbors.value, __numberOfNeighbors.set, None, None)
    __continuousScoringMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'continuousScoringMethod'), b'continuousScoringMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_continuousScoringMethod', CONT_SCORING_METHOD, unicode_default=b'average')
    __continuousScoringMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 739, 12)
    __continuousScoringMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 739, 12)
    continuousScoringMethod = property(__continuousScoringMethod.value, __continuousScoringMethod.set, None, None)
    __categoricalScoringMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'categoricalScoringMethod'), b'categoricalScoringMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_categoricalScoringMethod', CAT_SCORING_METHOD, unicode_default=b'majorityVote')
    __categoricalScoringMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 740, 12)
    __categoricalScoringMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 740, 12)
    categoricalScoringMethod = property(__categoricalScoringMethod.value, __categoricalScoringMethod.set, None, None)
    __instanceIdVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'instanceIdVariable'), b'instanceIdVariable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_instanceIdVariable', pyxb.binding.datatypes.string)
    __instanceIdVariable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 741, 12)
    __instanceIdVariable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 741, 12)
    instanceIdVariable = property(__instanceIdVariable.value, __instanceIdVariable.set, None, None)
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'threshold'), b'threshold', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_threshold', REAL_NUMBER, unicode_default=b'0.001')
    __threshold._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 742, 12)
    __threshold._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 742, 12)
    threshold = property(__threshold.value, __threshold.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_120_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 743, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 743, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__ComparisonMeasure.name(): __ComparisonMeasure, 
       __TrainingInstances.name(): __TrainingInstances, 
       __KNNInputs.name(): __KNNInputs, 
       __Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __numberOfNeighbors.name(): __numberOfNeighbors, 
       __continuousScoringMethod.name(): __continuousScoringMethod, 
       __categoricalScoringMethod.name(): __categoricalScoringMethod, 
       __instanceIdVariable.name(): __instanceIdVariable, 
       __threshold.name(): __threshold, 
       __isScorable.name(): __isScorable})


class CTD_ANON_121(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 747, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __InstanceFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'InstanceFields'), b'InstanceFields', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_121_httpwww_dmg_orgPMML_4_2InstanceFields', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 761, 4))
    InstanceFields = property(__InstanceFields.value, __InstanceFields.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_121_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TableLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), b'TableLocator', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_121_httpwww_dmg_orgPMML_4_2TableLocator', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4))
    TableLocator = property(__TableLocator.value, __TableLocator.set, None, None)
    __InlineTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), b'InlineTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_121_httpwww_dmg_orgPMML_4_2InlineTable', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4))
    InlineTable = property(__InlineTable.value, __InlineTable.set, None, None)
    __isTransformed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isTransformed'), b'isTransformed', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_121_isTransformed', pyxb.binding.datatypes.boolean, unicode_default=b'false')
    __isTransformed._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 756, 12)
    __isTransformed._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 756, 12)
    isTransformed = property(__isTransformed.value, __isTransformed.set, None, None)
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'recordCount'), b'recordCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_121_recordCount', INT_NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 757, 12)
    __recordCount._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 757, 12)
    recordCount = property(__recordCount.value, __recordCount.set, None, None)
    __fieldCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fieldCount'), b'fieldCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_121_fieldCount', INT_NUMBER)
    __fieldCount._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 758, 12)
    __fieldCount._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 758, 12)
    fieldCount = property(__fieldCount.value, __fieldCount.set, None, None)
    _ElementMap.update({__InstanceFields.name(): __InstanceFields, 
       __Extension.name(): __Extension, 
       __TableLocator.name(): __TableLocator, 
       __InlineTable.name(): __InlineTable})
    _AttributeMap.update({__isTransformed.name(): __isTransformed, 
       __recordCount.name(): __recordCount, 
       __fieldCount.name(): __fieldCount})


class CTD_ANON_122(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 787, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_122_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_122_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 791, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 791, 12)
    field = property(__field.value, __field.set, None, None)
    __fieldWeight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fieldWeight'), b'fieldWeight', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_122_fieldWeight', REAL_NUMBER, unicode_default=b'1')
    __fieldWeight._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 792, 12)
    __fieldWeight._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 792, 12)
    fieldWeight = property(__fieldWeight.value, __fieldWeight.set, None, None)
    __compareFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'compareFunction'), b'compareFunction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_122_compareFunction', COMPARE_FUNCTION)
    __compareFunction._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 793, 12)
    __compareFunction._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 793, 12)
    compareFunction = property(__compareFunction.value, __compareFunction.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __fieldWeight.name(): __fieldWeight, 
       __compareFunction.name(): __compareFunction})


class CTD_ANON_123(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 818, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __TargetValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TargetValue'), b'TargetValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_httpwww_dmg_orgPMML_4_2TargetValue', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 840, 4))
    TargetValue = property(__TargetValue.value, __TargetValue.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 823, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 823, 12)
    field = property(__field.value, __field.set, None, None)
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'optype'), b'optype', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 824, 12)
    __optype._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 824, 12)
    optype = property(__optype.value, __optype.set, None, None)
    __castInteger = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'castInteger'), b'castInteger', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_castInteger', STD_ANON_10)
    __castInteger._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 825, 12)
    __castInteger._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 825, 12)
    castInteger = property(__castInteger.value, __castInteger.set, None, None)
    __min = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'min'), b'min', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_min', pyxb.binding.datatypes.double)
    __min._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 834, 12)
    __min._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 834, 12)
    min = property(__min.value, __min.set, None, None)
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'max'), b'max', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_max', pyxb.binding.datatypes.double)
    __max._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 835, 12)
    __max._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 835, 12)
    max = property(__max.value, __max.set, None, None)
    __rescaleConstant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'rescaleConstant'), b'rescaleConstant', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_rescaleConstant', pyxb.binding.datatypes.double, unicode_default=b'0')
    __rescaleConstant._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 836, 12)
    __rescaleConstant._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 836, 12)
    rescaleConstant = property(__rescaleConstant.value, __rescaleConstant.set, None, None)
    __rescaleFactor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'rescaleFactor'), b'rescaleFactor', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_123_rescaleFactor', pyxb.binding.datatypes.double, unicode_default=b'1')
    __rescaleFactor._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 837, 12)
    __rescaleFactor._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 837, 12)
    rescaleFactor = property(__rescaleFactor.value, __rescaleFactor.set, None, None)
    _ElementMap.update({__TargetValue.name(): __TargetValue, 
       __Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __optype.name(): __optype, 
       __castInteger.name(): __castInteger, 
       __min.name(): __min, 
       __max.name(): __max, 
       __rescaleConstant.name(): __rescaleConstant, 
       __rescaleFactor.name(): __rescaleFactor})


class CTD_ANON_124(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 841, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_124_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Partition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Partition'), b'Partition', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_124_httpwww_dmg_orgPMML_4_2Partition', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1755, 4))
    Partition = property(__Partition.value, __Partition.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_124_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 846, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 846, 12)
    value_ = property(__value.value, __value.set, None, None)
    __displayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayValue'), b'displayValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_124_displayValue', pyxb.binding.datatypes.string)
    __displayValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 847, 12)
    __displayValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 847, 12)
    displayValue = property(__displayValue.value, __displayValue.set, None, None)
    __priorProbability = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'priorProbability'), b'priorProbability', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_124_priorProbability', PROB_NUMBER)
    __priorProbability._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 848, 12)
    __priorProbability._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 848, 12)
    priorProbability = property(__priorProbability.value, __priorProbability.set, None, None)
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultValue'), b'defaultValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_124_defaultValue', NUMBER)
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 849, 12)
    __defaultValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 849, 12)
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Partition.name(): __Partition})
    _AttributeMap.update({__value.name(): __value, 
       __displayValue.name(): __displayValue, 
       __priorProbability.name(): __priorProbability, 
       __defaultValue.name(): __defaultValue})


class ArrayType(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.dmg.org/PMML-4_2}ArrayType with content type MIXED"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ArrayType')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 937, 4)
    _ElementMap = {}
    _AttributeMap = {}
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'n'), b'n', b'__httpwww_dmg_orgPMML_4_2_ArrayType_n', INT_NUMBER)
    __n._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 938, 8)
    __n._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 938, 8)
    n = property(__n.value, __n.set, None, None)
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_dmg_orgPMML_4_2_ArrayType_type', STD_ANON_11, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 939, 8)
    __type._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 939, 8)
    type = property(__type.value, __type.set, None, None)
    _ElementMap.update({})
    _AttributeMap.update({__n.name(): __n, 
       __type.name(): __type})


Namespace.addCategoryObject(b'typeBinding', b'ArrayType', ArrayType)

class CTD_ANON_125(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 971, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Indices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Indices'), b'Indices', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_125_httpwww_dmg_orgPMML_4_2Indices', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 990, 4))
    Indices = property(__Indices.value, __Indices.set, None, None)
    __INT_Entries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'INT-Entries'), b'INT_Entries', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_125_httpwww_dmg_orgPMML_4_2INT_Entries', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 995, 4))
    INT_Entries = property(__INT_Entries.value, __INT_Entries.set, None, None)
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'n'), b'n', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_125_n', INT_NUMBER)
    __n._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 976, 12)
    __n._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 976, 12)
    n = property(__n.value, __n.set, None, None)
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultValue'), b'defaultValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_125_defaultValue', INT_NUMBER, unicode_default=b'0')
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 977, 12)
    __defaultValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 977, 12)
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)
    _ElementMap.update({__Indices.name(): __Indices, 
       __INT_Entries.name(): __INT_Entries})
    _AttributeMap.update({__n.name(): __n, 
       __defaultValue.name(): __defaultValue})


class CTD_ANON_126(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 981, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Indices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Indices'), b'Indices', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_126_httpwww_dmg_orgPMML_4_2Indices', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 990, 4))
    Indices = property(__Indices.value, __Indices.set, None, None)
    __REAL_Entries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'REAL-Entries'), b'REAL_Entries', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_126_httpwww_dmg_orgPMML_4_2REAL_Entries', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1000, 4))
    REAL_Entries = property(__REAL_Entries.value, __REAL_Entries.set, None, None)
    __n = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'n'), b'n', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_126_n', INT_NUMBER)
    __n._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 986, 12)
    __n._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 986, 12)
    n = property(__n.value, __n.set, None, None)
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultValue'), b'defaultValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_126_defaultValue', REAL_NUMBER, unicode_default=b'0')
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 987, 12)
    __defaultValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 987, 12)
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)
    _ElementMap.update({__Indices.name(): __Indices, 
       __REAL_Entries.name(): __REAL_Entries})
    _AttributeMap.update({__n.name(): __n, 
       __defaultValue.name(): __defaultValue})


class CTD_ANON_127(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1006, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_127_httpwww_dmg_orgPMML_4_2Array', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __MatCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MatCell'), b'MatCell', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_127_httpwww_dmg_orgPMML_4_2MatCell', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1026, 4))
    MatCell = property(__MatCell.value, __MatCell.set, None, None)
    __kind = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'kind'), b'kind', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_127_kind', STD_ANON_15, unicode_default=b'any')
    __kind._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1011, 12)
    __kind._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1011, 12)
    kind = property(__kind.value, __kind.set, None, None)
    __nbRows = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'nbRows'), b'nbRows', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_127_nbRows', INT_NUMBER)
    __nbRows._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1020, 12)
    __nbRows._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1020, 12)
    nbRows = property(__nbRows.value, __nbRows.set, None, None)
    __nbCols = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'nbCols'), b'nbCols', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_127_nbCols', INT_NUMBER)
    __nbCols._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1021, 12)
    __nbCols._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1021, 12)
    nbCols = property(__nbCols.value, __nbCols.set, None, None)
    __diagDefault = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'diagDefault'), b'diagDefault', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_127_diagDefault', REAL_NUMBER)
    __diagDefault._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1022, 12)
    __diagDefault._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1022, 12)
    diagDefault = property(__diagDefault.value, __diagDefault.set, None, None)
    __offDiagDefault = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'offDiagDefault'), b'offDiagDefault', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_127_offDiagDefault', REAL_NUMBER)
    __offDiagDefault._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1023, 12)
    __offDiagDefault._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1023, 12)
    offDiagDefault = property(__offDiagDefault.value, __offDiagDefault.set, None, None)
    _ElementMap.update({__Array.name(): __Array, 
       __MatCell.name(): __MatCell})
    _AttributeMap.update({__kind.name(): __kind, 
       __nbRows.name(): __nbRows, 
       __nbCols.name(): __nbCols, 
       __diagDefault.name(): __diagDefault, 
       __offDiagDefault.name(): __offDiagDefault})


class CTD_ANON_128(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1027, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __row = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'row'), b'row', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_128_row', INT_NUMBER, required=True)
    __row._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1030, 20)
    __row._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1030, 20)
    row = property(__row.value, __row.set, None, None)
    __col = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'col'), b'col', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_128_col', INT_NUMBER, required=True)
    __col._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1031, 20)
    __col._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1031, 20)
    col = property(__col.value, __col.set, None, None)
    _ElementMap.update({})
    _AttributeMap.update({__row.name(): __row, 
       __col.name(): __col})


class CTD_ANON_129(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1081, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_129_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TableLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), b'TableLocator', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_129_httpwww_dmg_orgPMML_4_2TableLocator', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4))
    TableLocator = property(__TableLocator.value, __TableLocator.set, None, None)
    __InlineTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), b'InlineTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_129_httpwww_dmg_orgPMML_4_2InlineTable', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4))
    InlineTable = property(__InlineTable.value, __InlineTable.set, None, None)
    __FieldColumnPair = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldColumnPair'), b'FieldColumnPair', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_129_httpwww_dmg_orgPMML_4_2FieldColumnPair', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1919, 4))
    FieldColumnPair = property(__FieldColumnPair.value, __FieldColumnPair.set, None, None)
    __childField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'childField'), b'childField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_129_childField', pyxb.binding.datatypes.string, required=True)
    __childField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1090, 12)
    __childField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1090, 12)
    childField = property(__childField.value, __childField.set, None, None)
    __parentField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'parentField'), b'parentField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_129_parentField', pyxb.binding.datatypes.string, required=True)
    __parentField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1091, 12)
    __parentField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1091, 12)
    parentField = property(__parentField.value, __parentField.set, None, None)
    __parentLevelField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'parentLevelField'), b'parentLevelField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_129_parentLevelField', pyxb.binding.datatypes.string)
    __parentLevelField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1092, 12)
    __parentLevelField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1092, 12)
    parentLevelField = property(__parentLevelField.value, __parentLevelField.set, None, None)
    __isRecursive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isRecursive'), b'isRecursive', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_129_isRecursive', STD_ANON_16, unicode_default=b'no')
    __isRecursive._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1093, 12)
    __isRecursive._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1093, 12)
    isRecursive = property(__isRecursive.value, __isRecursive.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __TableLocator.name(): __TableLocator, 
       __InlineTable.name(): __InlineTable, 
       __FieldColumnPair.name(): __FieldColumnPair})
    _AttributeMap.update({__childField.name(): __childField, 
       __parentField.name(): __parentField, 
       __parentLevelField.name(): __parentLevelField, 
       __isRecursive.name(): __isRecursive})


class CTD_ANON_130(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1130, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __BayesInputs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BayesInputs'), b'BayesInputs', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2BayesInputs', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1151, 4))
    BayesInputs = property(__BayesInputs.value, __BayesInputs.set, None, None)
    __BayesOutput = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BayesOutput'), b'BayesOutput', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2BayesOutput', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1174, 4))
    BayesOutput = property(__BayesOutput.value, __BayesOutput.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1144, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1144, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'threshold'), b'threshold', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_threshold', REAL_NUMBER, required=True)
    __threshold._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1145, 12)
    __threshold._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1145, 12)
    threshold = property(__threshold.value, __threshold.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1146, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1146, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1147, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1147, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_130_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1148, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1148, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __BayesInputs.name(): __BayesInputs, 
       __BayesOutput.name(): __BayesOutput, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __threshold.name(): __threshold, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __isScorable.name(): __isScorable})


class CTD_ANON_131(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1218, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_131_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_131_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1222, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1222, 12)
    value_ = property(__value.value, __value.set, None, None)
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'count'), b'count', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_131_count', REAL_NUMBER, required=True)
    __count._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1223, 12)
    __count._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1223, 12)
    count = property(__count.value, __count.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__value.name(): __value, 
       __count.name(): __count})


class CTD_ANON_132(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1235, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Apply'), b'Apply', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2Apply', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4))
    Apply = property(__Apply.value, __Apply.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Decisions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Decisions'), b'Decisions', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2Decisions', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1311, 4))
    Decisions = property(__Decisions.value, __Decisions.set, None, None)
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Constant'), b'Constant', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2Constant', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4))
    Constant = property(__Constant.value, __Constant.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2FieldRef', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), b'NormContinuous', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2NormContinuous', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4))
    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), b'NormDiscrete', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2NormDiscrete', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4))
    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), b'Discretize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2Discretize', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4))
    Discretize = property(__Discretize.value, __Discretize.set, None, None)
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), b'MapValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2MapValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4))
    MapValues = property(__MapValues.value, __MapValues.set, None, None)
    __TextIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), b'TextIndex', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2TextIndex', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4))
    TextIndex = property(__TextIndex.value, __TextIndex.set, None, None)
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), b'Aggregate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_httpwww_dmg_orgPMML_4_2Aggregate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4))
    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1243, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1243, 12)
    name = property(__name.value, __name.set, None, None)
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayName'), b'displayName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_displayName', pyxb.binding.datatypes.string)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1244, 12)
    __displayName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1244, 12)
    displayName = property(__displayName.value, __displayName.set, None, None)
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'optype'), b'optype', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1245, 12)
    __optype._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1245, 12)
    optype = property(__optype.value, __optype.set, None, None)
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1246, 12)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1246, 12)
    dataType = property(__dataType.value, __dataType.set, None, None)
    __targetField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetField'), b'targetField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_targetField', FIELD_NAME)
    __targetField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1247, 12)
    __targetField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1247, 12)
    targetField = property(__targetField.value, __targetField.set, None, None)
    __feature = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'feature'), b'feature', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_feature', RESULT_FEATURE, unicode_default=b'predictedValue')
    __feature._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1248, 12)
    __feature._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1248, 12)
    feature = property(__feature.value, __feature.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1249, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1249, 12)
    value_ = property(__value.value, __value.set, None, None)
    __ruleFeature = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'ruleFeature'), b'ruleFeature', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_ruleFeature', RULE_FEATURE, unicode_default=b'consequent')
    __ruleFeature._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1250, 12)
    __ruleFeature._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1250, 12)
    ruleFeature = property(__ruleFeature.value, __ruleFeature.set, None, None)
    __algorithm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithm'), b'algorithm', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_algorithm', STD_ANON_17, unicode_default=b'exclusiveRecommendation')
    __algorithm._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1251, 12)
    __algorithm._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1251, 12)
    algorithm = property(__algorithm.value, __algorithm.set, None, None)
    __rank = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'rank'), b'rank', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_rank', INT_NUMBER, unicode_default=b'1')
    __rank._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1260, 12)
    __rank._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1260, 12)
    rank = property(__rank.value, __rank.set, None, None)
    __rankBasis = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'rankBasis'), b'rankBasis', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_rankBasis', STD_ANON_18, unicode_default=b'confidence')
    __rankBasis._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1261, 12)
    __rankBasis._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1261, 12)
    rankBasis = property(__rankBasis.value, __rankBasis.set, None, None)
    __rankOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'rankOrder'), b'rankOrder', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_rankOrder', STD_ANON_19, unicode_default=b'descending')
    __rankOrder._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1272, 12)
    __rankOrder._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1272, 12)
    rankOrder = property(__rankOrder.value, __rankOrder.set, None, None)
    __isMultiValued = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isMultiValued'), b'isMultiValued', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_isMultiValued', pyxb.binding.datatypes.anySimpleType, unicode_default=b'0')
    __isMultiValued._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1280, 12)
    __isMultiValued._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1280, 12)
    isMultiValued = property(__isMultiValued.value, __isMultiValued.set, None, None)
    __segmentId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'segmentId'), b'segmentId', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_132_segmentId', pyxb.binding.datatypes.string)
    __segmentId._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1281, 12)
    __segmentId._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1281, 12)
    segmentId = property(__segmentId.value, __segmentId.set, None, None)
    _ElementMap.update({__Apply.name(): __Apply, 
       __Extension.name(): __Extension, 
       __Decisions.name(): __Decisions, 
       __Constant.name(): __Constant, 
       __FieldRef.name(): __FieldRef, 
       __NormContinuous.name(): __NormContinuous, 
       __NormDiscrete.name(): __NormDiscrete, 
       __Discretize.name(): __Discretize, 
       __MapValues.name(): __MapValues, 
       __TextIndex.name(): __TextIndex, 
       __Aggregate.name(): __Aggregate})
    _AttributeMap.update({__name.name(): __name, 
       __displayName.name(): __displayName, 
       __optype.name(): __optype, 
       __dataType.name(): __dataType, 
       __targetField.name(): __targetField, 
       __feature.name(): __feature, 
       __value.name(): __value, 
       __ruleFeature.name(): __ruleFeature, 
       __algorithm.name(): __algorithm, 
       __rank.name(): __rank, 
       __rankBasis.name(): __rankBasis, 
       __rankOrder.name(): __rankOrder, 
       __isMultiValued.name(): __isMultiValued, 
       __segmentId.name(): __segmentId})


class CTD_ANON_133(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1345, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ParameterList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ParameterList'), b'ParameterList', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2ParameterList', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1412, 4))
    ParameterList = property(__ParameterList.value, __ParameterList.set, None, None)
    __FactorList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FactorList'), b'FactorList', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2FactorList', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1430, 4))
    FactorList = property(__FactorList.value, __FactorList.set, None, None)
    __CovariateList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CovariateList'), b'CovariateList', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2CovariateList', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1438, 4))
    CovariateList = property(__CovariateList.value, __CovariateList.set, None, None)
    __PPMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PPMatrix'), b'PPMatrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2PPMatrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1473, 4))
    PPMatrix = property(__PPMatrix.value, __PPMatrix.set, None, None)
    __PCovMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PCovMatrix'), b'PCovMatrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2PCovMatrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1492, 4))
    PCovMatrix = property(__PCovMatrix.value, __PCovMatrix.set, None, None)
    __ParamMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ParamMatrix'), b'ParamMatrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2ParamMatrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1521, 4))
    ParamMatrix = property(__ParamMatrix.value, __ParamMatrix.set, None, None)
    __BaseCumHazardTables = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BaseCumHazardTables'), b'BaseCumHazardTables', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2BaseCumHazardTables', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1540, 4))
    BaseCumHazardTables = property(__BaseCumHazardTables.value, __BaseCumHazardTables.set, None, None)
    __EventValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'EventValues'), b'EventValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2EventValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1572, 4))
    EventValues = property(__EventValues.value, __EventValues.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __targetVariableName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetVariableName'), b'targetVariableName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_targetVariableName', FIELD_NAME)
    __targetVariableName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1365, 12)
    __targetVariableName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1365, 12)
    targetVariableName = property(__targetVariableName.value, __targetVariableName.set, None, None)
    __modelType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelType'), b'modelType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_modelType', STD_ANON_20, required=True)
    __modelType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1366, 12)
    __modelType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1366, 12)
    modelType = property(__modelType.value, __modelType.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1378, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1378, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1379, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1379, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1380, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1380, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __targetReferenceCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetReferenceCategory'), b'targetReferenceCategory', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_targetReferenceCategory', pyxb.binding.datatypes.string)
    __targetReferenceCategory._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1381, 12)
    __targetReferenceCategory._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1381, 12)
    targetReferenceCategory = property(__targetReferenceCategory.value, __targetReferenceCategory.set, None, None)
    __cumulativeLink = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'cumulativeLink'), b'cumulativeLink', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_cumulativeLink', CUMULATIVE_LINK_FUNCTION)
    __cumulativeLink._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1382, 12)
    __cumulativeLink._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1382, 12)
    cumulativeLink = property(__cumulativeLink.value, __cumulativeLink.set, None, None)
    __linkFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'linkFunction'), b'linkFunction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_linkFunction', LINK_FUNCTION)
    __linkFunction._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1383, 12)
    __linkFunction._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1383, 12)
    linkFunction = property(__linkFunction.value, __linkFunction.set, None, None)
    __linkParameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'linkParameter'), b'linkParameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_linkParameter', REAL_NUMBER)
    __linkParameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1384, 12)
    __linkParameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1384, 12)
    linkParameter = property(__linkParameter.value, __linkParameter.set, None, None)
    __trialsVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'trialsVariable'), b'trialsVariable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_trialsVariable', FIELD_NAME)
    __trialsVariable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1385, 12)
    __trialsVariable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1385, 12)
    trialsVariable = property(__trialsVariable.value, __trialsVariable.set, None, None)
    __trialsValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'trialsValue'), b'trialsValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_trialsValue', INT_NUMBER)
    __trialsValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1386, 12)
    __trialsValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1386, 12)
    trialsValue = property(__trialsValue.value, __trialsValue.set, None, None)
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'distribution'), b'distribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_distribution', STD_ANON_21)
    __distribution._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1387, 12)
    __distribution._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1387, 12)
    distribution = property(__distribution.value, __distribution.set, None, None)
    __distParameter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'distParameter'), b'distParameter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_distParameter', REAL_NUMBER)
    __distParameter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1400, 12)
    __distParameter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1400, 12)
    distParameter = property(__distParameter.value, __distParameter.set, None, None)
    __offsetVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'offsetVariable'), b'offsetVariable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_offsetVariable', FIELD_NAME)
    __offsetVariable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1401, 12)
    __offsetVariable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1401, 12)
    offsetVariable = property(__offsetVariable.value, __offsetVariable.set, None, None)
    __offsetValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'offsetValue'), b'offsetValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_offsetValue', REAL_NUMBER)
    __offsetValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1402, 12)
    __offsetValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1402, 12)
    offsetValue = property(__offsetValue.value, __offsetValue.set, None, None)
    __modelDF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelDF'), b'modelDF', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_modelDF', REAL_NUMBER)
    __modelDF._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1403, 12)
    __modelDF._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1403, 12)
    modelDF = property(__modelDF.value, __modelDF.set, None, None)
    __endTimeVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'endTimeVariable'), b'endTimeVariable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_endTimeVariable', FIELD_NAME)
    __endTimeVariable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1404, 12)
    __endTimeVariable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1404, 12)
    endTimeVariable = property(__endTimeVariable.value, __endTimeVariable.set, None, None)
    __startTimeVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'startTimeVariable'), b'startTimeVariable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_startTimeVariable', FIELD_NAME)
    __startTimeVariable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1405, 12)
    __startTimeVariable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1405, 12)
    startTimeVariable = property(__startTimeVariable.value, __startTimeVariable.set, None, None)
    __subjectIDVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'subjectIDVariable'), b'subjectIDVariable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_subjectIDVariable', FIELD_NAME)
    __subjectIDVariable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1406, 12)
    __subjectIDVariable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1406, 12)
    subjectIDVariable = property(__subjectIDVariable.value, __subjectIDVariable.set, None, None)
    __statusVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'statusVariable'), b'statusVariable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_statusVariable', FIELD_NAME)
    __statusVariable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1407, 12)
    __statusVariable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1407, 12)
    statusVariable = property(__statusVariable.value, __statusVariable.set, None, None)
    __baselineStrataVariable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'baselineStrataVariable'), b'baselineStrataVariable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_baselineStrataVariable', FIELD_NAME)
    __baselineStrataVariable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1408, 12)
    __baselineStrataVariable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1408, 12)
    baselineStrataVariable = property(__baselineStrataVariable.value, __baselineStrataVariable.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_133_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1409, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1409, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ParameterList.name(): __ParameterList, 
       __FactorList.name(): __FactorList, 
       __CovariateList.name(): __CovariateList, 
       __PPMatrix.name(): __PPMatrix, 
       __PCovMatrix.name(): __PCovMatrix, 
       __ParamMatrix.name(): __ParamMatrix, 
       __BaseCumHazardTables.name(): __BaseCumHazardTables, 
       __EventValues.name(): __EventValues, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__targetVariableName.name(): __targetVariableName, 
       __modelType.name(): __modelType, 
       __modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __targetReferenceCategory.name(): __targetReferenceCategory, 
       __cumulativeLink.name(): __cumulativeLink, 
       __linkFunction.name(): __linkFunction, 
       __linkParameter.name(): __linkParameter, 
       __trialsVariable.name(): __trialsVariable, 
       __trialsValue.name(): __trialsValue, 
       __distribution.name(): __distribution, 
       __distParameter.name(): __distParameter, 
       __offsetVariable.name(): __offsetVariable, 
       __offsetValue.name(): __offsetValue, 
       __modelDF.name(): __modelDF, 
       __endTimeVariable.name(): __endTimeVariable, 
       __startTimeVariable.name(): __startTimeVariable, 
       __subjectIDVariable.name(): __subjectIDVariable, 
       __statusVariable.name(): __statusVariable, 
       __baselineStrataVariable.name(): __baselineStrataVariable, 
       __isScorable.name(): __isScorable})


class CTD_ANON_134(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1421, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_134_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_134_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1425, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1425, 12)
    name = property(__name.value, __name.set, None, None)
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'label'), b'label', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_134_label', pyxb.binding.datatypes.string)
    __label._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1426, 12)
    __label._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1426, 12)
    label = property(__label.value, __label.set, None, None)
    __referencePoint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'referencePoint'), b'referencePoint', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_134_referencePoint', REAL_NUMBER, unicode_default=b'0')
    __referencePoint._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1427, 12)
    __referencePoint._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1427, 12)
    referencePoint = property(__referencePoint.value, __referencePoint.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__name.name(): __name, 
       __label.name(): __label, 
       __referencePoint.name(): __referencePoint})


class CTD_ANON_135(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1447, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_135_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Matrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), b'Matrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_135_httpwww_dmg_orgPMML_4_2Matrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4))
    Matrix = property(__Matrix.value, __Matrix.set, None, None)
    __Categories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Categories'), b'Categories', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_135_httpwww_dmg_orgPMML_4_2Categories', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1457, 4))
    Categories = property(__Categories.value, __Categories.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_135_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1453, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1453, 12)
    name = property(__name.value, __name.set, None, None)
    __contrastMatrixType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'contrastMatrixType'), b'contrastMatrixType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_135_contrastMatrixType', pyxb.binding.datatypes.string)
    __contrastMatrixType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1454, 12)
    __contrastMatrixType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1454, 12)
    contrastMatrixType = property(__contrastMatrixType.value, __contrastMatrixType.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Matrix.name(): __Matrix, 
       __Categories.name(): __Categories})
    _AttributeMap.update({__name.name(): __name, 
       __contrastMatrixType.name(): __contrastMatrixType})


class CTD_ANON_136(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1482, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_136_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_136_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1486, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1486, 12)
    value_ = property(__value.value, __value.set, None, None)
    __predictorName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'predictorName'), b'predictorName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_136_predictorName', FIELD_NAME, required=True)
    __predictorName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1487, 12)
    __predictorName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1487, 12)
    predictorName = property(__predictorName.value, __predictorName.set, None, None)
    __parameterName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'parameterName'), b'parameterName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_136_parameterName', pyxb.binding.datatypes.string, required=True)
    __parameterName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1488, 12)
    __parameterName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1488, 12)
    parameterName = property(__parameterName.value, __parameterName.set, None, None)
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetCategory'), b'targetCategory', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_136_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1489, 12)
    __targetCategory._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1489, 12)
    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__value.name(): __value, 
       __predictorName.name(): __predictorName, 
       __parameterName.name(): __parameterName, 
       __targetCategory.name(): __targetCategory})


class CTD_ANON_137(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1493, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_137_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __PCovCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PCovCell'), b'PCovCell', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_137_httpwww_dmg_orgPMML_4_2PCovCell', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1508, 4))
    PCovCell = property(__PCovCell.value, __PCovCell.set, None, None)
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_137_type', STD_ANON_22)
    __type._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1498, 12)
    __type._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1498, 12)
    type = property(__type.value, __type.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __PCovCell.name(): __PCovCell})
    _AttributeMap.update({__type.name(): __type})


class CTD_ANON_138(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1509, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_138_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __pRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'pRow'), b'pRow', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_138_pRow', pyxb.binding.datatypes.string, required=True)
    __pRow._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1513, 12)
    __pRow._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1513, 12)
    pRow = property(__pRow.value, __pRow.set, None, None)
    __pCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'pCol'), b'pCol', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_138_pCol', pyxb.binding.datatypes.string, required=True)
    __pCol._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1514, 12)
    __pCol._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1514, 12)
    pCol = property(__pCol.value, __pCol.set, None, None)
    __tRow = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'tRow'), b'tRow', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_138_tRow', pyxb.binding.datatypes.string)
    __tRow._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1515, 12)
    __tRow._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1515, 12)
    tRow = property(__tRow.value, __tRow.set, None, None)
    __tCol = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'tCol'), b'tCol', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_138_tCol', pyxb.binding.datatypes.string)
    __tCol._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1516, 12)
    __tCol._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1516, 12)
    tCol = property(__tCol.value, __tCol.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_138_value', REAL_NUMBER, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1517, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1517, 12)
    value_ = property(__value.value, __value.set, None, None)
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetCategory'), b'targetCategory', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_138_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1518, 12)
    __targetCategory._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1518, 12)
    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__pRow.name(): __pRow, 
       __pCol.name(): __pCol, 
       __tRow.name(): __tRow, 
       __tCol.name(): __tCol, 
       __value.name(): __value, 
       __targetCategory.name(): __targetCategory})


class CTD_ANON_139(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1530, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_139_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetCategory'), b'targetCategory', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_139_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1534, 12)
    __targetCategory._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1534, 12)
    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)
    __parameterName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'parameterName'), b'parameterName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_139_parameterName', pyxb.binding.datatypes.string, required=True)
    __parameterName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1535, 12)
    __parameterName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1535, 12)
    parameterName = property(__parameterName.value, __parameterName.set, None, None)
    __beta = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'beta'), b'beta', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_139_beta', REAL_NUMBER, required=True)
    __beta._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1536, 12)
    __beta._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1536, 12)
    beta = property(__beta.value, __beta.set, None, None)
    __df = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'df'), b'df', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_139_df', INT_NUMBER)
    __df._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1537, 12)
    __df._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1537, 12)
    df = property(__df.value, __df.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__targetCategory.name(): __targetCategory, 
       __parameterName.name(): __parameterName, 
       __beta.name(): __beta, 
       __df.name(): __df})


class CTD_ANON_140(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1541, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_140_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __BaselineStratum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BaselineStratum'), b'BaselineStratum', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_140_httpwww_dmg_orgPMML_4_2BaselineStratum', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1552, 4))
    BaselineStratum = property(__BaselineStratum.value, __BaselineStratum.set, None, None)
    __BaselineCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BaselineCell'), b'BaselineCell', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_140_httpwww_dmg_orgPMML_4_2BaselineCell', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1563, 4))
    BaselineCell = property(__BaselineCell.value, __BaselineCell.set, None, None)
    __maxTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maxTime'), b'maxTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_140_maxTime', REAL_NUMBER)
    __maxTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1549, 12)
    __maxTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1549, 12)
    maxTime = property(__maxTime.value, __maxTime.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __BaselineStratum.name(): __BaselineStratum, 
       __BaselineCell.name(): __BaselineCell})
    _AttributeMap.update({__maxTime.name(): __maxTime})


class CTD_ANON_141(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1553, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_141_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __BaselineCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'BaselineCell'), b'BaselineCell', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_141_httpwww_dmg_orgPMML_4_2BaselineCell', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1563, 4))
    BaselineCell = property(__BaselineCell.value, __BaselineCell.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_141_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1558, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1558, 12)
    value_ = property(__value.value, __value.set, None, None)
    __label = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'label'), b'label', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_141_label', pyxb.binding.datatypes.string)
    __label._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1559, 12)
    __label._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1559, 12)
    label = property(__label.value, __label.set, None, None)
    __maxTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maxTime'), b'maxTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_141_maxTime', REAL_NUMBER, required=True)
    __maxTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1560, 12)
    __maxTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1560, 12)
    maxTime = property(__maxTime.value, __maxTime.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __BaselineCell.name(): __BaselineCell})
    _AttributeMap.update({__value.name(): __value, 
       __label.name(): __label, 
       __maxTime.name(): __maxTime})


class CTD_ANON_142(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1564, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_142_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'time'), b'time', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_142_time', REAL_NUMBER, required=True)
    __time._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1568, 12)
    __time._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1568, 12)
    time = property(__time.value, __time.set, None, None)
    __cumHazard = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'cumHazard'), b'cumHazard', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_142_cumHazard', REAL_NUMBER, required=True)
    __cumHazard._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1569, 12)
    __cumHazard._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1569, 12)
    cumHazard = property(__cumHazard.value, __cumHazard.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__time.name(): __time, 
       __cumHazard.name(): __cumHazard})


class CTD_ANON_143(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1614, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_143_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Counts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Counts'), b'Counts', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_143_httpwww_dmg_orgPMML_4_2Counts', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1634, 4))
    Counts = property(__Counts.value, __Counts.set, None, None)
    __NumericInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NumericInfo'), b'NumericInfo', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_143_httpwww_dmg_orgPMML_4_2NumericInfo', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1645, 4))
    NumericInfo = property(__NumericInfo.value, __NumericInfo.set, None, None)
    __DiscrStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DiscrStats'), b'DiscrStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_143_httpwww_dmg_orgPMML_4_2DiscrStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1668, 4))
    DiscrStats = property(__DiscrStats.value, __DiscrStats.set, None, None)
    __ContStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ContStats'), b'ContStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_143_httpwww_dmg_orgPMML_4_2ContStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1677, 4))
    ContStats = property(__ContStats.value, __ContStats.set, None, None)
    __Anova = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Anova'), b'Anova', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_143_httpwww_dmg_orgPMML_4_2Anova', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1725, 4))
    Anova = property(__Anova.value, __Anova.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_143_field', FIELD_NAME)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1623, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1623, 12)
    field = property(__field.value, __field.set, None, None)
    __weighted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'weighted'), b'weighted', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_143_weighted', STD_ANON_23, unicode_default=b'0')
    __weighted._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1624, 12)
    __weighted._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1624, 12)
    weighted = property(__weighted.value, __weighted.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Counts.name(): __Counts, 
       __NumericInfo.name(): __NumericInfo, 
       __DiscrStats.name(): __DiscrStats, 
       __ContStats.name(): __ContStats, 
       __Anova.name(): __Anova})
    _AttributeMap.update({__field.name(): __field, 
       __weighted.name(): __weighted})


class CTD_ANON_144(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1635, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_144_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __totalFreq = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'totalFreq'), b'totalFreq', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_144_totalFreq', NUMBER, required=True)
    __totalFreq._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1639, 12)
    __totalFreq._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1639, 12)
    totalFreq = property(__totalFreq.value, __totalFreq.set, None, None)
    __missingFreq = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'missingFreq'), b'missingFreq', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_144_missingFreq', NUMBER)
    __missingFreq._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1640, 12)
    __missingFreq._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1640, 12)
    missingFreq = property(__missingFreq.value, __missingFreq.set, None, None)
    __invalidFreq = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'invalidFreq'), b'invalidFreq', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_144_invalidFreq', NUMBER)
    __invalidFreq._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1641, 12)
    __invalidFreq._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1641, 12)
    invalidFreq = property(__invalidFreq.value, __invalidFreq.set, None, None)
    __cardinality = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'cardinality'), b'cardinality', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_144_cardinality', pyxb.binding.datatypes.nonNegativeInteger)
    __cardinality._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1642, 12)
    __cardinality._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1642, 12)
    cardinality = property(__cardinality.value, __cardinality.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__totalFreq.name(): __totalFreq, 
       __missingFreq.name(): __missingFreq, 
       __invalidFreq.name(): __invalidFreq, 
       __cardinality.name(): __cardinality})


class CTD_ANON_145(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1646, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_145_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Quantile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Quantile'), b'Quantile', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_145_httpwww_dmg_orgPMML_4_2Quantile', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1659, 4))
    Quantile = property(__Quantile.value, __Quantile.set, None, None)
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimum'), b'minimum', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_145_minimum', NUMBER)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1651, 12)
    __minimum._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1651, 12)
    minimum = property(__minimum.value, __minimum.set, None, None)
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maximum'), b'maximum', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_145_maximum', NUMBER)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1652, 12)
    __maximum._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1652, 12)
    maximum = property(__maximum.value, __maximum.set, None, None)
    __mean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mean'), b'mean', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_145_mean', NUMBER)
    __mean._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1653, 12)
    __mean._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1653, 12)
    mean = property(__mean.value, __mean.set, None, None)
    __standardDeviation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'standardDeviation'), b'standardDeviation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_145_standardDeviation', NUMBER)
    __standardDeviation._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1654, 12)
    __standardDeviation._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1654, 12)
    standardDeviation = property(__standardDeviation.value, __standardDeviation.set, None, None)
    __median = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'median'), b'median', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_145_median', NUMBER)
    __median._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1655, 12)
    __median._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1655, 12)
    median = property(__median.value, __median.set, None, None)
    __interQuartileRange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'interQuartileRange'), b'interQuartileRange', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_145_interQuartileRange', NUMBER)
    __interQuartileRange._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1656, 12)
    __interQuartileRange._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1656, 12)
    interQuartileRange = property(__interQuartileRange.value, __interQuartileRange.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Quantile.name(): __Quantile})
    _AttributeMap.update({__minimum.name(): __minimum, 
       __maximum.name(): __maximum, 
       __mean.name(): __mean, 
       __standardDeviation.name(): __standardDeviation, 
       __median.name(): __median, 
       __interQuartileRange.name(): __interQuartileRange})


class CTD_ANON_146(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1660, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_146_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __quantileLimit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'quantileLimit'), b'quantileLimit', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_146_quantileLimit', PERCENTAGE_NUMBER, required=True)
    __quantileLimit._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1664, 12)
    __quantileLimit._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1664, 12)
    quantileLimit = property(__quantileLimit.value, __quantileLimit.set, None, None)
    __quantileValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'quantileValue'), b'quantileValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_146_quantileValue', NUMBER, required=True)
    __quantileValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1665, 12)
    __quantileValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1665, 12)
    quantileValue = property(__quantileValue.value, __quantileValue.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__quantileLimit.name(): __quantileLimit, 
       __quantileValue.name(): __quantileValue})


class CTD_ANON_147(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1678, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_147_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_147_httpwww_dmg_orgPMML_4_2Array', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __Interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Interval'), b'Interval', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_147_httpwww_dmg_orgPMML_4_2Interval', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4))
    Interval = property(__Interval.value, __Interval.set, None, None)
    __totalValuesSum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'totalValuesSum'), b'totalValuesSum', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_147_totalValuesSum', NUMBER)
    __totalValuesSum._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1684, 12)
    __totalValuesSum._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1684, 12)
    totalValuesSum = property(__totalValuesSum.value, __totalValuesSum.set, None, None)
    __totalSquaresSum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'totalSquaresSum'), b'totalSquaresSum', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_147_totalSquaresSum', NUMBER)
    __totalSquaresSum._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1685, 12)
    __totalSquaresSum._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1685, 12)
    totalSquaresSum = property(__totalSquaresSum.value, __totalSquaresSum.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array, 
       __Interval.name(): __Interval})
    _AttributeMap.update({__totalValuesSum.name(): __totalValuesSum, 
       __totalSquaresSum.name(): __totalSquaresSum})


class CTD_ANON_148(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1703, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1707, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1707, 12)
    name = property(__name.value, __name.set, None, None)
    __category = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'category'), b'category', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_category', pyxb.binding.datatypes.string)
    __category._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1708, 12)
    __category._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1708, 12)
    category = property(__category.value, __category.set, None, None)
    __exponent = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'exponent'), b'exponent', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_exponent', INT_NUMBER, unicode_default=b'1')
    __exponent._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1709, 12)
    __exponent._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1709, 12)
    exponent = property(__exponent.value, __exponent.set, None, None)
    __isIntercept = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isIntercept'), b'isIntercept', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_isIntercept', pyxb.binding.datatypes.boolean, unicode_default=b'false')
    __isIntercept._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1710, 12)
    __isIntercept._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1710, 12)
    isIntercept = property(__isIntercept.value, __isIntercept.set, None, None)
    __importance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'importance'), b'importance', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_importance', PROB_NUMBER)
    __importance._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1711, 12)
    __importance._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1711, 12)
    importance = property(__importance.value, __importance.set, None, None)
    __stdError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'stdError'), b'stdError', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_stdError', NUMBER)
    __stdError._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1712, 12)
    __stdError._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1712, 12)
    stdError = property(__stdError.value, __stdError.set, None, None)
    __tValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'tValue'), b'tValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_tValue', NUMBER)
    __tValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1713, 12)
    __tValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1713, 12)
    tValue = property(__tValue.value, __tValue.set, None, None)
    __chiSquareValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'chiSquareValue'), b'chiSquareValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_chiSquareValue', NUMBER)
    __chiSquareValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1714, 12)
    __chiSquareValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1714, 12)
    chiSquareValue = property(__chiSquareValue.value, __chiSquareValue.set, None, None)
    __fStatistic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fStatistic'), b'fStatistic', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_fStatistic', NUMBER)
    __fStatistic._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1715, 12)
    __fStatistic._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1715, 12)
    fStatistic = property(__fStatistic.value, __fStatistic.set, None, None)
    __dF = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dF'), b'dF', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_dF', NUMBER)
    __dF._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1716, 12)
    __dF._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1716, 12)
    dF = property(__dF.value, __dF.set, None, None)
    __pValueAlpha = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'pValueAlpha'), b'pValueAlpha', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_pValueAlpha', PROB_NUMBER)
    __pValueAlpha._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1717, 12)
    __pValueAlpha._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1717, 12)
    pValueAlpha = property(__pValueAlpha.value, __pValueAlpha.set, None, None)
    __pValueInitial = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'pValueInitial'), b'pValueInitial', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_pValueInitial', PROB_NUMBER)
    __pValueInitial._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1718, 12)
    __pValueInitial._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1718, 12)
    pValueInitial = property(__pValueInitial.value, __pValueInitial.set, None, None)
    __pValueFinal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'pValueFinal'), b'pValueFinal', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_pValueFinal', PROB_NUMBER)
    __pValueFinal._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1719, 12)
    __pValueFinal._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1719, 12)
    pValueFinal = property(__pValueFinal.value, __pValueFinal.set, None, None)
    __confidenceLevel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'confidenceLevel'), b'confidenceLevel', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_confidenceLevel', PROB_NUMBER, unicode_default=b'0.95')
    __confidenceLevel._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1720, 12)
    __confidenceLevel._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1720, 12)
    confidenceLevel = property(__confidenceLevel.value, __confidenceLevel.set, None, None)
    __confidenceLowerBound = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'confidenceLowerBound'), b'confidenceLowerBound', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_confidenceLowerBound', NUMBER)
    __confidenceLowerBound._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1721, 12)
    __confidenceLowerBound._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1721, 12)
    confidenceLowerBound = property(__confidenceLowerBound.value, __confidenceLowerBound.set, None, None)
    __confidenceUpperBound = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'confidenceUpperBound'), b'confidenceUpperBound', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_148_confidenceUpperBound', NUMBER)
    __confidenceUpperBound._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1722, 12)
    __confidenceUpperBound._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1722, 12)
    confidenceUpperBound = property(__confidenceUpperBound.value, __confidenceUpperBound.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__name.name(): __name, 
       __category.name(): __category, 
       __exponent.name(): __exponent, 
       __isIntercept.name(): __isIntercept, 
       __importance.name(): __importance, 
       __stdError.name(): __stdError, 
       __tValue.name(): __tValue, 
       __chiSquareValue.name(): __chiSquareValue, 
       __fStatistic.name(): __fStatistic, 
       __dF.name(): __dF, 
       __pValueAlpha.name(): __pValueAlpha, 
       __pValueInitial.name(): __pValueInitial, 
       __pValueFinal.name(): __pValueFinal, 
       __confidenceLevel.name(): __confidenceLevel, 
       __confidenceLowerBound.name(): __confidenceLowerBound, 
       __confidenceUpperBound.name(): __confidenceUpperBound})


class CTD_ANON_149(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1726, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_149_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __AnovaRow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'AnovaRow'), b'AnovaRow', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_149_httpwww_dmg_orgPMML_4_2AnovaRow', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1734, 4))
    AnovaRow = property(__AnovaRow.value, __AnovaRow.set, None, None)
    __target = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'target'), b'target', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_149_target', FIELD_NAME)
    __target._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1731, 12)
    __target._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1731, 12)
    target = property(__target.value, __target.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __AnovaRow.name(): __AnovaRow})
    _AttributeMap.update({__target.name(): __target})


class CTD_ANON_150(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1735, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_150_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_150_type', STD_ANON_24, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1739, 12)
    __type._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1739, 12)
    type = property(__type.value, __type.set, None, None)
    __sumOfSquares = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'sumOfSquares'), b'sumOfSquares', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_150_sumOfSquares', NUMBER, required=True)
    __sumOfSquares._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1748, 12)
    __sumOfSquares._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1748, 12)
    sumOfSquares = property(__sumOfSquares.value, __sumOfSquares.set, None, None)
    __degreesOfFreedom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'degreesOfFreedom'), b'degreesOfFreedom', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_150_degreesOfFreedom', NUMBER, required=True)
    __degreesOfFreedom._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1749, 12)
    __degreesOfFreedom._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1749, 12)
    degreesOfFreedom = property(__degreesOfFreedom.value, __degreesOfFreedom.set, None, None)
    __meanOfSquares = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'meanOfSquares'), b'meanOfSquares', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_150_meanOfSquares', NUMBER)
    __meanOfSquares._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1750, 12)
    __meanOfSquares._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1750, 12)
    meanOfSquares = property(__meanOfSquares.value, __meanOfSquares.set, None, None)
    __fValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fValue'), b'fValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_150_fValue', NUMBER)
    __fValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1751, 12)
    __fValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1751, 12)
    fValue = property(__fValue.value, __fValue.set, None, None)
    __pValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'pValue'), b'pValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_150_pValue', PROB_NUMBER)
    __pValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1752, 12)
    __pValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1752, 12)
    pValue = property(__pValue.value, __pValue.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__type.name(): __type, 
       __sumOfSquares.name(): __sumOfSquares, 
       __degreesOfFreedom.name(): __degreesOfFreedom, 
       __meanOfSquares.name(): __meanOfSquares, 
       __fValue.name(): __fValue, 
       __pValue.name(): __pValue})


class CTD_ANON_151(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1756, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_151_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __PartitionFieldStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PartitionFieldStats'), b'PartitionFieldStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_151_httpwww_dmg_orgPMML_4_2PartitionFieldStats', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1765, 4))
    PartitionFieldStats = property(__PartitionFieldStats.value, __PartitionFieldStats.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_151_name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1761, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1761, 12)
    name = property(__name.value, __name.set, None, None)
    __size = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'size'), b'size', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_151_size', NUMBER)
    __size._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1762, 12)
    __size._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1762, 12)
    size = property(__size.value, __size.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __PartitionFieldStats.name(): __PartitionFieldStats})
    _AttributeMap.update({__name.name(): __name, 
       __size.name(): __size})


class CTD_ANON_152(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1766, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_152_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_152_httpwww_dmg_orgPMML_4_2Array', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __Counts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Counts'), b'Counts', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_152_httpwww_dmg_orgPMML_4_2Counts', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1634, 4))
    Counts = property(__Counts.value, __Counts.set, None, None)
    __NumericInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NumericInfo'), b'NumericInfo', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_152_httpwww_dmg_orgPMML_4_2NumericInfo', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1645, 4))
    NumericInfo = property(__NumericInfo.value, __NumericInfo.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_152_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1773, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1773, 12)
    field = property(__field.value, __field.set, None, None)
    __weighted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'weighted'), b'weighted', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_152_weighted', STD_ANON_25, unicode_default=b'0')
    __weighted._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1774, 12)
    __weighted._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1774, 12)
    weighted = property(__weighted.value, __weighted.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array, 
       __Counts.name(): __Counts, 
       __NumericInfo.name(): __NumericInfo})
    _AttributeMap.update({__field.name(): __field, 
       __weighted.name(): __weighted})


class CTD_ANON_153(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1815, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Apply'), b'Apply', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2Apply', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4))
    Apply = property(__Apply.value, __Apply.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Constant'), b'Constant', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2Constant', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4))
    Constant = property(__Constant.value, __Constant.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2FieldRef', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), b'NormContinuous', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2NormContinuous', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4))
    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), b'NormDiscrete', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2NormDiscrete', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4))
    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), b'Discretize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2Discretize', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4))
    Discretize = property(__Discretize.value, __Discretize.set, None, None)
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), b'MapValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2MapValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4))
    MapValues = property(__MapValues.value, __MapValues.set, None, None)
    __TextIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), b'TextIndex', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2TextIndex', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4))
    TextIndex = property(__TextIndex.value, __TextIndex.set, None, None)
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), b'Aggregate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2Aggregate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4))
    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Value'), b'Value', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_httpwww_dmg_orgPMML_4_2Value', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2790, 4))
    Value = property(__Value.value, __Value.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_name', FIELD_NAME)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1821, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1821, 12)
    name = property(__name.value, __name.set, None, None)
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayName'), b'displayName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_displayName', pyxb.binding.datatypes.string)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1822, 12)
    __displayName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1822, 12)
    displayName = property(__displayName.value, __displayName.set, None, None)
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'optype'), b'optype', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_optype', OPTYPE, required=True)
    __optype._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1823, 12)
    __optype._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1823, 12)
    optype = property(__optype.value, __optype.set, None, None)
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_153_dataType', DATATYPE, required=True)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1824, 12)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1824, 12)
    dataType = property(__dataType.value, __dataType.set, None, None)
    _ElementMap.update({__Apply.name(): __Apply, 
       __Extension.name(): __Extension, 
       __Constant.name(): __Constant, 
       __FieldRef.name(): __FieldRef, 
       __NormContinuous.name(): __NormContinuous, 
       __NormDiscrete.name(): __NormDiscrete, 
       __Discretize.name(): __Discretize, 
       __MapValues.name(): __MapValues, 
       __TextIndex.name(): __TextIndex, 
       __Aggregate.name(): __Aggregate, 
       __Value.name(): __Value})
    _AttributeMap.update({__name.name(): __name, 
       __displayName.name(): __displayName, 
       __optype.name(): __optype, 
       __dataType.name(): __dataType})


class CTD_ANON_154(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1828, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_154_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1831, 20)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1831, 20)
    dataType = property(__dataType.value, __dataType.set, None, None)
    _ElementMap.update({})
    _AttributeMap.update({__dataType.name(): __dataType})


class CTD_ANON_155(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1837, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_155_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_155_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1841, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1841, 12)
    field = property(__field.value, __field.set, None, None)
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mapMissingTo'), b'mapMissingTo', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_155_mapMissingTo', pyxb.binding.datatypes.string)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1842, 12)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1842, 12)
    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __mapMissingTo.name(): __mapMissingTo})


class CTD_ANON_156(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1846, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_156_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __LinearNorm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LinearNorm'), b'LinearNorm', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_156_httpwww_dmg_orgPMML_4_2LinearNorm', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1856, 4))
    LinearNorm = property(__LinearNorm.value, __LinearNorm.set, None, None)
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mapMissingTo'), b'mapMissingTo', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_156_mapMissingTo', NUMBER)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1851, 12)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1851, 12)
    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_156_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1852, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1852, 12)
    field = property(__field.value, __field.set, None, None)
    __outliers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'outliers'), b'outliers', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_156_outliers', OUTLIER_TREATMENT_METHOD, unicode_default=b'asIs')
    __outliers._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1853, 12)
    __outliers._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1853, 12)
    outliers = property(__outliers.value, __outliers.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __LinearNorm.name(): __LinearNorm})
    _AttributeMap.update({__mapMissingTo.name(): __mapMissingTo, 
       __field.name(): __field, 
       __outliers.name(): __outliers})


class CTD_ANON_157(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1857, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_157_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __orig = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'orig'), b'orig', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_157_orig', NUMBER, required=True)
    __orig._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1861, 12)
    __orig._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1861, 12)
    orig = property(__orig.value, __orig.set, None, None)
    __norm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'norm'), b'norm', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_157_norm', NUMBER, required=True)
    __norm._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1862, 12)
    __norm._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1862, 12)
    norm = property(__norm.value, __norm.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__orig.name(): __orig, 
       __norm.name(): __norm})


class CTD_ANON_158(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1866, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_158_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_158_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1870, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1870, 12)
    field = property(__field.value, __field.set, None, None)
    __method = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'method'), b'method', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_158_method', STD_ANON_26, fixed=True, unicode_default=b'indicator')
    __method._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1871, 12)
    __method._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1871, 12)
    method = property(__method.value, __method.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_158_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1878, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1878, 12)
    value_ = property(__value.value, __value.set, None, None)
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mapMissingTo'), b'mapMissingTo', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_158_mapMissingTo', NUMBER)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1879, 12)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1879, 12)
    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __method.name(): __method, 
       __value.name(): __value, 
       __mapMissingTo.name(): __mapMissingTo})


class CTD_ANON_159(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1883, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_159_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __DiscretizeBin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DiscretizeBin'), b'DiscretizeBin', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_159_httpwww_dmg_orgPMML_4_2DiscretizeBin', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1894, 4))
    DiscretizeBin = property(__DiscretizeBin.value, __DiscretizeBin.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_159_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1888, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1888, 12)
    field = property(__field.value, __field.set, None, None)
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mapMissingTo'), b'mapMissingTo', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_159_mapMissingTo', pyxb.binding.datatypes.string)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1889, 12)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1889, 12)
    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultValue'), b'defaultValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_159_defaultValue', pyxb.binding.datatypes.string)
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1890, 12)
    __defaultValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1890, 12)
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_159_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1891, 12)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1891, 12)
    dataType = property(__dataType.value, __dataType.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __DiscretizeBin.name(): __DiscretizeBin})
    _AttributeMap.update({__field.name(): __field, 
       __mapMissingTo.name(): __mapMissingTo, 
       __defaultValue.name(): __defaultValue, 
       __dataType.name(): __dataType})


class CTD_ANON_160(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1904, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_160_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __TableLocator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), b'TableLocator', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_160_httpwww_dmg_orgPMML_4_2TableLocator', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4))
    TableLocator = property(__TableLocator.value, __TableLocator.set, None, None)
    __InlineTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), b'InlineTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_160_httpwww_dmg_orgPMML_4_2InlineTable', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4))
    InlineTable = property(__InlineTable.value, __InlineTable.set, None, None)
    __FieldColumnPair = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldColumnPair'), b'FieldColumnPair', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_160_httpwww_dmg_orgPMML_4_2FieldColumnPair', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1919, 4))
    FieldColumnPair = property(__FieldColumnPair.value, __FieldColumnPair.set, None, None)
    __mapMissingTo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mapMissingTo'), b'mapMissingTo', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_160_mapMissingTo', pyxb.binding.datatypes.string)
    __mapMissingTo._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1913, 12)
    __mapMissingTo._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1913, 12)
    mapMissingTo = property(__mapMissingTo.value, __mapMissingTo.set, None, None)
    __defaultValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultValue'), b'defaultValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_160_defaultValue', pyxb.binding.datatypes.string)
    __defaultValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1914, 12)
    __defaultValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1914, 12)
    defaultValue = property(__defaultValue.value, __defaultValue.set, None, None)
    __outputColumn = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'outputColumn'), b'outputColumn', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_160_outputColumn', pyxb.binding.datatypes.string, required=True)
    __outputColumn._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1915, 12)
    __outputColumn._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1915, 12)
    outputColumn = property(__outputColumn.value, __outputColumn.set, None, None)
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_160_dataType', DATATYPE)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1916, 12)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1916, 12)
    dataType = property(__dataType.value, __dataType.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __TableLocator.name(): __TableLocator, 
       __InlineTable.name(): __InlineTable, 
       __FieldColumnPair.name(): __FieldColumnPair})
    _AttributeMap.update({__mapMissingTo.name(): __mapMissingTo, 
       __defaultValue.name(): __defaultValue, 
       __outputColumn.name(): __outputColumn, 
       __dataType.name(): __dataType})


class CTD_ANON_161(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1920, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_161_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_161_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1924, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1924, 12)
    field = property(__field.value, __field.set, None, None)
    __column = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'column'), b'column', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_161_column', pyxb.binding.datatypes.string, required=True)
    __column._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1925, 12)
    __column._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1925, 12)
    column = property(__column.value, __column.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __column.name(): __column})


class CTD_ANON_162(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1929, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Apply = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Apply'), b'Apply', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2Apply', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4))
    Apply = property(__Apply.value, __Apply.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Constant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Constant'), b'Constant', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2Constant', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4))
    Constant = property(__Constant.value, __Constant.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2FieldRef', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __NormContinuous = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), b'NormContinuous', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2NormContinuous', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4))
    NormContinuous = property(__NormContinuous.value, __NormContinuous.set, None, None)
    __NormDiscrete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), b'NormDiscrete', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2NormDiscrete', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4))
    NormDiscrete = property(__NormDiscrete.value, __NormDiscrete.set, None, None)
    __Discretize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), b'Discretize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2Discretize', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4))
    Discretize = property(__Discretize.value, __Discretize.set, None, None)
    __MapValues = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), b'MapValues', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2MapValues', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4))
    MapValues = property(__MapValues.value, __MapValues.set, None, None)
    __TextIndex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), b'TextIndex', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2TextIndex', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4))
    TextIndex = property(__TextIndex.value, __TextIndex.set, None, None)
    __TextIndexNormalization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TextIndexNormalization'), b'TextIndexNormalization', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2TextIndexNormalization', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1960, 4))
    TextIndexNormalization = property(__TextIndexNormalization.value, __TextIndexNormalization.set, None, None)
    __Aggregate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), b'Aggregate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_httpwww_dmg_orgPMML_4_2Aggregate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4))
    Aggregate = property(__Aggregate.value, __Aggregate.set, None, None)
    __textField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'textField'), b'textField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_textField', FIELD_NAME, required=True)
    __textField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1935, 12)
    __textField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1935, 12)
    textField = property(__textField.value, __textField.set, None, None)
    __localTermWeights = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'localTermWeights'), b'localTermWeights', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_localTermWeights', STD_ANON_27, unicode_default=b'termFrequency')
    __localTermWeights._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1936, 12)
    __localTermWeights._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1936, 12)
    localTermWeights = property(__localTermWeights.value, __localTermWeights.set, None, None)
    __isCaseSensitive = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isCaseSensitive'), b'isCaseSensitive', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_isCaseSensitive', pyxb.binding.datatypes.boolean, unicode_default=b'false')
    __isCaseSensitive._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1946, 12)
    __isCaseSensitive._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1946, 12)
    isCaseSensitive = property(__isCaseSensitive.value, __isCaseSensitive.set, None, None)
    __maxLevenshteinDistance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maxLevenshteinDistance'), b'maxLevenshteinDistance', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_maxLevenshteinDistance', pyxb.binding.datatypes.integer, unicode_default=b'0')
    __maxLevenshteinDistance._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1947, 12)
    __maxLevenshteinDistance._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1947, 12)
    maxLevenshteinDistance = property(__maxLevenshteinDistance.value, __maxLevenshteinDistance.set, None, None)
    __countHits = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'countHits'), b'countHits', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_countHits', STD_ANON_28, unicode_default=b'allHits')
    __countHits._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1948, 12)
    __countHits._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1948, 12)
    countHits = property(__countHits.value, __countHits.set, None, None)
    __wordSeparatorCharacterRE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'wordSeparatorCharacterRE'), b'wordSeparatorCharacterRE', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_wordSeparatorCharacterRE', pyxb.binding.datatypes.string, unicode_default=b'\\s')
    __wordSeparatorCharacterRE._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1956, 12)
    __wordSeparatorCharacterRE._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1956, 12)
    wordSeparatorCharacterRE = property(__wordSeparatorCharacterRE.value, __wordSeparatorCharacterRE.set, None, None)
    __tokenize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'tokenize'), b'tokenize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_162_tokenize', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __tokenize._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1957, 12)
    __tokenize._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1957, 12)
    tokenize = property(__tokenize.value, __tokenize.set, None, None)
    _ElementMap.update({__Apply.name(): __Apply, 
       __Extension.name(): __Extension, 
       __Constant.name(): __Constant, 
       __FieldRef.name(): __FieldRef, 
       __NormContinuous.name(): __NormContinuous, 
       __NormDiscrete.name(): __NormDiscrete, 
       __Discretize.name(): __Discretize, 
       __MapValues.name(): __MapValues, 
       __TextIndex.name(): __TextIndex, 
       __TextIndexNormalization.name(): __TextIndexNormalization, 
       __Aggregate.name(): __Aggregate})
    _AttributeMap.update({__textField.name(): __textField, 
       __localTermWeights.name(): __localTermWeights, 
       __isCaseSensitive.name(): __isCaseSensitive, 
       __maxLevenshteinDistance.name(): __maxLevenshteinDistance, 
       __countHits.name(): __countHits, 
       __wordSeparatorCharacterRE.name(): __wordSeparatorCharacterRE, 
       __tokenize.name(): __tokenize})


class CTD_ANON_163(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1980, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_163_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_163_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1984, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1984, 12)
    field = property(__field.value, __field.set, None, None)
    __function = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'function'), b'function', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_163_function', STD_ANON_29, required=True)
    __function._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1985, 12)
    __function._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1985, 12)
    function = property(__function.value, __function.set, None, None)
    __groupField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'groupField'), b'groupField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_163_groupField', FIELD_NAME)
    __groupField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1997, 12)
    __groupField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1997, 12)
    groupField = property(__groupField.value, __groupField.set, None, None)
    __sqlWhere = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'sqlWhere'), b'sqlWhere', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_163_sqlWhere', pyxb.binding.datatypes.string)
    __sqlWhere._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1998, 12)
    __sqlWhere._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1998, 12)
    sqlWhere = property(__sqlWhere.value, __sqlWhere.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __function.name(): __function, 
       __groupField.name(): __groupField, 
       __sqlWhere.name(): __sqlWhere})


class CTD_ANON_164(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2002, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __NeuralInputs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NeuralInputs'), b'NeuralInputs', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2NeuralInputs', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2029, 4))
    NeuralInputs = property(__NeuralInputs.value, __NeuralInputs.set, None, None)
    __NeuralLayer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NeuralLayer'), b'NeuralLayer', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2NeuralLayer', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2038, 4))
    NeuralLayer = property(__NeuralLayer.value, __NeuralLayer.set, None, None)
    __NeuralOutputs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'NeuralOutputs'), b'NeuralOutputs', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2NeuralOutputs', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2052, 4))
    NeuralOutputs = property(__NeuralOutputs.value, __NeuralOutputs.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2017, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2017, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2018, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2018, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2019, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2019, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __activationFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'activationFunction'), b'activationFunction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_activationFunction', ACTIVATION_FUNCTION, required=True)
    __activationFunction._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2020, 12)
    __activationFunction._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2020, 12)
    activationFunction = property(__activationFunction.value, __activationFunction.set, None, None)
    __normalizationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'normalizationMethod'), b'normalizationMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_normalizationMethod', NN_NORMALIZATION_METHOD, unicode_default=b'none')
    __normalizationMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2021, 12)
    __normalizationMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2021, 12)
    normalizationMethod = property(__normalizationMethod.value, __normalizationMethod.set, None, None)
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'threshold'), b'threshold', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_threshold', REAL_NUMBER, unicode_default=b'0')
    __threshold._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2022, 12)
    __threshold._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2022, 12)
    threshold = property(__threshold.value, __threshold.set, None, None)
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'width'), b'width', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_width', REAL_NUMBER)
    __width._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2023, 12)
    __width._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2023, 12)
    width = property(__width.value, __width.set, None, None)
    __altitude = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'altitude'), b'altitude', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_altitude', REAL_NUMBER, unicode_default=b'1.0')
    __altitude._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2024, 12)
    __altitude._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2024, 12)
    altitude = property(__altitude.value, __altitude.set, None, None)
    __numberOfLayers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfLayers'), b'numberOfLayers', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_numberOfLayers', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfLayers._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2025, 12)
    __numberOfLayers._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2025, 12)
    numberOfLayers = property(__numberOfLayers.value, __numberOfLayers.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_164_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2026, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2026, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __NeuralInputs.name(): __NeuralInputs, 
       __NeuralLayer.name(): __NeuralLayer, 
       __NeuralOutputs.name(): __NeuralOutputs, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __activationFunction.name(): __activationFunction, 
       __normalizationMethod.name(): __normalizationMethod, 
       __threshold.name(): __threshold, 
       __width.name(): __width, 
       __altitude.name(): __altitude, 
       __numberOfLayers.name(): __numberOfLayers, 
       __isScorable.name(): __isScorable})


class CTD_ANON_165(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2039, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_165_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Neuron = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Neuron'), b'Neuron', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_165_httpwww_dmg_orgPMML_4_2Neuron', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2100, 4))
    Neuron = property(__Neuron.value, __Neuron.set, None, None)
    __numberOfNeurons = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfNeurons'), b'numberOfNeurons', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_165_numberOfNeurons', pyxb.binding.datatypes.nonNegativeInteger)
    __numberOfNeurons._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2044, 12)
    __numberOfNeurons._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2044, 12)
    numberOfNeurons = property(__numberOfNeurons.value, __numberOfNeurons.set, None, None)
    __activationFunction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'activationFunction'), b'activationFunction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_165_activationFunction', ACTIVATION_FUNCTION)
    __activationFunction._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2045, 12)
    __activationFunction._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2045, 12)
    activationFunction = property(__activationFunction.value, __activationFunction.set, None, None)
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'threshold'), b'threshold', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_165_threshold', REAL_NUMBER)
    __threshold._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2046, 12)
    __threshold._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2046, 12)
    threshold = property(__threshold.value, __threshold.set, None, None)
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'width'), b'width', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_165_width', REAL_NUMBER)
    __width._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2047, 12)
    __width._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2047, 12)
    width = property(__width.value, __width.set, None, None)
    __altitude = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'altitude'), b'altitude', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_165_altitude', REAL_NUMBER)
    __altitude._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2048, 12)
    __altitude._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2048, 12)
    altitude = property(__altitude.value, __altitude.set, None, None)
    __normalizationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'normalizationMethod'), b'normalizationMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_165_normalizationMethod', NN_NORMALIZATION_METHOD)
    __normalizationMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2049, 12)
    __normalizationMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2049, 12)
    normalizationMethod = property(__normalizationMethod.value, __normalizationMethod.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Neuron.name(): __Neuron})
    _AttributeMap.update({__numberOfNeurons.name(): __numberOfNeurons, 
       __activationFunction.name(): __activationFunction, 
       __threshold.name(): __threshold, 
       __width.name(): __width, 
       __altitude.name(): __altitude, 
       __normalizationMethod.name(): __normalizationMethod})


class CTD_ANON_166(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2092, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_166_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), b'DerivedField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_166_httpwww_dmg_orgPMML_4_2DerivedField', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4))
    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_166_id', NN_NEURON_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2097, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2097, 12)
    id = property(__id.value, __id.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __DerivedField.name(): __DerivedField})
    _AttributeMap.update({__id.name(): __id})


class CTD_ANON_167(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2101, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_167_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Con = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Con'), b'Con', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_167_httpwww_dmg_orgPMML_4_2Con', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2112, 4))
    Con = property(__Con.value, __Con.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_167_id', NN_NEURON_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2106, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2106, 12)
    id = property(__id.value, __id.set, None, None)
    __bias = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'bias'), b'bias', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_167_bias', REAL_NUMBER)
    __bias._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2107, 12)
    __bias._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2107, 12)
    bias = property(__bias.value, __bias.set, None, None)
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'width'), b'width', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_167_width', REAL_NUMBER)
    __width._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2108, 12)
    __width._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2108, 12)
    width = property(__width.value, __width.set, None, None)
    __altitude = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'altitude'), b'altitude', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_167_altitude', REAL_NUMBER)
    __altitude._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2109, 12)
    __altitude._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2109, 12)
    altitude = property(__altitude.value, __altitude.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Con.name(): __Con})
    _AttributeMap.update({__id.name(): __id, 
       __bias.name(): __bias, 
       __width.name(): __width, 
       __altitude.name(): __altitude})


class CTD_ANON_168(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2113, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_168_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __from = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'from'), b'from_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_168_from', NN_NEURON_IDREF, required=True)
    __from._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2117, 12)
    __from._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2117, 12)
    from_ = property(__from.value, __from.set, None, None)
    __weight = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'weight'), b'weight', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_168_weight', REAL_NUMBER, required=True)
    __weight._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2118, 12)
    __weight._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2118, 12)
    weight = property(__weight.value, __weight.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__from.name(): __from, 
       __weight.name(): __weight})


class CTD_ANON_169(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2122, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_169_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __DerivedField = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), b'DerivedField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_169_httpwww_dmg_orgPMML_4_2DerivedField', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4))
    DerivedField = property(__DerivedField.value, __DerivedField.set, None, None)
    __outputNeuron = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'outputNeuron'), b'outputNeuron', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_169_outputNeuron', NN_NEURON_IDREF, required=True)
    __outputNeuron._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2127, 12)
    __outputNeuron._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2127, 12)
    outputNeuron = property(__outputNeuron.value, __outputNeuron.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __DerivedField.name(): __DerivedField})
    _AttributeMap.update({__outputNeuron.name(): __outputNeuron})


class CTD_ANON_170(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2131, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __TestDistributions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TestDistributions'), b'TestDistributions', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2TestDistributions', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2150, 4))
    TestDistributions = property(__TestDistributions.value, __TestDistributions.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2144, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2144, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2145, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2145, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2146, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2146, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_170_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2147, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2147, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __TestDistributions.name(): __TestDistributions, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __isScorable.name(): __isScorable})


class CTD_ANON_171(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2151, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Baseline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Baseline'), b'Baseline', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_httpwww_dmg_orgPMML_4_2Baseline', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2174, 4))
    Baseline = property(__Baseline.value, __Baseline.set, None, None)
    __Alternate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Alternate'), b'Alternate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_httpwww_dmg_orgPMML_4_2Alternate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2182, 4))
    Alternate = property(__Alternate.value, __Alternate.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2157, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2157, 12)
    field = property(__field.value, __field.set, None, None)
    __testStatistic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'testStatistic'), b'testStatistic', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_testStatistic', BASELINE_TEST_STATISTIC, required=True)
    __testStatistic._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2158, 12)
    __testStatistic._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2158, 12)
    testStatistic = property(__testStatistic.value, __testStatistic.set, None, None)
    __resetValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'resetValue'), b'resetValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_resetValue', REAL_NUMBER, unicode_default=b'0.0')
    __resetValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2159, 12)
    __resetValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2159, 12)
    resetValue = property(__resetValue.value, __resetValue.set, None, None)
    __windowSize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'windowSize'), b'windowSize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_windowSize', INT_NUMBER, unicode_default=b'0')
    __windowSize._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2160, 12)
    __windowSize._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2160, 12)
    windowSize = property(__windowSize.value, __windowSize.set, None, None)
    __weightField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'weightField'), b'weightField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_weightField', FIELD_NAME)
    __weightField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2161, 12)
    __weightField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2161, 12)
    weightField = property(__weightField.value, __weightField.set, None, None)
    __normalizationScheme = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'normalizationScheme'), b'normalizationScheme', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_171_normalizationScheme', pyxb.binding.datatypes.string)
    __normalizationScheme._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2162, 12)
    __normalizationScheme._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2162, 12)
    normalizationScheme = property(__normalizationScheme.value, __normalizationScheme.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Baseline.name(): __Baseline, 
       __Alternate.name(): __Alternate})
    _AttributeMap.update({__field.name(): __field, 
       __testStatistic.name(): __testStatistic, 
       __resetValue.name(): __resetValue, 
       __windowSize.name(): __windowSize, 
       __weightField.name(): __weightField, 
       __normalizationScheme.name(): __normalizationScheme})


class CTD_ANON_172(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2201, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_172_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __mean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mean'), b'mean', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_172_mean', REAL_NUMBER, required=True)
    __mean._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2205, 12)
    __mean._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2205, 12)
    mean = property(__mean.value, __mean.set, None, None)
    __variance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'variance'), b'variance', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_172_variance', REAL_NUMBER, required=True)
    __variance._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2206, 12)
    __variance._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2206, 12)
    variance = property(__variance.value, __variance.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__mean.name(): __mean, 
       __variance.name(): __variance})


class CTD_ANON_173(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2210, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_173_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __mean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mean'), b'mean', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_173_mean', REAL_NUMBER, required=True)
    __mean._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2214, 12)
    __mean._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2214, 12)
    mean = property(__mean.value, __mean.set, None, None)
    __variance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'variance'), b'variance', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_173_variance', REAL_NUMBER, required=True)
    __variance._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2215, 12)
    __variance._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2215, 12)
    variance = property(__variance.value, __variance.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__mean.name(): __mean, 
       __variance.name(): __variance})


class CTD_ANON_174(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2219, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_174_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __mean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mean'), b'mean', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_174_mean', REAL_NUMBER, required=True)
    __mean._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2223, 12)
    __mean._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2223, 12)
    mean = property(__mean.value, __mean.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__mean.name(): __mean})


class CTD_ANON_175(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2227, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_175_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __lower = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'lower'), b'lower', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_175_lower', REAL_NUMBER, required=True)
    __lower._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2231, 12)
    __lower._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2231, 12)
    lower = property(__lower.value, __lower.set, None, None)
    __upper = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'upper'), b'upper', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_175_upper', REAL_NUMBER, required=True)
    __upper._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2232, 12)
    __upper._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2232, 12)
    upper = property(__upper.value, __upper.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__lower.name(): __lower, 
       __upper.name(): __upper})


class COUNT_TABLE_TYPE(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.dmg.org/PMML-4_2}COUNT-TABLE-TYPE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'COUNT-TABLE-TYPE')
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2244, 4)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_COUNT_TABLE_TYPE_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __FieldValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldValue'), b'FieldValue', b'__httpwww_dmg_orgPMML_4_2_COUNT_TABLE_TYPE_httpwww_dmg_orgPMML_4_2FieldValue', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2254, 4))
    FieldValue = property(__FieldValue.value, __FieldValue.set, None, None)
    __FieldValueCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldValueCount'), b'FieldValueCount', b'__httpwww_dmg_orgPMML_4_2_COUNT_TABLE_TYPE_httpwww_dmg_orgPMML_4_2FieldValueCount', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2267, 4))
    FieldValueCount = property(__FieldValueCount.value, __FieldValueCount.set, None, None)
    __sample = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'sample'), b'sample', b'__httpwww_dmg_orgPMML_4_2_COUNT_TABLE_TYPE_sample', NUMBER)
    __sample._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2252, 8)
    __sample._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2252, 8)
    sample = property(__sample.value, __sample.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __FieldValue.name(): __FieldValue, 
       __FieldValueCount.name(): __FieldValueCount})
    _AttributeMap.update({__sample.name(): __sample})


Namespace.addCategoryObject(b'typeBinding', b'COUNT-TABLE-TYPE', COUNT_TABLE_TYPE)

class CTD_ANON_176(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2255, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_176_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __FieldValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldValue'), b'FieldValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_176_httpwww_dmg_orgPMML_4_2FieldValue', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2254, 4))
    FieldValue = property(__FieldValue.value, __FieldValue.set, None, None)
    __FieldValueCount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldValueCount'), b'FieldValueCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_176_httpwww_dmg_orgPMML_4_2FieldValueCount', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2267, 4))
    FieldValueCount = property(__FieldValueCount.value, __FieldValueCount.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_176_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2263, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2263, 12)
    field = property(__field.value, __field.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_176_value', pyxb.binding.datatypes.anySimpleType, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2264, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2264, 12)
    value_ = property(__value.value, __value.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __FieldValue.name(): __FieldValue, 
       __FieldValueCount.name(): __FieldValueCount})
    _AttributeMap.update({__field.name(): __field, 
       __value.name(): __value})


class CTD_ANON_177(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2268, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_177_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_177_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2272, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2272, 12)
    field = property(__field.value, __field.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_177_value', pyxb.binding.datatypes.anySimpleType, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2273, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2273, 12)
    value_ = property(__value.value, __value.set, None, None)
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'count'), b'count', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_177_count', NUMBER, required=True)
    __count._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2274, 12)
    __count._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2274, 12)
    count = property(__count.value, __count.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __value.name(): __value, 
       __count.name(): __count})


class CTD_ANON_178(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2278, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_178_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __InlineTable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), b'InlineTable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_178_httpwww_dmg_orgPMML_4_2InlineTable', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4))
    InlineTable = property(__InlineTable.value, __InlineTable.set, None, None)
    __VerificationFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'VerificationFields'), b'VerificationFields', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_178_httpwww_dmg_orgPMML_4_2VerificationFields', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2288, 4))
    VerificationFields = property(__VerificationFields.value, __VerificationFields.set, None, None)
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'recordCount'), b'recordCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_178_recordCount', INT_NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2284, 12)
    __recordCount._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2284, 12)
    recordCount = property(__recordCount.value, __recordCount.set, None, None)
    __fieldCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fieldCount'), b'fieldCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_178_fieldCount', INT_NUMBER)
    __fieldCount._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2285, 12)
    __fieldCount._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2285, 12)
    fieldCount = property(__fieldCount.value, __fieldCount.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __InlineTable.name(): __InlineTable, 
       __VerificationFields.name(): __VerificationFields})
    _AttributeMap.update({__recordCount.name(): __recordCount, 
       __fieldCount.name(): __fieldCount})


class CTD_ANON_179(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2308, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __LinearKernelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LinearKernelType'), b'LinearKernelType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2LinearKernelType', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2351, 4))
    LinearKernelType = property(__LinearKernelType.value, __LinearKernelType.set, None, None)
    __PolynomialKernelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'PolynomialKernelType'), b'PolynomialKernelType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2PolynomialKernelType', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2359, 4))
    PolynomialKernelType = property(__PolynomialKernelType.value, __PolynomialKernelType.set, None, None)
    __RadialBasisKernelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RadialBasisKernelType'), b'RadialBasisKernelType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2RadialBasisKernelType', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2370, 4))
    RadialBasisKernelType = property(__RadialBasisKernelType.value, __RadialBasisKernelType.set, None, None)
    __SigmoidKernelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SigmoidKernelType'), b'SigmoidKernelType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2SigmoidKernelType', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2379, 4))
    SigmoidKernelType = property(__SigmoidKernelType.value, __SigmoidKernelType.set, None, None)
    __VectorDictionary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'VectorDictionary'), b'VectorDictionary', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2VectorDictionary', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2392, 4))
    VectorDictionary = property(__VectorDictionary.value, __VectorDictionary.set, None, None)
    __SupportVectorMachine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachine'), b'SupportVectorMachine', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2SupportVectorMachine', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2423, 4))
    SupportVectorMachine = property(__SupportVectorMachine.value, __SupportVectorMachine.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2330, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2330, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2331, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2331, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2332, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2332, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'threshold'), b'threshold', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_threshold', REAL_NUMBER, unicode_default=b'0')
    __threshold._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2333, 12)
    __threshold._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2333, 12)
    threshold = property(__threshold.value, __threshold.set, None, None)
    __svmRepresentation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'svmRepresentation'), b'svmRepresentation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_svmRepresentation', SVM_REPRESENTATION, unicode_default=b'SupportVectors')
    __svmRepresentation._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2334, 12)
    __svmRepresentation._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2334, 12)
    svmRepresentation = property(__svmRepresentation.value, __svmRepresentation.set, None, None)
    __classificationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'classificationMethod'), b'classificationMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_classificationMethod', SVM_CLASSIFICATION_METHOD, unicode_default=b'OneAgainstAll')
    __classificationMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2335, 12)
    __classificationMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2335, 12)
    classificationMethod = property(__classificationMethod.value, __classificationMethod.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_179_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2336, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2336, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __LinearKernelType.name(): __LinearKernelType, 
       __PolynomialKernelType.name(): __PolynomialKernelType, 
       __RadialBasisKernelType.name(): __RadialBasisKernelType, 
       __SigmoidKernelType.name(): __SigmoidKernelType, 
       __VectorDictionary.name(): __VectorDictionary, 
       __SupportVectorMachine.name(): __SupportVectorMachine, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __threshold.name(): __threshold, 
       __svmRepresentation.name(): __svmRepresentation, 
       __classificationMethod.name(): __classificationMethod, 
       __isScorable.name(): __isScorable})


class CTD_ANON_180(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2360, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_180_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_180_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2364, 12)
    __description._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2364, 12)
    description = property(__description.value, __description.set, None, None)
    __gamma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'gamma'), b'gamma', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_180_gamma', REAL_NUMBER, unicode_default=b'1')
    __gamma._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2365, 12)
    __gamma._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2365, 12)
    gamma = property(__gamma.value, __gamma.set, None, None)
    __coef0 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'coef0'), b'coef0', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_180_coef0', REAL_NUMBER, unicode_default=b'1')
    __coef0._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2366, 12)
    __coef0._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2366, 12)
    coef0 = property(__coef0.value, __coef0.set, None, None)
    __degree = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'degree'), b'degree', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_180_degree', REAL_NUMBER, unicode_default=b'1')
    __degree._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2367, 12)
    __degree._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2367, 12)
    degree = property(__degree.value, __degree.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__description.name(): __description, 
       __gamma.name(): __gamma, 
       __coef0.name(): __coef0, 
       __degree.name(): __degree})


class CTD_ANON_181(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2371, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_181_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_181_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2375, 12)
    __description._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2375, 12)
    description = property(__description.value, __description.set, None, None)
    __gamma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'gamma'), b'gamma', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_181_gamma', REAL_NUMBER, unicode_default=b'1')
    __gamma._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2376, 12)
    __gamma._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2376, 12)
    gamma = property(__gamma.value, __gamma.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__description.name(): __description, 
       __gamma.name(): __gamma})


class CTD_ANON_182(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2380, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_182_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_182_description', pyxb.binding.datatypes.string)
    __description._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2384, 12)
    __description._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2384, 12)
    description = property(__description.value, __description.set, None, None)
    __gamma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'gamma'), b'gamma', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_182_gamma', REAL_NUMBER, unicode_default=b'1')
    __gamma._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2385, 12)
    __gamma._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2385, 12)
    gamma = property(__gamma.value, __gamma.set, None, None)
    __coef0 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'coef0'), b'coef0', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_182_coef0', REAL_NUMBER, unicode_default=b'1')
    __coef0._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2386, 12)
    __coef0._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2386, 12)
    coef0 = property(__coef0.value, __coef0.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__description.name(): __description, 
       __gamma.name(): __gamma, 
       __coef0.name(): __coef0})


class CTD_ANON_183(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2393, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_183_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __VectorFields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'VectorFields'), b'VectorFields', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_183_httpwww_dmg_orgPMML_4_2VectorFields', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2402, 4))
    VectorFields = property(__VectorFields.value, __VectorFields.set, None, None)
    __VectorInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'VectorInstance'), b'VectorInstance', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_183_httpwww_dmg_orgPMML_4_2VectorInstance', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2411, 4))
    VectorInstance = property(__VectorInstance.value, __VectorInstance.set, None, None)
    __numberOfVectors = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfVectors'), b'numberOfVectors', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_183_numberOfVectors', INT_NUMBER)
    __numberOfVectors._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2399, 12)
    __numberOfVectors._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2399, 12)
    numberOfVectors = property(__numberOfVectors.value, __numberOfVectors.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __VectorFields.name(): __VectorFields, 
       __VectorInstance.name(): __VectorInstance})
    _AttributeMap.update({__numberOfVectors.name(): __numberOfVectors})


class CTD_ANON_184(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2403, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_184_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __FieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), b'FieldRef', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_184_httpwww_dmg_orgPMML_4_2FieldRef', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
    FieldRef = property(__FieldRef.value, __FieldRef.set, None, None)
    __numberOfFields = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfFields'), b'numberOfFields', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_184_numberOfFields', INT_NUMBER)
    __numberOfFields._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2408, 12)
    __numberOfFields._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2408, 12)
    numberOfFields = property(__numberOfFields.value, __numberOfFields.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __FieldRef.name(): __FieldRef})
    _AttributeMap.update({__numberOfFields.name(): __numberOfFields})


class CTD_ANON_185(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2412, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_185_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_185_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __REAL_SparseArray = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'REAL-SparseArray'), b'REAL_SparseArray', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_185_httpwww_dmg_orgPMML_4_2REAL_SparseArray', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 980, 4))
    REAL_SparseArray = property(__REAL_SparseArray.value, __REAL_SparseArray.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_185_id', VECTOR_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2420, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2420, 12)
    id = property(__id.value, __id.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array, 
       __REAL_SparseArray.name(): __REAL_SparseArray})
    _AttributeMap.update({__id.name(): __id})


class CTD_ANON_186(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2424, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_186_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __SupportVectors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SupportVectors'), b'SupportVectors', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_186_httpwww_dmg_orgPMML_4_2SupportVectors', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2435, 4))
    SupportVectors = property(__SupportVectors.value, __SupportVectors.set, None, None)
    __Coefficients = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Coefficients'), b'Coefficients', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_186_httpwww_dmg_orgPMML_4_2Coefficients', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2453, 4))
    Coefficients = property(__Coefficients.value, __Coefficients.set, None, None)
    __targetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetCategory'), b'targetCategory', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_186_targetCategory', pyxb.binding.datatypes.string)
    __targetCategory._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2430, 12)
    __targetCategory._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2430, 12)
    targetCategory = property(__targetCategory.value, __targetCategory.set, None, None)
    __alternateTargetCategory = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'alternateTargetCategory'), b'alternateTargetCategory', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_186_alternateTargetCategory', pyxb.binding.datatypes.string)
    __alternateTargetCategory._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2431, 12)
    __alternateTargetCategory._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2431, 12)
    alternateTargetCategory = property(__alternateTargetCategory.value, __alternateTargetCategory.set, None, None)
    __threshold = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'threshold'), b'threshold', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_186_threshold', REAL_NUMBER)
    __threshold._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2432, 12)
    __threshold._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2432, 12)
    threshold = property(__threshold.value, __threshold.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __SupportVectors.name(): __SupportVectors, 
       __Coefficients.name(): __Coefficients})
    _AttributeMap.update({__targetCategory.name(): __targetCategory, 
       __alternateTargetCategory.name(): __alternateTargetCategory, 
       __threshold.name(): __threshold})


class CTD_ANON_187(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2436, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_187_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __SupportVector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SupportVector'), b'SupportVector', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_187_httpwww_dmg_orgPMML_4_2SupportVector', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2445, 4))
    SupportVector = property(__SupportVector.value, __SupportVector.set, None, None)
    __numberOfSupportVectors = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfSupportVectors'), b'numberOfSupportVectors', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_187_numberOfSupportVectors', INT_NUMBER)
    __numberOfSupportVectors._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2441, 12)
    __numberOfSupportVectors._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2441, 12)
    numberOfSupportVectors = property(__numberOfSupportVectors.value, __numberOfSupportVectors.set, None, None)
    __numberOfAttributes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfAttributes'), b'numberOfAttributes', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_187_numberOfAttributes', INT_NUMBER)
    __numberOfAttributes._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2442, 12)
    __numberOfAttributes._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2442, 12)
    numberOfAttributes = property(__numberOfAttributes.value, __numberOfAttributes.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __SupportVector.name(): __SupportVector})
    _AttributeMap.update({__numberOfSupportVectors.name(): __numberOfSupportVectors, 
       __numberOfAttributes.name(): __numberOfAttributes})


class CTD_ANON_188(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2446, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_188_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __vectorId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'vectorId'), b'vectorId', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_188_vectorId', VECTOR_ID, required=True)
    __vectorId._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2450, 12)
    __vectorId._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2450, 12)
    vectorId = property(__vectorId.value, __vectorId.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__vectorId.name(): __vectorId})


class CTD_ANON_189(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2454, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_189_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Coefficient = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Coefficient'), b'Coefficient', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_189_httpwww_dmg_orgPMML_4_2Coefficient', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2463, 4))
    Coefficient = property(__Coefficient.value, __Coefficient.set, None, None)
    __numberOfCoefficients = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfCoefficients'), b'numberOfCoefficients', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_189_numberOfCoefficients', INT_NUMBER)
    __numberOfCoefficients._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2459, 12)
    __numberOfCoefficients._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2459, 12)
    numberOfCoefficients = property(__numberOfCoefficients.value, __numberOfCoefficients.set, None, None)
    __absoluteValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'absoluteValue'), b'absoluteValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_189_absoluteValue', REAL_NUMBER, unicode_default=b'0')
    __absoluteValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2460, 12)
    __absoluteValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2460, 12)
    absoluteValue = property(__absoluteValue.value, __absoluteValue.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Coefficient.name(): __Coefficient})
    _AttributeMap.update({__numberOfCoefficients.name(): __numberOfCoefficients, 
       __absoluteValue.name(): __absoluteValue})


class CTD_ANON_190(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2464, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_190_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_190_value', REAL_NUMBER, unicode_default=b'0')
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2468, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2468, 12)
    value_ = property(__value.value, __value.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__value.name(): __value})


class CTD_ANON_191(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2472, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __Characteristics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Characteristics'), b'Characteristics', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2Characteristics', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2513, 4))
    Characteristics = property(__Characteristics.value, __Characteristics.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2485, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2485, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2486, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2486, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2487, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2487, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __initialScore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'initialScore'), b'initialScore', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_initialScore', NUMBER, unicode_default=b'0')
    __initialScore._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2488, 12)
    __initialScore._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2488, 12)
    initialScore = property(__initialScore.value, __initialScore.set, None, None)
    __useReasonCodes = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'useReasonCodes'), b'useReasonCodes', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_useReasonCodes', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __useReasonCodes._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2489, 12)
    __useReasonCodes._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2489, 12)
    useReasonCodes = property(__useReasonCodes.value, __useReasonCodes.set, None, None)
    __reasonCodeAlgorithm = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'reasonCodeAlgorithm'), b'reasonCodeAlgorithm', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_reasonCodeAlgorithm', STD_ANON_30, unicode_default=b'pointsBelow')
    __reasonCodeAlgorithm._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2490, 12)
    __reasonCodeAlgorithm._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2490, 12)
    reasonCodeAlgorithm = property(__reasonCodeAlgorithm.value, __reasonCodeAlgorithm.set, None, None)
    __baselineScore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'baselineScore'), b'baselineScore', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_baselineScore', NUMBER)
    __baselineScore._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2498, 12)
    __baselineScore._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2498, 12)
    baselineScore = property(__baselineScore.value, __baselineScore.set, None, None)
    __baselineMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'baselineMethod'), b'baselineMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_baselineMethod', STD_ANON_31, unicode_default=b'other')
    __baselineMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2499, 12)
    __baselineMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2499, 12)
    baselineMethod = property(__baselineMethod.value, __baselineMethod.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_191_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2510, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2510, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __Characteristics.name(): __Characteristics, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __initialScore.name(): __initialScore, 
       __useReasonCodes.name(): __useReasonCodes, 
       __reasonCodeAlgorithm.name(): __reasonCodeAlgorithm, 
       __baselineScore.name(): __baselineScore, 
       __baselineMethod.name(): __baselineMethod, 
       __isScorable.name(): __isScorable})


class CTD_ANON_192(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2522, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_192_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Attribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Attribute'), b'Attribute', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_192_httpwww_dmg_orgPMML_4_2Attribute', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2532, 4))
    Attribute = property(__Attribute.value, __Attribute.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_192_name', FIELD_NAME)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2527, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2527, 12)
    name = property(__name.value, __name.set, None, None)
    __reasonCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'reasonCode'), b'reasonCode', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_192_reasonCode', pyxb.binding.datatypes.string)
    __reasonCode._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2528, 12)
    __reasonCode._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2528, 12)
    reasonCode = property(__reasonCode.value, __reasonCode.set, None, None)
    __baselineScore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'baselineScore'), b'baselineScore', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_192_baselineScore', NUMBER)
    __baselineScore._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2529, 12)
    __baselineScore._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2529, 12)
    baselineScore = property(__baselineScore.value, __baselineScore.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Attribute.name(): __Attribute})
    _AttributeMap.update({__name.name(): __name, 
       __reasonCode.name(): __reasonCode, 
       __baselineScore.name(): __baselineScore})


class CTD_ANON_193(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2533, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __ComplexPartialScore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ComplexPartialScore'), b'ComplexPartialScore', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_httpwww_dmg_orgPMML_4_2ComplexPartialScore', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2543, 4))
    ComplexPartialScore = property(__ComplexPartialScore.value, __ComplexPartialScore.set, None, None)
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), b'SimplePredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_httpwww_dmg_orgPMML_4_2SimplePredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4))
    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), b'CompoundPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_httpwww_dmg_orgPMML_4_2CompoundPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4))
    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), b'SimpleSetPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_httpwww_dmg_orgPMML_4_2SimpleSetPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4))
    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'True'), b'True_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_httpwww_dmg_orgPMML_4_2True', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4))
    True_ = property(__True.value, __True.set, None, None)
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'False'), b'False_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_httpwww_dmg_orgPMML_4_2False', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4))
    False_ = property(__False.value, __False.set, None, None)
    __reasonCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'reasonCode'), b'reasonCode', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_reasonCode', pyxb.binding.datatypes.string)
    __reasonCode._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2539, 12)
    __reasonCode._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2539, 12)
    reasonCode = property(__reasonCode.value, __reasonCode.set, None, None)
    __partialScore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'partialScore'), b'partialScore', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_193_partialScore', NUMBER)
    __partialScore._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2540, 12)
    __partialScore._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2540, 12)
    partialScore = property(__partialScore.value, __partialScore.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __ComplexPartialScore.name(): __ComplexPartialScore, 
       __SimplePredicate.name(): __SimplePredicate, 
       __CompoundPredicate.name(): __CompoundPredicate, 
       __SimpleSetPredicate.name(): __SimpleSetPredicate, 
       __True.name(): __True, 
       __False.name(): __False})
    _AttributeMap.update({__reasonCode.name(): __reasonCode, 
       __partialScore.name(): __partialScore})


class CTD_ANON_194(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2552, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Item'), b'Item', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2Item', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 186, 4))
    Item = property(__Item.value, __Item.set, None, None)
    __Itemset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Itemset'), b'Itemset', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2Itemset', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 197, 4))
    Itemset = property(__Itemset.value, __Itemset.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __Constraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Constraints'), b'Constraints', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2Constraints', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2578, 4))
    Constraints = property(__Constraints.value, __Constraints.set, None, None)
    __SetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SetPredicate'), b'SetPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2SetPredicate', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2603, 4))
    SetPredicate = property(__SetPredicate.value, __SetPredicate.set, None, None)
    __Sequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Sequence'), b'Sequence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2Sequence', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2655, 4))
    Sequence = property(__Sequence.value, __Sequence.set, None, None)
    __SequenceRule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SequenceRule'), b'SequenceRule', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2SequenceRule', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2679, 4))
    SequenceRule = property(__SequenceRule.value, __SequenceRule.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2566, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2566, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2567, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2567, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2568, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2568, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __numberOfTransactions = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfTransactions'), b'numberOfTransactions', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_numberOfTransactions', INT_NUMBER)
    __numberOfTransactions._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2569, 12)
    __numberOfTransactions._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2569, 12)
    numberOfTransactions = property(__numberOfTransactions.value, __numberOfTransactions.set, None, None)
    __maxNumberOfItemsPerTransaction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maxNumberOfItemsPerTransaction'), b'maxNumberOfItemsPerTransaction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_maxNumberOfItemsPerTransaction', INT_NUMBER)
    __maxNumberOfItemsPerTransaction._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2570, 12)
    __maxNumberOfItemsPerTransaction._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2570, 12)
    maxNumberOfItemsPerTransaction = property(__maxNumberOfItemsPerTransaction.value, __maxNumberOfItemsPerTransaction.set, None, None)
    __avgNumberOfItemsPerTransaction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'avgNumberOfItemsPerTransaction'), b'avgNumberOfItemsPerTransaction', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_avgNumberOfItemsPerTransaction', REAL_NUMBER)
    __avgNumberOfItemsPerTransaction._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2571, 12)
    __avgNumberOfItemsPerTransaction._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2571, 12)
    avgNumberOfItemsPerTransaction = property(__avgNumberOfItemsPerTransaction.value, __avgNumberOfItemsPerTransaction.set, None, None)
    __numberOfTransactionGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfTransactionGroups'), b'numberOfTransactionGroups', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_numberOfTransactionGroups', INT_NUMBER)
    __numberOfTransactionGroups._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2572, 12)
    __numberOfTransactionGroups._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2572, 12)
    numberOfTransactionGroups = property(__numberOfTransactionGroups.value, __numberOfTransactionGroups.set, None, None)
    __maxNumberOfTAsPerTAGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maxNumberOfTAsPerTAGroup'), b'maxNumberOfTAsPerTAGroup', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_maxNumberOfTAsPerTAGroup', INT_NUMBER)
    __maxNumberOfTAsPerTAGroup._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2573, 12)
    __maxNumberOfTAsPerTAGroup._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2573, 12)
    maxNumberOfTAsPerTAGroup = property(__maxNumberOfTAsPerTAGroup.value, __maxNumberOfTAsPerTAGroup.set, None, None)
    __avgNumberOfTAsPerTAGroup = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'avgNumberOfTAsPerTAGroup'), b'avgNumberOfTAsPerTAGroup', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_avgNumberOfTAsPerTAGroup', REAL_NUMBER)
    __avgNumberOfTAsPerTAGroup._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2574, 12)
    __avgNumberOfTAsPerTAGroup._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2574, 12)
    avgNumberOfTAsPerTAGroup = property(__avgNumberOfTAsPerTAGroup.value, __avgNumberOfTAsPerTAGroup.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_194_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2575, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2575, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Item.name(): __Item, 
       __Itemset.name(): __Itemset, 
       __Extension.name(): __Extension, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __Constraints.name(): __Constraints, 
       __SetPredicate.name(): __SetPredicate, 
       __Sequence.name(): __Sequence, 
       __SequenceRule.name(): __SequenceRule, 
       __MiningSchema.name(): __MiningSchema})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __numberOfTransactions.name(): __numberOfTransactions, 
       __maxNumberOfItemsPerTransaction.name(): __maxNumberOfItemsPerTransaction, 
       __avgNumberOfItemsPerTransaction.name(): __avgNumberOfItemsPerTransaction, 
       __numberOfTransactionGroups.name(): __numberOfTransactionGroups, 
       __maxNumberOfTAsPerTAGroup.name(): __maxNumberOfTAsPerTAGroup, 
       __avgNumberOfTAsPerTAGroup.name(): __avgNumberOfTAsPerTAGroup, 
       __isScorable.name(): __isScorable})


class CTD_ANON_195(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2579, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __minimumNumberOfItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumNumberOfItems'), b'minimumNumberOfItems', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumNumberOfItems', INT_NUMBER, unicode_default=b'1')
    __minimumNumberOfItems._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2583, 12)
    __minimumNumberOfItems._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2583, 12)
    minimumNumberOfItems = property(__minimumNumberOfItems.value, __minimumNumberOfItems.set, None, None)
    __maximumNumberOfItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maximumNumberOfItems'), b'maximumNumberOfItems', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_maximumNumberOfItems', INT_NUMBER)
    __maximumNumberOfItems._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2584, 12)
    __maximumNumberOfItems._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2584, 12)
    maximumNumberOfItems = property(__maximumNumberOfItems.value, __maximumNumberOfItems.set, None, None)
    __minimumNumberOfAntecedentItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumNumberOfAntecedentItems'), b'minimumNumberOfAntecedentItems', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumNumberOfAntecedentItems', INT_NUMBER, unicode_default=b'1')
    __minimumNumberOfAntecedentItems._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2585, 12)
    __minimumNumberOfAntecedentItems._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2585, 12)
    minimumNumberOfAntecedentItems = property(__minimumNumberOfAntecedentItems.value, __minimumNumberOfAntecedentItems.set, None, None)
    __maximumNumberOfAntecedentItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maximumNumberOfAntecedentItems'), b'maximumNumberOfAntecedentItems', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_maximumNumberOfAntecedentItems', INT_NUMBER)
    __maximumNumberOfAntecedentItems._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2586, 12)
    __maximumNumberOfAntecedentItems._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2586, 12)
    maximumNumberOfAntecedentItems = property(__maximumNumberOfAntecedentItems.value, __maximumNumberOfAntecedentItems.set, None, None)
    __minimumNumberOfConsequentItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumNumberOfConsequentItems'), b'minimumNumberOfConsequentItems', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumNumberOfConsequentItems', INT_NUMBER, unicode_default=b'1')
    __minimumNumberOfConsequentItems._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2587, 12)
    __minimumNumberOfConsequentItems._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2587, 12)
    minimumNumberOfConsequentItems = property(__minimumNumberOfConsequentItems.value, __minimumNumberOfConsequentItems.set, None, None)
    __maximumNumberOfConsequentItems = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maximumNumberOfConsequentItems'), b'maximumNumberOfConsequentItems', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_maximumNumberOfConsequentItems', INT_NUMBER)
    __maximumNumberOfConsequentItems._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2588, 12)
    __maximumNumberOfConsequentItems._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2588, 12)
    maximumNumberOfConsequentItems = property(__maximumNumberOfConsequentItems.value, __maximumNumberOfConsequentItems.set, None, None)
    __minimumSupport = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumSupport'), b'minimumSupport', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumSupport', REAL_NUMBER, unicode_default=b'0')
    __minimumSupport._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2589, 12)
    __minimumSupport._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2589, 12)
    minimumSupport = property(__minimumSupport.value, __minimumSupport.set, None, None)
    __minimumConfidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumConfidence'), b'minimumConfidence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumConfidence', REAL_NUMBER, unicode_default=b'0')
    __minimumConfidence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2590, 12)
    __minimumConfidence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2590, 12)
    minimumConfidence = property(__minimumConfidence.value, __minimumConfidence.set, None, None)
    __minimumLift = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumLift'), b'minimumLift', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumLift', REAL_NUMBER, unicode_default=b'0')
    __minimumLift._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2591, 12)
    __minimumLift._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2591, 12)
    minimumLift = property(__minimumLift.value, __minimumLift.set, None, None)
    __minimumTotalSequenceTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumTotalSequenceTime'), b'minimumTotalSequenceTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumTotalSequenceTime', REAL_NUMBER, unicode_default=b'0')
    __minimumTotalSequenceTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2592, 12)
    __minimumTotalSequenceTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2592, 12)
    minimumTotalSequenceTime = property(__minimumTotalSequenceTime.value, __minimumTotalSequenceTime.set, None, None)
    __maximumTotalSequenceTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maximumTotalSequenceTime'), b'maximumTotalSequenceTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_maximumTotalSequenceTime', REAL_NUMBER)
    __maximumTotalSequenceTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2593, 12)
    __maximumTotalSequenceTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2593, 12)
    maximumTotalSequenceTime = property(__maximumTotalSequenceTime.value, __maximumTotalSequenceTime.set, None, None)
    __minimumItemsetSeparationTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumItemsetSeparationTime'), b'minimumItemsetSeparationTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumItemsetSeparationTime', REAL_NUMBER, unicode_default=b'0')
    __minimumItemsetSeparationTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2594, 12)
    __minimumItemsetSeparationTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2594, 12)
    minimumItemsetSeparationTime = property(__minimumItemsetSeparationTime.value, __minimumItemsetSeparationTime.set, None, None)
    __maximumItemsetSeparationTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maximumItemsetSeparationTime'), b'maximumItemsetSeparationTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_maximumItemsetSeparationTime', REAL_NUMBER)
    __maximumItemsetSeparationTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2595, 12)
    __maximumItemsetSeparationTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2595, 12)
    maximumItemsetSeparationTime = property(__maximumItemsetSeparationTime.value, __maximumItemsetSeparationTime.set, None, None)
    __minimumAntConsSeparationTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'minimumAntConsSeparationTime'), b'minimumAntConsSeparationTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_minimumAntConsSeparationTime', REAL_NUMBER, unicode_default=b'0')
    __minimumAntConsSeparationTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2596, 12)
    __minimumAntConsSeparationTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2596, 12)
    minimumAntConsSeparationTime = property(__minimumAntConsSeparationTime.value, __minimumAntConsSeparationTime.set, None, None)
    __maximumAntConsSeparationTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'maximumAntConsSeparationTime'), b'maximumAntConsSeparationTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_195_maximumAntConsSeparationTime', REAL_NUMBER)
    __maximumAntConsSeparationTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2597, 12)
    __maximumAntConsSeparationTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2597, 12)
    maximumAntConsSeparationTime = property(__maximumAntConsSeparationTime.value, __maximumAntConsSeparationTime.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__minimumNumberOfItems.name(): __minimumNumberOfItems, 
       __maximumNumberOfItems.name(): __maximumNumberOfItems, 
       __minimumNumberOfAntecedentItems.name(): __minimumNumberOfAntecedentItems, 
       __maximumNumberOfAntecedentItems.name(): __maximumNumberOfAntecedentItems, 
       __minimumNumberOfConsequentItems.name(): __minimumNumberOfConsequentItems, 
       __maximumNumberOfConsequentItems.name(): __maximumNumberOfConsequentItems, 
       __minimumSupport.name(): __minimumSupport, 
       __minimumConfidence.name(): __minimumConfidence, 
       __minimumLift.name(): __minimumLift, 
       __minimumTotalSequenceTime.name(): __minimumTotalSequenceTime, 
       __maximumTotalSequenceTime.name(): __maximumTotalSequenceTime, 
       __minimumItemsetSeparationTime.name(): __minimumItemsetSeparationTime, 
       __maximumItemsetSeparationTime.name(): __maximumItemsetSeparationTime, 
       __minimumAntConsSeparationTime.name(): __minimumAntConsSeparationTime, 
       __maximumAntConsSeparationTime.name(): __maximumAntConsSeparationTime})


class CTD_ANON_196(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2604, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_196_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_196_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_196_id', ELEMENT_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2609, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2609, 12)
    id = property(__id.value, __id.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_196_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2610, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2610, 12)
    field = property(__field.value, __field.set, None, None)
    __operator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'operator'), b'operator', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_196_operator', pyxb.binding.datatypes.string, fixed=True, unicode_default=b'supersetOf')
    __operator._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2611, 12)
    __operator._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2611, 12)
    operator = property(__operator.value, __operator.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({__id.name(): __id, 
       __field.name(): __field, 
       __operator.name(): __operator})


class CTD_ANON_197(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2628, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_197_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __delimiter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'delimiter'), b'delimiter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_197_delimiter', DELIMITER, required=True)
    __delimiter._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2632, 12)
    __delimiter._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2632, 12)
    delimiter = property(__delimiter.value, __delimiter.set, None, None)
    __gap = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'gap'), b'gap', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_197_gap', GAP, required=True)
    __gap._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2633, 12)
    __gap._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2633, 12)
    gap = property(__gap.value, __gap.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__delimiter.name(): __delimiter, 
       __gap.name(): __gap})


class CTD_ANON_198(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2637, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_198_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __min = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'min'), b'min', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_198_min', NUMBER)
    __min._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2641, 12)
    __min._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2641, 12)
    min = property(__min.value, __min.set, None, None)
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'max'), b'max', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_198_max', NUMBER)
    __max._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2642, 12)
    __max._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2642, 12)
    max = property(__max.value, __max.set, None, None)
    __mean = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'mean'), b'mean', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_198_mean', NUMBER)
    __mean._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2643, 12)
    __mean._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2643, 12)
    mean = property(__mean.value, __mean.set, None, None)
    __standardDeviation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'standardDeviation'), b'standardDeviation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_198_standardDeviation', NUMBER)
    __standardDeviation._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2644, 12)
    __standardDeviation._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2644, 12)
    standardDeviation = property(__standardDeviation.value, __standardDeviation.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__min.name(): __min, 
       __max.name(): __max, 
       __mean.name(): __mean, 
       __standardDeviation.name(): __standardDeviation})


class CTD_ANON_199(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2656, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_199_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Delimiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Delimiter'), b'Delimiter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_199_httpwww_dmg_orgPMML_4_2Delimiter', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2627, 4))
    Delimiter = property(__Delimiter.value, __Delimiter.set, None, None)
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Time'), b'Time', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_199_httpwww_dmg_orgPMML_4_2Time', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4))
    Time = property(__Time.value, __Time.set, None, None)
    __SetReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SetReference'), b'SetReference', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_199_httpwww_dmg_orgPMML_4_2SetReference', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2671, 4))
    SetReference = property(__SetReference.value, __SetReference.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_199_id', ELEMENT_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2665, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2665, 12)
    id = property(__id.value, __id.set, None, None)
    __numberOfSets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfSets'), b'numberOfSets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_199_numberOfSets', INT_NUMBER)
    __numberOfSets._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2666, 12)
    __numberOfSets._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2666, 12)
    numberOfSets = property(__numberOfSets.value, __numberOfSets.set, None, None)
    __occurrence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'occurrence'), b'occurrence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_199_occurrence', INT_NUMBER)
    __occurrence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2667, 12)
    __occurrence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2667, 12)
    occurrence = property(__occurrence.value, __occurrence.set, None, None)
    __support = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'support'), b'support', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_199_support', REAL_NUMBER)
    __support._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2668, 12)
    __support._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2668, 12)
    support = property(__support.value, __support.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Delimiter.name(): __Delimiter, 
       __Time.name(): __Time, 
       __SetReference.name(): __SetReference})
    _AttributeMap.update({__id.name(): __id, 
       __numberOfSets.name(): __numberOfSets, 
       __occurrence.name(): __occurrence, 
       __support.name(): __support})


class CTD_ANON_200(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2672, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_200_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __setId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'setId'), b'setId', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_200_setId', ELEMENT_ID, required=True)
    __setId._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2676, 12)
    __setId._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2676, 12)
    setId = property(__setId.value, __setId.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__setId.name(): __setId})


class CTD_ANON_201(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2680, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Delimiter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Delimiter'), b'Delimiter', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_httpwww_dmg_orgPMML_4_2Delimiter', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2627, 4))
    Delimiter = property(__Delimiter.value, __Delimiter.set, None, None)
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Time'), b'Time', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_httpwww_dmg_orgPMML_4_2Time', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4))
    Time = property(__Time.value, __Time.set, None, None)
    __AntecedentSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'AntecedentSequence'), b'AntecedentSequence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_httpwww_dmg_orgPMML_4_2AntecedentSequence', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2714, 4))
    AntecedentSequence = property(__AntecedentSequence.value, __AntecedentSequence.set, None, None)
    __ConsequentSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ConsequentSequence'), b'ConsequentSequence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_httpwww_dmg_orgPMML_4_2ConsequentSequence', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2721, 4))
    ConsequentSequence = property(__ConsequentSequence.value, __ConsequentSequence.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_id', ELEMENT_ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2689, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2689, 12)
    id = property(__id.value, __id.set, None, None)
    __numberOfSets = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numberOfSets'), b'numberOfSets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_numberOfSets', INT_NUMBER, required=True)
    __numberOfSets._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2690, 12)
    __numberOfSets._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2690, 12)
    numberOfSets = property(__numberOfSets.value, __numberOfSets.set, None, None)
    __occurrence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'occurrence'), b'occurrence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_occurrence', INT_NUMBER, required=True)
    __occurrence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2691, 12)
    __occurrence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2691, 12)
    occurrence = property(__occurrence.value, __occurrence.set, None, None)
    __support = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'support'), b'support', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_support', REAL_NUMBER, required=True)
    __support._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2692, 12)
    __support._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2692, 12)
    support = property(__support.value, __support.set, None, None)
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'confidence'), b'confidence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_confidence', REAL_NUMBER, required=True)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2693, 12)
    __confidence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2693, 12)
    confidence = property(__confidence.value, __confidence.set, None, None)
    __lift = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'lift'), b'lift', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_201_lift', REAL_NUMBER)
    __lift._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2694, 12)
    __lift._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2694, 12)
    lift = property(__lift.value, __lift.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Delimiter.name(): __Delimiter, 
       __Time.name(): __Time, 
       __AntecedentSequence.name(): __AntecedentSequence, 
       __ConsequentSequence.name(): __ConsequentSequence})
    _AttributeMap.update({__id.name(): __id, 
       __numberOfSets.name(): __numberOfSets, 
       __occurrence.name(): __occurrence, 
       __support.name(): __support, 
       __confidence.name(): __confidence, 
       __lift.name(): __lift})


class CTD_ANON_202(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2707, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_202_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __seqId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'seqId'), b'seqId', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_202_seqId', ELEMENT_ID, required=True)
    __seqId._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2711, 12)
    __seqId._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2711, 12)
    seqId = property(__seqId.value, __seqId.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__seqId.name(): __seqId})


class CTD_ANON_203(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2739, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Value'), b'Value', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_httpwww_dmg_orgPMML_4_2Value', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2790, 4))
    Value = property(__Value.value, __Value.set, None, None)
    __Interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Interval'), b'Interval', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_httpwww_dmg_orgPMML_4_2Interval', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4))
    Interval = property(__Interval.value, __Interval.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2747, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2747, 12)
    name = property(__name.value, __name.set, None, None)
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayName'), b'displayName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_displayName', pyxb.binding.datatypes.string)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2748, 12)
    __displayName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2748, 12)
    displayName = property(__displayName.value, __displayName.set, None, None)
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'optype'), b'optype', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_optype', OPTYPE, required=True)
    __optype._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2749, 12)
    __optype._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2749, 12)
    optype = property(__optype.value, __optype.set, None, None)
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataType'), b'dataType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_dataType', DATATYPE, required=True)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2750, 12)
    __dataType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2750, 12)
    dataType = property(__dataType.value, __dataType.set, None, None)
    __taxonomy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'taxonomy'), b'taxonomy', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_taxonomy', pyxb.binding.datatypes.string)
    __taxonomy._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2751, 12)
    __taxonomy._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2751, 12)
    taxonomy = property(__taxonomy.value, __taxonomy.set, None, None)
    __isCyclic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isCyclic'), b'isCyclic', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_203_isCyclic', STD_ANON_32, unicode_default=b'0')
    __isCyclic._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2752, 12)
    __isCyclic._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2752, 12)
    isCyclic = property(__isCyclic.value, __isCyclic.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Value.name(): __Value, 
       __Interval.name(): __Interval})
    _AttributeMap.update({__name.name(): __name, 
       __displayName.name(): __displayName, 
       __optype.name(): __optype, 
       __dataType.name(): __dataType, 
       __taxonomy.name(): __taxonomy, 
       __isCyclic.name(): __isCyclic})


class CTD_ANON_204(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2791, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_204_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_204_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2795, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2795, 12)
    value_ = property(__value.value, __value.set, None, None)
    __displayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayValue'), b'displayValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_204_displayValue', pyxb.binding.datatypes.string)
    __displayValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2796, 12)
    __displayValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2796, 12)
    displayValue = property(__displayValue.value, __displayValue.set, None, None)
    __property = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'property'), b'property_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_204_property', STD_ANON_33, unicode_default=b'valid')
    __property._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2797, 12)
    __property._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2797, 12)
    property_ = property(__property.value, __property.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__value.name(): __value, 
       __displayValue.name(): __displayValue, 
       __property.name(): __property})


class CTD_ANON_205(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2809, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_205_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __closure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'closure'), b'closure', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_205_closure', STD_ANON_34, required=True)
    __closure._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2813, 12)
    __closure._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2813, 12)
    closure = property(__closure.value, __closure.set, None, None)
    __leftMargin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'leftMargin'), b'leftMargin', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_205_leftMargin', NUMBER)
    __leftMargin._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2823, 12)
    __leftMargin._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2823, 12)
    leftMargin = property(__leftMargin.value, __leftMargin.set, None, None)
    __rightMargin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'rightMargin'), b'rightMargin', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_205_rightMargin', NUMBER)
    __rightMargin._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2824, 12)
    __rightMargin._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2824, 12)
    rightMargin = property(__rightMargin.value, __rightMargin.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__closure.name(): __closure, 
       __leftMargin.name(): __leftMargin, 
       __rightMargin.name(): __rightMargin})


class CTD_ANON_206(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2828, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __TimeSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TimeSeries'), b'TimeSeries', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2TimeSeries', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2859, 4))
    TimeSeries = property(__TimeSeries.value, __TimeSeries.set, None, None)
    __ExponentialSmoothing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ExponentialSmoothing'), b'ExponentialSmoothing', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2ExponentialSmoothing', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2964, 4))
    ExponentialSmoothing = property(__ExponentialSmoothing.value, __ExponentialSmoothing.set, None, None)
    __SpectralAnalysis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SpectralAnalysis'), b'SpectralAnalysis', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2SpectralAnalysis', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3030, 4))
    SpectralAnalysis = property(__SpectralAnalysis.value, __SpectralAnalysis.set, None, None)
    __ARIMA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ARIMA'), b'ARIMA', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2ARIMA', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3031, 4))
    ARIMA = property(__ARIMA.value, __ARIMA.set, None, None)
    __SeasonalTrendDecomposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SeasonalTrendDecomposition'), b'SeasonalTrendDecomposition', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2SeasonalTrendDecomposition', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3032, 4))
    SeasonalTrendDecomposition = property(__SeasonalTrendDecomposition.value, __SeasonalTrendDecomposition.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2844, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2844, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2845, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2845, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2846, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2846, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __bestFit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'bestFit'), b'bestFit', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_bestFit', TIMESERIES_ALGORITHM, required=True)
    __bestFit._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2847, 12)
    __bestFit._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2847, 12)
    bestFit = property(__bestFit.value, __bestFit.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_206_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2848, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2848, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __TimeSeries.name(): __TimeSeries, 
       __ExponentialSmoothing.name(): __ExponentialSmoothing, 
       __SpectralAnalysis.name(): __SpectralAnalysis, 
       __ARIMA.name(): __ARIMA, 
       __SeasonalTrendDecomposition.name(): __SeasonalTrendDecomposition, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __bestFit.name(): __bestFit, 
       __isScorable.name(): __isScorable})


class CTD_ANON_207(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2860, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __TimeValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TimeValue'), b'TimeValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_207_httpwww_dmg_orgPMML_4_2TimeValue', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2878, 4))
    TimeValue = property(__TimeValue.value, __TimeValue.set, None, None)
    __TimeAnchor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TimeAnchor'), b'TimeAnchor', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_207_httpwww_dmg_orgPMML_4_2TimeAnchor', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2889, 4))
    TimeAnchor = property(__TimeAnchor.value, __TimeAnchor.set, None, None)
    __usage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'usage'), b'usage', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_207_usage', TIMESERIES_USAGE, unicode_default=b'original')
    __usage._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2865, 12)
    __usage._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2865, 12)
    usage = property(__usage.value, __usage.set, None, None)
    __startTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'startTime'), b'startTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_207_startTime', REAL_NUMBER)
    __startTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2866, 12)
    __startTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2866, 12)
    startTime = property(__startTime.value, __startTime.set, None, None)
    __endTime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'endTime'), b'endTime', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_207_endTime', REAL_NUMBER)
    __endTime._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2867, 12)
    __endTime._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2867, 12)
    endTime = property(__endTime.value, __endTime.set, None, None)
    __interpolationMethod = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'interpolationMethod'), b'interpolationMethod', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_207_interpolationMethod', INTERPOLATION_METHOD, unicode_default=b'none')
    __interpolationMethod._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2868, 12)
    __interpolationMethod._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2868, 12)
    interpolationMethod = property(__interpolationMethod.value, __interpolationMethod.set, None, None)
    _ElementMap.update({__TimeValue.name(): __TimeValue, 
       __TimeAnchor.name(): __TimeAnchor})
    _AttributeMap.update({__usage.name(): __usage, 
       __startTime.name(): __startTime, 
       __endTime.name(): __endTime, 
       __interpolationMethod.name(): __interpolationMethod})


class CTD_ANON_208(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2879, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Timestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Timestamp'), b'Timestamp', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_208_httpwww_dmg_orgPMML_4_2Timestamp', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1064, 4))
    Timestamp = property(__Timestamp.value, __Timestamp.set, None, None)
    __index = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'index'), b'index', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_208_index', INT_NUMBER)
    __index._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2883, 12)
    __index._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2883, 12)
    index = property(__index.value, __index.set, None, None)
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'time'), b'time', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_208_time', NUMBER)
    __time._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2884, 12)
    __time._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2884, 12)
    time = property(__time.value, __time.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_208_value', REAL_NUMBER, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2885, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2885, 12)
    value_ = property(__value.value, __value.set, None, None)
    __standardError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'standardError'), b'standardError', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_208_standardError', REAL_NUMBER)
    __standardError._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2886, 12)
    __standardError._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2886, 12)
    standardError = property(__standardError.value, __standardError.set, None, None)
    _ElementMap.update({__Timestamp.name(): __Timestamp})
    _AttributeMap.update({__index.name(): __index, 
       __time.name(): __time, 
       __value.name(): __value, 
       __standardError.name(): __standardError})


class CTD_ANON_209(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2890, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __TimeCycle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TimeCycle'), b'TimeCycle', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_209_httpwww_dmg_orgPMML_4_2TimeCycle', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2901, 4))
    TimeCycle = property(__TimeCycle.value, __TimeCycle.set, None, None)
    __TimeException = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TimeException'), b'TimeException', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_209_httpwww_dmg_orgPMML_4_2TimeException', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2941, 4))
    TimeException = property(__TimeException.value, __TimeException.set, None, None)
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_209_type', TIME_ANCHOR)
    __type._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2895, 12)
    __type._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2895, 12)
    type = property(__type.value, __type.set, None, None)
    __offset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'offset'), b'offset', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_209_offset', INT_NUMBER)
    __offset._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2896, 12)
    __offset._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2896, 12)
    offset = property(__offset.value, __offset.set, None, None)
    __stepsize = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'stepsize'), b'stepsize', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_209_stepsize', INT_NUMBER)
    __stepsize._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2897, 12)
    __stepsize._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2897, 12)
    stepsize = property(__stepsize.value, __stepsize.set, None, None)
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayName'), b'displayName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_209_displayName', pyxb.binding.datatypes.anySimpleType)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2898, 12)
    __displayName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2898, 12)
    displayName = property(__displayName.value, __displayName.set, None, None)
    _ElementMap.update({__TimeCycle.name(): __TimeCycle, 
       __TimeException.name(): __TimeException})
    _AttributeMap.update({__type.name(): __type, 
       __offset.name(): __offset, 
       __stepsize.name(): __stepsize, 
       __displayName.name(): __displayName})


class CTD_ANON_210(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2902, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_210_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'length'), b'length', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_210_length', INT_NUMBER)
    __length._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2906, 12)
    __length._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2906, 12)
    length = property(__length.value, __length.set, None, None)
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_210_type', VALID_TIME_SPEC)
    __type._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2907, 12)
    __type._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2907, 12)
    type = property(__type.value, __type.set, None, None)
    __displayName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'displayName'), b'displayName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_210_displayName', pyxb.binding.datatypes.anySimpleType)
    __displayName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2908, 12)
    __displayName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2908, 12)
    displayName = property(__displayName.value, __displayName.set, None, None)
    _ElementMap.update({__Array.name(): __Array})
    _AttributeMap.update({__length.name(): __length, 
       __type.name(): __type, 
       __displayName.name(): __displayName})


class CTD_ANON_211(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2942, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_211_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_211_type', TIME_EXCEPTION_TYPE)
    __type._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2946, 12)
    __type._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2946, 12)
    type = property(__type.value, __type.set, None, None)
    __count = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'count'), b'count', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_211_count', INT_NUMBER)
    __count._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2947, 12)
    __count._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2947, 12)
    count = property(__count.value, __count.set, None, None)
    _ElementMap.update({__Array.name(): __Array})
    _AttributeMap.update({__type.name(): __type, 
       __count.name(): __count})


class CTD_ANON_212(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2965, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __TimeValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'TimeValue'), b'TimeValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_212_httpwww_dmg_orgPMML_4_2TimeValue', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2878, 4))
    TimeValue = property(__TimeValue.value, __TimeValue.set, None, None)
    __Level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Level'), b'Level', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_212_httpwww_dmg_orgPMML_4_2Level', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2984, 4))
    Level = property(__Level.value, __Level.set, None, None)
    __Trend_ExpoSmooth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Trend_ExpoSmooth'), b'Trend_ExpoSmooth', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_212_httpwww_dmg_orgPMML_4_2Trend_ExpoSmooth', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2990, 4))
    Trend_ExpoSmooth = property(__Trend_ExpoSmooth.value, __Trend_ExpoSmooth.set, None, None)
    __Seasonality_ExpoSmooth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Seasonality_ExpoSmooth'), b'Seasonality_ExpoSmooth', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_212_httpwww_dmg_orgPMML_4_2Seasonality_ExpoSmooth', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3011, 4))
    Seasonality_ExpoSmooth = property(__Seasonality_ExpoSmooth.value, __Seasonality_ExpoSmooth.set, None, None)
    __RMSE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'RMSE'), b'RMSE', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_212_RMSE', REAL_NUMBER)
    __RMSE._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2972, 12)
    __RMSE._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2972, 12)
    RMSE = property(__RMSE.value, __RMSE.set, None, None)
    __transformation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'transformation'), b'transformation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_212_transformation', STD_ANON_35, unicode_default=b'none')
    __transformation._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2973, 12)
    __transformation._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2973, 12)
    transformation = property(__transformation.value, __transformation.set, None, None)
    _ElementMap.update({__TimeValue.name(): __TimeValue, 
       __Level.name(): __Level, 
       __Trend_ExpoSmooth.name(): __Trend_ExpoSmooth, 
       __Seasonality_ExpoSmooth.name(): __Seasonality_ExpoSmooth})
    _AttributeMap.update({__RMSE.name(): __RMSE, 
       __transformation.name(): __transformation})


class CTD_ANON_213(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2985, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __alpha = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'alpha'), b'alpha', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_213_alpha', REAL_NUMBER)
    __alpha._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2986, 12)
    __alpha._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2986, 12)
    alpha = property(__alpha.value, __alpha.set, None, None)
    __smoothedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'smoothedValue'), b'smoothedValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_213_smoothedValue', REAL_NUMBER)
    __smoothedValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2987, 12)
    __smoothedValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2987, 12)
    smoothedValue = property(__smoothedValue.value, __smoothedValue.set, None, None)
    _ElementMap.update({})
    _AttributeMap.update({__alpha.name(): __alpha, 
       __smoothedValue.name(): __smoothedValue})


class CTD_ANON_214(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2991, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_214_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __trend = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'trend'), b'trend', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_214_trend', STD_ANON_36, unicode_default=b'additive')
    __trend._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2995, 12)
    __trend._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2995, 12)
    trend = property(__trend.value, __trend.set, None, None)
    __gamma = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'gamma'), b'gamma', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_214_gamma', REAL_NUMBER)
    __gamma._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3006, 12)
    __gamma._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3006, 12)
    gamma = property(__gamma.value, __gamma.set, None, None)
    __phi = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'phi'), b'phi', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_214_phi', REAL_NUMBER, unicode_default=b'1')
    __phi._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3007, 12)
    __phi._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3007, 12)
    phi = property(__phi.value, __phi.set, None, None)
    __smoothedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'smoothedValue'), b'smoothedValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_214_smoothedValue', REAL_NUMBER)
    __smoothedValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3008, 12)
    __smoothedValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3008, 12)
    smoothedValue = property(__smoothedValue.value, __smoothedValue.set, None, None)
    _ElementMap.update({__Array.name(): __Array})
    _AttributeMap.update({__trend.name(): __trend, 
       __gamma.name(): __gamma, 
       __phi.name(): __phi, 
       __smoothedValue.name(): __smoothedValue})


class CTD_ANON_215(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3012, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_215_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_215_type', STD_ANON_37, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3016, 12)
    __type._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3016, 12)
    type = property(__type.value, __type.set, None, None)
    __period = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'period'), b'period', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_215_period', INT_NUMBER, required=True)
    __period._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3024, 12)
    __period._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3024, 12)
    period = property(__period.value, __period.set, None, None)
    __unit = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'unit'), b'unit', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_215_unit', pyxb.binding.datatypes.string)
    __unit._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3025, 12)
    __unit._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3025, 12)
    unit = property(__unit.value, __unit.set, None, None)
    __phase = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'phase'), b'phase', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_215_phase', INT_NUMBER)
    __phase._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3026, 12)
    __phase._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3026, 12)
    phase = property(__phase.value, __phase.set, None, None)
    __delta = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'delta'), b'delta', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_215_delta', REAL_NUMBER)
    __delta._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3027, 12)
    __delta._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3027, 12)
    delta = property(__delta.value, __delta.set, None, None)
    _ElementMap.update({__Array.name(): __Array})
    _AttributeMap.update({__type.name(): __type, 
       __period.name(): __period, 
       __unit.name(): __unit, 
       __phase.name(): __phase, 
       __delta.name(): __delta})


class CTD_ANON_216(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3042, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_name', FIELD_NAME, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3046, 12)
    __name._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3046, 12)
    name = property(__name.value, __name.set, None, None)
    __usageType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'usageType'), b'usageType', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_usageType', FIELD_USAGE_TYPE, unicode_default=b'active')
    __usageType._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3047, 12)
    __usageType._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3047, 12)
    usageType = property(__usageType.value, __usageType.set, None, None)
    __optype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'optype'), b'optype', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_optype', OPTYPE)
    __optype._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3048, 12)
    __optype._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3048, 12)
    optype = property(__optype.value, __optype.set, None, None)
    __importance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'importance'), b'importance', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_importance', PROB_NUMBER)
    __importance._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3049, 12)
    __importance._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3049, 12)
    importance = property(__importance.value, __importance.set, None, None)
    __outliers = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'outliers'), b'outliers', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_outliers', OUTLIER_TREATMENT_METHOD, unicode_default=b'asIs')
    __outliers._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3050, 12)
    __outliers._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3050, 12)
    outliers = property(__outliers.value, __outliers.set, None, None)
    __lowValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'lowValue'), b'lowValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_lowValue', NUMBER)
    __lowValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3051, 12)
    __lowValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3051, 12)
    lowValue = property(__lowValue.value, __lowValue.set, None, None)
    __highValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'highValue'), b'highValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_highValue', NUMBER)
    __highValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3052, 12)
    __highValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3052, 12)
    highValue = property(__highValue.value, __highValue.set, None, None)
    __missingValueReplacement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'missingValueReplacement'), b'missingValueReplacement', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_missingValueReplacement', pyxb.binding.datatypes.string)
    __missingValueReplacement._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3053, 12)
    __missingValueReplacement._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3053, 12)
    missingValueReplacement = property(__missingValueReplacement.value, __missingValueReplacement.set, None, None)
    __missingValueTreatment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'missingValueTreatment'), b'missingValueTreatment', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_missingValueTreatment', MISSING_VALUE_TREATMENT_METHOD)
    __missingValueTreatment._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3054, 12)
    __missingValueTreatment._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3054, 12)
    missingValueTreatment = property(__missingValueTreatment.value, __missingValueTreatment.set, None, None)
    __invalidValueTreatment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'invalidValueTreatment'), b'invalidValueTreatment', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_216_invalidValueTreatment', INVALID_VALUE_TREATMENT_METHOD, unicode_default=b'returnInvalid')
    __invalidValueTreatment._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3055, 12)
    __invalidValueTreatment._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3055, 12)
    invalidValueTreatment = property(__invalidValueTreatment.value, __invalidValueTreatment.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__name.name(): __name, 
       __usageType.name(): __usageType, 
       __optype.name(): __optype, 
       __importance.name(): __importance, 
       __outliers.name(): __outliers, 
       __lowValue.name(): __lowValue, 
       __highValue.name(): __highValue, 
       __missingValueReplacement.name(): __missingValueReplacement, 
       __missingValueTreatment.name(): __missingValueTreatment, 
       __invalidValueTreatment.name(): __invalidValueTreatment})


class CTD_ANON_217(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3106, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __LiftData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LiftData'), b'LiftData', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_httpwww_dmg_orgPMML_4_2LiftData', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3149, 4))
    LiftData = property(__LiftData.value, __LiftData.set, None, None)
    __ROC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ROC'), b'ROC', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_httpwww_dmg_orgPMML_4_2ROC', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3229, 4))
    ROC = property(__ROC.value, __ROC.set, None, None)
    __ConfusionMatrix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ConfusionMatrix'), b'ConfusionMatrix', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_httpwww_dmg_orgPMML_4_2ConfusionMatrix', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3251, 4))
    ConfusionMatrix = property(__ConfusionMatrix.value, __ConfusionMatrix.set, None, None)
    __targetField = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetField'), b'targetField', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_targetField', pyxb.binding.datatypes.string, required=True)
    __targetField._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3113, 12)
    __targetField._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3113, 12)
    targetField = property(__targetField.value, __targetField.set, None, None)
    __dataName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataName'), b'dataName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_dataName', pyxb.binding.datatypes.string)
    __dataName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3114, 12)
    __dataName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3114, 12)
    dataName = property(__dataName.value, __dataName.set, None, None)
    __dataUsage = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataUsage'), b'dataUsage', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_dataUsage', STD_ANON_38, unicode_default=b'training')
    __dataUsage._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3115, 12)
    __dataUsage._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3115, 12)
    dataUsage = property(__dataUsage.value, __dataUsage.set, None, None)
    __meanError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'meanError'), b'meanError', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_meanError', NUMBER)
    __meanError._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3124, 12)
    __meanError._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3124, 12)
    meanError = property(__meanError.value, __meanError.set, None, None)
    __meanAbsoluteError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'meanAbsoluteError'), b'meanAbsoluteError', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_meanAbsoluteError', NUMBER)
    __meanAbsoluteError._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3125, 12)
    __meanAbsoluteError._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3125, 12)
    meanAbsoluteError = property(__meanAbsoluteError.value, __meanAbsoluteError.set, None, None)
    __meanSquaredError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'meanSquaredError'), b'meanSquaredError', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_meanSquaredError', NUMBER)
    __meanSquaredError._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3126, 12)
    __meanSquaredError._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3126, 12)
    meanSquaredError = property(__meanSquaredError.value, __meanSquaredError.set, None, None)
    __rootMeanSquaredError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'rootMeanSquaredError'), b'rootMeanSquaredError', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_rootMeanSquaredError', NUMBER)
    __rootMeanSquaredError._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3127, 12)
    __rootMeanSquaredError._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3127, 12)
    rootMeanSquaredError = property(__rootMeanSquaredError.value, __rootMeanSquaredError.set, None, None)
    __r_squared = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'r-squared'), b'r_squared', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_r_squared', NUMBER)
    __r_squared._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3128, 12)
    __r_squared._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3128, 12)
    r_squared = property(__r_squared.value, __r_squared.set, None, None)
    __adj_r_squared = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'adj-r-squared'), b'adj_r_squared', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_adj_r_squared', NUMBER)
    __adj_r_squared._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3129, 12)
    __adj_r_squared._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3129, 12)
    adj_r_squared = property(__adj_r_squared.value, __adj_r_squared.set, None, None)
    __sumSquaredError = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'sumSquaredError'), b'sumSquaredError', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_sumSquaredError', NUMBER)
    __sumSquaredError._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3130, 12)
    __sumSquaredError._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3130, 12)
    sumSquaredError = property(__sumSquaredError.value, __sumSquaredError.set, None, None)
    __sumSquaredRegression = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'sumSquaredRegression'), b'sumSquaredRegression', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_sumSquaredRegression', NUMBER)
    __sumSquaredRegression._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3131, 12)
    __sumSquaredRegression._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3131, 12)
    sumSquaredRegression = property(__sumSquaredRegression.value, __sumSquaredRegression.set, None, None)
    __numOfRecords = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numOfRecords'), b'numOfRecords', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_numOfRecords', NUMBER)
    __numOfRecords._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3132, 12)
    __numOfRecords._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3132, 12)
    numOfRecords = property(__numOfRecords.value, __numOfRecords.set, None, None)
    __numOfRecordsWeighted = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numOfRecordsWeighted'), b'numOfRecordsWeighted', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_numOfRecordsWeighted', NUMBER)
    __numOfRecordsWeighted._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3133, 12)
    __numOfRecordsWeighted._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3133, 12)
    numOfRecordsWeighted = property(__numOfRecordsWeighted.value, __numOfRecordsWeighted.set, None, None)
    __numOfPredictors = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'numOfPredictors'), b'numOfPredictors', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_numOfPredictors', NUMBER)
    __numOfPredictors._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3134, 12)
    __numOfPredictors._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3134, 12)
    numOfPredictors = property(__numOfPredictors.value, __numOfPredictors.set, None, None)
    __degreesOfFreedom = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'degreesOfFreedom'), b'degreesOfFreedom', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_degreesOfFreedom', NUMBER)
    __degreesOfFreedom._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3135, 12)
    __degreesOfFreedom._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3135, 12)
    degreesOfFreedom = property(__degreesOfFreedom.value, __degreesOfFreedom.set, None, None)
    __fStatistic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'fStatistic'), b'fStatistic', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_fStatistic', NUMBER)
    __fStatistic._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3136, 12)
    __fStatistic._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3136, 12)
    fStatistic = property(__fStatistic.value, __fStatistic.set, None, None)
    __AIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'AIC'), b'AIC', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_AIC', NUMBER)
    __AIC._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3137, 12)
    __AIC._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3137, 12)
    AIC = property(__AIC.value, __AIC.set, None, None)
    __BIC = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'BIC'), b'BIC', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_BIC', NUMBER)
    __BIC._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3138, 12)
    __BIC._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3138, 12)
    BIC = property(__BIC.value, __BIC.set, None, None)
    __AICc = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'AICc'), b'AICc', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_217_AICc', NUMBER)
    __AICc._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3139, 12)
    __AICc._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3139, 12)
    AICc = property(__AICc.value, __AICc.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __LiftData.name(): __LiftData, 
       __ROC.name(): __ROC, 
       __ConfusionMatrix.name(): __ConfusionMatrix})
    _AttributeMap.update({__targetField.name(): __targetField, 
       __dataName.name(): __dataName, 
       __dataUsage.name(): __dataUsage, 
       __meanError.name(): __meanError, 
       __meanAbsoluteError.name(): __meanAbsoluteError, 
       __meanSquaredError.name(): __meanSquaredError, 
       __rootMeanSquaredError.name(): __rootMeanSquaredError, 
       __r_squared.name(): __r_squared, 
       __adj_r_squared.name(): __adj_r_squared, 
       __sumSquaredError.name(): __sumSquaredError, 
       __sumSquaredRegression.name(): __sumSquaredRegression, 
       __numOfRecords.name(): __numOfRecords, 
       __numOfRecordsWeighted.name(): __numOfRecordsWeighted, 
       __numOfPredictors.name(): __numOfPredictors, 
       __degreesOfFreedom.name(): __degreesOfFreedom, 
       __fStatistic.name(): __fStatistic, 
       __AIC.name(): __AIC, 
       __BIC.name(): __BIC, 
       __AICc.name(): __AICc})


class CTD_ANON_218(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3143, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __dataName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'dataName'), b'dataName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_218_dataName', pyxb.binding.datatypes.string)
    __dataName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3144, 12)
    __dataName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3144, 12)
    dataName = property(__dataName.value, __dataName.set, None, None)
    __SSE = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'SSE'), b'SSE', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_218_SSE', NUMBER)
    __SSE._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3145, 12)
    __SSE._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3145, 12)
    SSE = property(__SSE.value, __SSE.set, None, None)
    __SSB = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'SSB'), b'SSB', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_218_SSB', NUMBER)
    __SSB._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3146, 12)
    __SSB._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3146, 12)
    SSB = property(__SSB.value, __SSB.set, None, None)
    _ElementMap.update({})
    _AttributeMap.update({__dataName.name(): __dataName, 
       __SSE.name(): __SSE, 
       __SSB.name(): __SSB})


class CTD_ANON_219(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3150, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_219_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __ModelLiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelLiftGraph'), b'ModelLiftGraph', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_219_httpwww_dmg_orgPMML_4_2ModelLiftGraph', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3162, 4))
    ModelLiftGraph = property(__ModelLiftGraph.value, __ModelLiftGraph.set, None, None)
    __OptimumLiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'OptimumLiftGraph'), b'OptimumLiftGraph', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_219_httpwww_dmg_orgPMML_4_2OptimumLiftGraph', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3170, 4))
    OptimumLiftGraph = property(__OptimumLiftGraph.value, __OptimumLiftGraph.set, None, None)
    __RandomLiftGraph = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'RandomLiftGraph'), b'RandomLiftGraph', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_219_httpwww_dmg_orgPMML_4_2RandomLiftGraph', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3178, 4))
    RandomLiftGraph = property(__RandomLiftGraph.value, __RandomLiftGraph.set, None, None)
    __targetFieldValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetFieldValue'), b'targetFieldValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_219_targetFieldValue', pyxb.binding.datatypes.string)
    __targetFieldValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3157, 12)
    __targetFieldValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3157, 12)
    targetFieldValue = property(__targetFieldValue.value, __targetFieldValue.set, None, None)
    __targetFieldDisplayValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'targetFieldDisplayValue'), b'targetFieldDisplayValue', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_219_targetFieldDisplayValue', pyxb.binding.datatypes.string)
    __targetFieldDisplayValue._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3158, 12)
    __targetFieldDisplayValue._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3158, 12)
    targetFieldDisplayValue = property(__targetFieldDisplayValue.value, __targetFieldDisplayValue.set, None, None)
    __rankingQuality = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'rankingQuality'), b'rankingQuality', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_219_rankingQuality', NUMBER)
    __rankingQuality._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3159, 12)
    __rankingQuality._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3159, 12)
    rankingQuality = property(__rankingQuality.value, __rankingQuality.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __ModelLiftGraph.name(): __ModelLiftGraph, 
       __OptimumLiftGraph.name(): __OptimumLiftGraph, 
       __RandomLiftGraph.name(): __RandomLiftGraph})
    _AttributeMap.update({__targetFieldValue.name(): __targetFieldValue, 
       __targetFieldDisplayValue.name(): __targetFieldDisplayValue, 
       __rankingQuality.name(): __rankingQuality})


class CTD_ANON_220(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3303, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Targets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Targets'), b'Targets', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2Targets', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
    Targets = property(__Targets.value, __Targets.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Output = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Output'), b'Output', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2Output', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
    Output = property(__Output.value, __Output.set, None, None)
    __ModelStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), b'ModelStats', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2ModelStats', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
    ModelStats = property(__ModelStats.value, __ModelStats.set, None, None)
    __LocalTransformations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), b'LocalTransformations', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2LocalTransformations', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
    LocalTransformations = property(__LocalTransformations.value, __LocalTransformations.set, None, None)
    __ModelVerification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), b'ModelVerification', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2ModelVerification', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
    ModelVerification = property(__ModelVerification.value, __ModelVerification.set, None, None)
    __MiningSchema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), b'MiningSchema', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2MiningSchema', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
    MiningSchema = property(__MiningSchema.value, __MiningSchema.set, None, None)
    __ModelExplanation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), b'ModelExplanation', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2ModelExplanation', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
    ModelExplanation = property(__ModelExplanation.value, __ModelExplanation.set, None, None)
    __Node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Node'), b'Node', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_httpwww_dmg_orgPMML_4_2Node', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3333, 4))
    Node = property(__Node.value, __Node.set, None, None)
    __modelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'modelName'), b'modelName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_modelName', pyxb.binding.datatypes.string)
    __modelName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3316, 12)
    __modelName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3316, 12)
    modelName = property(__modelName.value, __modelName.set, None, None)
    __functionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'functionName'), b'functionName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_functionName', MINING_FUNCTION, required=True)
    __functionName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3317, 12)
    __functionName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3317, 12)
    functionName = property(__functionName.value, __functionName.set, None, None)
    __algorithmName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'algorithmName'), b'algorithmName', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_algorithmName', pyxb.binding.datatypes.string)
    __algorithmName._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3318, 12)
    __algorithmName._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3318, 12)
    algorithmName = property(__algorithmName.value, __algorithmName.set, None, None)
    __missingValueStrategy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'missingValueStrategy'), b'missingValueStrategy', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_missingValueStrategy', MISSING_VALUE_STRATEGY, unicode_default=b'none')
    __missingValueStrategy._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3319, 12)
    __missingValueStrategy._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3319, 12)
    missingValueStrategy = property(__missingValueStrategy.value, __missingValueStrategy.set, None, None)
    __missingValuePenalty = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'missingValuePenalty'), b'missingValuePenalty', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_missingValuePenalty', PROB_NUMBER, unicode_default=b'1.0')
    __missingValuePenalty._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3320, 12)
    __missingValuePenalty._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3320, 12)
    missingValuePenalty = property(__missingValuePenalty.value, __missingValuePenalty.set, None, None)
    __noTrueChildStrategy = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'noTrueChildStrategy'), b'noTrueChildStrategy', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_noTrueChildStrategy', NO_TRUE_CHILD_STRATEGY, unicode_default=b'returnNullPrediction')
    __noTrueChildStrategy._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3321, 12)
    __noTrueChildStrategy._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3321, 12)
    noTrueChildStrategy = property(__noTrueChildStrategy.value, __noTrueChildStrategy.set, None, None)
    __splitCharacteristic = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'splitCharacteristic'), b'splitCharacteristic', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_splitCharacteristic', STD_ANON_39, unicode_default=b'multiSplit')
    __splitCharacteristic._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3322, 12)
    __splitCharacteristic._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3322, 12)
    splitCharacteristic = property(__splitCharacteristic.value, __splitCharacteristic.set, None, None)
    __isScorable = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'isScorable'), b'isScorable', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_220_isScorable', pyxb.binding.datatypes.boolean, unicode_default=b'true')
    __isScorable._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3330, 12)
    __isScorable._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3330, 12)
    isScorable = property(__isScorable.value, __isScorable.set, None, None)
    _ElementMap.update({__Targets.name(): __Targets, 
       __Extension.name(): __Extension, 
       __Output.name(): __Output, 
       __ModelStats.name(): __ModelStats, 
       __LocalTransformations.name(): __LocalTransformations, 
       __ModelVerification.name(): __ModelVerification, 
       __MiningSchema.name(): __MiningSchema, 
       __ModelExplanation.name(): __ModelExplanation, 
       __Node.name(): __Node})
    _AttributeMap.update({__modelName.name(): __modelName, 
       __functionName.name(): __functionName, 
       __algorithmName.name(): __algorithmName, 
       __missingValueStrategy.name(): __missingValueStrategy, 
       __missingValuePenalty.name(): __missingValuePenalty, 
       __noTrueChildStrategy.name(): __noTrueChildStrategy, 
       __splitCharacteristic.name(): __splitCharacteristic, 
       __isScorable.name(): __isScorable})


class CTD_ANON_221(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3334, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Regression = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Regression'), b'Regression', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2Regression', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 113, 4))
    Regression = property(__Regression.value, __Regression.set, None, None)
    __DecisionTree = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'DecisionTree'), b'DecisionTree', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2DecisionTree', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 130, 4))
    DecisionTree = property(__DecisionTree.value, __DecisionTree.set, None, None)
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Partition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Partition'), b'Partition', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2Partition', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1755, 4))
    Partition = property(__Partition.value, __Partition.set, None, None)
    __Node = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Node'), b'Node', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2Node', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3333, 4))
    Node = property(__Node.value, __Node.set, None, None)
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), b'SimplePredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2SimplePredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4))
    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), b'CompoundPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2CompoundPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4))
    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), b'SimpleSetPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2SimpleSetPredicate', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4))
    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'True'), b'True_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2True', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4))
    True_ = property(__True.value, __True.set, None, None)
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'False'), b'False_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2False', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4))
    False_ = property(__False.value, __False.set, None, None)
    __ScoreDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution'), b'ScoreDistribution', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_httpwww_dmg_orgPMML_4_2ScoreDistribution', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3436, 4))
    ScoreDistribution = property(__ScoreDistribution.value, __ScoreDistribution.set, None, None)
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'id'), b'id', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_id', pyxb.binding.datatypes.string)
    __id._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3347, 12)
    __id._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3347, 12)
    id = property(__id.value, __id.set, None, None)
    __score = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'score'), b'score', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_score', pyxb.binding.datatypes.string)
    __score._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3348, 12)
    __score._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3348, 12)
    score = property(__score.value, __score.set, None, None)
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'recordCount'), b'recordCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_recordCount', NUMBER)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3349, 12)
    __recordCount._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3349, 12)
    recordCount = property(__recordCount.value, __recordCount.set, None, None)
    __defaultChild = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'defaultChild'), b'defaultChild', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_221_defaultChild', pyxb.binding.datatypes.string)
    __defaultChild._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3350, 12)
    __defaultChild._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3350, 12)
    defaultChild = property(__defaultChild.value, __defaultChild.set, None, None)
    _ElementMap.update({__Regression.name(): __Regression, 
       __DecisionTree.name(): __DecisionTree, 
       __Extension.name(): __Extension, 
       __Partition.name(): __Partition, 
       __Node.name(): __Node, 
       __SimplePredicate.name(): __SimplePredicate, 
       __CompoundPredicate.name(): __CompoundPredicate, 
       __SimpleSetPredicate.name(): __SimpleSetPredicate, 
       __True.name(): __True, 
       __False.name(): __False, 
       __ScoreDistribution.name(): __ScoreDistribution})
    _AttributeMap.update({__id.name(): __id, 
       __score.name(): __score, 
       __recordCount.name(): __recordCount, 
       __defaultChild.name(): __defaultChild})


class CTD_ANON_222(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3363, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_222_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_222_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3367, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3367, 12)
    field = property(__field.value, __field.set, None, None)
    __operator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'operator'), b'operator', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_222_operator', STD_ANON_40, required=True)
    __operator._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3368, 12)
    __operator._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3368, 12)
    operator = property(__operator.value, __operator.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_222_value', pyxb.binding.datatypes.string)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3382, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3382, 12)
    value_ = property(__value.value, __value.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__field.name(): __field, 
       __operator.name(): __operator, 
       __value.name(): __value})


class CTD_ANON_223(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3386, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_223_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __SimplePredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), b'SimplePredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_223_httpwww_dmg_orgPMML_4_2SimplePredicate', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4))
    SimplePredicate = property(__SimplePredicate.value, __SimplePredicate.set, None, None)
    __CompoundPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), b'CompoundPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_223_httpwww_dmg_orgPMML_4_2CompoundPredicate', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4))
    CompoundPredicate = property(__CompoundPredicate.value, __CompoundPredicate.set, None, None)
    __SimpleSetPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), b'SimpleSetPredicate', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_223_httpwww_dmg_orgPMML_4_2SimpleSetPredicate', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4))
    SimpleSetPredicate = property(__SimpleSetPredicate.value, __SimpleSetPredicate.set, None, None)
    __True = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'True'), b'True_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_223_httpwww_dmg_orgPMML_4_2True', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4))
    True_ = property(__True.value, __True.set, None, None)
    __False = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'False'), b'False_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_223_httpwww_dmg_orgPMML_4_2False', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4))
    False_ = property(__False.value, __False.set, None, None)
    __booleanOperator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'booleanOperator'), b'booleanOperator', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_223_booleanOperator', STD_ANON_41, required=True)
    __booleanOperator._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3393, 12)
    __booleanOperator._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3393, 12)
    booleanOperator = property(__booleanOperator.value, __booleanOperator.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __SimplePredicate.name(): __SimplePredicate, 
       __CompoundPredicate.name(): __CompoundPredicate, 
       __SimpleSetPredicate.name(): __SimpleSetPredicate, 
       __True.name(): __True, 
       __False.name(): __False})
    _AttributeMap.update({__booleanOperator.name(): __booleanOperator})


class CTD_ANON_224(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3406, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_224_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __Array = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Array'), b'Array', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_224_httpwww_dmg_orgPMML_4_2Array', False, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
    Array = property(__Array.value, __Array.set, None, None)
    __field = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'field'), b'field', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_224_field', FIELD_NAME, required=True)
    __field._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3411, 12)
    __field._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3411, 12)
    field = property(__field.value, __field.set, None, None)
    __booleanOperator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'booleanOperator'), b'booleanOperator', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_224_booleanOperator', STD_ANON_42, required=True)
    __booleanOperator._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3412, 12)
    __booleanOperator._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3412, 12)
    booleanOperator = property(__booleanOperator.value, __booleanOperator.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension, 
       __Array.name(): __Array})
    _AttributeMap.update({__field.name(): __field, 
       __booleanOperator.name(): __booleanOperator})


class CTD_ANON_225(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3437, 8)
    _ElementMap = {}
    _AttributeMap = {}
    __Extension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, b'Extension'), b'Extension', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_225_httpwww_dmg_orgPMML_4_2Extension', True, pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
    Extension = property(__Extension.value, __Extension.set, None, None)
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'value'), b'value_', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_225_value', pyxb.binding.datatypes.string, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3441, 12)
    __value._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3441, 12)
    value_ = property(__value.value, __value.set, None, None)
    __recordCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'recordCount'), b'recordCount', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_225_recordCount', NUMBER, required=True)
    __recordCount._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3442, 12)
    __recordCount._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3442, 12)
    recordCount = property(__recordCount.value, __recordCount.set, None, None)
    __confidence = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'confidence'), b'confidence', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_225_confidence', PROB_NUMBER)
    __confidence._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3443, 12)
    __confidence._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3443, 12)
    confidence = property(__confidence.value, __confidence.set, None, None)
    __probability = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, b'probability'), b'probability', b'__httpwww_dmg_orgPMML_4_2_CTD_ANON_225_probability', PROB_NUMBER)
    __probability._DeclarationLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3444, 12)
    __probability._UseLocation = pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3444, 12)
    probability = property(__probability.value, __probability.set, None, None)
    _ElementMap.update({__Extension.name(): __Extension})
    _AttributeMap.update({__value.name(): __value, 
       __recordCount.name(): __recordCount, 
       __confidence.name(): __confidence, 
       __probability.name(): __probability})


SpectralAnalysis = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SpectralAnalysis'), pyxb.binding.datatypes.anyType, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3030, 4))
Namespace.addCategoryObject(b'elementBinding', SpectralAnalysis.name().localName(), SpectralAnalysis)
ARIMA = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ARIMA'), pyxb.binding.datatypes.anyType, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3031, 4))
Namespace.addCategoryObject(b'elementBinding', ARIMA.name().localName(), ARIMA)
SeasonalTrendDecomposition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SeasonalTrendDecomposition'), pyxb.binding.datatypes.anyType, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3032, 4))
Namespace.addCategoryObject(b'elementBinding', SeasonalTrendDecomposition.name().localName(), SeasonalTrendDecomposition)
ItemRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ItemRef'), CTD_ANON, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 208, 4))
Namespace.addCategoryObject(b'elementBinding', ItemRef.name().localName(), ItemRef)
CompoundRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundRule'), CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 302, 4))
Namespace.addCategoryObject(b'elementBinding', CompoundRule.name().localName(), CompoundRule)
MissingValueWeights = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MissingValueWeights'), CTD_ANON_2, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 342, 4))
Namespace.addCategoryObject(b'elementBinding', MissingValueWeights.name().localName(), MissingValueWeights)
Cluster = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Cluster'), CTD_ANON_3, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 350, 4))
Namespace.addCategoryObject(b'elementBinding', Cluster.name().localName(), Cluster)
KohonenMap = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'KohonenMap'), CTD_ANON_4, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 364, 4))
Namespace.addCategoryObject(b'elementBinding', KohonenMap.name().localName(), KohonenMap)
Covariances = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Covariances'), CTD_ANON_5, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 374, 4))
Namespace.addCategoryObject(b'elementBinding', Covariances.name().localName(), Covariances)
Comparisons = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Comparisons'), CTD_ANON_6, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 402, 4))
Namespace.addCategoryObject(b'elementBinding', Comparisons.name().localName(), Comparisons)
euclidean = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'euclidean'), CTD_ANON_7, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 448, 4))
Namespace.addCategoryObject(b'elementBinding', euclidean.name().localName(), euclidean)
squaredEuclidean = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'squaredEuclidean'), CTD_ANON_8, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 455, 4))
Namespace.addCategoryObject(b'elementBinding', squaredEuclidean.name().localName(), squaredEuclidean)
cityBlock = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'cityBlock'), CTD_ANON_9, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 462, 4))
Namespace.addCategoryObject(b'elementBinding', cityBlock.name().localName(), cityBlock)
chebychev = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'chebychev'), CTD_ANON_10, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 469, 4))
Namespace.addCategoryObject(b'elementBinding', chebychev.name().localName(), chebychev)
simpleMatching = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'simpleMatching'), CTD_ANON_11, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 484, 4))
Namespace.addCategoryObject(b'elementBinding', simpleMatching.name().localName(), simpleMatching)
jaccard = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'jaccard'), CTD_ANON_12, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 491, 4))
Namespace.addCategoryObject(b'elementBinding', jaccard.name().localName(), jaccard)
tanimoto = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'tanimoto'), CTD_ANON_13, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 498, 4))
Namespace.addCategoryObject(b'elementBinding', tanimoto.name().localName(), tanimoto)
TextDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextDictionary'), CTD_ANON_14, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 632, 4))
Namespace.addCategoryObject(b'elementBinding', TextDictionary.name().localName(), TextDictionary)
TextCorpus = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextCorpus'), CTD_ANON_15, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 641, 4))
Namespace.addCategoryObject(b'elementBinding', TextCorpus.name().localName(), TextCorpus)
DocumentTermMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DocumentTermMatrix'), CTD_ANON_16, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 660, 4))
Namespace.addCategoryObject(b'elementBinding', DocumentTermMatrix.name().localName(), DocumentTermMatrix)
InstanceFields = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InstanceFields'), CTD_ANON_17, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 761, 4))
Namespace.addCategoryObject(b'elementBinding', InstanceFields.name().localName(), InstanceFields)
InstanceField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InstanceField'), CTD_ANON_18, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 769, 4))
Namespace.addCategoryObject(b'elementBinding', InstanceField.name().localName(), InstanceField)
KNNInputs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'KNNInputs'), CTD_ANON_19, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 778, 4))
Namespace.addCategoryObject(b'elementBinding', KNNInputs.name().localName(), KNNInputs)
Targets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4))
Namespace.addCategoryObject(b'elementBinding', Targets.name().localName(), Targets)
PMML = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PMML'), CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 852, 4))
Namespace.addCategoryObject(b'elementBinding', PMML.name().localName(), PMML)
MiningBuildTask = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningBuildTask'), CTD_ANON_22, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 887, 4))
Namespace.addCategoryObject(b'elementBinding', MiningBuildTask.name().localName(), MiningBuildTask)
Extension = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4))
Namespace.addCategoryObject(b'elementBinding', Extension.name().localName(), Extension)
Indices = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Indices'), STD_ANON_12, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 990, 4))
Namespace.addCategoryObject(b'elementBinding', Indices.name().localName(), Indices)
INT_Entries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'INT-Entries'), STD_ANON_13, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 995, 4))
Namespace.addCategoryObject(b'elementBinding', INT_Entries.name().localName(), INT_Entries)
REAL_Entries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'REAL-Entries'), STD_ANON_14, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1000, 4))
Namespace.addCategoryObject(b'elementBinding', REAL_Entries.name().localName(), REAL_Entries)
Header = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Header'), CTD_ANON_24, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1036, 4))
Namespace.addCategoryObject(b'elementBinding', Header.name().localName(), Header)
Application = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Application'), CTD_ANON_25, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1048, 4))
Namespace.addCategoryObject(b'elementBinding', Application.name().localName(), Application)
Annotation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Annotation'), CTD_ANON_26, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1057, 4))
Namespace.addCategoryObject(b'elementBinding', Annotation.name().localName(), Annotation)
Timestamp = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Timestamp'), CTD_ANON_27, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1064, 4))
Namespace.addCategoryObject(b'elementBinding', Timestamp.name().localName(), Timestamp)
Taxonomy = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Taxonomy'), CTD_ANON_28, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1071, 4))
Namespace.addCategoryObject(b'elementBinding', Taxonomy.name().localName(), Taxonomy)
TableLocator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), CTD_ANON_29, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4))
Namespace.addCategoryObject(b'elementBinding', TableLocator.name().localName(), TableLocator)
InlineTable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), CTD_ANON_30, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4))
Namespace.addCategoryObject(b'elementBinding', InlineTable.name().localName(), InlineTable)
row = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'row'), CTD_ANON_31, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1118, 4))
Namespace.addCategoryObject(b'elementBinding', row.name().localName(), row)
BayesInputs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BayesInputs'), CTD_ANON_32, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1151, 4))
Namespace.addCategoryObject(b'elementBinding', BayesInputs.name().localName(), BayesInputs)
BayesInput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BayesInput'), CTD_ANON_33, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1159, 4))
Namespace.addCategoryObject(b'elementBinding', BayesInput.name().localName(), BayesInput)
BayesOutput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BayesOutput'), CTD_ANON_34, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1174, 4))
Namespace.addCategoryObject(b'elementBinding', BayesOutput.name().localName(), BayesOutput)
TargetValueStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueStats'), CTD_ANON_35, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1183, 4))
Namespace.addCategoryObject(b'elementBinding', TargetValueStats.name().localName(), TargetValueStats)
TargetValueStat = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueStat'), CTD_ANON_36, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1191, 4))
Namespace.addCategoryObject(b'elementBinding', TargetValueStat.name().localName(), TargetValueStat)
PairCounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PairCounts'), CTD_ANON_37, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1200, 4))
Namespace.addCategoryObject(b'elementBinding', PairCounts.name().localName(), PairCounts)
TargetValueCounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCounts'), CTD_ANON_38, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1209, 4))
Namespace.addCategoryObject(b'elementBinding', TargetValueCounts.name().localName(), TargetValueCounts)
Output = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4))
Namespace.addCategoryObject(b'elementBinding', Output.name().localName(), Output)
Decisions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Decisions'), CTD_ANON_40, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1311, 4))
Namespace.addCategoryObject(b'elementBinding', Decisions.name().localName(), Decisions)
Decision = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Decision'), CTD_ANON_41, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1321, 4))
Namespace.addCategoryObject(b'elementBinding', Decision.name().localName(), Decision)
ParameterList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ParameterList'), CTD_ANON_42, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1412, 4))
Namespace.addCategoryObject(b'elementBinding', ParameterList.name().localName(), ParameterList)
FactorList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FactorList'), CTD_ANON_43, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1430, 4))
Namespace.addCategoryObject(b'elementBinding', FactorList.name().localName(), FactorList)
CovariateList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CovariateList'), CTD_ANON_44, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1438, 4))
Namespace.addCategoryObject(b'elementBinding', CovariateList.name().localName(), CovariateList)
Categories = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Categories'), CTD_ANON_45, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1457, 4))
Namespace.addCategoryObject(b'elementBinding', Categories.name().localName(), Categories)
Category = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Category'), CTD_ANON_46, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1465, 4))
Namespace.addCategoryObject(b'elementBinding', Category.name().localName(), Category)
PPMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PPMatrix'), CTD_ANON_47, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1473, 4))
Namespace.addCategoryObject(b'elementBinding', PPMatrix.name().localName(), PPMatrix)
ParamMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ParamMatrix'), CTD_ANON_48, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1521, 4))
Namespace.addCategoryObject(b'elementBinding', ParamMatrix.name().localName(), ParamMatrix)
EventValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'EventValues'), CTD_ANON_49, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1572, 4))
Namespace.addCategoryObject(b'elementBinding', EventValues.name().localName(), EventValues)
ModelStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4))
Namespace.addCategoryObject(b'elementBinding', ModelStats.name().localName(), ModelStats)
DiscrStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DiscrStats'), CTD_ANON_51, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1668, 4))
Namespace.addCategoryObject(b'elementBinding', DiscrStats.name().localName(), DiscrStats)
MultivariateStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MultivariateStats'), CTD_ANON_52, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1693, 4))
Namespace.addCategoryObject(b'elementBinding', MultivariateStats.name().localName(), MultivariateStats)
TransformationDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TransformationDictionary'), CTD_ANON_53, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1797, 4))
Namespace.addCategoryObject(b'elementBinding', TransformationDictionary.name().localName(), TransformationDictionary)
LocalTransformations = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4))
Namespace.addCategoryObject(b'elementBinding', LocalTransformations.name().localName(), LocalTransformations)
DiscretizeBin = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DiscretizeBin'), CTD_ANON_55, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1894, 4))
Namespace.addCategoryObject(b'elementBinding', DiscretizeBin.name().localName(), DiscretizeBin)
TextIndexNormalization = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndexNormalization'), CTD_ANON_56, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1960, 4))
Namespace.addCategoryObject(b'elementBinding', TextIndexNormalization.name().localName(), TextIndexNormalization)
NeuralInputs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralInputs'), CTD_ANON_57, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2029, 4))
Namespace.addCategoryObject(b'elementBinding', NeuralInputs.name().localName(), NeuralInputs)
NeuralOutputs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralOutputs'), CTD_ANON_58, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2052, 4))
Namespace.addCategoryObject(b'elementBinding', NeuralOutputs.name().localName(), NeuralOutputs)
Baseline = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Baseline'), CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2174, 4))
Namespace.addCategoryObject(b'elementBinding', Baseline.name().localName(), Baseline)
Alternate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Alternate'), CTD_ANON_60, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2182, 4))
Namespace.addCategoryObject(b'elementBinding', Alternate.name().localName(), Alternate)
VerificationFields = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VerificationFields'), CTD_ANON_61, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2288, 4))
Namespace.addCategoryObject(b'elementBinding', VerificationFields.name().localName(), VerificationFields)
VerificationField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VerificationField'), CTD_ANON_62, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2296, 4))
Namespace.addCategoryObject(b'elementBinding', VerificationField.name().localName(), VerificationField)
LinearKernelType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LinearKernelType'), CTD_ANON_63, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2351, 4))
Namespace.addCategoryObject(b'elementBinding', LinearKernelType.name().localName(), LinearKernelType)
Characteristics = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Characteristics'), CTD_ANON_64, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2513, 4))
Namespace.addCategoryObject(b'elementBinding', Characteristics.name().localName(), Characteristics)
ComplexPartialScore = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ComplexPartialScore'), CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2543, 4))
Namespace.addCategoryObject(b'elementBinding', ComplexPartialScore.name().localName(), ComplexPartialScore)
AntecedentSequence = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AntecedentSequence'), CTD_ANON_66, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2714, 4))
Namespace.addCategoryObject(b'elementBinding', AntecedentSequence.name().localName(), AntecedentSequence)
ConsequentSequence = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ConsequentSequence'), CTD_ANON_67, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2721, 4))
Namespace.addCategoryObject(b'elementBinding', ConsequentSequence.name().localName(), ConsequentSequence)
DataDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DataDictionary'), CTD_ANON_68, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2728, 4))
Namespace.addCategoryObject(b'elementBinding', DataDictionary.name().localName(), DataDictionary)
MiningSchema = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4))
Namespace.addCategoryObject(b'elementBinding', MiningSchema.name().localName(), MiningSchema)
ModelExplanation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4))
Namespace.addCategoryObject(b'elementBinding', ModelExplanation.name().localName(), ModelExplanation)
ModelLiftGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelLiftGraph'), CTD_ANON_71, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3162, 4))
Namespace.addCategoryObject(b'elementBinding', ModelLiftGraph.name().localName(), ModelLiftGraph)
OptimumLiftGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'OptimumLiftGraph'), CTD_ANON_72, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3170, 4))
Namespace.addCategoryObject(b'elementBinding', OptimumLiftGraph.name().localName(), OptimumLiftGraph)
RandomLiftGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RandomLiftGraph'), CTD_ANON_73, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3178, 4))
Namespace.addCategoryObject(b'elementBinding', RandomLiftGraph.name().localName(), RandomLiftGraph)
LiftGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph'), CTD_ANON_74, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3186, 4))
Namespace.addCategoryObject(b'elementBinding', LiftGraph.name().localName(), LiftGraph)
XCoordinates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'XCoordinates'), CTD_ANON_75, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3197, 4))
Namespace.addCategoryObject(b'elementBinding', XCoordinates.name().localName(), XCoordinates)
YCoordinates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'YCoordinates'), CTD_ANON_76, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3205, 4))
Namespace.addCategoryObject(b'elementBinding', YCoordinates.name().localName(), YCoordinates)
BoundaryValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValues'), CTD_ANON_77, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3213, 4))
Namespace.addCategoryObject(b'elementBinding', BoundaryValues.name().localName(), BoundaryValues)
BoundaryValueMeans = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValueMeans'), CTD_ANON_78, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3221, 4))
Namespace.addCategoryObject(b'elementBinding', BoundaryValueMeans.name().localName(), BoundaryValueMeans)
ROC = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ROC'), CTD_ANON_79, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3229, 4))
Namespace.addCategoryObject(b'elementBinding', ROC.name().localName(), ROC)
ROCGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ROCGraph'), CTD_ANON_80, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3241, 4))
Namespace.addCategoryObject(b'elementBinding', ROCGraph.name().localName(), ROCGraph)
ConfusionMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ConfusionMatrix'), CTD_ANON_81, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3251, 4))
Namespace.addCategoryObject(b'elementBinding', ConfusionMatrix.name().localName(), ConfusionMatrix)
ClassLabels = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClassLabels'), CTD_ANON_82, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3260, 4))
Namespace.addCategoryObject(b'elementBinding', ClassLabels.name().localName(), ClassLabels)
Correlations = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Correlations'), CTD_ANON_83, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3268, 4))
Namespace.addCategoryObject(b'elementBinding', Correlations.name().localName(), Correlations)
CorrelationFields = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CorrelationFields'), CTD_ANON_84, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3278, 4))
Namespace.addCategoryObject(b'elementBinding', CorrelationFields.name().localName(), CorrelationFields)
CorrelationValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CorrelationValues'), CTD_ANON_85, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3286, 4))
Namespace.addCategoryObject(b'elementBinding', CorrelationValues.name().localName(), CorrelationValues)
CorrelationMethods = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CorrelationMethods'), CTD_ANON_86, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3294, 4))
Namespace.addCategoryObject(b'elementBinding', CorrelationMethods.name().localName(), CorrelationMethods)
True_ = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'True'), CTD_ANON_87, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4))
Namespace.addCategoryObject(b'elementBinding', True_.name().localName(), True_)
False_ = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'False'), CTD_ANON_88, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4))
Namespace.addCategoryObject(b'elementBinding', False_.name().localName(), False_)
DefineFunction = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DefineFunction'), CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2, 4))
Namespace.addCategoryObject(b'elementBinding', DefineFunction.name().localName(), DefineFunction)
ParameterField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ParameterField'), CTD_ANON_90, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 14, 4))
Namespace.addCategoryObject(b'elementBinding', ParameterField.name().localName(), ParameterField)
Apply = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Apply'), CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4))
Namespace.addCategoryObject(b'elementBinding', Apply.name().localName(), Apply)
MiningModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningModel'), CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 33, 4))
Namespace.addCategoryObject(b'elementBinding', MiningModel.name().localName(), MiningModel)
Segmentation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Segmentation'), CTD_ANON_93, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 57, 4))
Namespace.addCategoryObject(b'elementBinding', Segmentation.name().localName(), Segmentation)
Segment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Segment'), CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 66, 4))
Namespace.addCategoryObject(b'elementBinding', Segment.name().localName(), Segment)
ResultField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ResultField'), CTD_ANON_95, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 100, 4))
Namespace.addCategoryObject(b'elementBinding', ResultField.name().localName(), ResultField)
Regression = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Regression'), CTD_ANON_96, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 113, 4))
Namespace.addCategoryObject(b'elementBinding', Regression.name().localName(), Regression)
DecisionTree = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DecisionTree'), CTD_ANON_97, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 130, 4))
Namespace.addCategoryObject(b'elementBinding', DecisionTree.name().localName(), DecisionTree)
AssociationModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AssociationModel'), CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 157, 4))
Namespace.addCategoryObject(b'elementBinding', AssociationModel.name().localName(), AssociationModel)
Item = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Item'), CTD_ANON_99, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 186, 4))
Namespace.addCategoryObject(b'elementBinding', Item.name().localName(), Item)
Itemset = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Itemset'), CTD_ANON_100, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 197, 4))
Namespace.addCategoryObject(b'elementBinding', Itemset.name().localName(), Itemset)
AssociationRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AssociationRule'), CTD_ANON_101, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 216, 4))
Namespace.addCategoryObject(b'elementBinding', AssociationRule.name().localName(), AssociationRule)
RuleSetModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RuleSetModel'), CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 231, 4))
Namespace.addCategoryObject(b'elementBinding', RuleSetModel.name().localName(), RuleSetModel)
RuleSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RuleSet'), CTD_ANON_103, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 251, 4))
Namespace.addCategoryObject(b'elementBinding', RuleSet.name().localName(), RuleSet)
RuleSelectionMethod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RuleSelectionMethod'), CTD_ANON_104, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 265, 4))
Namespace.addCategoryObject(b'elementBinding', RuleSelectionMethod.name().localName(), RuleSelectionMethod)
SimpleRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleRule'), CTD_ANON_105, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 287, 4))
Namespace.addCategoryObject(b'elementBinding', SimpleRule.name().localName(), SimpleRule)
ClusteringModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModel'), CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 311, 4))
Namespace.addCategoryObject(b'elementBinding', ClusteringModel.name().localName(), ClusteringModel)
ClusteringField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClusteringField'), CTD_ANON_107, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 382, 4))
Namespace.addCategoryObject(b'elementBinding', ClusteringField.name().localName(), ClusteringField)
ComparisonMeasure = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ComparisonMeasure'), CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 419, 4))
Namespace.addCategoryObject(b'elementBinding', ComparisonMeasure.name().localName(), ComparisonMeasure)
minkowski = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'minkowski'), CTD_ANON_109, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 476, 4))
Namespace.addCategoryObject(b'elementBinding', minkowski.name().localName(), minkowski)
binarySimilarity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'binarySimilarity'), CTD_ANON_110, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 505, 4))
Namespace.addCategoryObject(b'elementBinding', binarySimilarity.name().localName(), binarySimilarity)
RegressionModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RegressionModel'), CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 520, 4))
Namespace.addCategoryObject(b'elementBinding', RegressionModel.name().localName(), RegressionModel)
RegressionTable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RegressionTable'), CTD_ANON_112, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 564, 4))
Namespace.addCategoryObject(b'elementBinding', RegressionTable.name().localName(), RegressionTable)
NumericPredictor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NumericPredictor'), CTD_ANON_113, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 576, 4))
Namespace.addCategoryObject(b'elementBinding', NumericPredictor.name().localName(), NumericPredictor)
CategoricalPredictor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CategoricalPredictor'), CTD_ANON_114, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 586, 4))
Namespace.addCategoryObject(b'elementBinding', CategoricalPredictor.name().localName(), CategoricalPredictor)
PredictorTerm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PredictorTerm'), CTD_ANON_115, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 596, 4))
Namespace.addCategoryObject(b'elementBinding', PredictorTerm.name().localName(), PredictorTerm)
TextModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextModel'), CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 606, 4))
Namespace.addCategoryObject(b'elementBinding', TextModel.name().localName(), TextModel)
TextDocument = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextDocument'), CTD_ANON_117, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 649, 4))
Namespace.addCategoryObject(b'elementBinding', TextDocument.name().localName(), TextDocument)
TextModelNormalization = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextModelNormalization'), CTD_ANON_118, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 668, 4))
Namespace.addCategoryObject(b'elementBinding', TextModelNormalization.name().localName(), TextModelNormalization)
TextModelSimiliarity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextModelSimiliarity'), CTD_ANON_119, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 704, 4))
Namespace.addCategoryObject(b'elementBinding', TextModelSimiliarity.name().localName(), TextModelSimiliarity)
NearestNeighborModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NearestNeighborModel'), CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 719, 4))
Namespace.addCategoryObject(b'elementBinding', NearestNeighborModel.name().localName(), NearestNeighborModel)
TrainingInstances = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TrainingInstances'), CTD_ANON_121, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 746, 4))
Namespace.addCategoryObject(b'elementBinding', TrainingInstances.name().localName(), TrainingInstances)
KNNInput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'KNNInput'), CTD_ANON_122, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 786, 4))
Namespace.addCategoryObject(b'elementBinding', KNNInput.name().localName(), KNNInput)
Target = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Target'), CTD_ANON_123, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 817, 4))
Namespace.addCategoryObject(b'elementBinding', Target.name().localName(), Target)
TargetValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValue'), CTD_ANON_124, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 840, 4))
Namespace.addCategoryObject(b'elementBinding', TargetValue.name().localName(), TargetValue)
Array = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4))
Namespace.addCategoryObject(b'elementBinding', Array.name().localName(), Array)
INT_SparseArray = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'INT-SparseArray'), CTD_ANON_125, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 970, 4))
Namespace.addCategoryObject(b'elementBinding', INT_SparseArray.name().localName(), INT_SparseArray)
REAL_SparseArray = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'REAL-SparseArray'), CTD_ANON_126, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 980, 4))
Namespace.addCategoryObject(b'elementBinding', REAL_SparseArray.name().localName(), REAL_SparseArray)
Matrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), CTD_ANON_127, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4))
Namespace.addCategoryObject(b'elementBinding', Matrix.name().localName(), Matrix)
MatCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MatCell'), CTD_ANON_128, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1026, 4))
Namespace.addCategoryObject(b'elementBinding', MatCell.name().localName(), MatCell)
ChildParent = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ChildParent'), CTD_ANON_129, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1080, 4))
Namespace.addCategoryObject(b'elementBinding', ChildParent.name().localName(), ChildParent)
NaiveBayesModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NaiveBayesModel'), CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1129, 4))
Namespace.addCategoryObject(b'elementBinding', NaiveBayesModel.name().localName(), NaiveBayesModel)
TargetValueCount = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCount'), CTD_ANON_131, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1217, 4))
Namespace.addCategoryObject(b'elementBinding', TargetValueCount.name().localName(), TargetValueCount)
OutputField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'OutputField'), CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1234, 4))
Namespace.addCategoryObject(b'elementBinding', OutputField.name().localName(), OutputField)
GeneralRegressionModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'GeneralRegressionModel'), CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1344, 4))
Namespace.addCategoryObject(b'elementBinding', GeneralRegressionModel.name().localName(), GeneralRegressionModel)
Parameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Parameter'), CTD_ANON_134, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1420, 4))
Namespace.addCategoryObject(b'elementBinding', Parameter.name().localName(), Parameter)
Predictor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Predictor'), CTD_ANON_135, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1446, 4))
Namespace.addCategoryObject(b'elementBinding', Predictor.name().localName(), Predictor)
PPCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PPCell'), CTD_ANON_136, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1481, 4))
Namespace.addCategoryObject(b'elementBinding', PPCell.name().localName(), PPCell)
PCovMatrix = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PCovMatrix'), CTD_ANON_137, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1492, 4))
Namespace.addCategoryObject(b'elementBinding', PCovMatrix.name().localName(), PCovMatrix)
PCovCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PCovCell'), CTD_ANON_138, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1508, 4))
Namespace.addCategoryObject(b'elementBinding', PCovCell.name().localName(), PCovCell)
PCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PCell'), CTD_ANON_139, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1529, 4))
Namespace.addCategoryObject(b'elementBinding', PCell.name().localName(), PCell)
BaseCumHazardTables = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaseCumHazardTables'), CTD_ANON_140, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1540, 4))
Namespace.addCategoryObject(b'elementBinding', BaseCumHazardTables.name().localName(), BaseCumHazardTables)
BaselineStratum = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaselineStratum'), CTD_ANON_141, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1552, 4))
Namespace.addCategoryObject(b'elementBinding', BaselineStratum.name().localName(), BaselineStratum)
BaselineCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaselineCell'), CTD_ANON_142, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1563, 4))
Namespace.addCategoryObject(b'elementBinding', BaselineCell.name().localName(), BaselineCell)
UnivariateStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'UnivariateStats'), CTD_ANON_143, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1613, 4))
Namespace.addCategoryObject(b'elementBinding', UnivariateStats.name().localName(), UnivariateStats)
Counts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Counts'), CTD_ANON_144, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1634, 4))
Namespace.addCategoryObject(b'elementBinding', Counts.name().localName(), Counts)
NumericInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NumericInfo'), CTD_ANON_145, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1645, 4))
Namespace.addCategoryObject(b'elementBinding', NumericInfo.name().localName(), NumericInfo)
Quantile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Quantile'), CTD_ANON_146, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1659, 4))
Namespace.addCategoryObject(b'elementBinding', Quantile.name().localName(), Quantile)
ContStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ContStats'), CTD_ANON_147, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1677, 4))
Namespace.addCategoryObject(b'elementBinding', ContStats.name().localName(), ContStats)
MultivariateStat = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MultivariateStat'), CTD_ANON_148, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1702, 4))
Namespace.addCategoryObject(b'elementBinding', MultivariateStat.name().localName(), MultivariateStat)
Anova = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Anova'), CTD_ANON_149, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1725, 4))
Namespace.addCategoryObject(b'elementBinding', Anova.name().localName(), Anova)
AnovaRow = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AnovaRow'), CTD_ANON_150, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1734, 4))
Namespace.addCategoryObject(b'elementBinding', AnovaRow.name().localName(), AnovaRow)
Partition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Partition'), CTD_ANON_151, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1755, 4))
Namespace.addCategoryObject(b'elementBinding', Partition.name().localName(), Partition)
PartitionFieldStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PartitionFieldStats'), CTD_ANON_152, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1765, 4))
Namespace.addCategoryObject(b'elementBinding', PartitionFieldStats.name().localName(), PartitionFieldStats)
DerivedField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4))
Namespace.addCategoryObject(b'elementBinding', DerivedField.name().localName(), DerivedField)
Constant = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constant'), CTD_ANON_154, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4))
Namespace.addCategoryObject(b'elementBinding', Constant.name().localName(), Constant)
FieldRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4))
Namespace.addCategoryObject(b'elementBinding', FieldRef.name().localName(), FieldRef)
NormContinuous = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), CTD_ANON_156, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4))
Namespace.addCategoryObject(b'elementBinding', NormContinuous.name().localName(), NormContinuous)
LinearNorm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LinearNorm'), CTD_ANON_157, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1856, 4))
Namespace.addCategoryObject(b'elementBinding', LinearNorm.name().localName(), LinearNorm)
NormDiscrete = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), CTD_ANON_158, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4))
Namespace.addCategoryObject(b'elementBinding', NormDiscrete.name().localName(), NormDiscrete)
Discretize = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), CTD_ANON_159, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4))
Namespace.addCategoryObject(b'elementBinding', Discretize.name().localName(), Discretize)
MapValues = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), CTD_ANON_160, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4))
Namespace.addCategoryObject(b'elementBinding', MapValues.name().localName(), MapValues)
FieldColumnPair = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldColumnPair'), CTD_ANON_161, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1919, 4))
Namespace.addCategoryObject(b'elementBinding', FieldColumnPair.name().localName(), FieldColumnPair)
TextIndex = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4))
Namespace.addCategoryObject(b'elementBinding', TextIndex.name().localName(), TextIndex)
Aggregate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), CTD_ANON_163, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4))
Namespace.addCategoryObject(b'elementBinding', Aggregate.name().localName(), Aggregate)
NeuralNetwork = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralNetwork'), CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2001, 4))
Namespace.addCategoryObject(b'elementBinding', NeuralNetwork.name().localName(), NeuralNetwork)
NeuralLayer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralLayer'), CTD_ANON_165, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2038, 4))
Namespace.addCategoryObject(b'elementBinding', NeuralLayer.name().localName(), NeuralLayer)
NeuralInput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralInput'), CTD_ANON_166, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2091, 4))
Namespace.addCategoryObject(b'elementBinding', NeuralInput.name().localName(), NeuralInput)
Neuron = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Neuron'), CTD_ANON_167, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2100, 4))
Namespace.addCategoryObject(b'elementBinding', Neuron.name().localName(), Neuron)
Con = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Con'), CTD_ANON_168, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2112, 4))
Namespace.addCategoryObject(b'elementBinding', Con.name().localName(), Con)
NeuralOutput = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralOutput'), CTD_ANON_169, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2121, 4))
Namespace.addCategoryObject(b'elementBinding', NeuralOutput.name().localName(), NeuralOutput)
BaselineModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaselineModel'), CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2130, 4))
Namespace.addCategoryObject(b'elementBinding', BaselineModel.name().localName(), BaselineModel)
TestDistributions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TestDistributions'), CTD_ANON_171, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2150, 4))
Namespace.addCategoryObject(b'elementBinding', TestDistributions.name().localName(), TestDistributions)
AnyDistribution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution'), CTD_ANON_172, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2200, 4))
Namespace.addCategoryObject(b'elementBinding', AnyDistribution.name().localName(), AnyDistribution)
GaussianDistribution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution'), CTD_ANON_173, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2209, 4))
Namespace.addCategoryObject(b'elementBinding', GaussianDistribution.name().localName(), GaussianDistribution)
PoissonDistribution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution'), CTD_ANON_174, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2218, 4))
Namespace.addCategoryObject(b'elementBinding', PoissonDistribution.name().localName(), PoissonDistribution)
UniformDistribution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution'), CTD_ANON_175, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2226, 4))
Namespace.addCategoryObject(b'elementBinding', UniformDistribution.name().localName(), UniformDistribution)
CountTable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CountTable'), COUNT_TABLE_TYPE, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2242, 4))
Namespace.addCategoryObject(b'elementBinding', CountTable.name().localName(), CountTable)
NormalizedCountTable = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormalizedCountTable'), COUNT_TABLE_TYPE, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2243, 4))
Namespace.addCategoryObject(b'elementBinding', NormalizedCountTable.name().localName(), NormalizedCountTable)
FieldValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldValue'), CTD_ANON_176, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2254, 4))
Namespace.addCategoryObject(b'elementBinding', FieldValue.name().localName(), FieldValue)
FieldValueCount = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldValueCount'), CTD_ANON_177, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2267, 4))
Namespace.addCategoryObject(b'elementBinding', FieldValueCount.name().localName(), FieldValueCount)
ModelVerification = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4))
Namespace.addCategoryObject(b'elementBinding', ModelVerification.name().localName(), ModelVerification)
SupportVectorMachineModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachineModel'), CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2307, 4))
Namespace.addCategoryObject(b'elementBinding', SupportVectorMachineModel.name().localName(), SupportVectorMachineModel)
PolynomialKernelType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PolynomialKernelType'), CTD_ANON_180, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2359, 4))
Namespace.addCategoryObject(b'elementBinding', PolynomialKernelType.name().localName(), PolynomialKernelType)
RadialBasisKernelType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RadialBasisKernelType'), CTD_ANON_181, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2370, 4))
Namespace.addCategoryObject(b'elementBinding', RadialBasisKernelType.name().localName(), RadialBasisKernelType)
SigmoidKernelType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SigmoidKernelType'), CTD_ANON_182, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2379, 4))
Namespace.addCategoryObject(b'elementBinding', SigmoidKernelType.name().localName(), SigmoidKernelType)
VectorDictionary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VectorDictionary'), CTD_ANON_183, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2392, 4))
Namespace.addCategoryObject(b'elementBinding', VectorDictionary.name().localName(), VectorDictionary)
VectorFields = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VectorFields'), CTD_ANON_184, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2402, 4))
Namespace.addCategoryObject(b'elementBinding', VectorFields.name().localName(), VectorFields)
VectorInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VectorInstance'), CTD_ANON_185, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2411, 4))
Namespace.addCategoryObject(b'elementBinding', VectorInstance.name().localName(), VectorInstance)
SupportVectorMachine = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachine'), CTD_ANON_186, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2423, 4))
Namespace.addCategoryObject(b'elementBinding', SupportVectorMachine.name().localName(), SupportVectorMachine)
SupportVectors = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVectors'), CTD_ANON_187, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2435, 4))
Namespace.addCategoryObject(b'elementBinding', SupportVectors.name().localName(), SupportVectors)
SupportVector = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVector'), CTD_ANON_188, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2445, 4))
Namespace.addCategoryObject(b'elementBinding', SupportVector.name().localName(), SupportVector)
Coefficients = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Coefficients'), CTD_ANON_189, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2453, 4))
Namespace.addCategoryObject(b'elementBinding', Coefficients.name().localName(), Coefficients)
Coefficient = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Coefficient'), CTD_ANON_190, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2463, 4))
Namespace.addCategoryObject(b'elementBinding', Coefficient.name().localName(), Coefficient)
Scorecard = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Scorecard'), CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2471, 4))
Namespace.addCategoryObject(b'elementBinding', Scorecard.name().localName(), Scorecard)
Characteristic = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Characteristic'), CTD_ANON_192, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2521, 4))
Namespace.addCategoryObject(b'elementBinding', Characteristic.name().localName(), Characteristic)
Attribute = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Attribute'), CTD_ANON_193, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2532, 4))
Namespace.addCategoryObject(b'elementBinding', Attribute.name().localName(), Attribute)
SequenceModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SequenceModel'), CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2551, 4))
Namespace.addCategoryObject(b'elementBinding', SequenceModel.name().localName(), SequenceModel)
Constraints = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constraints'), CTD_ANON_195, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2578, 4))
Namespace.addCategoryObject(b'elementBinding', Constraints.name().localName(), Constraints)
SetPredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SetPredicate'), CTD_ANON_196, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2603, 4))
Namespace.addCategoryObject(b'elementBinding', SetPredicate.name().localName(), SetPredicate)
Delimiter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Delimiter'), CTD_ANON_197, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2627, 4))
Namespace.addCategoryObject(b'elementBinding', Delimiter.name().localName(), Delimiter)
Time = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Time'), CTD_ANON_198, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4))
Namespace.addCategoryObject(b'elementBinding', Time.name().localName(), Time)
Sequence = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Sequence'), CTD_ANON_199, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2655, 4))
Namespace.addCategoryObject(b'elementBinding', Sequence.name().localName(), Sequence)
SetReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SetReference'), CTD_ANON_200, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2671, 4))
Namespace.addCategoryObject(b'elementBinding', SetReference.name().localName(), SetReference)
SequenceRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SequenceRule'), CTD_ANON_201, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2679, 4))
Namespace.addCategoryObject(b'elementBinding', SequenceRule.name().localName(), SequenceRule)
SequenceReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SequenceReference'), CTD_ANON_202, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2706, 4))
Namespace.addCategoryObject(b'elementBinding', SequenceReference.name().localName(), SequenceReference)
DataField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DataField'), CTD_ANON_203, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2738, 4))
Namespace.addCategoryObject(b'elementBinding', DataField.name().localName(), DataField)
Value = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Value'), CTD_ANON_204, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2790, 4))
Namespace.addCategoryObject(b'elementBinding', Value.name().localName(), Value)
Interval = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Interval'), CTD_ANON_205, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4))
Namespace.addCategoryObject(b'elementBinding', Interval.name().localName(), Interval)
TimeSeriesModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeSeriesModel'), CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2827, 4))
Namespace.addCategoryObject(b'elementBinding', TimeSeriesModel.name().localName(), TimeSeriesModel)
TimeSeries = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeSeries'), CTD_ANON_207, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2859, 4))
Namespace.addCategoryObject(b'elementBinding', TimeSeries.name().localName(), TimeSeries)
TimeValue = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeValue'), CTD_ANON_208, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2878, 4))
Namespace.addCategoryObject(b'elementBinding', TimeValue.name().localName(), TimeValue)
TimeAnchor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeAnchor'), CTD_ANON_209, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2889, 4))
Namespace.addCategoryObject(b'elementBinding', TimeAnchor.name().localName(), TimeAnchor)
TimeCycle = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeCycle'), CTD_ANON_210, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2901, 4))
Namespace.addCategoryObject(b'elementBinding', TimeCycle.name().localName(), TimeCycle)
TimeException = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeException'), CTD_ANON_211, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2941, 4))
Namespace.addCategoryObject(b'elementBinding', TimeException.name().localName(), TimeException)
ExponentialSmoothing = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ExponentialSmoothing'), CTD_ANON_212, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2964, 4))
Namespace.addCategoryObject(b'elementBinding', ExponentialSmoothing.name().localName(), ExponentialSmoothing)
Level = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Level'), CTD_ANON_213, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2984, 4))
Namespace.addCategoryObject(b'elementBinding', Level.name().localName(), Level)
Trend_ExpoSmooth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Trend_ExpoSmooth'), CTD_ANON_214, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2990, 4))
Namespace.addCategoryObject(b'elementBinding', Trend_ExpoSmooth.name().localName(), Trend_ExpoSmooth)
Seasonality_ExpoSmooth = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Seasonality_ExpoSmooth'), CTD_ANON_215, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3011, 4))
Namespace.addCategoryObject(b'elementBinding', Seasonality_ExpoSmooth.name().localName(), Seasonality_ExpoSmooth)
MiningField = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningField'), CTD_ANON_216, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3041, 4))
Namespace.addCategoryObject(b'elementBinding', MiningField.name().localName(), MiningField)
PredictiveModelQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PredictiveModelQuality'), CTD_ANON_217, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3105, 4))
Namespace.addCategoryObject(b'elementBinding', PredictiveModelQuality.name().localName(), PredictiveModelQuality)
ClusteringModelQuality = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModelQuality'), CTD_ANON_218, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3142, 4))
Namespace.addCategoryObject(b'elementBinding', ClusteringModelQuality.name().localName(), ClusteringModelQuality)
LiftData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LiftData'), CTD_ANON_219, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3149, 4))
Namespace.addCategoryObject(b'elementBinding', LiftData.name().localName(), LiftData)
TreeModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TreeModel'), CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3302, 4))
Namespace.addCategoryObject(b'elementBinding', TreeModel.name().localName(), TreeModel)
Node = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Node'), CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3333, 4))
Namespace.addCategoryObject(b'elementBinding', Node.name().localName(), Node)
SimplePredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), CTD_ANON_222, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4))
Namespace.addCategoryObject(b'elementBinding', SimplePredicate.name().localName(), SimplePredicate)
CompoundPredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), CTD_ANON_223, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4))
Namespace.addCategoryObject(b'elementBinding', CompoundPredicate.name().localName(), CompoundPredicate)
SimpleSetPredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), CTD_ANON_224, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4))
Namespace.addCategoryObject(b'elementBinding', SimpleSetPredicate.name().localName(), SimpleSetPredicate)
ScoreDistribution = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution'), CTD_ANON_225, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3436, 4))
Namespace.addCategoryObject(b'elementBinding', ScoreDistribution.name().localName(), ScoreDistribution)
CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton():
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 211, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 211, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON._Automaton = _BuildAutomaton()
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleRule'), CTD_ANON_105, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 287, 4)))
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundRule'), CTD_ANON_, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 302, 4)))
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), CTD_ANON_222, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4)))
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), CTD_ANON_223, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4)))
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), CTD_ANON_224, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4)))
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'True'), CTD_ANON_87, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4)))
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'False'), CTD_ANON_88, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4)))

def _BuildAutomaton_():
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 305, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 305, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3355, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3356, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3357, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'True')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3358, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'False')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3359, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimpleRule')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 283, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CompoundRule')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 284, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_._Automaton = _BuildAutomaton_()
CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_2():
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 345, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 345, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_2._Automaton = _BuildAutomaton_2()
CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'KohonenMap'), CTD_ANON_4, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 364, 4)))
CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Covariances'), CTD_ANON_5, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 374, 4)))
CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))
CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Partition'), CTD_ANON_151, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1755, 4)))

def _BuildAutomaton_3():
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 353, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 354, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 355, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 356, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 357, 16))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 353, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'KohonenMap')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 354, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Partition')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 356, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Covariances')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 357, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_3._Automaton = _BuildAutomaton_3()
CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_4():
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 367, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 367, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_4._Automaton = _BuildAutomaton_4()
CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), CTD_ANON_127, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4)))

def _BuildAutomaton_5():
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 377, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 377, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Matrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 378, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_5._Automaton = _BuildAutomaton_5()
CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), CTD_ANON_127, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4)))

def _BuildAutomaton_6():
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 405, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 405, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Matrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 406, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_6._Automaton = _BuildAutomaton_6()
CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_7():
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 451, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 451, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_7._Automaton = _BuildAutomaton_7()
CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_8():
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 458, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 458, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_8._Automaton = _BuildAutomaton_8()
CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_9():
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 465, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 465, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_9._Automaton = _BuildAutomaton_9()
CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_10():
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 472, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 472, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_10._Automaton = _BuildAutomaton_10()
CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_11():
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 487, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 487, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_11._Automaton = _BuildAutomaton_11()
CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_12():
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 494, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 494, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_12._Automaton = _BuildAutomaton_12()
CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_13():
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 501, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 501, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_13._Automaton = _BuildAutomaton_13()
CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))
CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Taxonomy'), CTD_ANON_28, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1071, 4)))

def _BuildAutomaton_14():
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 635, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 636, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 635, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Taxonomy')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 636, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 967, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_14._Automaton = _BuildAutomaton_14()
CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextDocument'), CTD_ANON_117, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 649, 4)))
CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_15():
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 644, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 645, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 644, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextDocument')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 645, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_15._Automaton = _BuildAutomaton_15()
CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), CTD_ANON_127, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4)))

def _BuildAutomaton_16():
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 663, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 663, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Matrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 664, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_16._Automaton = _BuildAutomaton_16()
CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InstanceField'), CTD_ANON_18, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 769, 4)))
CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_17():
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 764, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 764, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'InstanceField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 765, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_17._Automaton = _BuildAutomaton_17()
CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_18():
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 772, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 772, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_18._Automaton = _BuildAutomaton_18()
CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'KNNInput'), CTD_ANON_122, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 786, 4)))
CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_19():
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 781, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 781, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'KNNInput')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 782, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_19._Automaton = _BuildAutomaton_19()
CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Target'), CTD_ANON_123, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 817, 4)))
CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_20():
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 812, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 812, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Target')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 813, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_20._Automaton = _BuildAutomaton_20()
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningModel'), CTD_ANON_92, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 33, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AssociationModel'), CTD_ANON_98, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 157, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RuleSetModel'), CTD_ANON_102, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 231, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModel'), CTD_ANON_106, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 311, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RegressionModel'), CTD_ANON_111, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 520, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextModel'), CTD_ANON_116, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 606, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NearestNeighborModel'), CTD_ANON_120, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 719, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningBuildTask'), CTD_ANON_22, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 887, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Header'), CTD_ANON_24, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1036, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NaiveBayesModel'), CTD_ANON_130, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1129, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'GeneralRegressionModel'), CTD_ANON_133, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1344, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TransformationDictionary'), CTD_ANON_53, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1797, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralNetwork'), CTD_ANON_164, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2001, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaselineModel'), CTD_ANON_170, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2130, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachineModel'), CTD_ANON_179, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2307, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Scorecard'), CTD_ANON_191, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2471, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SequenceModel'), CTD_ANON_194, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2551, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DataDictionary'), CTD_ANON_68, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2728, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeSeriesModel'), CTD_ANON_206, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2827, 4)))
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TreeModel'), CTD_ANON_220, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3302, 4)))

def _BuildAutomaton_21():
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 856, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 858, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 859, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 862, 16))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Header')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 855, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningBuildTask')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 856, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DataDictionary')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 857, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TransformationDictionary')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 858, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'AssociationModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 869, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BaselineModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 870, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 871, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'GeneralRegressionModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 872, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 873, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NaiveBayesModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 874, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NearestNeighborModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 875, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NeuralNetwork')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 876, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RegressionModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 877, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RuleSetModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 878, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SequenceModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 879, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Scorecard')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 880, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachineModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 881, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 882, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TimeSeriesModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 883, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TreeModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 884, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 862, 16))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    transitions.append(fac.Transition(st_17, []))
    transitions.append(fac.Transition(st_18, []))
    transitions.append(fac.Transition(st_19, []))
    transitions.append(fac.Transition(st_20, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, True)]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_21._Automaton = _BuildAutomaton_21()
CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_22():
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 890, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 890, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_22._Automaton = _BuildAutomaton_22()

def _BuildAutomaton_23():
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 910, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 910, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_23._Automaton = _BuildAutomaton_23()
CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_24, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Application'), CTD_ANON_25, scope=CTD_ANON_24, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1048, 4)))
CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Annotation'), CTD_ANON_26, scope=CTD_ANON_24, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1057, 4)))
CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Timestamp'), CTD_ANON_27, scope=CTD_ANON_24, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1064, 4)))

def _BuildAutomaton_24():
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1039, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1040, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1041, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1042, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1039, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Application')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1040, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Annotation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1041, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Timestamp')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1042, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_24._Automaton = _BuildAutomaton_24()
CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_25, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_25():
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1051, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1051, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_25._Automaton = _BuildAutomaton_25()
CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_26, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_26():
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1060, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1060, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_26._Automaton = _BuildAutomaton_26()
CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_27, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_27():
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1067, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1067, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_27._Automaton = _BuildAutomaton_27()
CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ChildParent'), CTD_ANON_129, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1080, 4)))

def _BuildAutomaton_28():
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1074, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1074, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ChildParent')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1075, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_28._Automaton = _BuildAutomaton_28()
CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_29, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_29():
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1106, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1106, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_29._Automaton = _BuildAutomaton_29()
CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'row'), CTD_ANON_31, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1118, 4)))

def _BuildAutomaton_30():
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1113, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1114, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1113, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'row')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1114, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_30._Automaton = _BuildAutomaton_30()

def _BuildAutomaton_31():
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=2, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1123, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1123, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_31._Automaton = _BuildAutomaton_31()
CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BayesInput'), CTD_ANON_33, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1159, 4)))

def _BuildAutomaton_32():
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1154, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1154, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BayesInput')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1155, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_32._Automaton = _BuildAutomaton_32()
CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueStats'), CTD_ANON_35, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1183, 4)))
CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PairCounts'), CTD_ANON_37, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1200, 4)))
CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), CTD_ANON_153, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4)))

def _BuildAutomaton_33():
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1162, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1166, 24))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1162, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TargetValueStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1164, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DerivedField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1166, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PairCounts')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1167, 24))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_33._Automaton = _BuildAutomaton_33()
CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCounts'), CTD_ANON_38, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1209, 4)))

def _BuildAutomaton_34():
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1177, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1177, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCounts')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1178, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_34._Automaton = _BuildAutomaton_34()
CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueStat'), CTD_ANON_36, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1191, 4)))

def _BuildAutomaton_35():
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1186, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1186, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TargetValueStat')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1187, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_35._Automaton = _BuildAutomaton_35()
CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution'), CTD_ANON_172, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2200, 4)))
CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution'), CTD_ANON_173, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2209, 4)))
CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution'), CTD_ANON_174, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2218, 4)))
CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution'), CTD_ANON_175, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2226, 4)))

def _BuildAutomaton_36():
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1194, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2197, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1194, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2192, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2193, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2194, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2195, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2197, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, []))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_36._Automaton = _BuildAutomaton_36()
CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCounts'), CTD_ANON_38, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1209, 4)))

def _BuildAutomaton_37():
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1203, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1203, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCounts')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1204, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_37._Automaton = _BuildAutomaton_37()
CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCount'), CTD_ANON_131, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1217, 4)))

def _BuildAutomaton_38():
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1212, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1212, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TargetValueCount')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1213, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_38._Automaton = _BuildAutomaton_38()
CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'OutputField'), CTD_ANON_132, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1234, 4)))

def _BuildAutomaton_39():
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1229, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1229, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'OutputField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1230, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_39._Automaton = _BuildAutomaton_39()
CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Decision'), CTD_ANON_41, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1321, 4)))

def _BuildAutomaton_40():
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1314, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1314, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Decision')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1315, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_40._Automaton = _BuildAutomaton_40()
CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_41():
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1324, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1324, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_41._Automaton = _BuildAutomaton_41()
CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Parameter'), CTD_ANON_134, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1420, 4)))

def _BuildAutomaton_42():
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1415, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1416, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1415, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Parameter')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1416, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_42._Automaton = _BuildAutomaton_42()
CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Predictor'), CTD_ANON_135, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1446, 4)))

def _BuildAutomaton_43():
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1433, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1434, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1433, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Predictor')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1434, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_43._Automaton = _BuildAutomaton_43()
CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Predictor'), CTD_ANON_135, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1446, 4)))

def _BuildAutomaton_44():
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1441, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1442, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1441, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Predictor')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1442, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_44._Automaton = _BuildAutomaton_44()
CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Category'), CTD_ANON_46, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1465, 4)))

def _BuildAutomaton_45():
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1460, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1460, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Category')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1461, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_45._Automaton = _BuildAutomaton_45()
CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_46():
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1468, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1468, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_46._Automaton = _BuildAutomaton_46()
CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PPCell'), CTD_ANON_136, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1481, 4)))

def _BuildAutomaton_47():
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1476, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1477, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1476, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PPCell')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1477, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_47._Automaton = _BuildAutomaton_47()
CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_48, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PCell'), CTD_ANON_139, scope=CTD_ANON_48, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1529, 4)))

def _BuildAutomaton_48():
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1524, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1525, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1524, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PCell')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1525, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_48._Automaton = _BuildAutomaton_48()
CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Value'), CTD_ANON_204, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2790, 4)))
CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Interval'), CTD_ANON_205, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4)))

def _BuildAutomaton_49():
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1575, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1576, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1577, 16))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1575, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Value')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1576, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Interval')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1577, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_49._Automaton = _BuildAutomaton_49()
CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'UnivariateStats'), CTD_ANON_143, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1613, 4)))
CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MultivariateStats'), CTD_ANON_52, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1693, 4)))

def _BuildAutomaton_50():
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1607, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1608, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1609, 16))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1607, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'UnivariateStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1608, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MultivariateStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1609, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_50._Automaton = _BuildAutomaton_50()
CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_51():
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1671, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=2, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1672, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1671, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1672, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_51._Automaton = _BuildAutomaton_51()
CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_52, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MultivariateStat'), CTD_ANON_148, scope=CTD_ANON_52, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1702, 4)))

def _BuildAutomaton_52():
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1696, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1696, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MultivariateStat')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1697, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_52._Automaton = _BuildAutomaton_52()
CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DefineFunction'), CTD_ANON_89, scope=CTD_ANON_53, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2, 4)))
CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_53, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), CTD_ANON_153, scope=CTD_ANON_53, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4)))

def _BuildAutomaton_53():
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1800, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1801, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1802, 16))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1800, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DefineFunction')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1801, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DerivedField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1802, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_53._Automaton = _BuildAutomaton_53()
CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_54, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), CTD_ANON_153, scope=CTD_ANON_54, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4)))

def _BuildAutomaton_54():
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1809, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1810, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1809, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DerivedField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1810, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_54._Automaton = _BuildAutomaton_54()
CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_55, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Interval'), CTD_ANON_205, scope=CTD_ANON_55, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4)))

def _BuildAutomaton_55():
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1897, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1897, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Interval')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1898, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_55._Automaton = _BuildAutomaton_55()
CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_56, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), CTD_ANON_29, scope=CTD_ANON_56, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4)))
CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), CTD_ANON_30, scope=CTD_ANON_56, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4)))

def _BuildAutomaton_56():
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1963, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1964, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1963, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TableLocator')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1965, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'InlineTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1966, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_56._Automaton = _BuildAutomaton_56()
CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_57, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralInput'), CTD_ANON_166, scope=CTD_ANON_57, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2091, 4)))

def _BuildAutomaton_57():
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2032, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2032, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NeuralInput')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2033, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_57._Automaton = _BuildAutomaton_57()
CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_58, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralOutput'), CTD_ANON_169, scope=CTD_ANON_58, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2121, 4)))

def _BuildAutomaton_58():
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2055, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2055, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NeuralOutput')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2056, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_58._Automaton = _BuildAutomaton_58()
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution'), CTD_ANON_172, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2200, 4)))
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution'), CTD_ANON_173, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2209, 4)))
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution'), CTD_ANON_174, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2218, 4)))
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution'), CTD_ANON_175, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2226, 4)))
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CountTable'), COUNT_TABLE_TYPE, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2242, 4)))
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormalizedCountTable'), COUNT_TABLE_TYPE, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2243, 4)))

def _BuildAutomaton_59():
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2197, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=2, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2239, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2192, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2193, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2194, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2195, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2197, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CountTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2237, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormalizedCountTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2238, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2239, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, True)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_59._Automaton = _BuildAutomaton_59()
CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution'), CTD_ANON_172, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2200, 4)))
CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution'), CTD_ANON_173, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2209, 4)))
CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution'), CTD_ANON_174, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2218, 4)))
CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution'), CTD_ANON_175, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2226, 4)))

def _BuildAutomaton_60():
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2197, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'AnyDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2192, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'GaussianDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2193, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PoissonDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2194, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'UniformDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2195, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2197, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_60._Automaton = _BuildAutomaton_60()
CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VerificationField'), CTD_ANON_62, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2296, 4)))

def _BuildAutomaton_61():
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2291, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2291, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'VerificationField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2292, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_61._Automaton = _BuildAutomaton_61()
CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_62():
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2299, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2299, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_62._Automaton = _BuildAutomaton_62()
CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_63():
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2354, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2354, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_63._Automaton = _BuildAutomaton_63()
CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Characteristic'), CTD_ANON_192, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2521, 4)))

def _BuildAutomaton_64():
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2516, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2516, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Characteristic')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2517, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_64._Automaton = _BuildAutomaton_64()
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Apply'), CTD_ANON_91, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constant'), CTD_ANON_154, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), CTD_ANON_156, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), CTD_ANON_158, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), CTD_ANON_159, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), CTD_ANON_160, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), CTD_ANON_162, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4)))
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), CTD_ANON_163, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4)))

def _BuildAutomaton_65():
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2546, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2546, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Constant')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1786, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1787, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1788, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1789, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Discretize')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1790, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MapValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1791, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextIndex')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1792, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Apply')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1793, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Aggregate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1794, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_65._Automaton = _BuildAutomaton_65()
CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Time'), CTD_ANON_198, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4)))
CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SequenceReference'), CTD_ANON_202, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2706, 4)))

def _BuildAutomaton_66():
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2700, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2703, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2700, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SequenceReference')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2702, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Time')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2703, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_66._Automaton = _BuildAutomaton_66()
CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Time'), CTD_ANON_198, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4)))
CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SequenceReference'), CTD_ANON_202, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2706, 4)))

def _BuildAutomaton_67():
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2700, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2703, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2700, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SequenceReference')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2702, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Time')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2703, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_67._Automaton = _BuildAutomaton_67()
CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Taxonomy'), CTD_ANON_28, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1071, 4)))
CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DataField'), CTD_ANON_203, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2738, 4)))

def _BuildAutomaton_68():
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2731, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2733, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2731, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DataField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2732, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Taxonomy')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2733, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_68._Automaton = _BuildAutomaton_68()
CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_69, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningField'), CTD_ANON_216, scope=CTD_ANON_69, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3041, 4)))

def _BuildAutomaton_69():
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3036, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3036, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3037, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_69._Automaton = _BuildAutomaton_69()
CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_70, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PredictiveModelQuality'), CTD_ANON_217, scope=CTD_ANON_70, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3105, 4)))
CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModelQuality'), CTD_ANON_218, scope=CTD_ANON_70, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3142, 4)))
CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Correlations'), CTD_ANON_83, scope=CTD_ANON_70, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3268, 4)))

def _BuildAutomaton_70():
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3096, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3098, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3099, 20))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3101, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3096, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PredictiveModelQuality')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3098, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModelQuality')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3099, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Correlations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3101, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_70._Automaton = _BuildAutomaton_70()
CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_71, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph'), CTD_ANON_74, scope=CTD_ANON_71, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3186, 4)))

def _BuildAutomaton_71():
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3165, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3165, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3166, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_71._Automaton = _BuildAutomaton_71()
CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_72, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph'), CTD_ANON_74, scope=CTD_ANON_72, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3186, 4)))

def _BuildAutomaton_72():
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3173, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3173, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3174, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_72._Automaton = _BuildAutomaton_72()
CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_73, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph'), CTD_ANON_74, scope=CTD_ANON_73, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3186, 4)))

def _BuildAutomaton_73():
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3181, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3181, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LiftGraph')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3182, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_73._Automaton = _BuildAutomaton_73()
CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'XCoordinates'), CTD_ANON_75, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3197, 4)))
CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'YCoordinates'), CTD_ANON_76, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3205, 4)))
CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValues'), CTD_ANON_77, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3213, 4)))
CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValueMeans'), CTD_ANON_78, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3221, 4)))

def _BuildAutomaton_74():
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3189, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3192, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3193, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3189, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'XCoordinates')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3190, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'YCoordinates')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3191, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3192, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValueMeans')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3193, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_74._Automaton = _BuildAutomaton_74()
CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_75():
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3200, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3200, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_75._Automaton = _BuildAutomaton_75()
CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_76():
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3208, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3208, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_76._Automaton = _BuildAutomaton_76()
CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_77():
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3216, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3216, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_77._Automaton = _BuildAutomaton_77()
CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_78():
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3224, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3224, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_78._Automaton = _BuildAutomaton_78()
CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ROCGraph'), CTD_ANON_80, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3241, 4)))

def _BuildAutomaton_79():
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3232, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3232, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ROCGraph')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3233, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_79._Automaton = _BuildAutomaton_79()
CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'XCoordinates'), CTD_ANON_75, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3197, 4)))
CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'YCoordinates'), CTD_ANON_76, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3205, 4)))
CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValues'), CTD_ANON_77, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3213, 4)))

def _BuildAutomaton_80():
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3244, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3247, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3244, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'XCoordinates')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3245, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'YCoordinates')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3246, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BoundaryValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3247, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_80._Automaton = _BuildAutomaton_80()
CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), CTD_ANON_127, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4)))
CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClassLabels'), CTD_ANON_82, scope=CTD_ANON_81, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3260, 4)))

def _BuildAutomaton_81():
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3254, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3254, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ClassLabels')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3255, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Matrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3256, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_81._Automaton = _BuildAutomaton_81()
CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_82, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_82():
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3263, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3263, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 967, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_82._Automaton = _BuildAutomaton_82()
CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CorrelationFields'), CTD_ANON_84, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3278, 4)))
CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CorrelationValues'), CTD_ANON_85, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3286, 4)))
CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CorrelationMethods'), CTD_ANON_86, scope=CTD_ANON_83, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3294, 4)))

def _BuildAutomaton_83():
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3271, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3274, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3271, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CorrelationFields')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3272, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CorrelationValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3273, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CorrelationMethods')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3274, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_83._Automaton = _BuildAutomaton_83()
CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_84, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_84():
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3281, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3281, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 967, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_84._Automaton = _BuildAutomaton_84()
CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), CTD_ANON_127, scope=CTD_ANON_85, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4)))

def _BuildAutomaton_85():
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3289, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3289, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Matrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3290, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_85._Automaton = _BuildAutomaton_85()
CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), CTD_ANON_127, scope=CTD_ANON_86, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4)))

def _BuildAutomaton_86():
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3297, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3297, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Matrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3298, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_86._Automaton = _BuildAutomaton_86()
CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_87, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_87():
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3425, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3425, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_87._Automaton = _BuildAutomaton_87()
CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_88, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_88():
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3432, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3432, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_88._Automaton = _BuildAutomaton_88()
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ParameterField'), CTD_ANON_90, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 14, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Apply'), CTD_ANON_91, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constant'), CTD_ANON_154, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), CTD_ANON_156, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), CTD_ANON_158, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), CTD_ANON_159, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), CTD_ANON_160, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), CTD_ANON_162, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4)))
CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), CTD_ANON_163, scope=CTD_ANON_89, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4)))

def _BuildAutomaton_89():
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 5, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 5, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ParameterField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 6, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Constant')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1786, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1787, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1788, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1789, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Discretize')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1790, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MapValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1791, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextIndex')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1792, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Apply')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1793, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Aggregate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1794, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_89._Automaton = _BuildAutomaton_89()
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Apply'), CTD_ANON_91, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constant'), CTD_ANON_154, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), CTD_ANON_156, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), CTD_ANON_158, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), CTD_ANON_159, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), CTD_ANON_160, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), CTD_ANON_162, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4)))
CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), CTD_ANON_163, scope=CTD_ANON_91, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4)))

def _BuildAutomaton_90():
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 24, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 25, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 24, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Constant')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1786, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1787, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1788, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1789, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Discretize')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1790, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MapValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1791, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextIndex')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1792, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Apply')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1793, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Aggregate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1794, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_91._Automaton = _BuildAutomaton_90()
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Segmentation'), CTD_ANON_93, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 57, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Regression'), CTD_ANON_96, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 113, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DecisionTree'), CTD_ANON_97, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 130, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_92, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_91():
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 36, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 38, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 39, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 40, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 41, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 42, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 43, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 47, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 48, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 49, 16))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 36, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 37, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 38, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 39, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 40, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 41, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 42, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Regression')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 44, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DecisionTree')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 45, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Segmentation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 47, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 48, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 49, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, True)]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_92._Automaton = _BuildAutomaton_91()
CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Segment'), CTD_ANON_94, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 66, 4)))
CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_93, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_92():
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 60, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 60, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Segment')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 61, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_93._Automaton = _BuildAutomaton_92()
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningModel'), CTD_ANON_92, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 33, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AssociationModel'), CTD_ANON_98, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 157, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RuleSetModel'), CTD_ANON_102, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 231, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModel'), CTD_ANON_106, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 311, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RegressionModel'), CTD_ANON_111, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 520, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextModel'), CTD_ANON_116, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 606, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NearestNeighborModel'), CTD_ANON_120, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 719, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NaiveBayesModel'), CTD_ANON_130, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1129, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'GeneralRegressionModel'), CTD_ANON_133, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1344, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralNetwork'), CTD_ANON_164, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2001, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaselineModel'), CTD_ANON_170, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2130, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachineModel'), CTD_ANON_179, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2307, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Scorecard'), CTD_ANON_191, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2471, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SequenceModel'), CTD_ANON_194, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2551, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeSeriesModel'), CTD_ANON_206, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2827, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TreeModel'), CTD_ANON_220, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3302, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), CTD_ANON_222, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), CTD_ANON_223, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), CTD_ANON_224, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'True'), CTD_ANON_87, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4)))
CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'False'), CTD_ANON_88, scope=CTD_ANON_94, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4)))

def _BuildAutomaton_93():
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 69, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 69, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3355, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3356, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3357, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'True')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3358, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'False')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3359, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'AssociationModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 869, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BaselineModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 870, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ClusteringModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 871, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'GeneralRegressionModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 872, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 873, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NaiveBayesModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 874, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NearestNeighborModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 875, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NeuralNetwork')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 876, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RegressionModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 877, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RuleSetModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 878, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SequenceModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 879, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Scorecard')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 880, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachineModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 881, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 882, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TimeSeriesModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 883, 12))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TreeModel')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 884, 12))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    transitions.append(fac.Transition(st_17, []))
    transitions.append(fac.Transition(st_18, []))
    transitions.append(fac.Transition(st_19, []))
    transitions.append(fac.Transition(st_20, []))
    transitions.append(fac.Transition(st_21, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    transitions.append(fac.Transition(st_17, []))
    transitions.append(fac.Transition(st_18, []))
    transitions.append(fac.Transition(st_19, []))
    transitions.append(fac.Transition(st_20, []))
    transitions.append(fac.Transition(st_21, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    transitions.append(fac.Transition(st_17, []))
    transitions.append(fac.Transition(st_18, []))
    transitions.append(fac.Transition(st_19, []))
    transitions.append(fac.Transition(st_20, []))
    transitions.append(fac.Transition(st_21, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    transitions.append(fac.Transition(st_17, []))
    transitions.append(fac.Transition(st_18, []))
    transitions.append(fac.Transition(st_19, []))
    transitions.append(fac.Transition(st_20, []))
    transitions.append(fac.Transition(st_21, []))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    transitions.append(fac.Transition(st_17, []))
    transitions.append(fac.Transition(st_18, []))
    transitions.append(fac.Transition(st_19, []))
    transitions.append(fac.Transition(st_20, []))
    transitions.append(fac.Transition(st_21, []))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_94._Automaton = _BuildAutomaton_93()
CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_95, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_94():
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 103, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 103, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_95._Automaton = _BuildAutomaton_94()
CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ResultField'), CTD_ANON_95, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 100, 4)))
CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RegressionTable'), CTD_ANON_112, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 564, 4)))
CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_96, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))

def _BuildAutomaton_95():
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 116, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 117, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 118, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 119, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 120, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 121, 16))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 116, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 117, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 118, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 119, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 120, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ResultField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 121, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RegressionTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 122, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_96._Automaton = _BuildAutomaton_95()
CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ResultField'), CTD_ANON_95, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 100, 4)))
CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Node'), CTD_ANON_221, scope=CTD_ANON_97, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3333, 4)))

def _BuildAutomaton_96():
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 133, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 134, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 135, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 136, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 137, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 138, 16))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 133, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 134, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 135, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 136, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 137, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ResultField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 138, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Node')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 139, 16))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_97._Automaton = _BuildAutomaton_96()
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Item'), CTD_ANON_99, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 186, 4)))
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Itemset'), CTD_ANON_100, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 197, 4)))
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AssociationRule'), CTD_ANON_101, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 216, 4)))
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_98, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))

def _BuildAutomaton_97():
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 160, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 162, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 163, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 164, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 165, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 166, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 167, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 168, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 169, 16))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 160, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 161, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 162, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 163, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 164, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Item')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 165, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Itemset')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 166, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'AssociationRule')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 167, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 168, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 169, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_98._Automaton = _BuildAutomaton_97()
CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_99, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_98():
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 189, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 189, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_99._Automaton = _BuildAutomaton_98()
CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ItemRef'), CTD_ANON, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 208, 4)))
CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_100, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_99():
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 200, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 201, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 200, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ItemRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 201, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_100._Automaton = _BuildAutomaton_99()
CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_101, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_100():
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 219, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 219, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_101._Automaton = _BuildAutomaton_100()
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RuleSet'), CTD_ANON_103, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 251, 4)))
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_102, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_101():
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 234, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 236, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 237, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 238, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 239, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 240, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 242, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 243, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 234, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 235, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 236, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 237, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 238, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 239, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 240, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RuleSet')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 241, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 242, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 243, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_102._Automaton = _BuildAutomaton_101()
CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RuleSelectionMethod'), CTD_ANON_104, scope=CTD_ANON_103, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 265, 4)))
CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleRule'), CTD_ANON_105, scope=CTD_ANON_103, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 287, 4)))
CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundRule'), CTD_ANON_, scope=CTD_ANON_103, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 302, 4)))
CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_103, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution'), CTD_ANON_225, scope=CTD_ANON_103, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3436, 4)))

def _BuildAutomaton_102():
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 254, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 256, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 257, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 254, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RuleSelectionMethod')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 255, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 256, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimpleRule')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 283, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CompoundRule')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 284, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_103._Automaton = _BuildAutomaton_102()
CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_104, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_103():
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 268, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 268, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_104._Automaton = _BuildAutomaton_103()
CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_105, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), CTD_ANON_222, scope=CTD_ANON_105, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4)))
CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), CTD_ANON_223, scope=CTD_ANON_105, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4)))
CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), CTD_ANON_224, scope=CTD_ANON_105, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4)))
CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'True'), CTD_ANON_87, scope=CTD_ANON_105, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4)))
CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'False'), CTD_ANON_88, scope=CTD_ANON_105, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4)))
CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution'), CTD_ANON_225, scope=CTD_ANON_105, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3436, 4)))

def _BuildAutomaton_104():
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 290, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 292, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 290, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3355, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3356, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3357, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'True')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3358, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'False')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3359, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 292, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_105._Automaton = _BuildAutomaton_104()
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MissingValueWeights'), CTD_ANON_2, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 342, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Cluster'), CTD_ANON_3, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 350, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ClusteringField'), CTD_ANON_107, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 382, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ComparisonMeasure'), CTD_ANON_108, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 419, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_106, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_105():
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 314, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 316, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 317, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 318, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 319, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 322, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 324, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 325, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 314, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 315, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 316, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 317, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 318, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 319, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ComparisonMeasure')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 320, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ClusteringField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 321, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MissingValueWeights')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 322, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Cluster')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 323, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 324, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 325, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, []))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, True)]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_106._Automaton = _BuildAutomaton_105()
CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Comparisons'), CTD_ANON_6, scope=CTD_ANON_107, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 402, 4)))
CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_107, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_106():
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 385, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 386, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 385, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Comparisons')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 386, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_107._Automaton = _BuildAutomaton_106()
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'euclidean'), CTD_ANON_7, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 448, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'squaredEuclidean'), CTD_ANON_8, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 455, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'cityBlock'), CTD_ANON_9, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 462, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'chebychev'), CTD_ANON_10, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 469, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'minkowski'), CTD_ANON_109, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 476, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'simpleMatching'), CTD_ANON_11, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 484, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'jaccard'), CTD_ANON_12, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 491, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'tanimoto'), CTD_ANON_13, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 498, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'binarySimilarity'), CTD_ANON_110, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 505, 4)))
CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_108, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_107():
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 422, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 422, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'euclidean')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 424, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'squaredEuclidean')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 425, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'chebychev')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 426, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'cityBlock')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 427, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'minkowski')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 428, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'simpleMatching')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 429, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'jaccard')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 430, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'tanimoto')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 431, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'binarySimilarity')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 432, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_108._Automaton = _BuildAutomaton_107()
CTD_ANON_109._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_109, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_108():
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 479, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_109._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 479, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_109._Automaton = _BuildAutomaton_108()
CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_110, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_109():
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 508, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 508, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_110._Automaton = _BuildAutomaton_109()
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RegressionTable'), CTD_ANON_112, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 564, 4)))
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_111, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_110():
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 523, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 525, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 526, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 527, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 528, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 529, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 531, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 532, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 523, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 524, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 525, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 526, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 527, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 528, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 529, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RegressionTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 530, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 531, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 532, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_111._Automaton = _BuildAutomaton_110()
CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NumericPredictor'), CTD_ANON_113, scope=CTD_ANON_112, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 576, 4)))
CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CategoricalPredictor'), CTD_ANON_114, scope=CTD_ANON_112, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 586, 4)))
CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PredictorTerm'), CTD_ANON_115, scope=CTD_ANON_112, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 596, 4)))
CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_112, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_111():
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 567, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 568, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 569, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 570, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 567, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NumericPredictor')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 568, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CategoricalPredictor')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 569, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PredictorTerm')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 570, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_112._Automaton = _BuildAutomaton_111()
CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_113, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_112():
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 579, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 579, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_113._Automaton = _BuildAutomaton_112()
CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_114, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_113():
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 589, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 589, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_114._Automaton = _BuildAutomaton_113()
CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_115, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_115, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))

def _BuildAutomaton_114():
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 599, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 599, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 600, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_115._Automaton = _BuildAutomaton_114()
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextDictionary'), CTD_ANON_14, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 632, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextCorpus'), CTD_ANON_15, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 641, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DocumentTermMatrix'), CTD_ANON_16, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 660, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextModelNormalization'), CTD_ANON_118, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 668, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextModelSimiliarity'), CTD_ANON_119, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 704, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_116, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_115():
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 609, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 611, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 612, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 613, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 614, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 615, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 619, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 620, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 621, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 622, 16))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 609, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 610, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 611, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 612, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 613, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 614, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 615, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextDictionary')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 616, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextCorpus')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 617, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DocumentTermMatrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 618, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextModelNormalization')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 619, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextModelSimiliarity')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 620, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 621, 16))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 622, 16))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, []))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, True)]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_116._Automaton = _BuildAutomaton_115()
CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_117, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_116():
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 652, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 652, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_117._Automaton = _BuildAutomaton_116()
CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_118, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_117():
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 671, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 671, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_118._Automaton = _BuildAutomaton_117()
CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_119, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_118():
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 707, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 707, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_119._Automaton = _BuildAutomaton_118()
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ComparisonMeasure'), CTD_ANON_108, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 419, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TrainingInstances'), CTD_ANON_121, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 746, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'KNNInputs'), CTD_ANON_19, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 778, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_120, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_119():
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 722, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 724, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 725, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 726, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 727, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 728, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 732, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 733, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 722, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 723, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 724, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 725, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 726, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 727, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 728, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TrainingInstances')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 729, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ComparisonMeasure')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 730, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'KNNInputs')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 731, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 732, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 733, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, []))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, True)]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_120._Automaton = _BuildAutomaton_119()
CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InstanceFields'), CTD_ANON_17, scope=CTD_ANON_121, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 761, 4)))
CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_121, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), CTD_ANON_29, scope=CTD_ANON_121, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4)))
CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), CTD_ANON_30, scope=CTD_ANON_121, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4)))

def _BuildAutomaton_120():
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 749, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 749, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'InstanceFields')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 750, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TableLocator')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 752, 20))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'InlineTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 753, 20))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_121._Automaton = _BuildAutomaton_120()
CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_122, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_121():
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 789, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 789, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_122._Automaton = _BuildAutomaton_121()
CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TargetValue'), CTD_ANON_124, scope=CTD_ANON_123, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 840, 4)))
CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_123, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_122():
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 820, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 821, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 820, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TargetValue')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 821, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_123._Automaton = _BuildAutomaton_122()
CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_124, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Partition'), CTD_ANON_151, scope=CTD_ANON_124, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1755, 4)))

def _BuildAutomaton_123():
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 843, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 844, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 843, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Partition')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 844, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_124._Automaton = _BuildAutomaton_123()

def _BuildAutomaton_124():
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac
    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)


ArrayType._Automaton = _BuildAutomaton_124()
CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Indices'), STD_ANON_12, scope=CTD_ANON_125, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 990, 4)))
CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'INT-Entries'), STD_ANON_13, scope=CTD_ANON_125, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 995, 4)))

def _BuildAutomaton_125():
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 973, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 974, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Indices')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 973, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'INT-Entries')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 974, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_125._Automaton = _BuildAutomaton_125()
CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Indices'), STD_ANON_12, scope=CTD_ANON_126, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 990, 4)))
CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'REAL-Entries'), STD_ANON_14, scope=CTD_ANON_126, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1000, 4)))

def _BuildAutomaton_126():
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 983, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 984, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Indices')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 983, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'REAL-Entries')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 984, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_126._Automaton = _BuildAutomaton_126()
CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_127, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))
CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MatCell'), CTD_ANON_128, scope=CTD_ANON_127, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1026, 4)))

def _BuildAutomaton_127():
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1007, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MatCell')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1009, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, []))
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_127._Automaton = _BuildAutomaton_127()
CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_129, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), CTD_ANON_29, scope=CTD_ANON_129, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4)))
CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), CTD_ANON_30, scope=CTD_ANON_129, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4)))
CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldColumnPair'), CTD_ANON_161, scope=CTD_ANON_129, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1919, 4)))

def _BuildAutomaton_128():
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1083, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1084, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1083, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldColumnPair')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1084, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TableLocator')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1086, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'InlineTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1087, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_129._Automaton = _BuildAutomaton_128()
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BayesInputs'), CTD_ANON_32, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1151, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BayesOutput'), CTD_ANON_34, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1174, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_130, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_129():
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1132, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1134, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1135, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1136, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1137, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1138, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1141, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1142, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1132, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1133, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1134, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1135, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1136, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1137, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1138, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BayesInputs')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1139, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BayesOutput')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1140, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1141, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1142, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, True)]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_130._Automaton = _BuildAutomaton_129()
CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_131, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_130():
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1220, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1220, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_131._Automaton = _BuildAutomaton_130()
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Apply'), CTD_ANON_91, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Decisions'), CTD_ANON_40, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1311, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constant'), CTD_ANON_154, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), CTD_ANON_156, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), CTD_ANON_158, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), CTD_ANON_159, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), CTD_ANON_160, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), CTD_ANON_162, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4)))
CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), CTD_ANON_163, scope=CTD_ANON_132, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4)))

def _BuildAutomaton_131():
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1237, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1238, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1239, 20))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1237, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Decisions')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1239, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Constant')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1786, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1787, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1788, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1789, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Discretize')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1790, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MapValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1791, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextIndex')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1792, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Apply')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1793, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Aggregate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1794, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_132._Automaton = _BuildAutomaton_131()
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ParameterList'), CTD_ANON_42, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1412, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FactorList'), CTD_ANON_43, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1430, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CovariateList'), CTD_ANON_44, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1438, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PPMatrix'), CTD_ANON_47, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1473, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PCovMatrix'), CTD_ANON_137, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1492, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ParamMatrix'), CTD_ANON_48, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1521, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaseCumHazardTables'), CTD_ANON_140, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1540, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'EventValues'), CTD_ANON_49, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1572, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_133, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_132():
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1347, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1349, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1350, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1351, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1352, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1353, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1355, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1356, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1358, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1360, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1361, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1362, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1363, 16))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1347, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1348, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1349, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1350, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1351, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1352, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1353, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ParameterList')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1354, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FactorList')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1355, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CovariateList')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1356, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PPMatrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1357, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PCovMatrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1358, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ParamMatrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1359, 16))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'EventValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1360, 16))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BaseCumHazardTables')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1361, 16))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1362, 16))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1363, 16))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    transitions.append(fac.Transition(st_15, []))
    transitions.append(fac.Transition(st_16, []))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, True)]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_133._Automaton = _BuildAutomaton_132()
CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_134, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_133():
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1423, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1423, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_134._Automaton = _BuildAutomaton_133()
CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_135, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Matrix'), CTD_ANON_127, scope=CTD_ANON_135, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1005, 4)))
CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Categories'), CTD_ANON_45, scope=CTD_ANON_135, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1457, 4)))

def _BuildAutomaton_134():
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1449, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1450, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1451, 16))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1449, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Categories')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1450, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Matrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1451, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_135._Automaton = _BuildAutomaton_134()
CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_136, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_135():
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1484, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1484, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_136._Automaton = _BuildAutomaton_135()
CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_137, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PCovCell'), CTD_ANON_138, scope=CTD_ANON_137, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1508, 4)))

def _BuildAutomaton_136():
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1495, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1495, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PCovCell')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1496, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_137._Automaton = _BuildAutomaton_136()
CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_138, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_137():
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1511, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1511, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_138._Automaton = _BuildAutomaton_137()
CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_139, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_138():
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1532, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1532, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_139._Automaton = _BuildAutomaton_138()
CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_140, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaselineStratum'), CTD_ANON_141, scope=CTD_ANON_140, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1552, 4)))
CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaselineCell'), CTD_ANON_142, scope=CTD_ANON_140, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1563, 4)))

def _BuildAutomaton_139():
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1543, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1543, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BaselineStratum')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1545, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BaselineCell')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1546, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_140._Automaton = _BuildAutomaton_139()
CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_141, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'BaselineCell'), CTD_ANON_142, scope=CTD_ANON_141, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1563, 4)))

def _BuildAutomaton_140():
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1555, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1556, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1555, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'BaselineCell')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1556, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_141._Automaton = _BuildAutomaton_140()
CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_142, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_141():
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1566, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1566, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_142._Automaton = _BuildAutomaton_141()
CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_143, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Counts'), CTD_ANON_144, scope=CTD_ANON_143, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1634, 4)))
CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NumericInfo'), CTD_ANON_145, scope=CTD_ANON_143, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1645, 4)))
CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DiscrStats'), CTD_ANON_51, scope=CTD_ANON_143, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1668, 4)))
CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ContStats'), CTD_ANON_147, scope=CTD_ANON_143, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1677, 4)))
CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Anova'), CTD_ANON_149, scope=CTD_ANON_143, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1725, 4)))

def _BuildAutomaton_142():
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1616, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1617, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1618, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1619, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1620, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1621, 16))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1616, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Counts')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1617, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NumericInfo')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1618, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DiscrStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1619, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ContStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1620, 16))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Anova')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1621, 16))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_143._Automaton = _BuildAutomaton_142()
CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_144, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_143():
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1637, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1637, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_144._Automaton = _BuildAutomaton_143()
CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_145, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Quantile'), CTD_ANON_146, scope=CTD_ANON_145, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1659, 4)))

def _BuildAutomaton_144():
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1648, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1649, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1648, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Quantile')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1649, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_145._Automaton = _BuildAutomaton_144()
CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_146, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_145():
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1662, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1662, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_146._Automaton = _BuildAutomaton_145()
CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_147, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_147, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))
CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Interval'), CTD_ANON_205, scope=CTD_ANON_147, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4)))

def _BuildAutomaton_146():
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1680, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1681, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1682, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=1, max=3, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1690, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1680, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Interval')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1681, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True),
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_3, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_147._Automaton = _BuildAutomaton_146()
CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_148, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_147():
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1705, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1705, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_148._Automaton = _BuildAutomaton_147()
CTD_ANON_149._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_149, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_149._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AnovaRow'), CTD_ANON_150, scope=CTD_ANON_149, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1734, 4)))

def _BuildAutomaton_148():
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1728, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=3, max=3, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1729, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_149._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1728, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_149._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'AnovaRow')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1729, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_149._Automaton = _BuildAutomaton_148()
CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_150, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_149():
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1737, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1737, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_150._Automaton = _BuildAutomaton_149()
CTD_ANON_151._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_151, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_151._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PartitionFieldStats'), CTD_ANON_152, scope=CTD_ANON_151, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1765, 4)))

def _BuildAutomaton_150():
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1758, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1759, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_151._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1758, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_151._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PartitionFieldStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1759, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_151._Automaton = _BuildAutomaton_150()
CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_152, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_152, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))
CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Counts'), CTD_ANON_144, scope=CTD_ANON_152, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1634, 4)))
CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NumericInfo'), CTD_ANON_145, scope=CTD_ANON_152, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1645, 4)))

def _BuildAutomaton_151():
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1768, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1769, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1770, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1771, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=1, max=3, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1690, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1768, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Counts')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1769, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NumericInfo')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1770, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 952, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True),
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_4, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_152._Automaton = _BuildAutomaton_151()
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Apply'), CTD_ANON_91, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constant'), CTD_ANON_154, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), CTD_ANON_156, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), CTD_ANON_158, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), CTD_ANON_159, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), CTD_ANON_160, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), CTD_ANON_162, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), CTD_ANON_163, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4)))
CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Value'), CTD_ANON_204, scope=CTD_ANON_153, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2790, 4)))

def _BuildAutomaton_152():
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1817, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1819, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1817, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Constant')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1786, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1787, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1788, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1789, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Discretize')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1790, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MapValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1791, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextIndex')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1792, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Apply')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1793, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Aggregate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1794, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Value')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1819, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, []))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, True)]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_153._Automaton = _BuildAutomaton_152()
CTD_ANON_155._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_155, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_153():
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1839, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_155._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1839, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_155._Automaton = _BuildAutomaton_153()
CTD_ANON_156._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_156, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_156._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LinearNorm'), CTD_ANON_157, scope=CTD_ANON_156, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1856, 4)))

def _BuildAutomaton_154():
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1848, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=2, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1849, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_156._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1848, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_156._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LinearNorm')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1849, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_156._Automaton = _BuildAutomaton_154()
CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_157, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_155():
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1859, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1859, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_157._Automaton = _BuildAutomaton_155()
CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_158, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_156():
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1868, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1868, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_158._Automaton = _BuildAutomaton_156()
CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_159, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DiscretizeBin'), CTD_ANON_55, scope=CTD_ANON_159, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1894, 4)))

def _BuildAutomaton_157():
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1885, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1886, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1885, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DiscretizeBin')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1886, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_159._Automaton = _BuildAutomaton_157()
CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_160, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TableLocator'), CTD_ANON_29, scope=CTD_ANON_160, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1103, 4)))
CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), CTD_ANON_30, scope=CTD_ANON_160, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4)))
CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldColumnPair'), CTD_ANON_161, scope=CTD_ANON_160, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1919, 4)))

def _BuildAutomaton_158():
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1906, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1907, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1908, 16))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1906, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldColumnPair')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1907, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TableLocator')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1909, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'InlineTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1910, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_160._Automaton = _BuildAutomaton_158()
CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_161, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_159():
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1922, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1922, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_161._Automaton = _BuildAutomaton_159()
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Apply'), CTD_ANON_91, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 21, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constant'), CTD_ANON_154, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1827, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous'), CTD_ANON_156, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1845, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete'), CTD_ANON_158, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1865, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Discretize'), CTD_ANON_159, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1882, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MapValues'), CTD_ANON_160, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1903, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndex'), CTD_ANON_162, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1928, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TextIndexNormalization'), CTD_ANON_56, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1960, 4)))
CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Aggregate'), CTD_ANON_163, scope=CTD_ANON_162, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1979, 4)))

def _BuildAutomaton_160():
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1931, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1932, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1931, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextIndexNormalization')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1932, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Constant')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1786, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1787, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormContinuous')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1788, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NormDiscrete')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1789, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Discretize')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1790, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MapValues')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1791, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TextIndex')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1792, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Apply')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1793, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Aggregate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1794, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_162._Automaton = _BuildAutomaton_160()
CTD_ANON_163._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_163, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_161():
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1982, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_163._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1982, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_163._Automaton = _BuildAutomaton_161()
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralInputs'), CTD_ANON_57, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2029, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralLayer'), CTD_ANON_165, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2038, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'NeuralOutputs'), CTD_ANON_58, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2052, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_164, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_162():
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2004, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2006, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2007, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2008, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2009, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2010, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2013, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2014, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2015, 16))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2004, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2005, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2006, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2007, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2008, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2009, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2010, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NeuralInputs')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2011, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NeuralLayer')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2012, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'NeuralOutputs')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2013, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2014, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2015, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, True)]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_164._Automaton = _BuildAutomaton_162()
CTD_ANON_165._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_165, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_165._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Neuron'), CTD_ANON_167, scope=CTD_ANON_165, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2100, 4)))

def _BuildAutomaton_163():
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2041, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_165._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2041, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_165._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Neuron')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2042, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_165._Automaton = _BuildAutomaton_163()
CTD_ANON_166._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_166, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_166._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), CTD_ANON_153, scope=CTD_ANON_166, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4)))

def _BuildAutomaton_164():
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2094, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2094, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DerivedField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2095, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_166._Automaton = _BuildAutomaton_164()
CTD_ANON_167._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_167, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_167._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Con'), CTD_ANON_168, scope=CTD_ANON_167, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2112, 4)))

def _BuildAutomaton_165():
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2103, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_167._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2103, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_167._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Con')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2104, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_167._Automaton = _BuildAutomaton_165()
CTD_ANON_168._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_168, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_166():
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2115, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_168._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2115, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_168._Automaton = _BuildAutomaton_166()
CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_169, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DerivedField'), CTD_ANON_153, scope=CTD_ANON_169, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1814, 4)))

def _BuildAutomaton_167():
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2124, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2124, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DerivedField')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2125, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_169._Automaton = _BuildAutomaton_167()
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TestDistributions'), CTD_ANON_171, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2150, 4)))
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_170, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_168():
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2133, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2135, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2136, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2137, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2138, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2139, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2141, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2142, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2133, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2134, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2135, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2136, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2137, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2138, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2139, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TestDistributions')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2140, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2141, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2142, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_170._Automaton = _BuildAutomaton_168()
CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_171, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Baseline'), CTD_ANON_59, scope=CTD_ANON_171, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2174, 4)))
CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Alternate'), CTD_ANON_60, scope=CTD_ANON_171, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2182, 4)))

def _BuildAutomaton_169():
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2154, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2155, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Baseline')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2153, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Alternate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2154, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2155, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_171._Automaton = _BuildAutomaton_169()
CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_172, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_170():
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2203, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2203, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_172._Automaton = _BuildAutomaton_170()
CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_173, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_171():
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2212, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2212, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_173._Automaton = _BuildAutomaton_171()
CTD_ANON_174._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_174, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_172():
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2221, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_174._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2221, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_174._Automaton = _BuildAutomaton_172()
CTD_ANON_175._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_175, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_173():
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2229, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_175._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2229, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_175._Automaton = _BuildAutomaton_173()
COUNT_TABLE_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=COUNT_TABLE_TYPE, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
COUNT_TABLE_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldValue'), CTD_ANON_176, scope=COUNT_TABLE_TYPE, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2254, 4)))
COUNT_TABLE_TYPE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldValueCount'), CTD_ANON_177, scope=COUNT_TABLE_TYPE, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2267, 4)))

def _BuildAutomaton_174():
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2246, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(COUNT_TABLE_TYPE._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2246, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COUNT_TABLE_TYPE._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldValue')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2248, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(COUNT_TABLE_TYPE._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldValueCount')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2249, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


COUNT_TABLE_TYPE._Automaton = _BuildAutomaton_174()
CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_176, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldValue'), CTD_ANON_176, scope=CTD_ANON_176, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2254, 4)))
CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldValueCount'), CTD_ANON_177, scope=CTD_ANON_176, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2267, 4)))

def _BuildAutomaton_175():
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2257, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2257, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldValue')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2259, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldValueCount')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2260, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_176._Automaton = _BuildAutomaton_175()
CTD_ANON_177._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_177, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_176():
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2270, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_177._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2270, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_177._Automaton = _BuildAutomaton_176()
CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_178, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'InlineTable'), CTD_ANON_30, scope=CTD_ANON_178, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1110, 4)))
CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VerificationFields'), CTD_ANON_61, scope=CTD_ANON_178, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2288, 4)))

def _BuildAutomaton_177():
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2280, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2280, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'VerificationFields')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2281, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'InlineTable')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2282, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_178._Automaton = _BuildAutomaton_177()
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LinearKernelType'), CTD_ANON_63, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2351, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'PolynomialKernelType'), CTD_ANON_180, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2359, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RadialBasisKernelType'), CTD_ANON_181, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2370, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SigmoidKernelType'), CTD_ANON_182, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2379, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VectorDictionary'), CTD_ANON_183, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2392, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachine'), CTD_ANON_186, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2423, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_179, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_178():
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2310, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2312, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2313, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2314, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2315, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2316, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2327, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2328, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2310, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2311, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2312, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2313, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2314, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2315, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2316, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LinearKernelType')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2319, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'PolynomialKernelType')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2320, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RadialBasisKernelType')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2321, 24))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SigmoidKernelType')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2322, 24))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'VectorDictionary')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2325, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SupportVectorMachine')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2326, 16))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2327, 16))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2328, 16))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, []))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, []))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, []))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, []))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, []))
    transitions.append(fac.Transition(st_13, []))
    transitions.append(fac.Transition(st_14, []))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, True)]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_179._Automaton = _BuildAutomaton_178()
CTD_ANON_180._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_180, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_179():
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2362, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2362, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_180._Automaton = _BuildAutomaton_179()
CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_181, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_180():
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2373, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2373, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_181._Automaton = _BuildAutomaton_180()
CTD_ANON_182._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_182, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_181():
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2382, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_182._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2382, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_182._Automaton = _BuildAutomaton_181()
CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_183, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VectorFields'), CTD_ANON_184, scope=CTD_ANON_183, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2402, 4)))
CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'VectorInstance'), CTD_ANON_185, scope=CTD_ANON_183, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2411, 4)))

def _BuildAutomaton_182():
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2395, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2397, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2395, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'VectorFields')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2396, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'VectorInstance')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2397, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_183._Automaton = _BuildAutomaton_182()
CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_184, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'FieldRef'), CTD_ANON_155, scope=CTD_ANON_184, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1836, 4)))

def _BuildAutomaton_183():
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2405, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2405, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'FieldRef')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2406, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_184._Automaton = _BuildAutomaton_183()
CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_185, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_185, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))
CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'REAL-SparseArray'), CTD_ANON_126, scope=CTD_ANON_185, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 980, 4)))

def _BuildAutomaton_184():
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2414, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2414, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'REAL-SparseArray')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2416, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 962, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_185._Automaton = _BuildAutomaton_184()
CTD_ANON_186._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_186, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_186._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVectors'), CTD_ANON_187, scope=CTD_ANON_186, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2435, 4)))
CTD_ANON_186._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Coefficients'), CTD_ANON_189, scope=CTD_ANON_186, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2453, 4)))

def _BuildAutomaton_185():
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2426, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2427, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_186._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2426, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_186._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SupportVectors')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2427, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_186._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Coefficients')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2428, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_186._Automaton = _BuildAutomaton_185()
CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_187, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SupportVector'), CTD_ANON_188, scope=CTD_ANON_187, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2445, 4)))

def _BuildAutomaton_186():
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2438, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2438, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SupportVector')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2439, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_187._Automaton = _BuildAutomaton_186()
CTD_ANON_188._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_188, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_187():
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2448, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_188._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2448, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_188._Automaton = _BuildAutomaton_187()
CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_189, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Coefficient'), CTD_ANON_190, scope=CTD_ANON_189, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2463, 4)))

def _BuildAutomaton_188():
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2456, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2456, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Coefficient')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2457, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_189._Automaton = _BuildAutomaton_188()
CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_190, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_189():
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2466, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2466, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_190._Automaton = _BuildAutomaton_189()
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Characteristics'), CTD_ANON_64, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2513, 4)))
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_191, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_190():
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2474, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2476, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2477, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2478, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2479, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2480, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2482, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2483, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2474, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2475, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2476, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2477, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2478, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2479, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2480, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Characteristics')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2481, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2482, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2483, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_191._Automaton = _BuildAutomaton_190()
CTD_ANON_192._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_192, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_192._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Attribute'), CTD_ANON_193, scope=CTD_ANON_192, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2532, 4)))

def _BuildAutomaton_191():
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2524, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_192._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2524, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_192._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Attribute')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2525, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_192._Automaton = _BuildAutomaton_191()
CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_193, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ComplexPartialScore'), CTD_ANON_65, scope=CTD_ANON_193, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2543, 4)))
CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), CTD_ANON_222, scope=CTD_ANON_193, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4)))
CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), CTD_ANON_223, scope=CTD_ANON_193, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4)))
CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), CTD_ANON_224, scope=CTD_ANON_193, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4)))
CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'True'), CTD_ANON_87, scope=CTD_ANON_193, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4)))
CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'False'), CTD_ANON_88, scope=CTD_ANON_193, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4)))

def _BuildAutomaton_192():
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2535, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2537, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2535, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3355, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3356, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3357, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'True')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3358, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'False')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3359, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ComplexPartialScore')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2537, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_193._Automaton = _BuildAutomaton_192()
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Item'), CTD_ANON_99, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 186, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Itemset'), CTD_ANON_100, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 197, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Constraints'), CTD_ANON_195, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2578, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SetPredicate'), CTD_ANON_196, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2603, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Sequence'), CTD_ANON_199, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2655, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SequenceRule'), CTD_ANON_201, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2679, 4)))
CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_194, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))

def _BuildAutomaton_193():
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2554, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2556, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2557, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2558, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2559, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2560, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2561, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2563, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2564, 16))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2554, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2555, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2556, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2557, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Constraints')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2558, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Item')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2559, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Itemset')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2560, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SetPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2561, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Sequence')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2562, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SequenceRule')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2563, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2564, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, True)]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_194._Automaton = _BuildAutomaton_193()
CTD_ANON_195._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_195, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_194():
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2581, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_195._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2581, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_195._Automaton = _BuildAutomaton_194()
CTD_ANON_196._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_196, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_196._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_196, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_195():
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2606, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_196._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2606, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_196._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 967, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_196._Automaton = _BuildAutomaton_195()
CTD_ANON_197._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_197, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_196():
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2630, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_197._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2630, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_197._Automaton = _BuildAutomaton_196()
CTD_ANON_198._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_198, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_197():
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2639, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_198._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2639, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_198._Automaton = _BuildAutomaton_197()
CTD_ANON_199._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_199, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_199._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Delimiter'), CTD_ANON_197, scope=CTD_ANON_199, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2627, 4)))
CTD_ANON_199._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Time'), CTD_ANON_198, scope=CTD_ANON_199, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4)))
CTD_ANON_199._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SetReference'), CTD_ANON_200, scope=CTD_ANON_199, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2671, 4)))

def _BuildAutomaton_198():
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2658, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2660, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2649, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2651, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2663, 16))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2658, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SetReference')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2659, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2649, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Delimiter')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2650, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Time')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2651, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SetReference')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2652, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Time')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2663, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_6, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, True)]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_199._Automaton = _BuildAutomaton_198()
CTD_ANON_200._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_200, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_199():
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2674, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_200._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2674, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_200._Automaton = _BuildAutomaton_199()
CTD_ANON_201._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_201, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_201._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Delimiter'), CTD_ANON_197, scope=CTD_ANON_201, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2627, 4)))
CTD_ANON_201._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Time'), CTD_ANON_198, scope=CTD_ANON_201, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2636, 4)))
CTD_ANON_201._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'AntecedentSequence'), CTD_ANON_66, scope=CTD_ANON_201, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2714, 4)))
CTD_ANON_201._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ConsequentSequence'), CTD_ANON_67, scope=CTD_ANON_201, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2721, 4)))

def _BuildAutomaton_200():
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2682, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2685, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2687, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2682, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'AntecedentSequence')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2683, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Delimiter')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2684, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Time')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2685, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ConsequentSequence')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2686, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Time')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2687, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, []))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_201._Automaton = _BuildAutomaton_200()
CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_202, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_201():
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2709, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2709, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_202._Automaton = _BuildAutomaton_201()
CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_203, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Value'), CTD_ANON_204, scope=CTD_ANON_203, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2790, 4)))
CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Interval'), CTD_ANON_205, scope=CTD_ANON_203, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2808, 4)))

def _BuildAutomaton_202():
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2741, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2743, 20))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2744, 20))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2741, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Interval')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2743, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Value')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2744, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_203._Automaton = _BuildAutomaton_202()
CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_204, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_203():
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2793, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2793, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_204._Automaton = _BuildAutomaton_203()
CTD_ANON_205._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_205, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_204():
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2811, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_205._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2811, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_205._Automaton = _BuildAutomaton_204()
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeSeries'), CTD_ANON_207, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2859, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ExponentialSmoothing'), CTD_ANON_212, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2964, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SpectralAnalysis'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3030, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ARIMA'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3031, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SeasonalTrendDecomposition'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3032, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_206, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))

def _BuildAutomaton_205():
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2830, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2832, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2833, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2834, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2835, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=3, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2836, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2837, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2838, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2839, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2840, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2841, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2842, 16))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2830, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2831, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2832, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2833, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2834, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2835, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TimeSeries')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2836, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SpectralAnalysis')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2837, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ARIMA')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2838, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ExponentialSmoothing')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2839, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SeasonalTrendDecomposition')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2840, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2841, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2842, 16))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    transitions.append(fac.Transition(st_12, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, True)]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_206._Automaton = _BuildAutomaton_205()
CTD_ANON_207._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeValue'), CTD_ANON_208, scope=CTD_ANON_207, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2878, 4)))
CTD_ANON_207._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeAnchor'), CTD_ANON_209, scope=CTD_ANON_207, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2889, 4)))

def _BuildAutomaton_206():
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2862, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2863, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_207._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TimeAnchor')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2862, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_207._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TimeValue')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2863, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_207._Automaton = _BuildAutomaton_206()
CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Timestamp'), CTD_ANON_27, scope=CTD_ANON_208, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1064, 4)))

def _BuildAutomaton_207():
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2881, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Timestamp')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2881, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_208._Automaton = _BuildAutomaton_207()
CTD_ANON_209._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeCycle'), CTD_ANON_210, scope=CTD_ANON_209, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2901, 4)))
CTD_ANON_209._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeException'), CTD_ANON_211, scope=CTD_ANON_209, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2941, 4)))

def _BuildAutomaton_208():
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2892, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=2, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2893, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_209._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TimeCycle')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2892, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_209._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TimeException')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2893, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_209._Automaton = _BuildAutomaton_208()
CTD_ANON_210._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_210, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_209():
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2904, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_210._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 957, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_210._Automaton = _BuildAutomaton_209()
CTD_ANON_211._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_211, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_210():
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac
    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_211._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 957, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_211._Automaton = _BuildAutomaton_210()
CTD_ANON_212._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'TimeValue'), CTD_ANON_208, scope=CTD_ANON_212, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2878, 4)))
CTD_ANON_212._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Level'), CTD_ANON_213, scope=CTD_ANON_212, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2984, 4)))
CTD_ANON_212._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Trend_ExpoSmooth'), CTD_ANON_214, scope=CTD_ANON_212, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2990, 4)))
CTD_ANON_212._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Seasonality_ExpoSmooth'), CTD_ANON_215, scope=CTD_ANON_212, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3011, 4)))

def _BuildAutomaton_211():
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2968, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2969, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2970, 16))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_212._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Level')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2967, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_212._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Trend_ExpoSmooth')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2968, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_212._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Seasonality_ExpoSmooth')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2969, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_212._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'TimeValue')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2970, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, []))
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_212._Automaton = _BuildAutomaton_211()
CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_214, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_212():
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2993, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 962, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_214._Automaton = _BuildAutomaton_212()
CTD_ANON_215._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_215, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_213():
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac
    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_215._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 962, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_215._Automaton = _BuildAutomaton_213()
CTD_ANON_216._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_216, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_214():
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3044, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_216._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3044, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_216._Automaton = _BuildAutomaton_214()
CTD_ANON_217._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_217, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_217._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LiftData'), CTD_ANON_219, scope=CTD_ANON_217, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3149, 4)))
CTD_ANON_217._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ROC'), CTD_ANON_79, scope=CTD_ANON_217, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3229, 4)))
CTD_ANON_217._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ConfusionMatrix'), CTD_ANON_81, scope=CTD_ANON_217, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3251, 4)))

def _BuildAutomaton_215():
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3108, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3109, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3110, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3111, 16))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_217._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3108, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_217._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ConfusionMatrix')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3109, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_217._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LiftData')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3110, 16))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_217._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ROC')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3111, 16))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_217._Automaton = _BuildAutomaton_215()
CTD_ANON_219._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_219, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_219._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelLiftGraph'), CTD_ANON_71, scope=CTD_ANON_219, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3162, 4)))
CTD_ANON_219._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'OptimumLiftGraph'), CTD_ANON_72, scope=CTD_ANON_219, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3170, 4)))
CTD_ANON_219._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'RandomLiftGraph'), CTD_ANON_73, scope=CTD_ANON_219, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3178, 4)))

def _BuildAutomaton_216():
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3152, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3154, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3155, 16))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_219._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3152, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_219._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelLiftGraph')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3153, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_219._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'OptimumLiftGraph')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3154, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_219._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'RandomLiftGraph')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3155, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_219._Automaton = _BuildAutomaton_216()
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Targets'), CTD_ANON_20, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 809, 4)))
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Output'), CTD_ANON_39, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1226, 4)))
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelStats'), CTD_ANON_50, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1604, 4)))
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations'), CTD_ANON_54, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1806, 4)))
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification'), CTD_ANON_178, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 2277, 4)))
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema'), CTD_ANON_69, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3033, 4)))
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation'), CTD_ANON_70, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3093, 4)))
CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Node'), CTD_ANON_221, scope=CTD_ANON_220, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3333, 4)))

def _BuildAutomaton_217():
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3305, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3307, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3308, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3309, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3310, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3311, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3313, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3314, 16))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3305, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'MiningSchema')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3306, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Output')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3307, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelStats')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3308, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelExplanation')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3309, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Targets')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3310, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'LocalTransformations')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3311, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Node')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3312, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ModelVerification')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3313, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3314, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, []))
    transitions.append(fac.Transition(st_3, []))
    transitions.append(fac.Transition(st_4, []))
    transitions.append(fac.Transition(st_5, []))
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_220._Automaton = _BuildAutomaton_217()
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Regression'), CTD_ANON_96, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 113, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'DecisionTree'), CTD_ANON_97, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 130, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Partition'), CTD_ANON_151, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 1755, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Node'), CTD_ANON_221, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3333, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), CTD_ANON_222, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), CTD_ANON_223, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), CTD_ANON_224, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'True'), CTD_ANON_87, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'False'), CTD_ANON_88, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4)))
CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution'), CTD_ANON_225, scope=CTD_ANON_221, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3436, 4)))

def _BuildAutomaton_218():
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3336, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3340, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3341, 24))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3342, 24))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 93, 12))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3336, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3355, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3356, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3357, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'True')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3358, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'False')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3359, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Partition')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3340, 24))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'ScoreDistribution')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3341, 24))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Node')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3342, 24))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 93, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Regression')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 95, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'DecisionTree')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 96, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, []))
    transitions.append(fac.Transition(st_7, []))
    transitions.append(fac.Transition(st_8, []))
    transitions.append(fac.Transition(st_9, []))
    transitions.append(fac.Transition(st_10, []))
    transitions.append(fac.Transition(st_11, []))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, True)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_221._Automaton = _BuildAutomaton_218()
CTD_ANON_222._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_222, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_219():
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3365, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_222._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3365, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_222._Automaton = _BuildAutomaton_219()
CTD_ANON_223._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_223, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_223._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate'), CTD_ANON_222, scope=CTD_ANON_223, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3362, 4)))
CTD_ANON_223._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate'), CTD_ANON_223, scope=CTD_ANON_223, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3385, 4)))
CTD_ANON_223._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate'), CTD_ANON_224, scope=CTD_ANON_223, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3405, 4)))
CTD_ANON_223._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'True'), CTD_ANON_87, scope=CTD_ANON_223, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3422, 4)))
CTD_ANON_223._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'False'), CTD_ANON_88, scope=CTD_ANON_223, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3429, 4)))

def _BuildAutomaton_220():
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3388, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=2, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3389, 16))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_223._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3388, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_223._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimplePredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3355, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_223._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'CompoundPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3356, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_223._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'SimpleSetPredicate')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3357, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_223._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'True')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3358, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_223._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'False')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3359, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_223._Automaton = _BuildAutomaton_220()
CTD_ANON_224._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_224, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))
CTD_ANON_224._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Array'), ArrayType, scope=CTD_ANON_224, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 949, 4)))

def _BuildAutomaton_221():
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3408, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_224._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3408, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_224._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Array')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3409, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)


CTD_ANON_224._Automaton = _BuildAutomaton_221()
CTD_ANON_225._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Extension'), CTD_ANON_23, scope=CTD_ANON_225, location=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 905, 4)))

def _BuildAutomaton_222():
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3439, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_225._UseForTag(pyxb.namespace.ExpandedName(Namespace, b'Extension')), pyxb.utils.utility.Location(b'/Users/alex/work/Pulsepoint/source/sklearn-pmml/pmml-4-2.xsd', 3439, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_225._Automaton = _BuildAutomaton_222()