# uncompyle6 version 3.6.7
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.macosx-10.7-x86_64/egg/bytecodehacks/code_gen/method_spec.py
# Compiled at: 2000-03-25 14:23:56
import string

class MethodSpecifier:
    """This class enables the specialisation of methods when
the bytecodehacks/ops.py file is autogenerated"""

    def __init__(self, spec_file):
        self.load_from_file(spec_file)

    def has_method(self, method):
        return self.methods.has_key(method)

    def get_method_body(self, method):
        return self.methods[method]

    def get_method(self, method):
        return self.template % self.get_method_body(method)

    def load_from_file(self, file):
        self.methods = {}
        lines = open(file).readlines()
        lines = filter(lambda l: l[0] != '#', lines)
        lines = map(lambda l: l[:-1], lines)
        n = len(lines)
        names = []
        i = 0
        while i < n:
            if not lines[i]:
                i = i + 1
                continue
            if lines[i][0] in string.whitespace:
                body = []
                while i < n and lines[i] and lines[i][0] in string.whitespace:
                    body.append(lines[i])
                    i = i + 1

                body = '    ' + string.join(body, '\n    ')
                for name in names:
                    self.methods[name] = body

                names = []
            else:
                names.append(string.split(lines[i], ':', 1)[0])
                i = i + 1

        if names != []:
            raise 'malformed input? (names <> [])'

    def set_template(self, template):
        self.template = template