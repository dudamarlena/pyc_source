# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3350)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build\bdist.win-amd64\egg\evmdasm\registry.py
# Compiled at: 2018-10-08 16:43:40
# Size of source mod 2**32: 25366 bytes
from .instructions import Instruction
from .instruction_registry import InstructionRegistry
from . import argtypes as T
INSTRUCTIONS = [
 Instruction(opcode=0, name='STOP', category='terminate', gas=0, description='Halts execution.'),
 Instruction(opcode=1, name='ADD', category='arithmetic', gas=3, description='Addition operation.', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=2, name='MUL', category='arithmetic', gas=5, description='Multiplication operation.', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=3, name='SUB', category='arithmetic', gas=3, description='Subtraction operation.', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=4, name='DIV', category='arithmetic', gas=5, description='Integer division operation.', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=5, name='SDIV', category='arithmetic', gas=5, description='Signed integer', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=6, name='MOD', category='arithmetic', gas=5, description='Modulo', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=7, name='SMOD', category='arithmetic', gas=5, description='Signed modulo', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=8, name='ADDMOD', category='arithmetic', gas=8, description='Modulo addition operation', args=[T.Value('a'), T.Value('b'), T.Value('mod')], returns=[T.Value('result')]),
 Instruction(opcode=9, name='MULMOD', category='arithmetic', gas=8, description='Modulo multiplication operation', args=[T.Value('a'), T.Value('b'), T.Value('mod')], returns=[T.Value('result')]),
 Instruction(opcode=10, name='EXP', category='arithmetic', gas=10, description='Exponential operation.', args=[T.Value('base'), T.Value('exponent')], returns=['result']),
 Instruction(opcode=11, name='SIGNEXTEND', category='arithmetic', gas=5, description="Extend length of two's complement signed integer.", args=[T.Value('bits'), T.Value('num')], returns=[T.Value('result')]),
 Instruction(opcode=16, name='LT', category='comparison', gas=3, description='Lesser-than comparison', args=[T.Value('a'), T.Value('b')], returns=[T.Bool('flag')]),
 Instruction(opcode=17, name='GT', category='comparison', gas=3, description='Greater-than comparison', args=[T.Value('a'), T.Value('b')], returns=[T.Bool('flag')]),
 Instruction(opcode=18, name='SLT', category='comparison', gas=3, description='Signed less-than comparison', args=[T.Value('a'), T.Value('b')], returns=[T.Bool('flag')]),
 Instruction(opcode=19, name='SGT', category='comparison', gas=3, description='Signed greater-than comparison', args=[T.Value('a'), T.Value('b')], returns=[T.Bool('flag')]),
 Instruction(opcode=20, name='EQ', category='comparison', gas=3, description='Equality  comparison', args=[T.Value('a'), T.Value('b')], returns=[T.Bool('flag')]),
 Instruction(opcode=21, name='ISZERO', category='comparison', gas=3, description='Simple not operator', args=[T.Value('a')], returns=[T.Bool('flag')]),
 Instruction(opcode=22, name='AND', category='bitwise-logic', gas=3, description='Bitwise AND operation.', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=23, name='OR', category='bitwise-logic', gas=3, description='Bitwise OR operation.', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=24, name='XOR', category='bitwise-logic', gas=3, description='Bitwise XOR operation.', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=25, name='NOT', category='bitwise-logic', gas=3, description='Bitwise NOT operation.', args=[T.Value('a'), T.Value('b')], returns=[T.Value('result')]),
 Instruction(opcode=26, name='BYTE', category='bitwise-logic', gas=3, description='Retrieve single byte from word', args=[T.Index32('th'), T.Word('value')], returns=[T.Byte('byte')]),
 Instruction(opcode=27, name='SHL', category='bitwise-logic', gas=3, fork='constantinople', description='<TBD> Shift left', args=[T.Index64('shift'), T.Value('value')], returns=[T.Value('result')]),
 Instruction(opcode=28, name='SHR', category='bitwise-logic', gas=3, fork='constantinople', description='<TBD> Shift Right', args=[T.Index64('shift'), T.Value('value')], returns=[T.Value('result')]),
 Instruction(opcode=29, name='SAR', category='bitwise-logic', gas=3, fork='constantinople', description='<TBD> Shift arithmetic right', args=[T.Index64('shift'), T.Value('value')], returns=[T.Bool('flag')]),
 Instruction(opcode=32, name='SHA3', category='cryptographic', gas=30, description='Compute Keccak-256 hash.', args=[T.MemOffset('offset'), T.Length('size')], returns=[T.Value('sha3')]),
 Instruction(opcode=48, name='ADDRESS', category='envinfo', gas=2, description='Get address of currently executing account.', returns=[T.Address('this.address')]),
 Instruction(opcode=49, name='BALANCE', category='envinfo', gas=20, description='Get balance of the given account.', args=[T.Address('address')], returns=[T.Value('this.balance')]),
 Instruction(opcode=50, name='ORIGIN', category='envinfo', gas=2, description='Get execution origination address.', returns=[T.Address('tx.origin')]),
 Instruction(opcode=51, name='CALLER', category='envinfo', gas=2, description='Get caller address.This is the address of the account that is directly responsible for this execution.', returns=[T.Address('msg.sender')]),
 Instruction(opcode=52, name='CALLVALUE', category='envinfo', gas=2, description='Get deposited value by the instruction/transaction responsible for this execution.', returns=[T.CallValue('msg.value')]),
 Instruction(opcode=53, name='CALLDATALOAD', category='envinfo', gas=3, description='Get input data of current environment.', args=[T.MemOffset('dataOffset')], returns=[T.Data('msg.data')]),
 Instruction(opcode=54, name='CALLDATASIZE', category='envinfo', gas=2, description='Get size of input data in current environment.', returns=[T.Length('msg.data.length')]),
 Instruction(opcode=55, name='CALLDATACOPY', category='envinfo', gas=3, description='Copy input data in current environment to memory. This pertains to the input data passed with the message call instruction or transaction.', args=[T.MemOffset('memOffset'), T.MemOffset('dataOffset'), T.Length('length')]),
 Instruction(opcode=56, name='CODESIZE', category='envinfo', gas=2, description='Get size of code running in current environment.', returns=[T.Length('codesize')]),
 Instruction(opcode=57, name='CODECOPY', category='envinfo', gas=3, description='Copy code running in current environment to memory.', args=[T.MemOffset('memOffset'), T.MemOffset('codeOffset'), T.Length('length')]),
 Instruction(opcode=58, name='GASPRICE', category='envinfo', gas=2, description='Get price of gas in current environment.', returns=[T.Gas('tx.gasprice')]),
 Instruction(opcode=59, name='EXTCODESIZE', category='envinfo', gas=20, description="Get size of an account's code.", args=[T.Address('address')], returns=['extcodesize']),
 Instruction(opcode=60, name='EXTCODECOPY', category='envinfo', gas=20, description="Copy an account's code to memory.", args=[T.Address('address'), T.MemOffset('memOffset'), T.MemOffset('codeOffset'), T.Length('length')]),
 Instruction(opcode=61, name='RETURNDATASIZE', category='envinfo', gas=2, description='Push the size of the return data buffer onto the stack.', returns=['returndatasize']),
 Instruction(opcode=62, name='RETURNDATACOPY', category='envinfo', gas=3, description='Copy data from the return data buffer.', args=[T.MemOffset('memOffset'), T.MemOffset('dataOffset'), T.Length('length')]),
 Instruction(opcode=63, name='EXTCODEHASH', category='envinfo', gas=400, fork='constantinople', description='<TBD> - Constantinople', args=[T.Address('address')]),
 Instruction(opcode=64, name='BLOCKHASH', category='blockinfo', gas=20, description='Get the hash of one of the 256 most recent complete blocks.', args=[T.Index256('num')], returns=['block.blockhash']),
 Instruction(opcode=65, name='COINBASE', category='blockinfo', gas=2, description="Get the block's beneficiary address.", returns=[T.Address('block.coinbase')]),
 Instruction(opcode=66, name='TIMESTAMP', category='blockinfo', gas=2, description="Get the block's timestamp.", returns=[T.Timestamp('block.timestamp')]),
 Instruction(opcode=67, name='NUMBER', category='blockinfo', gas=2, description="Get the block's number.", returns=[T.Value('block.number')]),
 Instruction(opcode=68, name='DIFFICULTY', category='blockinfo', gas=2, description="Get the block's difficulty.", returns=[T.Value('block.difficulty')]),
 Instruction(opcode=69, name='GASLIMIT', category='blockinfo', gas=2, description="Get the block's gas limit.", returns=[T.Gas('block.gaslimit')]),
 Instruction(opcode=80, name='POP', category='stack', gas=2, description='Remove item from stack.', args=[T.Internal('#dummy')]),
 Instruction(opcode=81, name='MLOAD', category='memory', gas=3, description='Load word from memory.', args=[T.MemOffset('offset')]),
 Instruction(opcode=82, name='MSTORE', category='memory', gas=3, description='Save word to memory.', args=[T.MemOffset('offset'), T.Word('value')]),
 Instruction(opcode=83, name='MSTORE8', category='memory', gas=3, description='Save byte to memory.', args=[T.MemOffset('offset'), T.Byte('value')]),
 Instruction(opcode=84, name='SLOAD', category='storage', gas=50, description='Load word from storage.', args=[T.MemOffset('loc')], returns=['value']),
 Instruction(opcode=85, name='SSTORE', category='storage', gas=0, description='Save word to storage.', args=[T.MemOffset('loc'), T.Word('value')]),
 Instruction(opcode=86, name='JUMP', category='controlflow', gas=8, description='Alter the program counter.', args=[T.Label('evm.pc')]),
 Instruction(opcode=87, name='JUMPI', category='controlflow', gas=10, description='Conditionally alter the program counter.', args=[T.Label('evm.pc'), T.Bool('condition')]),
 Instruction(opcode=88, name='PC', category='info', gas=2, description='Get the value of the program counter prior to the increment.', returns=[T.Label('evm.pc')]),
 Instruction(opcode=89, name='MSIZE', category='memory', gas=2, description='Get the size of active memory in bytes.', returns=[T.Length('memory.length')]),
 Instruction(opcode=90, name='GAS', category='info', gas=2, description='Get the amount of available gas, including the corresponding reduction', returns=[T.Gas('gasleft')]),
 Instruction(opcode=91, name='JUMPDEST', category='label', gas=1, description='Mark a valid destination for jumps.'),
 Instruction(opcode=96, name='PUSH1', category='stack', gas=3, length_of_operand=1, description='Place 1 byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=97, name='PUSH2', category='stack', gas=3, length_of_operand=2, description='Place 2-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=98, name='PUSH3', category='stack', gas=3, length_of_operand=3, description='Place 3-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=99, name='PUSH4', category='stack', gas=3, length_of_operand=4, description='Place 4-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=100, name='PUSH5', category='stack', gas=3, length_of_operand=5, description='Place 5-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=101, name='PUSH6', category='stack', gas=3, length_of_operand=6, description='Place 6-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=102, name='PUSH7', category='stack', gas=3, length_of_operand=7, description='Place 7-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=103, name='PUSH8', category='stack', gas=3, length_of_operand=8, description='Place 8-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=104, name='PUSH9', category='stack', gas=3, length_of_operand=9, description='Place 9-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=105, name='PUSH10', category='stack', gas=3, length_of_operand=10, description='Place 10-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=106, name='PUSH11', category='stack', gas=3, length_of_operand=11, description='Place 11-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=107, name='PUSH12', category='stack', gas=3, length_of_operand=12, description='Place 12-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=108, name='PUSH13', category='stack', gas=3, length_of_operand=13, description='Place 13-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=109, name='PUSH14', category='stack', gas=3, length_of_operand=14, description='Place 14-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=110, name='PUSH15', category='stack', gas=3, length_of_operand=15, description='Place 15-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=111, name='PUSH16', category='stack', gas=3, length_of_operand=16, description='Place 16-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=112, name='PUSH17', category='stack', gas=3, length_of_operand=17, description='Place 17-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=113, name='PUSH18', category='stack', gas=3, length_of_operand=18, description='Place 18-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=114, name='PUSH19', category='stack', gas=3, length_of_operand=19, description='Place 19-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=115, name='PUSH20', category='stack', gas=3, length_of_operand=20, description='Place 20-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=116, name='PUSH21', category='stack', gas=3, length_of_operand=21, description='Place 21-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=117, name='PUSH22', category='stack', gas=3, length_of_operand=22, description='Place 22-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=118, name='PUSH23', category='stack', gas=3, length_of_operand=23, description='Place 23-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=119, name='PUSH24', category='stack', gas=3, length_of_operand=24, description='Place 24-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=120, name='PUSH25', category='stack', gas=3, length_of_operand=25, description='Place 25-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=121, name='PUSH26', category='stack', gas=3, length_of_operand=26, description='Place 26-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=122, name='PUSH27', category='stack', gas=3, length_of_operand=27, description='Place 27-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=123, name='PUSH28', category='stack', gas=3, length_of_operand=28, description='Place 28-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=124, name='PUSH29', category='stack', gas=3, length_of_operand=29, description='Place 29-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=125, name='PUSH30', category='stack', gas=3, length_of_operand=30, description='Place 30-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=126, name='PUSH31', category='stack', gas=3, length_of_operand=31, description='Place 31-byte item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=127, name='PUSH32', category='stack', gas=3, length_of_operand=32, description='Place 32-byte (full word) item on stack.', returns=[T.Value('item')]),
 Instruction(opcode=128, name='DUP1', category='stack', gas=3, pops=1, pushes=2, description='Duplicate 1st stack item.'),
 Instruction(opcode=129, name='DUP2', category='stack', gas=3, pops=2, pushes=3, description='Duplicate 2nd stack item.'),
 Instruction(opcode=130, name='DUP3', category='stack', gas=3, pops=3, pushes=4, description='Duplicate 3rd stack item.'),
 Instruction(opcode=131, name='DUP4', category='stack', gas=3, pops=4, pushes=5, description='Duplicate 4th stack item.'),
 Instruction(opcode=132, name='DUP5', category='stack', gas=3, pops=5, pushes=6, description='Duplicate 5th stack item.'),
 Instruction(opcode=133, name='DUP6', category='stack', gas=3, pops=6, pushes=7, description='Duplicate 6th stack item.'),
 Instruction(opcode=134, name='DUP7', category='stack', gas=3, pops=7, pushes=8, description='Duplicate 7th stack item.'),
 Instruction(opcode=135, name='DUP8', category='stack', gas=3, pops=8, pushes=9, description='Duplicate 8th stack item.'),
 Instruction(opcode=136, name='DUP9', category='stack', gas=3, pops=9, pushes=10, description='Duplicate 9th stack item.'),
 Instruction(opcode=137, name='DUP10', category='stack', gas=3, pops=10, pushes=11, description='Duplicate 10th stack item.'),
 Instruction(opcode=138, name='DUP11', category='stack', gas=3, pops=11, pushes=12, description='Duplicate 11th stack item.'),
 Instruction(opcode=139, name='DUP12', category='stack', gas=3, pops=12, pushes=13, description='Duplicate 12th stack item.'),
 Instruction(opcode=140, name='DUP13', category='stack', gas=3, pops=13, pushes=14, description='Duplicate 13th stack item.'),
 Instruction(opcode=141, name='DUP14', category='stack', gas=3, pops=14, pushes=15, description='Duplicate 14th stack item.'),
 Instruction(opcode=142, name='DUP15', category='stack', gas=3, pops=15, pushes=16, description='Duplicate 15th stack item.'),
 Instruction(opcode=143, name='DUP16', category='stack', gas=3, pops=16, pushes=17, description='Duplicate 16th stack item.'),
 Instruction(opcode=144, name='SWAP1', category='stack', gas=3, pops=2, pushes=2, description='Exchange 1st and 2nd stack items.'),
 Instruction(opcode=145, name='SWAP2', category='stack', gas=3, pops=3, pushes=3, description='Exchange 1st and 3rd stack items.'),
 Instruction(opcode=146, name='SWAP3', category='stack', gas=3, pops=4, pushes=3, description='Exchange 1st and 4th stack items.'),
 Instruction(opcode=147, name='SWAP4', category='stack', gas=3, pops=5, pushes=4, description='Exchange 1st and 5th stack items.'),
 Instruction(opcode=148, name='SWAP5', category='stack', gas=3, pops=6, pushes=5, description='Exchange 1st and 6th stack items.'),
 Instruction(opcode=149, name='SWAP6', category='stack', gas=3, pops=7, pushes=6, description='Exchange 1st and 7th stack items.'),
 Instruction(opcode=150, name='SWAP7', category='stack', gas=3, pops=8, pushes=7, description='Exchange 1st and 8th stack items.'),
 Instruction(opcode=151, name='SWAP8', category='stack', gas=3, pops=9, pushes=9, description='Exchange 1st and 9th stack items.'),
 Instruction(opcode=152, name='SWAP9', category='stack', gas=3, pops=10, pushes=10, description='Exchange 1st and 10th stack items.'),
 Instruction(opcode=153, name='SWAP10', category='stack', gas=3, pops=11, pushes=11, description='Exchange 1st and 11th stack items.'),
 Instruction(opcode=154, name='SWAP11', category='stack', gas=3, pops=12, pushes=12, description='Exchange 1st and 12th stack items.'),
 Instruction(opcode=155, name='SWAP12', category='stack', gas=3, pops=13, pushes=13, description='Exchange 1st and 13th stack items.'),
 Instruction(opcode=156, name='SWAP13', category='stack', gas=3, pops=14, pushes=14, description='Exchange 1st and 14th stack items.'),
 Instruction(opcode=157, name='SWAP14', category='stack', gas=3, pops=15, pushes=15, description='Exchange 1st and 15th stack items.'),
 Instruction(opcode=158, name='SWAP15', category='stack', gas=3, pops=16, pushes=16, description='Exchange 1st and 16th stack items.'),
 Instruction(opcode=159, name='SWAP16', category='stack', gas=3, pops=17, pushes=17, description='Exchange 1st and 17th stack items.'),
 Instruction(opcode=160, name='LOG0', category='event', gas=375, description='Append log record with no topics.', args=[T.MemOffset('start'), T.Length('size')]),
 Instruction(opcode=161, name='LOG1', category='event', gas=750, description='Append log record with one topic.', args=[T.MemOffset('start'), T.Length('size'), T.Value('topic1')]),
 Instruction(opcode=162, name='LOG2', category='event', gas=1125, description='Append log record with two topics.', args=[T.MemOffset('start'), T.Length('size'), T.Value('topic1'), T.Value('topic2')]),
 Instruction(opcode=163, name='LOG3', category='event', gas=1500, description='Append log record with three topics.', args=[T.MemOffset('start'), T.Length('size'), T.Value('topic1'), T.Value('topic2'), T.Value('topic3')]),
 Instruction(opcode=164, name='LOG4', category='event', gas=1875, description='Append log record with four topics.', args=[T.MemOffset('start'), T.Length('size'), T.Value('topic1'), T.Value('topic2'), T.Value('topic3'), T.Value('topic4')]),
 Instruction(opcode=176, name='UNOFFICIAL_PUSH', category='unofficial', description='unofficial opcodes used for parsing.'),
 Instruction(opcode=177, name='UNOFFICIAL_DUP', category='unofficial', description='unofficial opcodes used for parsing.'),
 Instruction(opcode=178, name='UNOFFICIAL_SWAP', category='unofficial', description='unofficial opcodes used for parsing.'),
 Instruction(opcode=240, name='CREATE', category='system', gas=32000, description='Create a new account with associated code.', args=[T.CallValue('value'), T.MemOffset('offset'), T.Length('size')]),
 Instruction(opcode=241, name='CALL', category='system', gas=40, description='Message-call into an account.', args=[T.Gas('gas'), T.Address('address'), T.CallValue('value'), T.MemOffset('inOffset'), T.Length('inSize'), T.MemOffset('retOffset'), T.Length('retSize')]),
 Instruction(opcode=242, name='CALLCODE', category='system', gas=40, description="Message-call into this account with alternative account's code.", args=[T.Gas('gas'), T.Address('address'), T.CallValue('value'), T.MemOffset('inOffset'), T.Length('inSize'), T.MemOffset('retOffset'), T.Length('retSize')]),
 Instruction(opcode=243, name='RETURN', category='terminate', gas=0, description='Halt execution returning output data.', args=[T.MemOffset('offset'), T.Length('size')]),
 Instruction(opcode=244, name='DELEGATECALL', category='system', gas=40, description='Similar to CALLCODE except that it propagates the sender and value from the parent scope to the child scope', args=[T.Gas('gas'), T.Address('address'), T.MemOffset('inOffset'), T.Length('inSize'), T.MemOffset('retOffset'), T.Length('retSize')]),
 Instruction(opcode=245, name='CREATE2', category='system', gas=32000, fork='constantinople', description='Create a new account with associated code. (Constantinople)', args=[T.Value('endowment'), T.MemOffset('offset'), T.Length('size'), T.Value('salt')]),
 Instruction(opcode=250, name='STATICCALL', category='system', gas=40, description='Call another contract (or itself) while disallowing any modifications to the state during the call.', args=[T.Gas('gas'), T.Address('address'), T.MemOffset('inOffset'), T.Length('inSize'), T.MemOffset('retOffset'), T.Length('retSize')]),
 Instruction(opcode=253, name='REVERT', category='terminate', gas=0, description='throw an error', args=[T.MemOffset('offset'), T.Length('size')]),
 Instruction(opcode=255, name='SELFDESTRUCT', category='terminate', gas=0, description='Halt execution and register account for later deletion.', args=[T.Address('address')])]
registry = InstructionRegistry(instructions=INSTRUCTIONS)
INSTRUCTIONS_BY_OPCODE = registry.by_opcode
INSTRUCTIONS_BY_NAME = registry.by_name
INSTRUCTIONS_BY_CATEGORY = registry.by_category
instruction = registry.instruction
INSTRUCTION_MARKS_BASICBLOCK_END = registry.instruction_marks_basicblock_end
create_instruction = registry.create_instruction