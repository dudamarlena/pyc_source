# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/moser/code/pylint/pylint/test/unittest_pyreverse_writer.py
# Compiled at: 2019-05-03 09:01:02
# Size of source mod 2**32: 3990 bytes
"""
unit test for visitors.diadefs and extensions.diadefslib modules
"""
import builtins as @py_builtins, _pytest.assertion.rewrite as @pytest_ar, codecs, os
from difflib import unified_diff
import pytest
from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler
from pylint.pyreverse.inspector import Linker, project_from_files
from pylint.pyreverse.utils import get_visibility
from pylint.pyreverse.writer import DotWriter
_DEFAULTS = {'all_ancestors':None, 
 'show_associated':None, 
 'module_names':None, 
 'output_format':'dot', 
 'diadefs_file':None, 
 'quiet':0, 
 'show_ancestors':None, 
 'classes':(),  'all_associated':None, 
 'mode':'PUB_ONLY', 
 'show_builtin':False, 
 'only_classnames':False}

class Config(object):
    __doc__ = 'config object for tests'

    def __init__(self):
        for attr, value in _DEFAULTS.items():
            setattr(self, attr, value)


def _file_lines(path):
    with codecs.open(path, encoding='latin1') as (stream):
        lines = [line.strip() for line in stream.readlines() if line.find('squeleton generated by ') == -1 if not line.startswith('__revision__ = "$Id:')]
    return [line for line in lines if line]


def get_project(module, name='No Name'):
    """return an astroid project representation"""

    def _astroid_wrapper(func, modname):
        return func(modname)

    return project_from_files([module], _astroid_wrapper, project_name=name)


DOT_FILES = [
 'packages_No_Name.dot', 'classes_No_Name.dot']

@pytest.fixture(scope='module')
def setup():
    project = get_project(os.path.join(os.path.dirname(__file__), 'data'))
    linker = Linker(project)
    CONFIG = Config()
    handler = DiadefsHandler(CONFIG)
    dd = DefaultDiadefGenerator(linker, handler).visit(project)
    for diagram in dd:
        diagram.extract_relationships()

    writer = DotWriter(CONFIG)
    writer.write(dd)
    yield
    for fname in DOT_FILES:
        try:
            os.remove(fname)
        except:
            continue


@pytest.mark.usefixtures('setup')
@pytest.mark.parametrize('generated_file', DOT_FILES)
def test_dot_files(generated_file):
    expected_file = os.path.join(os.path.dirname(__file__), 'data', generated_file)
    generated = _file_lines(generated_file)
    expected = _file_lines(expected_file)
    generated = '\n'.join(generated)
    expected = '\n'.join(expected)
    files = '\n *** expected : %s, generated : %s \n' % (expected_file, generated_file)
    @py_assert1 = expected == generated
    if @py_assert1 is None:
        from _pytest.warning_types import PytestWarning
        from warnings import warn_explicit
        warn_explicit((PytestWarning('asserting the value None, please use "assert is None"')), category=None, filename='/home/moser/code/pylint/pylint/test/unittest_pyreverse_writer.py', lineno=107)
    if not @py_assert1:
        @py_format3 = @pytest_ar._call_reprcompare(('==', ), (@py_assert1,), ('%(py0)s == %(py2)s', ), (expected, generated)) % {'py0':@pytest_ar._saferepr(expected) if 'expected' in @py_builtins.locals() or @pytest_ar._should_repr_global_name(expected) else 'expected',  'py2':@pytest_ar._saferepr(generated) if 'generated' in @py_builtins.locals() or @pytest_ar._should_repr_global_name(generated) else 'generated'}
        @py_format5 = (@pytest_ar._format_assertmsg('%s%s' % (files, '\n'.join(line for line in unified_diff(expected.splitlines(), generated.splitlines())))) + '\n>assert %(py4)s') % {'py4': @py_format3}
        raise AssertionError(@pytest_ar._format_explanation(@py_format5))
    @py_assert1 = None
    os.remove(generated_file)


@pytest.mark.parametrize('names, expected', [
 (
  [
   '__reduce_ex__', '__setattr__'], 'special'),
 (
  [
   '__g_', '____dsf', '__23_9'], 'private'),
 (
  [
   'simple'], 'public'),
 (
  [
   '_', '__', '___', '____', '_____', '___e__', '_nextsimple', '_filter_it_'],
  'protected')])
def test_get_visibility(names, expected):
    for name in names:
        got = get_visibility(name)
        @py_assert1 = got == expected
        if @py_assert1 is None:
            from _pytest.warning_types import PytestWarning
            from warnings import warn_explicit
            warn_explicit((PytestWarning('asserting the value None, please use "assert is None"')), category=None, filename='/home/moser/code/pylint/pylint/test/unittest_pyreverse_writer.py', lineno=131)
        if not @py_assert1:
            @py_format3 = @pytest_ar._call_reprcompare(('==', ), (@py_assert1,), ('%(py0)s == %(py2)s', ), (got, expected)) % {'py0':@pytest_ar._saferepr(got) if 'got' in @py_builtins.locals() or @pytest_ar._should_repr_global_name(got) else 'got',  'py2':@pytest_ar._saferepr(expected) if 'expected' in @py_builtins.locals() or @pytest_ar._should_repr_global_name(expected) else 'expected'}
            @py_format5 = (@pytest_ar._format_assertmsg('got %s instead of %s for value %s' % (got, expected, name)) + '\n>assert %(py4)s') % {'py4': @py_format3}
            raise AssertionError(@pytest_ar._format_explanation(@py_format5))
        @py_assert1 = None