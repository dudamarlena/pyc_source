# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/dennis/PycharmProjects/leo/leo/template/template.py
# Compiled at: 2019-08-16 07:44:15
# Size of source mod 2**32: 6750 bytes
import json
from typing import Optional, Mapping, Union
import sys, os, jinja2
from typing.io import TextIO
_loader = jinja2.FileSystemLoader(os.path.dirname(__file__))
_jinja_env = jinja2.Environment(keep_trailing_newline=True)

def _schema_template(project_name: str, schema_name: str, params_or_class: Optional[str]) -> str:
    if params_or_class is None:
        template = _loader.load(_jinja_env, 'schema_stub_template.jinja2')
        return template.render(project_name=project_name, schema_name=schema_name)
    try:
        params = json.loads(params_or_class)
    except json.JSONDecodeError:
        return f"{project_name}{schema_name}Schema = {params_or_class}\n"
    else:

        class Field:

            def __init__(self, param_name, param_type):
                self.param_name = param_name
                self.param_type = param_type

        template = _loader.load(_jinja_env, 'schema_template.jinja2')
        return template.render(project_name=project_name, schema_name=schema_name, fields=[Field(n, t) for n, t in params.items()])


def make_model_template(project_name: str, init_args: Optional[Union[(str, Mapping[(str, str)])]]=None, input_args: Optional[Union[(str, Mapping[(str, str)])]]=None, target: Optional[TextIO]=None) -> Optional[str]:
    """
    Writes a template for implementations of the LeoModel ABC.

    :param project_name: The name of the project.
    :param init_args: The schema for the initialization arguments. Can be given as a dictionary of marshmallow.fields
                      types, or as a type name. If None, a placeholder will be written instead.
    :param input_args: The schema for the initialization arguments. Can be given as a dictionary of marshmallow.fields
                      types, or as a type name. If None, a placeholder will be written instead.
    :param target: A stream to write the output to. If None, the output is returned.

    :return: The template as a string if target is None, otherwise nothing.

    """
    init_param_schema = _schema_template(project_name, 'Init', init_args)
    input_param_schema = _schema_template(project_name, 'Input', input_args)
    template = _loader.load(_jinja_env, 'model_template.jinja2')
    result = template.render(project_name=project_name, init_param_schema=init_param_schema, input_param_schema=input_param_schema)
    return _write(result, target)


def make_api_template(project_name: str, target: Optional[TextIO]=None, prefix_dot: bool=True) -> Optional[str]:
    """
    Writes a basic API for accessing a BaseModel instance.

    :param project_name: The name of the project. There should be a definition available, as generated by make_model_template.
    :param target: A stream to write the output to. If None, the output is returned.
    :return: The API as a string if target is None, otherwise nothing.
    """
    return _make_template(template_name='api_template.jinja2', project_name=project_name, target=target, dot=('.' if prefix_dot else ''),
      use_elk=True)


def make_readme_template(project_name: str, target: Optional[TextIO]=None) -> Optional[str]:
    return _make_template(template_name='readme.jinja2', project_name=project_name, target=target)


def make_cli_template(project_name: str, target: Optional[TextIO]=None) -> Optional[str]:
    return _make_template(template_name='cli_template.jinja2', project_name=project_name, target=target)


def _make_template(template_name: str, project_name: str, target: Optional[TextIO]=None, **template_args) -> Optional[str]:
    template = _loader.load(_jinja_env, template_name)
    result = (template.render)(project_name=project_name, **template_args)
    return _write(result, target)


def _write(result: str, target: Optional[TextIO]=None) -> Optional[str]:
    if target:
        target.write(result)
    else:
        return result


def make_sphinx_index(project_name: str, target: Optional[TextIO]=None) -> Optional[str]:
    """
    Generate the index.rst file needed by Sphinx to make documentation for a new project.

    :param project_name: The name of the model used.
    :param target: A stream to write the index.rst file to. If None, the file will be returned as a string.

    :return: The index.rst file contents, except if the target parameter is given.

    """
    return _make_template(template_name='index.rst.jinja2', project_name=project_name, target=target)


def make_dockerfile(project_name: str, target: Optional[TextIO]=None) -> Optional[str]:
    """
    Generate a Dockerfile which can be used to run the API as a Flask app.

    :param project_name: The name of the project used.
    :param target: A stream to write the Dockerfile file to. If None, the file will be returned as a string.

    :return: The Dockerfile contents, except if the target parameter is given.

    """
    return _make_template('Dockerfile.jinja2', project_name, target)


def make_prometheus_config_template(project_name: str, target: Optional[TextIO]=None) -> Optional[str]:
    """
    Generate a prometheus.yml file which will be imported to prometheus docker image for registering api as a target

    :param project_name: The name of the project used.
    :param target: A stream to write the Dockerfile file to. If None, the file will be returned as a string.

    :return: prometheus.yml file contents, except if the target parameter is given.

    """
    return _make_template('prometheus.yml.jinja2', project_name, target)


def make_init_template(project_name: str, target: Optional[TextIO]=None) -> Optional[str]:
    """
    Generate a prometheus.yml file which will be imported to prometheus docker image for registering api as a target

    :param project_name: The name of the project used.
    :param target: A stream to write the Dockerfile file to. If None, the file will be returned as a string.

    :return: prometheus.yml file contents, except if the target parameter is given.

    """
    return _make_template('__init__.py.jinja2', project_name, target)


def _main():
    if len(sys.argv) < 2 or len(sys.argv) > 4:
        print('Usage: template.py <model-name> [init-parameters] [input-parameters]')
        exit(1)
    model_name = sys.argv[1]
    with open(f"{model_name}_model.py", 'w') as (f):
        init_args = sys.argv[2] if len(sys.argv) > 2 else None
        input_args = sys.argv[3] if len(sys.argv) > 3 else None
        make_model_template(model_name, init_args, input_args, f)
    with open(f"{model_name}_api.py", 'w') as (f):
        make_api_template(model_name, f)


if __name__ == '__main__':
    _main()