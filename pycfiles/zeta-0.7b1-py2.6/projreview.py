# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/projreview.py
# Compiled at: 2010-05-27 05:13:17
"""Controller module to manage project reviews"""
import logging, datetime as dt, re, os
from os.path import basename, join, splitext
from pylons import request, response, session, tmpl_context as c
from pylons.controllers.util import abort
from pylons import config
import simplejson as json
from authkit.authorize import PermissionError, PermissionSetupError, NotAuthenticatedError, NotAuthorizedError, middleware
from zeta.lib.base import BaseController, render
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.lib.view import viewcontext, viewuserpanes, viewprojectpanel, Anchor
import zeta.lib.helpers as h, zeta.lib.analytics as ca
from zeta.lib.constants import *
import zeta.lib.vcsadaptor as va
from zeta.lib.error import ZetaFormError
from zeta.comp.project import ProjectComponent
from zeta.comp.review import ReviewComponent
from zeta.comp.vcs import VcsComponent
from zeta.comp.forms import VForm
log = logging.getLogger(__name__)
compmgr = None
projcomp = None
revcomp = None
vcscomp = None
vf = None

def do_onetime():
    global compmgr
    global projcomp
    global revcomp
    global vcscomp
    global vf
    if compmgr == None:
        compmgr = config['compmgr']
        projcomp = ProjectComponent(compmgr)
        revcomp = ReviewComponent(compmgr)
        vcscomp = VcsComponent(compmgr)
        vf = VForm(compmgr)
    return


revwperm = {}
revwperm.update(dict([ (formname, h.HasPermname('REVIEW_CREATE')) for formname in [
 'createrev', 'configrev', 'revwauthor',
 'revwmoderator', 'addparts', 'delparts',
 'closerev', 'addrevtags', 'delrevtags',
 'addrevattachs', 'delrevattachs']
                     ]))
resurlname = lambda parts: ('/').join((['...'] if parts[-5:-4] else []) + parts[-4:])

def _urlrset(projectname='', id=''):
    """urls to be stuffed into the pages generated by this controller."""
    h.suburl_createrset = h.url_for(h.r_projrevwsets, projectname=projectname, form='submit', formname='createrset', view='js')
    h.suburl_updaterset = h.url_for(h.r_projrevwsets, projectname=projectname, form='submit', formname='updaterset', view='js')
    h.suburl_addtorset = h.url_for(h.r_projrevwsets, projectname=projectname, form='submit', formname='addtorset', view='js')
    h.suburl_delfromrset = h.url_for(h.r_projrevwsets, projectname=projectname, form='submit', formname='delfromrset', view='js')


def _url(projectname='', id=''):
    """urls to be stuffed into the pages generated by this controller."""
    h.url_revwcreate = h.url_for(h.r_projrevwcreate, projectname=projectname, form='request', formname='createrev')
    if id:
        h.url_revwtimeline = h.url_for(h.r_projrevwtline, projectname=projectname, id=id)
        h.url_revwwithsource = h.url_for(h.r_projrevwid, projectname=projectname, id=id, withsource=1)
        h.url_review = h.url_for(h.r_projrevwid, projectname=projectname, id=id)
        h.url_rssfeed = h.url_for(h.r_projrevwfeed, projectname=projectname, id=id)
    else:
        h.url_revwtimeline = h.url_for(h.r_projrevwtlines, projectname=projectname)
        h.url_rssfeed = h.url_for(h.r_projrevwfeeds, projectname=projectname)
    h.url_reviewsets = h.url_for(h.r_projrevwsets, projectname=projectname)
    h.url_revwattachs = h.url_for(h.r_projrevwattachs, projectname=projectname)
    h.url_addattachment = h.url_for(h.r_addattchments)
    h.url_revwcharts = h.url_for(h.r_projrevwcharts, projectname=projectname)
    h.suburl_createrev = h.url_for(h.r_projrevwcreate, projectname=projectname, form='submit', formname='createrev')
    h.suburl_configrev = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='configrev', view='js')
    h.suburl_revwauthor = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='revwauthor', view='js')
    h.suburl_revwmoderator = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='revwmoderator', view='js')
    h.suburl_closerev = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='closerev', view='js')
    h.suburl_addparts = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='addparts', view='js')
    h.suburl_delparts = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='delparts', view='js')
    h.suburl_addrevattachs = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='addrevattachs', view='js')
    h.suburl_delrevattachs = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='delrevattachs', view='js')
    h.suburl_addrevtags = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='addrevtags', view='js')
    h.suburl_delrevtags = h.url_for(h.r_projrevw, projectname=projectname, form='submit', formname='delrevtags', view='js')
    h.suburl_creatercmt = h.url_for(h.r_projrevwid, projectname=projectname, id=id, form='submit', formname='creatercmt', view='js')
    h.suburl_replyrcmt = h.url_for(h.r_projrevwid, projectname=projectname, id=id, form='submit', formname='replyrcmt', view='js')
    h.suburl_processrcmt = h.url_for(h.r_projrevwid, projectname=projectname, id=id, form='submit', formname='processrcmt', view='js')
    h.suburl_revwfav = h.url_for(h.r_projrevwid, projectname=projectname, id=id, form='submit', formname='revwfav', view='js')
    h.suburl_closerev = h.url_for(h.r_projrevwid, projectname=projectname, id=id, form='submit', formname='closerev', view='js')
    h.suburl_attachssummary = h.url_for(h.r_projrevwattachs, projectname=projectname, form='submit', formname='attachssummary', view='js')
    h.suburl_attachstags = h.url_for(h.r_projrevwattachs, projectname=projectname, form='submit', formname='attachstags', view='js')
    h.suburl_search = h.url_for(h.r_searchpage)
    h.url_revwlist = h.url_for(h.r_projrevw, projectname=projectname, jsonobj='revwlist', view='js')
    h.url_revwattachments = h.url_for(h.r_projrevwid, projectname=projectname, id=id, jsonobj='revwattach', view='js')
    h.url_revwtags = h.url_for(h.r_projrevwid, projectname=projectname, id=id, jsonobj='revwtag', view='js')
    h.url_revwrcomments = h.url_for(h.r_projrevwid, projectname=projectname, id=id, jsonobj='revwrcomments', view='js')


class ProjreviewController(BaseController):
    """Class to handle review page request"""

    def _optimized_fetch(self, controllername, projectname):
        """Fetch the project object and review object from the database in
        an optimized manner based on the action and json request"""
        c.project = projectname and projcomp.get_project(projectname, attrload=[
         'admin', 'logofile',
         'reviewsets'])

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        c.textobj = request.params.get('textobj', None)
        c.withsource = request.params.get('withsource', None)
        c.position = request.params.get('position', None)
        c.pathinfo = request.environ['PATH_INFO']
        routes_map = config['routes.map']
        (d, robj) = routes_map.routematch(c.pathinfo)
        projectname = d.get('projectname', None)
        self._optimized_fetch(robj.name, projectname)
        c.revwopts = revcomp.reviewopts(c.project)
        c.revwlist = [ [h.url_for(h.r_projrevwid, projectname=c.project.projectname, id=rid), resurlname(resource_url.split('/'))] for (rid, resource_url) in c.revwopts
                     ]
        c.rsetlist = [ [h.url_for(h.r_projrevwset, projectname=c.project.projectname, id=rs.id), rs.name] for rs in c.project.reviewsets
                     ]
        c.prjlogo = c.project and c.project.logofile and h.url_forattach(c.project.logofile.id)
        c.review = None
        if re.search('/r/', c.pathinfo):
            review_id = d.get('id', None)
            c.review = review_id and revcomp.get_review(int(review_id), attrload=[
             'tags', 'attachments',
             'author', 'moderator', 'participants']) or None
        c.searchfaces = [('project', projectname),
         ('review', '1')]
        return

    def _revwattachs(self, review):
        """For JSON consumption.
        Massage the review attachments"""
        attachs = dict([ (a.id, [a.id, h.url_for(h.r_attachdownl, id=str(a.id)), a.filename, a.summary]) for a in review.attachments
                       ])
        return attachs

    def _revwtags(self, review):
        """For JSON consumption.
        Massage the review tags"""
        return dict([ (t.tagname, t.tagname) for t in review.tags ])

    def _revwrcomments(self):
        """JSON: { review_comment_id : 'review_comment_id',
                   review_comment_id : 'review_comment_id',
                   items: [ { review_comment_id : rcmt.id,
                              position          : rcmt.position,
                              text              : rcmt.text,
                              html              : rcmt.texthtml,
                              commentby         : rcmt.commentby.username ,
                              commentbyurl      : userurl,
                              nature            : rcmt.nature.naturename,
                              action            : rcmt.action.actionname,
                              approved          : rcmt.approved
                              replies           : []
                              datestr           : rcmt.created_on },
                            ... ]
                 }"""

        def format_item(tup):
            d = {'review_comment_id': tup[0], 
               'position': tup[1], 
               'text': tup[2], 
               'html': tup[3], 
               'commentby': tup[6], 
               'commentbyurl': h.url_foruser(tup[6]), 
               'nature': tup[7] or '', 
               'action': tup[8] or '', 
               'approved': tup[4], 
               'datestr': h.utc_2_usertz(tup[5], c.authuser.timezone).strftime('%d %b %Y, %r')}
            return d

        c.position = c.position and int(c.position)
        rcomments = revcomp.reviewrcomments(c.review).values()
        items = []
        while rcomments:
            rcomment = rcomments.pop(0)
            d_rcmt = format_item(rcomment)
            d_rcmt.setdefault('replies', [ format_item(rrcomment) for rrcomment in rcomment[(-1)] ])
            if c.position != None and d_rcmt['position'] != c.position:
                continue
            items.append(d_rcmt)

        json = h.todojoreadstore(items, lambda v: v, id='review_comment_id', label='review_comment')
        return (
         json, items)

    @h.authorize(h.HasPermname('REVIEW_VIEW'))
    def _json_revwlist(self):
        """JSON: { id   : 'id',
                   label: 'review_id',
                   items: [ { 'id'           : r.id,
                              'href'         : href,
                              'resource_url' : r.resource_url,
                              'reviewset'    : r.reviewset.name,
                              'rshref'       : href,
                              'version'      : r.version,
                              'author'       : r.author.username,
                              'moderator'    : r.moderator.username,
                              'comments'     : comments,
                              'olderby'      : olderby }
                            ... ]
                 }"""

        def format_item(tup):
            href = h.url_for(h.r_projrevwid, projectname=c.project.projectname, id=tup[0])
            rshref = tup[3] and h.url_for(h.r_projrevwset, projectname=c.project.projectname, id=tup[3]) or ''
            olderby = dt.datetime.utcnow().toordinal() - tup[7].toordinal()
            d = {'id': tup[0], 
               'href': href, 
               'resource_url': tup[1], 
               'reviewset': tup[2] or '', 
               'rshref': rshref, 
               'version': tup[4], 
               'author': tup[5], 
               'moderator': tup[6], 
               'comments': revcomp.countcomments(tup[0]), 
               'olderby': h.olderby(olderby)}
            return d

        json = h.todojoreadstore(revcomp.reviewlist(c.project).values(), format_item, id='id', label='vcs_id')
        return json

    @h.authorize(h.HasPermname('REVIEW_VIEW'))
    def _json_revwattach(self):
        """JSON: { id : [ id, url, filename, summary ], ... } """
        return json.dumps(c.review and self._revwattachs(c.review) or {})

    @h.authorize(h.HasPermname('REVIEW_VIEW'))
    def _json_revwtag(self):
        """JSON: { tagname : tagname, ... } """
        return json.dumps(c.review and self._revwtags(c.review) or {})

    @h.authorize(h.HasPermname('REVIEW_VIEW'))
    def _json_revwrcomments(self):
        """JSON: { review_comment_id : 'review_comment_id',
                   review_comment_id : 'review_comment_id',
                   items: [ { review_comment_id : rcmt.id,
                              position          : rcmt.position,
                              text              : rcmt.text,
                              html              : rcmt.texthtml,
                              commentby         : rcmt.commentby.username ,
                              commentbyurl      : userurl,
                              nature            : rcmt.nature.naturename,
                              action            : rcmt.action.actionname,
                              approved          : rcmt.approved
                              replies           : []
                              datestr           : rcmt.created_on },
                            ... ]
                 }"""
        (json, items) = self._revwrcomments()
        return json

    @h.authorize(h.HasPermname('REVIEW_VIEW'))
    def index(self, environ, projectname):
        """List all project review"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=4)
        viewuserpanes(projectname=projectname)
        _url(projectname)
        if c.form == 'submit' and c.formname in revwperm and not h.authorized(revwperm[c.formname]):
            return 'Do not have %s permission !!' % revwperm[c.formname]
        else:
            if c.form in ('submit', 'request'):
                try:
                    vf.process(request, c, user=c.authuser)
                except ZetaFormError, (errmsg,):
                    response.status_int = 400
                    return errmsg

            c.title = 'Review:list'
            c.revweditable = h.authorized(h.HasPermname('REVIEW_CREATE'))
            if c.form == 'submit':
                c.title = '-Skip-'
            html = ''
            if c.view == 'js' and c.formname in ('addrevattachs', ):
                html = IFRAME_RET
            elif c.view == 'js' and c.jsonobj:
                func = getattr(self, '_json_' + c.jsonobj, None)
                if func:
                    html = func()
            elif c.view != 'js':
                c.projusers = sorted(list(set(projcomp.projusernames(c.project) + [
                 c.project.admin.username])))
                html = render('/derived/projects/reviewindex.html')
            return html

    @h.authorize(h.HasPermname('REVIEW_CREATE'))
    def create(self, environ, projectname):
        """Create a new project review"""
        userscomp = environ['authkit.users']
        cfok = lambda cf: cf['mime_type'] != 'text/directory' and cf['changetype'] != 'deleted'
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=4)
        viewuserpanes(projectname=projectname)
        _url(projectname)
        _urlrset(projectname, id)
        if c.form in ('submit', 'request'):
            if not h.authorized(h.HasPermname('REVIEW_CREATE')):
                return 'Do not have REVIEW_CREATE permission !!'
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        c.forsrc = request.params.getall('rurl')
        c.forversion = request.params.get('ver', None)
        c.forversion = c.forversion and int(c.forversion)
        vcsid = request.params.get('vcsid', None)
        c.vcs = vcsid and vcscomp.get_vcs(int(vcsid))
        c.vrep = c.vcs and va.open_repository(c.vcs)
        if c.vrep:
            c.changedfiles = c.vrep.changedfiles(c.vcs.rooturl, revstart=c.forversion - 1, revend=c.forversion)
            c.forsrc = []
            for cf in c.changedfiles:
                cfok(cf) and c.forsrc.append(join(c.vcs.rooturl, cf['repos_path'].lstrip('/')))

        c.projusers = sorted(list(set(projcomp.projusernames(c.project) + [
         c.project.admin.username])))
        c.usernames = sorted(userscomp.usernames)
        c.title = 'CreateReview'
        c.rsets = [ [rs.id, rs.name] for rs in c.project.reviewsets ]
        if c.form == 'submit' and c.formname == 'createrev':
            c.title = '-Skip-'
            h.redirect_to(h.r_projrevwcreate, projectname=projectname, form='request', formname='createrev')
        html = render('/derived/projects/reviewcreate.html')
        return html

    @h.authorize(h.HasPermname('REVIEW_VIEW'))
    def review(self, environ, projectname, id):
        """Create a new project review"""
        compmgr = config['compmgr']
        userscomp = environ['authkit.users']
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=4)
        viewuserpanes(projectname=projectname)
        _url(projectname, id)
        if c.form == 'submit' and c.formname in revwperm and not h.authorized(revwperm[c.formname]):
            return 'Do not have %s permission !!' % revwperm[c.formname]
        else:
            if c.form in ('submit', 'request'):
                try:
                    vf.process(request, c, user=c.authuser)
                except ZetaFormError, (errmsg,):
                    response.status_int = 400
                    return errmsg

            if not c.jsonobj:
                c.projusers = sorted(list(set(projcomp.projusernames(c.project) + [
                 c.project.admin.username])))
                c.usernames = userscomp.usernames
                c.naturenames = revcomp.naturenames
                c.actionnames = revcomp.actionnames
                c.revweditable = h.authorized(h.HasPermname('REVIEW_CREATE'))
                c.att_editable = c.revweditable
                c.tag_editable = c.revweditable
                c.revwcmtable = c.authuser in [
                 c.review.author, c.review.moderator] + c.review.participants
                c.revwmoderated = c.authuser == c.review.moderator
                c.revwauthored = c.authuser == c.review.author
                c.title = 'Review:%s' % id
                c.isuserfavorite = revcomp.isfavorite(c.authuser.id, c.review.id)
            c.revwsource = None
            if c.withsource:
                (c.revwsource, c.sourcediff) = revcomp.guess_revwsource(c.review)
                c.diffsec = c.sourcediff and c.sourcediff.pop(0)
                c.diffpri = c.sourcediff and c.sourcediff.pop(0)
            c.attachs = self._revwattachs(c.review)
            c.tags = self._revwtags(c.review)
            html = ''
            if c.jsonobj and c.view == 'js':
                func = getattr(self, '_json_' + c.jsonobj, None)
                if func:
                    html = func()
            elif c.view != 'js':
                (c.items_revwrcomments, items) = self._revwrcomments()
                c.cnt_comments = len(items)
                c.cnt_pending = len(filter(lambda x: not x['approved'], items))
                if c.revwsource:
                    c.cmtsatpos = [ d['position'] for d in items ]
                    html = render('/derived/projects/reviewsource.html')
                else:
                    html = render('/derived/projects/review.html')
            return html

    @h.authorize(h.HasPermname(['REVIEW_VIEW']))
    def reviewset(self, environ, projectname, id=''):
        """Review set"""
        compmgr = config['compmgr']
        userscomp = environ['authkit.users']
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=4)
        viewuserpanes(projectname=projectname)
        _url(projectname, '')
        _urlrset(projectname, id)
        if c.form == 'submit' and not h.authorized(h.HasPermname(['REVIEW_CREATE'])):
            return 'Do not have %s permission !!' % revwperm[c.formname]
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        c.projectname = projectname
        if c.view == 'js':
            html = ''
        elif id:
            c.reviews = revcomp.get_review(attrload=['reviewset'])
            c.reviewset = revcomp.get_reviewset(int(id), attrload=[
             'reviews'], attrload_all=[
             'reviews.author',
             'reviews.moderator',
             'reviews.participants',
             'reviews.comments'])
            c.revwloner = [ [r.id, resurlname(r.resource_url.split('/'))] for r in c.reviews if not r.reviewset
                          ]
            c.revwinrset = [ [r.id, resurlname(r.resource_url.split('/'))] for r in c.reviewset.reviews
                           ]
            c.title = 'reviewset:%s' % c.reviewset.name
            html = render('/derived/projects/reviewset.html')
        else:
            c.reviewsets = c.project.reviewsets
            c.title = '%s:reviewsets' % projectname
            html = render('/derived/projects/reviewset.html')
        return html

    @h.authorize(h.HasPermname(['REVIEW_VIEW']))
    def timeline(self, environ, projectname, id=''):
        """Aggregate activities under project review or individual review"""
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=4)
        viewuserpanes(projectname=projectname)
        _url(projectname, id=id)
        c.project = c.project or projcomp.get_project(projectname)
        c.review = id and revcomp.get_review(int(id)) or None
        c.revweditable = h.authorized(h.HasPermname('REVIEW_CREATE'))
        routeargs = {'projectname': projectname}
        if id:
            routeargs.update({'id': id})
            h.tline_controller(c, h.r_projrevwtline, routeargs, 'review', fromoff, logid, dir, c.review)
            c.title = 'Review:%s:timeline' % c.review.id
        else:
            h.tline_controller(c, h.r_projrevwtlines, routeargs, [
             'review', 'project'], fromoff, logid, dir, c.project)
            c.title = 'Review:timeline'
        (c.datatline, c.startdt) = h.tlineplot(c.logs[:])
        return render('/derived/projects/reviewtline.html')

    def feed(self, environ, projectname, id=''):
        """Aggregate activities under project review or individual review"""
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        c.project = c.project or projcomp.get_project(projectname)
        c.review = id and revcomp.get_review(int(id)) or None
        routeargs = {'projectname': projectname}
        if id:
            routeargs.update({'id': id})
            h.tline_controller(c, h.r_projrevwtline, routeargs, 'review', 1, None, None, c.review)
            title = '%s-revw:%s' % (projectname, id)
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for review, %s in project %s' % (
             c.review.resource_url, projectname)
        else:
            h.tline_controller(c, h.r_projrevwtlines, routeargs, [
             'review', 'project'], 1, None, None, c.project)
            title = '%s:review' % projectname
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for review, in project %s' % projectname
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    @h.authorize(h.HasPermname(['REVIEW_VIEW']))
    def charts(self, environ, projectname):
        """Charts and analytics for project tickets"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=4)
        viewuserpanes(projectname=projectname)
        _url(projectname)
        c.ra = ca.get_analyticobj('reviews')
        c.chart27_data = getattr(c.ra, 'chart27_data', {}).get(c.project.id, [])
        c.chart27_usrs = getattr(c.ra, 'chart27_usrs', {}).get(c.project.id, [])
        c.title = 'ReviewCharts'
        html = render('/derived/projects/reviewcharts.html')
        return html

    @h.authorize(h.HasPermname(['REVIEW_VIEW']))
    def attachs(self, environ, projectname):
        """Action to present attachment page for reviews under project 
        `projectname`"""
        viewcontext(id=id)
        viewprojectpanel(projectname=projectname, activetab=4)
        viewuserpanes(id=id)
        _url(projectname=projectname)
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.view != 'js':
            attachments = revcomp.attachments(c.project)
            c.attachments = {}
            for rkey in attachments:
                adict = attachments[rkey]
                attachs = [ [aid] + adict[aid][:-1] + [(', ').join(adict[aid][(-1)])] + [h.url_for(h.r_attachdownl, id=aid)] for aid in adict
                          ]
                c.attachments[rkey[1]] = attachs

            c.editable = h.authorized(h.HasPermname('REVIEW_CREATE'))
            c.title = 'ReviewAttachs'
            html = render('/derived/projects/revwattachs.html')
        else:
            html = ''
        return html

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()