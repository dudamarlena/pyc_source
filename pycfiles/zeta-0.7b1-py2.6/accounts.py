# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/accounts.py
# Compiled at: 2010-05-12 12:36:04
"""Controller module to manage site accounts."""
from __future__ import with_statement
import logging, os
from hashlib import sha1
from pylons import request, response
from pylons import config
from pylons import session
from pylons import tmpl_context as c
from pylons.controllers.util import abort
from authkit.permissions import no_authkit_users_in_environ
from zeta.ccore import Component
from zeta.config.routing import r_accounts, r_home
from zeta.model import meta
from zeta.lib.error import *
from zeta.lib.base import BaseController, render
from zeta.lib.constants import *
from zeta.lib.view import viewcontext
import zeta.lib.helpers as h
from zeta.lib.mailclient import resetpasswd
from zeta.lib.error import ZetaFormError
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.comp.attach import AttachComponent
from zeta.comp.forms import VForm, FormCreateUser
log = logging.getLogger(__name__)
compmgr = None
vf = None

def do_onetime():
    global compmgr
    global vf
    if compmgr == None:
        compmgr = config['compmgr']
        vf = VForm(compmgr)
    return


def _url():
    """urls that will be stuffed into the pages generated by this
    controller."""
    h.url_tos = h.url_for(h.r_tos)
    if c.digest:
        h.suburl_userreg = h.url_for(h.r_accounts, action='newaccount', digest=c.digest, form='submit', formname='createuser')
    else:
        h.suburl_userreg = h.url_for(h.r_accounts, action='newaccount', form='submit', formname='createuser')
    h.suburl_forgotpass = h.url_for(h.r_accounts, action='forgotpass', form='submit', formname='forgotpass')
    h.suburl_resetpass = h.url_for(h.r_accounts, action='resetpass', emailid=getattr(c, 'emailid', ''), form='submit', formname='resetpass')


class AccountsController(BaseController):
    """Controller for User Account managment.
        Registration
        SignIn
        SignOut
    """

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.digest = request.params.get('digest', '')
        c.emailid = request.params.get('emailid', '')
        c.usernames = []
        return

    @h.authorize(h.UserIn(['anonymous']))
    def newaccount(self, environ):
        """Create a new user account. This action will be invoked for
        registration form and subsequently submission of registration form."""
        userscomp = environ['authkit.users']
        viewcontext()
        _url()
        regrbyinvite = h.str2bool(c.sysentries['regrbyinvite'])
        c.uinv = None
        if not regrbyinvite:
            c.authorized = True
        elif c.digest:
            c.uinv = userscomp.invbydigest(c.digest)
            c.authorized = bool(c.uinv)
        else:
            c.uinv = None
            c.authorized = False
        c.usernames = userscomp.usernames
        try:
            vf.process(request, c)
        except ZetaFormError, (errmsg,):
            h.flash(ERROR_FLASH + errmsg)
            (
             h.redirect_to(r_accounts, action='newaccount', form='request', formname='createuser'),)
        else:
            if c.form == 'submit':
                username = request.POST.get('username', None)
                c.uinv and userscomp.acceptedby(unicode(username), c.uinv)
                h.flash(MESSAGE_FLASH + 'User successfully created. Try signing in.')
                h.redirect_to(r_accounts, action='signin')

        return render('/derived/accounts/register.html')

    def signin(self, environ):
        """Signin an existing user. And create the session for the user."""
        if c.authusername == 'anonymous':
            abort(401)
        else:
            h.flash.pop_messages()
            h.redirect_to(r_home)

    def signout(self, environ):
        """Logout the user. This action is just a place holder. The actual
        action is perfromed by AuthKit, including the removal of user
        session."""
        h.redirect_to(r_home)

    def forgotpass(self, environ):
        """Handle the case where the user has forgotten the password."""
        userscomp = environ['authkit.users']
        viewcontext()
        _url()
        c.errormsg = ''
        if c.form == 'submit' and c.formname == 'forgotpass':
            emailid = request.POST.get('emailid', None)
            user = userscomp.userbyemailid(unicode(emailid))
            if user:
                digest = sha1(user.username + user.emailid + user.password).hexdigest()
                fullurl = h.fullurl(environ['HTTP_HOST'], environ['SCRIPT_NAME'], h.url_forresetp(digest, emailid))
                resetpasswd(emailid, fullurl, c.sysentries['sitename'])
            else:
                c.errormsg = 'Invalid emailid'
        return render('/derived/accounts/forgotpass.html')

    def resetpass(self, environ):
        """Reset user password by validating emailid against `digest`"""
        userscomp = environ['authkit.users']
        viewcontext()
        _url()
        try:
            vf.process(request, c, emailid=c.emailid)
        except ZetaFormError, (errmsg,):
            h.flash(ERROR_FLASH + errmsg)
        else:
            if c.form == 'submit':
                h.flash(MESSAGE_FLASH + 'Password successfully reseted. Try signing in.')
                h.redirect_to(r_accounts, action='signin')

        if c.emailid and c.digest:
            user = userscomp.userbyemailid(unicode(c.emailid))
            refdigest = sha1(user.username + user.emailid + user.password).hexdigest()
            c.allowreset = refdigest == c.digest
            return render('/derived/accounts/resetpass.html')

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()