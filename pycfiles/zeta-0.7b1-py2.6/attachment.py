# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/attachment.py
# Compiled at: 2010-07-07 01:28:59
"""Controller module to handle attachment related request."""
import os, logging
from mimetypes import guess_type
from paste.urlparser import StaticURLParser
from pylons import request, response, session, tmpl_context as c
from pylons import config
from pylons.controllers.util import abort
from zeta.lib.base import BaseController, render
from zeta.lib.constants import *
import zeta.lib.helpers as h, zeta.lib.analytics as ca
from zeta.lib.view import viewcontext, viewuserpanes
from zeta.lib.error import ZetaFormError
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.comp.forms import VForm
from zeta.comp.attach import AttachComponent
log = logging.getLogger(__name__)
compmgr = None
attcomp = None
vf = None

def do_onetime():
    global attcomp
    global compmgr
    global vf
    if compmgr == None:
        compmgr = config['compmgr']
        attcomp = AttachComponent(compmgr)
        vf = VForm(compmgr)
    return


def _url(maxid=None):
    """urls that will to be stuffed into the pages generated by this
    controller."""
    h.url_addattachment = h.url_for(h.r_addattchments)
    h.url_allattachments = h.url_for(h.r_attachments, all='1')
    h.url_attachments = h.url_for(h.r_attachments)
    h.url_attachcharts = h.url_for(h.r_attachcharts)
    h.url_attachtline = h.url_for(h.r_attachtimeline)
    h.url_rssfeed = h.url_for(h.r_attachfeeds)
    if maxid:
        h.url_attachpages = [ (i, h.url_for(h.r_attachments, fromid=i)) for i in range(1, maxid, 100)
                            ]
    h.suburl_addattachs = h.url_for(h.r_addattchments, form='submit', formname='addattachs')
    h.suburl_attachssummary = h.url_for(h.r_attachments, form='submit', formname='attachssummary', view='js')
    h.suburl_attachstags = h.url_for(h.r_attachments, form='submit', formname='attachstags', view='js')


class AttachmentController(BaseController):
    """Actions to handle user pages"""

    def __before__(self, environ=None):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        c.fromid = request.params.get('fromid', None)
        c.all = request.params.get('all', None)
        return

    @h.authorize(h.ValidUser())
    def index(self, environ):
        """Action to list all attachment"""
        viewcontext(id=id)
        viewuserpanes(id=id)
        _url(attcomp.latestattachs().id)
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.view != 'js':
            try:
                c.fromid = c.fromid and int(c.fromid)
                c.fromid -= 1
            except:
                c.fromid = None
            else:
                limit = 100 if c.all == None else None
                attachments = attcomp.attachments(offset=c.fromid, limit=limit)
                c.attachassc = attcomp.attachassc()
                attachs = [ [aid] + attachments[aid][:-1] + [(', ').join(attachments[aid][(-1)])] + [h.url_for(h.r_attachdownl, id=aid)] for aid in attachments
                          ]
                c.attachments = {'all-attachments': attachs}
                c.editable = h.authorized(h.ValidUser(strict='True'))
                c.aa = ca.get_analyticobj('attachs')
                c.ua = ca.get_analyticobj('users')
                c.la = ca.get_analyticobj('license')
                c.pa = ca.get_analyticobj('projects')
                c.ta = ca.get_analyticobj('tickets')
                c.ra = ca.get_analyticobj('reviews')
                c.wa = ca.get_analyticobj('wiki')
                c.title = 'Attachments'
                html = render('/derived/attachs/index.html')
        else:
            html = ''
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def add(self, environ):
        """Add a new attachment"""
        viewcontext(id=id)
        viewuserpanes(id=id)
        _url()
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        c.title = 'AddAttachs'
        html = render('/derived/attachs/add.html')
        return html

    @h.authorize(h.ValidUser())
    def attach(self, environ, id):
        """Provide the attachment's content"""
        attach = attcomp.get_attach(int(id))
        if attach:
            return str(attach.content)
        else:
            response.status_int = 400
            return 'No attachment by id %s' % id

    @h.authorize(h.ValidUser())
    def download(self, environ, id):
        """Make the browser to download the attachment."""
        attach = attcomp.downloadattach(int(id))
        if attach:
            response.headers['Content-disposition'] = str('attachment; filename="%s"' % attach.filename)
        else:
            response.status_int = 400
            return 'No attachment by id %s' % id
        return str(attach.content)

    @h.authorize(h.ValidUser())
    def charts(self, environ):
        """Timeline on attachments."""
        viewcontext(id=id)
        viewuserpanes(id=id)
        _url()
        c.ta = ca.get_analyticobj('tags')
        c.aa = ca.get_analyticobj('attachs')
        c.chart2_data = getattr(c.aa, 'chart2_data', [])
        c.chart2_fcnt = getattr(c.aa, 'chart2_fcnt', 0)
        c.chart2_payld = getattr(c.aa, 'chart2_payld', 0)
        c.chart3_data = getattr(c.aa, 'chart3_data', [])
        c.chart4_data = getattr(c.ta, 'chart4_data', [])
        c.chart4_tags = getattr(c.ta, 'chart4_tags', [])
        c.chart5_data = getattr(c.aa, 'chart5_data', [])
        date = c.chart5_data and c.chart5_data[0][0][3] or None
        c.chart5_frmdt = h.date2jsdate(date, ['2000', '0', '1'])
        c.chart5_data = [ [ l[:3] for l in logs ] for logs in c.chart5_data ]
        c.title = 'Attachment:Charts'
        html = render('/derived/attachs/charts.html')
        return html

    @h.authorize(h.ValidUser())
    def timeline(self, environ):
        """Timeline on attachments."""
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext(id=id)
        viewuserpanes(id=id)
        _url()
        c.links = [
         '', '', '']
        h.tline_controller(c, h.r_attachtimeline, {}, 'attachment', fromoff, logid, dir, modelobj=None)
        c.title = 'AttachTimeline'
        c.timeline = True
        html = render('/derived/attachs/tline.html')
        return html

    def feed(self, environ):
        """feed on attachments."""
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        h.tline_controller(c, h.r_attachtimeline, {}, 'attachment', 1, None, None, modelobj=None)
        title = 'AttachTimeline'
        link = 'http://%s%s' % (host, script)
        descr = 'Timeline for Attachments'
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    def _serve_file(self, root, path):
        """Call Paste's FileApp (a WSGI application) to serve the file
        at the specified path"""
        static = StaticURLParser(root)
        request.environ['PATH_INFO'] = '/%s' % path
        response.headers['Content-Disposition'] = str('attachment; filename="%s"' % 'test.txt')
        return static(request.environ, self.start_response)

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()