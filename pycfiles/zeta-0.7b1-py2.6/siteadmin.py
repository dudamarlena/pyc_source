# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/siteadmin.py
# Compiled at: 2010-05-17 04:42:01
"""Controller module to manage pages that are accessible only to the
site administrator
"""
import logging
from pylons import request, response, session, tmpl_context as c
from pylons import config
from pylons.controllers.util import abort
from zeta.model import meta
from zeta.lib.base import BaseController, render
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.lib.view import viewcontext, viewuserpanes
import zeta.lib.helpers as h
from zeta.lib.error import ZetaFormError
from zeta.auth.perm import permissions
from zeta.comp.system import SystemComponent
from zeta.comp.project import ProjectComponent
from zeta.comp.license import LicenseComponent
from zeta.comp.forms import VForm
log = logging.getLogger(__name__)
compmgr = None
syscomp = None
liccomp = None
projcomp = None
vf = None

def do_onetime():
    global compmgr
    global liccomp
    global projcomp
    global syscomp
    global vf
    if compmgr == None:
        compmgr = config['compmgr']
        liccomp = LicenseComponent(compmgr)
        syscomp = SystemComponent(compmgr)
        projcomp = ProjectComponent(compmgr)
        vf = VForm(compmgr)
    return


def _url():
    """urls to be stuffed into the pages generated by this controller."""
    h.url_crlic = h.url_for(h.r_liccreate)
    h.url_uploadsitelogo = h.url_for(h.r_sitelogo, form='request', formname='sitelogo')
    h.url_sitecharts = h.url_for(h.r_sitecharts)
    h.url_sitetline = h.url_for(h.r_sitetline)
    h.url_rssfeed = h.url_for(h.r_sitefeeds)
    h.suburl_system = h.url_for(h.r_siteadmin, form='submit', formname='system', view='js')
    h.suburl_sitelogo = h.url_for(h.r_sitelogo, form='submit', formname='sitelogo')
    h.suburl_enusers = h.url_for(h.r_siteadmin, form='submit', formname='userenb', view='js')
    h.suburl_disusers = h.url_for(h.r_siteadmin, form='submit', formname='userdis', view='js')
    h.suburl_enprojects = h.url_for(h.r_siteadmin, form='submit', formname='prjenb', view='js')
    h.suburl_disprojects = h.url_for(h.r_siteadmin, form='submit', formname='prjdis', view='js')
    h.suburl_adduserperms = h.url_for(h.r_siteadmin, form='submit', formname='adduserperms', view='js')
    h.suburl_deluserperms = h.url_for(h.r_siteadmin, form='submit', formname='deluserperms', view='js')
    h.suburl_createpg = h.url_for(h.r_siteadmin, form='submit', formname='createpg', view='js')
    h.suburl_updatepg = h.url_for(h.r_siteadmin, form='submit', formname='updatepg', view='js')
    h.suburl_addpntopg = h.url_for(h.r_siteadmin, form='submit', formname='addpntopg', view='js')
    h.suburl_delpnfrompg = h.url_for(h.r_siteadmin, form='submit', formname='delpnfrompg', view='js')
    h.suburl_rmlic = h.url_for(h.r_license, form='submit', formname='rmlic', view='js')


class SiteadminController(BaseController):
    """Site administration via web"""

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        return

    def _json_pgmap(self):
        """JSON : [ { id   : 'pg_id', 
                      label: 'perm_group',
                      items: [ { pg_id      : id,
                                 perm_group : perm_group,
                                 permnames  : permnames,
                                 x_permnames: ^permnames }
                               ... ]
                    }"""
        userscomp = config['userscomp']
        json = h.todojoreadstore(userscomp.pgmap, lambda k, v: {'pg_id': k, 'perm_group': v[0], 'permnames': v[1], 
           'x_permnames': v[2]}, id='pg_id', label='perm_group')
        return json

    @h.authorize(h.HasPermname('SITE_ADMIN'))
    def index(self, environ):
        """Action to handle siteadministration"""
        userscomp = environ['authkit.users']
        viewcontext()
        viewuserpanes()
        _url()
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.jsonobj not in ('pgmap', ):
            licfields = sorted(liccomp.licensefields(), key=lambda x: x[1])
            h.url_licenses = {}
            c.licenselist = []
            for (licid, licname, projects) in licfields:
                licurl = h.url_for(h.r_licenseid, id=str(licid))
                editurl = h.url_for(h.r_licenseid, id=str(licid), form='request', formname='updatelic')
                rmurl = h.url_for(h.r_licenseid, id=str(licid), form='submit', formname='rmlic')
                h.url_licenses.setdefault(licid, [licurl, editurl, rmurl])

            c.licenselist = [ [licid, licname] + h.url_licenses[licid] + [ [p[1], h.url_forproject(p[1])] for p in projects ] for (licid, licname, projects) in licfields
                            ]
            c.permnames = sorted(userscomp.perm_names)
            (c.usernames, userperms, c.userstatus) = userscomp.siteadmin()
            defuser = sorted(userperms.keys())[0]
            c.defuserperms = [defuser, sorted(userperms[defuser][0]),
             userperms[defuser][1]]
            c.projectstatus = projcomp.projectstatus
            c.liceditable = True
            c.title = 'SiteAdmin'
        html = ''
        if c.view == 'js' and c.jsonobj:
            func = getattr(self, '_json_' + c.jsonobj)
            if func:
                html = func()
        elif c.view != 'js':
            html = render('/derived/siteadmin/siteadmin.html')
        return html

    @h.authorize(h.HasPermname('SITE_ADMIN'))
    def uploadlogo(self, environ):
        """Action to upload site logo file"""
        userscomp = environ['authkit.users']
        viewcontext()
        viewuserpanes()
        _url()
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.form == 'submit':
            h.redirect_to(h.r_siteadmin)
        c.title = 'SiteLogo'
        html = render('/derived/siteadmin/sitelogo.html')
        return html

    @h.authorize(h.HasPermname('SITE_ADMIN'))
    def timeline(self, environ):
        """Complete timeline history"""
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext()
        viewuserpanes()
        _url()
        c.links = [
         '', '', '']
        h.tline_controller(c, h.r_sitetline, {}, [], fromoff, logid, dir)
        c.title = 'SiteTimeline'
        (c.datatline, c.startdt) = h.tlineplot(c.logs[:])
        html = render('/derived/siteadmin/tline.html')
        return html

    @h.authorize(h.HasPermname('SITE_ADMIN'))
    def charts(self, environ):
        """Charts for site"""
        pass

    def feed(self, environ):
        """feed for site"""
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        h.tline_controller(c, h.r_sitetline, {}, [], 1, None, None, modelobj=None)
        title = 'SiteTimeline'
        link = 'http://%s%s' % (host, script)
        descr = 'Timeline for Site'
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()