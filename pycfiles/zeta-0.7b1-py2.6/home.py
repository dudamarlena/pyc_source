# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/home.py
# Compiled at: 2010-07-08 23:24:58
"""Controller module to handle home page."""
import logging, os
from pylons import request, response
from pylons import config
from pylons import session
from pylons import tmpl_context as c
from pylons.controllers.util import abort
from authkit.authorize import NotAuthorizedError
import xml.etree.cElementTree as et
from zeta.ccore import Component
from zeta.lib.base import BaseController, render
from zeta.lib.view import viewcontext, viewuserpanes
import zeta.lib.helpers as h
from zeta.lib.constants import *
from zeta.lib.error import ZetaFormError
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.comp.forms import VForm
from zeta.comp.system import SystemComponent
PUBLICFILES = [
 'sitelogo']
log = logging.getLogger(__name__)
compmgr = None
vf = None
syscomp = None

def do_onetime():
    global compmgr
    global syscomp
    global vf
    if compmgr == None:
        compmgr = config['compmgr']
        vf = VForm(compmgr)
        syscomp = SystemComponent(compmgr)
    return


def _url_sw(url):
    """urls that will be stuffed into the pages generated by this
    controller."""
    h.url_swpage = h.url_for(h.r_staticwiki, url=url)
    h.url_editsw = h.url_for(h.r_staticwiki, url=url, editsw='1', form='request', formname='editsw')
    h.url_refreshsw = h.url_for(h.r_staticwiki, url=url, refresh='1')
    h.suburl_search = h.url_for(h.r_searchpage, staticwiki='1')
    h.suburl_editsw = h.url_for(h.r_staticwiki, url=url, form='submit', formname='editsw', view='js')
    h.url_swpreview = h.url_for(h.r_staticwiki, url=url, textobj='swpreview', view='text')


class HomeController(BaseController):
    """All the pages returned by this controller are static wiki pages"""

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        c.textobj = request.params.get('textobj', None)
        c.editsw = request.params.get('editsw', None)
        c.refresh = request.params.get('refresh', None)
        c.sweditable = h.authorized(h.HasPermname('STATICWIKI_CREATE'))
        c.searchfaces = [('staticwiki', '1')]
        c.swurl = None
        c.swiki = None
        c.swhtml = ''
        return

    @h.authorize(h.HasPermname('STATICWIKI_CREATE'))
    def _text_swpreview(self):
        """Translate the text (wiki markup) into HTML and send back to the
        browser"""
        o = h.Preview()
        setattr(o, 'text', request.POST.get('text', ''))
        o.translate = h.hitch(o, h.Preview, h.translate, cacheattr='text')
        return o.translate()

    def _publicfile(self, url):
        """Check for public file, which are not present and so gets redirected
        here"""
        if url in PUBLICFILES:
            return True
        return False

    @h.authorize(h.ValidUser())
    def index(self, environ):
        """Static Wiki - Home page."""
        viewcontext()
        viewuserpanes()
        _url_sw('frontpage')
        swiki = syscomp.get_staticwiki('frontpage')
        c.title = config['zeta.sitename']
        c.swhtml = swiki.texthtml
        return render('/derived/home/index.html')

    def tos(self, environ):
        """Static Wiki - Terms of Service"""
        viewcontext()
        viewuserpanes()
        _url_sw('tos')
        swiki = syscomp.get_staticwiki('tos')
        c.swhtml = swiki.texthtml
        return render('/derived/home/index.html')

    @h.authorize(h.ValidUser())
    def titleindex(self, environ):
        """Static Wiki - titleindex"""
        viewcontext()
        viewuserpanes()
        _url_sw('')
        c.swikis = [ (sw.path, sw.text or '') for sw in syscomp.get_staticwiki()
                   ]
        c.swikis = sorted(c.swikis, key=lambda sw: sw[0])
        html = render('/derived/home/titleindex.html')
        return html

    @h.authorize(h.ValidUser())
    def staticwiki(self, environ, url):
        """Static Wiki - every thing else"""
        viewcontext()
        viewuserpanes()
        _url_sw(url)
        c.urldir = url and url[(-1)] == '/'
        c.swurl = url
        c.swiki = syscomp.get_staticwiki(url)
        c.title = c.swurl.split('/')[(-1)]
        if c.form in ('submit', 'request') and not h.authorized(h.HasPermname('STATICWIKI_CREATE')):
            return 'Do not have STATICWIKI_CREATE permission !!'
        else:
            if c.form in ('submit', 'request'):
                try:
                    vf.process(request, c, user=c.authuser)
                except ZetaFormError, (errmsg,):
                    response.status_int = 400
                    return errmsg

            html = ''
            if c.jsonobj and c.view == 'js':
                func = getattr(self, '_json_' + c.jsonobj, None)
                if func:
                    html = func()
                    c.title = '-Skip-'
            elif c.textobj and c.view == 'text':
                func = getattr(self, '_text_' + c.textobj, None)
                if func:
                    html = func()
                    c.title = '-Skip-'
            elif self._publicfile(c.swurl):
                html = ''
            elif c.urldir:
                c.swikis = filter(None, map(lambda x: x[0] and (x[1], x[2]), [ h.checksuburl(sw.path, c.swurl) + [sw.text] for sw in syscomp.get_staticwiki()
                                                                             ]))
                html = render('/derived/home/index.html')
            elif c.editsw and c.swiki:
                html = render('/derived/home/index.html')
                c.title = '%s:edit' % c.title
            elif c.swiki:
                c.refresh and syscomp.set_staticwiki(c.swiki.path, c.swiki.text)
                c.swhtml = c.swiki.texthtml
                html = render('/derived/home/index.html')
            elif h.authorized(h.ValidUser(strict='True')):
                c.swiki = syscomp.set_staticwiki(unicode(url), '', byuser=c.authuser)
                c.editsw = 1
                html = render('/derived/home/index.html')
            else:
                raise NotAuthorizedError('You are allowed to create this resource.')
                html = render('/derived/home/index.html')
            return html

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()