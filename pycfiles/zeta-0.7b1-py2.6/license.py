# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/license.py
# Compiled at: 2010-07-06 12:02:27
"""Controller module to manage license pages."""
import logging
from pylons import request, response, session, tmpl_context as c
from pylons import config
from pylons.controllers.util import abort
import simplejson as json
from authkit.authorize import PermissionError, PermissionSetupError, NotAuthenticatedError, NotAuthorizedError, middleware
from zeta.lib.base import BaseController, render
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.lib.view import viewcontext, viewuserpanes
from zeta.lib.constants import *
import zeta.lib.helpers as h, zeta.lib.analytics as ca
from zeta.lib.error import ZetaFormError
from zeta.comp.license import LicenseComponent
from zeta.comp.timeline import TimelineComponent
from zeta.comp.forms import VForm
log = logging.getLogger(__name__)
compmgr = None
liccomp = None
vf = None

def do_onetime():
    global compmgr
    global liccomp
    global vf
    if compmgr == None:
        compmgr = config['compmgr']
        liccomp = LicenseComponent(compmgr)
        vf = VForm(compmgr)
    return


def _url(id=''):
    """urls that will to be stuffed into the pages generated by this
    controller."""
    h.url_crlic = h.url_for(h.r_liccreate)
    if id:
        h.url_lictimeline = h.url_for(h.r_lictimeline, id=id)
        h.url_rssfeed = h.url_for(h.r_licfeed, id=id)
    else:
        h.url_lictimeline = h.url_for(h.r_lictimelines)
        h.url_rssfeed = h.url_for(h.r_licfeeds)
    h.url_licattachs = h.url_for(h.r_licattachs)
    h.url_addattachment = h.url_for(h.r_addattchments)
    h.url_licensecharts = h.url_for(h.r_liccharts)
    h.url_tagcloud = h.url_for(h.r_tags)
    h.suburl_crlic = h.url_for(h.r_liccreate, form='submit', formname='createlic')
    h.suburl_uplic = h.url_for(h.r_licenseid, id=id or '', form='submit', formname='updatelic', view='js')
    h.suburl_rmlicid = h.url_for(h.r_licenseid, id=id or '', form='submit', formname='rmlic')
    h.suburl_rmlic = h.url_for(h.r_license, form='submit', formname='rmlic', view='js')
    h.suburl_addlicattachs = h.url_for(h.r_licenseid, id=id, form='submit', formname='addlicattachs', view='js')
    h.suburl_dellicattachs = h.url_for(h.r_licenseid, id=id, form='submit', formname='dellicattachs', view='js')
    h.suburl_addlictags = h.url_for(h.r_licenseid, id=id, form='submit', formname='addlictags', view='js')
    h.suburl_dellictags = h.url_for(h.r_licenseid, id=id, form='submit', formname='dellictags', view='js')
    h.suburl_attachssummary = h.url_for(h.r_licattachs, form='submit', formname='attachssummary', view='js')
    h.suburl_attachstags = h.url_for(h.r_licattachs, form='submit', formname='attachstags', view='js')
    h.suburl_search = h.url_for(h.r_searchpage, license='1')
    h.url_licattachments = h.url_for(h.r_licenseid, id=id, jsonobj='licattach', view='js')
    h.url_lictags = h.url_for(h.r_licenseid, id=id, jsonobj='lictag', view='js')


class LicenseController(BaseController):
    """License pages"""

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        c.searchfaces = [
         ('license', '1')]
        c.license = None
        return

    def _lictable(self, licfields):
        """Create a list of license to be displayed as a table"""
        licensetable = []
        _licfields = sorted(licfields, key=lambda x: x[0])
        for (licid, licname, projects) in _licfields:
            licensetable.append([
             licid, licname] + [h.url_for(h.r_licenseid, id=str(licid)), h.url_for(h.r_licenseid, id=str(licid), form='request', formname='updatelic'), h.url_for(h.r_licenseid, id=str(licid), form='submit', formname='rmlic')] + [ [p[1], h.url_forproject(p[1])] for p in projects ])

        return licensetable

    def _selectoptions(self):
        """Compose the select-option list for all the licenses in DB"""
        licfields = liccomp.licensefields()
        licensenames = []
        licenselist = []
        for (licid, licname, projects) in licfields:
            licensenames.append(licname)
            licenselist.append((h.url_for(h.r_licenseid, id=licid), licname))

        return (
         sorted(licensenames), licenselist, licfields)

    def _licattachs(self, license):
        """For JSON consumption.
        Massage the license attachments"""
        attachs = dict([ (a.id, [a.id, h.url_for(h.r_attachdownl, id=str(a.id)), a.filename, a.summary]) for a in license.attachments
                       ])
        return attachs

    def _lictags(self, license):
        """For JSON consumption.
        Massage the license tags"""
        return dict([ (t.tagname, t.tagname) for t in license.tags ])

    @h.authorize(h.HasPermname('LICENSE_VIEW'))
    def _json_licattach(self):
        """JSON: { id : [ id, url, filename, summary ], ... }"""
        return json.dumps(c.license and self._licattachs(c.license) or {})

    @h.authorize(h.HasPermname('LICENSE_VIEW'))
    def _json_lictag(self):
        """JSON: { tagname : tagname, ... }"""
        return json.dumps(c.license and self._lictags(c.license) or {})

    @h.authorize(h.HasPermname(['LICENSE_CREATE']))
    def liccreate(self, environ):
        """Action for all license pages."""
        viewcontext()
        viewuserpanes()
        _url()
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        (c.licensenames, c.licenselist, licfields) = self._selectoptions()
        c.title = c.form == 'request' and '-Skip-' or 'CreateLicense'
        html = render('/derived/license/liccreate.html')
        return html

    @h.authorize(h.HasPermname(['LICENSE_VIEW']))
    def license(self, environ, id=''):
        """Action for all license pages."""
        viewcontext(id=id)
        viewuserpanes(id=id)
        _url(id)
        (licensenames, licenselist, licfields) = self._selectoptions()
        liceditable = h.authorized(h.HasPermname(['LICENSE_CREATE']))
        if c.form == 'submit' and not liceditable:
            raise NotAuthorizedError('Only site administrator can access the page')
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, id=id and int(id), user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.formname == 'rmlic' and id:
            remaining = [ licid for (licid, _, projects) in licfields if licid != int(id)
                        ]
            if remaining:
                licid = remaining[0]
                h.redirect_to(h.url_for(h.r_licenseid, id=licid))
            else:
                h.redirec_to(h.url_crlic)
        elif c.formname == 'updatelic':
            h.redirect_to(h.url_for(h.r_licenseid, id=id))
        c.licenselist = licenselist
        c.licensenames = licensenames
        c.licprojects = []
        c.licensetable = []
        if id:
            id = int(id)
            c.license = liccomp.get_license(int(id), attrload=['attachments', 'tags'])
            licprojects = []
            [ licprojects.append((p, h.url_forproject(p))) for p in liccomp.licprojects(c.license.id)[c.license.id] if p
            ]
            c.licprojects = licprojects
            c.attachs = self._licattachs(c.license)
            c.tags = self._lictags(c.license)
            c.title = '%s...(%s)' % (c.license.licensename[:9], id)
        else:
            c.licensetable = self._lictable(licfields)
            c.attachs = {}
            c.tags = {}
            c.title = 'LicenseTable'
        c.att_editable = liceditable
        c.tag_editable = liceditable
        c.liceditable = liceditable
        html = ''
        if c.view == 'js' and c.formname in ('addlicattachs', ):
            html = IFRAME_RET
        elif c.view == 'js' and c.jsonobj:
            func = getattr(self, '_json_' + c.jsonobj)
            if func and c.license:
                html = func()
        elif c.view != 'js':
            html = render('/derived/license/license.html')
        return html

    @h.authorize(h.HasPermname(['LICENSE_VIEW']))
    def charts(self, environ, id=''):
        """License analytics chart"""
        viewcontext(id=id)
        viewuserpanes(id=id)
        _url(id)
        c.la = ca.get_analyticobj('license')
        c.ta = ca.get_analyticobj('tags')
        c.chart6_data = getattr(c.la, 'chart6_data', [])
        c.chart7_data = getattr(c.ta, 'chart7_data', [])
        c.chart7_tags = getattr(c.ta, 'chart7_tags', [])
        c.title = 'License:Charts'
        html = render('/derived/license/charts.html')
        return html

    @h.authorize(h.HasPermname(['LICENSE_VIEW']))
    def timeline(self, environ, id=''):
        """Action for all license pages."""
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext(id=id)
        viewuserpanes(id=id)
        _url(id)
        (c.licensenames, c.licenselist, licfields) = self._selectoptions()
        c.links = [
         '', '', '']
        c.license = None
        if id:
            id = int(id)
            licenseid = [ licid for (licid, _, projects) in licfields if licid == id
                        ][0]
            c.license = liccomp.get_license(licenseid)
            h.tline_controller(c, h.r_lictimeline, {'id': id}, ['license'], fromoff, logid, dir, c.license)
            c.title = '%s...:timeline' % c.license.licensename[:7]
        else:
            h.tline_controller(c, h.r_lictimelines, {}, 'license', fromoff, logid, dir, c.license)
            c.title = 'LicenseTimeline'
        (c.datatline, c.startdt) = h.tlineplot(c.logs[:])
        c.timeline = True
        html = render('/derived/license/lictline.html')
        return html

    def feed(self, environ, id=''):
        """Action for all license pages."""
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        c.license = id and liccomp.get_license(int(id)) or None
        if id:
            h.tline_controller(c, h.r_lictimeline, {}, 'license', 1, None, None, c.license)
            title = '%s(%s):timeline' % (c.license.licensename, id)
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for license %s' % c.license.licensename
        else:
            h.tline_controller(c, h.r_lictimelines, {}, 'license', 1, None, None, c.license)
            title = 'LicenseTimeline'
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for License'
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    @h.authorize(h.HasPermname(['LICENSE_VIEW']))
    def attachs(self, environ):
        """Action to present attachment page for all license"""
        viewcontext(id=id)
        viewuserpanes(id=id)
        _url()
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.view != 'js':
            attachments = liccomp.attachments()
            c.attachments = {}
            for lkey in attachments:
                adict = attachments[lkey]
                attachs = [ [aid] + adict[aid][:-1] + [(', ').join(adict[aid][(-1)])] + [h.url_for(h.r_attachdownl, id=aid)] for aid in adict
                          ]
                c.attachments[lkey[1]] = attachs

            c.editable = h.authorized(h.HasPermname('LICENSE_CREATE'))
            c.title = 'LicenseAttachs'
            html = render('/derived/license/licattachs.html')
        else:
            html = ''
        return html

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()