# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/projects.py
# Compiled at: 2010-07-07 02:04:32
"""Controller module to manage project pages."""
import logging, datetime as dt, re
from pytz import timezone, all_timezones, utc
from pylons import request, response, session, tmpl_context as c
from pylons.controllers.util import abort
from pylons import config
import simplejson as json
from authkit.authorize import PermissionError, PermissionSetupError, NotAuthenticatedError, NotAuthorizedError, middleware
from zeta.lib.base import BaseController, render
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.lib.view import viewcontext, viewuserpanes, viewprojectpanel, Anchor
import zeta.lib.helpers as h
from zeta.lib.constants import *
import zeta.lib.analytics as ca
from zeta.lib.error import ZetaFormError, ZetaProjectError
from zeta.comp.project import ProjectComponent
from zeta.comp.license import LicenseComponent
from zeta.comp.ticket import TicketComponent
from zeta.comp.wiki import WikiComponent
from zeta.comp.license import LicenseComponent
from zeta.comp.forms import VForm
from zeta.comp.timeline import TimelineComponent
log = logging.getLogger(__name__)
compmgr = None
liccomp = None
projcomp = None
tckcomp = None
wikicomp = None
tlcomp = None
vf = None

def do_onetime():
    global compmgr
    global liccomp
    global projcomp
    global tckcomp
    global tlcomp
    global vf
    global wikicomp
    if compmgr == None:
        compmgr = config['compmgr']
        liccomp = LicenseComponent(compmgr)
        projcomp = ProjectComponent(compmgr)
        tckcomp = TicketComponent(compmgr)
        wikicomp = WikiComponent(compmgr)
        tlcomp = TimelineComponent(compmgr)
        vf = VForm(compmgr)
    return


def _url(project=None):
    """urls to be stuffed into the pages generated by this controller."""
    projectname = project and project.projectname or ''
    h.url_prj = h.url_for(h.r_projecthome, projectname=projectname)
    h.url_projroadmap = h.url_for(h.r_projroadmap, projectname=projectname)
    h.url_projmounts = h.url_for(h.r_projmounts, projectname=projectname)
    h.url_license = h.url_for(h.r_license)
    h.url_projtimeline = h.url_for(h.r_projtline, projectname=projectname)
    h.url_projadmtimeline = h.url_for(h.r_projadmtline, projectname=projectname)
    h.url_translatefp = h.url_for(h.r_projecthome, projectname=projectname, translate=1)
    h.url_crlic = h.url_for(h.r_liccreate)
    h.url_projattachs = h.url_for(h.r_projattachs, projectname=projectname)
    h.url_projdownloads = h.url_for(h.r_projdownlds, projectname=projectname)
    h.url_addattachment = h.url_for(h.r_addattchments)
    h.url_projectcharts = h.url_for(h.r_projcharts, projectname=projectname)
    h.url_tagcloud = h.url_for(h.r_tags)
    h.suburl_projectinfo = h.url_for_mform(h.r_projadmin, projectname=projectname, form='submit', formname=[
     'updateprj', 'prjexp', 'prjml', 'prjirc'], view='js')
    h.suburl_createprj = h.url_for(h.r_projcreate, form='submit', formname='createprj')
    h.suburl_addprjlogo = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='addprjlogo', view='js')
    h.suburl_delprjlogo = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='delprjlogo', view='js')
    h.suburl_addprjicon = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='addprjicon', view='js')
    h.suburl_delprjicon = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='delprjicon', view='js')
    h.suburl_createpcomp = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='createpcomp', view='js')
    h.suburl_updatepcomp = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='updatepcomp', view='js')
    h.suburl_rmpcomp = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='rmpcomp', view='js')
    h.suburl_createmstn = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='createmstn', view='js')
    h.suburl_updatemstn = h.url_for_mform(h.r_projadmin, projectname=projectname, form='submit', formname=['updatemstn', 'mstnclose'], view='js')
    h.suburl_rmmstn = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='rmmstn', view='js')
    h.suburl_createver = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='createver', view='js')
    h.suburl_updatever = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='updatever', view='js')
    h.suburl_rmver = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='rmver', view='js')
    h.suburl_addprjteam = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='addprjteam', view='js')
    h.suburl_delprjteam = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='delprjteam', view='js')
    h.suburl_addteamperms = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='addteamperms', view='js')
    h.suburl_delteamperms = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='delteamperms', view='js')
    h.suburl_addprjattachs = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='addprjattachs', view='js')
    h.suburl_delprjattachs = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='delprjattachs', view='js')
    h.suburl_addprjtags = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='addprjtags', view='js')
    h.suburl_delprjtags = h.url_for(h.r_projadmin, projectname=projectname, form='submit', formname='delprjtags', view='js')
    h.suburl_projfav = h.url_for(h.r_projecthome, projectname=projectname, form='submit', formname='projfav', view='js')
    h.suburl_attachssummary = h.url_for(h.r_projattachs, projectname=projectname, form='submit', formname='attachssummary', view='js')
    h.suburl_attachstags = h.url_for(h.r_projattachs, projectname=projectname, form='submit', formname='attachstags', view='js')
    h.suburl_search = h.url_for(h.r_searchpage)
    h.url_prjlrefresh = h.url_for(h.r_projecthome, projectname=projectname, jsonobj='projectlogo', view='js')
    h.url_prjirefresh = h.url_for(h.r_projecthome, projectname=projectname, jsonobj='projecticon', view='js')
    h.url_pcomplist = h.url_for(h.r_projadmin, projectname=projectname, jsonobj='pcomplist', view='js')
    h.url_mstnlist = h.url_for(h.r_projadmin, projectname=projectname, jsonobj='mstnlist', view='js')
    h.url_verlist = h.url_for(h.r_projadmin, projectname=projectname, jsonobj='verlist', view='js')
    h.url_projectteams = h.url_for(h.r_projadmin, projectname=projectname, jsonobj='projectteams', view='js')
    h.url_teamperms = h.url_for(h.r_projadmin, projectname=projectname, jsonobj='teamperms', view='js')
    h.url_prjattachments = h.url_for(h.r_projadmin, projectname=projectname, jsonobj='prjattach', view='js')
    h.url_prjtags = h.url_for(h.r_projadmin, projectname=projectname, jsonobj='prjtag', view='js')


class ProjectsController(BaseController):
    """Class to handle project page request"""

    def _optimized_fetch(self, controllername, projectname):
        """Fetch the project object (details) from the database in an optimized
        manner based on the action and json request"""
        if c.jsonobj == 'teamperms':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'logofile', 'projteamperms.teamtype'], attrload_all=[
             'projteamperms.permgroup.perm_names'])
        elif c.jsonobj == 'projectteams':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'logofile'], attrload_all=[
             'team.user', 'team.teamtype'])
        elif c.jsonobj == 'pcomplist':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'logofile'], attrload_all=[
             'components.owner'])
        elif c.jsonobj == 'mstnlist':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'logofile', 'milestones'])
        elif c.jsonobj == 'verlist':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'logofile', 'versions'])
        elif controllername == 'projadmin':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'logofile', 'iconfile', 'license',
             'project_info', 'mailinglists',
             'ircchannels', 'admin',
             'projteamperms.teamtype'], attrload_all=[
             'team.user', 'team.teamtype',
             'projteamperms.permgroup.perm_names'])
        elif controllername == 'projectmilestone':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'milestones', 'logofile'])
            c.mstntickets = tckcomp.mstntickets(c.project)
        elif controllername == 'projectroadmap':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'milestones', 'logofile'])
            c.mstntickets = tckcomp.mstntickets(c.project)
        elif controllername == 'projectcharts':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'milestones', 'versions',
             'components', 'logofile'])
            c.mstntickets = tckcomp.mstntickets(c.project)
        elif controllername == 'projecthome':
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'mailinglists', 'ircchannels',
             'license', 'logofile', 'tags',
             'admin'], attrload_all=[
             'team.user'])
        else:
            c.project = projectname and projcomp.get_project(projectname, attrload=[
             'logofile'])

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        c.textobj = request.params.get('textobj', None)
        c.id = request.params.get('id', None)
        c.translate = request.params.get('translate', False) and True
        c.pathinfo = request.environ['PATH_INFO']
        routes_map = config['routes.map']
        (d, robj) = routes_map.routematch(c.pathinfo)
        projectname = d.get('projectname', None)
        self._optimized_fetch(robj.name, projectname)
        c.prjlogo = c.project and c.project.logofile and h.url_forattach(c.project.logofile.id)
        c.searchfaces = [
         (
          'project', projectname)]
        return

    def _prjattachs(self, project):
        """For JSON consumption. Massage the project attachments"""
        attachs = dict([ (a.id, [a.id, h.url_for(h.r_attachdownl, id=str(a.id)), a.filename, a.summary]) for a in project.attachments
                       ])
        return attachs

    def _prjtags(self, project):
        """For JSON consumption. Massage the project tags"""
        return dict([ (t.tagname, t.tagname) for t in c.project.tags ])

    def _projlogo(self, project):
        f = project.logofile
        if f:
            logoattach = {f.id: [f.id,
                    h.url_for(h.r_attachdownl, id=str(f.id)),
                    f.filename,
                    f.summary]}
        else:
            logoattach = {}
        return logoattach

    def _projicon(self, project):
        f = project.iconfile
        if f:
            iconattach = {f.id: [f.id,
                    h.url_for(h.r_attachdownl, id=str(f.id)),
                    f.filename,
                    f.summary]}
        else:
            iconattach = {}
        return iconattach

    @h.authorize(h.ValidUser(strict='True'))
    def _json_myprojects(self, environ):
        """JSON : { id    : ''
                    label : ''
                    item  : [ { projectnames : myprojectnames } ]
                  }"""
        return h.todojoreadstore([h.myprojects()], lambda v: {'projectnames': v})

    @h.authorize(h.ValidUser())
    def _json_projectnames(self, environ):
        """JSON : { id    : ''
                    label : ''
                    item  : [ { projectnames : projectnames } ]
                  }"""
        return h.todojoreadstore([projcomp.projectnames], lambda v: {'projectnames': v})

    @h.authorize(h.SiteAdmin())
    def _json_projectstatus(self, environ):
        """JSON: { id   : 'status',
                   label: 'status',
                   items: [ { status: status, projectnames: projectnames },
                            ... ]
                 }"""
        return h.todojoreadstore(projcomp.projectstatus, lambda k, v: {'status': k, 'projectnames': v}, id='status', label='status')

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def _json_projectlogo(self, environ):
        """JSON: { id : [ id, url, filename, summary } """
        return json.dumps(c.project and self._projlogo(c.project) or {})

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def _json_projecticon(self, environ):
        """JSON: { id : [ id, url, filename, summary } """
        return json.dumps(c.project and self._projicon(c.project) or {})

    @h.authorize(h.HasPermname('PROJECT_VIEW'))
    def _json_prjattach(self, environ):
        """JSON: { id : [ id, url, filename, summary ], ... } """
        return json.dumps(c.project and self._prjattachs(c.project) or {})

    @h.authorize(h.HasPermname('PROJECT_VIEW'))
    def _json_prjtag(self, environ):
        """JSON: { tagname : tagname, ... } """
        return json.dumps(c.project and self._prjtags(c.project) or {})

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def _json_pcomplist(self, environ):
        """JSON: { id   : 'id',
                   label: 'id',
                   items: [ { id           : component.id,
                              componentname: component.componentname,
                              owner        : component.owner 
                              description  : component.description },
                            ... ]
                 }"""
        pcomps = []
        if c.project:
            pcomps = [ [pcomp.id, pcomp.componentname, pcomp.owner.username, pcomp.description] for pcomp in c.project.components
                     ]
        return h.todojoreadstore(pcomps, lambda v: {'id': v[0], 'componentname': v[1], 'owner': v[2], 
           'description': v[3]}, id='id', label='id')

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def _json_pcomptag(self, environ):
        """JSON: [ tagname, ... ] """
        return json.dumps(c.id and [ t.tagname for t in projcomp.get_component(int(c.id)).tags
                                   ] or [])

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def _json_mstnlist(self, environ):
        """JSON: { id   : 'id',
                   label: 'id',
                   items: [ { id            : milestone.id,
                              milestone_name: milestone.milestone_name,
                              due_date      : milestone.due_date ,
                              description   : milestone.description,
                              status        : milestone.status,
                              closing_remark: milestone.closing_remark },
                            ... ]
                 }"""
        mstns = []
        if c.project:
            mstns = []
            for mstn in c.project.milestones:
                status = mstn.completed and 'completed' or mstn.cancelled and 'cancelled' or ''
                if mstn.due_date:
                    due_date = mstn.due_date.astimezone(h.timezone(c.authuser.timezone))
                    dd = [due_date.year, due_date.month, due_date.day]
                else:
                    dd = []
                mstns.append([
                 mstn.id, mstn.milestone_name, dd,
                 mstn.description, status, mstn.closing_remark])

        json = h.todojoreadstore(mstns, lambda v: {'id': v[0], 'milestone_name': v[1], 'due_date': v[2], 
           'description': v[3], 'status': v[4], 
           'closing_remark': v[5]}, id='id', label='id')
        return json

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def _json_mstntag(self, environ):
        """JSON: [ tagname, ... ] """
        return json.dumps(c.id and [ t.tagname for t in projcomp.get_milestone(int(c.id)).tags
                                   ] or [])

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def _json_verlist(self, environ):
        """JSON: { id   : 'id',
                   label: 'id',
                   items: [ { id          : version.id,
                              version_name: version.version_name,
                              description : version.description },
                            ... ]
                 }"""
        vers = []
        if c.project:
            vers = [ [ver.id, ver.version_name, ver.description] for ver in c.project.versions ]
        json = h.todojoreadstore(vers, lambda v: {'id': v[0], 'version_name': v[1], 'description': v[2]}, id='id', label='id')
        return json

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def _json_vertag(self, environ):
        """JSON: [ tagname, ... ] """
        return json.dumps(c.id and [ t.tagname for t in projcomp.get_version(int(c.id)).tags
                                   ] or [])

    @h.authorize(h.ProjectAdmin())
    def _json_projectteams(self, environ):
        """JSON: { id   : 'team',
                   label: 'team',
                   items: [ { team        : team_typename,
                              usersids    : [[ pt.id, pt.user.username ], ... ],
                              x_usernames : [ username, ... ] },
                            ... ]
                 }"""
        userscomp = environ['authkit.users']
        teams = projcomp.projectteams(project=c.project, teamnames=projcomp.teams, usernames=sorted(userscomp.usernames), noquery=True)
        teams.pop(projcomp.team_nomember)
        json = h.todojoreadstore(teams, lambda k, v: {'team': k, 'usersids': v[0], 'x_usernames': v[1]}, id='team', label='team')
        return json

    @h.authorize(h.ProjectAdmin())
    def _json_teamperms(self, environ):
        """JSON: { id   : 'team',
                   label: 'team',
                   items: [ { team        : team_typename,
                              permsids    : [[ ptp.id, permgroup ] ... ],
                              x_permission: [ permission, ... ] },
                            ... ]
                 }"""
        teamperms = projcomp.teamperms(project=c.project, teamnames=projcomp.teams, noquery=True)
        json = h.todojoreadstore(teamperms, lambda k, v: {'team': k, 'permsids': v[0], 'x_permissions': v[1]}, id='team', label='team')
        return json

    @h.authorize(h.ProjectAdmin())
    def _json_prjperms(self, environ):
        """JSON: { id   : 'username',
                   label: 'username',
                   items: [ { username    : projuser,
                              permsids    : [[ pup.id, permgroup ] ... ],
                              x_permission: [ permission, ... ] },
                            ... ]
                 }"""
        json = h.todojoreadstore(projcomp.projectuserperms(project=c.project), lambda k, v: {'username': k, 'permsids': v[0], 'x_permissions': v[1]}, id='username', label='username')
        return json

    @h.authorize(h.ValidUser(strict='True'))
    def create(self, environ):
        """Create and host a new project"""
        viewcontext()
        viewuserpanes()
        _url()
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        c.licensenames = sorted([ l[1] for l in liccomp.licensefields() ])
        c.projectnames = projcomp.projectnames
        c.title = 'CreateProject'
        c.liceditable = h.authorized(h.HasPermname(['LICENSE_CREATE']))
        html = ''
        if c.jsonobj:
            func = getattr(self, '_json_' + c.jsonobj)
            if func:
                html = func(environ)
        elif c.form == 'submit':
            h.redirect_to(h.r_projcreate, form='request', formname='createprj')
        else:
            html = render('/derived/projects/create.html')
        return html

    @h.authorize(h.ValidUser())
    def index(self, environ):
        """List all the projects."""
        viewcontext()
        viewuserpanes()
        _url()
        if not c.jsonobj:
            c.projects = projcomp.get_project(attrload=[
             'admin', 'project_info'])
            h.url_projects = dict([ (p.id, h.url_for(h.r_projecthome, projectname=p.projectname)) for p in c.projects
                                  ])
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        c.title = 'ProjectIndex'
        html = ''
        if c.jsonobj:
            func = getattr(self, '_json_' + c.jsonobj)
            if func:
                html = func(environ)
        else:
            html = render('/derived/projects/index.html')
        return html

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def projecthome(self, environ, projectname):
        """Project main-page for `projectname`"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname)
        viewuserpanes(projectname=projectname)
        _url(project=c.project)
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        c.projectteams = {}
        [ c.projectteams.setdefault(t.teamtype.team_type, []).append(t.user.username) for t in c.project.team
        ]
        w = wikicomp.get_wiki(unicode(h.url_forwiki(c.project.projectname, PROJHOMEPAGE)), attrload=[
         'tablemap'])
        c.fpwcnt = w and wikicomp.get_content(w, translate=True)
        if c.fpwcnt:
            if c.translate or c.fpwcnt.text and not c.fpwcnt.texthtml:
                c.fphtml = c.fpwcnt.translate()
            else:
                c.fphtml = c.fpwcnt.texthtml
        else:
            c.fphtml = ''
        editable = h.authorized(h.ProjectAdmin())
        c.att_editable = editable
        c.tag_editable = editable
        c.isfavorite = projcomp.checkfavorite(c.project.id, c.authuser.id)
        c.tags = self._prjtags(c.project)
        c.title = projectname
        html = ''
        if c.jsonobj and c.view == 'js':
            func = getattr(self, '_json_' + c.jsonobj)
            if func:
                html = func(environ)
        elif c.view != 'js':
            html = render('/derived/projects/project.html')
        return html

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def roadmap(self, environ, projectname):
        """Milestones and report cards for project 'projectname'"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname)
        viewuserpanes(projectname=projectname)
        _url(project=c.project)
        c.project = c.project or projcomp.get_project(projectname, attrload=[
         'milestones'])
        c.tck_typenames = tckcomp.tcktypenames
        c.tck_statusnames = tckcomp.tckstatusnames
        c.tck_severitynames = tckcomp.tckseveritynames
        c.title = projectname + ':roadmap'
        c.chart13_data = []
        c.mstnresolved = {}
        for m in c.project.milestones:
            (bystatus, bytypes, byseverity, byowner, c.mstnresolved[m.id]) = h.chartify_mstn(c.mstntickets[m.id])
            c.chart13_data.append([
             m.id,
             [ {'name': k, 'y': v} for (k, v) in bytypes.iteritems()
             ],
             [ {'name': k, 'y': v} for (k, v) in byseverity.iteritems()
             ],
             [ {'name': k, 'y': v} for (k, v) in bystatus.iteritems()
             ],
             [ {'name': k, 'y': v} for (k, v) in byowner.iteritems()
             ]])

        return render('/derived/projects/projroadmap.html')

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def milestone(self, environ, projectname, id=None):
        """Individual milestone"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname)
        viewuserpanes(projectname=projectname)
        _url(project=c.project)
        if not id:
            h.redirect_to(h.r_projroadmap, projectname=projectname)
        c.project = c.project or projcomp.get_project(projectname)
        c.milestone = projcomp.get_milestone(int(id))
        m = c.milestone
        if c.milestone and c.milestone.project_id != c.project.id:
            h.redirect_to(h.r_projroadmap, projectname=projectname)
        c.tck_typenames = tckcomp.tcktypenames
        c.tck_statusnames = tckcomp.tckstatusnames
        c.tck_severitynames = tckcomp.tckseveritynames
        c.title = c.milestone.milestone_name
        c.chart13_data = []
        (bystatus, bytypes, byseverity, byowner, c.mstnresolved) = h.chartify_mstn(c.mstntickets[m.id])
        c.chart13_data = [
         m.id,
         [ {'name': k, 'y': v} for (k, v) in bytypes.iteritems()
         ],
         [ {'name': k, 'y': v} for (k, v) in byseverity.iteritems()
         ],
         [ {'name': k, 'y': v} for (k, v) in bystatus.iteritems()
         ],
         [ {'name': k, 'y': v} for (k, v) in byowner.iteritems()
         ]]
        return render('/derived/projects/projmilestone.html')

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def timeline(self, environ, projectname):
        """Aggregate all the activities under the project"""
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname)
        viewuserpanes(projectname=projectname)
        _url(project=c.project)
        c.project = c.project or projcomp.get_project(projectname)
        c.alllogs = tlcomp.fetchprojlogs(c.project, limit=h.TLCOUNT + 2, id=logid, direction=dir)
        c.logs = c.alllogs[:100]
        c.links = ['', '', '']
        if fromoff > h.TLCOUNT:
            c.links[0] = h.url_for(h.r_projtline, projectname=projectname, fromoff=1)
            c.links[1] = h.url_for(h.r_projtline, projectname=projectname, logid=c.logs[0].id, dir='newer', fromoff=fromoff - h.TLCOUNT)
        if len(c.alllogs) >= h.TLCOUNT:
            c.links[2] = h.url_for(h.r_projtline, projectname=projectname, logid=c.logs[(-1)].id, dir='older', fromoff=fromoff + h.TLCOUNT)
        c.fromoff = fromoff
        c.tooff = fromoff + len(c.logs)
        c.title = projectname + ':timeline'
        h.url_rssfeed = h.url_for(h.r_projfeed, projectname=projectname)
        (c.datatline, c.startdt) = h.tlineplot(c.logs[:])
        return render('/derived/projects/projtline.html')

    def feed(self, environ, projectname):
        """Aggregate all the activities under the project, and provide them as
        feed"""
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        c.alllogs = tlcomp.fetchprojlogs(c.project, limit=h.TLCOUNT + 1, id=None)
        c.logs = c.alllogs[:100]
        title = projectname + ':timeline'
        link = 'http://%s%s' % (host, script)
        descr = 'Timeline for project, %s' % projectname
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    @h.authorize(h.ProjectAdmin())
    def admin(self, environ, projectname):
        """Project administration page"""
        userscomp = environ['authkit.users']
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=5)
        viewuserpanes(projectname=projectname)
        _url(project=c.project)
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg
            except ZetaProjectError, (errmsg,):
                response.status_int = 400
                return errmsg

        if not c.jsonobj:
            c.licensenames = sorted(liccomp.licensenames)
            c.projusers = sorted(projcomp.projusernames(c.project, noquery=True) + [
             c.project.admin.username])
            c.usernames = userscomp.usernames
            c.teamtypes_p = projcomp.teams
            c.teamtypes = c.teamtypes_p[:]
            c.teamtypes.remove(projcomp.team_nomember)
            c.title = projectname + ':admin'
            c.logo_editable = True
            c.icon_editable = True
            c.tag_editable = True
            c.logoattach = self._projlogo(c.project)
            c.iconattach = self._projicon(c.project)
            c.pcomplist = []
            c.mstnlist = []
            c.verlist = []
        html = ''
        if c.view == 'js' and c.formname in ('addprjlogo', 'addprjicon', 'addprjattachs'):
            html = IFRAME_RET
        elif c.view == 'js' and c.jsonobj:
            func = getattr(self, '_json_' + c.jsonobj, None)
            if func:
                html = func(environ)
        elif c.view == 'js':
            html = ''
        else:
            c.projectteams = projcomp.projectteams(project=c.project, teamnames=c.teamtypes_p, usernames=c.usernames, noquery=True)
            c.isfavorite = projcomp.checkfavorite(c.project.id, c.authuser.id)
            deftt = sorted(c.projectteams.keys())[0]
            c.defteamtype = deftt
            c.teamusers = map(lambda pr: pr[1], c.projectteams[deftt][0])
            c.x_teamusers = c.projectteams[deftt][1]
            c.teamperms = projcomp.teamperms(project=c.project, teamnames=c.teamtypes_p, noquery=True)
            c.teampgroups = map(lambda pr: pr[1], c.teamperms[deftt][0])
            c.x_teampgroups = c.teamperms[deftt][1]
            html = render('/derived/projects/admin.html')
        return html

    @h.authorize(h.ProjectAdmin())
    def timelineadmin(self, environ, projectname):
        """Aggregate all the activities under the project"""
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=5)
        viewuserpanes(projectname=projectname)
        _url(project=c.project)
        c.project = c.project or projcomp.get_project(projectname)
        routeargs = {'projectname': projectname}
        h.tline_controller(c, h.r_projadmtline, routeargs, 'project', fromoff, logid, dir, c.project)
        c.logs = c.alllogs[:100]
        c.links = ['', '', '']
        if fromoff > h.TLCOUNT:
            c.links[0] = h.url_for(h.r_projadmtline, projectname=projectname, fromoff=1)
            c.links[1] = h.url_for(h.r_projadmtline, projectname=projectname, logid=c.logs[0].id, dir='newer', fromoff=fromoff - h.TLCOUNT)
        if len(c.alllogs) >= h.TLCOUNT:
            c.links[2] = h.url_for(h.r_projadmtline, projectname=projectname, logid=c.logs[(-1)].id, dir='older', fromoff=fromoff + h.TLCOUNT)
        c.fromoff = fromoff
        c.tooff = fromoff + len(c.logs)
        c.title = projectname + ':admintimeline'
        h.url_rssfeed = h.url_for(h.r_projadmfeed, projectname=projectname)
        (c.datatline, c.startdt) = h.tlineplot(c.logs[:])
        return render('/derived/projects/admintline.html')

    def feedadmin(self, environ, projectname):
        """Aggregate all the activities under the project"""
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        c.project = c.project or projcomp.get_project(projectname)
        routeargs = {'projectname': projectname}
        h.tline_controller(c, h.r_projadmtline, routeargs, 'project', 1, None, None, c.project)
        c.logs = c.alllogs[:100]
        title = projectname + ':admintimeline'
        link = 'http://%s%s' % (host, script)
        descr = 'Timeline for project administration, %s' % projectname
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def downloads(self, environ, projectname):
        """Action to present project downloads"""
        viewcontext(id=id)
        viewprojectpanel(projectname=projectname, activetab=0)
        viewuserpanes(id=id)
        _url(project=c.project)
        attachments = projcomp.attachments(c.project)
        c.attachments = {}
        for pkey in attachments:
            adict = attachments[pkey]
            attachs = []
            for aid in adict:
                tags = adict[aid][(-1)]
                if 'download' in tags:
                    tags.remove('download')
                    attachs.append([
                     aid] + adict[aid][:-1] + [(', ').join(tags)] + [
                     h.url_for(h.r_attachdownl, id=aid)])

            c.attachments[pkey[1]] = attachs

        c.title = 'ProjectDownloads'
        html = render('/derived/projects/projdownloads.html')
        return html

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def attachs(self, environ, projectname):
        """Action to present attachment page for `projectname`"""
        viewcontext(id=id)
        viewprojectpanel(projectname=projectname, activetab=0)
        viewuserpanes(id=id)
        _url(project=c.project)
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.view != 'js':
            attachments = projcomp.attachments(c.project)
            c.attachments = {}
            for pkey in attachments:
                adict = attachments[pkey]
                attachs = [ [aid] + adict[aid][:-1] + [(', ').join(adict[aid][(-1)])] + [h.url_for(h.r_attachdownl, id=aid)] for aid in adict
                          ]
                c.attachments[pkey[1]] = attachs

            c.attachs = self._prjattachs(c.project)
            c.editable = h.authorized(h.ProjectAdmin())
            c.att_editable = c.editable
            c.isfavorite = projcomp.checkfavorite(c.project.id, c.authuser.id)
            c.title = 'ProjectAttachs'
            html = render('/derived/projects/projattachs.html')
        else:
            html = ''
        return html

    @h.authorize(h.HasPermname(['PROJECT_VIEW']))
    def charts(self, environ, projectname):
        """Chart analytics for project `projectname`"""
        viewcontext(id=id)
        viewprojectpanel(projectname=projectname, activetab=0)
        viewuserpanes(id=id)
        _url(project=c.project)
        c.pa = ca.get_analyticobj('projects')
        c.chart14_data = getattr(c.pa, 'chart14_data', {}).get(projectname, {}).items()
        dates = []
        mstns = []
        for m in c.project.milestones:
            created_on = timezone('UTC').localize(m.created_on)
            dates.extend([created_on, m.due_date])
            mstns.append((m, created_on, m.due_date))

        mstns = sorted(mstns, key=lambda x: x[1])
        dates = sorted(filter(None, dates))
        c.chart15_data = []
        for mstn in mstns:
            m = mstn[0]
            mrange = mstn[1:3]
            if not mrange[1]:
                days = (dates[(-1)] - mrange[0]).days
            elif mrange[1] > mrange[0]:
                days = (mrange[1] - mrange[0]).days
            elif mrange[1] <= mrange[0]:
                days = 0
            bar = [(mrange[0] - dates[0]).days]
            if m.completed:
                bar.extend([0, 0, days])
            elif m.cancelled:
                bar.extend([0, days, 0])
            else:
                bar.extend([days, 0, 0])
            c.chart15_data.append([m.milestone_name] + bar)

        date = dates and dates[0] or None
        c.chart15_frmdt = h.date2jsdate(date, ['2000', '0', '1'])
        c.title = '%s:Charts' % projectname
        html = render('/derived/projects/projcharts.html')
        return html

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()