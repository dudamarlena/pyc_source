# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/tag.py
# Compiled at: 2010-05-22 06:34:29
"""Controller module to handler tag related request.
"""
import logging
from pylons import request, response, session, tmpl_context as c
from pylons import config
from pylons.controllers.util import abort
from zeta.lib.base import BaseController, render
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.lib.view import viewcontext, viewuserpanes
import zeta.lib.helpers as h, zeta.lib.analytics as ca
from zeta.comp.system import SystemComponent
from zeta.comp.tag import TagComponent
from zeta.comp.timeline import TimelineComponent
log = logging.getLogger(__name__)
compmgr = None
syscomp = None
tagcomp = None
tlcomp = None

def do_onetime():
    global compmgr
    global syscomp
    global tagcomp
    global tlcomp
    if compmgr == None:
        compmgr = config['compmgr']
        syscomp = SystemComponent(compmgr)
        tagcomp = TagComponent(compmgr)
        tlcomp = TimelineComponent(compmgr)
    return


def _url(tagname=''):
    """urls that will to be stuffed into the pages generated by this
    controller."""
    h.url_tagcloud = h.url_for(h.r_tags)
    if tagname:
        h.url_tagtimeline = h.url_for(h.r_tagtline, tagname=tagname)
        h.url_rssfeed = h.url_for(h.r_tagfeed, tagname=tagname)
    else:
        h.url_tagtimeline = h.url_for(h.r_tagstline)
        h.url_rssfeed = h.url_for(h.r_tagsfeed)


class TagController(BaseController):

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()

    def index(self, environ):
        """Tag cloud"""
        viewcontext()
        viewuserpanes()
        _url()
        c.specialtags = h.parse_csv(syscomp.get_sysentry('specialtags'))
        c.tagpercentile = tagcomp.tagpercentile
        c.title = 'TagCloud'
        return render('/derived/tag/tagcloud.html')

    def tagname(self, environ, tagname):
        """Show tag details"""
        viewcontext()
        viewuserpanes()
        _url(tagname)
        c.tag = tagcomp.get_tag(tagname, attrload=[
         'attachments', 'licenses', 'projects',
         'tickets', 'reviews', 'wikipages'], attrload_all=[
         'tickets.project', 'reviews.project',
         'wikipages.project'])
        ta = ca.get_analyticobj('tags')
        c.chart1_rtags = getattr(ta, 'chart1_rtags', {}).get(tagname, [])
        c.chart1_data = getattr(ta, 'chart1_data', {}).get(tagname, [])
        c.title = tagname
        return render('/derived/tag/tag.html')

    def timeline(self, environ, tagname=''):
        """Action for all timeline pages."""
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext()
        viewuserpanes()
        _url(tagname=tagname)
        c.tag = tagname and tagcomp.get_tag(tagname) or None
        c.links = ['', '', '']
        if tagname:
            h.tline_controller(c, h.r_tagtline, {}, 'tag', fromoff, logid, dir, c.tag)
            c.title = '%s:timeline' % tagname
        else:
            h.tline_controller(c, h.r_tagstline, {}, 'tag', fromoff, logid, dir, c.tag)
            c.title = 'Tags:timeline'
        return render('/derived/tag/tagtline.html')

    def feed(self, environ, tagname=''):
        """Action for all timeline pages."""
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        c.tag = tagname and tagcomp.get_tag(tagname) or None
        if tagname:
            h.tline_controller(c, h.r_tagtline, {}, 'tag', 1, None, None, c.tag)
            title = 'tag:%s' % tagname
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for tag %s' % tagname
        else:
            h.tline_controller(c, h.r_tagstline, {}, 'tag', 1, None, None, c.tag)
            title = 'tags'
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for tags'
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    def __after__(self):
        aftercontrollers()