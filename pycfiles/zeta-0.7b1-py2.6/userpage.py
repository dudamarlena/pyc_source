# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/userpage.py
# Compiled at: 2010-07-07 03:36:15
"""Controller module to handler user related request."""
import logging
from pylons import request, response, session, tmpl_context as c
from pylons import config
from pylons.controllers.util import abort
import simplejson as json
from zeta.lib.base import BaseController, render
from zeta.config.environment import beforecontrollers, aftercontrollers, tckfilters
from zeta.lib.constants import *
import zeta.lib.helpers as h, zeta.lib.analytics as ca
from zeta.lib.error import ZetaFormError
from zeta.lib.view import viewcontext, viewuserpanes
from zeta.comp.forms import *
from zeta.comp.project import ProjectComponent
from zeta.comp.attach import AttachComponent
from zeta.comp.wiki import WikiComponent
from zeta.comp.ticket import TicketComponent
from zeta.comp.review import ReviewComponent
from zeta.comp.vote import VoteComponent
from zeta.comp.timeline import TimelineComponent
log = logging.getLogger(__name__)
compmgr = None
attcomp = None
projcomp = None
wikicomp = None
tckcomp = None
revcomp = None
votecomp = None
tlcomp = None
vf = None

def do_onetime():
    global attcomp
    global compmgr
    global projcomp
    global revcomp
    global tckcomp
    global tlcomp
    global vf
    global votecomp
    global wikicomp
    if compmgr == None:
        compmgr = config['compmgr']
        attcomp = AttachComponent(compmgr)
        projcomp = ProjectComponent(compmgr)
        wikicomp = WikiComponent(compmgr)
        tckcomp = TicketComponent(compmgr)
        revcomp = ReviewComponent(compmgr)
        votecomp = VoteComponent(compmgr)
        tlcomp = TimelineComponent(compmgr)
        vf = VForm(compmgr)
    return


def _url_usertcklist(**kwargs):
    """Construct url_ticketlist url and poplate it in the context"""
    username = kwargs.get('username', '')
    kwargs.update({'jsonobj': 'ticketlist', 'view': 'js'})
    h.url_ticketlist = h.url_for(h.r_usertickets, **kwargs)
    h.suburl_addtckfilter = h.url_for(h.r_usertickets, username=username, form='submit', formname='addtckfilter', view='js')
    h.suburl_deltckfilter = h.url_for(h.r_usertickets, username=username, form='submit', formname='deltckfilter', view='js')


def _url(username=''):
    """urls to be stuffed into the pages generated by this controller."""
    h.url_usersgmap = h.url_for(h.r_usersgmap)
    h.url_userhome = h.url_for(h.r_userhome, username=username)
    h.url_usercharts = h.url_for(h.r_usercharts, username=username)
    h.url_userscharts = h.url_for(h.r_userscharts)
    if username:
        h.url_usertline = h.url_for(h.r_usertline, username=username)
        h.url_rssfeed = h.url_for(h.r_userfeed, username=username)
    else:
        h.url_usertline = h.url_for(h.r_userstline)
        h.url_rssfeed = h.url_for(h.r_usersfeed)
    h.suburl_inviteuser = h.url_for(h.r_usersinvite, form='submit', formname='inviteuser')
    h.suburl_accountinfo = h.url_for(h.r_userpref, username=username, form='submit', formname='updateuser', view='js')
    h.suburl_updtpass = h.url_for(h.r_userpref, username=username, form='submit', formname='updtpass', view='js')
    h.suburl_adduserphoto = h.url_for(h.r_userpref, username=username, form='submit', formname='userphoto', view='js')
    h.suburl_deluserphoto = h.url_for(h.r_userpref, username=username, form='submit', formname='deluserphoto', view='js')
    h.suburl_addusericon = h.url_for(h.r_userpref, username=username, form='submit', formname='usericon', view='js')
    h.suburl_delusericon = h.url_for(h.r_userpref, username=username, form='submit', formname='delusericon', view='js')
    h.suburl_adduserrels = h.url_for(h.r_userpref, username=username, form='submit', formname='adduserrels', view='js')
    h.suburl_appruserrels = h.url_for(h.r_userpref, username=username, form='submit', formname='approveuserrels', view='js')
    h.suburl_deluserrels = h.url_for(h.r_userpref, username=username, form='submit', formname='deluserrels', view='js')
    h.url_userprefresh = h.url_for(h.r_userhome, username=username, jsonobj='userphoto', view='js')
    h.url_userirefresh = h.url_for(h.r_userhome, username=username, jsonobj='usericon', view='js')


class UserpageController(BaseController):
    """Actions to handle user pages"""

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        c.stdfilter = request.params.get('stdfilter', None)
        c.savfilter = request.params.get('savfilter', None)
        c.savfilter = c.savfilter and int(c.savfilter)
        return

    def _userphoto(self, user):
        f = user and user.photofile or None
        if f:
            photoattach = {f.id: [f.id,
                    h.url_for(h.r_attachdownl, id=str(f.id)),
                    f.filename,
                    f.summary]}
        else:
            photoattach = {}
        return photoattach

    def _usericon(self, user):
        f = user and user.iconfile or None
        if f:
            iconattach = {f.id: [f.id,
                    h.url_for(h.r_attachdownl, id=str(f.id)),
                    f.filename,
                    f.summary]}
        else:
            iconattach = {}
        return iconattach

    def _json_usernames(self, users=[]):
        """JSON: { id   : '',
                   label: '',
                   items: [ { usernames: usernames } ]
                 }"""
        if users:
            usernames = [ u.username for u in users ]
        else:
            userscomp = config['userscomp']
            usernames = sorted(userscomp.usernames)
        return h.todojoreadstore([usernames], lambda v: {'usernames': v})

    @h.authorize(h.ValidUser(strict='True'))
    def _json_userphoto(self):
        """JSON: { id : [ id, url, filename, summary } """
        return json.dumps(c.authuser and self._userphoto(c.authuser) or {})

    @h.authorize(h.ValidUser(strict='True'))
    def _json_usericon(self):
        """JSON: { id : [ id, url, filename, summary } """
        return json.dumps(c.authuser and self._usericon(c.authuser) or {})

    @h.authorize(h.ValidUser(strict='True'))
    def _json_userperms(self):
        """JSON: { id   : 'username',
                   label: 'username',
                   items: [ { username: username,
                              permissions: permissions,
                              x_permissions: ^permissions },
                            ... ]
                 }"""
        userscomp = config['userscomp']
        json = h.todojoreadstore(userscomp.userpermission_map(), lambda k, v: {'username': k, 'permissions': v[0], 'x_permissions': v[1]}, id='username', label='username')
        return json

    @h.authorize(h.SiteAdmin())
    def _json_userstatus(self):
        """JSON: { id   : 'status',
                   label: 'status',
                   items: [ { status: status, usernames: usernames },
                            ... ]
                 }"""
        userscomp = config['userscomp']
        return h.todojoreadstore(userscomp.userstatus, lambda k, v: {'status': k, 'usernames': v}, id='status', label='status')

    @h.authorize(h.ValidUser(strict='True'))
    def _json_userconns(self):
        """JSON: { id   : '',
                   label: '',
                   items: [ touserrels, fromuserrels, potrels ]
                 }
             touserrels  : { type : [ (tousr, rel.id, approved), ... ], ... }
             fromuserrels: { type : [ (fromsr, rel.id, approved), ... ], ... }
             potrels     : { type : [ [ username, ...], ... }"""
        userscomp = config['userscomp']
        json = []
        if c.authusername != 'anonymous':
            (touserrels, fromuserrels, potrels) = userscomp.get_connections(c.authuser)
            touserrels = dict([ (rt,
             sorted(touserrels[rt], key=lambda x: x[0]))
             for rt in touserrels
                              ])
            fromuserrels = dict([ (rt,
             sorted(fromuserrels[rt], key=lambda x: x[0]))
             for rt in fromuserrels
                                ])
            potrels = dict([ (rt, sorted(potrels[rt])) for rt in potrels
                           ])
            json = h.todojoreadstore([[touserrels, fromuserrels, potrels]], lambda v: {'rels': v})
        return json

    @h.authorize(h.ValidUser(strict='True'))
    def _json_ticketlist(self):
        """Fetch the json object with caching, under `username`
       JSON: { id   : 'id',
               label: 'ticket_id',
               items: [ { id             : tck.id,
                          projectname    : tck.project.projectname,
                          ts_id          : ts.id ,
                          ticketurl      : url_for(ticket) ,
                          summary        : tck.summary,
                          tck_typename   : tck.type.typename,
                          tck_severityname : tck.severity.tck_severityname,
                          tck_statusname : tck.status.tck_statusname,
                          due_date       : ts.due_date ,
                          owner          : ts.owner.username,
                          promptuser     : tck.promptuser.username,
                          component_id   : component.id,
                          componentname  : component.componentname,
                          milestone_id   : milestone.id,
                          milestone_name : milestone.milestone_name,
                          version_id     : version.id,,
                          version_name   : version.version_name,
                          upvotes        : upvotes ,
                          downvotes      : downvotes,
                          age            : age },
                        ... ]
             }"""

        def format_item--- This code section failed: ---

 L. 329         0  LOAD_FAST             0  'tup'
                3  LOAD_CONST               8
                6  BINARY_SUBSCR    
                7  JUMP_IF_FALSE        35  'to 45'
               10  POP_TOP          

 L. 330        11  LOAD_FAST             0  'tup'
               14  LOAD_CONST               8
               17  BINARY_SUBSCR    
               18  LOAD_ATTR             0  'astimezone'
               21  LOAD_GLOBAL           1  'h'
               24  LOAD_ATTR             2  'timezone'
               27  LOAD_GLOBAL           3  'c'
               30  LOAD_ATTR             4  'authuser'
               33  LOAD_ATTR             2  'timezone'
               36  CALL_FUNCTION_1       1  None
               39  CALL_FUNCTION_1       1  None
             42_0  COME_FROM             7  '7'
               42  JUMP_IF_TRUE          4  'to 49'
               45  POP_TOP          

 L. 331        46  LOAD_CONST               None
             49_0  COME_FROM            42  '42'
               49  STORE_FAST            1  'due_date'

 L. 332        52  LOAD_FAST             1  'due_date'
               55  JUMP_IF_FALSE        25  'to 83'
               58  POP_TOP          

 L. 333        59  LOAD_FAST             1  'due_date'
               62  LOAD_ATTR             6  'year'
               65  LOAD_FAST             1  'due_date'
               68  LOAD_ATTR             7  'month'
               71  LOAD_FAST             1  'due_date'
               74  LOAD_ATTR             8  'day'
               77  BUILD_LIST_3          3 
             80_0  COME_FROM            55  '55'
               80  JUMP_IF_TRUE          4  'to 87'
               83  POP_TOP          
               84  BUILD_LIST_0          0 
             87_0  COME_FROM            80  '80'
               87  STORE_FAST            2  'ymd'

 L. 334        90  LOAD_GLOBAL           1  'h'
               93  LOAD_ATTR             9  'olderby'
               96  LOAD_GLOBAL          10  'dt'
               99  LOAD_ATTR            11  'datetime'
              102  LOAD_ATTR            12  'utcnow'
              105  CALL_FUNCTION_0       0  None
              108  LOAD_ATTR            13  'toordinal'
              111  CALL_FUNCTION_0       0  None

 L. 335       114  LOAD_FAST             0  'tup'
              117  LOAD_CONST               3
              120  BINARY_SUBSCR    
              121  LOAD_ATTR            13  'toordinal'
              124  CALL_FUNCTION_0       0  None
              127  BINARY_SUBTRACT  
              128  CALL_FUNCTION_1       1  None
              131  STORE_FAST            3  'age'

 L. 336       134  BUILD_MAP            20 

 L. 337       137  LOAD_FAST             0  'tup'
              140  LOAD_CONST               0
              143  BINARY_SUBSCR    
              144  LOAD_CONST               'id'
              147  STORE_MAP        

 L. 338       148  LOAD_FAST             0  'tup'
              151  LOAD_CONST               1
              154  BINARY_SUBSCR    
              155  LOAD_CONST               'projectname'
              158  STORE_MAP        

 L. 339       159  LOAD_GLOBAL           1  'h'
              162  LOAD_ATTR            14  'url_forticket'
              165  LOAD_FAST             0  'tup'
              168  LOAD_CONST               1
              171  BINARY_SUBSCR    
              172  LOAD_FAST             0  'tup'
              175  LOAD_CONST               0
              178  BINARY_SUBSCR    
              179  CALL_FUNCTION_2       2  None
              182  LOAD_CONST               'ticketurl'
              185  STORE_MAP        

 L. 340       186  LOAD_FAST             0  'tup'
              189  LOAD_CONST               2
              192  BINARY_SUBSCR    
              193  LOAD_CONST               'summary'
              196  STORE_MAP        

 L. 341       197  LOAD_FAST             0  'tup'
              200  LOAD_CONST               4
              203  BINARY_SUBSCR    
              204  LOAD_CONST               'tck_typename'
              207  STORE_MAP        

 L. 342       208  LOAD_FAST             0  'tup'
              211  LOAD_CONST               5
              214  BINARY_SUBSCR    
              215  LOAD_CONST               'tck_severityname'
              218  STORE_MAP        

 L. 343       219  LOAD_FAST             0  'tup'
              222  LOAD_CONST               6
              225  BINARY_SUBSCR    
              226  LOAD_CONST               'tck_statusname'
              229  STORE_MAP        

 L. 344       230  LOAD_FAST             0  'tup'
              233  LOAD_CONST               7
              236  BINARY_SUBSCR    
              237  LOAD_CONST               'ts_id'
              240  STORE_MAP        

 L. 345       241  LOAD_FAST             2  'ymd'
              244  LOAD_CONST               'due_date'
              247  STORE_MAP        

 L. 346       248  LOAD_FAST             0  'tup'
              251  LOAD_CONST               9
              254  BINARY_SUBSCR    
              255  LOAD_CONST               'owner'
              258  STORE_MAP        

 L. 347       259  LOAD_FAST             0  'tup'
              262  LOAD_CONST               10
              265  BINARY_SUBSCR    
              266  LOAD_CONST               'promptuser'
              269  STORE_MAP        

 L. 348       270  LOAD_FAST             0  'tup'
              273  LOAD_CONST               11
              276  BINARY_SUBSCR    
              277  LOAD_CONST               'component_id'
              280  STORE_MAP        

 L. 349       281  LOAD_FAST             0  'tup'
              284  LOAD_CONST               12
              287  BINARY_SUBSCR    
              288  LOAD_CONST               'componentname'
              291  STORE_MAP        

 L. 350       292  LOAD_FAST             0  'tup'
              295  LOAD_CONST               13
              298  BINARY_SUBSCR    
              299  LOAD_CONST               'milestone_id'
              302  STORE_MAP        

 L. 351       303  LOAD_FAST             0  'tup'
              306  LOAD_CONST               14
              309  BINARY_SUBSCR    
              310  LOAD_CONST               'milestone_name'
              313  STORE_MAP        

 L. 352       314  LOAD_FAST             0  'tup'
              317  LOAD_CONST               15
              320  BINARY_SUBSCR    
              321  LOAD_CONST               'version_id'
              324  STORE_MAP        

 L. 353       325  LOAD_FAST             0  'tup'
              328  LOAD_CONST               16
              331  BINARY_SUBSCR    
              332  LOAD_CONST               'version_name'
              335  STORE_MAP        

 L. 354       336  LOAD_FAST             0  'tup'
              339  LOAD_CONST               17
              342  BINARY_SUBSCR    
              343  LOAD_CONST               'upvotes'
              346  STORE_MAP        

 L. 355       347  LOAD_FAST             0  'tup'
              350  LOAD_CONST               18
              353  BINARY_SUBSCR    
              354  LOAD_CONST               'downvotes'
              357  STORE_MAP        

 L. 356       358  LOAD_FAST             3  'age'
              361  LOAD_CONST               'age'
              364  STORE_MAP        
              365  STORE_FAST            4  'd'

 L. 358       368  LOAD_GLOBAL          15  'tckcomp'
              371  LOAD_ATTR            16  'computefilters'
              374  LOAD_FAST             4  'd'
              377  LOAD_CONST               'tckfilters'
              380  LOAD_GLOBAL           3  'c'
              383  LOAD_ATTR            17  'tckfilters'
              386  CALL_FUNCTION_257   257  None
              389  LOAD_CONST               0
              392  BINARY_SUBSCR    
              393  STORE_FAST            4  'd'

 L. 359       396  LOAD_GLOBAL           3  'c'
              399  LOAD_ATTR            18  'stdfilter'
              402  JUMP_IF_FALSE        27  'to 432'
            405_0  THEN                     432
              405  POP_TOP          
              406  LOAD_FAST             4  'd'
              409  LOAD_ATTR            19  'get'
              412  LOAD_GLOBAL           3  'c'
              415  LOAD_ATTR            18  'stdfilter'
              418  LOAD_GLOBAL          20  'True'
              421  CALL_FUNCTION_2       2  None
              424  JUMP_IF_FALSE         9  'to 436'
            427_0  THEN                     432
              427  POP_TOP          
              428  LOAD_FAST             4  'd'
              431  RETURN_END_IF    
              432  POP_TOP          
              433  LOAD_FAST             4  'd'
              436  RETURN_VALUE     

Parse error at or near `LOAD_FAST' instruction at offset 433

        c.tckfilters = h.compile_tckfilters(tckfilters)
        savfilters = dict([ (tf.id, h.json.loads(tf.filterbyjson)) for tf in tckcomp.get_ticketfilter(user=c.authuser)
                          ])
        filters = savfilters.get(c.savfilter, {})
        tcklist = sorted(tckcomp.ticketlist(user=c.authuser, filters=filters).values(), key=lambda l: l[0], reverse=True)
        _tl = h.todojoreadstore(tcklist, format_item, id='id', label='ticket_id')
        return _tl

    @h.authorize(h.ValidUser(strict='True'))
    def index(self, environ):
        """Index of all registered users"""
        userscomp = config['userscomp']
        viewcontext()
        viewuserpanes()
        _url()
        c.users = userscomp.get_user(attrload=['userinfo', 'photofile'])
        c.title = 'Users'
        html = ''
        func = c.jsonobj and getattr(self, '_json_' + c.jsonobj)
        if func:
            html = func()
        else:
            html = render('/derived/userpage/usersindex.html')
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def gmap(self, environ):
        """all registered users on google map"""
        userscomp = config['userscomp']
        viewcontext()
        viewuserpanes()
        _url()
        c.useraddrs = [ [u.username, h.useraddress(u.userinfo)] for u in userscomp.get_user(attrload=['userinfo'])
                      ]
        c.googlemaps = h.gmapkey(c.sysentries)
        c.title = 'UsersOnGooglemap'
        html = render('/derived/userpage/usersgmap.html')
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def inviteuser(self, environ):
        """Invite a new user to join the site"""
        regrbyinvite = h.str2bool(c.sysentries['regrbyinvite'])
        invitebyall = h.str2bool(c.sysentries['invitebyall'])
        c.usercaninvite = regrbyinvite and invitebyall and h.authorized(h.ValidUser(strict='True')) or regrbyinvite and h.authorized(h.SiteAdmin())
        viewcontext()
        viewuserpanes()
        _url()
        if c.usercaninvite:
            if c.form in ('request', 'submit'):
                try:
                    vf.process(request, c, user=c.authuser)
                except ZetaFormError, (errmsg,):
                    response.status_int = 400
                    return errmsg

        c.title = 'InviteUser'
        html = ''
        if c.usercaninvite:
            html = render('/derived/userpage/inviteuser.html')
        else:
            html = render('/derived/userpage/inviteuser.html')
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def userhome(self, environ, username):
        """User Home page"""
        userscomp = config['userscomp']
        viewcontext(username=username)
        viewuserpanes(username=username)
        _url(username)
        c.username = c.username
        c.user = userscomp.get_user(username, attrload=[
         'userinfo'], attrload_all=[
         'owncomponents.project'])
        votes = votecomp.uservotes(c.user)
        c.statistics = {'uploadedfiles': len(attcomp.uploadedbyuser(c.user)), 
           'votes': dict([ (votedas, len(votes[votedas])) for votedas in votes
                  ]), 
           'adminprojects': projcomp.adminprojects(c.user), 
           'inprojects': projcomp.userprojects(c.user), 
           'tickets': len(tckcomp.usertickets(c.user).keys()), 
           'tckcomments': len(tckcomp.usercomments(c.user)), 
           'wikicomments': len(wikicomp.usercomments(c.user)), 
           'authoredrevw': len(revcomp.userasauthor(c.user)), 
           'modertrevw': len(revcomp.userasmoderator(c.user)), 
           'particprevw': len(revcomp.userasparticipant(c.user)), 
           'revwcomments': len(revcomp.usercomments(c.user))}
        c.googlemaps = h.gmapkey(c.sysentries)
        c.logs = tlcomp.fetchlogs('user', c.authuser, limit=20)
        c.useraddr = [
         [c.authuser.username,
          h.useraddress(c.user.userinfo)]]
        photofile = c.user.photofile
        h.url_userphoto = photofile and h.url_for(h.r_attachment, id=photofile.id)
        c.title = username
        html = ''
        func = c.jsonobj and getattr(self, '_json_' + c.jsonobj)
        if func:
            html = func()
        else:
            html = render('/derived/userpage/userhome.html')
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def preference(self, environ, username, **kwargs):
        """Handle user preference"""
        viewcontext(username=username)
        viewuserpanes(username=username)
        _url(username)
        if c.form in ('request', 'submit'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        uinfo = c.authuser.userinfo
        c.title = 'Preference'
        c.photo_editable = h.authorized(h.ValidUser(strict='True'))
        c.icon_editable = h.authorized(h.ValidUser(strict='True'))
        c.photoattach = self._userphoto(c.authuser)
        c.iconattach = self._usericon(c.authuser)
        c.googlemaps = h.gmapkey(c.sysentries)
        c.fulladdress = h.useraddress(uinfo)
        html = ''
        if c.view == 'js' and c.formname in ('userphoto', 'usericon'):
            html = IFRAME_RET
        else:
            html = render('/derived/userpage/preference.html')
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def tickets(self, environ, username):
        """List tickets belonging to user (attributed as owner and/or
        promptuser"""
        viewcontext(username=username)
        viewuserpanes(username=username)
        _url(username)
        kwargs = {'username': username}
        c.stdfilter and kwargs.update({'stdfilter': c.stdfilter})
        c.savfilter and kwargs.update({'savfilter': c.savfilter})
        _url_usertcklist(**kwargs)
        if c.form in ('request', 'submit') and c.formname in ('addtckfilter', 'deltckfilter') and h.authorized(h.UserIn([username])):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        c.tckfilters = h.compile_tckfilters(tckfilters)
        c.title = '%s:tickets' % c.authuser.username
        html = ''
        if c.view == 'js' and c.jsonobj:
            func = getattr(self, '_json_' + c.jsonobj, None)
            if func:
                html = func()
        elif c.view != 'js' and not (c.stdfilter or c.savfilter) and c.tckfilters:
            h.redirect_to(h.r_usertickets, username=username, stdfilter=c.tckfilters[0][0])
        elif c.view != 'js':
            c.tckeditable = False
            c.tckccodes = h.tckccodes
            c.tstat_resolv = h.parse_csv(c.sysentries.get('ticketresolv', ''))
            c.tck_typenames = tckcomp.tcktypenames
            c.tck_statusnames = tckcomp.tckstatusnames
            c.tck_severitynames = tckcomp.tckseveritynames
            c.projectnames = projcomp.projectnames
            userfilters = tckcomp.get_ticketfilter(user=c.authuser)
            c.savfilterlist = dict([ (tf.id, [tf.name, tf.filterbyjson]) for tf in userfilters
                                   ])
            c.savfilterval = c.savfilterlist.get(c.savfilter, ['', ''])
            c.savfiltername = c.savfilterval[0]
            c.savfilterlist = [ [h.url_forutcklist(username, savfilter=k), v[0]] for (k, v) in c.savfilterlist.iteritems()
                              ]
            html = render('/derived/userpage/ticket.html')
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def usercharts(self, environ, username=''):
        """User charts"""
        userscomp = config['userscomp']
        viewcontext()
        viewuserpanes()
        _url()
        c.user = userscomp.get_user(unicode(username))
        c.ua = ca.get_analyticobj('users')
        data = getattr(c.ua, 'chart12_data', {}).get(c.user.id, [c.user.id, c.user.username, []])
        c.chart12_data = data
        c.title = '%s:Charts' % username
        html = render('/derived/userpage/usercharts.html')
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def charts(self, environ):
        """Charts for combined users"""
        userscomp = config['userscomp']
        viewcontext()
        viewuserpanes()
        _url()
        c.ua = ca.get_analyticobj('users')
        c.chart8_data = getattr(c.ua, 'chart8_data', [])
        c.chart9_data = getattr(c.ua, 'chart9_data', [])
        c.chart10_data = getattr(c.ua, 'chart10_data', [])
        c.chart11_data = getattr(c.ua, 'chart11_data', [])
        c.chart11_ccnt = getattr(c.ua, 'chart11_ccnt', [])
        c.title = 'Users:Charts'
        html = render('/derived/userpage/userscharts.html')
        return html

    @h.authorize(h.ValidUser(strict='True'))
    def timeline(self, environ, username=''):
        """User timeline"""
        userscomp = config['userscomp']
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext(username=username)
        viewuserpanes(username=username)
        _url(username)
        c.user = username and userscomp.get_user(username)
        c.links = ['', '', '']
        if username:
            h.tline_controller(c, h.r_usertline, {'username': username}, ['user'], fromoff, logid, dir, c.user)
            c.title = '%s:timeline' % username
        else:
            h.tline_controller(c, h.r_userstline, {}, 'user', fromoff, logid, dir, c.user)
            c.title = 'Users:timeline'
        (c.datatline, c.startdt) = h.tlineplot(c.logs[:])
        c.timeline = True
        html = render('/derived/userpage/usertline.html')
        return html

    def feed(self, environ, username=''):
        """Feed for user timeline"""
        userscomp = config['userscomp']
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        c.user = username and userscomp.get_user(username)
        if username:
            h.tline_controller(c, h.r_usertline, {'username': username}, 'user', 1, None, None, c.user)
            title = '%s:timeline' % c.user.username
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for user %s' % c.user.username
        else:
            h.tline_controller(c, h.r_userstline, {}, 'user', 1, None, None, c.user)
            title = 'UsersTimeline'
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for all users'
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()