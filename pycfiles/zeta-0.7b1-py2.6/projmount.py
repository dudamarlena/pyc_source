# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/projmount.py
# Compiled at: 2010-05-26 01:47:53
"""Controller module to manage project mount points with repository"""
import logging, datetime as dt, re, os
from os.path import basename, join, splitext, commonprefix
from pylons import request, response, session, tmpl_context as c
from pylons.controllers.util import abort
from pylons import config
import simplejson as json
from authkit.authorize import PermissionError, PermissionSetupError, NotAuthenticatedError, NotAuthorizedError, middleware
from zeta.lib.base import BaseController, render
from zeta.config.environment import beforecontrollers, aftercontrollers
from zeta.lib.view import viewcontext, viewuserpanes, viewprojectpanel, Anchor
import zeta.lib.helpers as h, zeta.lib.vcsadaptor as va
from zeta.lib.constants import *
from zeta.lib.error import ZetaFormError
from zeta.comp.project import ProjectComponent
from zeta.comp.vcs import VcsComponent
from zeta.comp.forms import VForm
from zeta.comp.timeline import TimelineComponent
log = logging.getLogger(__name__)
compmgr = None
vf = None
projcomp = None
vcscomp = None
tlcomp = None

def do_onetime():
    global compmgr
    global projcomp
    global tlcomp
    global vcscomp
    global vf
    if compmgr == None:
        compmgr = config['compmgr']
        projcomp = ProjectComponent(compmgr)
        vcscomp = VcsComponent(compmgr)
        tlcomp = TimelineComponent(compmgr)
        vf = VForm(compmgr)
    return


mountperm = {}
mountperm.update(dict([ (formname, h.HasPermname('VCS_CREATE')) for formname in [
 'createmount', 'updatemount', 'deletemount']
                      ]))

def _url(projectname='', id=''):
    """urls to be stuffed into pages generated by this controller."""
    h.url_prj = h.url_for(h.r_projecthome, projectname=projectname)
    h.url_projmounts = h.url_for(h.r_projmounts, projectname=projectname)
    h.suburl_createmount = h.url_for(h.r_projmounts, projectname=projectname, form='submit', formname='createmount')
    h.suburl_updatemount = h.url_for(h.r_projmounts, projectname=projectname, form='submit', formname='updatemount')
    h.suburl_deletemount = h.url_for(h.r_projmounts, projectname=projectname, form='submit', formname='deletemount')
    h.suburl_search = h.url_for(h.r_searchpage)
    h.url_mountlist = h.url_for(h.r_projmounts, projectname=projectname, jsonobj='mountlist', view='js')


class ProjmountController(BaseController):
    """Class to handle project page request"""

    def _optimized_fetch(self, controllername, projectname):
        """Fetch the project object and vcs object from the database in
        an optimized manner based on the action and json request"""
        c.project = projectname and projcomp.get_project(projectname, attrload=[
         'logofile', 'vcslist'])

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        c.textobj = request.params.get('textobj', None)
        c.changeid = request.params.get('changeid', None)
        c.pathinfo = request.environ['PATH_INFO']
        routes_map = config['routes.map']
        (d, robj) = routes_map.routematch(c.pathinfo)
        projectname = d.get('projectname', None)
        self._optimized_fetch(robj.name, projectname)
        c.prjlogo = c.project and c.project.logofile and h.url_forattach(c.project.logofile.id)
        return

    @h.authorize(h.HasPermname('VCS_VIEW'))
    def _json_mountlist(self):
        """JSON: { id   : 'id',
                   label: 'mount_id',
                   items: [ { 'id'          : m.id,
                              'name'        : m.name,
                              'content'     : m.content,
                              'repospath'   : m.repospath,
                              'href'        : href,
                              'createdon'   : m.created_on },
                            ... ]
                 }"""

        def format_item(m):
            href = h.url_for(h.r_projmounts, projectname=c.project.projectname, name=m[0])
            d = {'id': m[0], 
               'name': m[1], 
               'content': m[2], 
               'repospath': m[3], 
               'href': href, 
               'created_on': m[4]}
            return d

        return h.todojoreadstore(vcscomp.projmounts(c.project), format_item, id='id', label='mount_id')

    @h.authorize(h.HasPermname(['VCS_VIEW']))
    def mounts(self, environ, projectname):
        """List of Repository mount points"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=0)
        viewuserpanes(projectname=projectname)
        _url(projectname)
        if c.form == 'submit' and c.formname in mountperm and not h.authorized(mountperm[c.formname]):
            return 'Do not have %s permission !!' % mountperm[c.formname]
        else:
            if c.form in ('submit', 'request'):
                try:
                    vf.process(request, c)
                except ZetaFormError, (errmsg,):
                    response.status_int = 400
                    return errmsg

            c.project = c.project or projcomp.get_project(projectname)
            c.projectname = projectname
            c.mnt = c.changeid and vcscomp.get_mount(int(c.changeid), attrload=['vcs'])
            c.title = '%s:mounts' % projectname
            if c.form == 'submit' and c.formname in ('createmount', 'updatemount'):
                h.redirect_to(h.r_projmounts, projectname=projectname)
            elif c.form:
                c.title = '-Skip-'
            html = ''
            if c.view == 'js' and c.jsonobj:
                func = getattr(self, '_json_' + c.jsonobj, None)
                if func:
                    html = func()
            elif c.form and c.view == 'js':
                pass
            else:
                c.contents = vcscomp.mountcontents
                c.vcslist = [ (v.id, v.name) for v in c.project.vcslist ]
                c.pmounts = [ list(vals[:3]) + [h.fix2repospath(vals[3], [vals[7]]).lstrip('/')] + list(vals[4:]) for vals in vcscomp.projmounts(c.project)
                            ]
                html = render('/derived/projects/projmounts.html')
            return html

    @h.authorize(h.HasPermname(['VCS_VIEW']))
    def mount(self, environ, projectname, id, murl=''):
        """Repository mount point"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=0)
        viewuserpanes(projectname=projectname)
        _url(projectname)
        c.repospath = murl.lstrip('/')
        c.id = id
        c.project = c.project or projcomp.get_project(projectname)
        c.projectname = projectname
        c.mnt = c.id and vcscomp.get_mount(int(c.id), attrload=['vcs'])
        cprefix = commonprefix([c.repospath, c.mnt.vcs.rooturl])
        c.vrep = va.open_repository(c.mnt.vcs)
        c.repurl = c.repospath and (c.repospath if cprefix == c.mnt.vcs.rooturl else join(c.mnt.vcs.rooturl, c.repospath)) or c.mnt.vcs.rooturl
        try:
            c.vfile = c.vrep.file(c.repurl)
        except:
            c.vfile = None

        if c.vfile == None:
            c.content = '<b>Error in reading path</b>'
            c.rendertype = c.mnt.content
        elif c.vfile.mimetype == 'text/directory':
            listing = {}
            dlist = c.vrep.list(c.repurl)
            [ listing.setdefault(f[1], []).append(f) for f in dlist ]
            dirs = map(lambda f: [
             h.url_for(h.r_projmount, projectname=projectname, id=id, murl=f[6]),
             basename(f[2])], listing.get('text/directory', []))
            files = map(lambda f: [
             h.url_for(h.r_projmount, projectname=projectname, id=id, murl=f[6]),
             basename(f[2])], listing.get('text/file', []))
            c.content = [ '<li><a href="%s">%s</a></li>' % tuple(d) for d in dirs
                        ] + [ '<li><a href="%s">%s</a></li>' % tuple(f) for f in files
                            ]
            c.content = ('\n').join(c.content)
            c.rendertype = 'dir'
        else:
            c.content = ('\n').join([ l[1] for l in c.vfile.cat() ])
            c.rendertype = c.mnt.content
        if c.rendertype == 'wiki':
            try:
                o = h.Preview()
                setattr(o, 'text', c.content)
                o.translate = h.hitch(o, h.Preview, h.translate, cacheattr='text')
                c.content = o.translate()
            except:
                c.content = ''

        try:
            c.content = unicode(c.content)
        except:
            c.content = 'Invalid file content'

        c.title = 'mount:%s' % getattr(c.mnt, 'name', '')
        html = render('/derived/projects/projmount.html')
        return html

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()