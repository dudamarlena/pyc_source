# uncompyle6 version 3.7.4
# Python bytecode 2.6 (62161)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/zeta/controllers/projticket.py
# Compiled at: 2010-07-06 12:22:40
"""Controller module to manage project ticket pages."""
import logging, datetime as dt, re
from pylons import request, response, session, tmpl_context as c
from pylons.controllers.util import abort
from pylons import config
import simplejson as json
from authkit.authorize import PermissionError, PermissionSetupError, NotAuthenticatedError, NotAuthorizedError, middleware
from zeta.lib.base import BaseController, render
from zeta.config.environment import beforecontrollers, aftercontrollers, tckfilters
from zeta.lib.view import viewcontext, viewuserpanes, viewprojectpanel, Anchor
import zeta.lib.helpers as h, zeta.lib.gviz as gviz, zeta.lib.analytics as ca
from zeta.lib.constants import *
from zeta.lib.error import ZetaFormError
from zeta.comp.project import ProjectComponent
from zeta.comp.vote import VoteComponent
from zeta.comp.ticket import TicketComponent
from zeta.comp.forms import VForm
from zeta.comp.timeline import TimelineComponent
log = logging.getLogger(__name__)
compmgr = None
vf = None
projcomp = None
tckcomp = None
votcomp = None
tlcomp = None

def do_onetime():
    global compmgr
    global projcomp
    global tckcomp
    global tlcomp
    global vf
    global votcomp
    if compmgr == None:
        compmgr = config['compmgr']
        projcomp = ProjectComponent(compmgr)
        tckcomp = TicketComponent(compmgr)
        votcomp = VoteComponent(compmgr)
        tlcomp = TimelineComponent(compmgr)
        vf = VForm(compmgr)
    return


tckperm = {}
tckperm.update(dict([ (formname, h.HasPermname('TICKET_CREATE')) for formname in [
 'createtck', 'configtck', 'tcktype', 'tckseverity',
 'tckpromptuser', 'tckcomponent', 'tckmilestone',
 'tckversion', 'tckparent', 'tckblockedby',
 'tckblocking', 'tcksummary',
 'addtcktags', 'deltcktags']
                    ]))
tckperm.update(dict([ (formname, h.HasPermname('TICKET_STATUS_CREATE')) for formname in [
 'createtstat', 'configtstat', 'tststatus',
 'tstduedate']
                    ]))
tckperm.update(dict([ (formname, h.HasPermname('TICKET_COMMENT_CREATE')) for formname in [
 'createtcmt', 'updatetcmt', 'replytcmt']
                    ]))

def _urlticketlist(**kwargs):
    """Construct url_ticketlist url and poplate it in the context"""
    kwargs.update({'jsonobj': 'ticketlist', 'view': 'js'})
    h.url_ticketlist = h.url_for(h.r_projtickets, **kwargs)


def _url(projectname='', id=''):
    """urls to be stuffed into the pages generated by this controller"""
    h.url_prj = h.url_for(h.r_projecthome, projectname=projectname)
    h.url_ticketcreate = h.url_for(h.r_projtckcreate, projectname=projectname, action='createticket', form='request', formname='createtck')
    if id:
        h.url_tcktimeline = h.url_for(h.r_projtcktline, projectname=projectname, id=id)
        h.url_rssfeed = h.url_for(h.r_projtckfeed, projectname=projectname, id=id)
    else:
        h.url_tcktimeline = h.url_for(h.r_projtckstline, projectname=projectname)
        h.url_rssfeed = h.url_for(h.r_projtcksfeed, projectname=projectname)
    h.url_tckattachs = h.url_for(h.r_projtckattachs, projectname=projectname)
    h.url_addattachment = h.url_for(h.r_addattchments)
    h.url_ticketgraph = h.url_for(h.r_projtidgraph, projectname=projectname, id=id, file='graph.svg')
    h.url_tickettree = h.url_for(h.r_projtidgraph, projectname=projectname, id=id, file='tree.svg')
    h.url_ticketcharts = h.url_for(h.r_projtckcharts, projectname=projectname)
    h.url_tagcloud = h.url_for(h.r_tags)
    h.suburl_createtck = h.url_for(h.r_projtckcreate, projectname=projectname, action='createticket', form='submit', formname='createtck')
    h.suburl_configtck = h.url_for(h.r_projtickets, projectname=projectname, form='submit', formname='configtck', view='js')
    h.suburl_configtckst = h.url_for(h.r_projtickets, projectname=projectname, form='submit', formname='configtstat', view='js')
    h.suburl_changetckst = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='createtstat', view='js')
    h.suburl_addtckattachs = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='addtckattachs', view='js')
    h.suburl_deltckattachs = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='deltckattachs', view='js')
    h.suburl_addtcktags = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='addtcktags', view='js')
    h.suburl_deltcktags = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='deltcktags', view='js')
    h.suburl_createtcmt = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='createtcmt', view='js')
    h.suburl_updatetcmt = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='updatetcmt', view='js')
    h.suburl_replytcmt = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='replytcmt', view='js')
    h.suburl_tckfav = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='tckfav', view='js')
    h.suburl_votetck = h.url_for(h.r_projticketid, projectname=projectname, id=id, form='submit', formname='votetck', view='js')
    h.suburl_attachssummary = h.url_for(h.r_projtckattachs, projectname=projectname, form='submit', formname='attachssummary', view='js')
    h.suburl_attachstags = h.url_for(h.r_projtckattachs, projectname=projectname, form='submit', formname='attachstags', view='js')
    h.suburl_search = h.url_for(h.r_searchpage)
    h.suburl_addtckfilter = h.url_for(h.r_projtickets, projectname=projectname, form='submit', formname='addtckfilter', view='js')
    h.suburl_deltckfilter = h.url_for(h.r_projtickets, projectname=projectname, form='submit', formname='deltckfilter', view='js')
    h.url_tckattachments = h.url_for(h.r_projticketid, projectname=projectname, id=id, jsonobj='tckattachs', view='js')
    h.url_tcktags = h.url_for(h.r_projticketid, projectname=projectname, id=id, jsonobj='tcktags', view='js')
    h.url_tckcomments = h.url_for(h.r_projticketid, projectname=projectname, id=id, jsonobj='tckcomments', view='js')
    h.url_tckrcomments = h.url_for(h.r_projticketid, projectname=projectname, id=id, jsonobj='tckrcomments', view='js')


class ProjticketController(BaseController):
    """Class to handle project ticket page request"""

    def _optimized_fetch(self, controllername, projectname):
        """Fetch the project object and ticket object from the database in
        an optimized manner based on the action and json request"""
        if c.jsonobj == 'tckcomments':
            c.ticket = c.ticket or tckcomp.get_ticket(c.ticket_id)
        elif c.jsonobj == 'tckrcomments':
            c.ticket = c.ticket or tckcomp.get_ticket(c.ticket_id)
        elif controllername == 'ticket':
            c.ticket = c.ticket or tckcomp.get_ticket(c.ticket_id, attrload=[
             'attachments', 'tags', 'type', 'severity'])
        c.project = c.project or projcomp.get_project(projectname, attrload=['logofile'])

    def __before__(self, environ):
        """Called before calling any actions under this controller"""
        beforecontrollers(environ=environ)
        do_onetime()
        c.form = request.params.get('form', None)
        c.formname = request.params.get('formname', None)
        c.view = request.params.get('view', None)
        c.jsonobj = request.params.get('jsonobj', None)
        c.textobj = request.params.get('textobj', None)
        c.graph = request.params.get('graph', None)
        c.tree = request.params.get('tree', None)
        c.stdfilter = request.params.get('stdfilter', None)
        c.savfilter = request.params.get('savfilter', None)
        c.savfilter = c.savfilter and int(c.savfilter)
        c.pathinfo = request.environ['PATH_INFO']
        routes_map = config['routes.map']
        (d, robj) = routes_map.routematch(c.pathinfo)
        projectname = d.get('projectname', None)
        c.ticket_id = None
        c.ticket = None
        if re.search('/t/', c.pathinfo):
            ticket_id = d.get('id', None)
            c.ticket_id = ticket_id and int(ticket_id)
        self._optimized_fetch(robj.name, projectname)
        c.prjlogo = c.project and c.project.logofile and h.url_forattach(c.project.logofile.id)
        c.searchfaces = [
         (
          'project', projectname),
         ('ticket', '1')]
        return

    def _ticketattachs(self, ticket):
        """For JSON consumption.
        Massage the ticket attachments"""
        attachs = dict([ (a.id, [a.id, h.url_for(h.r_attachdownl, id=str(a.id)), a.filename, a.summary]) for a in ticket.attachments
                       ])
        return attachs

    def _tickettags(self, ticket):
        """For JSON consumption.
        Massage the ticket tags"""
        return dict([ (t.tagname, t.tagname) for t in ticket.tags ])

    @h.authorize(h.HasPermname('TICKET_VIEW'))
    def _json_ticketlist(self):
        """Fetch the json object with caching, under `projectname`
       JSON: { id   : 'id',
               label: 'ticket_id',
               items: [ { id             : tck.id,
                          projectname    : tck.project.projectname,
                          ts_id          : ts.id ,
                          ticketurl      : url_for(ticket) ,
                          summary        : tck.summary,
                          tck_typename   : tck.type.typename,
                          tck_severityname : tck.severity.tck_severityname,
                          tck_statusname : tck.status.tck_statusname,
                          due_date       : ts.due_date ,
                          owner          : ts.owner.username,
                          promptuser     : tck.promptuser.username,
                          component_id   : component.id,
                          componentname  : component.componentname,
                          milestone_id   : milestone.id,
                          milestone_name : milestone.milestone_name,
                          version_id     : version.id,,
                          version_name   : version.version_name,
                          upvotes        : upvotes ,
                          downvotes      : downvotes,
                          age            : age          },
                        ... ]
             }"""

        def format_item--- This code section failed: ---

 L. 336         0  LOAD_FAST             0  'tup'
                3  LOAD_CONST               8
                6  BINARY_SUBSCR    
                7  JUMP_IF_FALSE        35  'to 45'
               10  POP_TOP          

 L. 337        11  LOAD_FAST             0  'tup'
               14  LOAD_CONST               8
               17  BINARY_SUBSCR    
               18  LOAD_ATTR             0  'astimezone'
               21  LOAD_GLOBAL           1  'h'
               24  LOAD_ATTR             2  'timezone'
               27  LOAD_GLOBAL           3  'c'
               30  LOAD_ATTR             4  'authuser'
               33  LOAD_ATTR             2  'timezone'
               36  CALL_FUNCTION_1       1  None
               39  CALL_FUNCTION_1       1  None
             42_0  COME_FROM             7  '7'
               42  JUMP_IF_TRUE          4  'to 49'
               45  POP_TOP          

 L. 338        46  LOAD_CONST               None
             49_0  COME_FROM            42  '42'
               49  STORE_FAST            1  'due_date'

 L. 339        52  LOAD_FAST             1  'due_date'
               55  JUMP_IF_FALSE        25  'to 83'
               58  POP_TOP          

 L. 340        59  LOAD_FAST             1  'due_date'
               62  LOAD_ATTR             6  'year'
               65  LOAD_FAST             1  'due_date'
               68  LOAD_ATTR             7  'month'
               71  LOAD_FAST             1  'due_date'
               74  LOAD_ATTR             8  'day'
               77  BUILD_LIST_3          3 
             80_0  COME_FROM            55  '55'
               80  JUMP_IF_TRUE          4  'to 87'
               83  POP_TOP          
               84  BUILD_LIST_0          0 
             87_0  COME_FROM            80  '80'
               87  STORE_FAST            2  'ymd'

 L. 341        90  LOAD_GLOBAL           1  'h'
               93  LOAD_ATTR             9  'olderby'
               96  LOAD_GLOBAL          10  'dt'
               99  LOAD_ATTR            11  'datetime'
              102  LOAD_ATTR            12  'utcnow'
              105  CALL_FUNCTION_0       0  None
              108  LOAD_ATTR            13  'toordinal'
              111  CALL_FUNCTION_0       0  None

 L. 342       114  LOAD_FAST             0  'tup'
              117  LOAD_CONST               3
              120  BINARY_SUBSCR    
              121  LOAD_ATTR            13  'toordinal'
              124  CALL_FUNCTION_0       0  None
              127  BINARY_SUBTRACT  
              128  CALL_FUNCTION_1       1  None
              131  STORE_FAST            3  'age'

 L. 343       134  BUILD_MAP            20 

 L. 344       137  LOAD_FAST             0  'tup'
              140  LOAD_CONST               0
              143  BINARY_SUBSCR    
              144  LOAD_CONST               'id'
              147  STORE_MAP        

 L. 345       148  LOAD_FAST             0  'tup'
              151  LOAD_CONST               1
              154  BINARY_SUBSCR    
              155  LOAD_CONST               'projectname'
              158  STORE_MAP        

 L. 346       159  LOAD_GLOBAL           1  'h'
              162  LOAD_ATTR            14  'url_forticket'
              165  LOAD_GLOBAL           3  'c'
              168  LOAD_ATTR            15  'project'
              171  LOAD_ATTR            16  'projectname'
              174  LOAD_FAST             0  'tup'
              177  LOAD_CONST               0
              180  BINARY_SUBSCR    
              181  CALL_FUNCTION_2       2  None
              184  LOAD_CONST               'ticketurl'
              187  STORE_MAP        

 L. 347       188  LOAD_FAST             0  'tup'
              191  LOAD_CONST               2
              194  BINARY_SUBSCR    
              195  LOAD_CONST               'summary'
              198  STORE_MAP        

 L. 348       199  LOAD_FAST             0  'tup'
              202  LOAD_CONST               4
              205  BINARY_SUBSCR    
              206  LOAD_CONST               'tck_typename'
              209  STORE_MAP        

 L. 349       210  LOAD_FAST             0  'tup'
              213  LOAD_CONST               5
              216  BINARY_SUBSCR    
              217  LOAD_CONST               'tck_severityname'
              220  STORE_MAP        

 L. 350       221  LOAD_FAST             0  'tup'
              224  LOAD_CONST               6
              227  BINARY_SUBSCR    
              228  LOAD_CONST               'tck_statusname'
              231  STORE_MAP        

 L. 351       232  LOAD_FAST             0  'tup'
              235  LOAD_CONST               7
              238  BINARY_SUBSCR    
              239  LOAD_CONST               'ts_id'
              242  STORE_MAP        

 L. 352       243  LOAD_FAST             2  'ymd'
              246  LOAD_CONST               'due_date'
              249  STORE_MAP        

 L. 353       250  LOAD_FAST             0  'tup'
              253  LOAD_CONST               9
              256  BINARY_SUBSCR    
              257  LOAD_CONST               'owner'
              260  STORE_MAP        

 L. 354       261  LOAD_FAST             0  'tup'
              264  LOAD_CONST               10
              267  BINARY_SUBSCR    
              268  LOAD_CONST               'promptuser'
              271  STORE_MAP        

 L. 355       272  LOAD_FAST             0  'tup'
              275  LOAD_CONST               11
              278  BINARY_SUBSCR    
              279  LOAD_CONST               'component_id'
              282  STORE_MAP        

 L. 356       283  LOAD_FAST             0  'tup'
              286  LOAD_CONST               12
              289  BINARY_SUBSCR    
              290  LOAD_CONST               'componentname'
              293  STORE_MAP        

 L. 357       294  LOAD_FAST             0  'tup'
              297  LOAD_CONST               13
              300  BINARY_SUBSCR    
              301  LOAD_CONST               'milestone_id'
              304  STORE_MAP        

 L. 358       305  LOAD_FAST             0  'tup'
              308  LOAD_CONST               14
              311  BINARY_SUBSCR    
              312  LOAD_CONST               'milestone_name'
              315  STORE_MAP        

 L. 359       316  LOAD_FAST             0  'tup'
              319  LOAD_CONST               15
              322  BINARY_SUBSCR    
              323  LOAD_CONST               'version_id'
              326  STORE_MAP        

 L. 360       327  LOAD_FAST             0  'tup'
              330  LOAD_CONST               16
              333  BINARY_SUBSCR    
              334  LOAD_CONST               'version_name'
              337  STORE_MAP        

 L. 361       338  LOAD_FAST             0  'tup'
              341  LOAD_CONST               17
              344  BINARY_SUBSCR    
              345  LOAD_CONST               'upvotes'
              348  STORE_MAP        

 L. 362       349  LOAD_FAST             0  'tup'
              352  LOAD_CONST               18
              355  BINARY_SUBSCR    
              356  LOAD_CONST               'downvotes'
              359  STORE_MAP        

 L. 363       360  LOAD_FAST             3  'age'
              363  LOAD_CONST               'age'
              366  STORE_MAP        
              367  STORE_FAST            4  'd'

 L. 365       370  LOAD_GLOBAL          17  'tckcomp'
              373  LOAD_ATTR            18  'computefilters'
              376  LOAD_FAST             4  'd'
              379  LOAD_CONST               'tckfilters'
              382  LOAD_GLOBAL           3  'c'
              385  LOAD_ATTR            19  'tckfilters'
              388  CALL_FUNCTION_257   257  None
              391  LOAD_CONST               0
              394  BINARY_SUBSCR    
              395  STORE_FAST            4  'd'

 L. 366       398  LOAD_GLOBAL           3  'c'
              401  LOAD_ATTR            20  'stdfilter'
              404  JUMP_IF_FALSE        27  'to 434'
            407_0  THEN                     434
              407  POP_TOP          
              408  LOAD_FAST             4  'd'
              411  LOAD_ATTR            21  'get'
              414  LOAD_GLOBAL           3  'c'
              417  LOAD_ATTR            20  'stdfilter'
              420  LOAD_GLOBAL          22  'True'
              423  CALL_FUNCTION_2       2  None
              426  JUMP_IF_FALSE         9  'to 438'
            429_0  THEN                     434
              429  POP_TOP          
              430  LOAD_FAST             4  'd'
              433  RETURN_END_IF    
              434  POP_TOP          
              435  LOAD_FAST             4  'd'
              438  RETURN_VALUE     

Parse error at or near `LOAD_FAST' instruction at offset 435

        c.tckfilters = h.compile_tckfilters(tckfilters)
        savfilters = dict([ (tf.id, h.json.loads(tf.filterbyjson)) for tf in tckcomp.get_ticketfilter(user=c.authuser)
                          ])
        filters = savfilters.get(c.savfilter, {})
        tcklist = sorted(tckcomp.ticketlist(project=c.project, filters=filters).values(), key=lambda l: l[0], reverse=True)
        _tl = h.todojoreadstore(tcklist, format_item, id='id', label='ticket_id')
        return _tl

    @h.authorize(h.HasPermname('TICKET_VIEW'))
    def _json_tckattachs(self):
        """JSON: { id : [ id, url, filename, summary ], ... } """
        return json.dumps(c.ticket and self._ticketattachs(c.ticket) or {})

    @h.authorize(h.HasPermname('TICKET_VIEW'))
    def _json_tcktags(self):
        """JSON: { tagname : tagname ... } """
        return json.dumps(c.ticket and self._tickettags(c.ticket) or {})

    @h.authorize(h.HasPermname('TICKET_VIEW'))
    def _json_tckcomments(self):
        """JSON: { id : 'ticket_comment_id',
                   label : 'ticket_comment_id',
                   items: [ { ticket_comment_id : tcmt.id,
                              commentby         : tcmt.commentby.username,
                              text              : tcmt.text,
                              html              : tcmt.texthtml,
                              commentbyicon     : usericon,
                              commentbyurl      : userurl,
                              datestr           : tcmt.created_on },
                            ... ]
                 }"""

        def format_item(qres):
            d = {'ticket_comment_id': qres[0], 
               'commentby': qres[4], 
               'text': qres[1], 
               'html': qres[2], 
               'commentbyicon': '', 
               'commentbyurl': h.url_foruser(qres[4]), 
               'datestr': h.utc_2_usertz(qres[3], c.authuser.timezone).strftime('%d %b %Y, %r')}
            return d

        return h.todojoreadstore(tckcomp.tckcomments(c.ticket.id), format_item, id='ticket_comment_id', label='ticket_comment_id')

    @h.authorize(h.HasPermname('TICKET_VIEW'))
    def _json_tckrcomments(self):
        """JSON: { id : 'ticket_comment_id',
                   label: 'ticket_comment_id',
                   items: [ { ticket_comment_id : tcmt.id,
                              commentby         : tcmt.commentby.username ,
                              text              : tcmt.text,
                              html              : tcmt.texthtml,
                              commentbyicon     : usericon,
                              commentbyurl      : userurl,
                              datestr           : tcmt.created_on },
                            ... ]
                 }"""

        def format_item(qres):
            d = {'ticket_comment_id': qres[0], 
               'commentby': qres[4], 
               'text': qres[1], 
               'html': qres[2], 
               'commentbyicon': '', 
               'commentbyurl': h.url_foruser(qres[4]), 
               'datestr': h.utc_2_usertz(qres[3], c.authuser.timezone).strftime('%d %b %Y, %r')}
            return d

        tcomments = tckcomp.tckrcomments(c.ticket.id)
        items = []
        while tcomments:
            tcomment = tcomments.pop(0)
            d_tcmt = format_item(tcomment)
            d_tcmt.setdefault('replies', [ format_item(rtcomment) for rtcomment in tcomment[(-1)] ])
            items.append(d_tcmt)

        return h.todojoreadstore(items, lambda v: v, id='ticket_comment_id', label='ticket_comment_id')

    @h.authorize(h.HasPermname('TICKET_VIEW'))
    def ticketindex(self, environ, projectname):
        """Project tickets"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=2)
        viewuserpanes(projectname=projectname)
        _url(projectname, id='')
        kwargs = {'projectname': projectname}
        c.stdfilter and kwargs.update({'stdfilter': c.stdfilter})
        c.savfilter and kwargs.update({'savfilter': c.savfilter})
        _urlticketlist(**kwargs)
        if c.form == 'submit' and c.formname in tckperm and not h.authorized(tckperm[c.formname]):
            return 'Do not have %s permission !!' % tckperm[c.formname]
        else:
            if c.form in ('submit', 'request'):
                try:
                    vf.process(request, c, user=c.authuser)
                except ZetaFormError, (errmsg,):
                    response.status_int = 400
                    return errmsg

            c.project = c.project or projcomp.get_project(projectname)
            c.tckfilters = h.compile_tckfilters(tckfilters)
            c.title = '-Skip-'
            html = ''
            if c.view == 'js' and c.jsonobj:
                func = getattr(self, '_json_' + c.jsonobj, None)
                if func:
                    html = func()
            elif c.view != 'js' and not (c.stdfilter or c.savfilter) and c.tckfilters:
                h.redirect_to(h.r_projtickets, projectname=projectname, stdfilter=c.tckfilters[0][0])
            elif c.view != 'js':
                c.projtckids = tckcomp.ticketids(c.project)
                c.seltickets = map(lambda id: [
                 h.url_forticket(projectname, id),
                 str(id)], c.projtckids)
                c.tck_typenames = tckcomp.tcktypenames
                c.tck_statusnames = tckcomp.tckstatusnames
                c.tck_severitynames = tckcomp.tckseveritynames
                (c.pcomponents, c.pmilestones, c.pversions, c.projusers) = tckcomp.projdetails(c.project)
                c.projusers = list(set(c.projusers + [c.project.admin.username]))
                c.pcompnames = sorted([ comp[0] for comp in c.pcomponents ])
                c.mstnnames = sorted([ mstn[0] for mstn in c.pmilestones ])
                c.vernames = sorted([ ver[0] for ver in c.pversions ])
                c.title = 'Ticket:list'
                c.tckeditable = h.authorized(h.HasPermname('TICKET_CREATE'))
                c.tckccodes = h.tckccodes
                c.tstat_resolv = h.parse_csv(c.sysentries.get('ticketresolv', ''))
                userfilters = tckcomp.get_ticketfilter(user=c.authuser)
                c.savfilterlist = dict([ (tf.id, [tf.name, tf.filterbyjson]) for tf in userfilters
                                       ])
                c.savfilterval = c.savfilterlist.get(c.savfilter, ['', ''])
                c.savfiltername = c.savfilterval[0]
                c.savfilterlist = [ [h.url_fortcklist(c.projectname, savfilter=k), v[0]] for (k, v) in c.savfilterlist.iteritems()
                                  ]
                html = render('/derived/projects/ticketindex.html')
            return html

    @h.authorize(h.HasPermname('TICKET_CREATE'))
    def createticket(self, environ, projectname):
        """Create ticket"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=2)
        viewuserpanes(projectname=projectname)
        _url(projectname, id='')
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.form == 'submit':
            h.flash(MESSAGE_FLASH + 'Created ticket ...')
            c.title = '-Skip-'
            h.redirect_to(h.r_projtckcreate, projectname=projectname, action='createticket', form='request', formname='createtck')
        else:
            c.project = c.project or projcomp.get_project(projectname)
            c.seltickets = map(lambda id: [
             h.url_forticket(projectname, id),
             str(id)], tckcomp.ticketids(c.project))
            c.tck_typenames = tckcomp.tcktypenames
            c.tck_statusnames = tckcomp.tckstatusnames
            c.tck_severitynames = tckcomp.tckseveritynames
            (c.pcomponents, c.pmilestones, c.pversions, c.projusers) = tckcomp.projdetails(c.project)
            c.projusers = list(set(c.projusers + [c.project.admin.username]))
            c.pcompnames = sorted([ comp[0] for comp in c.pcomponents ])
            c.mstnnames = sorted([ mstn[0] for mstn in c.pmilestones ])
            c.vernames = sorted([ ver[0] for ver in c.pversions ])
            c.pcomponents = [ (tup[1], tup[0]) for tup in c.pcomponents ]
            c.pmilestones = [ (tup[1], tup[0]) for tup in c.pmilestones ]
            c.pversions = [ (tup[1], tup[0]) for tup in c.pversions ]
            c.title = 'CreateTicket'
            c.tckeditable = h.authorized(h.HasPermname('TICKET_CREATE'))
            html = render('/derived/projects/ticketcreate.html')
            h.flash.pop_messages()
        return html

    @h.authorize(h.HasPermname('TICKET_VIEW'))
    def ticket(self, environ, projectname, id):
        """Each ticket"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=2)
        viewuserpanes(projectname=projectname)
        _url(projectname, id=id)
        if c.form == 'submit' and c.formname in tckperm and not h.authorized(tckperm[c.formname]):
            return 'Do not have %s permission !!' % tckperm[c.formname]
        else:
            if c.form in ('submit', 'request'):
                try:
                    vf.process(request, c, user=c.authuser)
                except ZetaFormError, (errmsg,):
                    response.status_int = 400
                    return errmsg

            c.projectname = projectname
            if not c.jsonobj:
                c.project = c.project or projcomp.get_project(projectname)
                c.ticket = c.ticket or tckcomp.get_ticket(c.ticket_id)
                c.seltickets = map(lambda id: [
                 h.url_forticket(projectname, id),
                 str(id)], tckcomp.ticketids(c.project))
                c.tckccodes = h.tckccodes
                c.tck_typenames = tckcomp.tcktypenames
                c.tck_statusnames = tckcomp.tckstatusnames
                c.tck_severitynames = tckcomp.tckseveritynames
                (c.pcomponents, c.pmilestones, c.pversions, c.projusers) = tckcomp.projdetails(c.project)
                c.pcomponents = [ (tup[1], tup[0]) for tup in c.pcomponents ]
                c.pmilestones = [ (tup[1], tup[0]) for tup in c.pmilestones ]
                c.pversions = [ (tup[1], tup[0]) for tup in c.pversions ]
                c.title = 'Ticket:%s' % id
                c.tckeditable = h.authorized(h.HasPermname('TICKET_CREATE'))
                c.items_tckcomments = self._json_tckcomments()
                c.attachs = self._ticketattachs(c.ticket)
                c.tags = self._tickettags(c.ticket)
                c.isuserfavorite = tckcomp.isfavorite(c.authuser.id, c.ticket.id)
                c.ticketdetail = tckcomp.ticketdetails(c.ticket)
                c.ticketstatus = tckcomp.ticketstatus(c.ticket)
                c.blockers = tckcomp.blockersof(c.ticket)
                c.blocking = tckcomp.blockingfor(c.ticket)
                c.children = tckcomp.childrenfor(c.ticket)
                c.ticketresolv = h.parse_csv(c.sysentries.get('ticketresolv', ''))
            html = ''
            if c.view == 'js' and c.formname in ('addtckattachs', ):
                html = IFRAME_RET
            elif c.jsonobj and c.view == 'js':
                func = getattr(self, '_json_' + c.jsonobj, None)
                if func:
                    html = func()
            elif c.textobj and c.view == 'text':
                func = getattr(self, '_text_' + c.textobj, None)
                if func:
                    html = func()
            elif c.view != 'js':
                c.att_editable = c.tckeditable
                c.tag_editable = c.tckeditable
                uservote = votcomp.get_ticketvote(c.authuser, c.ticket)
                votes = tckcomp.countvotes(ticket=c.ticket)
                c.upvotes = votes.get('up', 0)
                c.downvotes = votes.get('down', 0)
                c.currvote = uservote and uservote.votedas or ''
                html = render('/derived/projects/ticket.html')
            return html

    @h.authorize(h.HasPermname('TICKET_VIEW'))
    def ticketgraph(self, environ, projectname, id, file):
        """Each ticket"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=2)
        viewuserpanes(projectname=projectname)
        _url(projectname, id=id)
        c.ticket = c.ticket or tckcomp.get_ticket(c.ticket_id)
        c.tckccodes = h.tckccodes
        html = ''
        if file == 'graph.svg':
            tckdeps = gviz.calctckdep(tckcomp.allblockers(), tckcomp.ticketdeps())
            c.svgdep = gviz.tosvgtext(gviz.tckdeptodot(c.ticket.id, tckdeps, c.tckccodes))
            html = c.svgdep
            response.content_type = 'image/svg+xml'
        elif file == 'tree.svg':
            tckhier = gviz.calctckhier(tckcomp.allparchild(), tckcomp.ticketdeps())
            c.svghier = gviz.tosvgtext(gviz.tckhiertodot(c.ticket.id, tckhier, c.tckccodes))
            html = c.svghier
            response.content_type = 'image/svg+xml'
        if file == 'graph.png':
            tckdeps = gviz.calctckdep(tckcomp.allblockers(), tckcomp.ticketdeps())
            c.pngdep = gviz.topng(gviz.tckdeptodot(c.ticket.id, tckdeps, c.tckccodes))
            html = c.pngdep
            response.content_type = 'image/png'
        elif file == 'tree.png':
            tckhier = gviz.calctckhier(tckcomp.allparchild(), tckcomp.ticketdeps())
            c.pnghier = gviz.topng(gviz.tckhiertodot(c.ticket.id, tckhier, c.tckccodes))
            html = c.pnghier
            response.content_type = 'image/png'
        return html

    @h.authorize(h.HasPermname(['TICKET_VIEW']))
    def timeline(self, environ, projectname, id=''):
        """Activities under project tickets or individual ticket"""
        logid = request.params.get('logid', None)
        dir = request.params.get('dir', None)
        fromoff = request.params.get('fromoff', 1)
        logid = logid and int(logid)
        fromoff = int(fromoff)
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=2)
        viewuserpanes(projectname=projectname)
        _url(projectname, id=id)
        c.project = c.project or projcomp.get_project(projectname)
        c.seltickets = map(lambda id: [
         h.url_forticket(projectname, id),
         str(id)], tckcomp.ticketids(c.project))
        c.ticket = id and tckcomp.get_ticket(int(id)) or None
        routeargs = {'projectname': projectname}
        id and routeargs.update({'id': id})
        if id:
            h.tline_controller(c, h.r_projtcktline, routeargs, 'ticket', fromoff, logid, dir, c.ticket)
            c.title = 'Ticket:%s:timeline' % id
        else:
            h.tline_controller(c, h.r_projtckstline, routeargs, [
             'ticket', 'project'], fromoff, logid, dir, c.project)
            c.title = 'Tickets:timeline'
        (c.datatline, c.startdt) = h.tlineplot(c.logs[:])
        return render('/derived/projects/tickettline.html')

    def feed(self, environ, projectname, id=''):
        """Activities under project tickets or individual ticket"""
        host = environ['HTTP_HOST']
        script = environ['SCRIPT_NAME']
        c.project = c.project or projcomp.get_project(projectname)
        c.ticket = id and tckcomp.get_ticket(int(id)) or None
        routeargs = {'projectname': projectname}
        id and routeargs.update({'id': id})
        if id:
            h.tline_controller(c, h.r_projtcktline, routeargs, 'ticket', 1, None, None, c.ticket)
            title = '%s-ticket:(%s)' % (projectname, id)
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for ticket %s in project %s' % (id, projectname)
        else:
            h.tline_controller(c, h.r_projtckstline, routeargs, [
             'ticket', 'project'], 1, None, None, c.project)
            title = '%s:tickets' % projectname
            link = 'http://%s%s' % (host, script)
            descr = 'Timeline for tickets in project %s' % projectname
        feed = h.FeedGen(title, link, descr)
        for l in c.logs:
            (summary, lnk, content) = h.log2feed(l)
            feed.add_item(summary, '%s%s' % (link, lnk), content, pubdate=l.created_on, unique_id=str(l.id), author_name=l.user.username)

        response.content_type = 'application/atom+xml'
        feedhtml = feed.writeString('utf-8')
        return feedhtml

    @h.authorize(h.HasPermname(['TICKET_VIEW']))
    def charts(self, environ, projectname):
        """Charts and analytics for project tickets"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=2)
        viewuserpanes(projectname=projectname)
        _url(projectname, id='')
        c.tcka = ca.get_analyticobj('tickets')
        c.chart21_data = getattr(c.tcka, 'chart21_data', {}).get(c.project.id, [])
        c.chart22_data = getattr(c.tcka, 'chart22_data', {}).get(c.project.id, [])
        c.chart22_usrs = getattr(c.tcka, 'chart22_usrs', {}).get(c.project.id, [])
        c.chart23_data = getattr(c.tcka, 'chart23_data', {}).get(c.project.id, [])
        c.chart24_data = getattr(c.tcka, 'chart24_data', {}).get(c.project.id, [])
        c.chart25_data = getattr(c.tcka, 'chart25_data', {}).get(c.project.id, [])
        c.chart26_data = getattr(c.tcka, 'chart26_data', {}).get(c.project.id, [])
        c.chart26_usrs = getattr(c.tcka, 'chart26_users', {}).get(c.project.id, [])
        c.title = 'TicketCharts'
        html = render('/derived/projects/ticketcharts.html')
        return html

    @h.authorize(h.HasPermname(['TICKET_VIEW']))
    def attachs(self, environ, projectname):
        """Action to present attachment page for tickets under project 
        `projectname`"""
        viewcontext(projectname=projectname)
        viewprojectpanel(projectname=projectname, activetab=2)
        viewuserpanes(projectname=projectname)
        _url(projectname=projectname)
        if c.form in ('submit', 'request'):
            try:
                vf.process(request, c, user=c.authuser)
            except ZetaFormError, (errmsg,):
                response.status_int = 400
                return errmsg

        if c.view != 'js':
            attachments = tckcomp.attachments(c.project)
            c.attachments = {}
            for tkey in attachments:
                adict = attachments[tkey]
                attachs = [ [aid] + adict[aid][:-1] + [(', ').join(adict[aid][(-1)])] + [h.url_for(h.r_attachdownl, id=aid)] for aid in adict
                          ]
                c.attachments[tkey] = attachs

            c.editable = h.authorized(h.HasPermname('TICKET_CREATE'))
            c.title = 'TicketAttachs'
            html = render('/derived/projects/tckattachs.html')
        else:
            html = ''
        return html

    def __after__(self):
        """Called calling any actions under this controller"""
        aftercontrollers()