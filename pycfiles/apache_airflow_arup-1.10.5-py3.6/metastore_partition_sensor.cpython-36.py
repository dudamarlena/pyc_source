# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.7-x86_64/egg/airflow/sensors/metastore_partition_sensor.py
# Compiled at: 2019-09-11 03:47:34
# Size of source mod 2**32: 3427 bytes
from airflow.sensors.sql_sensor import SqlSensor
from airflow.utils.decorators import apply_defaults

class MetastorePartitionSensor(SqlSensor):
    __doc__ = "\n    An alternative to the HivePartitionSensor that talk directly to the\n    MySQL db. This was created as a result of observing sub optimal\n    queries generated by the Metastore thrift service when hitting\n    subpartitioned tables. The Thrift service's queries were written in a\n    way that wouldn't leverage the indexes.\n\n    :param schema: the schema\n    :type schema: str\n    :param table: the table\n    :type table: str\n    :param partition_name: the partition name, as defined in the PARTITIONS\n        table of the Metastore. Order of the fields does matter.\n        Examples: ``ds=2016-01-01`` or\n        ``ds=2016-01-01/sub=foo`` for a sub partitioned table\n    :type partition_name: str\n    :param mysql_conn_id: a reference to the MySQL conn_id for the metastore\n    :type mysql_conn_id: str\n    "
    template_fields = ('partition_name', 'table', 'schema')
    ui_color = '#8da7be'

    @apply_defaults
    def __init__(self, table, partition_name, schema='default', mysql_conn_id='metastore_mysql', *args, **kwargs):
        self.partition_name = partition_name
        self.table = table
        self.schema = schema
        self.first_poke = True
        self.conn_id = mysql_conn_id
        (super(SqlSensor, self).__init__)(*args, **kwargs)

    def poke(self, context):
        if self.first_poke:
            self.first_poke = False
            if '.' in self.table:
                self.schema, self.table = self.table.split('.')
            self.sql = "\n            SELECT 'X'\n            FROM PARTITIONS A0\n            LEFT OUTER JOIN TBLS B0 ON A0.TBL_ID = B0.TBL_ID\n            LEFT OUTER JOIN DBS C0 ON B0.DB_ID = C0.DB_ID\n            WHERE\n                B0.TBL_NAME = '{self.table}' AND\n                C0.NAME = '{self.schema}' AND\n                A0.PART_NAME = '{self.partition_name}';\n            ".format(self=self)
        return super(MetastorePartitionSensor, self).poke(context)