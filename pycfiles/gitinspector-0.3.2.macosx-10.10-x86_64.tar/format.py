# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/hugo/.virtualenvs/gitinspector/lib/python2.7/site-packages/gitinspector/format.py
# Compiled at: 2015-08-05 12:31:15
from __future__ import print_function
from __future__ import unicode_literals
import localization, version, base64, basedir, os, terminal, textwrap, time, zipfile
__available_formats__ = [
 b'html', b'htmlembedded', b'text', b'xml']
DEFAULT_FORMAT = __available_formats__[2]
__selected_format__ = DEFAULT_FORMAT

class InvalidFormatError(Exception):

    def __init__(self, msg):
        super(InvalidFormatError, self).__init__(msg)
        self.msg = msg


def select(format):
    global __selected_format__
    __selected_format__ = format
    return format in __available_formats__


def get_selected():
    return __selected_format__


def is_interactive_format():
    return __selected_format__ == b'text'


def __output_html_template__(name):
    template_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), name)
    file_r = open(template_path, b'rb')
    return file_r.read().decode(b'utf-8', b'replace')


def __get_zip_file_content__(name, file_name=b'/html/flot.zip'):
    zip_file = zipfile.ZipFile(basedir.get_basedir() + file_name, b'r')
    content = zip_file.read(name)
    zip_file.close()
    return content.decode(b'utf-8', b'replace')


def output_header():
    if __selected_format__ == b'html' or __selected_format__ == b'htmlembedded':
        base = basedir.get_basedir()
        html_header = __output_html_template__(base + b'/html/html.header')
        tablesorter_js = __get_zip_file_content__(b'jquery.tablesorter.min.js', b'/html/jquery.tablesorter.min.js.zip').encode(b'latin-1', b'replace')
        tablesorter_js = tablesorter_js.decode(b'utf-8', b'ignore')
        flot_js = __get_zip_file_content__(b'jquery.flot.js')
        pie_js = __get_zip_file_content__(b'jquery.flot.pie.js')
        resize_js = __get_zip_file_content__(b'jquery.flot.resize.js')
        logo_file = open(base + b'/html/gitinspector_piclet.png', b'rb')
        logo = logo_file.read()
        logo_file.close()
        logo = base64.b64encode(logo)
        if __selected_format__ == b'htmlembedded':
            jquery_js = b'>' + __get_zip_file_content__(b'jquery.js')
        else:
            jquery_js = b' src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js">'
        print(html_header.format(title=_(b'Repository statistics for {0}').format(os.path.basename(basedir.get_basedir_git())), jquery=jquery_js, jquery_tablesorter=tablesorter_js, jquery_flot=flot_js, jquery_flot_pie=pie_js, jquery_flot_resize=resize_js, logo=logo.decode(b'utf-8', b'replace'), logo_text=_(b'The output has been generated by {0} {1}. The statistical analysis tool for git repositories.').format(b'<a href="https://gitinspector.googlecode.com">gitinspector</a>', version.__version__), repo_text=_(b"Statistical information for the repository '{0}' was gathered on {1}.").format(os.path.basename(basedir.get_basedir_git()), localization.get_date()), show_minor_authors=_(b'Show minor authors'), hide_minor_authors=_(b'Hide minor authors'), show_minor_rows=_(b'Show rows with minor work'), hide_minor_rows=_(b'Hide rows with minor work')))
    elif __selected_format__ == b'xml':
        print(b'<gitinspector>')
        print(b'\t<version>' + version.__version__ + b'</version>')
        print(b'\t<repository>' + os.path.basename(basedir.get_basedir_git()) + b'</repository>')
        print(b'\t<report-date>' + time.strftime(b'%Y/%m/%d') + b'</report-date>')
    else:
        print(textwrap.fill(_(b"Statistical information for the repository '{0}' was gathered on {1}.").format(os.path.basename(basedir.get_basedir_git()), localization.get_date()), width=terminal.get_size()[0]))


def output_footer():
    if __selected_format__ == b'html' or __selected_format__ == b'htmlembedded':
        base = basedir.get_basedir()
        html_footer = __output_html_template__(base + b'/html/html.footer')
        print(html_footer)
    elif __selected_format__ == b'xml':
        print(b'</gitinspector>')