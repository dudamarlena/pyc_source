# uncompyle6 version 3.7.4
# Python bytecode 2.5 (62131)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.5-i386/egg/scikits/ann/info.py
# Compiled at: 2008-01-29 21:41:27
__doc_title__ = 'The Approximate Nearest Neighbor library'
__doc__ = "The ANN module provides a numpy-compatible python wrapper around the Approximate Nearest Neighbor library.\n\nThe Approximate Nearest Neighbor library is available from http://www.cs.umd.edu/~mount/ANN/.\n\n* Installation *\nDownload and build the Approximate Nearest Neighbor library. Modify the line in this package's setup.py file so that ANN_ROOT is the path to the root of the Approximate Nearest Neighbor library source tree.\n\nRun ::\n\n    python setup.py build\n    python setup.py test\n    sudo python setup.py install\n\nfrom within the source directory.\n\n* Usage *\nscikits.ann exposes a single class, kdtree that wraps the Approximate Nearest Neighbor library's kd-tree implementation. kdtree has a single (non-constructor) method, knn that finds the indecies (of the points used to construct the kdtree) of the k-nearest neighbors and the squared distances to those points. A little example will probably be much more enlightening::\n    >>> import scikits.ann as ann\n    \n    >>> import numpy as np\n\n    >>> k=ann.kdtree(np.array([[0.,0],[1,0],[1.5,2]]))\n\n    >>> k.knn([0,.2],1)\n    (array([[0]]), array([[ 0.04]]))\n\n    >>> k.knn([0,.2],2)\n    (array([[0, 1]]), array([[ 0.04,  1.04]]))\n\n    >>> k.knn([[0,.2],[.1,2],[3,1],[0,0]],2)\n    (array([[0, 1],\n           [2, 0],\n           [2, 1],\n           [1, 2]]), array([[ 0.04,  1.04],\n           [ 1.96,  4.01],\n           [ 3.25,  5.  ],\n           [ 1.  ,  6.25]]))\n\n    >>> k.knn([[0,.2],[.1,2],[3,1],[0,0]],3)\n    (array([[ 0,  1,  2],\n           [ 2,  0,  1],\n           [ 2,  1,  0],\n           [ 1,  2, -1]]), array([[  4.00000000e-002,   1.04000000e+000,   5.49000000e+000],\n           [  1.96000000e+000,   4.01000000e+000,   4.81000000e+000],\n           [  3.25000000e+000,   5.00000000e+000,   1.00000000e+001],\n           [  1.00000000e+000,   6.25000000e+000,   1.79769313e+308]]))\n    \n"