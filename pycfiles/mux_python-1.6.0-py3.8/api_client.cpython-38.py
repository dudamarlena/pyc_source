# uncompyle6 version 3.7.4
# Python bytecode 3.8 (3413)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.14-x86_64/egg/mux_python/api_client.py
# Compiled at: 2020-03-11 08:26:48
# Size of source mod 2**32: 24776 bytes
"""
Mux Python - Copyright 2019 Mux Inc.

NOTE: This class is auto generated. Do not edit the class manually.
"""
from __future__ import absolute_import
import datetime, json, mimetypes
from multiprocessing.pool import ThreadPool
import os, re, tempfile, six
from six.moves.urllib.parse import quote
from mux_python.configuration import Configuration
import mux_python.models
from mux_python import rest

class ApiClient(object):
    __doc__ = 'Generic API client for OpenAPI client library builds.\n\n    OpenAPI generic API client. This client handles the client-\n    server communication, and is invariant across implementations. Specifics of\n    the methods and models for each application are generated from the OpenAPI\n    templates.\n\n    NOTE: This class is auto generated by OpenAPI Generator.\n    Ref: https://openapi-generator.tech\n    Do not edit the class manually.\n\n    :param configuration: .Configuration object for this client\n    :param header_name: a header to pass when making calls to the API.\n    :param header_value: a header value to pass when making calls to\n        the API.\n    :param cookie: a cookie to include in the header when making calls\n        to the API\n    :param pool_threads: The number of threads to use for async requests\n        to the API. More threads means more concurrent API requests.\n    '
    PRIMITIVE_TYPES = (
     float, bool, bytes, six.text_type) + six.integer_types
    NATIVE_TYPES_MAPPING = {'int':int, 
     'long':int if six.PY3 else long, 
     'float':float, 
     'str':str, 
     'bool':bool, 
     'date':datetime.date, 
     'datetime':datetime.datetime, 
     'object':object}
    _pool = None

    def __init__(self, configuration=None, header_name=None, header_value=None, cookie=None, pool_threads=1):
        if configuration is None:
            configuration = Configuration()
        self.configuration = configuration
        self.pool_threads = pool_threads
        self.rest_client = rest.RESTClientObject(configuration)
        self.default_headers = {}
        if header_name is not None:
            self.default_headers[header_name] = header_value
        self.cookie = cookie
        self.user_agent = 'Mux Python | 1.6.0'

    def __del__(self):
        if self._pool:
            self._pool.close()
            self._pool.join()
            self._pool = None

    @property
    def pool(self):
        """Create thread pool on first request
         avoids instantiating unused threadpool for blocking clients.
        """
        if self._pool is None:
            self._pool = ThreadPool(self.pool_threads)
        return self._pool

    @property
    def user_agent(self):
        """User agent for this API client"""
        return self.default_headers['User-Agent']

    @user_agent.setter
    def user_agent(self, value):
        self.default_headers['User-Agent'] = value

    def set_default_header(self, header_name, header_value):
        self.default_headers[header_name] = header_value

    def __call_api(self, resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_type=None, auth_settings=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None):
        config = self.configuration
        header_params = header_params or {}
        header_params.update(self.default_headers)
        if self.cookie:
            header_params['Cookie'] = self.cookie
        if header_params:
            header_params = self.sanitize_for_serialization(header_params)
            header_params = dict(self.parameters_to_tuples(header_params, collection_formats))
        if path_params:
            path_params = self.sanitize_for_serialization(path_params)
            path_params = self.parameters_to_tuples(path_params, collection_formats)
            for k, v in path_params:
                resource_path = resource_path.replace('{%s}' % k, quote((str(v)), safe=(config.safe_chars_for_path_param)))

        if query_params:
            query_params = self.sanitize_for_serialization(query_params)
            query_params = self.parameters_to_tuples(query_params, collection_formats)
        if post_params or files:
            post_params = self.prepare_post_parameters(post_params, files)
            post_params = self.sanitize_for_serialization(post_params)
            post_params = self.parameters_to_tuples(post_params, collection_formats)
        self.update_params_for_auth(header_params, query_params, auth_settings)
        if body:
            body = self.sanitize_for_serialization(body)
        else:
            url = self.configuration.host + resource_path
            response_data = self.request(method,
              url, query_params=query_params, headers=header_params, post_params=post_params,
              body=body,
              _preload_content=_preload_content,
              _request_timeout=_request_timeout)
            self.last_response = response_data
            return_data = response_data
            if _preload_content:
                if response_type:
                    return_data = self.deserialize(response_data, response_type)
                else:
                    return_data = None
        if _return_http_data_only:
            return return_data
        return (return_data, response_data.status,
         response_data.getheaders())

    def sanitize_for_serialization--- This code section failed: ---

 L. 195         0  LOAD_DEREF               'obj'
                2  LOAD_CONST               None
                4  COMPARE_OP               is
                6  POP_JUMP_IF_FALSE    12  'to 12'

 L. 196         8  LOAD_CONST               None
               10  RETURN_VALUE     
             12_0  COME_FROM             6  '6'

 L. 197        12  LOAD_GLOBAL              isinstance
               14  LOAD_DEREF               'obj'
               16  LOAD_DEREF               'self'
               18  LOAD_ATTR                PRIMITIVE_TYPES
               20  CALL_FUNCTION_2       2  ''
               22  POP_JUMP_IF_FALSE    28  'to 28'

 L. 198        24  LOAD_DEREF               'obj'
               26  RETURN_VALUE     
             28_0  COME_FROM            22  '22'

 L. 199        28  LOAD_GLOBAL              isinstance
               30  LOAD_DEREF               'obj'
               32  LOAD_GLOBAL              list
               34  CALL_FUNCTION_2       2  ''
               36  POP_JUMP_IF_FALSE    56  'to 56'

 L. 200        38  LOAD_CLOSURE             'self'
               40  BUILD_TUPLE_1         1 
               42  LOAD_LISTCOMP            '<code_object <listcomp>>'
               44  LOAD_STR                 'ApiClient.sanitize_for_serialization.<locals>.<listcomp>'
               46  MAKE_FUNCTION_8          'closure'

 L. 201        48  LOAD_DEREF               'obj'

 L. 200        50  GET_ITER         
               52  CALL_FUNCTION_1       1  ''
               54  RETURN_VALUE     
             56_0  COME_FROM            36  '36'

 L. 202        56  LOAD_GLOBAL              isinstance
               58  LOAD_DEREF               'obj'
               60  LOAD_GLOBAL              tuple
               62  CALL_FUNCTION_2       2  ''
               64  POP_JUMP_IF_FALSE    88  'to 88'

 L. 203        66  LOAD_GLOBAL              tuple
               68  LOAD_CLOSURE             'self'
               70  BUILD_TUPLE_1         1 
               72  LOAD_GENEXPR             '<code_object <genexpr>>'
               74  LOAD_STR                 'ApiClient.sanitize_for_serialization.<locals>.<genexpr>'
               76  MAKE_FUNCTION_8          'closure'

 L. 204        78  LOAD_DEREF               'obj'

 L. 203        80  GET_ITER         
               82  CALL_FUNCTION_1       1  ''
               84  CALL_FUNCTION_1       1  ''
               86  RETURN_VALUE     
             88_0  COME_FROM            64  '64'

 L. 205        88  LOAD_GLOBAL              isinstance
               90  LOAD_DEREF               'obj'
               92  LOAD_GLOBAL              datetime
               94  LOAD_ATTR                datetime
               96  LOAD_GLOBAL              datetime
               98  LOAD_ATTR                date
              100  BUILD_TUPLE_2         2 
              102  CALL_FUNCTION_2       2  ''
              104  POP_JUMP_IF_FALSE   114  'to 114'

 L. 206       106  LOAD_DEREF               'obj'
              108  LOAD_METHOD              isoformat
              110  CALL_METHOD_0         0  ''
              112  RETURN_VALUE     
            114_0  COME_FROM           104  '104'

 L. 208       114  LOAD_GLOBAL              isinstance
              116  LOAD_DEREF               'obj'
              118  LOAD_GLOBAL              dict
              120  CALL_FUNCTION_2       2  ''
              122  POP_JUMP_IF_FALSE   130  'to 130'

 L. 209       124  LOAD_DEREF               'obj'
              126  STORE_FAST               'obj_dict'
              128  JUMP_FORWARD        156  'to 156'
            130_0  COME_FROM           122  '122'

 L. 216       130  LOAD_CLOSURE             'obj'
              132  BUILD_TUPLE_1         1 
              134  LOAD_DICTCOMP            '<code_object <dictcomp>>'
              136  LOAD_STR                 'ApiClient.sanitize_for_serialization.<locals>.<dictcomp>'
              138  MAKE_FUNCTION_8          'closure'

 L. 217       140  LOAD_GLOBAL              six
              142  LOAD_METHOD              iteritems
              144  LOAD_DEREF               'obj'
              146  LOAD_ATTR                openapi_types
              148  CALL_METHOD_1         1  ''

 L. 216       150  GET_ITER         
              152  CALL_FUNCTION_1       1  ''
              154  STORE_FAST               'obj_dict'
            156_0  COME_FROM           128  '128'

 L. 220       156  LOAD_CLOSURE             'self'
              158  BUILD_TUPLE_1         1 
              160  LOAD_DICTCOMP            '<code_object <dictcomp>>'
              162  LOAD_STR                 'ApiClient.sanitize_for_serialization.<locals>.<dictcomp>'
              164  MAKE_FUNCTION_8          'closure'

 L. 221       166  LOAD_GLOBAL              six
              168  LOAD_METHOD              iteritems
              170  LOAD_FAST                'obj_dict'
              172  CALL_METHOD_1         1  ''

 L. 220       174  GET_ITER         
              176  CALL_FUNCTION_1       1  ''
              178  RETURN_VALUE     
               -1  RETURN_LAST      

Parse error at or near `LOAD_DICTCOMP' instruction at offset 134

    def deserialize(self, response, response_type):
        """Deserializes response into an object.

        :param response: RESTResponse object to be deserialized.
        :param response_type: class literal for
            deserialized object, or string of class name.

        :return: deserialized object.
        """
        if response_type == 'file':
            return self._ApiClient__deserialize_file(response)
        try:
            data = json.loads(response.data)
        except ValueError:
            data = response.data
        else:
            return self._ApiClient__deserialize(data, response_type)

    def __deserialize--- This code section failed: ---

 L. 253         0  LOAD_FAST                'data'
                2  LOAD_CONST               None
                4  COMPARE_OP               is
                6  POP_JUMP_IF_FALSE    12  'to 12'

 L. 254         8  LOAD_CONST               None
               10  RETURN_VALUE     
             12_0  COME_FROM             6  '6'

 L. 256        12  LOAD_GLOBAL              type
               14  LOAD_FAST                'klass'
               16  CALL_FUNCTION_1       1  ''
               18  LOAD_GLOBAL              str
               20  COMPARE_OP               ==
               22  POP_JUMP_IF_FALSE   160  'to 160'

 L. 257        24  LOAD_FAST                'klass'
               26  LOAD_METHOD              startswith
               28  LOAD_STR                 'list['
               30  CALL_METHOD_1         1  ''
               32  POP_JUMP_IF_FALSE    72  'to 72'

 L. 258        34  LOAD_GLOBAL              re
               36  LOAD_METHOD              match
               38  LOAD_STR                 'list\\[(.*)\\]'
               40  LOAD_FAST                'klass'
               42  CALL_METHOD_2         2  ''
               44  LOAD_METHOD              group
               46  LOAD_CONST               1
               48  CALL_METHOD_1         1  ''
               50  STORE_DEREF              'sub_kls'

 L. 259        52  LOAD_CLOSURE             'self'
               54  LOAD_CLOSURE             'sub_kls'
               56  BUILD_TUPLE_2         2 
               58  LOAD_LISTCOMP            '<code_object <listcomp>>'
               60  LOAD_STR                 'ApiClient.__deserialize.<locals>.<listcomp>'
               62  MAKE_FUNCTION_8          'closure'

 L. 260        64  LOAD_FAST                'data'

 L. 259        66  GET_ITER         
               68  CALL_FUNCTION_1       1  ''
               70  RETURN_VALUE     
             72_0  COME_FROM            32  '32'

 L. 262        72  LOAD_FAST                'klass'
               74  LOAD_METHOD              startswith
               76  LOAD_STR                 'dict('
               78  CALL_METHOD_1         1  ''
               80  POP_JUMP_IF_FALSE   126  'to 126'

 L. 263        82  LOAD_GLOBAL              re
               84  LOAD_METHOD              match
               86  LOAD_STR                 'dict\\(([^,]*), (.*)\\)'
               88  LOAD_FAST                'klass'
               90  CALL_METHOD_2         2  ''
               92  LOAD_METHOD              group
               94  LOAD_CONST               2
               96  CALL_METHOD_1         1  ''
               98  STORE_DEREF              'sub_kls'

 L. 264       100  LOAD_CLOSURE             'self'
              102  LOAD_CLOSURE             'sub_kls'
              104  BUILD_TUPLE_2         2 
              106  LOAD_DICTCOMP            '<code_object <dictcomp>>'
              108  LOAD_STR                 'ApiClient.__deserialize.<locals>.<dictcomp>'
              110  MAKE_FUNCTION_8          'closure'

 L. 265       112  LOAD_GLOBAL              six
              114  LOAD_METHOD              iteritems
              116  LOAD_FAST                'data'
              118  CALL_METHOD_1         1  ''

 L. 264       120  GET_ITER         
              122  CALL_FUNCTION_1       1  ''
              124  RETURN_VALUE     
            126_0  COME_FROM            80  '80'

 L. 268       126  LOAD_FAST                'klass'
              128  LOAD_DEREF               'self'
              130  LOAD_ATTR                NATIVE_TYPES_MAPPING
              132  COMPARE_OP               in
              134  POP_JUMP_IF_FALSE   148  'to 148'

 L. 269       136  LOAD_DEREF               'self'
              138  LOAD_ATTR                NATIVE_TYPES_MAPPING
              140  LOAD_FAST                'klass'
              142  BINARY_SUBSCR    
              144  STORE_FAST               'klass'
              146  JUMP_FORWARD        160  'to 160'
            148_0  COME_FROM           134  '134'

 L. 271       148  LOAD_GLOBAL              getattr
              150  LOAD_GLOBAL              mux_python
              152  LOAD_ATTR                models
              154  LOAD_FAST                'klass'
              156  CALL_FUNCTION_2       2  ''
              158  STORE_FAST               'klass'
            160_0  COME_FROM           146  '146'
            160_1  COME_FROM            22  '22'

 L. 273       160  LOAD_FAST                'klass'
              162  LOAD_DEREF               'self'
              164  LOAD_ATTR                PRIMITIVE_TYPES
              166  COMPARE_OP               in
              168  POP_JUMP_IF_FALSE   182  'to 182'

 L. 274       170  LOAD_DEREF               'self'
              172  LOAD_METHOD              _ApiClient__deserialize_primitive
              174  LOAD_FAST                'data'
              176  LOAD_FAST                'klass'
              178  CALL_METHOD_2         2  ''
              180  RETURN_VALUE     
            182_0  COME_FROM           168  '168'

 L. 275       182  LOAD_FAST                'klass'
              184  LOAD_GLOBAL              object
              186  COMPARE_OP               ==
              188  POP_JUMP_IF_FALSE   200  'to 200'

 L. 276       190  LOAD_DEREF               'self'
              192  LOAD_METHOD              _ApiClient__deserialize_object
              194  LOAD_FAST                'data'
              196  CALL_METHOD_1         1  ''
              198  RETURN_VALUE     
            200_0  COME_FROM           188  '188'

 L. 277       200  LOAD_FAST                'klass'
              202  LOAD_GLOBAL              datetime
              204  LOAD_ATTR                date
              206  COMPARE_OP               ==
              208  POP_JUMP_IF_FALSE   220  'to 220'

 L. 278       210  LOAD_DEREF               'self'
              212  LOAD_METHOD              _ApiClient__deserialize_date
              214  LOAD_FAST                'data'
              216  CALL_METHOD_1         1  ''
              218  RETURN_VALUE     
            220_0  COME_FROM           208  '208'

 L. 279       220  LOAD_FAST                'klass'
              222  LOAD_GLOBAL              datetime
              224  LOAD_ATTR                datetime
              226  COMPARE_OP               ==
              228  POP_JUMP_IF_FALSE   240  'to 240'

 L. 280       230  LOAD_DEREF               'self'
              232  LOAD_METHOD              _ApiClient__deserialize_datatime
              234  LOAD_FAST                'data'
              236  CALL_METHOD_1         1  ''
              238  RETURN_VALUE     
            240_0  COME_FROM           228  '228'

 L. 282       240  LOAD_DEREF               'self'
              242  LOAD_METHOD              _ApiClient__deserialize_model
              244  LOAD_FAST                'data'
              246  LOAD_FAST                'klass'
              248  CALL_METHOD_2         2  ''
              250  RETURN_VALUE     

Parse error at or near `LOAD_DICTCOMP' instruction at offset 106

    def call_api(self, resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_type=None, auth_settings=None, async_req=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None):
        """Makes the HTTP request (synchronous) and returns deserialized data.

        To make an async_req request, set the async_req parameter.

        :param resource_path: Path to method endpoint.
        :param method: Method to call.
        :param path_params: Path parameters in the url.
        :param query_params: Query parameters in the url.
        :param header_params: Header parameters to be
            placed in the request header.
        :param body: Request body.
        :param post_params dict: Request post form parameters,
            for `application/x-www-form-urlencoded`, `multipart/form-data`.
        :param auth_settings list: Auth Settings names for the request.
        :param response: Response data type.
        :param files dict: key -> filename, value -> filepath,
            for `multipart/form-data`.
        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param collection_formats: dict of collection formats for path, query,
            header, and post parameters.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return:
            If async_req parameter is True,
            the request will be called asynchronously.
            The method will return the request thread.
            If parameter async_req is False or missing,
            then the method will return the response directly.
        """
        if not async_req:
            return self._ApiClient__call_api(resource_path, method, path_params, query_params, header_params, body, post_params, files, response_type, auth_settings, _return_http_data_only, collection_formats, _preload_content, _request_timeout)
        thread = self.pool.apply_async(self._ApiClient__call_api, (resource_path,
         method, path_params, query_params,
         header_params, body,
         post_params, files,
         response_type, auth_settings,
         _return_http_data_only,
         collection_formats,
         _preload_content, _request_timeout))
        return thread

    def request(self, method, url, query_params=None, headers=None, post_params=None, body=None, _preload_content=True, _request_timeout=None):
        """Makes the HTTP request using RESTClient."""
        if method == 'GET':
            return self.rest_client.GET(url, query_params=query_params,
              _preload_content=_preload_content,
              _request_timeout=_request_timeout,
              headers=headers)
        if method == 'HEAD':
            return self.rest_client.HEAD(url, query_params=query_params,
              _preload_content=_preload_content,
              _request_timeout=_request_timeout,
              headers=headers)
        if method == 'OPTIONS':
            return self.rest_client.OPTIONS(url, query_params=query_params,
              headers=headers,
              post_params=post_params,
              _preload_content=_preload_content,
              _request_timeout=_request_timeout,
              body=body)
        if method == 'POST':
            return self.rest_client.POST(url, query_params=query_params,
              headers=headers,
              post_params=post_params,
              _preload_content=_preload_content,
              _request_timeout=_request_timeout,
              body=body)
        if method == 'PUT':
            return self.rest_client.PUT(url, query_params=query_params,
              headers=headers,
              post_params=post_params,
              _preload_content=_preload_content,
              _request_timeout=_request_timeout,
              body=body)
        if method == 'PATCH':
            return self.rest_client.PATCH(url, query_params=query_params,
              headers=headers,
              post_params=post_params,
              _preload_content=_preload_content,
              _request_timeout=_request_timeout,
              body=body)
        if method == 'DELETE':
            return self.rest_client.DELETE(url, query_params=query_params,
              headers=headers,
              _preload_content=_preload_content,
              _request_timeout=_request_timeout,
              body=body)
        raise ValueError('http method must be `GET`, `HEAD`, `OPTIONS`, `POST`, `PATCH`, `PUT` or `DELETE`.')

    def parameters_to_tuples(self, params, collection_formats):
        """Get parameters as list of tuples, formatting collections.

        :param params: Parameters as dict or list of two-tuples
        :param dict collection_formats: Parameter collection formats
        :return: Parameters as list of tuples, collections formatted
        """
        new_params = []
        if collection_formats is None:
            collection_formats = {}
        for k, v in six.iteritems(params) if isinstanceparamsdict else params:
            if k in collection_formats:
                collection_format = collection_formats[k]
                if collection_format == 'multi':
                    new_params.extend(((k, value) for value in v))
                else:
                    if collection_format == 'ssv':
                        delimiter = ' '
                    else:
                        if collection_format == 'tsv':
                            delimiter = '\t'
                        else:
                            if collection_format == 'pipes':
                                delimiter = '|'
                            else:
                                delimiter = ','
                    new_params.append((
                     k, delimiter.join((str(value) for value in v))))
            else:
                new_params.append((k, v))
        else:
            return new_params

    def prepare_post_parameters(self, post_params=None, files=None):
        """Builds form parameters.

        :param post_params: Normal form parameters.
        :param files: File parameters.
        :return: Form parameters with files.
        """
        params = []
        if post_params:
            params = post_params
        if files:
            for k, v in six.iteritems(files):
                if not v:
                    pass
                else:
                    file_names = v if type(v) is list else [v]
                    for n in file_names:
                        with openn'rb' as (f):
                            filename = os.path.basename(f.name)
                            filedata = f.read()
                            mimetype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'
                            params.append(tuple([k, tuple([filename, filedata, mimetype])]))

        return params

    def select_header_accept(self, accepts):
        """Returns `Accept` based on an array of accepts provided.

        :param accepts: List of headers.
        :return: Accept (e.g. application/json).
        """
        if not accepts:
            return
        accepts = [x.lower() for x in accepts]
        if 'application/json' in accepts:
            return 'application/json'
        return ', '.join(accepts)

    def select_header_content_type(self, content_types):
        """Returns `Content-Type` based on an array of content_types provided.

        :param content_types: List of content-types.
        :return: Content-Type (e.g. application/json).
        """
        if not content_types:
            return 'application/json'
        content_types = [x.lower() for x in content_types]
        if 'application/json' in content_types or '*/*' in content_types:
            return 'application/json'
        return content_types[0]

    def update_params_for_auth(self, headers, querys, auth_settings):
        """Updates header and query params based on authentication setting.

        :param headers: Header parameters dict to be updated.
        :param querys: Query parameters tuple list to be updated.
        :param auth_settings: Authentication setting identifiers list.
        """
        if not auth_settings:
            return
        for auth in auth_settings:
            auth_setting = self.configuration.auth_settings().get(auth)
            if auth_setting:
                if not auth_setting['value']:
                    continue
                elif auth_setting['in'] == 'header':
                    headers[auth_setting['key']] = auth_setting['value']
                elif auth_setting['in'] == 'query':
                    querys.append((auth_setting['key'], auth_setting['value']))
                else:
                    raise ValueError('Authentication token must be in `query` or `header`')

    def __deserialize_file(self, response):
        """Deserializes body to file

        Saves response body into a file in a temporary folder,
        using the filename from the `Content-Disposition` header if provided.

        :param response:  RESTResponse.
        :return: file path.
        """
        fd, path = tempfile.mkstemp(dir=(self.configuration.temp_folder_path))
        os.close(fd)
        os.remove(path)
        content_disposition = response.getheader('Content-Disposition')
        if content_disposition:
            filename = re.search('filename=[\\\'"]?([^\\\'"\\s]+)[\\\'"]?', content_disposition).group(1)
            path = os.path.join(os.path.dirname(path), filename)
        with openpath'wb' as (f):
            f.write(response.data)
        return path

    def __deserialize_primitive--- This code section failed: ---

 L. 551         0  SETUP_FINALLY        12  'to 12'

 L. 552         2  LOAD_FAST                'klass'
                4  LOAD_FAST                'data'
                6  CALL_FUNCTION_1       1  ''
                8  POP_BLOCK        
               10  RETURN_VALUE     
             12_0  COME_FROM_FINALLY     0  '0'

 L. 553        12  DUP_TOP          
               14  LOAD_GLOBAL              UnicodeEncodeError
               16  COMPARE_OP               exception-match
               18  POP_JUMP_IF_FALSE    40  'to 40'
               20  POP_TOP          
               22  POP_TOP          
               24  POP_TOP          

 L. 554        26  LOAD_GLOBAL              six
               28  LOAD_METHOD              text_type
               30  LOAD_FAST                'data'
               32  CALL_METHOD_1         1  ''
               34  ROT_FOUR         
               36  POP_EXCEPT       
               38  RETURN_VALUE     
             40_0  COME_FROM            18  '18'

 L. 555        40  DUP_TOP          
               42  LOAD_GLOBAL              TypeError
               44  COMPARE_OP               exception-match
               46  POP_JUMP_IF_FALSE    62  'to 62'
               48  POP_TOP          
               50  POP_TOP          
               52  POP_TOP          

 L. 556        54  LOAD_FAST                'data'
               56  ROT_FOUR         
               58  POP_EXCEPT       
               60  RETURN_VALUE     
             62_0  COME_FROM            46  '46'
               62  END_FINALLY      

Parse error at or near `POP_TOP' instruction at offset 22

    def __deserialize_object(self, value):
        """Return an original value.

        :return: object.
        """
        return value

    def __deserialize_date--- This code section failed: ---

 L. 571         0  SETUP_FINALLY        28  'to 28'

 L. 572         2  LOAD_CONST               0
                4  LOAD_CONST               ('parse',)
                6  IMPORT_NAME_ATTR         dateutil.parser
                8  IMPORT_FROM              parse
               10  STORE_FAST               'parse'
               12  POP_TOP          

 L. 573        14  LOAD_FAST                'parse'
               16  LOAD_FAST                'string'
               18  CALL_FUNCTION_1       1  ''
               20  LOAD_METHOD              date
               22  CALL_METHOD_0         0  ''
               24  POP_BLOCK        
               26  RETURN_VALUE     
             28_0  COME_FROM_FINALLY     0  '0'

 L. 574        28  DUP_TOP          
               30  LOAD_GLOBAL              ImportError
               32  COMPARE_OP               exception-match
               34  POP_JUMP_IF_FALSE    50  'to 50'
               36  POP_TOP          
               38  POP_TOP          
               40  POP_TOP          

 L. 575        42  LOAD_FAST                'string'
               44  ROT_FOUR         
               46  POP_EXCEPT       
               48  RETURN_VALUE     
             50_0  COME_FROM            34  '34'

 L. 576        50  DUP_TOP          
               52  LOAD_GLOBAL              ValueError
               54  COMPARE_OP               exception-match
               56  POP_JUMP_IF_FALSE    88  'to 88'
               58  POP_TOP          
               60  POP_TOP          
               62  POP_TOP          

 L. 577        64  LOAD_GLOBAL              rest
               66  LOAD_ATTR                ApiException

 L. 578        68  LOAD_CONST               0

 L. 579        70  LOAD_STR                 'Failed to parse `{0}` as date object'
               72  LOAD_METHOD              format
               74  LOAD_FAST                'string'
               76  CALL_METHOD_1         1  ''

 L. 577        78  LOAD_CONST               ('status', 'reason')
               80  CALL_FUNCTION_KW_2     2  '2 total positional and keyword args'
               82  RAISE_VARARGS_1       1  'exception instance'
               84  POP_EXCEPT       
               86  JUMP_FORWARD         90  'to 90'
             88_0  COME_FROM            56  '56'
               88  END_FINALLY      
             90_0  COME_FROM            86  '86'

Parse error at or near `POP_TOP' instruction at offset 38

    def __deserialize_datatime--- This code section failed: ---

 L. 590         0  SETUP_FINALLY        24  'to 24'

 L. 591         2  LOAD_CONST               0
                4  LOAD_CONST               ('parse',)
                6  IMPORT_NAME_ATTR         dateutil.parser
                8  IMPORT_FROM              parse
               10  STORE_FAST               'parse'
               12  POP_TOP          

 L. 592        14  LOAD_FAST                'parse'
               16  LOAD_FAST                'string'
               18  CALL_FUNCTION_1       1  ''
               20  POP_BLOCK        
               22  RETURN_VALUE     
             24_0  COME_FROM_FINALLY     0  '0'

 L. 593        24  DUP_TOP          
               26  LOAD_GLOBAL              ImportError
               28  COMPARE_OP               exception-match
               30  POP_JUMP_IF_FALSE    46  'to 46'
               32  POP_TOP          
               34  POP_TOP          
               36  POP_TOP          

 L. 594        38  LOAD_FAST                'string'
               40  ROT_FOUR         
               42  POP_EXCEPT       
               44  RETURN_VALUE     
             46_0  COME_FROM            30  '30'

 L. 595        46  DUP_TOP          
               48  LOAD_GLOBAL              ValueError
               50  COMPARE_OP               exception-match
               52  POP_JUMP_IF_FALSE    84  'to 84'
               54  POP_TOP          
               56  POP_TOP          
               58  POP_TOP          

 L. 596        60  LOAD_GLOBAL              rest
               62  LOAD_ATTR                ApiException

 L. 597        64  LOAD_CONST               0

 L. 599        66  LOAD_STR                 'Failed to parse `{0}` as datetime object'
               68  LOAD_METHOD              format

 L. 600        70  LOAD_FAST                'string'

 L. 599        72  CALL_METHOD_1         1  ''

 L. 596        74  LOAD_CONST               ('status', 'reason')
               76  CALL_FUNCTION_KW_2     2  '2 total positional and keyword args'
               78  RAISE_VARARGS_1       1  'exception instance'
               80  POP_EXCEPT       
               82  JUMP_FORWARD         86  'to 86'
             84_0  COME_FROM            52  '52'
               84  END_FINALLY      
             86_0  COME_FROM            82  '82'

Parse error at or near `POP_TOP' instruction at offset 34

    def __deserialize_model(self, data, klass):
        """Deserializes list or dict to model.

        :param data: dict, list.
        :param klass: class literal.
        :return: model object.
        """
        if not klass.openapi_types:
            if not hasattrklass'get_real_child_model':
                return data
        else:
            kwargs = {}
            if klass.openapi_types is not None:
                for attr, attr_type in six.iteritems(klass.openapi_types):
                    if data is not None and klass.attribute_map[attr] in data and isinstancedata(list, dict):
                        value = data[klass.attribute_map[attr]]
                        kwargs[attr] = self._ApiClient__deserialize(value, attr_type)

            instance = klass(**kwargs)
            if hasattrinstance'get_real_child_model':
                klass_name = instance.get_real_child_model(data)
                if klass_name:
                    instance = self._ApiClient__deserialize(data, klass_name)
        return instance