# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/dataprovider/config_data.py
# Compiled at: 2016-11-29 20:56:28
"""

ConfigData classes.

Kisuk Lee <kisuklee@mit.edu>, 2016
"""
import copy, numpy as np, emio
from tensor import TensorData
from transform import *
from utils import *

class ConfigData(TensorData):
    """
    ConfigData class.
    """

    def __init__(self, config, section):
        """
        Build data from a ConfiParser object generated by Parser's
        parse_dataset method.
        """
        data, fov, offset = self._prepare_data(config, section)
        super(ConfigData, self).__init__(data, fov=fov, offset=offset)

    def _prepare_data(self, config, section):
        """Prepare data from config."""
        assert config.has_section(section)
        if config.has_option(section, 'file'):
            data = emio.imread(config.get(section, 'file'))
        else:
            if config.has_option(section, 'shape'):
                shape = config.get(section, 'shape')
                shape = tuple(eval(str(shape)))
                if config.has_option(section, 'filler'):
                    filler = eval(config.get(section, 'filler'))
                else:
                    filler = {'type': 'zero'}
                data = fill_data(shape, filler=filler)
            else:
                raise RuntimeError('Invalid data section [%s].' % section)
            if config.has_option(section, 'fov'):
                fov = config.get(section, 'fov')
                fov = tuple(eval(str(fov)))
            else:
                fov = (0, 0, 0)
            if config.has_option(section, 'offset'):
                offset = config.get(section, 'offset')
                offset = tuple(eval(str(offset)))
            else:
                offset = (0, 0, 0)
            if config.has_option(section, 'preprocess'):
                preprocess = config.get(section, 'preprocess').split('\n')
                preprocess = [ eval(x) for x in preprocess ]
            else:
                preprocess = list()
            for pp in preprocess:
                assert isinstance(pp, dict)
                assert 'type' in pp

            data = check_tensor(data)
            for pp in preprocess:
                data = tensor_func.evaluate(data, pp)

        return (
         data, fov, offset)


class ConfigLabel(ConfigData):
    """
    ConfigLabel class.
    """

    def __init__(self, config, section):
        """Build data from config."""
        super(ConfigLabel, self).__init__(config, section)
        self._transformation(config, section)

    def get_transform(self):
        return copy.deepcopy(self._transform)

    def _transformation(self, config, section):
        """
        TODO(kisuk): Documentation.
        """
        if config.has_option(section, 'transform'):
            transform = eval(config.get(section, 'transform'))
        else:
            transform = None
        if transform is not None:
            assert isinstance(transform, dict)
            assert 'type' in transform
        self._transform = transform
        return