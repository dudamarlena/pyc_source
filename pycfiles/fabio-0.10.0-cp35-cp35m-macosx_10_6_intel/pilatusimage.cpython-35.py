# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3350)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/kieffer/workspace/fabio/build/lib.macosx-10.6-intel-3.5/fabio/pilatusimage.py
# Compiled at: 2019-03-04 08:01:16
# Size of source mod 2**32: 4392 bytes
from __future__ import with_statement, print_function
__authors__ = [
 'V. Valls']
__license__ = 'MIT'
__date__ = '12/11/2018'
import re, logging
from . import tifimage
_logger = logging.getLogger(__name__)

class PilatusTiffFrame(tifimage.TiffFrame):
    __doc__ = 'Frame container for TIFF format generated by a Pilatus detector'

    def __init__(self, data, tiff_header, pilatus_header):
        super(PilatusTiffFrame, self).__init__(data, tiff_header)
        self.pilatus_header = pilatus_header
        self._header = pilatus_header


class PilatusImage(tifimage.TifImage):
    __doc__ = ' Read in Pilatus format, also\n        pilatus images, including header info '
    DESCRIPTION = 'Pilatus file format based on Tiff'
    DEFAULT_EXTENSIONS = [
     'tif', 'tiff']
    _keyvalue_spliter = re.compile('\\s*[,:=\\s]\\s*')

    def _create_pilatus_header(self, tiff_header):
        """
        Parse Pilatus header from a TIFF header.

        The Pilatus header is stored in the metadata ImageDescription (tag 270)
        as an ASCII text which looks like:

        .. block-code:: python

            imageDescription = '# Pixel_size 172e-6 m x 172e-6 m
'                '# Silicon sensor, thickness 0.000320 m
# Exposure_time 90.000000 s
'                '# Exposure_period 90.000000 s
# Tau = 0 s
'                '# Count_cutoff 1048574 counts
# Threshold_setting 0 eV
'                '# Gain_setting not implemented (vrf = 9.900)
'                '# N_excluded_pixels = 0
# Excluded_pixels: (nil)
'                '# Flat_field: (nil)
# Trim_directory: (nil)
\x00'

        :rtype: OrderedDict
        """
        if 'imageDescription' not in tiff_header:
            raise IOError('Image is not a Pilatus image')
        header = self.check_header()
        description = tiff_header['imageDescription']
        for line in description.split('\n'):
            index = line.find('# ')
            if index == -1:
                if line.strip(' \x00') != '':
                    _logger.debug("Pilatus header line '%s' misformed. Skipped", line)
            continue
            line = line[2:].strip()
            if line == '':
                pass
            else:
                result = self._keyvalue_spliter.split(line, 1)
                if len(result) != 2:
                    _logger.debug("Pilatus header line '%s' misformed. Skipped", line)
                    continue
                    key, value = result
                    header[key] = value

        return header

    def _create_frame(self, image_data, tiff_header):
        """Create exposed data from TIFF information"""
        pilatus_header = self._create_pilatus_header(tiff_header)
        frame = PilatusTiffFrame(image_data, tiff_header, pilatus_header)
        return frame


pilatusimage = PilatusImage