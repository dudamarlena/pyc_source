# uncompyle6 version 3.6.7
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build\bdist.win32\egg\chirp\compare\base_comparison.py
# Compiled at: 2013-12-11 23:17:46
__doc__ = '\nAn "abstract base" for classes that do pairwise comparisons.\n\nCopyright (C) 2011 Daniel Meliza <dan // meliza.org>\nCreated 2011-08-30\n'

class base_comparison:
    """
    An abstract class with the methods required for a comparison
    operation. A comparison method consists of the following
    operations:

    1. Loading data from files. Some preprocessing may be necessary
    (e.g. computing spectrograms, denoising).

    2. Making pairwise comparisons and outputting statistics of the
    comparison.

    The symmetric property should be True if d(A,B)==d(B,A)
    """
    symmetric = True
    file_extension = None

    def load_signal(self, locator):
        """
        The signal stored under <locator> is loaded from disk,
        preprocessed, and returned in a form ready for pairwise
        comparison.  IMPORTANT: the data are stored in shared memory
        """
        pass

    def compare(self, ref, tgt):
        """
        Compare ref to tgt and return statistics of comparisons. <ref>
        and <tgt> arguments are the data structures generated by load_signal.
        """
        pass

    @property
    def compare_stat_fields(self):
        """ Return a tuple of the names for the statistics returned by compare() """
        pass