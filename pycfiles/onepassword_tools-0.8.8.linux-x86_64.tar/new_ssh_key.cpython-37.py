# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/travis/virtualenv/python3.7.1/lib/python3.7/site-packages/onepassword_tools/new_ssh_key/new_ssh_key.py
# Compiled at: 2019-05-24 16:38:50
# Size of source mod 2**32: 3938 bytes
import onepassword_tools.lib.OnePasswordSSHKeyItem as OnePasswordSSHKeyItem
from onepassword_tools.lib.NewItemCommand import NewItemCommand, new_item_command_options, new_item_command_password
from onepassword_tools.lib.MiscUtils import generate_password
from onepassword_tools.lib.Crypto import generate_ssh_key
import onepassword_tools.lib.ConfigFile as ConfigFile
from getpass import getuser
from socket import gethostname
import click

def get_defaults():
    _defaults = {}
    config_file = ConfigFile()
    if '.' in __name__:
        command_name = __name__.rsplit('.', 1)[1]
    else:
        command_name = __name__
    command_config = config_file.get_section(command_name)
    if config_file.keys_exists(command_config, 'defaults', 'from-host'):
        _defaults['from-host'] = command_config['defaults']['from-host']
    else:
        _defaults['from-host'] = gethostname().encode('ascii', 'ignore').decode('ascii')
    if config_file.keys_exists(command_config, 'defaults', 'from-user'):
        _defaults['from-user'] = command_config['defaults']['from-user']
    else:
        _defaults['from-user'] = getuser()
    return _defaults


defaults = get_defaults()

@click.command()
@new_item_command_options
@click.option('--from-user', help='User who is responsible from initiating the connection, default current user.', prompt=True, default=(defaults['from-user']))
@click.option('--from-host', help='Host from where the SSH connection starts, default current hostname.', prompt=True, default=(defaults['from-host']))
@click.option('--to-user', help='Remote user, prompted if empty.', prompt=True, required=True)
@click.option('--to-host', help='Remote server hostname, prompted if empty.', prompt=True, required=True)
@click.option('--to-ip', help='Remote server IP, prompted if empty.', prompt=True, default='')
@click.option('--to-port', help='Remote SSH Port, prompted if empty.', prompt=True, default='22')
@click.option('--to-host-abbreviated', help='Alias of the remote server hostname used to initialize connection.', required=False)
@click.option('--no-passphrase', help='Create ssh key without passphrase.', prompt=False, required=False, default=False, is_flag=True)
@click.option('--passphrase', help='Use this passphrase instead of an autogenerated one.')
@click.option('--passphrase-length', help='Length of the autogenerated passphrase.', default=50, type=int)
@click.option('--port', help='Remote port', required=False, default=22, type=int)
def new_ssh_key(from_user, from_host, to_user, to_host, to_ip, to_port, to_host_abbreviated, no_passphrase, passphrase, passphrase_length, port, account, notes, return_field, title, vault, do_not_ask_credentials):
    """Generates a new SSH key and store it in 1Password. Additional information are stored also to generate SSH config
    file when imported."""
    NewSSHKey(**locals()).run()


class NewSSHKey(NewItemCommand):
    database = None
    database: str
    from_user = None
    from_user: str
    from_host = None
    from_host: str
    no_passphrase = None
    no_passphrase: bool
    onePasswordItemClass = OnePasswordSSHKeyItem
    passphrase = None
    passphrase: str
    passphrase_length = None
    passphrase_length: int
    port = None
    port: str
    public_key: str
    private_ey: str
    tags = ['Clef SSH']
    titleTemplate = 'id_rsa.from__{from_user}@{from_host}__to__{to_user}@{to_host}'
    to_user = None
    to_user: str
    to_host = None
    to_host: str
    to_ip = None
    to_ip: str
    to_port = None
    to_port: str
    to_host_abbreviated = None
    to_host_abbreviated: str

    def __init__(self, **kwargs):
        (super().__init__)(**kwargs)
        if not self.no_passphrase:
            if not self.passphrase:
                self.passphrase = generate_password(self.passphrase_length)
        self.public_key, self.private_key = generate_ssh_key(passphrase=(self.passphrase))
        self.public_key += ' %s' % self.get_title()