# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: swagger_client/models/storage_data.py
# Compiled at: 2018-04-29 18:50:21
"""
    Kipartman

    Kipartman api specifications

    OpenAPI spec version: 1.0.0
    Contact: --
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from pprint import pformat
from six import iteritems
import re

class StorageData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    swagger_types = {'name': 'str', 
       'description': 'str', 
       'comment': 'str'}
    attribute_map = {'name': 'name', 
       'description': 'description', 
       'comment': 'comment'}

    def __init__(self, name=None, description=None, comment=None):
        """
        StorageData - a model defined in Swagger
        """
        self._name = None
        self._description = None
        self._comment = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if comment is not None:
            self.comment = comment
        return

    @property
    def name(self):
        """
        Gets the name of this StorageData.

        :return: The name of this StorageData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageData.

        :param name: The name of this StorageData.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this StorageData.

        :return: The description of this StorageData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this StorageData.

        :param description: The description of this StorageData.
        :type: str
        """
        self._description = description

    @property
    def comment(self):
        """
        Gets the comment of this StorageData.

        :return: The comment of this StorageData.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this StorageData.

        :param comment: The comment of this StorageData.
        :type: str
        """
        self._comment = comment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}
        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageData):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other