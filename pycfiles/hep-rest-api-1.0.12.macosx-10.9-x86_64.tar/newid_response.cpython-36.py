# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/erhu/project/gitrepo/hep-sdk/venv/lib/python3.6/site-packages/hep_rest_api/models/newid_response.py
# Compiled at: 2019-07-15 09:20:14
# Size of source mod 2**32: 6257 bytes
"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint, re, six

class NewidResponse(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    '
    swagger_types = {'newid':'str', 
     'public_key':'str', 
     'main_wallet_address':'str'}
    attribute_map = {'newid':'newid', 
     'public_key':'public_key', 
     'main_wallet_address':'main_wallet_address'}

    def __init__(self, newid=None, public_key=None, main_wallet_address=None):
        """NewidResponse - a model defined in Swagger"""
        self._newid = None
        self._public_key = None
        self._main_wallet_address = None
        self.discriminator = None
        self.newid = newid
        self.public_key = public_key
        self.main_wallet_address = main_wallet_address

    @property
    def newid(self):
        """Gets the newid of this NewidResponse.  # noqa: E501

        The NewID  # noqa: E501

        :return: The newid of this NewidResponse.  # noqa: E501
        :rtype: str
        """
        return self._newid

    @newid.setter
    def newid(self, newid):
        """Sets the newid of this NewidResponse.

        The NewID  # noqa: E501

        :param newid: The newid of this NewidResponse.  # noqa: E501
        :type: str
        """
        if newid is None:
            raise ValueError('Invalid value for `newid`, must not be `None`')
        else:
            if newid is not None:
                if len(newid) > 64:
                    raise ValueError('Invalid value for `newid`, length must be less than or equal to `64`')
            if newid is not None:
                if len(newid) < 1:
                    raise ValueError('Invalid value for `newid`, length must be greater than or equal to `1`')
        self._newid = newid

    @property
    def public_key(self):
        """Gets the public_key of this NewidResponse.  # noqa: E501

        The hex string of NewID's public key  # noqa: E501

        :return: The public_key of this NewidResponse.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this NewidResponse.

        The hex string of NewID's public key  # noqa: E501

        :param public_key: The public_key of this NewidResponse.  # noqa: E501
        :type: str
        """
        if public_key is None:
            raise ValueError('Invalid value for `public_key`, must not be `None`')
        else:
            if public_key is not None:
                if len(public_key) > 64:
                    raise ValueError('Invalid value for `public_key`, length must be less than or equal to `64`')
            if public_key is not None:
                if len(public_key) < 1:
                    raise ValueError('Invalid value for `public_key`, length must be greater than or equal to `1`')
        self._public_key = public_key

    @property
    def main_wallet_address(self):
        """Gets the main_wallet_address of this NewidResponse.  # noqa: E501

        The main wallet address of NewChain  # noqa: E501

        :return: The main_wallet_address of this NewidResponse.  # noqa: E501
        :rtype: str
        """
        return self._main_wallet_address

    @main_wallet_address.setter
    def main_wallet_address(self, main_wallet_address):
        """Sets the main_wallet_address of this NewidResponse.

        The main wallet address of NewChain  # noqa: E501

        :param main_wallet_address: The main_wallet_address of this NewidResponse.  # noqa: E501
        :type: str
        """
        if main_wallet_address is None:
            raise ValueError('Invalid value for `main_wallet_address`, must not be `None`')
        else:
            if main_wallet_address is not None:
                if len(main_wallet_address) > 64:
                    raise ValueError('Invalid value for `main_wallet_address`, length must be less than or equal to `64`')
            if main_wallet_address is not None:
                if len(main_wallet_address) < 1:
                    raise ValueError('Invalid value for `main_wallet_address`, length must be greater than or equal to `1`')
        self._main_wallet_address = main_wallet_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            else:
                if hasattr(value, 'to_dict'):
                    result[attr] = value.to_dict()
                else:
                    if isinstance(value, dict):
                        result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
                    else:
                        result[attr] = value

        if issubclass(NewidResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewidResponse):
            return False
        else:
            return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other