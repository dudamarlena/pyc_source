# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/erhu/project/gitrepo/hep-sdk/venv/lib/python3.6/site-packages/hep_rest_api/models/retrieve_dapp_daily_stats_response.py
# Compiled at: 2019-07-15 09:20:14
# Size of source mod 2**32: 6332 bytes
"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint, re, six

class RetrieveDappDailyStatsResponse(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    '
    swagger_types = {'dapp_id':'str', 
     'total_nf':'str', 
     'total_tokens':'str'}
    attribute_map = {'dapp_id':'dapp_id', 
     'total_nf':'total_nf', 
     'total_tokens':'total_tokens'}

    def __init__(self, dapp_id=None, total_nf=None, total_tokens=None):
        """RetrieveDappDailyStatsResponse - a model defined in Swagger"""
        self._dapp_id = None
        self._total_nf = None
        self._total_tokens = None
        self.discriminator = None
        self.dapp_id = dapp_id
        self.total_nf = total_nf
        self.total_tokens = total_tokens

    @property
    def dapp_id(self):
        """Gets the dapp_id of this RetrieveDappDailyStatsResponse.  # noqa: E501

        The decentralized application ID  # noqa: E501

        :return: The dapp_id of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._dapp_id

    @dapp_id.setter
    def dapp_id(self, dapp_id):
        """Sets the dapp_id of this RetrieveDappDailyStatsResponse.

        The decentralized application ID  # noqa: E501

        :param dapp_id: The dapp_id of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if dapp_id is None:
            raise ValueError('Invalid value for `dapp_id`, must not be `None`')
        else:
            if dapp_id is not None:
                if len(dapp_id) > 64:
                    raise ValueError('Invalid value for `dapp_id`, length must be less than or equal to `64`')
            if dapp_id is not None:
                if len(dapp_id) < 1:
                    raise ValueError('Invalid value for `dapp_id`, length must be greater than or equal to `1`')
        self._dapp_id = dapp_id

    @property
    def total_nf(self):
        """Gets the total_nf of this RetrieveDappDailyStatsResponse.  # noqa: E501

        The total Newforce  # noqa: E501

        :return: The total_nf of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_nf

    @total_nf.setter
    def total_nf(self, total_nf):
        """Sets the total_nf of this RetrieveDappDailyStatsResponse.

        The total Newforce  # noqa: E501

        :param total_nf: The total_nf of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if total_nf is None:
            raise ValueError('Invalid value for `total_nf`, must not be `None`')
        else:
            if total_nf is not None:
                if len(total_nf) > 64:
                    raise ValueError('Invalid value for `total_nf`, length must be less than or equal to `64`')
            if total_nf is not None:
                if len(total_nf) < 1:
                    raise ValueError('Invalid value for `total_nf`, length must be greater than or equal to `1`')
        self._total_nf = total_nf

    @property
    def total_tokens(self):
        """Gets the total_tokens of this RetrieveDappDailyStatsResponse.  # noqa: E501

        The total number of tokens  # noqa: E501

        :return: The total_tokens of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._total_tokens

    @total_tokens.setter
    def total_tokens(self, total_tokens):
        """Sets the total_tokens of this RetrieveDappDailyStatsResponse.

        The total number of tokens  # noqa: E501

        :param total_tokens: The total_tokens of this RetrieveDappDailyStatsResponse.  # noqa: E501
        :type: str
        """
        if total_tokens is None:
            raise ValueError('Invalid value for `total_tokens`, must not be `None`')
        else:
            if total_tokens is not None:
                if len(total_tokens) > 64:
                    raise ValueError('Invalid value for `total_tokens`, length must be less than or equal to `64`')
            if total_tokens is not None:
                if len(total_tokens) < 1:
                    raise ValueError('Invalid value for `total_tokens`, length must be greater than or equal to `1`')
        self._total_tokens = total_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            else:
                if hasattr(value, 'to_dict'):
                    result[attr] = value.to_dict()
                else:
                    if isinstance(value, dict):
                        result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
                    else:
                        result[attr] = value

        if issubclass(RetrieveDappDailyStatsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetrieveDappDailyStatsResponse):
            return False
        else:
            return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other