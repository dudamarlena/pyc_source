# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/erhu/project/gitrepo/hep-sdk/venv/lib/python3.6/site-packages/hep_rest_api/api/rest_api.py
# Compiled at: 2019-07-15 09:20:14
# Size of source mod 2**32: 157877 bytes
"""
    HEP REST API

    The REST API for HEP protocol  # noqa: E501

    OpenAPI spec version: v1
    Contact: xiawu@zeuux.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import
import re, six
from hep_rest_api.api_client import ApiClient

class RestApi(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    Ref: https://github.com/swagger-api/swagger-codegen\n    '

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rest_dapps_read(self, api_version, dapp_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_dapps_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_dapps_read(api_version, dapp_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str dapp_id: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: Dapp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_dapps_read_with_http_info)(api_version, dapp_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_dapps_read_with_http_info)(api_version, dapp_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_dapps_read_with_http_info(self, api_version, dapp_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_dapps_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_dapps_read_with_http_info(api_version, dapp_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str dapp_id: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: Dapp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'dapp_id', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_dapps_read" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_dapps_read`')
        if 'dapp_id' not in params or params['dapp_id'] is None:
            raise ValueError('Missing the required parameter `dapp_id` when calling `rest_dapps_read`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_dapps_read`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_dapps_read`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_dapps_read`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_dapps_read`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_dapps_read`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_dapps_read`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_dapps_read`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_dapps_read`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_dapps_read`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_dapps_read`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_dapps_read`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_dapps_read`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_dapps_read`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_dapps_read`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_dapps_read`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_dapps_read`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_dapps_read`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_dapps_read`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_dapps_read`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_dapps_read`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_dapps_read`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_dapps_read`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_dapps_read`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_dapps_read`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_dapps_read`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'dapp_id' in params:
            path_params['dapp_id'] = params['dapp_id']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/dapps/{dapp_id}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='Dapp',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_dapps_read_0(self, api_version, dapp_id, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_dapps_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_dapps_read_0(api_version, dapp_id, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str dapp_id: (required)
        :param str _date: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: RetrieveDappDailyStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_dapps_read_0_with_http_info)(api_version, dapp_id, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_dapps_read_0_with_http_info)(api_version, dapp_id, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_dapps_read_0_with_http_info(self, api_version, dapp_id, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_dapps_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_dapps_read_0_with_http_info(api_version, dapp_id, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str dapp_id: (required)
        :param str _date: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: RetrieveDappDailyStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'dapp_id', '_date', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_dapps_read_0" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_dapps_read_0`')
        if 'dapp_id' not in params or params['dapp_id'] is None:
            raise ValueError('Missing the required parameter `dapp_id` when calling `rest_dapps_read_0`')
        if '_date' not in params or params['_date'] is None:
            raise ValueError('Missing the required parameter `_date` when calling `rest_dapps_read_0`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_dapps_read_0`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_dapps_read_0`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_dapps_read_0`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_dapps_read_0`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_dapps_read_0`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_dapps_read_0`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_dapps_read_0`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_dapps_read_0`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_dapps_read_0`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_dapps_read_0`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_dapps_read_0`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_dapps_read_0`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_dapps_read_0`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_dapps_read_0`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_dapps_read_0`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_dapps_read_0`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_dapps_read_0`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_dapps_read_0`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_dapps_read_0`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_dapps_read_0`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_dapps_read_0`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_dapps_read_0`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_dapps_read_0`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_dapps_read_0`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_dapps_read_0`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'dapp_id' in params:
            path_params['dapp_id'] = params['dapp_id']
        if '_date' in params:
            path_params['date'] = params['_date']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/dapps/{dapp_id}/{date}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='RetrieveDappDailyStatsResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_health_list(self, api_version, **kwargs):
        """rest_health_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_health_list(api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_health_list_with_http_info)(api_version, **kwargs)
        else:
            data = (self.rest_health_list_with_http_info)(api_version, **kwargs)
            return data

    def rest_health_list_with_http_info(self, api_version, **kwargs):
        """rest_health_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_health_list_with_http_info(api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_health_list" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_health_list`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/health/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type=None,
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_newchain_tx_read(self, api_version, txid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newchain_tx_read  # noqa: E501

        Retrieve the transaction information by given txid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newchain_tx_read(api_version, txid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str txid: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: NewchainTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_newchain_tx_read_with_http_info)(api_version, txid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_newchain_tx_read_with_http_info)(api_version, txid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_newchain_tx_read_with_http_info(self, api_version, txid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newchain_tx_read  # noqa: E501

        Retrieve the transaction information by given txid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newchain_tx_read_with_http_info(api_version, txid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str txid: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: NewchainTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'txid', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_newchain_tx_read" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_newchain_tx_read`')
        if 'txid' not in params or params['txid'] is None:
            raise ValueError('Missing the required parameter `txid` when calling `rest_newchain_tx_read`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_newchain_tx_read`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_newchain_tx_read`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_newchain_tx_read`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_newchain_tx_read`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_newchain_tx_read`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_newchain_tx_read`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_newchain_tx_read`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_newchain_tx_read`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_newchain_tx_read`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newchain_tx_read`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newchain_tx_read`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newchain_tx_read`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newchain_tx_read`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newchain_tx_read`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newchain_tx_read`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newchain_tx_read`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newchain_tx_read`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newchain_tx_read`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newchain_tx_read`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newchain_tx_read`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newchain_tx_read`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newchain_tx_read`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newchain_tx_read`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newchain_tx_read`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newchain_tx_read`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'txid' in params:
            path_params['txid'] = params['txid']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/newchain/tx/{txid}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='NewchainTransactionResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_newforce_read(self, api_version, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newforce_read  # noqa: E501

        Retrieve the daily newforce statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newforce_read(api_version, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str _date: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: NewforceDailyStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_newforce_read_with_http_info)(api_version, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_newforce_read_with_http_info)(api_version, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_newforce_read_with_http_info(self, api_version, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newforce_read  # noqa: E501

        Retrieve the daily newforce statistics  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newforce_read_with_http_info(api_version, _date, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str _date: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: NewforceDailyStatsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', '_date', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_newforce_read" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_newforce_read`')
        if '_date' not in params or params['_date'] is None:
            raise ValueError('Missing the required parameter `_date` when calling `rest_newforce_read`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_newforce_read`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_newforce_read`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_newforce_read`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_newforce_read`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_newforce_read`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_newforce_read`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_newforce_read`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_newforce_read`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_newforce_read`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newforce_read`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newforce_read`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newforce_read`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newforce_read`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newforce_read`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newforce_read`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newforce_read`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newforce_read`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newforce_read`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newforce_read`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newforce_read`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newforce_read`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newforce_read`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newforce_read`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newforce_read`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newforce_read`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if '_date' in params:
            path_params['date'] = params['_date']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/newforce/{date}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='NewforceDailyStatsResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_newids_read(self, api_version, newid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newids_read  # noqa: E501

        Retrieve the information by given NewID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newids_read(api_version, newid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str newid: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: NewidResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_newids_read_with_http_info)(api_version, newid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_newids_read_with_http_info)(api_version, newid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_newids_read_with_http_info(self, api_version, newid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newids_read  # noqa: E501

        Retrieve the information by given NewID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newids_read_with_http_info(api_version, newid, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str newid: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: NewidResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'newid', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_newids_read" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_newids_read`')
        if 'newid' not in params or params['newid'] is None:
            raise ValueError('Missing the required parameter `newid` when calling `rest_newids_read`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_newids_read`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_newids_read`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_newids_read`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_newids_read`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_newids_read`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_newids_read`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_newids_read`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_newids_read`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_newids_read`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newids_read`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newids_read`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newids_read`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newids_read`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newids_read`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newids_read`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newids_read`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newids_read`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newids_read`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newids_read`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newids_read`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newids_read`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newids_read`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newids_read`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newids_read`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newids_read`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'newid' in params:
            path_params['newid'] = params['newid']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/newids/{newid}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='NewidResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_newnet_caches_auth_create(self, api_version, data, **kwargs):
        """rest_newnet_caches_auth_create  # noqa: E501

        Caches the authentication request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newnet_caches_auth_create(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param AuthCacheRequest data: (required)
        :return: CreateAuthCacheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_newnet_caches_auth_create_with_http_info)(api_version, data, **kwargs)
        else:
            data = (self.rest_newnet_caches_auth_create_with_http_info)(api_version, data, **kwargs)
            return data

    def rest_newnet_caches_auth_create_with_http_info(self, api_version, data, **kwargs):
        """rest_newnet_caches_auth_create  # noqa: E501

        Caches the authentication request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newnet_caches_auth_create_with_http_info(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param AuthCacheRequest data: (required)
        :return: CreateAuthCacheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'data']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_newnet_caches_auth_create" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_newnet_caches_auth_create`')
        if 'data' not in params or params['data'] is None:
            raise ValueError('Missing the required parameter `data` when calling `rest_newnet_caches_auth_create`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in params:
            body_params = params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/newnet/caches/auth/',
          'POST', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='CreateAuthCacheResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_newnet_caches_auth_read(self, api_version, auth_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newnet_caches_auth_read  # noqa: E501

        Get the authentication information by given request hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newnet_caches_auth_read(api_version, auth_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str auth_hash: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: AuthCacheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_newnet_caches_auth_read_with_http_info)(api_version, auth_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_newnet_caches_auth_read_with_http_info)(api_version, auth_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_newnet_caches_auth_read_with_http_info(self, api_version, auth_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newnet_caches_auth_read  # noqa: E501

        Get the authentication information by given request hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newnet_caches_auth_read_with_http_info(api_version, auth_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str auth_hash: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: AuthCacheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'auth_hash', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_newnet_caches_auth_read" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_newnet_caches_auth_read`')
        if 'auth_hash' not in params or params['auth_hash'] is None:
            raise ValueError('Missing the required parameter `auth_hash` when calling `rest_newnet_caches_auth_read`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_newnet_caches_auth_read`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_newnet_caches_auth_read`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_newnet_caches_auth_read`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_newnet_caches_auth_read`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_newnet_caches_auth_read`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_newnet_caches_auth_read`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_newnet_caches_auth_read`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_newnet_caches_auth_read`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_newnet_caches_auth_read`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newnet_caches_auth_read`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newnet_caches_auth_read`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newnet_caches_auth_read`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newnet_caches_auth_read`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newnet_caches_auth_read`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newnet_caches_auth_read`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newnet_caches_auth_read`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newnet_caches_auth_read`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newnet_caches_auth_read`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newnet_caches_auth_read`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newnet_caches_auth_read`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newnet_caches_auth_read`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newnet_caches_auth_read`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newnet_caches_auth_read`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newnet_caches_auth_read`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newnet_caches_auth_read`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'auth_hash' in params:
            path_params['auth_hash'] = params['auth_hash']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/newnet/caches/auth/{auth_hash}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='AuthCacheResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_newnet_caches_pay_create(self, api_version, data, **kwargs):
        """rest_newnet_caches_pay_create  # noqa: E501

        Cache the pay request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newnet_caches_pay_create(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param PayCacheRequest data: (required)
        :return: CreatePayCacheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_newnet_caches_pay_create_with_http_info)(api_version, data, **kwargs)
        else:
            data = (self.rest_newnet_caches_pay_create_with_http_info)(api_version, data, **kwargs)
            return data

    def rest_newnet_caches_pay_create_with_http_info(self, api_version, data, **kwargs):
        """rest_newnet_caches_pay_create  # noqa: E501

        Cache the pay request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newnet_caches_pay_create_with_http_info(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param PayCacheRequest data: (required)
        :return: CreatePayCacheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'data']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_newnet_caches_pay_create" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_newnet_caches_pay_create`')
        if 'data' not in params or params['data'] is None:
            raise ValueError('Missing the required parameter `data` when calling `rest_newnet_caches_pay_create`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in params:
            body_params = params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/newnet/caches/pay/',
          'POST', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='CreatePayCacheResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_newnet_caches_pay_read(self, api_version, pay_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newnet_caches_pay_read  # noqa: E501

        Retrieve the pay information by given pay hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newnet_caches_pay_read(api_version, pay_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str pay_hash: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: PayCacheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_newnet_caches_pay_read_with_http_info)(api_version, pay_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_newnet_caches_pay_read_with_http_info)(api_version, pay_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_newnet_caches_pay_read_with_http_info(self, api_version, pay_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_newnet_caches_pay_read  # noqa: E501

        Retrieve the pay information by given pay hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_newnet_caches_pay_read_with_http_info(api_version, pay_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str pay_hash: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: PayCacheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'pay_hash', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_newnet_caches_pay_read" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_newnet_caches_pay_read`')
        if 'pay_hash' not in params or params['pay_hash'] is None:
            raise ValueError('Missing the required parameter `pay_hash` when calling `rest_newnet_caches_pay_read`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_newnet_caches_pay_read`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_newnet_caches_pay_read`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_newnet_caches_pay_read`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_newnet_caches_pay_read`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_newnet_caches_pay_read`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_newnet_caches_pay_read`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_newnet_caches_pay_read`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_newnet_caches_pay_read`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_newnet_caches_pay_read`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newnet_caches_pay_read`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_newnet_caches_pay_read`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newnet_caches_pay_read`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_newnet_caches_pay_read`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newnet_caches_pay_read`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_newnet_caches_pay_read`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newnet_caches_pay_read`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_newnet_caches_pay_read`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newnet_caches_pay_read`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_newnet_caches_pay_read`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newnet_caches_pay_read`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_newnet_caches_pay_read`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newnet_caches_pay_read`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_newnet_caches_pay_read`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newnet_caches_pay_read`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_newnet_caches_pay_read`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'pay_hash' in params:
            path_params['pay_hash'] = params['pay_hash']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/newnet/caches/pay/{pay_hash}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='PayCacheResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_oracles_read(self, api_version, oracle_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_oracles_read  # noqa: E501

        Get the oracle information by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_oracles_read(api_version, oracle_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str oracle_id: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: RetrieveOracleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_oracles_read_with_http_info)(api_version, oracle_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_oracles_read_with_http_info)(api_version, oracle_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_oracles_read_with_http_info(self, api_version, oracle_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_oracles_read  # noqa: E501

        Get the oracle information by given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_oracles_read_with_http_info(api_version, oracle_id, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str oracle_id: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: RetrieveOracleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'oracle_id', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_oracles_read" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_oracles_read`')
        if 'oracle_id' not in params or params['oracle_id'] is None:
            raise ValueError('Missing the required parameter `oracle_id` when calling `rest_oracles_read`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_oracles_read`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_oracles_read`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_oracles_read`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_oracles_read`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_oracles_read`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_oracles_read`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_oracles_read`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_oracles_read`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_oracles_read`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_oracles_read`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_oracles_read`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_oracles_read`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_oracles_read`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_oracles_read`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_oracles_read`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_oracles_read`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_oracles_read`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_oracles_read`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_oracles_read`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_oracles_read`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_oracles_read`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_oracles_read`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_oracles_read`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_oracles_read`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_oracles_read`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'oracle_id' in params:
            path_params['oracle_id'] = params['oracle_id']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/oracles/{oracle_id}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='RetrieveOracleResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_proofs_create(self, api_version, data, **kwargs):
        """rest_proofs_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_create(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param CreateProofRequest data: (required)
        :return: CreateProofResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_proofs_create_with_http_info)(api_version, data, **kwargs)
        else:
            data = (self.rest_proofs_create_with_http_info)(api_version, data, **kwargs)
            return data

    def rest_proofs_create_with_http_info(self, api_version, data, **kwargs):
        """rest_proofs_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_create_with_http_info(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param CreateProofRequest data: (required)
        :return: CreateProofResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'data']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_proofs_create" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_proofs_create`')
        if 'data' not in params or params['data'] is None:
            raise ValueError('Missing the required parameter `data` when calling `rest_proofs_create`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in params:
            body_params = params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/proofs/',
          'POST', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='CreateProofResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_proofs_delete(self, api_version, proof_hash, data, **kwargs):
        """rest_proofs_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_delete(api_version, proof_hash, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str proof_hash: (required)
        :param CancelProofRequest data: (required)
        :return: CancelProofResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_proofs_delete_with_http_info)(api_version, proof_hash, data, **kwargs)
        else:
            data = (self.rest_proofs_delete_with_http_info)(api_version, proof_hash, data, **kwargs)
            return data

    def rest_proofs_delete_with_http_info(self, api_version, proof_hash, data, **kwargs):
        """rest_proofs_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_delete_with_http_info(api_version, proof_hash, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str proof_hash: (required)
        :param CancelProofRequest data: (required)
        :return: CancelProofResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'proof_hash', 'data']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_proofs_delete" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_proofs_delete`')
        if 'proof_hash' not in params or params['proof_hash'] is None:
            raise ValueError('Missing the required parameter `proof_hash` when calling `rest_proofs_delete`')
        if 'data' not in params or params['data'] is None:
            raise ValueError('Missing the required parameter `data` when calling `rest_proofs_delete`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'proof_hash' in params:
            path_params['proof_hash'] = params['proof_hash']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in params:
            body_params = params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/proofs/{proof_hash}/',
          'DELETE', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='CancelProofResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_proofs_read(self, api_version, proof_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_proofs_read  # noqa: E501

        Get the proof by given proof hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_read(api_version, proof_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str proof_hash: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: ProofResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_proofs_read_with_http_info)(api_version, proof_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
        else:
            data = (self.rest_proofs_read_with_http_info)(api_version, proof_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs)
            return data

    def rest_proofs_read_with_http_info(self, api_version, proof_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, **kwargs):
        """rest_proofs_read  # noqa: E501

        Get the proof by given proof hash.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_read_with_http_info(api_version, proof_hash, dapp_key, protocol, version, ts, nonce, os, language, dapp_signature_method, dapp_signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param str proof_hash: (required)
        :param str dapp_key: The decentralized application access key (required)
        :param str protocol: The protocol name. default is 'HEP'. (required)
        :param str version: The protocol version such as '1.0' (required)
        :param int ts: The current timestamp (required)
        :param str nonce: The random string or auto-increment sequence (required)
        :param str os: The operating system of client such as ios, android, dweb,etc. (required)
        :param str language: The i18n language code such as zh, en, etc. (required)
        :param str dapp_signature_method: The signature method used by dapp. (required)
        :param str dapp_signature: The signature generated by dapp. (required)
        :return: ProofResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'proof_hash', 'dapp_key', 'protocol', 'version', 'ts', 'nonce', 'os', 'language', 'dapp_signature_method', 'dapp_signature']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_proofs_read" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_proofs_read`')
        if 'proof_hash' not in params or params['proof_hash'] is None:
            raise ValueError('Missing the required parameter `proof_hash` when calling `rest_proofs_read`')
        if 'dapp_key' not in params or params['dapp_key'] is None:
            raise ValueError('Missing the required parameter `dapp_key` when calling `rest_proofs_read`')
        if 'protocol' not in params or params['protocol'] is None:
            raise ValueError('Missing the required parameter `protocol` when calling `rest_proofs_read`')
        if 'version' not in params or params['version'] is None:
            raise ValueError('Missing the required parameter `version` when calling `rest_proofs_read`')
        if 'ts' not in params or params['ts'] is None:
            raise ValueError('Missing the required parameter `ts` when calling `rest_proofs_read`')
        if 'nonce' not in params or params['nonce'] is None:
            raise ValueError('Missing the required parameter `nonce` when calling `rest_proofs_read`')
        if 'os' not in params or params['os'] is None:
            raise ValueError('Missing the required parameter `os` when calling `rest_proofs_read`')
        if 'language' not in params or params['language'] is None:
            raise ValueError('Missing the required parameter `language` when calling `rest_proofs_read`')
        if 'dapp_signature_method' not in params or params['dapp_signature_method'] is None:
            raise ValueError('Missing the required parameter `dapp_signature_method` when calling `rest_proofs_read`')
        if 'dapp_signature' not in params or params['dapp_signature'] is None:
            raise ValueError('Missing the required parameter `dapp_signature` when calling `rest_proofs_read`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) > 64:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_proofs_read`, length must be less than or equal to `64`')
        if 'dapp_key' in params:
            if len(params['dapp_key']) < 1:
                raise ValueError('Invalid value for parameter `dapp_key` when calling `rest_proofs_read`, length must be greater than or equal to `1`')
        if 'protocol' in params:
            if len(params['protocol']) > 10:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_proofs_read`, length must be less than or equal to `10`')
        if 'protocol' in params:
            if len(params['protocol']) < 1:
                raise ValueError('Invalid value for parameter `protocol` when calling `rest_proofs_read`, length must be greater than or equal to `1`')
        if 'version' in params:
            if len(params['version']) > 10:
                raise ValueError('Invalid value for parameter `version` when calling `rest_proofs_read`, length must be less than or equal to `10`')
        if 'version' in params:
            if len(params['version']) < 1:
                raise ValueError('Invalid value for parameter `version` when calling `rest_proofs_read`, length must be greater than or equal to `1`')
        if 'nonce' in params:
            if len(params['nonce']) > 64:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_proofs_read`, length must be less than or equal to `64`')
        if 'nonce' in params:
            if len(params['nonce']) < 1:
                raise ValueError('Invalid value for parameter `nonce` when calling `rest_proofs_read`, length must be greater than or equal to `1`')
        if 'os' in params:
            if len(params['os']) > 10:
                raise ValueError('Invalid value for parameter `os` when calling `rest_proofs_read`, length must be less than or equal to `10`')
        if 'os' in params:
            if len(params['os']) < 1:
                raise ValueError('Invalid value for parameter `os` when calling `rest_proofs_read`, length must be greater than or equal to `1`')
        if 'language' in params:
            if len(params['language']) > 10:
                raise ValueError('Invalid value for parameter `language` when calling `rest_proofs_read`, length must be less than or equal to `10`')
        if 'language' in params:
            if len(params['language']) < 1:
                raise ValueError('Invalid value for parameter `language` when calling `rest_proofs_read`, length must be greater than or equal to `1`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_proofs_read`, length must be less than or equal to `64`')
        if 'dapp_signature_method' in params:
            if len(params['dapp_signature_method']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature_method` when calling `rest_proofs_read`, length must be greater than or equal to `1`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) > 64:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_proofs_read`, length must be less than or equal to `64`')
        if 'dapp_signature' in params:
            if len(params['dapp_signature']) < 1:
                raise ValueError('Invalid value for parameter `dapp_signature` when calling `rest_proofs_read`, length must be greater than or equal to `1`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        if 'proof_hash' in params:
            path_params['proof_hash'] = params['proof_hash']
        query_params = []
        if 'dapp_key' in params:
            query_params.append(('dapp_key', params['dapp_key']))
        if 'protocol' in params:
            query_params.append(('protocol', params['protocol']))
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'ts' in params:
            query_params.append(('ts', params['ts']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'os' in params:
            query_params.append(('os', params['os']))
        if 'language' in params:
            query_params.append(('language', params['language']))
        if 'dapp_signature_method' in params:
            query_params.append(('dapp_signature_method', params['dapp_signature_method']))
        if 'dapp_signature' in params:
            query_params.append(('dapp_signature', params['dapp_signature']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/proofs/{proof_hash}/',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='ProofResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_proofs_receipts_create(self, api_version, data, **kwargs):
        """rest_proofs_receipts_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_receipts_create(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param RetrieveProofReceiptsRequest data: (required)
        :return: RetrieveProofReceiptsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_proofs_receipts_create_with_http_info)(api_version, data, **kwargs)
        else:
            data = (self.rest_proofs_receipts_create_with_http_info)(api_version, data, **kwargs)
            return data

    def rest_proofs_receipts_create_with_http_info(self, api_version, data, **kwargs):
        """rest_proofs_receipts_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_receipts_create_with_http_info(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param RetrieveProofReceiptsRequest data: (required)
        :return: RetrieveProofReceiptsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'data']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_proofs_receipts_create" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_proofs_receipts_create`')
        if 'data' not in params or params['data'] is None:
            raise ValueError('Missing the required parameter `data` when calling `rest_proofs_receipts_create`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in params:
            body_params = params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/proofs/receipts/',
          'POST', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='RetrieveProofReceiptsResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)

    def rest_proofs_rewards_create(self, api_version, data, **kwargs):
        """rest_proofs_rewards_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_rewards_create(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param RetrieveProofRewardsRequest data: (required)
        :return: RetrieveProofRewardsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return (self.rest_proofs_rewards_create_with_http_info)(api_version, data, **kwargs)
        else:
            data = (self.rest_proofs_rewards_create_with_http_info)(api_version, data, **kwargs)
            return data

    def rest_proofs_rewards_create_with_http_info(self, api_version, data, **kwargs):
        """rest_proofs_rewards_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rest_proofs_rewards_create_with_http_info(api_version, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: (required)
        :param RetrieveProofRewardsRequest data: (required)
        :return: RetrieveProofRewardsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'api_version', 'data']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rest_proofs_rewards_create" % key)
            params[key] = val

        del params['kwargs']
        if 'api_version' not in params or params['api_version'] is None:
            raise ValueError('Missing the required parameter `api_version` when calling `rest_proofs_rewards_create`')
        if 'data' not in params or params['data'] is None:
            raise ValueError('Missing the required parameter `data` when calling `rest_proofs_rewards_create`')
        collection_formats = {}
        path_params = {}
        if 'api_version' in params:
            path_params['api_version'] = params['api_version']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in params:
            body_params = params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/rest/v{api_version}/proofs/rewards/',
          'POST', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='RetrieveProofRewardsResponse',
          auth_settings=auth_settings,
          async_req=(params.get('async_req')),
          _return_http_data_only=(params.get('_return_http_data_only')),
          _preload_content=(params.get('_preload_content', True)),
          _request_timeout=(params.get('_request_timeout')),
          collection_formats=collection_formats)