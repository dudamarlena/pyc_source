# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/exts/smtp.py
# Compiled at: 2018-12-08 08:56:56
# Size of source mod 2**32: 1845 bytes
import click
from flask import current_app
from flask_cli import with_appcontext
from flask_mail import Mail
mail = Mail()

def setup_app(app):
    mail.init_app(app)
    init_email_error_handler(app)
    app.cli.add_command(testmail)


@click.command()
@with_appcontext
def testmail():
    """Test SMTP handler operations."""
    click.echo(f"Current app name: {current_app.name}")
    click.echo('Sending current app name as ERROR email... ')
    current_app.logger.error(f"Current app name: {current_app.name}")


def init_email_error_handler(app):
    """
    Initialize a logger to send emails on error-level messages.
    Unhandled exceptions will now send an email message to app.config.ADMINS.
    """
    if app.debug:
        return
    host = app.config['MAIL_SERVER']
    port = app.config['MAIL_PORT']
    from_addr = app.config['MAIL_DEFAULT_SENDER']
    secure = () if app.config.get('MAIL_USE_TLS') else None
    to_addr_list = app.config['ADMINS']
    subject = app.config.get('APP_SYSTEM_ERROR_SUBJECT_LINE', 'System Error')
    import logging
    from logging.handlers import SMTPHandler
    mail_handler = SMTPHandler(mailhost=(
     host, port),
      fromaddr=from_addr,
      toaddrs=to_addr_list,
      subject=subject,
      credentials=None,
      secure=secure)
    mail_handler.setLevel(logging.ERROR)
    app.logger.addHandler(mail_handler)