# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/dataclay/util/management/classmgr/Utils.py
# Compiled at: 2019-11-11 07:06:07
# Size of source mod 2**32: 2095 bytes
""" Class description goes here. """
from itertools import starmap
from jinja2 import Template
import dataclay.serialization.python.lang.BooleanWrapper as BooleanWrapper
import dataclay.serialization.python.lang.FloatWrapper as FloatWrapper
import dataclay.serialization.python.lang.IntegerWrapper as IntegerWrapper
import dataclay.serialization.python.lang.NullWrapper as NullWrapper
from .Type import Type
NATIVE_PACKAGES = {
 'numpy',
 'caffe',
 'csv'}
STATIC_ATTRIBUTE_FOR_EXTERNAL_INIT = 'DCLAY_FORCE_EXTERNAL_INIT'
py_code = Template('\nclass {{ class_name }}({{ parent_name }}):\n    """Auto-generated code for class {{ metaclass.name }}\n\n    This source code has been generated by the dataclay MetaClass container. There is\n    some work ToDo yet.\n    """\n{% for c in imp_codes %}\n{{ c }}{% endfor %}\n')
stub_only_def = Template('\n    @dclayEmptyMethod\n    def {{ func_name }}(\n            self{% for param in param_names %}{% if loop.first %},{% endif %}\n            {{ param }}{% if loop.last %}\n    {% endif %}{% else %}\n    {% endfor %}):\n        raise NotImplementedError("Language Error: Method {{ func_name }} is not available for Python")\n')
mapping_table = [
 (
  (
   'int', int, IntegerWrapper(64)),
  Type(signature='J',
    includes=[])),
 (
  (
   'float', float, FloatWrapper(64)),
  Type(signature='D',
    includes=[])),
 (
  (
   'bool', bool, BooleanWrapper()),
  Type(signature='Z',
    includes=[])),
 (
  (
   'None', None, NullWrapper()),
  Type(signature='V',
    includes=[]))]
docstring_types = dict(starmap(lambda what, type_c: (
 what[0], type_c), mapping_table))
instance_types = dict(starmap(lambda what, type_c: (
 what[1], type_c), mapping_table))
serialization_types = dict(starmap(lambda what, type_c: (
 type_c.signature, what[2]), mapping_table))