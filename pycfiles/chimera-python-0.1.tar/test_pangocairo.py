# uncompyle6 version 3.6.7
# Python bytecode 2.5 (62131)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.linux-i686/egg/chimera/tests/test_pangocairo.py
# Compiled at: 2007-02-08 13:55:31
__doc__ = '\nPangoCairo frontends the Pango Layout and Cairo Rendering systems with\na simple, convenience API. To use it you first create a drawing\nsurface.\n\n>>> import chimera.pangocairo as pangocairo\n\nLets create a surface from an existing resource and write it out to\nanother name.\n\n>>> im = pangocairo.ImageSurface("logo.png")\n>>> assert \'PNG\' in im.asPngBuffer()[:128]\n\nGreat. Now lets create an empty image we will use for testing\n\n>>> im = pangocairo.ImageSurface(\'argb\', 256, 256)\n>>> assert im.height == 256\n>>> assert im.width == 256\n>>> repr(im)\n\'<ImageSurface 256x256>\'\n\nNow that we have a surface to draw on we can construct a CairoContext.\nThis object is our entry point to all the warm Cairo gooeyness.\n\n>>> c = pangocairo.CairoContext(im)\n\nWe expose a good portion of the Cairo API (but not all of it). While\nour focus is around properly laid out text with high quality rendering\nwe can still draw on the canvas.\n\n>>> c.rectangle((10,10), (150, 125))\n>>> c.fill_preserve((1, 0, 0, 0.7))\n>>> c.linewidth = 2.0\n>>> c.stroke("green")\n>>> c.rotateDegrees(45.0)\n>>> c.rectangle((150,0), (100,100))\n>>> c.stroke("blue")\n\n>>> assert c.asPngBuffer()\n\n\nWhat we really want all this for though is control over text layout, fonts\nand rendering.\n\n\n>>> l = c.Layout()\n>>> l.hint_style = "slight"\n>>> l.hint_metrics = "on"\n>>> l.antialias = "subpixel"\n>>> t = l.Text("Chimera Rocks", "Times New Roman 24")\n>>> c.move_to(100,100)\n>>> c.rotateDegrees(-45.0)\n>>> t.underline = "double"\n>>> t.weight = "heavy"\n>>> t.style = "italic"\n>>> t.letter_spacing = 2500\n>>> assert l + t\n>>> assert l.fill((1.0, 0.0, 1.0, 1.0))\n\n>>> l = c.Layout()\n>>> t = l.Text("Python", "Helvetica 32")\n>>> t.underline = "none"\n>>> t.letter_spacing = -2500\n>>> t.foreground = "blue"\n>>> c.move_to(25, 25)\n>>> t = l.Text(" Love", "Helvetica 24")\n>>> t.letter_spacing = 2000\n>>> t.foreground = "red"\n>>> t.underline = "single"\n>>> t.style= "oblique"\n>>> extents = l.show()\n\nWhat follows is an example of doing a high quality drop shadow\ntext image. A layout is generated, a shadow is rendered, and the the\nsame layout is rendered over it at an offset.\n\n>>> im = pangocairo.ImageSurface("argb", 256, 256)\n>>> c = pangocairo.CairoContext(im)\n>>> l = c.Layout()\n>>> l.antialias = "subpixel"\n>>> l.hint_style = "strong"\n>>> l.hint_metrics = "on"\n\n>>> text = "ARTIST CLIENT LOGIN"\n>>> font = "Helvetica-11:bold"\n>>> t = l.Text(text, font)\n>>> t.letter_spacing = 200\n>>> t.weight = "bold"\n>>> c.move_to(10,100)\n>>> ext1 = l.fill("#2b001899")\n\nReuse the same layout for the top layer with a different fill\n\n>>> c.move_to(11, 99)\n>>> ext2 = l.fill("#ffffffff")\n\nHere we want to extract it to a properly sized area. Given the\nbounding rect imageFromRect will do just that. This is like\ntraditional Chimera clipping.\n#>>> r = ext1 + ext2\n#>>> im2 = im.create_similar(\'color_alpha\', r.width, r.height)\n#>>> c2 = pangocairo.CairoContext(im2)\n#>>> im2 = c2.scaleImage(2,2)\n#>>> assert im2.width == r.width *2\n\n\n\nWe have bi-directional interoperatbility with PNGs. Here we pass a\nfile object into ImageSurface\n>>> png = open("logo.png", "r")\n>>> im = pangocairo.ImageSurface(png)\n>>> assert im.size == (274, 194)\n\n'
import doctest

def test_suite():
    suite = doctest.DocTestSuite()
    return suite


if __name__ == '__main__':
    doctest.testmod()