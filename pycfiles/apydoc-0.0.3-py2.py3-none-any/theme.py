# uncompyle6 version 3.6.7
# Python bytecode 2.4 (62061)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.macosx-10.3-fat/egg/apydia/theme.py
# Compiled at: 2007-11-29 15:55:40
__doc__ = '\n    Theme support\n    =============\n    \n    Creating themes for Apydia is fairly easy if you know how to use\n    [Genshi](http://genshi.edgewall.org/ "Genshi - Trac") (and it\'s limited \n    XInclude implementation). If you don\'t, take a look at the bundled \n    "elixir"- and "apydia"-themes to get an idea.\n    \n    Each theme must have a ``theme.ini``-file with one or more of the\n    following options in it\'s ``[theme]``-section:\n    \n    <table>\n        <tr>\n            <th>Option</th>\n            <th>Description</th>\n        </tr>\n        <tr>\n            <td><tt>title</tt></td>\n            <td>The name of the project for which documention is\n                generated.</td>\n        </tr>\n        <tr>\n            <td><tt>inherits</tt></td>\n            <td>The parent theme the current theme will inherit. You might\n                want to set this to <tt>default</tt> and modify the default\n                theme. You can omit it, if you prefer, and create all\n                templates and CSS from scratch.</td>\n        </tr>\n        <tr>\n            <td><tt>description</tt></td>\n            <td>Short description about the theme. This is currently\n                not used at all.</td>\n        </tr>\n        <tr>\n            <td><tt>pygments_style</tt></td>\n            <td>The identifier of the Pygments style to use for syntax\n                highlighting.</td>\n        </tr>\n        <tr>\n            <td><tt>pygments_style_css</tt></td>\n            <td>Custom filename for the CSS-file generated by Pygments.\n                If left out it will default to the value of\n                <tt>pygments_style</tt> appended by <tt>-pygments.css</tt>.\n            </td>\n        </tr>\n        <tr>\n            <td><tt>resources</tt></td>\n            <td>Whitespace separated list for resources to be copied. May\n                contain wildcards (see Python\'s <tt>glob</tt>-module for\n                details). Apydia will try to locate the specified files\n                relative to the theme\'s base directory, then the parent\n                theme\'s directory and so forth.</td>\n        </tr>\n    </table>\n    \n    Example:\n    --------\n    \n        [theme]\n        title = Apydia\n        inherits = default\n        description = "API Reference Theme for Apydia"\n        pygments_style = apydia\n        pygments_style_css = css/pygments.css\n        resources = css/default.css css/apydia.css images/*\n    \n'
import os
from glob import glob
from pkg_resources import iter_entry_points, DistributionNotFound
from ConfigParser import RawConfigParser, NoOptionError, NoSectionError
__all__ = [
 'Theme', 'ThemeNotFoundError', 'InheritanceError']
DESCRIPTOR_NAME = 'theme.ini'
DEFAULT_PYGMENTS_STYLE = 'apydiadefault'

class ThemeNotFoundError(StandardError):
    """
        A ``ThemeNotFoundError`` will be raised if the specified theme is not
        available.
    """
    __module__ = __name__


class InheritanceError(StandardError):
    """
        Exception to be raised when there's any problem with inheritance.
        Currently ``InheritanceError``s will only be raised if a theme is
        configured to inherit from itself or from one of it's descendants.
    """
    __module__ = __name__


class Theme(object):
    """
        The ``Theme``-class represents and loads themes. It also knows where
        the theme's and it parent theme's resources can be found.
    """
    __module__ = __name__
    themes = dict()

    def __init__(self, name, module):
        self.name = name
        self.module = module
        self.parent = None
        self.resource_patterns = []
        self._resources = None
        cp = RawConfigParser()
        cp.read(os.path.join(self.path, DESCRIPTOR_NAME))
        try:
            self.parent = Theme.load(cp.get('theme', 'inherits'))
            self.find_loops()
        except (NoOptionError, NoSectionError):
            pass

        try:
            patterns = cp.get('theme', 'resources')
            self.resource_patterns += patterns.split()
        except (NoOptionError, NoSectionError):
            pass

        try:
            self.pygments_style = cp.get('theme', 'pygments_style')
        except NoOptionError:
            if self.parent:
                self.pygments_style = self.parent.pygments_style
            else:
                self.pygments_style = DEFAULT_PYGMENTS_STYLE

        try:
            self.pygments_style_css = cp.get('theme', 'pygments_style_css')
        except NoOptionError:
            if self.parent:
                self.pygments_style_css = self.parent.pygments_style_css
            else:
                self.pygments_style_css = self.pygments_style + '-pygments.css'

        return

    @classmethod
    def load(cls, name):
        """
            Loads and returns the theme with the identifier
            equal to the value of ``name``.
        """
        if name in cls.themes:
            return cls.themes[name]
        module = None
        for entrypoint in iter_entry_points('apydia.themes', name):
            try:
                module = entrypoint.load()
            except DistributionNotFound, msg:
                warnings.warn('DistributionNotFound: %s' % msg)

        if not module:
            raise ThemeNotFoundError, 'No such theme "%s" can be found.' % name
        else:
            cls.themes[name] = Theme(name, module)
            return cls.themes[name]
        return

    @property
    def resources(self):
        if self._resources is None:
            self._resources = self.find_all_resources(self.resource_patterns)
        return self._resources

    def find_all_resources(self, patterns):
        """ Find all required resource-files for this theme. """
        resources = []
        for pattern in patterns:
            for template_dir in self.template_dirs:
                found = glob(os.path.join(template_dir, pattern))
                if found:
                    for path in found:
                        resources.append((path, path[len(template_dir) + 1:]))

                    break

        return resources

    @property
    def template_dirs(self):
        """
            Returns a list of this theme's and it parents'
            base directories. 
        """
        if self.parent:
            return [self.path] + self.parent.template_dirs
        else:
            return [
             self.path]

    @property
    def path(self):
        """ Returns this theme's base directory. """
        return os.path.realpath(sorted(self.module.__path__, cmp=lambda a, b: len(a) - len(b))[0])

    def find_loops(self):
        """
            Raises an ``InheritanceError`` if this theme inherits
            itself or one of it's descendants.
        """
        theme = self
        while theme.parent:
            if self == theme.parent:
                raise InheritanceError, 'The theme inherits itself, which is nonsense'
            theme = theme.parent