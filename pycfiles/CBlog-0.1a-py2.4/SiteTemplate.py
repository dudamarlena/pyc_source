# uncompyle6 version 3.7.4
# Python bytecode 2.4 (62061)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-i686/egg/cblog/templates/SiteTemplate.py
# Compiled at: 2006-12-08 09:23:54
import sys, os, os.path
from os.path import getmtime, exists
import time, types, __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters, Cheetah.ErrorCatchers as ErrorCatchers
from SiteBase import SiteBase
import time
from cblog import fflash
from cblog.widgets import sitewide
from pprint import pformat
try:
    (
     True, False)
except NameError:
    (True, False) = (
     1 == 1, 1 == 0)

VFFSL = valueFromFrameOrSearchList
VFSL = valueFromSearchList
VFN = valueForName
currentTime = time.time
__CHEETAH_version__ = '2.0rc7'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 7)
__CHEETAH_genTime__ = 1165587834.855712
__CHEETAH_genTimestamp__ = 'Fri Dec  8 15:23:54 2006'
__CHEETAH_src__ = 'SiteTemplate.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Dec  8 15:23:54 2006'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'
if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError('This template was compiled with Cheetah version %s. Templates compiled before version %s must be recompiled.' % (__CHEETAH_version__, RequiredCheetahVersion))

class SiteTemplate(SiteBase):
    __module__ = __name__

    def __init__(self, *args, **KWs):
        SiteBase.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = ('searchList namespaces filter filtersLib errorCatcher').split()
            for (k, v) in KWs.items():
                if k in allowedKWs:
                    cheetahKWArgs[k] = v

            self._initCheetahInstance(**cheetahKWArgs)

    def headtop(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def extra_header_data(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('  <!-- insert extra header lines (links etc.) here -->\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def extra_stylesheets(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('  <!-- insert extra stylesheet links here -->\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def pagetitle(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('  <title></title>\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def pagecontent(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('<p class="placeholder">Here comes the page content...</p>\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def respond(self, trans=None):
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"\n"http://www.w3.org/TR/html4/strict.dtd">\n\n<html>\n<head>\n')
        self.headtop(trans=trans)
        self.extra_header_data(trans=trans)
        write('\n')
        for css in VFFSL(SL, 'tg_css', False):
            write('  ')
            _v = VFFSL(SL, 'css', False)()
            if _v is not None:
                write(_filter(_v, rawExpr='$css()'))
            write('\n')

        write('\n')
        write('  ')
        _v = VFFSL(SL, 'css_link', False)('cblog.css')
        if _v is not None:
            write(_filter(_v, rawExpr="$css_link('cblog.css')"))
        write('\n')
        self.extra_stylesheets(trans=trans)
        write('\n')
        write('\n')
        for js in VFFSL(SL, 'tg_js_head', False):
            write('  ')
            _v = VFFSL(SL, 'js', False)()
            if _v is not None:
                write(_filter(_v, rawExpr='$js()'))
            write('\n')

        write('\n')
        self.pagetitle(trans=trans)
        write('</head>\n\n<body>\n')
        for js in VFFSL(SL, 'tg_js_bodytop', False):
            _v = VFFSL(SL, 'js', False)()
            if _v is not None:
                write(_filter(_v, rawExpr='$js()'))
            write('\n')

        write('\n<!-- Header -->\n<div id="header">\n  <h1 id="blogtitle"><a href="')
        _v = VFN(VFFSL(SL, 'tg', False), 'url', False)('/')
        if _v is not None:
            write(_filter(_v, rawExpr="${tg.url('/')}"))
        write('">')
        _v = VFFSL(SL, 'tg.blogtitle', False)
        if _v is not None:
            write(_filter(_v, rawExpr='${tg.blogtitle}'))
        write('</a></h1>\n\n  <ul id="navbar">\n    <li><a href="')
        _v = VFN(VFFSL(SL, 'tg', False), 'url', False)('/')
        if _v is not None:
            write(_filter(_v, rawExpr="$tg.url('/')"))
        write('">Home</a></li>\n\n    <li><a href="')
        _v = VFN(VFFSL(SL, 'tg', False), 'url', False)('/archive')
        if _v is not None:
            write(_filter(_v, rawExpr="$tg.url('/archive')"))
        write('">Archive</a></li>\n\n    <li><a href="')
        _v = VFN(VFFSL(SL, 'tg', False), 'url', False)('/featured')
        if _v is not None:
            write(_filter(_v, rawExpr="$tg.url('/featured')"))
        write('">Featured</a></li>\n\n')
        if VFN(VFFSL(SL, 'tg', False), 'config', False)('identity.on', False):
            if VFFSL(SL, 'tg.identity.anonymous', False):
                if 'loggin_in' not in locals():
                    write('    <li><a href="')
                    _v = VFN(VFFSL(SL, 'tg', False), 'url', False)('/login')
                    if _v is not None:
                        write(_filter(_v, rawExpr="$tg.url('/login')"))
                    write('">Login</a></li>\n')
            else:
                write('    <li><a href="')
                _v = VFN(VFFSL(SL, 'tg', False), 'url', False)('/logout')
                if _v is not None:
                    write(_filter(_v, rawExpr="$tg.url('/logout')"))
                write('">Logout</a></li>\n')
        write('  </ul>\n\n  <h2 id="description">')
        _v = VFFSL(SL, 'tg.blogdesc', False)
        if _v is not None:
            write(_filter(_v, rawExpr='${tg.blogdesc}'))
        write('</h2>\n\n</div>\n\n<div id="content">\n<!-- Main Column -->\n<div id="main">\n\n')
        _v = VFFSL(SL, 'tg_fancyflash', False)(VFFSL(SL, 'tg_flash', False))
        if _v is not None:
            write(_filter(_v, rawExpr='$tg_fancyflash($tg_flash)'))
        write('\n\n')
        self.pagecontent(trans=trans)
        write('</div>\n\n<!-- Sidebar -->\n<div id="sidebar">\n\n  ')
        _v = VFFSL(SL, 'tg_search_form', False)(action=VFN(VFFSL(SL, 'tg', False), 'url', False)('/search'), method='GET', form_attrs=dict(id='searchform'))
        if _v is not None:
            write(_filter(_v, rawExpr="${tg_search_form(action=$tg.url('/search'), method='GET',\n    form_attrs=dict(id='searchform'))}"))
        write('\n\n  ')
        _v = VFFSL(SL, 'tg_profile', False)()
        if _v is not None:
            write(_filter(_v, rawExpr='$tg_profile()'))
        write('\n\n  <h2 class="sidebar-title">Categories</h2>\n\n  ')
        _v = VFFSL(SL, 'tg_category_links', False)()
        if _v is not None:
            write(_filter(_v, rawExpr='$tg_category_links()'))
        write('\n\n  <h2 class="sidebar-title">Monthly Archives</h2>\n\n  ')
        _v = VFFSL(SL, 'tg_archive_links', False)()
        if _v is not None:
            write(_filter(_v, rawExpr='$tg_archive_links()'))
        write('\n\n')
        if VFFSL(SL, 'getVar', False)('tg.feeds', None):
            write('  <h2 class="sidebar-title">Get feeds</h2>\n\n  <ul>\n    <li><a\n      title="')
            _v = VFN(VFFSL(SL, 'tg', False), 'feeds', False)['full']['title']
            if _v is not None:
                write(_filter(_v, escape='quote', rawExpr="${tg.feeds['full']['title'], escape='quote'}"))
            write(' (Full text, Atom 1.0)"\n      href="')
            _v = VFN(VFFSL(SL, 'tg', False), 'feeds', False)['full']['href']
            if _v is not None:
                write(_filter(_v, rawExpr="${tg.feeds['full']['href']}"))
            write('">Full text of latest posts</a></li>\n    <li><a\n      title="')
            _v = VFN(VFFSL(SL, 'tg', False), 'feeds', False)['summary']['title']
            if _v is not None:
                write(_filter(_v, escape='quote', rawExpr="${tg.feeds['summary']['title'], escape='quote'}"))
            write(' (Summary, Atom 1.0)"\n      href="')
            _v = VFN(VFFSL(SL, 'tg', False), 'feeds', False)['summary']['href']
            if _v is not None:
                write(_filter(_v, rawExpr="${tg.feeds['summary']['href']}"))
            write('">Summary of latest posts</a></li>\n')
            if VFFSL(SL, 'getVar', False)('tag', None) and VFN(VFFSL(SL, 'tg.feeds', False), 'get', False)(VFFSL(SL, 'tag.name', False)):
                write('    <li><a title="')
                _v = VFN(VFFSL(SL, 'tg', False), 'feeds', False)[VFFSL(SL, 'tag.name', False)]['full']['title']
                if _v is not None:
                    write(_filter(_v, escape='quote', rawExpr="${tg.feeds[$tag.name]['full']['title'], escape='quote'}"))
                write('"\n      href="')
                _v = VFN(VFFSL(SL, 'tg', False), 'feeds', False)[VFFSL(SL, 'tag.name', False)]['full']['href']
                if _v is not None:
                    write(_filter(_v, rawExpr="${tg.feeds[$tag.name]['full']['href']}"))
                write('">Posts in this category</a>\n      (Full text, Atom 1.0)</li>\n    <li><a title="')
                _v = VFN(VFFSL(SL, 'tg', False), 'feeds', False)[VFFSL(SL, 'tag.name', False)]['summary']['title']
                if _v is not None:
                    write(_filter(_v, escape='quote', rawExpr="${tg.feeds[$tag.name]['summary']['title'], escape='quote'}"))
                write('"\n      href="')
                _v = VFN(VFFSL(SL, 'tg', False), 'feeds', False)[VFFSL(SL, 'tag.name', False)]['summary']['href']
                if _v is not None:
                    write(_filter(_v, rawExpr="${tg.feeds[$tag.name]['summary']['href']}"))
                write('">Posts in this category (Summary)</a>\n      (Summary, Atom 1.0)</li>\n')
            write('  </ul>\n')
        write('\n  <h2 class="sidebar-title">Links</h2>\n\n  <!--\n    +++++++++++++++++++++++++++++++++++++++++++++++++\n\n      Add things to your sidebar here.\n      Use the format:\n\n      <li><a href="URL">Link Text</a></li>\n\n    +++++++++++++++++++++++++++++++++++++++++++++++++\n  -->\n  <ul>\n    <li><a href="http://chrisarndt.de/projects/cblog/"\n      target="_blank">Homepage</a></li>\n  </ul>\n\n')
        if VFN(VFFSL(SL, 'tg', False), 'config', False)('identity.on', False):
            if not VFFSL(SL, 'tg.identity.anonymous', False):
                write('  <h2 class="sidebar-title">Tools</h2>\n\n  <ul>\n    <li><a href="')
                _v = VFN(VFFSL(SL, 'tg', False), 'url', False)('/edit_article')
                if _v is not None:
                    write(_filter(_v, rawExpr="${tg.url('/edit_article')}"))
                write('">Post new article</a></li>\n')
                if 'admin' in VFFSL(SL, 'tg.identity.permissions', False):
                    write('    <li><a href="')
                    _v = VFN(VFFSL(SL, 'tg', False), 'url', False)('/admin')
                    if _v is not None:
                        write(_filter(_v, rawExpr="${tg.url('/admin')}"))
                    write('" target="_blank">Administration</a></li>\n')
                write('  </ul>\n')
            write('\n  <p id="login">\n')
            if VFFSL(SL, 'tg.identity.anonymous', False):
                write('    You are not logged in\n')
            else:
                write('    You are logged in as\n    <span class="user_name">')
                _v = VFFSL(SL, 'tg.identity.user.display_name', False)
                if _v is not None:
                    write(_filter(_v, rawExpr='$tg.identity.user.display_name'))
                write('</span>\n')
            write('  </p>\n')
        write('\n  <p id="tg-logo"><a href="http://turbogears.org"\n    title="This website is powered by TurboGears, the Python web mega-framework."\n    ><img src="/static/images/under_the_hood_blue.png" width="150" height="40"\n    alt="TurboGears under the hood"/></a></p>\n\n</div>\n</div>\n\n<!-- Footer -->\n<div id="footer">\n  <p id="copyright">&copy ')
        _v = VFN(VFFSL(SL, 'time', False), 'strftime', False)('%Y')
        if _v is not None:
            write(_filter(_v, rawExpr="$time.strftime('%Y')"))
        write(' by ')
        _v = VFN(VFFSL(SL, 'tg', False), 'config', False)('cblog.author')
        if _v is not None:
            write(_filter(_v, rawExpr="$tg.config('cblog.author')"))
        write('</p>\n</div>\n\n')
        for js in VFFSL(SL, 'tg_js_bodybottom', False):
            _v = VFFSL(SL, 'js', False)()
            if _v is not None:
                write(_filter(_v, rawExpr='$js()'))
            write('\n')

        write('\n')
        if VFN(VFFSL(SL, 'tg', False), 'config', False)('log_debug_info_filter.on', False):
            write('<pre class="debug">\n')
            _v = VFFSL(SL, 'pformat', False)(VFFSL(SL, 'searchList', False)(), indent=2, depth=5)
            if _v is not None:
                write(_filter(_v, escape=True, rawExpr='${pformat($searchList(), indent=2, depth=5), escape=True}'))
            write('\n</pre>\n')
        write('\n')
        write('<div id="domloadeof" style="display:none"></div>\n</body>\n</html>\n')
        return _dummyTrans and trans.response().getvalue() or ''

    _CHEETAH__instanceInitialized = False
    _CHEETAH_version = __CHEETAH_version__
    _CHEETAH_versionTuple = __CHEETAH_versionTuple__
    _CHEETAH_genTime = __CHEETAH_genTime__
    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__
    _CHEETAH_src = __CHEETAH_src__
    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__
    _mainCheetahMethod_for_SiteTemplate = 'respond'


if not hasattr(SiteTemplate, '_initCheetahAttributes'):
    templateAPIClass = getattr(SiteTemplate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(SiteTemplate)
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=SiteTemplate()).run()