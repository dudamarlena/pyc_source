# uncompyle6 version 3.6.7
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.macosx-10.11-intel/egg/samples/__init__.py
# Compiled at: 2016-07-06 11:52:41
__doc__ = '\nCopyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\nLicensed under the Amazon Software License (the "License").\nYou may not use this file except in compliance with the License.\nA copy of the License is located at\n\nhttp://aws.amazon.com/asl/\n\nor in the "license" file accompanying this file. This file is distributed\non an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\nexpress or implied. See the License for the specific language governing\npermissions and limitations under the License.\n\n\nBEFORE YOU GET STARTED\n======================\n\nBefore running the samples, you\'ll want to make sure that your environment is\nconfigured to allow the samples to use your AWS credentials. To familiarize\nyourself with AWS Credentials read this guide:\n\n    http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\n\nFor the MultiLangDaemon and boto libs you\'ll want to make your credentials \navailable to one of the credentials providers in the default credential\nproviders chain such as providing a ~/.aws/credentials file \n\n    http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html\n\nRUNNING THE SAMPLE\n==================\n\nNavigate to the amazon_kclpy directory and install the package. Using the amazon_kclpy\npackage requires the MultiLangDaemon which is provided by the java KCL. To get\nthe necessary jars to this directory before installing, you\'ll want to run the\n"download_jars" command before running "install". If you just want the python\nKCL and plan to retrieve the necessary jars yourself, you can just do "install"\n\n    python setup.py download_jars\n    python setup.py install\n\nNow the amazon_kclpy and boto and required jars should be installed in your\nenvironment. To start the sample putter, run:\n\n    sample_kinesis_wordputter.py --stream words -w cat -w dog -w bird\n\nThis will create a Kinesis stream called words and put the words specified by\nthe -w options into the stream once each. Use -p SECONDS to indicate a period\nover which to repeatedly put these words.\n\nNow we would like to run a python KCL application that reads records from\nthe stream we just created, but first take a look in the samples directory,\nyou\'ll find a file called sample.properties, cat that file:\n\n    cat samples/sample.properties\n\nYou\'ll see several properties defined there. "executableName" indicates the\nexecutable for the MultiLangDaemon to run, "streamName" is the Kinesis stream\nto read from, "appName" is the KCL application name to use which will be the\nname of a DynamoDB table that gets created by the KCL, "initialPositionInStream"\ntells the KCL how to start reading from shards upon a fresh startup. To run the\nsample application you can use a helper script included in the package.\n\n    amazon_kclpy_helper.py --print_command         --java <path-to-java> --properties samples/sample.properties\n\nThis will print the command needed to run the sample which you can copy paste,\nor surround the command with back ticks, e.g.\n\n    `amazon_kclpy_helper.py --print_command         --java <path-to-java> --properties samples/sample.properties`\n'