# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/Bep/core/usage.py
# Compiled at: 2015-11-18 20:38:38
epilog_use = '\nSee command specific help by issuing a trailing `-h` after the command:\n(eg. `%(prog)s [command] -h`)\n'
verbose_use = '\nshow all output during specified command processes.\n'
quiet_use = '\nshow minimal output during specified command processes.\n'
lang_use = '\nspecify a language version to use.\n(default is system default:  %(default)s)\n'
all_use = '\ncan use to either update|remove|turn_off all installed\npackages at once.\n'
list_use = '\nLists all installed packages and whether each package\nversion is turned on or off.\n'
list_sub_use = '\nList does not take any arguments, and when called, it lists\nall installed packages and whether each is turned on or off.\n'
install_use = '\nInstalls specified package(s).\nCan be used to either install one specific package\nat a time or to install several packages at once as\nspecified in the {} file.\n\n'
install_sub_use = '\n\nInstalling a single package.\n-----------------------------------------------------\n(Note, specifying a branch is optional; if a branch/version\nis not given, then the most current(/master/default)\nbranch is installed; also, repo_type needs only to be\nspecified if it is not obvious given the pkg_type:\ngithub could only be git, but bitbucket would need\nto be specified, as it could be either git or hg)\n  `%(prog)s pkg_type pkg_name [repo_type] [branch]`\n\n  eg.  %(prog)s github ipython/ipython\n  eg.  %(prog)s github pydata/pandas -b some_branch\n  eg.  %(prog)s bitbucket mchaput/whoosh hg\n'
packages_file_use = '\nInstalling several packages.\n-----------------------------------------------------\ninstalls all packages specified in the {} file.\n  eg. %(prog)s packages\n'

class cmd_help(object):
    update_use = '\nUpdates specified package(s).\nCan pass an argument to either update a specific\npackage or to update `--all` (turned on) packages.\n'
    update_sub_use = '\n\n(note, update ignores turned off packages)\n\nTo see the exact syntax of how to update a package,\njust pass an installed package name to the update\ncommand; the command can be run from there as well.\n-----------------------------------------------------\n  `%(prog)s pkg_name`\n\n  eg.  %(prog)s ipython\n\n\nUpdating a single package.\n-----------------------------------------------------\n  `%(prog)s pkg_type pkg_name --branch|-b branch_name`\n\n  eg.  %(prog)s github ipython -b master\n  eg.  %(prog)s bitbucket some_pkg_name -b default\n\n  And for a package not using the system default\n  language version:\n  eg.  {name} -l python3.3 update github ipython -b master\n\n\n\nUpdating several packages.\n-----------------------------------------------------\n`--all`: all turned on packages will be updated,\n\n  eg.  %(prog)s --all\n'
    remove_use = '\nRemoves specified package(s).\nCan pass an argument to either remove a specific\npackage or to remove `--all` installed packages.\n'
    remove_sub_use = '\n\nTo see the exact syntax of how to remove a package,\njust pass an installed package name to the remove\ncommand; the command can be run from there as well.\n-----------------------------------------------------\n  `%(prog)s pkg_name`\n\n  eg.  %(prog)s ipython\n\n\nRemoval of a single package.\n-----------------------------------------------------\n  `%(prog)s pkg_type pkg_name --branch|-b branch_name`\n\n  eg.  %(prog)s github ipython -b master\n  eg.  %(prog)s bitbucket whoosh -b default\n\n  And for a package not using the system default\n  language version:\n  eg.  {name} -l python3.3 remove github ipython -b master\n\n\nRemoval of several packages.\n-----------------------------------------------------\n`--all`: all installed packages will be removed,\n\n    eg.  %(prog)s --all\n\n'
    turn_off_use = '\nTurns off specified package(s).\nCan pass an argument to either turn off a specific\npackage or to turn off `--all` installed packages.\nWhat this does is that it makes the given\npackage(s) inactive so that they are hidden from the\nenvironment.  This is useful for a few reasons, see\n`%(prog)s turn_off -h` for more information.\n'
    turn_off_sub_use = '\n\nTurning off packages is useful because:\n1. It makes it so that several versions of the\n   same package can be installed (from the same\n   or different pkg_type or version of the language),\n   which can then be easily switched between -- with\n   only one version of a given package capable of\n   being turned on at any given time for a language\n   version;\n2. Thus, if all installed versions are turned off,\n   then that same package installed at the system\n   level (if there is one) can be accessed without\n   having to remove the package;\n3. And by turning off a package, it means that it\n   will then not have to be re-downloaded and re-\n   installed if wanting to use it again later (by\n   later using `turn_on` to reactivate the package),\n   which could potentially save much time building\n   and installing a package.\n\n\nTo see the exact syntax of how to turn off a package,\njust pass an installed package name to the turn_off\ncommand; the command can be run from there as well.\n-----------------------------------------------------\n  `%(prog)s pkg_name`\n\n  eg.  %(prog)s ipython\n\n\nTurning off a single package.\n-----------------------------------------------------\n\n  `%(prog)s pkg_type pkg_name --branch|-b branch_name`\n\n  eg.  %(prog)s github ipython -b master\n  eg.  %(prog)s bitbucket some_pkg_name -b default\n\n  And for a package not using the system default\n  language version:\n  eg.  {name} -l python3.3 turn_off github ipython -b master\n\n\nTurning off several packages.\n-----------------------------------------------------\n`--all`: all installed packages will be turned off.\n\n    eg.  %(prog)s --all\n'
    turn_on_use = '\nTurns on a specified package.\nCan pass an argument to turn on a specific\npackage that is currently turned off.\n'
    turn_on_sub_use = '\n\nIf there are packages that are turned off, then this will\nreactivate them so that they can be seen once again by the\nenvironment for use.  Note, only one version of a specific\npackage can be turned on at any given time for a specific\nlanguage version.\n\n\nTo see the exact syntax of how to turn on a package,\njust pass an installed package name to the turn_on\ncommand; the command can be run from there as well.\n-----------------------------------------------------\n  `%(prog)s pkg_name`\n\n  eg.  %(prog)s ipython\n\n\nTurning on a single package.\n-----------------------------------------------------\n  `%(prog)s pkg_type pkg_name --branch|-b branch_name`\n\n  eg.  %(prog)s github ipython -b master\n  eg.  %(prog)s bitbucket some_pkg_name -b default\n\n  And for a package not using the system default\n  language version:\n  eg.  {name} -l python3.3 update github ipython -b master\n\n'