# uncompyle6 version 3.6.7
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.linux-x86_64/egg/bplib/compile.py
# Compiled at: 2019-05-26 22:08:31
import os, platform, cffi
try:
    print 'OpenSSL Path: %s' % os.environ['OPENSSL_DIR']
    openssl_dir = os.environ['OPENSSL_DIR']
except:
    if platform.system() == 'Darwin' and os.path.isdir('/usr/local/opt/openssl/include'):
        openssl_dir = '/usr/local/opt/openssl/include'
    else:
        print 'Using default openssl location. Set OPENSSL_DIR env variable to change it.'
        openssl_dir = '../openssl'

from os.path import join
csrc = 'include'
link_args = []
libraries = [
 'crypto']
extra_compile_args = ['-Wno-deprecated-declarations']
include_dirs = [csrc, openssl_dir]
library_dirs = []
cfiles = [
 'bp_fp12.c', 'bp_fp6.c', 'bp_g2.c',
 'bp_group.c', 'bp_map.c', 'bp_fp2.c',
 'bp_g1.c', 'bp_g2_mult.c', 'bp_gt.c']
print 'Path: %s' % csrc
csources = list(map(lambda x: 'bplib/src/' + x, cfiles))
from petlib.compile import _FFI as petlib_ffibuilder
ffibuilder = cffi.FFI()
ffibuilder.include(petlib_ffibuilder)
ffibuilder.set_source('bplib._bplib', '\n#include <openssl/crypto.h>\n#include <openssl/err.h>\n#include <openssl/bn.h>\n#include <openssl/ec.h>\n#include <openssl/evp.h>\n#include <openssl/hmac.h>\n#include <openssl/ecdsa.h>\n\n#include <openssl/ossl_typ.h>\n\n#include <bp.h>\n\n    ', libraries=libraries, extra_compile_args=extra_compile_args, include_dirs=include_dirs, library_dirs=library_dirs, extra_link_args=link_args, sources=csources)
ffibuilder.cdef('\n\n// BP Functions\ntypedef ... BP_GROUP;\ntypedef ... G1_ELEM;\ntypedef ... G2_ELEM;\ntypedef ... GT_ELEM;\n\n#define NID_fp254bnb 1\n\nBP_GROUP *BP_GROUP_new(void);\nBP_GROUP *BP_GROUP_new_by_curve_name(int nid);\nvoid BP_GROUP_clear_free(BP_GROUP *group);\nBP_GROUP *BP_GROUP_dup(const BP_GROUP *a);\nconst EC_GROUP *BP_GROUP_get_group_G1(BP_GROUP *group);\n\nint BP_GROUP_get_order(const BP_GROUP *group, BIGNUM *order, BN_CTX *ctx);\nint BP_GROUP_get_generator_G1(const BP_GROUP *group, G1_ELEM *g);\nint BP_GROUP_precompute_mult_G1(BP_GROUP *group, BN_CTX *ctx);\nint BP_GROUP_get_generator_G2(const BP_GROUP *group, G2_ELEM *g);\nint BP_GROUP_precompute_mult_G2(BP_GROUP *group, BN_CTX *ctx);\nint BP_GROUP_get_curve(const BP_GROUP *group, BIGNUM *p, BIGNUM *a,\n                       BIGNUM *b, BN_CTX *ctx);\nG1_ELEM *G1_ELEM_new(const BP_GROUP *group);\nvoid G1_ELEM_free(G1_ELEM *point);\nvoid G1_ELEM_clear_free(G1_ELEM *point);\nint G1_ELEM_copy(G1_ELEM *dst, const G1_ELEM *src);\nG1_ELEM *G1_ELEM_dup(const G1_ELEM *src, const BP_GROUP *group);\nint G1_ELEM_set_to_infinity(const BP_GROUP *group, G1_ELEM *point);\nint G1_ELEM_set_Jprojective_coordinates(const BP_GROUP *group,\n                                        G1_ELEM *point, const BIGNUM *x,\n                                        const BIGNUM *y,\n                                        const BIGNUM *z, BN_CTX *ctx);\nint G1_ELEM_get_Jprojective_coordinates(const BP_GROUP *group,\n                                        const G1_ELEM *point, BIGNUM *x,\n                                        BIGNUM *y, BIGNUM *z,\n                                        BN_CTX *ctx);\nint G1_ELEM_set_affine_coordinates(const BP_GROUP *group, G1_ELEM *point,\n                                   const BIGNUM *x, const BIGNUM *y,\n                                   BN_CTX *ctx);\nint G1_ELEM_get_affine_coordinates(const BP_GROUP *group,\n                                   const G1_ELEM *point, BIGNUM *x,\n                                   BIGNUM *y, BN_CTX *ctx);\nint G1_ELEM_set_compressed_coordinates(const BP_GROUP *group,\n                                       G1_ELEM *point, const BIGNUM *x,\n                                       int y_bit, BN_CTX *ctx);\nsize_t G1_ELEM_point2oct(const BP_GROUP *group, const G1_ELEM *point,\n                         point_conversion_form_t form, unsigned char *buf,\n                         size_t len, BN_CTX *ctx);\nint G1_ELEM_oct2point(const BP_GROUP *group, const G1_ELEM *point,\n                      const unsigned char *buf, size_t len, BN_CTX *ctx);\n/********************************************************************/\n/*              Functions for arithmetic in group G1                */\n/********************************************************************/\nint G1_ELEM_add(const BP_GROUP *group, G1_ELEM *r, const G1_ELEM *a,\n                const G1_ELEM *b, BN_CTX *ctx);\nint G1_ELEM_dbl(const BP_GROUP *group, G1_ELEM *r, const G1_ELEM *a,\n                BN_CTX *ctx);\nint G1_ELEM_invert(const BP_GROUP *group, G1_ELEM *a, BN_CTX *ctx);\nint G1_ELEM_is_at_infinity(const BP_GROUP *group, const G1_ELEM *point);\nint G1_ELEM_is_on_curve(const BP_GROUP *group, const G1_ELEM *point,\n                        BN_CTX *ctx);\nint G1_ELEM_cmp(const BP_GROUP *group, const G1_ELEM *point,\n                const G1_ELEM *b, BN_CTX *ctx);\nint G1_ELEM_make_affine(const BP_GROUP *group, G1_ELEM *point, BN_CTX *ctx);\nint G1_ELEMs_make_affine(const BP_GROUP *group, size_t num,\n                         G1_ELEM *points[], BN_CTX *ctx);\nint G1_ELEM_mul(const BP_GROUP *group, G1_ELEM *r, const BIGNUM *g_scalar,\n                const G1_ELEM *point, const BIGNUM *p_scalar,\n                BN_CTX *ctx);\nint G1_ELEMs_mul(const BP_GROUP *group, G1_ELEM *r, const BIGNUM *scalar,\n                 size_t num, const G1_ELEM *points[],\n                 const BIGNUM *scalars[], BN_CTX *ctx);\n/********************************************************************/\n/*              Functions for managing G2 elements                  */\n/********************************************************************/\nG2_ELEM *G2_ELEM_new(const BP_GROUP *group);\nvoid G2_ELEM_free(G2_ELEM *point);\nvoid G2_ELEM_clear_free(G2_ELEM *point);\nint G2_ELEM_copy(G2_ELEM *dst, const G2_ELEM *src);\nG2_ELEM *G2_ELEM_dup(const G2_ELEM *src, const BP_GROUP *group);\n/********************************************************************/\n/*              Functions for arithmetic in group G2                */\n/********************************************************************/\nint G2_ELEM_set_to_infinity(const BP_GROUP *group, G2_ELEM *point);\nint G2_ELEM_set_Jprojective_coordinates(const BP_GROUP *group,\n                                        G2_ELEM *point, const BIGNUM *x[2],\n                                        const BIGNUM *y[2],\n                                        const BIGNUM *z[2], BN_CTX *ctx);\nint G2_ELEM_get_Jprojective_coordinates(const BP_GROUP *group,\n                                        const G2_ELEM *point, BIGNUM *x[2],\n                                        BIGNUM *y[2], BIGNUM *z[2],\n                                        BN_CTX *ctx);\nint G2_ELEM_set_affine_coordinates(const BP_GROUP *group, G2_ELEM *point,\n                                   const BIGNUM *x[2], const BIGNUM *y[2],\n                                   BN_CTX *ctx);\nint G2_ELEM_get_affine_coordinates(const BP_GROUP *group,\n                                   const G2_ELEM *point, BIGNUM *x[2], BIGNUM *y[2],\n                                   BN_CTX *ctx);\nsize_t G2_ELEM_point2oct(const BP_GROUP *group, const G2_ELEM *point,\n                         point_conversion_form_t form, unsigned char *buf,\n                         size_t len, BN_CTX *ctx);\nint G2_ELEM_oct2point(const BP_GROUP *group, G2_ELEM *point,\n                      const unsigned char *buf, size_t len, BN_CTX *ctx);\n/********************************************************************/\n/*              Functions for arithmetic in group G2                */\n/********************************************************************/\nint G2_ELEM_add(const BP_GROUP *group, G2_ELEM *r, const G2_ELEM *a,\n                const G2_ELEM *b, BN_CTX *ctx);\nint G2_ELEM_dbl(const BP_GROUP *group, G2_ELEM *r, const G2_ELEM *a,\n                BN_CTX *ctx);\nint G2_ELEM_invert(const BP_GROUP *group, G2_ELEM *point, BN_CTX *ctx);\nint G2_ELEM_is_at_infinity(const BP_GROUP *group, const G2_ELEM *point);\nint G2_ELEM_is_on_curve(const BP_GROUP *group, const G2_ELEM *point,\n                        BN_CTX *ctx);\nint G2_ELEM_cmp(const BP_GROUP *group, const G2_ELEM *point,\n                const G2_ELEM *b, BN_CTX *ctx);\nint G2_ELEM_make_affine(const BP_GROUP *group, G2_ELEM *point, BN_CTX *ctx);\nint G2_ELEMs_make_affine(const BP_GROUP *group, size_t num,\n                         G2_ELEM *points[], BN_CTX *ctx);\nint G2_ELEM_mul(const BP_GROUP *group, G2_ELEM *r, const BIGNUM *g_scalar,\n                const G2_ELEM *point, const BIGNUM *p_scalar,\n                BN_CTX *ctx);\nint G2_ELEMs_mul(const BP_GROUP *group, G2_ELEM *r, const BIGNUM *scalar,\n                 size_t num, const G2_ELEM *points[],\n                 const BIGNUM *scalars[], BN_CTX *ctx);\n/********************************************************************/\n/*              Functions for managing GT elements                  */\n/********************************************************************/\nGT_ELEM *GT_ELEM_new(const BP_GROUP *group);\nvoid GT_ELEM_free(GT_ELEM *elem);\nvoid GT_clear_free(GT_ELEM *a);\nint GT_ELEM_copy(GT_ELEM *dst, const GT_ELEM *src);\nGT_ELEM *GT_ELEM_dup(const GT_ELEM *src, const BP_GROUP *group);\nint GT_ELEM_zero(GT_ELEM *a);\nint GT_ELEM_is_zero(GT_ELEM *a);\nint GT_ELEM_set_to_unity(const BP_GROUP *group, GT_ELEM *a);\nint GT_ELEM_is_unity(const BP_GROUP *group, const GT_ELEM *a);\nsize_t GT_ELEM_elem2oct(const BP_GROUP *group, const GT_ELEM *a,\n                         unsigned char *buf, size_t len, BN_CTX *ctx);\nint GT_ELEM_oct2elem(const BP_GROUP *group, GT_ELEM *a,\n                      const unsigned char *buf, size_t len, BN_CTX *ctx);\nint GT_ELEM_add(const BP_GROUP *group, GT_ELEM *r, const GT_ELEM *a,\n                const GT_ELEM *b, BN_CTX *ctx);\nint GT_ELEM_sub(const BP_GROUP *group, GT_ELEM *r, const GT_ELEM *a,\n                const GT_ELEM *b, BN_CTX *ctx);\nint GT_ELEM_sqr(const BP_GROUP *group, GT_ELEM *r, const GT_ELEM *a,\n                BN_CTX *ctx);\nint GT_ELEM_mul(const BP_GROUP *group, GT_ELEM *r, GT_ELEM *a, GT_ELEM *b, BN_CTX *ctx);\nint GT_ELEM_inv(const BP_GROUP *group, GT_ELEM *r, GT_ELEM *a, BN_CTX *ctx);\nint GT_ELEM_cmp(const GT_ELEM *a, const GT_ELEM *b);\nint GT_ELEM_exp(const BP_GROUP *group, GT_ELEM *r, const GT_ELEM *a, const BIGNUM *b,\n                BN_CTX *ctx);\nint GT_ELEM_pairing(const BP_GROUP *group, GT_ELEM *r, const G1_ELEM *p,\n                    const G2_ELEM *q, BN_CTX *ctx);\nint GT_ELEMs_pairing(const BP_GROUP *group, GT_ELEM *r, size_t num,\n                     const G1_ELEM *p[], const G2_ELEM *q[], BN_CTX *ctx);\n\n\n')
if __name__ == '__main__':
    print 'Compiling bp ...'
    ffibuilder.compile(verbose=True)