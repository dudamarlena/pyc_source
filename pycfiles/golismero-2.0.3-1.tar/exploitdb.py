# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/Dani/Documents/Projects/Golismero_2.0/src_github/plugins/testing/recon/exploitdb.py
# Compiled at: 2013-12-21 23:37:50
__license__ = '\nGoLismero 2.0 - The web knife - Copyright (C) 2011-2013\n\nAuthors:\n  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com\n  Mario Vilas | mvilas<@>gmail.com\n\nGolismero project site: https://github.com/golismero\nGolismero project mail: golismero.project<@>gmail.com\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n'
from golismero.api.data.vulnerability import Vulnerability
from golismero.api.data.vulnerability.vuln_utils import convert_references_to_vuln_ids, convert_vuln_ids_to_references
from golismero.api.logger import Logger
from golismero.api.plugin import TestingPlugin
import re, requests

class ExploitDBPlugin(TestingPlugin):
    """
    This plugin searches for public exploits for any vulnerability found.
    """

    def get_accepted_info(self):
        return [
         Vulnerability]

    def recv_info(self, info):
        if not info.cve and not info.osvdb:
            Logger.log_more_verbose('No CVE or OSVDB tags found, skipped.')
            return
        ids = self.query_exploitdb(info.cve, info.osvdb)
        ids.update(info.edb)
        new_ids = ids.difference(info.edb)
        if new_ids:
            msg = ('\n').join('    ' + x for x in sorted(convert_vuln_ids_to_references(new_ids)))
            Logger.log('Public exploits found:\n' + msg)
            info.edb = ids
            return info

    URL_CVE = 'http://www.exploit-db.com/search/?action=search&filter_page=%d&filter_cve=%s'
    URL_OSVDB = 'http://www.exploit-db.com/search/?action=search&filter_page=%d&filter_osvdb=%s'
    REGEXP = re.compile('href=\\"(https?\\:\\/\\/www\\.exploit\\-db\\.com\\/exploits\\/[0-9]+/?)\\"')

    def query_exploitdb(self, cve=(), osvdb=()):
        ids = set()
        for n in cve:
            if n.startswith('CVE-'):
                n = n[4:]
            ids.update(self.__query_exploitdb(self.URL_CVE, n))

        for n in osvdb:
            if n.startswith('OSVDB-'):
                n = n[6:]
            ids.update(self.__query_exploitdb(self.URL_OSVDB, n))

        return ids

    def __query_exploitdb(self, url_template, query_string):
        collected = set()
        page = 1
        while True:
            url = url_template % (page, query_string)
            try:
                result = requests.get(url).content
            except Exception:
                break

            urls = self.REGEXP.findall(result)
            ids = convert_references_to_vuln_ids(urls).get('EDB', [])
            if not ids:
                break
            collected.update(ids)
            page += 1

        return collected