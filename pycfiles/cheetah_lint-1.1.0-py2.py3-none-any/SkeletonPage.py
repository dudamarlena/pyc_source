# uncompyle6 version 3.6.7
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/lib.macosx-10.13-x86_64-2.7/Cheetah/Templates/SkeletonPage.py
# Compiled at: 2019-09-22 10:12:27
__doc__ = 'A Skeleton HTML page template, that provides basic structure and utility methods.\n'
import sys, os, os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin

from os.path import getmtime, exists
import time, types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters, Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from Cheetah.Templates._SkeletonPage import _SkeletonPage
VFFSL = valueFromFrameOrSearchList
VFSL = valueFromSearchList
VFN = valueForName
currentTime = time.time
__CHEETAH_version__ = '3.0.0'
__CHEETAH_versionTuple__ = (3, 0, 0, 'development', 1)
__CHEETAH_genTime__ = 1490043964.453685
__CHEETAH_genTimestamp__ = 'Tue Mar 21 00:06:04 2017'
__CHEETAH_src__ = 'Cheetah/Templates/SkeletonPage.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Mar 14 23:26:16 2017'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'
if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError('This template was compiled with Cheetah version %s. Templates compiled before version %s must be recompiled.' % (
     __CHEETAH_version__, RequiredCheetahVersion))

class SkeletonPage(_SkeletonPage):

    def __init__(self, *args, **KWs):
        super(SkeletonPage, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = ('searchList namespaces filter filtersLib errorCatcher').split()
            for k, v in KWs.items():
                if k in allowedKWs:
                    cheetahKWArgs[k] = v

            self._initCheetahInstance(**cheetahKWArgs)

    def writeHeadTag(self, **KWS):
        trans = KWS.get('trans')
        if not trans and not self._CHEETAH__isBuffering and not callable(self.transaction):
            trans = self.transaction
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('<head>\n<title>')
        _v = VFSL([locals()] + SL + [globals(), builtin], 'title', True)
        if _v is not None:
            write(_filter(_v, rawExpr='$title'))
        write('</title>\n')
        _v = VFSL([locals()] + SL + [globals(), builtin], 'metaTags', True)
        if _v is not None:
            write(_filter(_v, rawExpr='$metaTags'))
        write('\n')
        _v = VFSL([locals()] + SL + [globals(), builtin], 'stylesheetTags', True)
        if _v is not None:
            write(_filter(_v, rawExpr='$stylesheetTags'))
        write('\n')
        _v = VFSL([locals()] + SL + [globals(), builtin], 'javascriptTags', True)
        if _v is not None:
            write(_filter(_v, rawExpr='$javascriptTags'))
        write('\n</head>\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def writeBody(self, **KWS):
        trans = KWS.get('trans')
        if not trans and not self._CHEETAH__isBuffering and not callable(self.transaction):
            trans = self.transaction
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('This skeleton page has no flesh. Its body needs to be implemented.\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def respond(self, trans=None):
        if not trans and not self._CHEETAH__isBuffering and not callable(self.transaction):
            trans = self.transaction
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        _RECACHE_header = False
        _cacheRegion_header = self.getCacheRegion(regionID='header', cacheInfo={'type': 2, 'id': 'header'})
        if _cacheRegion_header.isNew():
            _RECACHE_header = True
        _cacheItem_header = _cacheRegion_header.getCacheItem('header')
        if _cacheItem_header.hasExpired():
            _RECACHE_header = True
        if not _RECACHE_header and _cacheItem_header.getRefreshTime():
            try:
                _output = _cacheItem_header.renderOutput()
            except KeyError:
                _RECACHE_header = True
            else:
                write(_output)
                del _output

        if _RECACHE_header or not _cacheItem_header.getRefreshTime():
            _orig_transheader = trans
            trans = _cacheCollector_header = DummyTransaction()
            write = _cacheCollector_header.response().write
            _v = VFSL([locals()] + SL + [globals(), builtin], 'docType', True)
            if _v is not None:
                write(_filter(_v, rawExpr='$docType'))
            write('\n')
            _v = VFSL([locals()] + SL + [globals(), builtin], 'htmlTag', True)
            if _v is not None:
                write(_filter(_v, rawExpr='$htmlTag'))
            write('\n<!-- This document was autogenerated by Cheetah (https://cheetahtemplate.org/).\nDo not edit it directly!\n\nCopyright ')
            _v = VFSL([locals()] + SL + [globals(), builtin], 'currentYr', True)
            if _v is not None:
                write(_filter(_v, rawExpr='$currentYr'))
            write(' - ')
            _v = VFSL([locals()] + SL + [globals(), builtin], 'siteCopyrightName', True)
            if _v is not None:
                write(_filter(_v, rawExpr='$siteCopyrightName'))
            write(' - All Rights Reserved.\nFeel free to copy any javascript or html you like on this site,\nprovided you remove all links and/or references to ')
            _v = VFSL([locals()] + SL + [globals(), builtin], 'siteDomainName', True)
            if _v is not None:
                write(_filter(_v, rawExpr='$siteDomainName'))
            write('\nHowever, please do not copy any content or images without permission.\n\n')
            _v = VFSL([locals()] + SL + [globals(), builtin], 'siteCredits', True)
            if _v is not None:
                write(_filter(_v, rawExpr='$siteCredits'))
            write('\n\n-->\n\n\n')
            self.writeHeadTag(trans=trans)
            write('\n')
            trans = _orig_transheader
            write = trans.response().write
            _cacheData = _cacheCollector_header.response().getvalue()
            _cacheItem_header.setData(_cacheData)
            write(_cacheData)
            del _cacheData
            del _cacheCollector_header
            del _orig_transheader
        write('\n')
        _v = VFSL([locals()] + SL + [globals(), builtin], 'bodyTag', True)
        if _v is not None:
            write(_filter(_v, rawExpr='$bodyTag'))
        write('\n\n')
        self.writeBody(trans=trans)
        write('\n</body>\n</html>\n\n\n\n')
        return _dummyTrans and trans.response().getvalue() or ''

    _CHEETAH__instanceInitialized = False
    _CHEETAH_version = __CHEETAH_version__
    _CHEETAH_versionTuple = __CHEETAH_versionTuple__
    _CHEETAH_genTime = __CHEETAH_genTime__
    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__
    _CHEETAH_src = __CHEETAH_src__
    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__
    _mainCheetahMethod_for_SkeletonPage = 'respond'


if not hasattr(SkeletonPage, '_initCheetahAttributes'):
    templateAPIClass = getattr(SkeletonPage, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(SkeletonPage)
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=SkeletonPage()).run()