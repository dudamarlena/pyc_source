# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3351)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /home/hanzz/releases/odcs/server/odcs/server/pungi.py
# Compiled at: 2017-08-31 11:17:14
# Size of source mod 2**32: 7879 bytes
import os, shutil, tempfile, jinja2, odcs.server.utils
from odcs.server import conf, log
from odcs.server import comps
from odcs.server.types import PungiSourceType
PUNGI_CONFIG_TEMPLATE = ' # Automatically generated by ODCS.\n# PRODUCT INFO\nrelease_name = \'{{ config.release_name }}\'\nrelease_short = \'{{ config.release_short }}\'\nrelease_version = \'{{ config.release_version }}\'\nrelease_is_layered = False\n\n# GENERAL SETTINGS\nbootable = {{ config.bootable }}\n\nvariants_file=\'variants.xml\'\n\n{%- if config.sigkeys %}\nsigkeys = {{ config.sigkeys }}\n{%- else %}\nsigkeys = [None]\n{%- endif %}\n\nhashed_directories = True\n\n# RUNROOT settings\nrunroot = False\n\n# PDC settings\npdc_url = \'{{ config.pdc_url }}\'\npdc_insecure = {{ config.pdc_insecure }}\npdc_develop = {{ config.pdc_develop }}\n\n# PKGSET\n{%- if config.pkgset_source == \'repos\' %}\npkgset_source = \'repos\'\npkgset_repos = {\n{%- for arch in config.arches %}\n    \'{{ arch }}\': [\'{{ config.source }}\',],\n{%- endfor %}\n}\n{%- elif config.pkgset_source == \'koji\' %}\npkgset_source = \'koji\'\npkgset_koji_tag = \'{{ config.koji_tag }}\'\npkgset_koji_inherit = False\n{%- endif %}\n\nfilter_system_release_packages = False\n\n# GATHER\ngather_source = \'{{ config.gather_source }}\'\ngather_method = \'{{ config.gather_method }}\'\n{%- if config.comps_file %}\ncomps_file = \'{{ config.comps_file }}\'\n{%- endif %}\ncheck_deps = False\ngreedy_method = \'build\'\n\n# CREATEREPO\ncreaterepo_c = True\ncreaterepo_checksum = \'sha256\'\n\n# CHECKSUMS\nmedia_checksums = [\'sha256\']\ncreate_jigdo = False\n\nskip_phases = ["buildinstall", "live_media", "live_images", "ostree"]\n\ntranslate_paths = [\n   (\'/mnt/koji/compose/\', \'http://kojipkgs.fedoraproject.org/compose/\'),\n]\n\nkoji_profile = \'{{ config.koji_profile }}\'\n\n'

class PungiConfig(object):

    def __init__(self, release_name, release_version, source_type, source, packages=None, arches=None):
        self.release_name = release_name
        self.release_version = release_version
        self.bootable = False
        self.sigkeys = []
        self.pdc_url = conf.pdc_url
        self.pdc_insecure = conf.pdc_insecure
        self.pdc_develop = conf.pdc_develop
        self.source_type = source_type
        self.source = source
        self.koji_profile = conf.koji_profile
        if arches:
            self.arches = arches
        else:
            self.arches = conf.arches
        self.packages = packages or []
        if source_type == PungiSourceType.KOJI_TAG:
            self.koji_tag = source
            self.gather_source = 'comps'
            self.gather_method = 'deps'
        else:
            if source_type == PungiSourceType.MODULE:
                self.koji_tag = None
                self.gather_source = 'module'
                self.gather_method = 'nodeps'
                if self.packages:
                    raise ValueError('Exact packages cannot be set for MODULE source type.')
            else:
                if source_type == PungiSourceType.REPO:
                    self.gather_source = 'comps'
                    self.gather_method = 'deps'
                    self.koji_tag = None
                else:
                    raise ValueError('Unknown source_type %r' % source_type)

    @property
    def release_short(self):
        return self.release_name[:16]

    @property
    def comps_file(self):
        if self.source_type == PungiSourceType.MODULE:
            return
        else:
            return 'comps.xml'

    @property
    def pkgset_source(self):
        if self.source_type == PungiSourceType.REPO:
            return 'repos'
        return 'koji'

    def get_comps_config(self):
        if self.source_type == PungiSourceType.MODULE:
            return ''
        odcs_comps = comps.Comps()
        odcs_group = comps.Group('odcs-group', 'odcs-group', 'ODCS compose default group')
        for package in self.packages:
            odcs_group.add_package(comps.Package(package))

        odcs_comps.add_group(odcs_group)
        template = jinja2.Template(comps.COMPS_TEMPLATE)
        return template.render(comps=odcs_comps)

    def get_variants_config(self):
        odcs_product = comps.Product()
        tmp_variant = comps.Variant('Temporary', 'Temporary', 'variant', self.source_type)
        for arch in self.arches:
            tmp_variant.add_arch(comps.Arch(arch))

        if self.source_type == PungiSourceType.MODULE:
            for module in self.source.split(' '):
                tmp_variant.add_module(comps.Module(module))

        elif self.source_type == PungiSourceType.KOJI_TAG and self.packages:
            tmp_variant.add_group(comps.Group('odcs-group', 'odcs-group', 'ODCS compose default group'))
        odcs_product.add_variant(tmp_variant)
        template = jinja2.Template(comps.VARIANTS_TEMPLATE)
        return template.render(product=odcs_product)

    def get_pungi_config(self):
        template = jinja2.Template(PUNGI_CONFIG_TEMPLATE)
        return template.render(config=self)


class Pungi(object):

    def __init__(self, pungi_cfg, koji_event=None):
        self.pungi_cfg = pungi_cfg
        self.koji_event = koji_event

    def _write_cfg(self, fn, cfg):
        with open(fn, 'w') as (f):
            log.info('Writing %s configuration to %s.', os.path.basename(fn), fn)
            f.write(cfg)

    def run(self):
        td = None
        try:
            td = tempfile.mkdtemp()
            main_cfg = self.pungi_cfg.get_pungi_config()
            variants_cfg = self.pungi_cfg.get_variants_config()
            comps_cfg = self.pungi_cfg.get_comps_config()
            log.debug('Main Pungi config:')
            log.debug('%s', main_cfg)
            log.debug('Variants.xml:')
            log.debug('%s', variants_cfg)
            log.debug('Comps.xml:')
            log.debug('%s', comps_cfg)
            self._write_cfg(os.path.join(td, 'pungi.conf'), main_cfg)
            self._write_cfg(os.path.join(td, 'variants.xml'), variants_cfg)
            self._write_cfg(os.path.join(td, 'comps.xml'), comps_cfg)
            pungi_cmd = [
             conf.pungi_koji, '--config=%s' % os.path.join(td, 'pungi.conf'),
             '--target-dir=%s' % conf.target_dir, '--nightly']
            if self.koji_event:
                pungi_cmd += ['--koji-event', str(self.koji_event)]
            odcs.server.utils.execute_cmd(pungi_cmd, cwd=td)
        finally:
            try:
                if td is not None:
                    shutil.rmtree(td)
            except Exception as e:
                log.warning('Failed to remove temporary directory {!r}: {}'.format(td, str(e)))