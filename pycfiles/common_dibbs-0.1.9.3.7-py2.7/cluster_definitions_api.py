# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.11-x86_64/egg/common_dibbs/clients/rm_client/apis/cluster_definitions_api.py
# Compiled at: 2016-12-14 11:02:48
"""
    Resource manager API

    Manage Cloud Computing resources via API.

    OpenAPI spec version: 0.1.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
from __future__ import absolute_import
import sys, os, re
from six import iteritems
from ..configuration import Configuration
from ..api_client import ApiClient

class ClusterDefinitionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def clusters_get(self, **kwargs):
        """
        Get the list of all the cluster definitions registered.
        Get the list of all the cluster definitions registered. No authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Cluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_get_with_http_info(**kwargs)
        else:
            data = self.clusters_get_with_http_info(**kwargs)
            return data

    def clusters_get_with_http_info(self, **kwargs):
        """
        Get the list of all the cluster definitions registered.
        Get the list of all the cluster definitions registered. No authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Cluster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clusters_get" % key)
            params[key] = val

        del params['kwargs']
        resource_path = ('/clusters/').replace('{format}', 'json')
        path_params = {}
        query_params = {}
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api(resource_path, 'GET', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='list[Cluster]', auth_settings=auth_settings, callback=params.get('callback'), _return_http_data_only=params.get('_return_http_data_only'))

    def clusters_id_add_host_post(self, id, **kwargs):
        """
        Add a host to the specified cluster.
        Add a host to the specified cluster. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_add_host_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_id_add_host_post_with_http_info(id, **kwargs)
        else:
            data = self.clusters_id_add_host_post_with_http_info(id, **kwargs)
            return data

    def clusters_id_add_host_post_with_http_info(self, id, **kwargs):
        """
        Add a host to the specified cluster.
        Add a host to the specified cluster. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_add_host_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clusters_id_add_host_post" % key)
            params[key] = val

        del params['kwargs']
        if 'id' not in params or params['id'] is None:
            raise ValueError('Missing the required parameter `id` when calling `clusters_id_add_host_post`')
        if 'id' in params and params['id'] < 0.0:
            raise ValueError('Invalid value for parameter `id` when calling `clusters_id_add_host_post`, must be a value greater than or equal to `0.0`')
        resource_path = ('/clusters/{id}/add_host/').replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        query_params = {}
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api(resource_path, 'POST', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='Cluster', auth_settings=auth_settings, callback=params.get('callback'), _return_http_data_only=params.get('_return_http_data_only'))

    def clusters_id_delete(self, id, **kwargs):
        """
        Delete an already existing cluster definition.
        Delete an already existing cluster definition. Authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_id_delete_with_http_info(id, **kwargs)
        else:
            data = self.clusters_id_delete_with_http_info(id, **kwargs)
            return data

    def clusters_id_delete_with_http_info(self, id, **kwargs):
        """
        Delete an already existing cluster definition.
        Delete an already existing cluster definition. Authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_delete_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clusters_id_delete" % key)
            params[key] = val

        del params['kwargs']
        if 'id' not in params or params['id'] is None:
            raise ValueError('Missing the required parameter `id` when calling `clusters_id_delete`')
        if 'id' in params and params['id'] < 0.0:
            raise ValueError('Invalid value for parameter `id` when calling `clusters_id_delete`, must be a value greater than or equal to `0.0`')
        resource_path = ('/clusters/{id}/').replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        query_params = {}
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = [
         'api_key']
        return self.api_client.call_api(resource_path, 'DELETE', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type=None, auth_settings=auth_settings, callback=params.get('callback'), _return_http_data_only=params.get('_return_http_data_only'))

    def clusters_id_get(self, id, **kwargs):
        """
        Get a single cluster definition.
        Get a single cluster definition. Authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster description (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_id_get_with_http_info(id, **kwargs)
        else:
            data = self.clusters_id_get_with_http_info(id, **kwargs)
            return data

    def clusters_id_get_with_http_info(self, id, **kwargs):
        """
        Get a single cluster definition.
        Get a single cluster definition. Authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster description (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clusters_id_get" % key)
            params[key] = val

        del params['kwargs']
        if 'id' not in params or params['id'] is None:
            raise ValueError('Missing the required parameter `id` when calling `clusters_id_get`')
        if 'id' in params and params['id'] < 0.0:
            raise ValueError('Invalid value for parameter `id` when calling `clusters_id_get`, must be a value greater than or equal to `0.0`')
        resource_path = ('/clusters/{id}/').replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        query_params = {}
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api(resource_path, 'GET', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='Cluster', auth_settings=auth_settings, callback=params.get('callback'), _return_http_data_only=params.get('_return_http_data_only'))

    def clusters_id_new_account_post(self, id, **kwargs):
        """
        Create a new user account on the specified cluster.
        Create a new user account on the specified cluster. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_new_account_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster (required)
        :return: TemporaryAccountCredential
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_id_new_account_post_with_http_info(id, **kwargs)
        else:
            data = self.clusters_id_new_account_post_with_http_info(id, **kwargs)
            return data

    def clusters_id_new_account_post_with_http_info(self, id, **kwargs):
        """
        Create a new user account on the specified cluster.
        Create a new user account on the specified cluster. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_new_account_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster (required)
        :return: TemporaryAccountCredential
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clusters_id_new_account_post" % key)
            params[key] = val

        del params['kwargs']
        if 'id' not in params or params['id'] is None:
            raise ValueError('Missing the required parameter `id` when calling `clusters_id_new_account_post`')
        if 'id' in params and params['id'] < 0.0:
            raise ValueError('Invalid value for parameter `id` when calling `clusters_id_new_account_post`, must be a value greater than or equal to `0.0`')
        resource_path = ('/clusters/{id}/new_account/').replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        query_params = {}
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api(resource_path, 'POST', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='TemporaryAccountCredential', auth_settings=auth_settings, callback=params.get('callback'), _return_http_data_only=params.get('_return_http_data_only'))

    def clusters_id_put(self, id, data, **kwargs):
        """
        Redefine an already existing cluster definition.
        Redefine an already existing cluster definition. Authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_put(id, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster description (required)
        :param ClusterPost data: cluster definition (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_id_put_with_http_info(id, data, **kwargs)
        else:
            data = self.clusters_id_put_with_http_info(id, data, **kwargs)
            return data

    def clusters_id_put_with_http_info(self, id, data, **kwargs):
        """
        Redefine an already existing cluster definition.
        Redefine an already existing cluster definition. Authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_put_with_http_info(id, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster description (required)
        :param ClusterPost data: cluster definition (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'id', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clusters_id_put" % key)
            params[key] = val

        del params['kwargs']
        if 'id' not in params or params['id'] is None:
            raise ValueError('Missing the required parameter `id` when calling `clusters_id_put`')
        if 'data' not in params or params['data'] is None:
            raise ValueError('Missing the required parameter `data` when calling `clusters_id_put`')
        if 'id' in params and params['id'] < 0.0:
            raise ValueError('Invalid value for parameter `id` when calling `clusters_id_put`, must be a value greater than or equal to `0.0`')
        resource_path = ('/clusters/{id}/').replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        query_params = {}
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in params:
            body_params = params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = [
         'api_key']
        return self.api_client.call_api(resource_path, 'PUT', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='Cluster', auth_settings=auth_settings, callback=params.get('callback'), _return_http_data_only=params.get('_return_http_data_only'))

    def clusters_id_remove_host_post(self, id, **kwargs):
        """
        Remove a host from the specified cluster.
        Remove a host from the specified cluster. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_remove_host_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_id_remove_host_post_with_http_info(id, **kwargs)
        else:
            data = self.clusters_id_remove_host_post_with_http_info(id, **kwargs)
            return data

    def clusters_id_remove_host_post_with_http_info(self, id, **kwargs):
        """
        Remove a host from the specified cluster.
        Remove a host from the specified cluster. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_id_remove_host_post_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the cluster (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clusters_id_remove_host_post" % key)
            params[key] = val

        del params['kwargs']
        if 'id' not in params or params['id'] is None:
            raise ValueError('Missing the required parameter `id` when calling `clusters_id_remove_host_post`')
        if 'id' in params and params['id'] < 0.0:
            raise ValueError('Invalid value for parameter `id` when calling `clusters_id_remove_host_post`, must be a value greater than or equal to `0.0`')
        resource_path = ('/clusters/{id}/remove_host/').replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        query_params = {}
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api(resource_path, 'POST', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='Cluster', auth_settings=auth_settings, callback=params.get('callback'), _return_http_data_only=params.get('_return_http_data_only'))

    def clusters_post(self, data, **kwargs):
        """
        Add a new cluster definition.
        Add a new cluster definition. Authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_post(data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ClusterPost data: cluster definition (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clusters_post_with_http_info(data, **kwargs)
        else:
            data = self.clusters_post_with_http_info(data, **kwargs)
            return data

    def clusters_post_with_http_info(self, data, **kwargs):
        """
        Add a new cluster definition.
        Add a new cluster definition. Authentification is required. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.clusters_post_with_http_info(data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ClusterPost data: cluster definition (required)
        :return: Cluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method clusters_post" % key)
            params[key] = val

        del params['kwargs']
        if 'data' not in params or params['data'] is None:
            raise ValueError('Missing the required parameter `data` when calling `clusters_post`')
        resource_path = ('/clusters/').replace('{format}', 'json')
        path_params = {}
        query_params = {}
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in params:
            body_params = params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        if not header_params['Accept']:
            del header_params['Accept']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = [
         'api_key']
        return self.api_client.call_api(resource_path, 'POST', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='Cluster', auth_settings=auth_settings, callback=params.get('callback'), _return_http_data_only=params.get('_return_http_data_only'))