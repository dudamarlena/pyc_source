# uncompyle6 version 3.6.7
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.macosx-10.11-x86_64/egg/common_dibbs/clients/oma_client/models/op.py
# Compiled at: 2016-12-14 11:02:44
__doc__ = '\n    Operation Manager Agent API\n\n    Interact with deployed Cloud Computing resources via API.\n\n    OpenAPI spec version: 0.1.1\n    \n    Generated by: https://github.com/swagger-api/swagger-codegen.git\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n'
from pprint import pformat
from six import iteritems
import re

class Op(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, id=None, script=None, callback_url=None, status=None, info=None):
        """
        Op - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {'id': 'int', 
           'script': 'str', 
           'callback_url': 'str', 
           'status': 'str', 
           'info': 'str'}
        self.attribute_map = {'id': 'id', 
           'script': 'script', 
           'callback_url': 'callback_url', 
           'status': 'status', 
           'info': 'info'}
        self._id = id
        self._script = script
        self._callback_url = callback_url
        self._status = status
        self._info = info

    @property
    def id(self):
        """
        Gets the id of this Op.
        Unique identifier representing a specific op

        :return: The id of this Op.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Op.
        Unique identifier representing a specific op

        :param id: The id of this Op.
        :type: int
        """
        self._id = id

    @property
    def script(self):
        """
        Gets the script of this Op.
        Script of the op

        :return: The script of this Op.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """
        Sets the script of this Op.
        Script of the op

        :param script: The script of this Op.
        :type: str
        """
        self._script = script

    @property
    def callback_url(self):
        """
        Gets the callback_url of this Op.
        Callback URL of the op

        :return: The callback_url of this Op.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """
        Sets the callback_url of this Op.
        Callback URL of the op

        :param callback_url: The callback_url of this Op.
        :type: str
        """
        self._callback_url = callback_url

    @property
    def status(self):
        """
        Gets the status of this Op.
        Status of the op

        :return: The status of this Op.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Op.
        Status of the op

        :param status: The status of this Op.
        :type: str
        """
        self._status = status

    @property
    def info(self):
        """
        Gets the info of this Op.
        Formatted information about the progress of the op

        :return: The info of this Op.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this Op.
        Formatted information about the progress of the op

        :param info: The info of this Op.
        :type: str
        """
        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}
        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other