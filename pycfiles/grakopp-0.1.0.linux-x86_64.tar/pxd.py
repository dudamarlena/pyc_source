# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /usr/lib64/python2.7/site-packages/grakopp/codegen/pxd.py
# Compiled at: 2014-08-01 21:56:11
from __future__ import absolute_import, division, print_function, unicode_literals
from grako.util import indent, trim, timestamp
from grako.exceptions import CodegenError
from grako.model import Node
from grako.codegen.cgbase import ModelRenderer, CodeGenerator

class PxdCodeGenerator(CodeGenerator):

    def _find_renderer_class(self, item):
        if not isinstance(item, Node):
            return
        else:
            name = item.__class__.__name__
            renderer = globals().get(name, None)
            if not renderer or not issubclass(renderer, ModelRenderer):
                raise CodegenError(b'Renderer for %s not found' % name)
            return renderer


def codegen(model):
    return PxdCodeGenerator().render(model)


class Grammar(ModelRenderer):

    def render_fields(self, fields):
        abstract_template = trim(self.abstract_rule_template)
        abstract_rules = [ abstract_template.format(parsername=fields[b'name'], name=rule.name) for rule in self.node.rules
                         ]
        abstract_rules = indent((b'').join(abstract_rules), 2)
        rule_template = trim(self.rule_template)
        rules = [ rule_template.format(parsername=fields[b'name'], name=rule.name) for rule in self.node.rules
                ]
        rules = indent((b'').join(rules), 2)
        if self.node.statetype is None:
            statetype_arg = b', int'
        else:
            statetype_arg = b', ' + self.node.statetype
        version = str(tuple(int(n) for n in str(timestamp()).split(b'.')))
        fields.update(abstract_rules=abstract_rules, rules=rules, version=version, statetype_arg=statetype_arg)
        return

    abstract_rule_template = b'\n            AstPtr _{name}_ (AstPtr& ast) nogil\n            '
    rule_template = b'\n            AstPtr _{name}_() nogil\n            '
    template = b'                # -*- coding: utf-8 -*-\n                # CAVEAT UTILITOR\n                #\n                # This file was automatically generated by Grako++.\n                # https://pypi.python.org/pypi/grakopp/\n                #\n                # Any changes you make to it will be overwritten the next time\n                # the file is generated.\n                \n                # Version: {version}\n\n                from grakopp.ast cimport AstPtr\n                from grakopp.parser cimport Parser\n\n                cdef extern from "_{name}.hpp":\n\n                    cdef cppclass {name}Semantics:\n                {abstract_rules}\n\n                    cdef cppclass {name}Parser(Parser[{name}Semantics{statetype_arg}]):\n                        AstPtr {name}Parser() nogil\n                        AstPtr {name}Parser({name}Semantics* semantics) nogil\n                        # ctypedef AstPtr (nameParser::*rule_method_t) () nogil\n                        # rule_method_t find_rule(const string& name) nogil\n                {rules}\n               '