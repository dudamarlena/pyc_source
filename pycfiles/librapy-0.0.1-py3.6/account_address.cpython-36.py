# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.12-x86_64/egg/librapy/types/account_address.py
# Compiled at: 2019-09-05 08:09:59
# Size of source mod 2**32: 1253 bytes
"""
Each account in Libra is represented by a 32-byte address usually generated by
the sha3 hash of the accounts public key.
"""
import librapy.lib.hasher as hasher
from hashlib import sha3_256

class AccountAddress:

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return 'AccountAddress({})'.format(self.value.hex())

    def association():
        hex_value = '{:x}'.format(173345816)
        return AccountAddress.from_hex(hex_value)

    def default():
        return AccountAddress.from_hex('')

    def deserialize(deserializer):
        return AccountAddress(deserializer.decode_bytes())

    def from_hex(base_value):
        account_length = 64
        hex_value = '0' * (account_length - len(base_value)) + base_value
        return AccountAddress(bytes(bytearray.fromhex(hex_value)))

    def from_signing_key(key):
        hf = sha3_256()
        hf.update(key.verify_key.encode())
        return AccountAddress(hf.digest())

    @classmethod
    def get_hash_prefix(cls):
        return b'AccountAddress'

    def serialize(self, serializer):
        serializer.encode_bytes(self.value)
        return serializer