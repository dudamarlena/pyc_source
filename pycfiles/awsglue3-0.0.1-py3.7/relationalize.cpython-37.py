# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.macosx-10.14-x86_64/egg/awsglue/transforms/relationalize.py
# Compiled at: 2019-08-21 04:11:21
# Size of source mod 2**32: 5103 bytes
from awsglue.transforms import GlueTransform
from awsglue.utils import _global_args

class Relationalize(GlueTransform):
    __doc__ = '\n    Relationalizes a dynamic frame. i.e. produces a list of frames that are\n    generated by unnesting nested columns and pivoting array columns. The\n    pivoted array column can be joined to the root table using the joinkey\n    generated in unnest phase\n    :param frame: DynamicFrame to relationalize\n    :param staging_path: path to store partitions of pivoted tables in csv format. Pivoted tables are read back from\n        this path\n    :param name: name for the root table\n    :param options: dict of optional parameters for relationalize\n    :param transformation_ctx: context key to retrieve metadata about the current transformation\n    :param info: String, any string to be associated with errors in this transformation.\n    :param stageThreshold: Long, number of errors in the given transformation for which the processing needs to error out.\n    :param totalThreshold: Long, total number of errors upto and including in this transformation\n      for which the processing needs to error out.\n    :return: DynamicFrameCollection\n    '

    def __call__(self, frame, staging_path=None, name='roottable', options=None, transformation_ctx='', info='', stageThreshold=0, totalThreshold=0):
        options = options or {}
        if staging_path is None:
            if _global_args['TempDir'] is not None and _global_args['TempDir'] != '':
                staging_path = _global_args['TempDir']
            else:
                raise RuntimeError('Unable to set staging_path using args ' + str(_global_args))
        return frame.relationalize(name, staging_path, options, transformation_ctx, info, stageThreshold, totalThreshold)

    @classmethod
    def describeArgs(cls):
        arg1 = {'name':'frame',  'type':'DynamicFrame', 
         'description':'The DynamicFrame to relationalize', 
         'optional':False, 
         'defaultValue':None}
        arg2 = {'name':'staging_path',  'type':'String', 
         'description':'path to store partitions of pivoted tables in csv format', 
         'optional':True, 
         'defaultValue':None}
        arg3 = {'name':'name',  'type':'String', 
         'description':'Name of the root table', 
         'optional':True, 
         'defaultValue':'roottable'}
        arg4 = {'name':'options',  'type':'Dictionary', 
         'description':'dict of optional parameters for relationalize', 
         'optional':True, 
         'defaultValue':'{}'}
        arg5 = {'name':'transformation_ctx',  'type':'String', 
         'description':'A unique string that is used to identify stats / state information', 
         'optional':True, 
         'defaultValue':''}
        arg6 = {'name':'info',  'type':'String', 
         'description':'Any string to be associated with errors in the transformation', 
         'optional':True, 
         'defaultValue':'""'}
        arg7 = {'name':'stageThreshold',  'type':'Integer', 
         'description':'Max number of errors in the transformation until processing will error out', 
         'optional':True, 
         'defaultValue':'0'}
        arg8 = {'name':'totalThreshold',  'type':'Integer', 
         'description':'Max number of errors total until processing will error out.', 
         'optional':True, 
         'defaultValue':'0'}
        return [
         arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8]

    @classmethod
    def describeTransform(cls):
        return 'Flatten nested schema and pivot out array columns from the flattened frame'

    @classmethod
    def describeErrors(cls):
        return []

    @classmethod
    def describeReturn(cls):
        return {'type':'DynamicFrameCollection',  'description':'DynamicFrameCollection resulting from Relationalize call'}