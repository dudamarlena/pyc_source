# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/phaneron/steps.py
# Compiled at: 2019-09-03 05:18:33
# Size of source mod 2**32: 2592 bytes


class Steps(object):
    __doc__ = ' Steps '

    def __init__(self, client):
        """
        Create a new Steps instance
        """
        self._client = client

    def __str__(self):
        """Return a pretty-print of the class"""
        return 'Steps for Brayns'

    def set_steps_geometry(self, mesh_filename, ca_count_filename):
        """
        Loads a mesh generated by STEPS, together with the Calcium concentration, and sends it to
        Brayns
        :param mesh_filename: Full path of the file containing the mesh
        :param ca_count_filename: Full path of the file containing the CA concentrations
        :return: Result of the request submission
        """
        import steps.utilities.meshio as meshio
        mesh = meshio.loadMesh(mesh_filename)[0]
        data = open(ca_count_filename, 'r').readlines()
        tets = data[0].split()
        ca_count = data[(-2)].split()
        ntets = min(len(tets), len(ca_count))
        vertices = list()
        for i in range(mesh.countVertices()):
            vertex = mesh.getVertex(i)
            vertices.append(float(vertex[0]))
            vertices.append(float(vertex[1]))
            vertices.append(float(vertex[2]))

        indices = list()
        for i in range(ntets):
            for j in mesh.getTet(int(tets[i])):
                indices.append(int(j))

        ca = list()
        for i in range(ntets):
            ca.append(int(ca_count[i]))

        params = dict()
        params['vertices'] = vertices
        params['indices'] = indices
        params['caCount'] = ca
        params['scale'] = 100
        return self._client.request('addStepsGeometry', params=params)