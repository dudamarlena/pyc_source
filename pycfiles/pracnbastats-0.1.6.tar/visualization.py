# uncompyle6 version 3.6.7
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: /home/nyga/code/pracmln/python2/pracmln/utils/visualization.py
# Compiled at: 2018-04-24 04:48:32
__doc__ = '\nCreated on Sep 11, 2014\n\n@author: nyga\n'
import os, matplotlib.pyplot as plt, numpy as np
from dnutils.threads import current_thread
from matplotlib import rc
from numpy.ma.core import floor, ceil
from .latexmath2png import math2png
COLORS = [
 'blue', 'green', 'red', 'orange']
CVALUE = {'blue': '#355FD6', 'green': '#47A544', 
   'red': '#A54D44', 
   'orange': '#D0742F'}
MARKERS = [
 's', 'v', 'o', '^']
DECLARATIONS = ['\\DeclareMathOperator*{\\argmin}{\\arg\\!\\min}',
 '\\DeclareMathOperator*{\\argmax}{\\arg\\!\\max}',
 '\\newcommand{\\Pcond}[1]{\\ensuremath{P\\left(\\begin{array}{c|c}#1\\end{array}\\right)}}']

def plot_fscores(labels, series):
    length = max(list(map(len, series)))
    fig = plt.figure()
    ax = fig.gca()
    ax.set_xticks(np.arange(0, float(len(series))), 1)
    ymin = min(list(map(min, series)))
    ymax = max(list(map(max, series)))
    ymin = floor(ymin * 10) / 10
    ymax = ceil(ymax * 10) / 10
    ax.set_yticks(np.arange(ymin, ymax, 0.1))
    plt.axis([0, length - 1, ymin, ymax])
    fontProperties = {'family': 'sans-serif', 'sans-serif': ['Helvetica'], 'weight': 'normal', 
       'size': 20}
    rc('text', usetex=True)
    rc('font', **fontProperties)
    ax.set_xticklabels([ '$\\frac{%d}{%d}$' % (i + 1, length - i) for i in range(length) ], fontProperties)
    plt.grid()
    for i, (l, s) in enumerate(zip(labels, series)):
        c = CVALUE[COLORS[i]]
        plt.plot(list(range(len(s))), s, '-', marker=MARKERS[i], color=c, linewidth=2.5, markersize=12, fillstyle='full', label=l)

    plt.legend(loc='best')
    plt.ylabel('$F_1$')
    plt.xlabel('$k$')


def plot_KLDiv_with_logscale(series):
    length = len(series)
    fig = plt.figure()
    ax = fig.gca()
    ax.set_xticks(np.arange(0, float(len(series))), 1)
    ymin = min(series)
    ymax = max(series)
    ymin = floor(ymin * 10) / 10
    ymax = ceil(ymax * 10) / 10
    ax.set_yticks(np.arange(ymin, ymax, 0.1))
    plt.axis([0, length - 1, ymin, ymax])
    fontProperties = {'family': 'sans-serif', 'sans-serif': ['Helvetica'], 'weight': 'normal', 
       'size': 20}
    rc('text', usetex=True)
    rc('font', **fontProperties)
    plt.grid()
    a = plt.axes()
    plt.yscale('log')
    c = CVALUE[COLORS[0]]
    m = MARKERS[0]
    plt.plot(list(range(len(series))), series, '-', marker=m, color=c, linewidth=2.5, markersize=12, fillstyle='full', label='Label')
    c = CVALUE[COLORS[1]]
    m = MARKERS[1]
    plt.plot(list(range(len(series))), series, '-', marker=m, color=c, linewidth=2.5, markersize=12, fillstyle='full', label='Label')
    plt.legend(loc='best')
    plt.ylabel('$F_1$')
    plt.xlabel('$k$')


def get_cond_prob_png(queries, dbs, filename='cond_prob', filedir='/tmp'):
    """
    Preprocessing of png generation: assemble latex code for argmax term

    :param queries:     list or comma-separated string of query predicates
    :param dbs:         evidence database
    :param filename:    filename prefix of the generated file
    :param filedir:     location of temporary generated file
    :return:            a png string generated by math2png
    """
    safefilename = ('{}-{}-{}').format(filename, os.getpid(), current_thread().ident)
    if isinstance(queries, str):
        queries = queries.split(',')
    evidencelist = []
    if isinstance(dbs, str):
        evidencelist = dbs.split(',')
    elif isinstance(dbs, list):
        for db in dbs:
            evidencelist.extend([ e for e in list(db.evidence.keys()) if db.evidence[e] == 1.0 ])

    else:
        evidencelist.extend([ e if dbs.evidence[e] == 1.0 else '!' + e for e in list(dbs.evidence.keys()) ])
    query = ('\\\\').join([ ('\\text{{ {0} }} ').format(q.replace('_', '\\_')) for q in queries ])
    evidence = ('\\\\').join([ ('\\text{{ {0} }} ').format(e.replace('_', '\\_')) for e in evidencelist ])
    underset = ('_{{ \\tiny\\begin{{array}}{{c}}{0}\\end{{array}} }}').format(query)
    head = ('\\argmax{}').format(underset)
    bracket_term = ('\\Pcond{{ \\begin{{array}}{{c}}{0}\\end{{array}} & \\begin{{array}}{{c}}{1}\\end{{array}} }}').format(query, evidence)
    eq = ('{} {}').format(head, bracket_term)
    return math2png(eq, filedir, declarations=DECLARATIONS, filename=safefilename, size=10)


if __name__ == '__main__':
    pass