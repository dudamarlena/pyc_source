# uncompyle6 version 3.6.7
# Python bytecode 2.4 (62061)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.linux-i686/egg/cblog/templates/archive.py
# Compiled at: 2006-12-08 09:21:53
import sys, os, os.path
from os.path import getmtime, exists
import time, types, __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters, Cheetah.ErrorCatchers as ErrorCatchers
from cblog.templates.SiteTemplate import SiteTemplate
try:
    (
     True, False)
except NameError:
    True, False = 1 == 1, 1 == 0

VFFSL = valueFromFrameOrSearchList
VFSL = valueFromSearchList
VFN = valueForName
currentTime = time.time
__CHEETAH_version__ = '2.0rc7'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 7)
__CHEETAH_genTime__ = 1165587713.923543
__CHEETAH_genTimestamp__ = 'Fri Dec  8 15:21:53 2006'
__CHEETAH_src__ = 'archive.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Dec  8 14:43:19 2006'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'
if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError('This template was compiled with Cheetah version %s. Templates compiled before version %s must be recompiled.' % (__CHEETAH_version__, RequiredCheetahVersion))

class archive(SiteTemplate):
    __module__ = __name__

    def __init__(self, *args, **KWs):
        SiteTemplate.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = ('searchList namespaces filter filtersLib errorCatcher').split()
            for (k, v) in KWs.items():
                if k in allowedKWs:
                    cheetahKWArgs[k] = v

            self._initCheetahInstance(**cheetahKWArgs)

    def pagetitle(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('  <title>')
        _v = VFFSL(SL, 'tg.blogtitle', False)
        if _v is not None:
            write(_filter(_v, rawExpr='${tg.blogtitle}'))
        write(': Archive</title>\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def pagecontent(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('<h1>Archive</h1>\n\n<p class="firstpar">This is the archive of the blog <em>')
        _v = VFFSL(SL, 'tg.blogtitle', False)
        if _v is not None:
            write(_filter(_v, rawExpr='${tg.blogtitle}'))
        write('</em>. This blog currently has <strong>')
        _v = VFFSL(SL, 'numentries', False)
        if _v is not None:
            write(_filter(_v, rawExpr='${numentries}'))
        write(' post')
        if VFFSL(SL, 'numentries', False) != 1:
            write('s')
        write('</strong> with <strong>')
        _v = VFFSL(SL, 'numcomments', False)
        if _v is not None:
            write(_filter(_v, rawExpr='${numcomments}'))
        write(' comment')
        if VFFSL(SL, 'numcomments', False) != 1:
            write('s')
        write('</strong>, sorted into <strong>')
        _v = VFFSL(SL, 'numtags', False)
        if _v is not None:
            write(_filter(_v, rawExpr='${numtags}'))
        write(' categor')
        if VFFSL(SL, 'numtags', False) == 1:
            write('y')
        else:
            write('ies')
        write('</strong> (tag')
        if VFFSL(SL, 'numtags', False) != 1:
            write('s')
        write(').</p>\n\nThrough the links on the sidebar, you will be able to browse through the archived posts by month or category. If you are looking for a specific post or comment, you can also use the input box at the top of the sidebar to search through the archives by post title or do a full-text search covering posts, comments and author names.<p>\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def writeBody(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('\n\n\n')
        return _dummyTrans and trans.response().getvalue() or ''

    _CHEETAH__instanceInitialized = False
    _CHEETAH_version = __CHEETAH_version__
    _CHEETAH_versionTuple = __CHEETAH_versionTuple__
    _CHEETAH_genTime = __CHEETAH_genTime__
    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__
    _CHEETAH_src = __CHEETAH_src__
    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__
    _mainCheetahMethod_for_archive = 'writeBody'


if not hasattr(archive, '_initCheetahAttributes'):
    templateAPIClass = getattr(archive, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(archive)
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=archive()).run()