# uncompyle6 version 3.6.7
# Python bytecode 2.4 (62061)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.linux-i686/egg/cblog/templates/edit.py
# Compiled at: 2006-12-08 09:21:52
import sys, os, os.path
from os.path import getmtime, exists
import time, types, __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters, Cheetah.ErrorCatchers as ErrorCatchers
from cblog.templates.SiteTemplate import SiteTemplate
try:
    (
     True, False)
except NameError:
    True, False = 1 == 1, 1 == 0

VFFSL = valueFromFrameOrSearchList
VFSL = valueFromSearchList
VFN = valueForName
currentTime = time.time
__CHEETAH_version__ = '2.0rc7'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 7)
__CHEETAH_genTime__ = 1165587712.839532
__CHEETAH_genTimestamp__ = 'Fri Dec  8 15:21:52 2006'
__CHEETAH_src__ = 'edit.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Dec  8 14:43:28 2006'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'
if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError('This template was compiled with Cheetah version %s. Templates compiled before version %s must be recompiled.' % (__CHEETAH_version__, RequiredCheetahVersion))

class edit(SiteTemplate):
    __module__ = __name__

    def __init__(self, *args, **KWs):
        SiteTemplate.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = ('searchList namespaces filter filtersLib errorCatcher').split()
            for (k, v) in KWs.items():
                if k in allowedKWs:
                    cheetahKWArgs[k] = v

            self._initCheetahInstance(**cheetahKWArgs)

    def pagetitle(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('  <title>')
        _v = VFFSL(SL, 'tg.blogtitle', False)
        if _v is not None:
            write(_filter(_v, rawExpr='${tg.blogtitle}'))
        write(': ')
        if VFFSL(SL, 'entry', False):
            write('Edit')
        else:
            write('Post')
        write(' entry</title>\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def pagecontent(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        _v = VFFSL(SL, 'form', False)(value=VFFSL(SL, 'entry', False), submit_text=_('Publish'), action=VFN(VFFSL(SL, 'tg', False), 'url', False)('/add_article'), form_attrs=dict(id='articleform'), tags=VFFSL(SL, 'tags', False))
        if _v is not None:
            write(_filter(_v, rawExpr="${form(value=$entry,\n    submit_text=_(u'Publish'),\n    action=$tg.url('/add_article'),\n    form_attrs=dict(id='articleform'), tags=$tags)}"))
        write('\n')
        return _dummyTrans and trans.response().getvalue() or ''

    def writeBody(self, **KWS):
        trans = KWS.get('trans')
        if not trans:
            if not self._CHEETAH__isBuffering and not callable(self.transaction):
                trans = self.transaction
            trans = trans or DummyTransaction()
            _dummyTrans = True
        else:
            _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        write('\n\n\n')
        return _dummyTrans and trans.response().getvalue() or ''

    _CHEETAH__instanceInitialized = False
    _CHEETAH_version = __CHEETAH_version__
    _CHEETAH_versionTuple = __CHEETAH_versionTuple__
    _CHEETAH_genTime = __CHEETAH_genTime__
    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__
    _CHEETAH_src = __CHEETAH_src__
    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__
    _mainCheetahMethod_for_edit = 'writeBody'


if not hasattr(edit, '_initCheetahAttributes'):
    templateAPIClass = getattr(edit, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(edit)
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=edit()).run()