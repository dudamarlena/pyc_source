# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/sqlpython/metadata.py
# Compiled at: 2012-05-26 21:28:24
from defaultdict import defaultdict
metaqueries = defaultdict(defaultdict)
metaqueries['desc']['oracle'] = defaultdict(defaultdict)
metaqueries['desc']['oracle']['TABLE']['long'] = ('SELECT atc.column_id "#",\natc.column_name,\nCASE atc.nullable WHEN \'Y\' THEN \'NULL\' ELSE \'NOT NULL\' END "Null?",\natc.data_type ||\nCASE atc.data_type WHEN \'DATE\' THEN \'\'\nELSE \'(\' ||\nCASE atc.data_type WHEN \'NUMBER\' THEN TO_CHAR(atc.data_precision) ||\nCASE atc.data_scale WHEN 0 THEN \'\'\nELSE \',\' || TO_CHAR(atc.data_scale) END\nELSE TO_CHAR(atc.data_length) END \nEND ||\nCASE atc.data_type WHEN \'DATE\' THEN \'\' ELSE \')\' END\ndata_type,\nacc.comments\nFROM all_tab_columns atc\nJOIN all_col_comments acc ON (acc.owner = atc.owner AND acc.table_name = atc.table_name AND acc.column_name = atc.column_name)\nWHERE atc.table_name = :object_name\nAND      atc.owner = :owner\nORDER BY atc.column_id;', )
metaqueries['desc']['oracle']['TABLE']['short'] = ('SELECT atc.column_name,\nCASE atc.nullable WHEN \'Y\' THEN \'NULL\' ELSE \'NOT NULL\' END "Null?",\natc.data_type ||\nCASE atc.data_type WHEN \'DATE\' THEN \'\'\nELSE \'(\' ||\nCASE atc.data_type WHEN \'NUMBER\' THEN TO_CHAR(atc.data_precision) ||\nCASE atc.data_scale WHEN 0 THEN \'\'\nELSE \',\' || TO_CHAR(atc.data_scale) END\nELSE TO_CHAR(atc.data_length) END \nEND ||\nCASE atc.data_type WHEN \'DATE\' THEN \'\' ELSE \')\' END\ndata_type\nFROM all_tab_columns atc\nWHERE atc.table_name = :object_name\nAND      atc.owner = :owner\nORDER BY atc.column_id;', )
metaqueries['desc']['oracle']['PROCEDURE'] = ("SELECT NVL(argument_name, 'Return Value') argument_name,             \ndata_type,\nin_out,\ndefault_value\nFROM all_arguments\nWHERE object_name = :object_name\nAND      owner = :owner\nAND      package_name IS NULL\nORDER BY sequence;", )
metaqueries['desc']['oracle']['PackageObjects'] = ('SELECT DISTINCT object_name\nFROM all_arguments\nWHERE package_name = :package_name\nAND      owner = :owner', )
metaqueries['desc']['oracle']['PackageObjArgs'] = ('SELECT object_name,\nargument_name,             \ndata_type,\nin_out,\ndefault_value\nFROM all_arguments\nWHERE package_name = :package_name\nAND      object_name = :object_name\nAND      owner = :owner\nAND      argument_name IS NOT NULL\nORDER BY sequence;', )
metaqueries['desc']['oracle']['TRIGGER'] = ('SELECT description\nFROM   all_triggers\nWHERE  owner = :owner\nAND    trigger_name = :object_name;\n',
                                            'SELECT table_owner,\nbase_object_type,\ntable_name,\ncolumn_name,\nwhen_clause,\nstatus,\naction_type,\ncrossedition\nFROM   all_triggers\nWHERE  owner = :owner\nAND    trigger_name = :object_name\n\\t')
metaqueries['desc']['oracle']['INDEX'] = ('SELECT index_type,\ntable_owner,\ntable_name,\ntable_type,\nuniqueness,\ncompression,\npartitioned,\ntemporary,\ngenerated,\nsecondary,\ndropped,\nvisibility\nFROM   all_indexes\nWHERE  owner = :owner\nAND    index_name = :object_name\\t', )
metaqueries['desc']['oracle']['VIEW'] = metaqueries['desc']['oracle']['TABLE']['short']
metaqueries['desc']['oracle']['FUNCTION'] = metaqueries['desc']['oracle']['PROCEDURE']
metaqueries['ls']['oracle'] = '\nSELECT owner, \n       object_name,  \n       object_type,\n       status,\n       last_ddl_time,\n       user as my_own\nFROM   all_objects'
metaqueries['ls']['information_schema'] = "\nSELECT table_schema as owner,\n       table_name as object_name,\n       table_type as object_type,\n       null as status,\n       null as last_ddl_time,\n       %(my_own)s as my_own\nFROM   information_schema.tables\nUNION ALL\nSELECT trigger_schema as owner,\n       trigger_name as object_name,\n       'TRIGGER' as object_type,\n       null as status,\n       created as last_ddl_time,\n       %(my_own)s as my_own\nFROM   information_schema.triggers\nUNION ALL\nSELECT routine_schema as owner,\n       routine_name as object_name,\n       routine_type as object_type,\n       null as status,\n       last_altered as last_ddl_time,\n       %(my_own)s as my_own\nFROM   information_schema.routines\n"
metaqueries['ls']['postgres'] = (metaqueries['ls']['information_schema'] + "UNION ALL\nSELECT sequence_schema as owner,\n       sequence_name as object_name,\n       'SEQUENCE' as object_type,\n       null as status,\n       null as last_ddl_time,\n       %(my_own)s as my_own\nFROM   information_schema.sequences") % {'my_own': "text('public')"}
metaqueries['ls']['mysql'] = metaqueries['ls']['information_schema'] % {'my_own': 'database()'}
metaqueries['ls']['sqlite'] = "\nSELECT '' as owner,\n       tbl_name as object_name,\n       type as object_type,\n       null as status,\n       null as last_ddl_time,\n       '' as current_username\nFROM   sqlite_master"