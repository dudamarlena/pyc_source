# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/ynab_api/api/categories_api.py
# Compiled at: 2019-11-21 19:08:24
# Size of source mod 2**32: 28821 bytes
"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
from __future__ import absolute_import
import re, six
from ynab_api.api_client import ApiClient
from ynab_api.exceptions import ApiTypeError, ApiValueError

class CategoriesApi(object):
    __doc__ = 'NOTE: This class is auto generated by OpenAPI Generator\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n    '

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_categories(self, budget_id, **kwargs):
        """List categories  # noqa: E501

        Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_categories(budget_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param int last_knowledge_of_server: The starting server knowledge.  If provided, only entities that have changed since last_knowledge_of_server will be included.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.get_categories_with_http_info)(budget_id, **kwargs)

    def get_categories_with_http_info(self, budget_id, **kwargs):
        """List categories  # noqa: E501

        Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_categories_with_http_info(budget_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param int last_knowledge_of_server: The starting server knowledge.  If provided, only entities that have changed since last_knowledge_of_server will be included.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CategoriesResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'budget_id', 'last_knowledge_of_server']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method get_categories" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        if self.api_client.client_side_validation:
            if 'budget_id' not in local_var_params or local_var_params['budget_id'] is None:
                raise ApiValueError('Missing the required parameter `budget_id` when calling `get_categories`')
        collection_formats = {}
        path_params = {}
        if 'budget_id' in local_var_params:
            path_params['budget_id'] = local_var_params['budget_id']
        query_params = []
        if 'last_knowledge_of_server' in local_var_params:
            if local_var_params['last_knowledge_of_server'] is not None:
                query_params.append(('last_knowledge_of_server', local_var_params['last_knowledge_of_server']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = [
         'bearer']
        return self.api_client.call_api('/budgets/{budget_id}/categories',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='CategoriesResponse',
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)

    def get_category_by_id(self, budget_id, category_id, **kwargs):
        """Single category  # noqa: E501

        Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_category_by_id(budget_id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param str category_id: The id of the category (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.get_category_by_id_with_http_info)(budget_id, category_id, **kwargs)

    def get_category_by_id_with_http_info(self, budget_id, category_id, **kwargs):
        """Single category  # noqa: E501

        Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_category_by_id_with_http_info(budget_id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param str category_id: The id of the category (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CategoryResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'budget_id', 'category_id']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method get_category_by_id" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        if self.api_client.client_side_validation:
            if 'budget_id' not in local_var_params or local_var_params['budget_id'] is None:
                raise ApiValueError('Missing the required parameter `budget_id` when calling `get_category_by_id`')
        if self.api_client.client_side_validation:
            if 'category_id' not in local_var_params or local_var_params['category_id'] is None:
                raise ApiValueError('Missing the required parameter `category_id` when calling `get_category_by_id`')
        collection_formats = {}
        path_params = {}
        if 'budget_id' in local_var_params:
            path_params['budget_id'] = local_var_params['budget_id']
        if 'category_id' in local_var_params:
            path_params['category_id'] = local_var_params['category_id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = [
         'bearer']
        return self.api_client.call_api('/budgets/{budget_id}/categories/{category_id}',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='CategoryResponse',
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)

    def get_month_category_by_id(self, budget_id, month, category_id, **kwargs):
        """Single category for a specific budget month  # noqa: E501

        Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_month_category_by_id(budget_id, month, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param date month: The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC)) (required)
        :param str category_id: The id of the category (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.get_month_category_by_id_with_http_info)(budget_id, month, category_id, **kwargs)

    def get_month_category_by_id_with_http_info(self, budget_id, month, category_id, **kwargs):
        """Single category for a specific budget month  # noqa: E501

        Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_month_category_by_id_with_http_info(budget_id, month, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param date month: The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC)) (required)
        :param str category_id: The id of the category (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CategoryResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'budget_id', 'month', 'category_id']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method get_month_category_by_id" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        if self.api_client.client_side_validation:
            if 'budget_id' not in local_var_params or local_var_params['budget_id'] is None:
                raise ApiValueError('Missing the required parameter `budget_id` when calling `get_month_category_by_id`')
        if self.api_client.client_side_validation:
            if 'month' not in local_var_params or local_var_params['month'] is None:
                raise ApiValueError('Missing the required parameter `month` when calling `get_month_category_by_id`')
        if self.api_client.client_side_validation:
            if 'category_id' not in local_var_params or local_var_params['category_id'] is None:
                raise ApiValueError('Missing the required parameter `category_id` when calling `get_month_category_by_id`')
        collection_formats = {}
        path_params = {}
        if 'budget_id' in local_var_params:
            path_params['budget_id'] = local_var_params['budget_id']
        if 'month' in local_var_params:
            path_params['month'] = local_var_params['month']
        if 'category_id' in local_var_params:
            path_params['category_id'] = local_var_params['category_id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = [
         'bearer']
        return self.api_client.call_api('/budgets/{budget_id}/months/{month}/categories/{category_id}',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='CategoryResponse',
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)

    def update_month_category(self, budget_id, month, category_id, data, **kwargs):
        """Update a category for a specific month  # noqa: E501

        Update a category for a specific month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_month_category(budget_id, month, category_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param date month: The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC)) (required)
        :param str category_id: The id of the category (required)
        :param SaveMonthCategoryWrapper data: The category to update (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SaveCategoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.update_month_category_with_http_info)(budget_id, month, category_id, data, **kwargs)

    def update_month_category_with_http_info(self, budget_id, month, category_id, data, **kwargs):
        """Update a category for a specific month  # noqa: E501

        Update a category for a specific month  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_month_category_with_http_info(budget_id, month, category_id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param date month: The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC)) (required)
        :param str category_id: The id of the category (required)
        :param SaveMonthCategoryWrapper data: The category to update (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SaveCategoryResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'budget_id', 'month', 'category_id', 'data']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method update_month_category" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        if self.api_client.client_side_validation:
            if 'budget_id' not in local_var_params or local_var_params['budget_id'] is None:
                raise ApiValueError('Missing the required parameter `budget_id` when calling `update_month_category`')
        if self.api_client.client_side_validation:
            if 'month' not in local_var_params or local_var_params['month'] is None:
                raise ApiValueError('Missing the required parameter `month` when calling `update_month_category`')
        if self.api_client.client_side_validation:
            if 'category_id' not in local_var_params or local_var_params['category_id'] is None:
                raise ApiValueError('Missing the required parameter `category_id` when calling `update_month_category`')
        if self.api_client.client_side_validation and ('data' not in local_var_params or local_var_params['data'] is None):
            raise ApiValueError('Missing the required parameter `data` when calling `update_month_category`')
        collection_formats = {}
        path_params = {}
        if 'budget_id' in local_var_params:
            path_params['budget_id'] = local_var_params['budget_id']
        if 'month' in local_var_params:
            path_params['month'] = local_var_params['month']
        if 'category_id' in local_var_params:
            path_params['category_id'] = local_var_params['category_id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = [
         'bearer']
        return self.api_client.call_api('/budgets/{budget_id}/months/{month}/categories/{category_id}',
          'PATCH', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='SaveCategoryResponse',
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)