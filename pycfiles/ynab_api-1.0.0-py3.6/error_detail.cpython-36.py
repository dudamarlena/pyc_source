# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/ynab_api/models/error_detail.py
# Compiled at: 2019-11-21 19:08:24
# Size of source mod 2**32: 5030 bytes
"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
import pprint, re, six
from ynab_api.configuration import Configuration

class ErrorDetail(object):
    __doc__ = 'NOTE: This class is auto generated by OpenAPI Generator.\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n    '
    openapi_types = {'id':'str', 
     'name':'str', 
     'detail':'str'}
    attribute_map = {'id':'id', 
     'name':'name', 
     'detail':'detail'}

    def __init__(self, id=None, name=None, detail=None, local_vars_configuration=None):
        """ErrorDetail - a model defined in OpenAPI"""
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self._id = None
        self._name = None
        self._detail = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.detail = detail

    @property
    def id(self):
        """Gets the id of this ErrorDetail.  # noqa: E501

        :return: The id of this ErrorDetail.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErrorDetail.

        :param id: The id of this ErrorDetail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation:
            if id is None:
                raise ValueError('Invalid value for `id`, must not be `None`')
        self._id = id

    @property
    def name(self):
        """Gets the name of this ErrorDetail.  # noqa: E501

        :return: The name of this ErrorDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ErrorDetail.

        :param name: The name of this ErrorDetail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation:
            if name is None:
                raise ValueError('Invalid value for `name`, must not be `None`')
        self._name = name

    @property
    def detail(self):
        """Gets the detail of this ErrorDetail.  # noqa: E501

        :return: The detail of this ErrorDetail.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ErrorDetail.

        :param detail: The detail of this ErrorDetail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation:
            if detail is None:
                raise ValueError('Invalid value for `detail`, must not be `None`')
        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            else:
                if hasattr(value, 'to_dict'):
                    result[attr] = value.to_dict()
                else:
                    if isinstance(value, dict):
                        result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
                    else:
                        result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorDetail):
            return False
        else:
            return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorDetail):
            return True
        else:
            return self.to_dict() != other.to_dict()