# uncompyle6 version 3.7.4
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/ynab_api/api/deprecated_api.py
# Compiled at: 2019-11-21 19:08:24
# Size of source mod 2**32: 7547 bytes
"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""
from __future__ import absolute_import
import re, six
from ynab_api.api_client import ApiClient
from ynab_api.exceptions import ApiTypeError, ApiValueError

class DeprecatedApi(object):
    __doc__ = 'NOTE: This class is auto generated by OpenAPI Generator\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n    '

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_create_transactions(self, budget_id, transactions, **kwargs):
        """Bulk create transactions  # noqa: E501

        Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_transactions(budget_id, transactions, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param BulkTransactions transactions: The list of transactions to create (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BulkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.bulk_create_transactions_with_http_info)(budget_id, transactions, **kwargs)

    def bulk_create_transactions_with_http_info(self, budget_id, transactions, **kwargs):
        """Bulk create transactions  # noqa: E501

        Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_create_transactions_with_http_info(budget_id, transactions, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str budget_id: The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget) (required)
        :param BulkTransactions transactions: The list of transactions to create (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BulkResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'budget_id', 'transactions']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method bulk_create_transactions" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        if self.api_client.client_side_validation:
            if 'budget_id' not in local_var_params or local_var_params['budget_id'] is None:
                raise ApiValueError('Missing the required parameter `budget_id` when calling `bulk_create_transactions`')
        if self.api_client.client_side_validation:
            if 'transactions' not in local_var_params or local_var_params['transactions'] is None:
                raise ApiValueError('Missing the required parameter `transactions` when calling `bulk_create_transactions`')
        collection_formats = {}
        path_params = {}
        if 'budget_id' in local_var_params:
            path_params['budget_id'] = local_var_params['budget_id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'transactions' in local_var_params:
            body_params = local_var_params['transactions']
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = [
         'bearer']
        return self.api_client.call_api('/budgets/{budget_id}/transactions/bulk',
          'POST', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='BulkResponse',
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)