# uncompyle6 version 3.6.7
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: /usr/local/lib/python2.7/dist-packages/py2opencl/F.py
# Compiled at: 2014-08-26 19:47:31
__doc__ = '\nStubs providing support for built-in OpenCL Floating Point Functions\n'
import numpy, scipy.special
__func = lambda x: x
__func2 = lambda x, y: x
__func3 = lambda x, y, z: remquo
acos = numpy.arccos
acosh = numpy.arccosh
acospi = lambda x: numpy.arccos(x) / numpy.pi
acospi.types = numpy.arccos.types
asin = numpy.arcsin
asinh = numpy.arcsinh
asinpi = lambda x: numpy.arcsin(x) / numpy.pi
asinpi.types = numpy.arcsin.types
atan = numpy.arctan
atan2 = numpy.arctan2
atanh = numpy.arctanh
atanpi = lambda x: numpy.arctan(x) / numpy.pi
atanpi.types = numpy.arctan.types
atan2pi = lambda x, y: numpy.arctan2(x, y) / numpy.pi
atan2pi.types = numpy.arctan2.types
cbrt = scipy.special.cbrt
ceil = numpy.ceil
copysign = numpy.copysign
cos = numpy.cos
cosh = numpy.cosh
cospi = lambda x: numpy.cos(numpy.pi * x)
cospi.types = numpy.cos.types
half_divide = lambda x, y: x / y
half_divide.types = ''
native_divide = lambda x, y: x / y
erfc = scipy.special.erfc
erf = scipy.special.erf
exp = numpy.exp
exp2 = numpy.exp2
exp10 = scipy.special.exp10
expm1 = numpy.expm1
fabs = numpy.fabs
fdim = lambda x, y: numpy.abs(x - y)
floor = numpy.floor
fma = lambda a, b, c: a * b + c
fmax = numpy.maximum
fmin = numpy.minimum
fmod = numpy.mod
hypot = numpy.hypot
ilogb = lambda x: numpy.log(x).astype('int32')
ldexp = __func
ldexp = __func
log = numpy.log
log2 = numpy.log2
log10 = numpy.log10
log1p = numpy.log1p
logb = __func
mad = lambda a, b, c: a * b + c
nextafter = numpy.nextafter
pow = numpy.power
pown = numpy.power
powr = numpy.power
half_recip = lambda x: 1.0 / x
native_recip = lambda x: 1.0 / x
remainder = numpy.remainder
rootn = lambda x, y: numpy.power(x, 1.0 / y)
round = numpy.round
rsqrt = lambda x: numpy.power(x, -0.5)
sin = numpy.sin
sinh = numpy.sinh
sinpi = lambda x: numpy.sin(numpy.pi * x)
sinpi.argtypes = []
sinpi.rettype = ''
sqrt = numpy.sqrt
tan = numpy.tan
tanh = numpy.tanh
tanpi = lambda x: numpy.tan(numpy.pi * x)
tanpi.argtypes = []
tanpi.rettype = ''
tgamma = scipy.special.gamma
trunc = numpy.trunc
__floats = set((numpy.dtype('float16'), numpy.dtype('float32'), numpy.dtype('float64')))