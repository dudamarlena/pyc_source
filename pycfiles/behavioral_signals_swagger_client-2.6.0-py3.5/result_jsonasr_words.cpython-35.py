# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3350)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/behavioral_signals_swagger_client/models/result_jsonasr_words.py
# Compiled at: 2020-02-03 04:38:52
# Size of source mod 2**32: 6341 bytes
"""
    Oliver API

    Oliver API in the cloud service  # noqa: E501

    OpenAPI spec version: 3.6.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint, re, six

class ResultJSONASRWords(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    '
    swagger_types = {'c': 'float', 
     'st': 'float', 
     'et': 'float', 
     'p': 'int', 
     'w': 'str', 
     'm': 'str'}
    attribute_map = {'c': 'c', 
     'st': 'st', 
     'et': 'et', 
     'p': 'p', 
     'w': 'w', 
     'm': 'm'}

    def __init__(self, c=None, st=None, et=None, p=None, w=None, m=None):
        """ResultJSONASRWords - a model defined in Swagger"""
        self._c = None
        self._st = None
        self._et = None
        self._p = None
        self._w = None
        self._m = None
        self.discriminator = None
        if c is not None:
            self.c = c
        if st is not None:
            self.st = st
        if et is not None:
            self.et = et
        if p is not None:
            self.p = p
        if w is not None:
            self.w = w
        if m is not None:
            self.m = m

    @property
    def c(self):
        """Gets the c of this ResultJSONASRWords.  # noqa: E501

        Confidence  # noqa: E501

        :return: The c of this ResultJSONASRWords.  # noqa: E501
        :rtype: float
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this ResultJSONASRWords.

        Confidence  # noqa: E501

        :param c: The c of this ResultJSONASRWords.  # noqa: E501
        :type: float
        """
        self._c = c

    @property
    def st(self):
        """Gets the st of this ResultJSONASRWords.  # noqa: E501

        The start time of the word in seconds from begining  # noqa: E501

        :return: The st of this ResultJSONASRWords.  # noqa: E501
        :rtype: float
        """
        return self._st

    @st.setter
    def st(self, st):
        """Sets the st of this ResultJSONASRWords.

        The start time of the word in seconds from begining  # noqa: E501

        :param st: The st of this ResultJSONASRWords.  # noqa: E501
        :type: float
        """
        self._st = st

    @property
    def et(self):
        """Gets the et of this ResultJSONASRWords.  # noqa: E501

        The end time of the word in seconds from begining  # noqa: E501

        :return: The et of this ResultJSONASRWords.  # noqa: E501
        :rtype: float
        """
        return self._et

    @et.setter
    def et(self, et):
        """Sets the et of this ResultJSONASRWords.

        The end time of the word in seconds from begining  # noqa: E501

        :param et: The et of this ResultJSONASRWords.  # noqa: E501
        :type: float
        """
        self._et = et

    @property
    def p(self):
        """Gets the p of this ResultJSONASRWords.  # noqa: E501

        Index starting from zero  # noqa: E501

        :return: The p of this ResultJSONASRWords.  # noqa: E501
        :rtype: int
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this ResultJSONASRWords.

        Index starting from zero  # noqa: E501

        :param p: The p of this ResultJSONASRWords.  # noqa: E501
        :type: int
        """
        self._p = p

    @property
    def w(self):
        """Gets the w of this ResultJSONASRWords.  # noqa: E501

        The transcribed word string  # noqa: E501

        :return: The w of this ResultJSONASRWords.  # noqa: E501
        :rtype: str
        """
        return self._w

    @w.setter
    def w(self, w):
        """Sets the w of this ResultJSONASRWords.

        The transcribed word string  # noqa: E501

        :param w: The w of this ResultJSONASRWords.  # noqa: E501
        :type: str
        """
        self._w = w

    @property
    def m(self):
        """Gets the m of this ResultJSONASRWords.  # noqa: E501

        Flag  # noqa: E501

        :return: The m of this ResultJSONASRWords.  # noqa: E501
        :rtype: str
        """
        return self._m

    @m.setter
    def m(self, m):
        """Sets the m of this ResultJSONASRWords.

        Flag  # noqa: E501

        :param m: The m of this ResultJSONASRWords.  # noqa: E501
        :type: str
        """
        self._m = m

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            else:
                if hasattr(value, 'to_dict'):
                    result[attr] = value.to_dict()
                else:
                    if isinstance(value, dict):
                        result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
                    else:
                        result[attr] = value

        if issubclass(ResultJSONASRWords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultJSONASRWords):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other