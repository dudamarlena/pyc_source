# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3350)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/behavioral_signals_swagger_client/models/result_json_basic.py
# Compiled at: 2020-02-03 04:38:52
# Size of source mod 2**32: 9815 bytes
"""
    Oliver API

    Oliver API in the cloud service  # noqa: E501

    OpenAPI spec version: 3.6.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint, re, six

class ResultJSONBasic(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    '
    swagger_types = {'totalduration': 'float', 
     'speakerchanges': 'int', 
     'numbeepfound': 'int', 
     'numringfound': 'int', 
     'id': 'ResultJSONBasicId', 
     'vad': 'ResultJSONBasicVad', 
     'gender': 'ResultJSONBasicGender', 
     'age': 'ResultJSONBasicAge', 
     'lang': 'ResultJSONBasicLang', 
     'utterances': 'ResultJSONBasicUtterances'}
    attribute_map = {'totalduration': 'totalduration', 
     'speakerchanges': 'speakerchanges', 
     'numbeepfound': 'numbeepfound', 
     'numringfound': 'numringfound', 
     'id': 'id', 
     'vad': 'vad', 
     'gender': 'gender', 
     'age': 'age', 
     'lang': 'lang', 
     'utterances': 'utterances'}

    def __init__(self, totalduration=None, speakerchanges=None, numbeepfound=None, numringfound=None, id=None, vad=None, gender=None, age=None, lang=None, utterances=None):
        """ResultJSONBasic - a model defined in Swagger"""
        self._totalduration = None
        self._speakerchanges = None
        self._numbeepfound = None
        self._numringfound = None
        self._id = None
        self._vad = None
        self._gender = None
        self._age = None
        self._lang = None
        self._utterances = None
        self.discriminator = None
        if totalduration is not None:
            self.totalduration = totalduration
        if speakerchanges is not None:
            self.speakerchanges = speakerchanges
        if numbeepfound is not None:
            self.numbeepfound = numbeepfound
        if numringfound is not None:
            self.numringfound = numringfound
        if id is not None:
            self.id = id
        if vad is not None:
            self.vad = vad
        if gender is not None:
            self.gender = gender
        if age is not None:
            self.age = age
        if lang is not None:
            self.lang = lang
        if utterances is not None:
            self.utterances = utterances

    @property
    def totalduration(self):
        """Gets the totalduration of this ResultJSONBasic.  # noqa: E501

        Duration of call in seconds  # noqa: E501

        :return: The totalduration of this ResultJSONBasic.  # noqa: E501
        :rtype: float
        """
        return self._totalduration

    @totalduration.setter
    def totalduration(self, totalduration):
        """Sets the totalduration of this ResultJSONBasic.

        Duration of call in seconds  # noqa: E501

        :param totalduration: The totalduration of this ResultJSONBasic.  # noqa: E501
        :type: float
        """
        self._totalduration = totalduration

    @property
    def speakerchanges(self):
        """Gets the speakerchanges of this ResultJSONBasic.  # noqa: E501

        Number of speaker changes (turns)  # noqa: E501

        :return: The speakerchanges of this ResultJSONBasic.  # noqa: E501
        :rtype: int
        """
        return self._speakerchanges

    @speakerchanges.setter
    def speakerchanges(self, speakerchanges):
        """Sets the speakerchanges of this ResultJSONBasic.

        Number of speaker changes (turns)  # noqa: E501

        :param speakerchanges: The speakerchanges of this ResultJSONBasic.  # noqa: E501
        :type: int
        """
        self._speakerchanges = speakerchanges

    @property
    def numbeepfound(self):
        """Gets the numbeepfound of this ResultJSONBasic.  # noqa: E501

        Number of beeps found in call  # noqa: E501

        :return: The numbeepfound of this ResultJSONBasic.  # noqa: E501
        :rtype: int
        """
        return self._numbeepfound

    @numbeepfound.setter
    def numbeepfound(self, numbeepfound):
        """Sets the numbeepfound of this ResultJSONBasic.

        Number of beeps found in call  # noqa: E501

        :param numbeepfound: The numbeepfound of this ResultJSONBasic.  # noqa: E501
        :type: int
        """
        self._numbeepfound = numbeepfound

    @property
    def numringfound(self):
        """Gets the numringfound of this ResultJSONBasic.  # noqa: E501

        Number of rings found in call  # noqa: E501

        :return: The numringfound of this ResultJSONBasic.  # noqa: E501
        :rtype: int
        """
        return self._numringfound

    @numringfound.setter
    def numringfound(self, numringfound):
        """Sets the numringfound of this ResultJSONBasic.

        Number of rings found in call  # noqa: E501

        :param numringfound: The numringfound of this ResultJSONBasic.  # noqa: E501
        :type: int
        """
        self._numringfound = numringfound

    @property
    def id(self):
        """Gets the id of this ResultJSONBasic.  # noqa: E501

        :return: The id of this ResultJSONBasic.  # noqa: E501
        :rtype: ResultJSONBasicId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResultJSONBasic.

        :param id: The id of this ResultJSONBasic.  # noqa: E501
        :type: ResultJSONBasicId
        """
        self._id = id

    @property
    def vad(self):
        """Gets the vad of this ResultJSONBasic.  # noqa: E501

        :return: The vad of this ResultJSONBasic.  # noqa: E501
        :rtype: ResultJSONBasicVad
        """
        return self._vad

    @vad.setter
    def vad(self, vad):
        """Sets the vad of this ResultJSONBasic.

        :param vad: The vad of this ResultJSONBasic.  # noqa: E501
        :type: ResultJSONBasicVad
        """
        self._vad = vad

    @property
    def gender(self):
        """Gets the gender of this ResultJSONBasic.  # noqa: E501

        :return: The gender of this ResultJSONBasic.  # noqa: E501
        :rtype: ResultJSONBasicGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ResultJSONBasic.

        :param gender: The gender of this ResultJSONBasic.  # noqa: E501
        :type: ResultJSONBasicGender
        """
        self._gender = gender

    @property
    def age(self):
        """Gets the age of this ResultJSONBasic.  # noqa: E501

        :return: The age of this ResultJSONBasic.  # noqa: E501
        :rtype: ResultJSONBasicAge
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this ResultJSONBasic.

        :param age: The age of this ResultJSONBasic.  # noqa: E501
        :type: ResultJSONBasicAge
        """
        self._age = age

    @property
    def lang(self):
        """Gets the lang of this ResultJSONBasic.  # noqa: E501

        :return: The lang of this ResultJSONBasic.  # noqa: E501
        :rtype: ResultJSONBasicLang
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this ResultJSONBasic.

        :param lang: The lang of this ResultJSONBasic.  # noqa: E501
        :type: ResultJSONBasicLang
        """
        self._lang = lang

    @property
    def utterances(self):
        """Gets the utterances of this ResultJSONBasic.  # noqa: E501

        :return: The utterances of this ResultJSONBasic.  # noqa: E501
        :rtype: ResultJSONBasicUtterances
        """
        return self._utterances

    @utterances.setter
    def utterances(self, utterances):
        """Sets the utterances of this ResultJSONBasic.

        :param utterances: The utterances of this ResultJSONBasic.  # noqa: E501
        :type: ResultJSONBasicUtterances
        """
        self._utterances = utterances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            else:
                if hasattr(value, 'to_dict'):
                    result[attr] = value.to_dict()
                else:
                    if isinstance(value, dict):
                        result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
                    else:
                        result[attr] = value

        if issubclass(ResultJSONBasic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultJSONBasic):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other