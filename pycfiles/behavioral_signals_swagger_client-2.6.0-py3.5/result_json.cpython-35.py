# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3350)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/behavioral_signals_swagger_client/models/result_json.py
# Compiled at: 2020-02-03 04:38:52
# Size of source mod 2**32: 5102 bytes
"""
    Oliver API

    Oliver API in the cloud service  # noqa: E501

    OpenAPI spec version: 3.6.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint, re, six

class ResultJSON(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    '
    swagger_types = {'basic': 'ResultJSONBasic', 
     'core': 'ResultJSONCore', 
     'kpi': 'ResultJSONKpi', 
     'events': 'ResultJSONEvents'}
    attribute_map = {'basic': 'basic', 
     'core': 'core', 
     'kpi': 'kpi', 
     'events': 'events'}

    def __init__(self, basic=None, core=None, kpi=None, events=None):
        """ResultJSON - a model defined in Swagger"""
        self._basic = None
        self._core = None
        self._kpi = None
        self._events = None
        self.discriminator = None
        self.basic = basic
        self.core = core
        self.kpi = kpi
        if events is not None:
            self.events = events

    @property
    def basic(self):
        """Gets the basic of this ResultJSON.  # noqa: E501

        :return: The basic of this ResultJSON.  # noqa: E501
        :rtype: ResultJSONBasic
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this ResultJSON.

        :param basic: The basic of this ResultJSON.  # noqa: E501
        :type: ResultJSONBasic
        """
        if basic is None:
            raise ValueError('Invalid value for `basic`, must not be `None`')
        self._basic = basic

    @property
    def core(self):
        """Gets the core of this ResultJSON.  # noqa: E501

        :return: The core of this ResultJSON.  # noqa: E501
        :rtype: ResultJSONCore
        """
        return self._core

    @core.setter
    def core(self, core):
        """Sets the core of this ResultJSON.

        :param core: The core of this ResultJSON.  # noqa: E501
        :type: ResultJSONCore
        """
        if core is None:
            raise ValueError('Invalid value for `core`, must not be `None`')
        self._core = core

    @property
    def kpi(self):
        """Gets the kpi of this ResultJSON.  # noqa: E501

        :return: The kpi of this ResultJSON.  # noqa: E501
        :rtype: ResultJSONKpi
        """
        return self._kpi

    @kpi.setter
    def kpi(self, kpi):
        """Sets the kpi of this ResultJSON.

        :param kpi: The kpi of this ResultJSON.  # noqa: E501
        :type: ResultJSONKpi
        """
        if kpi is None:
            raise ValueError('Invalid value for `kpi`, must not be `None`')
        self._kpi = kpi

    @property
    def events(self):
        """Gets the events of this ResultJSON.  # noqa: E501

        :return: The events of this ResultJSON.  # noqa: E501
        :rtype: ResultJSONEvents
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this ResultJSON.

        :param events: The events of this ResultJSON.  # noqa: E501
        :type: ResultJSONEvents
        """
        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            else:
                if hasattr(value, 'to_dict'):
                    result[attr] = value.to_dict()
                else:
                    if isinstance(value, dict):
                        result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
                    else:
                        result[attr] = value

        if issubclass(ResultJSON, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultJSON):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other