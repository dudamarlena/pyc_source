# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3350)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/behavioral_signals_swagger_client/models/result_json_basic_gender.py
# Compiled at: 2020-02-03 04:38:52
# Size of source mod 2**32: 4011 bytes
"""
    Oliver API

    Oliver API in the cloud service  # noqa: E501

    OpenAPI spec version: 3.6.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint, re, six

class ResultJSONBasicGender(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    '
    swagger_types = {'agent': 'int', 
     'customer': 'int'}
    attribute_map = {'agent': 'agent', 
     'customer': 'customer'}

    def __init__(self, agent=None, customer=None):
        """ResultJSONBasicGender - a model defined in Swagger"""
        self._agent = None
        self._customer = None
        self.discriminator = None
        if agent is not None:
            self.agent = agent
        if customer is not None:
            self.customer = customer

    @property
    def agent(self):
        """Gets the agent of this ResultJSONBasicGender.  # noqa: E501

        Agent gender index: 1=female, 2=male  # noqa: E501

        :return: The agent of this ResultJSONBasicGender.  # noqa: E501
        :rtype: int
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this ResultJSONBasicGender.

        Agent gender index: 1=female, 2=male  # noqa: E501

        :param agent: The agent of this ResultJSONBasicGender.  # noqa: E501
        :type: int
        """
        self._agent = agent

    @property
    def customer(self):
        """Gets the customer of this ResultJSONBasicGender.  # noqa: E501

        Customer gender index: 1=female, 2=male  # noqa: E501

        :return: The customer of this ResultJSONBasicGender.  # noqa: E501
        :rtype: int
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ResultJSONBasicGender.

        Customer gender index: 1=female, 2=male  # noqa: E501

        :param customer: The customer of this ResultJSONBasicGender.  # noqa: E501
        :type: int
        """
        self._customer = customer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            else:
                if hasattr(value, 'to_dict'):
                    result[attr] = value.to_dict()
                else:
                    if isinstance(value, dict):
                        result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
                    else:
                        result[attr] = value

        if issubclass(ResultJSONBasicGender, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultJSONBasicGender):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other