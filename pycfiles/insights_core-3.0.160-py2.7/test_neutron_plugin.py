# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/insights/parsers/tests/test_neutron_plugin.py
# Compiled at: 2019-05-16 13:41:33
from insights.parsers.neutron_plugin import NeutronPlugin
from insights.tests import context_wrap
neutron_plugin_content = "\n[ml2]\n# (ListOpt) List of network type driver entrypoints to be loaded from\n# the neutron.ml2.type_drivers namespace.\n#\n# type_drivers = local,flat,vlan,gre,vxlan,geneve\ntype_drivers = local,flat,vlan,gre,vxlan\n# Example: type_drivers = flat,vlan,gre,vxlan,geneve\n\n# (ListOpt) Ordered list of network_types to allocate as tenant\n# networks. The default value 'local' is useful for single-box testing\n# but provides no connectivity between hosts.\n#\n# tenant_network_types = local\ntenant_network_types = local,flat,vlan,gre,vxlan\n# Example: tenant_network_types = vlan,gre,vxlan,geneve\n\n\n# (ListOpt) Ordered list of networking mechanism driver entrypoints\n# to be loaded from the neutron.ml2.mechanism_drivers namespace.\n# mechanism_drivers =\nmechanism_drivers =openvswitch,linuxbridge\n# Example: mechanism_drivers = openvswitch,mlnx\n# Example: mechanism_drivers = arista\n# Example: mechanism_drivers = openvswitch,cisco_nexus,logger\n# Example: mechanism_drivers = openvswitch,brocade\n# Example: mechanism_drivers = linuxbridge,brocade\n\n# (ListOpt) Ordered list of extension driver entrypoints\n# to be loaded from the neutron.ml2.extension_drivers namespace.\n# extension_drivers =\nextension_drivers =\n# Example: extension_drivers = anewextensiondriver\n\n# =========== items for MTU selection and advertisement =============\n# (IntOpt) Path MTU.  The maximum permissible size of an unfragmented\n# packet travelling from and to addresses where encapsulated Neutron\n# traffic is sent.  Drivers calculate maximum viable MTU for\n# validating tenant requests based on this value (typically,\n# path_mtu - max encap header size).  If <=0, the path MTU is\n# indeterminate and no calculation takes place.\n# path_mtu = 0\npath_mtu = 0\n\n# (IntOpt) Segment MTU.  The maximum permissible size of an\n# unfragmented packet travelling a L2 network segment.  If <=0,\n# the segment MTU is indeterminate and no calculation takes place.\n# segment_mtu = 0\n# (ListOpt) Physical network MTUs.  List of mappings of physical\n# network to MTU value.  The format of the mapping is\n# <physnet>:<mtu val>.  This mapping allows specifying a\n# physical network MTU value that differs from the default\n# segment_mtu value.\n# physical_network_mtus =\n# Example: physical_network_mtus = physnet1:1550, physnet2:1500\n# ======== end of items for MTU selection and advertisement =========\n\n# (StrOpt) Default network type for external networks when no provider\n# attributes are specified. By default it is None, which means that if\n# provider attributes are not specified while creating external networks\n# then they will have the same type as tenant networks.\n# Allowed values for external_network_type config option depend on the\n# network type values configured in type_drivers config option.\n# external_network_type =\n# Example: external_network_type = local\n\n[ml2_type_flat]\n# (ListOpt) List of physical_network names with which flat networks\n# can be created. Use * to allow flat networks with arbitrary\n# physical_network names.\n#\n# flat_networks =\nflat_networks =*\n# Example:flat_networks = physnet1,physnet2\n# Example:flat_networks = *\n\n[ml2_type_vlan]\n# (ListOpt) List of <physical_network>[:<vlan_min>:<vlan_max>] tuples\n# specifying physical_network names usable for VLAN provider and\n# tenant networks, as well as ranges of VLAN tags on each\n# physical_network available for allocation as tenant networks.\n#\n# network_vlan_ranges =\nnetwork_vlan_ranges =physnet1:1000:2999\n# Example: network_vlan_ranges = physnet1:1000:2999,physnet2\n\n[ml2_type_gre]\n# (ListOpt) Comma-separated list of <tun_min>:<tun_max> tuples enumerating ranges of GRE tunnel IDs that are available for tenant network allocation\n# tunnel_id_ranges =\ntunnel_id_ranges =20:100\n[ml2_type_vxlan]\n# (ListOpt) Comma-separated list of <vni_min>:<vni_max> tuples enumerating\n# ranges of VXLAN VNI IDs that are available for tenant network allocation.\n#\n# vni_ranges =\nvni_ranges =10:100\n\n# (StrOpt) Multicast group for the VXLAN interface. When configured, will\n# enable sending all broadcast traffic to this multicast group. When left\n# unconfigured, will disable multicast VXLAN mode.\n#\n# vxlan_group =\nvxlan_group =224.0.0.1\n# Example: vxlan_group = 239.1.1.1\n\n[ml2_type_geneve]\n# (ListOpt) Comma-separated list of <vni_min>:<vni_max> tuples enumerating\n# ranges of Geneve VNI IDs that are available for tenant network allocation.\n#\n# vni_ranges =\n\n# (IntOpt) Geneve encapsulation header size is dynamic, this\n# value is used to calculate the maximum MTU for the driver.\n# this is the sum of the sizes of the outer ETH+IP+UDP+GENEVE\n# header sizes.\n# The default size for this field is 50, which is the size of the\n# Geneve header without any additional option headers\n#\n# max_header_size =\n# Example: max_header_size = 50 (Geneve headers with no additional options)\n\n[securitygroup]\n# Controls if neutron security group is enabled or not.\n# It should be false when you use nova security group.\n# enable_security_group = True\nenable_security_group = True\n\n# Use ipset to speed-up the iptables security groups. Enabling ipset support\n# requires that ipset is installed on L2 agent node.\n# enable_ipset = True\n"

def test_neutron_ini():
    result = NeutronPlugin(context_wrap(neutron_plugin_content))
    assert result.get('ml2_type_flat', 'flat_networks') == '*'
    assert result.get('securitygroup', 'enable_security_group') == 'True'
    assert result.get('ml2_type_gre', 'tunnel_id_ranges') == '20:100'
    assert result.get('ml2_type_vxlan', 'vni_ranges') == '10:100'