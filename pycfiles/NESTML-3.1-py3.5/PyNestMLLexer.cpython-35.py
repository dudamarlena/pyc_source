# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3351)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/pynestml/generated/PyNestMLLexer.py
# Compiled at: 2020-03-05 05:49:41
# Size of source mod 2**32: 27946 bytes
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as (buf):
        buf.write('\x03悋Ꜫ脳맭䅼㯧瞆奤\x02')
        buf.write('Sɮ\x08\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04')
        buf.write('\x07\t\x07\x04\x08\t\x08\x04\t\t\t\x04\n\t\n\x04\x0b\t\x0b\x04\x0c\t\x0c\x04\r')
        buf.write('\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12')
        buf.write('\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04')
        buf.write('\x18\t\x18\x04\x19\t\x19\x04\x1a\t\x1a\x04\x1b\t\x1b\x04\x1c\t\x1c\x04\x1d')
        buf.write('\t\x1d\x04\x1e\t\x1e\x04\x1f\t\x1f\x04 \t \x04!\t!\x04"\t"\x04#\t#\x04')
        buf.write("$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04+\t+\x04,\t")
        buf.write(',\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043')
        buf.write('\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x04')
        buf.write('9\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA')
        buf.write('\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\t')
        buf.write('J\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S')
        buf.write('\tS\x04T\tT\x04U\tU\x03\x02\x03\x02\x07\x02®\n\x02\x0c\x02\x0e\x02±')
        buf.write('\x0b\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03¹\n\x03\x0c\x03\x0e\x03')
        buf.write('¼\x0b\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03Å\n\x03')
        buf.write('\x0c\x03\x0e\x03È\x0b\x03\x03\x03\x03\x03\x03\x03\x05\x03Í\n\x03\x03\x03\x03')
        buf.write('\x03\x03\x04\x03\x04\x03\x04\x05\x04Ô\n\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05')
        buf.write('\x03\x06\x03\x06\x05\x06Þ\n\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03')
        buf.write('\x07\x03\x08\x03\x08\x03\x08\x03\x08\x03\x08\x03\x08\x03\x08\x03\x08\x03\t\x03\t\x03\t\x03\t\x03')
        buf.write('\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\x0b\x03\x0b\x03\x0b\x03\x0b\x03')
        buf.write('\x0b\x03\x0b\x03\x0b\x03\x0b\x03\x0c\x03\x0c\x03\x0c\x03\x0c\x03\x0c\x03\r\x03\r\x03\r\x03')
        buf.write('\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0e')
        buf.write('\x03\x0e\x03\x0f\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03')
        buf.write('\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13')
        buf.write('\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03')
        buf.write('\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18')
        buf.write('\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03')
        buf.write('\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1b\x03\x1b\x03\x1b')
        buf.write('\x03\x1b\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03')
        buf.write('\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1e\x03\x1e\x03\x1e\x03\x1e\x03\x1e')
        buf.write('\x03\x1e\x03\x1e\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03')
        buf.write('\x1f\x03\x1f\x03\x1f\x03\x1f\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03')
        buf.write(' \x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03"\x03"\x03"\x03"\x03"\x03')
        buf.write('"\x03"\x03"\x03"\x03"\x03#\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x03')
        buf.write("$\x03$\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03'\x03")
        buf.write("'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03(\x03(\x03(\x03(\x03")
        buf.write('(\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03*\x03*\x03+\x03+\x03,\x03,\x03-')
        buf.write('\x03-\x03.\x03.\x03/\x03/\x030\x030\x031\x031\x032\x032\x032\x03')
        buf.write('3\x033\x034\x034\x034\x035\x035\x035\x036\x036\x036')
        buf.write('\x037\x037\x037\x038\x038\x039\x039\x03:\x03:\x03:\x03;\x03;\x03;\x03<\x03<\x03')
        buf.write('<\x03=\x03=\x03=\x03>\x03>\x03>\x03?\x03?\x03?\x03@\x03@\x03@\x03A\x03A\x03A\x03B\x03B')
        buf.write('\x03B\x03C\x03C\x03D\x03D\x03E\x03E\x03F\x03F\x03G\x03G\x03G\x03H\x03H\x03I\x03I\x03J\x03')
        buf.write('J\x03K\x03K\x03L\x03L\x03M\x03M\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N')
        buf.write('\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x05Nȸ\nN\x03O\x03O\x05Oȼ\nO\x03')
        buf.write('O\x07Oȿ\nO\x0cO\x0eOɂ\x0bO\x03O\x03O\x03P\x05Pɇ\nP\x03')
        buf.write('P\x07PɊ\nP\x0cP\x0ePɍ\x0bP\x03Q\x06Qɐ\nQ\rQ\x0eQ')
        buf.write('ɑ\x03R\x03R\x05Rɖ\nR\x03S\x05Sə\nS\x03S\x03S\x03S\x03S\x03')
        buf.write('S\x05Sɠ\nS\x03T\x03T\x05Tɤ\nT\x03T\x03T\x03T\x03U\x03U\x05Uɫ')
        buf.write('\nU\x03U\x03U\x04ºÆ\x02V\x03\x03\x05\x04\x07\x05\t\x06\x0b\x07\r\x08\x0f')
        buf.write('\t\x11\n\x13\x0b\x15\x0c\x17\r\x19\x0e\x1b\x0f\x1d\x10\x1f\x11!\x12#')
        buf.write("\x13%\x14'\x15)\x16+\x17-\x18/\x191\x1a3\x1b5\x1c7\x1d")
        buf.write('9\x1e;\x1f= ?!A"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]0_1a2')
        buf.write('c3e4g5i6k7m8o9q:s;u<w=y>{?}@\x7fA\x81B\x83')
        buf.write('C\x85D\x87E\x89F\x8bG\x8dH\x8fI\x91J\x93')
        buf.write('K\x95L\x97M\x99N\x9bO\x9dP\x9fQ¡R£')
        buf.write('S¥\x02§\x02©\x02\x03\x02\x08\x04\x02\x0c\x0c\x0f\x0f\x04\x02\x0b')
        buf.write('\x0b""\x06\x02&&C\\aac|\x07\x02&&2;C\\aac|\x03\x022;\x04\x02GGg')
        buf.write('g\x02ɼ\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02')
        buf.write('\x02\x02\x02\x0b\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0f\x03\x02\x02\x02\x02\x11\x03\x02\x02')
        buf.write('\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02')
        buf.write('\x02\x02\x1b\x03\x02\x02\x02\x02\x1d\x03\x02\x02\x02\x02\x1f\x03\x02\x02\x02\x02!\x03\x02\x02\x02')
        buf.write("\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02")
        buf.write('\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02')
        buf.write('\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03')
        buf.write('\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02')
        buf.write('G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02')
        buf.write('\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02')
        buf.write('\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02')
        buf.write('\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03')
        buf.write('\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02')
        buf.write('w\x03\x02\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02\x02\x02\x02\x7f\x03\x02')
        buf.write('\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02\x85\x03\x02\x02\x02')
        buf.write('\x02\x87\x03\x02\x02\x02\x02\x89\x03\x02\x02\x02\x02\x8b\x03\x02\x02\x02\x02\x8d')
        buf.write('\x03\x02\x02\x02\x02\x8f\x03\x02\x02\x02\x02\x91\x03\x02\x02\x02\x02\x93\x03\x02')
        buf.write('\x02\x02\x02\x95\x03\x02\x02\x02\x02\x97\x03\x02\x02\x02\x02\x99\x03\x02\x02\x02')
        buf.write('\x02\x9b\x03\x02\x02\x02\x02\x9d\x03\x02\x02\x02\x02\x9f\x03\x02\x02\x02\x02¡')
        buf.write('\x03\x02\x02\x02\x02£\x03\x02\x02\x02\x03«\x03\x02\x02\x02\x05Ì\x03\x02')
        buf.write('\x02\x02\x07Ó\x03\x02\x02\x02\t×\x03\x02\x02\x02\x0bÛ\x03\x02\x02\x02')
        buf.write('\rã\x03\x02\x02\x02\x0fç\x03\x02\x02\x02\x11ï\x03\x02\x02\x02\x13')
        buf.write('ô\x03\x02\x02\x02\x15û\x03\x02\x02\x02\x17ă\x03\x02\x02\x02\x19Ĉ')
        buf.write('\x03\x02\x02\x02\x1bđ\x03\x02\x02\x02\x1dĘ\x03\x02\x02\x02\x1fě\x03')
        buf.write("\x02\x02\x02!Ġ\x03\x02\x02\x02#ĥ\x03\x02\x02\x02%ĩ\x03\x02\x02\x02'")
        buf.write('į\x03\x02\x02\x02)Ĳ\x03\x02\x02\x02+ķ\x03\x02\x02\x02-Ļ\x03')
        buf.write('\x02\x02\x02/Ŀ\x03\x02\x02\x021ł\x03\x02\x02\x023ņ\x03\x02\x02')
        buf.write('\x025ő\x03\x02\x02\x027ŗ\x03\x02\x02\x029Ş\x03\x02\x02\x02;')
        buf.write('Ť\x03\x02\x02\x02=ů\x03\x02\x02\x02?Ź\x03\x02\x02\x02Aƈ\x03')
        buf.write('\x02\x02\x02CƏ\x03\x02\x02\x02Eƙ\x03\x02\x02\x02GƟ\x03\x02\x02\x02I')
        buf.write('Ʀ\x03\x02\x02\x02KƮ\x03\x02\x02\x02Mƴ\x03\x02\x02\x02Oƿ\x03')
        buf.write('\x02\x02\x02QǊ\x03\x02\x02\x02Sǎ\x03\x02\x02\x02Uǐ\x03\x02\x02\x02W')
        buf.write('ǒ\x03\x02\x02\x02Yǔ\x03\x02\x02\x02[ǖ\x03\x02\x02\x02]ǘ\x03')
        buf.write('\x02\x02\x02_ǚ\x03\x02\x02\x02aǜ\x03\x02\x02\x02cǞ\x03\x02\x02\x02e')
        buf.write('ǡ\x03\x02\x02\x02gǣ\x03\x02\x02\x02iǦ\x03\x02\x02\x02kǩ\x03')
        buf.write('\x02\x02\x02mǬ\x03\x02\x02\x02oǯ\x03\x02\x02\x02qǱ\x03\x02\x02\x02s')
        buf.write('ǳ\x03\x02\x02\x02uǶ\x03\x02\x02\x02wǹ\x03\x02\x02\x02yǼ\x03')
        buf.write('\x02\x02\x02{ǿ\x03\x02\x02\x02}Ȃ\x03\x02\x02\x02\x7fȅ\x03\x02\x02')
        buf.write('\x02\x81Ȉ\x03\x02\x02\x02\x83ȋ\x03\x02\x02\x02\x85Ȏ')
        buf.write('\x03\x02\x02\x02\x87Ȑ\x03\x02\x02\x02\x89Ȓ\x03\x02\x02\x02\x8b')
        buf.write('Ȕ\x03\x02\x02\x02\x8dȖ\x03\x02\x02\x02\x8fș\x03\x02\x02')
        buf.write('\x02\x91ț\x03\x02\x02\x02\x93ȝ\x03\x02\x02\x02\x95ȟ')
        buf.write('\x03\x02\x02\x02\x97ȡ\x03\x02\x02\x02\x99ȣ\x03\x02\x02\x02\x9b')
        buf.write('ȷ\x03\x02\x02\x02\x9dȹ\x03\x02\x02\x02\x9fɆ\x03\x02\x02')
        buf.write('\x02¡ɏ\x03\x02\x02\x02£ɕ\x03\x02\x02\x02¥ɟ')
        buf.write('\x03\x02\x02\x02§ɣ\x03\x02\x02\x02©ɪ\x03\x02\x02\x02«')
        buf.write('¯\x07%\x02\x02¬®\n\x02\x02\x02\xad¬\x03\x02\x02\x02')
        buf.write('®±\x03\x02\x02\x02¯\xad\x03\x02\x02\x02¯°')
        buf.write('\x03\x02\x02\x02°²\x03\x02\x02\x02±¯\x03\x02\x02\x02²')
        buf.write('³\x08\x02\x02\x02³\x04\x03\x02\x02\x02´µ\x071\x02\x02µ')
        buf.write('¶\x07,\x02\x02¶º\x03\x02\x02\x02·¹\x0b\x02\x02')
        buf.write('\x02¸·\x03\x02\x02\x02¹¼\x03\x02\x02\x02º»')
        buf.write('\x03\x02\x02\x02º¸\x03\x02\x02\x02»½\x03\x02\x02\x02¼')
        buf.write('º\x03\x02\x02\x02½¾\x07,\x02\x02¾Í\x071\x02')
        buf.write('\x02¿À\x07$\x02\x02ÀÁ\x07$\x02\x02ÁÂ')
        buf.write('\x07$\x02\x02ÂÆ\x03\x02\x02\x02ÃÅ\x0b\x02\x02\x02Ä')
        buf.write('Ã\x03\x02\x02\x02ÅÈ\x03\x02\x02\x02ÆÇ\x03\x02\x02')
        buf.write('\x02ÆÄ\x03\x02\x02\x02ÇÉ\x03\x02\x02\x02ÈÆ')
        buf.write('\x03\x02\x02\x02ÉÊ\x07$\x02\x02ÊË\x07$\x02\x02Ë')
        buf.write('Í\x07$\x02\x02Ì´\x03\x02\x02\x02Ì¿\x03\x02\x02\x02')
        buf.write('ÍÎ\x03\x02\x02\x02ÎÏ\x08\x03\x02\x02Ï\x06\x03\x02')
        buf.write('\x02\x02ÐÑ\x07\x0f\x02\x02ÑÔ\x07\x0c\x02\x02ÒÔ')
        buf.write('\t\x02\x02\x02ÓÐ\x03\x02\x02\x02ÓÒ\x03\x02\x02\x02Ô')
        buf.write('Õ\x03\x02\x02\x02ÕÖ\x08\x04\x03\x02Ö\x08\x03\x02\x02\x02×')
        buf.write('Ø\t\x03\x02\x02ØÙ\x03\x02\x02\x02ÙÚ\x08\x05\x04')
        buf.write('\x02Ú\n\x03\x02\x02\x02ÛÝ\x07^\x02\x02ÜÞ\x07\x0f')
        buf.write('\x02\x02ÝÜ\x03\x02\x02\x02ÝÞ\x03\x02\x02\x02Þß')
        buf.write('\x03\x02\x02\x02ßà\x07\x0c\x02\x02àá\x03\x02\x02\x02á')
        buf.write('â\x08\x06\x04\x02â\x0c\x03\x02\x02\x02ãä\x07g\x02\x02ä')
        buf.write('å\x07p\x02\x02åæ\x07f\x02\x02æ\x0e\x03\x02\x02\x02ç')
        buf.write('è\x07k\x02\x02èé\x07p\x02\x02éê\x07v\x02\x02ê')
        buf.write('ë\x07g\x02\x02ëì\x07i\x02\x02ìí\x07g\x02\x02í')
        buf.write('î\x07t\x02\x02î\x10\x03\x02\x02\x02ïð\x07t\x02\x02ð')
        buf.write('ñ\x07g\x02\x02ñò\x07c\x02\x02òó\x07n\x02\x02ó')
        buf.write('\x12\x03\x02\x02\x02ôõ\x07u\x02\x02õö\x07v\x02\x02ö')
        buf.write('÷\x07t\x02\x02÷ø\x07k\x02\x02øù\x07p\x02\x02ù')
        buf.write('ú\x07i\x02\x02ú\x14\x03\x02\x02\x02ûü\x07d\x02\x02ü')
        buf.write('ý\x07q\x02\x02ýþ\x07q\x02\x02þÿ\x07n\x02\x02ÿ')
        buf.write('Ā\x07g\x02\x02Āā\x07c\x02\x02āĂ\x07p\x02\x02Ă')
        buf.write('\x16\x03\x02\x02\x02ăĄ\x07x\x02\x02Ąą\x07q\x02\x02ą')
        buf.write('Ć\x07k\x02\x02Ćć\x07f\x02\x02ć\x18\x03\x02\x02\x02Ĉ')
        buf.write('ĉ\x07h\x02\x02ĉĊ\x07w\x02\x02Ċċ\x07p\x02\x02ċ')
        buf.write('Č\x07e\x02\x02Čč\x07v\x02\x02čĎ\x07k\x02\x02Ď')
        buf.write('ď\x07q\x02\x02ďĐ\x07p\x02\x02Đ\x1a\x03\x02\x02\x02đ')
        buf.write('Ē\x07t\x02\x02Ēē\x07g\x02\x02ēĔ\x07v\x02\x02Ĕ')
        buf.write('ĕ\x07w\x02\x02ĕĖ\x07t\x02\x02Ėė\x07p\x02\x02ė')
        buf.write('\x1c\x03\x02\x02\x02Ęę\x07k\x02\x02ęĚ\x07h\x02\x02Ě')
        buf.write('\x1e\x03\x02\x02\x02ěĜ\x07g\x02\x02Ĝĝ\x07n\x02\x02ĝ')
        buf.write('Ğ\x07k\x02\x02Ğğ\x07h\x02\x02ğ \x03\x02\x02\x02Ġ')
        buf.write('ġ\x07g\x02\x02ġĢ\x07n\x02\x02Ģģ\x07u\x02\x02ģ')
        buf.write('Ĥ\x07g\x02\x02Ĥ"\x03\x02\x02\x02ĥĦ\x07h\x02\x02Ħ')
        buf.write('ħ\x07q\x02\x02ħĨ\x07t\x02\x02Ĩ$\x03\x02\x02\x02ĩ')
        buf.write('Ī\x07y\x02\x02Īī\x07j\x02\x02īĬ\x07k\x02\x02Ĭ')
        buf.write('ĭ\x07n\x02\x02ĭĮ\x07g\x02\x02Į&\x03\x02\x02\x02į')
        buf.write('İ\x07k\x02\x02İı\x07p\x02\x02ı(\x03\x02\x02\x02Ĳ')
        buf.write('ĳ\x07u\x02\x02ĳĴ\x07v\x02\x02Ĵĵ\x07g\x02\x02ĵ')
        buf.write('Ķ\x07r\x02\x02Ķ*\x03\x02\x02\x02ķĸ\x07k\x02\x02ĸ')
        buf.write('Ĺ\x07p\x02\x02Ĺĺ\x07h\x02\x02ĺ,\x03\x02\x02\x02Ļ')
        buf.write('ļ\x07c\x02\x02ļĽ\x07p\x02\x02Ľľ\x07f\x02\x02ľ')
        buf.write('.\x03\x02\x02\x02Ŀŀ\x07q\x02\x02ŀŁ\x07t\x02\x02Ł')
        buf.write('0\x03\x02\x02\x02łŃ\x07p\x02\x02Ńń\x07q\x02\x02ń')
        buf.write('Ņ\x07v\x02\x02Ņ2\x03\x02\x02\x02ņŇ\x07t\x02\x02Ň')
        buf.write('ň\x07g\x02\x02ňŉ\x07e\x02\x02ŉŊ\x07q\x02\x02Ŋ')
        buf.write('ŋ\x07t\x02\x02ŋŌ\x07f\x02\x02Ōō\x07c\x02\x02ō')
        buf.write('Ŏ\x07d\x02\x02Ŏŏ\x07n\x02\x02ŏŐ\x07g\x02\x02Ő')
        buf.write('4\x03\x02\x02\x02őŒ\x07u\x02\x02Œœ\x07j\x02\x02œ')
        buf.write('Ŕ\x07c\x02\x02Ŕŕ\x07r\x02\x02ŕŖ\x07g\x02\x02Ŗ')
        buf.write('6\x03\x02\x02\x02ŗŘ\x07p\x02\x02Řř\x07g\x02\x02ř')
        buf.write('Ś\x07w\x02\x02Śś\x07t\x02\x02śŜ\x07q\x02\x02Ŝ')
        buf.write('ŝ\x07p\x02\x02ŝ8\x03\x02\x02\x02Şş\x07u\x02\x02ş')
        buf.write('Š\x07v\x02\x02Šš\x07c\x02\x02šŢ\x07v\x02\x02Ţ')
        buf.write('ţ\x07g\x02\x02ţ:\x03\x02\x02\x02Ťť\x07r\x02\x02ť')
        buf.write('Ŧ\x07c\x02\x02Ŧŧ\x07t\x02\x02ŧŨ\x07c\x02\x02Ũ')
        buf.write('ũ\x07o\x02\x02ũŪ\x07g\x02\x02Ūū\x07v\x02\x02ū')
        buf.write('Ŭ\x07g\x02\x02Ŭŭ\x07t\x02\x02ŭŮ\x07u\x02\x02Ů')
        buf.write('<\x03\x02\x02\x02ůŰ\x07k\x02\x02Űű\x07p\x02\x02ű')
        buf.write('Ų\x07v\x02\x02Ųų\x07g\x02\x02ųŴ\x07t\x02\x02Ŵ')
        buf.write('ŵ\x07p\x02\x02ŵŶ\x07c\x02\x02Ŷŷ\x07n\x02\x02ŷ')
        buf.write('Ÿ\x07u\x02\x02Ÿ>\x03\x02\x02\x02Źź\x07k\x02\x02ź')
        buf.write('Ż\x07p\x02\x02Żż\x07k\x02\x02żŽ\x07v\x02\x02Ž')
        buf.write('ž\x07k\x02\x02žſ\x07c\x02\x02ſƀ\x07n\x02\x02ƀ')
        buf.write('Ɓ\x07a\x02\x02ƁƂ\x07x\x02\x02Ƃƃ\x07c\x02\x02ƃ')
        buf.write('Ƅ\x07n\x02\x02Ƅƅ\x07w\x02\x02ƅƆ\x07g\x02\x02Ɔ')
        buf.write('Ƈ\x07u\x02\x02Ƈ@\x03\x02\x02\x02ƈƉ\x07w\x02\x02Ɖ')
        buf.write('Ɗ\x07r\x02\x02ƊƋ\x07f\x02\x02Ƌƌ\x07c\x02\x02ƌ')
        buf.write('ƍ\x07v\x02\x02ƍƎ\x07g\x02\x02ƎB\x03\x02\x02\x02Ə')
        buf.write('Ɛ\x07g\x02\x02ƐƑ\x07s\x02\x02Ƒƒ\x07w\x02\x02ƒ')
        buf.write('Ɠ\x07c\x02\x02ƓƔ\x07v\x02\x02Ɣƕ\x07k\x02\x02ƕ')
        buf.write('Ɩ\x07q\x02\x02ƖƗ\x07p\x02\x02ƗƘ\x07u\x02\x02Ƙ')
        buf.write('D\x03\x02\x02\x02ƙƚ\x07k\x02\x02ƚƛ\x07p\x02\x02ƛ')
        buf.write('Ɯ\x07r\x02\x02ƜƝ\x07w\x02\x02Ɲƞ\x07v\x02\x02ƞ')
        buf.write('F\x03\x02\x02\x02ƟƠ\x07q\x02\x02Ơơ\x07w\x02\x02ơ')
        buf.write('Ƣ\x07v\x02\x02Ƣƣ\x07r\x02\x02ƣƤ\x07w\x02\x02Ƥ')
        buf.write('ƥ\x07v\x02\x02ƥH\x03\x02\x02\x02ƦƧ\x07e\x02\x02Ƨ')
        buf.write('ƨ\x07w\x02\x02ƨƩ\x07t\x02\x02Ʃƪ\x07t\x02\x02ƪ')
        buf.write('ƫ\x07g\x02\x02ƫƬ\x07p\x02\x02Ƭƭ\x07v\x02\x02ƭ')
        buf.write('J\x03\x02\x02\x02ƮƯ\x07u\x02\x02Ưư\x07r\x02\x02ư')
        buf.write('Ʊ\x07k\x02\x02ƱƲ\x07m\x02\x02ƲƳ\x07g\x02\x02Ƴ')
        buf.write('L\x03\x02\x02\x02ƴƵ\x07k\x02\x02Ƶƶ\x07p\x02\x02ƶ')
        buf.write('Ʒ\x07j\x02\x02ƷƸ\x07k\x02\x02Ƹƹ\x07d\x02\x02ƹ')
        buf.write('ƺ\x07k\x02\x02ƺƻ\x07v\x02\x02ƻƼ\x07q\x02\x02Ƽ')
        buf.write('ƽ\x07t\x02\x02ƽƾ\x07{\x02\x02ƾN\x03\x02\x02\x02ƿ')
        buf.write('ǀ\x07g\x02\x02ǀǁ\x07z\x02\x02ǁǂ\x07e\x02\x02ǂ')
        buf.write('ǃ\x07k\x02\x02ǃǄ\x07v\x02\x02Ǆǅ\x07c\x02\x02ǅ')
        buf.write('ǆ\x07v\x02\x02ǆǇ\x07q\x02\x02Ǉǈ\x07t\x02\x02ǈ')
        buf.write('ǉ\x07{\x02\x02ǉP\x03\x02\x02\x02Ǌǋ\x070\x02\x02ǋ')
        buf.write('ǌ\x070\x02\x02ǌǍ\x070\x02\x02ǍR\x03\x02\x02\x02ǎ')
        buf.write('Ǐ\x07*\x02\x02ǏT\x03\x02\x02\x02ǐǑ\x07+\x02\x02Ǒ')
        buf.write('V\x03\x02\x02\x02ǒǓ\x07-\x02\x02ǓX\x03\x02\x02\x02ǔǕ')
        buf.write('\x07\x80\x02\x02ǕZ\x03\x02\x02\x02ǖǗ\x07~\x02\x02Ǘ')
        buf.write('\\\x03\x02\x02\x02ǘǙ\x07`\x02\x02Ǚ^\x03\x02\x02\x02ǚǛ')
        buf.write('\x07(\x02\x02Ǜ`\x03\x02\x02\x02ǜǝ\x07]\x02\x02ǝb\x03\x02')
        buf.write('\x02\x02Ǟǟ\x07>\x02\x02ǟǠ\x07/\x02\x02Ǡd\x03\x02')
        buf.write('\x02\x02ǡǢ\x07_\x02\x02Ǣf\x03\x02\x02\x02ǣǤ\x07')
        buf.write(']\x02\x02Ǥǥ\x07]\x02\x02ǥh\x03\x02\x02\x02Ǧǧ\x07')
        buf.write('_\x02\x02ǧǨ\x07_\x02\x02Ǩj\x03\x02\x02\x02ǩǪ\x07')
        buf.write('>\x02\x02Ǫǫ\x07>\x02\x02ǫl\x03\x02\x02\x02Ǭǭ\x07')
        buf.write('@\x02\x02ǭǮ\x07@\x02\x02Ǯn\x03\x02\x02\x02ǯǰ\x07')
        buf.write('>\x02\x02ǰp\x03\x02\x02\x02Ǳǲ\x07@\x02\x02ǲr\x03\x02\x02')
        buf.write('\x02ǳǴ\x07>\x02\x02Ǵǵ\x07?\x02\x02ǵt\x03\x02\x02')
        buf.write('\x02ǶǷ\x07-\x02\x02ǷǸ\x07?\x02\x02Ǹv\x03\x02\x02')
        buf.write('\x02ǹǺ\x07/\x02\x02Ǻǻ\x07?\x02\x02ǻx\x03\x02\x02')
        buf.write('\x02Ǽǽ\x07,\x02\x02ǽǾ\x07?\x02\x02Ǿz\x03\x02\x02')
        buf.write('\x02ǿȀ\x071\x02\x02Ȁȁ\x07?\x02\x02ȁ|\x03\x02')
        buf.write('\x02\x02Ȃȃ\x07?\x02\x02ȃȄ\x07?\x02\x02Ȅ~\x03\x02')
        buf.write('\x02\x02ȅȆ\x07#\x02\x02Ȇȇ\x07?\x02\x02ȇ\x80')
        buf.write('\x03\x02\x02\x02Ȉȉ\x07>\x02\x02ȉȊ\x07@\x02\x02Ȋ')
        buf.write('\x82\x03\x02\x02\x02ȋȌ\x07@\x02\x02Ȍȍ\x07?\x02\x02')
        buf.write('ȍ\x84\x03\x02\x02\x02Ȏȏ\x07.\x02\x02ȏ\x86\x03')
        buf.write('\x02\x02\x02Ȑȑ\x07/\x02\x02ȑ\x88\x03\x02\x02\x02Ȓȓ')
        buf.write('\x07?\x02\x02ȓ\x8a\x03\x02\x02\x02Ȕȕ\x07,\x02\x02ȕ')
        buf.write('\x8c\x03\x02\x02\x02Ȗȗ\x07,\x02\x02ȗȘ\x07,\x02\x02')
        buf.write('Ș\x8e\x03\x02\x02\x02șȚ\x071\x02\x02Ț\x90')
        buf.write("\x03\x02\x02\x02țȜ\x07'\x02\x02Ȝ\x92\x03\x02\x02\x02ȝ")
        buf.write('Ȟ\x07A\x02\x02Ȟ\x94\x03\x02\x02\x02ȟȠ\x07<\x02\x02')
        buf.write('Ƞ\x96\x03\x02\x02\x02ȡȢ\x07=\x02\x02Ȣ\x98\x03')
        buf.write('\x02\x02\x02ȣȤ\x07)\x02\x02Ȥ\x9a\x03\x02\x02\x02ȥȦ')
        buf.write('\x07v\x02\x02Ȧȧ\x07t\x02\x02ȧȨ\x07w\x02\x02Ȩȸ')
        buf.write('\x07g\x02\x02ȩȪ\x07V\x02\x02Ȫȫ\x07t\x02\x02ȫȬ')
        buf.write('\x07w\x02\x02Ȭȸ\x07g\x02\x02ȭȮ\x07h\x02\x02Ȯȯ')
        buf.write('\x07c\x02\x02ȯȰ\x07n\x02\x02Ȱȱ\x07u\x02\x02ȱȸ')
        buf.write('\x07g\x02\x02Ȳȳ\x07H\x02\x02ȳȴ\x07c\x02\x02ȴȵ')
        buf.write('\x07n\x02\x02ȵȶ\x07u\x02\x02ȶȸ\x07g\x02\x02ȷȥ')
        buf.write('\x03\x02\x02\x02ȷȩ\x03\x02\x02\x02ȷȭ\x03\x02\x02\x02ȷ')
        buf.write('Ȳ\x03\x02\x02\x02ȸ\x9c\x03\x02\x02\x02ȹȻ\x07$\x02\x02')
        buf.write('Ⱥȼ\t\x04\x02\x02ȻȺ\x03\x02\x02\x02ȼɀ')
        buf.write('\x03\x02\x02\x02Ƚȿ\t\x05\x02\x02ȾȽ\x03\x02\x02\x02ȿ')
        buf.write('ɂ\x03\x02\x02\x02ɀȾ\x03\x02\x02\x02ɀɁ\x03\x02\x02')
        buf.write('\x02ɁɃ\x03\x02\x02\x02ɂɀ\x03\x02\x02\x02ɃɄ')
        buf.write('\x07$\x02\x02Ʉ\x9e\x03\x02\x02\x02Ʌɇ\t\x04\x02\x02Ɇ')
        buf.write('Ʌ\x03\x02\x02\x02ɇɋ\x03\x02\x02\x02ɈɊ\t\x05\x02')
        buf.write('\x02ɉɈ\x03\x02\x02\x02Ɋɍ\x03\x02\x02\x02ɋɉ')
        buf.write('\x03\x02\x02\x02ɋɌ\x03\x02\x02\x02Ɍ\xa0\x03\x02\x02\x02ɍ')
        buf.write('ɋ\x03\x02\x02\x02Ɏɐ\t\x06\x02\x02ɏɎ\x03\x02\x02')
        buf.write('\x02ɐɑ\x03\x02\x02\x02ɑɏ\x03\x02\x02\x02ɑɒ')
        buf.write('\x03\x02\x02\x02ɒ¢\x03\x02\x02\x02ɓɖ\x05¥S\x02ɔ')
        buf.write('ɖ\x05§T\x02ɕɓ\x03\x02\x02\x02ɕɔ\x03\x02')
        buf.write('\x02\x02ɖ¤\x03\x02\x02\x02ɗə\x05¡Q\x02ɘ')
        buf.write('ɗ\x03\x02\x02\x02ɘə\x03\x02\x02\x02əɚ\x03\x02\x02')
        buf.write('\x02ɚɛ\x070\x02\x02ɛɠ\x05¡Q\x02ɜ')
        buf.write('ɝ\x05¡Q\x02ɝɞ\x070\x02\x02ɞɠ\x03')
        buf.write('\x02\x02\x02ɟɘ\x03\x02\x02\x02ɟɜ\x03\x02\x02\x02ɠ')
        buf.write('¦\x03\x02\x02\x02ɡɤ\x05¡Q\x02ɢɤ\x05¥')
        buf.write('S\x02ɣɡ\x03\x02\x02\x02ɣɢ\x03\x02\x02\x02ɤɥ')
        buf.write('\x03\x02\x02\x02ɥɦ\t\x07\x02\x02ɦɧ\x05©U\x02ɧ')
        buf.write('¨\x03\x02\x02\x02ɨɫ\x05W,\x02ɩɫ\x05\x87')
        buf.write('D\x02ɪɨ\x03\x02\x02\x02ɪɩ\x03\x02\x02\x02ɪɫ')
        buf.write('\x03\x02\x02\x02ɫɬ\x03\x02\x02\x02ɬɭ\x05¡Q\x02ɭ')
        buf.write('ª\x03\x02\x02\x02\x16\x02¯ºÆÌÓÝ')
        buf.write('ȷȻȾɀɆɉɋɑɕ')
        buf.write('ɘɟɣɪ\x05\x02\x04\x02\x02\x05\x02\x02\x03\x02')
        return buf.getvalue()


class PyNestMLLexer(Lexer):
    atn = ATNDeserializer().deserialize(serializedATN())
    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]
    COMMENT = 2
    NEW_LINE = 3
    SL_COMMENT = 1
    ML_COMMENT = 2
    NEWLINE = 3
    WS = 4
    LINE_ESCAPE = 5
    END_KEYWORD = 6
    INTEGER_KEYWORD = 7
    REAL_KEYWORD = 8
    STRING_KEYWORD = 9
    BOOLEAN_KEYWORD = 10
    VOID_KEYWORD = 11
    FUNCTION_KEYWORD = 12
    RETURN_KEYWORD = 13
    IF_KEYWORD = 14
    ELIF_KEYWORD = 15
    ELSE_KEYWORD = 16
    FOR_KEYWORD = 17
    WHILE_KEYWORD = 18
    IN_KEYWORD = 19
    STEP_KEYWORD = 20
    INF_KEYWORD = 21
    AND_KEYWORD = 22
    OR_KEYWORD = 23
    NOT_KEYWORD = 24
    RECORDABLE_KEYWORD = 25
    SHAPE_KEYWORD = 26
    NEURON_KEYWORD = 27
    STATE_KEYWORD = 28
    PARAMETERS_KEYWORD = 29
    INTERNALS_KEYWORD = 30
    INITIAL_VALUES_KEYWORD = 31
    UPDATE_KEYWORD = 32
    EQUATIONS_KEYWORD = 33
    INPUT_KEYWORD = 34
    OUTPUT_KEYWORD = 35
    CURRENT_KEYWORD = 36
    SPIKE_KEYWORD = 37
    INHIBITORY_KEYWORD = 38
    EXCITATORY_KEYWORD = 39
    ELLIPSIS = 40
    LEFT_PAREN = 41
    RIGHT_PAREN = 42
    PLUS = 43
    TILDE = 44
    PIPE = 45
    CARET = 46
    AMPERSAND = 47
    LEFT_SQUARE_BRACKET = 48
    LEFT_ANGLE_MINUS = 49
    RIGHT_SQUARE_BRACKET = 50
    LEFT_LEFT_SQUARE = 51
    RIGHT_RIGHT_SQUARE = 52
    LEFT_LEFT_ANGLE = 53
    RIGHT_RIGHT_ANGLE = 54
    LEFT_ANGLE = 55
    RIGHT_ANGLE = 56
    LEFT_ANGLE_EQUALS = 57
    PLUS_EQUALS = 58
    MINUS_EQUALS = 59
    STAR_EQUALS = 60
    FORWARD_SLASH_EQUALS = 61
    EQUALS_EQUALS = 62
    EXCLAMATION_EQUALS = 63
    LEFT_ANGLE_RIGHT_ANGLE = 64
    RIGHT_ANGLE_EQUALS = 65
    COMMA = 66
    MINUS = 67
    EQUALS = 68
    STAR = 69
    STAR_STAR = 70
    FORWARD_SLASH = 71
    PERCENT = 72
    QUESTION = 73
    COLON = 74
    SEMICOLON = 75
    DIFFERENTIAL_ORDER = 76
    BOOLEAN_LITERAL = 77
    STRING_LITERAL = 78
    NAME = 79
    UNSIGNED_INTEGER = 80
    FLOAT = 81
    channelNames = [
     'DEFAULT_TOKEN_CHANNEL', 'HIDDEN', 'COMMENT', 'NEW_LINE']
    modeNames = [
     'DEFAULT_MODE']
    literalNames = [
     '<INVALID>',
     "'end'", "'integer'", "'real'", "'string'", "'boolean'",
     "'void'", "'function'", "'return'", "'if'", "'elif'", "'else'",
     "'for'", "'while'", "'in'", "'step'", "'inf'", "'and'",
     "'or'", "'not'", "'recordable'", "'shape'", "'neuron'",
     "'state'", "'parameters'", "'internals'", "'initial_values'",
     "'update'", "'equations'", "'input'", "'output'", "'current'",
     "'spike'", "'inhibitory'", "'excitatory'", "'...'", "'('",
     "')'", "'+'", "'~'", "'|'", "'^'", "'&'", "'['", "'<-'",
     "']'", "'[['", "']]'", "'<<'", "'>>'", "'<'", "'>'",
     "'<='", "'+='", "'-='", "'*='", "'/='", "'=='", "'!='",
     "'<>'", "'>='", "','", "'-'", "'='", "'*'", "'**'", "'/'",
     "'%'", "'?'", "':'", "';'", "'''"]
    symbolicNames = [
     '<INVALID>',
     'SL_COMMENT', 'ML_COMMENT', 'NEWLINE', 'WS', 'LINE_ESCAPE',
     'END_KEYWORD', 'INTEGER_KEYWORD', 'REAL_KEYWORD', 'STRING_KEYWORD',
     'BOOLEAN_KEYWORD', 'VOID_KEYWORD', 'FUNCTION_KEYWORD', 'RETURN_KEYWORD',
     'IF_KEYWORD', 'ELIF_KEYWORD', 'ELSE_KEYWORD', 'FOR_KEYWORD',
     'WHILE_KEYWORD', 'IN_KEYWORD', 'STEP_KEYWORD', 'INF_KEYWORD',
     'AND_KEYWORD', 'OR_KEYWORD', 'NOT_KEYWORD', 'RECORDABLE_KEYWORD',
     'SHAPE_KEYWORD', 'NEURON_KEYWORD', 'STATE_KEYWORD', 'PARAMETERS_KEYWORD',
     'INTERNALS_KEYWORD', 'INITIAL_VALUES_KEYWORD', 'UPDATE_KEYWORD',
     'EQUATIONS_KEYWORD', 'INPUT_KEYWORD', 'OUTPUT_KEYWORD', 'CURRENT_KEYWORD',
     'SPIKE_KEYWORD', 'INHIBITORY_KEYWORD', 'EXCITATORY_KEYWORD',
     'ELLIPSIS', 'LEFT_PAREN', 'RIGHT_PAREN', 'PLUS', 'TILDE',
     'PIPE', 'CARET', 'AMPERSAND', 'LEFT_SQUARE_BRACKET', 'LEFT_ANGLE_MINUS',
     'RIGHT_SQUARE_BRACKET', 'LEFT_LEFT_SQUARE', 'RIGHT_RIGHT_SQUARE',
     'LEFT_LEFT_ANGLE', 'RIGHT_RIGHT_ANGLE', 'LEFT_ANGLE', 'RIGHT_ANGLE',
     'LEFT_ANGLE_EQUALS', 'PLUS_EQUALS', 'MINUS_EQUALS', 'STAR_EQUALS',
     'FORWARD_SLASH_EQUALS', 'EQUALS_EQUALS', 'EXCLAMATION_EQUALS',
     'LEFT_ANGLE_RIGHT_ANGLE', 'RIGHT_ANGLE_EQUALS', 'COMMA',
     'MINUS', 'EQUALS', 'STAR', 'STAR_STAR', 'FORWARD_SLASH',
     'PERCENT', 'QUESTION', 'COLON', 'SEMICOLON', 'DIFFERENTIAL_ORDER',
     'BOOLEAN_LITERAL', 'STRING_LITERAL', 'NAME', 'UNSIGNED_INTEGER',
     'FLOAT']
    ruleNames = [
     'SL_COMMENT', 'ML_COMMENT', 'NEWLINE', 'WS', 'LINE_ESCAPE',
     'END_KEYWORD', 'INTEGER_KEYWORD', 'REAL_KEYWORD', 'STRING_KEYWORD',
     'BOOLEAN_KEYWORD', 'VOID_KEYWORD', 'FUNCTION_KEYWORD',
     'RETURN_KEYWORD', 'IF_KEYWORD', 'ELIF_KEYWORD', 'ELSE_KEYWORD',
     'FOR_KEYWORD', 'WHILE_KEYWORD', 'IN_KEYWORD', 'STEP_KEYWORD',
     'INF_KEYWORD', 'AND_KEYWORD', 'OR_KEYWORD', 'NOT_KEYWORD',
     'RECORDABLE_KEYWORD', 'SHAPE_KEYWORD', 'NEURON_KEYWORD',
     'STATE_KEYWORD', 'PARAMETERS_KEYWORD', 'INTERNALS_KEYWORD',
     'INITIAL_VALUES_KEYWORD', 'UPDATE_KEYWORD', 'EQUATIONS_KEYWORD',
     'INPUT_KEYWORD', 'OUTPUT_KEYWORD', 'CURRENT_KEYWORD',
     'SPIKE_KEYWORD', 'INHIBITORY_KEYWORD', 'EXCITATORY_KEYWORD',
     'ELLIPSIS', 'LEFT_PAREN', 'RIGHT_PAREN', 'PLUS', 'TILDE',
     'PIPE', 'CARET', 'AMPERSAND', 'LEFT_SQUARE_BRACKET',
     'LEFT_ANGLE_MINUS', 'RIGHT_SQUARE_BRACKET', 'LEFT_LEFT_SQUARE',
     'RIGHT_RIGHT_SQUARE', 'LEFT_LEFT_ANGLE', 'RIGHT_RIGHT_ANGLE',
     'LEFT_ANGLE', 'RIGHT_ANGLE', 'LEFT_ANGLE_EQUALS', 'PLUS_EQUALS',
     'MINUS_EQUALS', 'STAR_EQUALS', 'FORWARD_SLASH_EQUALS',
     'EQUALS_EQUALS', 'EXCLAMATION_EQUALS', 'LEFT_ANGLE_RIGHT_ANGLE',
     'RIGHT_ANGLE_EQUALS', 'COMMA', 'MINUS', 'EQUALS',
     'STAR', 'STAR_STAR', 'FORWARD_SLASH', 'PERCENT', 'QUESTION',
     'COLON', 'SEMICOLON', 'DIFFERENTIAL_ORDER', 'BOOLEAN_LITERAL',
     'STRING_LITERAL', 'NAME', 'UNSIGNED_INTEGER', 'FLOAT',
     'POINT_FLOAT', 'EXPONENT_FLOAT', 'EXPONENT']
    grammarFileName = 'PyNestMLLexer.g4'

    def __init__(self, input=None, output=sys.stdout):
        super(PyNestMLLexer, self).__init__(input, output=output)
        self.checkVersion('4.7.1')
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None