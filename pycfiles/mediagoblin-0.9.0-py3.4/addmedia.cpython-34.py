# uncompyle6 version 3.7.4
# Python bytecode 3.4 (3310)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/mediagoblin/gmg_commands/addmedia.py
# Compiled at: 2016-03-29 15:18:42
# Size of source mod 2**32: 3862 bytes
from __future__ import print_function
import os, six
from mediagoblin.db.models import LocalUser
from mediagoblin.gmg_commands import util as commands_util
from mediagoblin.submit.lib import submit_media, get_upload_file_limits, FileUploadLimit, UserUploadLimit, UserPastUploadLimit
from mediagoblin import mg_globals

def parser_setup(subparser):
    subparser.add_argument('username', help='Name of user this media entry belongs to')
    subparser.add_argument('filename', help='Local file on filesystem')
    subparser.add_argument('-d', '--description', help='Description for this media entry')
    subparser.add_argument('-t', '--title', help='Title for this media entry')
    subparser.add_argument('-l', '--license', help='License this media entry will be released under. Should be a URL.')
    subparser.add_argument('-T', '--tags', help='Comma separated list of tags for this media entry.')
    subparser.add_argument('-s', '--slug', help='Slug for this media entry. Will be autogenerated if unspecified.')
    subparser.add_argument('--celery', action='store_true', help="Don't process eagerly, pass off to celery")


def addmedia(args):
    if not args.celery:
        os.environ['CELERY_ALWAYS_EAGER'] = 'true'
    app = commands_util.setup_app(args)
    user = app.db.LocalUser.query.filter(LocalUser.username == args.username.lower()).first()
    if user is None:
        print("Sorry, no user by username '%s'" % args.username)
        return
    filename = os.path.split(args.filename)[(-1)]
    abs_filename = os.path.abspath(args.filename)
    if not os.path.exists(abs_filename):
        print("Can't find a file with filename '%s'" % args.filename)
        return
    upload_limit, max_file_size = get_upload_file_limits(user)

    def maybe_unicodeify(some_string):
        if some_string is None:
            return
        if six.PY2:
            return six.text_type(some_string, 'utf-8')
        return some_string

    try:
        submit_media(mg_app=app, user=user, submitted_file=open(abs_filename, 'rb'), filename=filename, title=maybe_unicodeify(args.title), description=maybe_unicodeify(args.description), license=maybe_unicodeify(args.license), tags_string=maybe_unicodeify(args.tags) or '', upload_limit=upload_limit, max_file_size=max_file_size)
    except FileUploadLimit:
        print('This file is larger than the upload limits for this site.')
    except UserUploadLimit:
        print('This file will put this user past their upload limits.')
    except UserPastUploadLimit:
        print('This user is already past their upload limits.')