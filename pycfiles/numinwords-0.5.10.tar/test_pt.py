# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/mmonroy/Desktop/data/num2words/tests/test_pt.py
# Compiled at: 2020-04-16 23:25:05
from __future__ import unicode_literals
from decimal import Decimal
from unittest import TestCase
from numinwords import numinwords
from numinwords.lang_PT import Num2Word_PT

class numinwordsPTTest(TestCase):

    def setUp(self):
        super(numinwordsPTTest, self).setUp()
        self.n2w = Num2Word_PT()

    def test_cardinal_integer(self):
        self.assertEqual(numinwords(1, lang=b'pt'), b'um')
        self.assertEqual(numinwords(2, lang=b'pt'), b'dois')
        self.assertEqual(numinwords(3, lang=b'pt'), b'três')
        self.assertEqual(numinwords(4, lang=b'pt'), b'quatro')
        self.assertEqual(numinwords(5, lang=b'pt'), b'cinco')
        self.assertEqual(numinwords(6, lang=b'pt'), b'seis')
        self.assertEqual(numinwords(7, lang=b'pt'), b'sete')
        self.assertEqual(numinwords(8, lang=b'pt'), b'oito')
        self.assertEqual(numinwords(9, lang=b'pt'), b'nove')
        self.assertEqual(numinwords(10, lang=b'pt'), b'dez')
        self.assertEqual(numinwords(11, lang=b'pt'), b'onze')
        self.assertEqual(numinwords(12, lang=b'pt'), b'doze')
        self.assertEqual(numinwords(13, lang=b'pt'), b'treze')
        self.assertEqual(numinwords(14, lang=b'pt'), b'catorze')
        self.assertEqual(numinwords(15, lang=b'pt'), b'quinze')
        self.assertEqual(numinwords(16, lang=b'pt'), b'dezasseis')
        self.assertEqual(numinwords(17, lang=b'pt'), b'dezassete')
        self.assertEqual(numinwords(18, lang=b'pt'), b'dezoito')
        self.assertEqual(numinwords(19, lang=b'pt'), b'dezanove')
        self.assertEqual(numinwords(20, lang=b'pt'), b'vinte')
        self.assertEqual(numinwords(21, lang=b'pt'), b'vinte e um')
        self.assertEqual(numinwords(22, lang=b'pt'), b'vinte e dois')
        self.assertEqual(numinwords(35, lang=b'pt'), b'trinta e cinco')
        self.assertEqual(numinwords(99, lang=b'pt'), b'noventa e nove')
        self.assertEqual(numinwords(100, lang=b'pt'), b'cem')
        self.assertEqual(numinwords(101, lang=b'pt'), b'cento e um')
        self.assertEqual(numinwords(128, lang=b'pt'), b'cento e vinte e oito')
        self.assertEqual(numinwords(713, lang=b'pt'), b'setecentos e treze')
        self.assertEqual(numinwords(1000, lang=b'pt'), b'mil')
        self.assertEqual(numinwords(1001, lang=b'pt'), b'mil e um')
        self.assertEqual(numinwords(1111, lang=b'pt'), b'mil cento e onze')
        self.assertEqual(numinwords(2114, lang=b'pt'), b'dois mil cento e catorze')
        self.assertEqual(numinwords(2200, lang=b'pt'), b'dois mil e duzentos')
        self.assertEqual(numinwords(2230, lang=b'pt'), b'dois mil duzentos e trinta')
        self.assertEqual(numinwords(73400, lang=b'pt'), b'setenta e três mil e quatrocentos')
        self.assertEqual(numinwords(73421, lang=b'pt'), b'setenta e três mil quatrocentos e vinte e um')
        self.assertEqual(numinwords(100000, lang=b'pt'), b'cem mil')
        self.assertEqual(numinwords(250050, lang=b'pt'), b'duzentos e cinquenta mil e cinquenta')
        self.assertEqual(numinwords(6000000, lang=b'pt'), b'seis milhões')
        self.assertEqual(numinwords(100000000, lang=b'pt'), b'cem milhões')
        self.assertEqual(numinwords(19000000000, lang=b'pt'), b'dezanove mil milhões')
        self.assertEqual(numinwords(145000000002, lang=b'pt'), b'cento e quarenta e cinco mil milhões e dois')
        self.assertEqual(numinwords(4635102, lang=b'pt'), b'quatro milhões seiscentos e trinta e cinco mil cento e dois')
        self.assertEqual(numinwords(145254635102, lang=b'pt'), b'cento e quarenta e cinco mil duzentos e cinquenta e quatro milhões seiscentos e trinta e cinco mil cento e dois')
        self.assertEqual(numinwords(1000000000000, lang=b'pt'), b'um bilião')
        self.assertEqual(numinwords(2000000000000, lang=b'pt'), b'dois biliões')
        self.assertEqual(numinwords(1000000000000000, lang=b'pt'), b'mil biliões')
        self.assertEqual(numinwords(2000000000000000, lang=b'pt'), b'dois mil biliões')
        self.assertEqual(numinwords(1000000000000000000, lang=b'pt'), b'um trilião')
        self.assertEqual(numinwords(2000000000000000000, lang=b'pt'), b'dois triliões')

    def test_cardinal_integer_negative(self):
        self.assertEqual(numinwords(-1, lang=b'pt'), b'menos um')
        self.assertEqual(numinwords(-256, lang=b'pt'), b'menos duzentos e cinquenta e seis')
        self.assertEqual(numinwords(-1000, lang=b'pt'), b'menos mil')
        self.assertEqual(numinwords(-1000000, lang=b'pt'), b'menos um milhão')
        self.assertEqual(numinwords(-1234567, lang=b'pt'), b'menos um milhão duzentos e trinta e quatro mil quinhentos e sessenta e sete')

    def test_cardinal_float(self):
        self.assertEqual(numinwords(Decimal(b'1.00'), lang=b'pt'), b'um')
        self.assertEqual(numinwords(Decimal(b'1.01'), lang=b'pt'), b'um vírgula zero um')
        self.assertEqual(numinwords(Decimal(b'1.035'), lang=b'pt'), b'um vírgula zero três cinco')
        self.assertEqual(numinwords(Decimal(b'1.35'), lang=b'pt'), b'um vírgula três cinco')
        self.assertEqual(numinwords(Decimal(b'3.14159'), lang=b'pt'), b'três vírgula um quatro um cinco nove')
        self.assertEqual(numinwords(Decimal(b'101.22'), lang=b'pt'), b'cento e um vírgula dois dois')
        self.assertEqual(numinwords(Decimal(b'2345.75'), lang=b'pt'), b'dois mil trezentos e quarenta e cinco vírgula sete cinco')

    def test_cardinal_float_negative(self):
        self.assertEqual(numinwords(Decimal(b'-2.34'), lang=b'pt'), b'menos dois vírgula três quatro')
        self.assertEqual(numinwords(Decimal(b'-9.99'), lang=b'pt'), b'menos nove vírgula nove nove')
        self.assertEqual(numinwords(Decimal(b'-7.01'), lang=b'pt'), b'menos sete vírgula zero um')
        self.assertEqual(numinwords(Decimal(b'-222.22'), lang=b'pt'), b'menos duzentos e vinte e dois vírgula dois dois')

    def test_ordinal(self):
        self.assertEqual(numinwords(1, lang=b'pt', ordinal=True), b'primeiro')
        self.assertEqual(numinwords(2, lang=b'pt', ordinal=True), b'segundo')
        self.assertEqual(numinwords(3, lang=b'pt', ordinal=True), b'terceiro')
        self.assertEqual(numinwords(4, lang=b'pt', ordinal=True), b'quarto')
        self.assertEqual(numinwords(5, lang=b'pt', ordinal=True), b'quinto')
        self.assertEqual(numinwords(6, lang=b'pt', ordinal=True), b'sexto')
        self.assertEqual(numinwords(7, lang=b'pt', ordinal=True), b'sétimo')
        self.assertEqual(numinwords(8, lang=b'pt', ordinal=True), b'oitavo')
        self.assertEqual(numinwords(9, lang=b'pt', ordinal=True), b'nono')
        self.assertEqual(numinwords(10, lang=b'pt', ordinal=True), b'décimo')
        self.assertEqual(numinwords(11, lang=b'pt', ordinal=True), b'décimo primeiro')
        self.assertEqual(numinwords(12, lang=b'pt', ordinal=True), b'décimo segundo')
        self.assertEqual(numinwords(13, lang=b'pt', ordinal=True), b'décimo terceiro')
        self.assertEqual(numinwords(14, lang=b'pt', ordinal=True), b'décimo quarto')
        self.assertEqual(numinwords(15, lang=b'pt', ordinal=True), b'décimo quinto')
        self.assertEqual(numinwords(16, lang=b'pt', ordinal=True), b'décimo sexto')
        self.assertEqual(numinwords(17, lang=b'pt', ordinal=True), b'décimo sétimo')
        self.assertEqual(numinwords(18, lang=b'pt', ordinal=True), b'décimo oitavo')
        self.assertEqual(numinwords(19, lang=b'pt', ordinal=True), b'décimo nono')
        self.assertEqual(numinwords(20, lang=b'pt', ordinal=True), b'vigésimo')
        self.assertEqual(numinwords(21, lang=b'pt', ordinal=True), b'vigésimo primeiro')
        self.assertEqual(numinwords(22, lang=b'pt', ordinal=True), b'vigésimo segundo')
        self.assertEqual(numinwords(35, lang=b'pt', ordinal=True), b'trigésimo quinto')
        self.assertEqual(numinwords(99, lang=b'pt', ordinal=True), b'nonagésimo nono')
        self.assertEqual(numinwords(100, lang=b'pt', ordinal=True), b'centésimo')
        self.assertEqual(numinwords(101, lang=b'pt', ordinal=True), b'centésimo primeiro')
        self.assertEqual(numinwords(128, lang=b'pt', ordinal=True), b'centésimo vigésimo oitavo')
        self.assertEqual(numinwords(713, lang=b'pt', ordinal=True), b'septigentésimo décimo terceiro')
        self.assertEqual(numinwords(1000, lang=b'pt', ordinal=True), b'milésimo')
        self.assertEqual(numinwords(1001, lang=b'pt', ordinal=True), b'milésimo primeiro')
        self.assertEqual(numinwords(1111, lang=b'pt', ordinal=True), b'milésimo centésimo décimo primeiro')
        self.assertEqual(numinwords(2114, lang=b'pt', ordinal=True), b'segundo milésimo centésimo décimo quarto')
        self.assertEqual(numinwords(73421, lang=b'pt', ordinal=True), b'septuagésimo terceiro milésimo quadrigentésimo vigésimo primeiro')
        self.assertEqual(numinwords(100000, lang=b'pt', ordinal=True), b'centésimo milésimo')
        self.assertEqual(numinwords(250050, lang=b'pt', ordinal=True), b'ducentésimo quinquagésimo milésimo quinquagésimo')
        self.assertEqual(numinwords(6000000, lang=b'pt', ordinal=True), b'sexto milionésimo')
        self.assertEqual(numinwords(19000000000, lang=b'pt', ordinal=True), b'décimo nono milésimo milionésimo')
        self.assertEqual(numinwords(145000000002, lang=b'pt', ordinal=True), b'centésimo quadragésimo quinto milésimo milionésimo segundo')

    def test_currency_integer(self):
        self.assertEqual(self.n2w.to_currency(1.0), b'um euro')
        self.assertEqual(self.n2w.to_currency(2.0), b'dois euros')
        self.assertEqual(self.n2w.to_currency(3.0), b'três euros')
        self.assertEqual(self.n2w.to_currency(4.0), b'quatro euros')
        self.assertEqual(self.n2w.to_currency(5.0), b'cinco euros')
        self.assertEqual(self.n2w.to_currency(6.0), b'seis euros')
        self.assertEqual(self.n2w.to_currency(7.0), b'sete euros')
        self.assertEqual(self.n2w.to_currency(8.0), b'oito euros')
        self.assertEqual(self.n2w.to_currency(9.0), b'nove euros')
        self.assertEqual(self.n2w.to_currency(10.0), b'dez euros')
        self.assertEqual(self.n2w.to_currency(11.0), b'onze euros')
        self.assertEqual(self.n2w.to_currency(12.0), b'doze euros')
        self.assertEqual(self.n2w.to_currency(13.0), b'treze euros')
        self.assertEqual(self.n2w.to_currency(14.0), b'catorze euros')
        self.assertEqual(self.n2w.to_currency(15.0), b'quinze euros')
        self.assertEqual(self.n2w.to_currency(16.0), b'dezasseis euros')
        self.assertEqual(self.n2w.to_currency(17.0), b'dezassete euros')
        self.assertEqual(self.n2w.to_currency(18.0), b'dezoito euros')
        self.assertEqual(self.n2w.to_currency(19.0), b'dezanove euros')
        self.assertEqual(self.n2w.to_currency(20.0), b'vinte euros')
        self.assertEqual(self.n2w.to_currency(21.0), b'vinte e um euros')
        self.assertEqual(self.n2w.to_currency(22.0), b'vinte e dois euros')
        self.assertEqual(self.n2w.to_currency(35.0), b'trinta e cinco euros')
        self.assertEqual(self.n2w.to_currency(99.0), b'noventa e nove euros')
        self.assertEqual(self.n2w.to_currency(100.0), b'cem euros')
        self.assertEqual(self.n2w.to_currency(101.0), b'cento e um euros')
        self.assertEqual(self.n2w.to_currency(128.0), b'cento e vinte e oito euros')
        self.assertEqual(self.n2w.to_currency(713.0), b'setecentos e treze euros')
        self.assertEqual(self.n2w.to_currency(1000.0), b'mil euros')
        self.assertEqual(self.n2w.to_currency(1001.0), b'mil e um euros')
        self.assertEqual(self.n2w.to_currency(1111.0), b'mil cento e onze euros')
        self.assertEqual(self.n2w.to_currency(2114.0), b'dois mil cento e catorze euros')
        self.assertEqual(self.n2w.to_currency(73421.0), b'setenta e três mil quatrocentos e vinte e um euros')
        self.assertEqual(self.n2w.to_currency(100000.0), b'cem mil euros')
        self.assertEqual(self.n2w.to_currency(250050.0), b'duzentos e cinquenta mil e cinquenta euros')
        self.assertEqual(self.n2w.to_currency(6000000.0), b'seis milhões de euros')
        self.assertEqual(self.n2w.to_currency(19000000000.0), b'dezanove mil milhões de euros')
        self.assertEqual(self.n2w.to_currency(145000000002.0), b'cento e quarenta e cinco mil milhões e dois euros')
        self.assertEqual(self.n2w.to_currency(1.0, currency=b'USD'), b'um dólar')
        self.assertEqual(self.n2w.to_currency(1.5, currency=b'USD'), b'um dólar e cinquenta cêntimos')
        with self.assertRaises(NotImplementedError):
            self.n2w.to_currency(1.0, currency=b'CHF')

    def test_currency_integer_negative(self):
        self.assertEqual(self.n2w.to_currency(-1.0), b'menos um euro')
        self.assertEqual(self.n2w.to_currency(-256.0), b'menos duzentos e cinquenta e seis euros')
        self.assertEqual(self.n2w.to_currency(-1000.0), b'menos mil euros')
        self.assertEqual(self.n2w.to_currency(-1000000.0), b'menos um milhão de euros')
        self.assertEqual(self.n2w.to_currency(-1234567.0), b'menos um milhão duzentos e trinta e quatro mil quinhentos e sessenta e sete euros')

    def test_currency_float(self):
        self.assertEqual(self.n2w.to_currency(Decimal(b'1.00')), b'um euro')
        self.assertEqual(self.n2w.to_currency(Decimal(b'1.01')), b'um euro e um cêntimo')
        self.assertEqual(self.n2w.to_currency(Decimal(b'1.03')), b'um euro e três cêntimos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'1.35')), b'um euro e trinta e cinco cêntimos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'3.14')), b'três euros e catorze cêntimos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'101.22')), b'cento e um euros e vinte e dois cêntimos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'2345.75')), b'dois mil trezentos e quarenta e cinco euros e setenta e cinco cêntimos')

    def test_currency_float_negative(self):
        self.assertEqual(self.n2w.to_currency(Decimal(b'-2.34')), b'menos dois euros e trinta e quatro cêntimos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'-9.99')), b'menos nove euros e noventa e nove cêntimos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'-7.01')), b'menos sete euros e um cêntimo')
        self.assertEqual(self.n2w.to_currency(Decimal(b'-222.22')), b'menos duzentos e vinte e dois euros e vinte e dois cêntimos')

    def test_year(self):
        self.assertEqual(self.n2w.to_year(1001), b'mil e um')
        self.assertEqual(self.n2w.to_year(1789), b'mil setecentos e oitenta e nove')
        self.assertEqual(self.n2w.to_year(1942), b'mil novecentos e quarenta e dois')
        self.assertEqual(self.n2w.to_year(1984), b'mil novecentos e oitenta e quatro')
        self.assertEqual(self.n2w.to_year(2000), b'dois mil')
        self.assertEqual(self.n2w.to_year(2001), b'dois mil e um')
        self.assertEqual(self.n2w.to_year(2016), b'dois mil e dezasseis')

    def test_year_negative(self):
        self.assertEqual(self.n2w.to_year(-30), b'trinta antes de Cristo')
        self.assertEqual(self.n2w.to_year(-744), b'setecentos e quarenta e quatro antes de Cristo')
        self.assertEqual(self.n2w.to_year(-10000), b'dez mil antes de Cristo')

    def test_to_ordinal_num(self):
        self.assertEqual(self.n2w.to_ordinal_num(1), b'1º')
        self.assertEqual(self.n2w.to_ordinal_num(100), b'100º')