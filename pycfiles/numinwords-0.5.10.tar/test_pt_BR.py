# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/mmonroy/Desktop/data/num2words/tests/test_pt_BR.py
# Compiled at: 2020-04-17 01:15:05
from __future__ import unicode_literals
from decimal import Decimal
from unittest import TestCase
from numinwords import numinwords
from numinwords.lang_PT_BR import Num2Word_PT_BR

class numinwordsPTBRTest(TestCase):

    def setUp(self):
        super(numinwordsPTBRTest, self).setUp()
        self.n2w = Num2Word_PT_BR()

    def test_cardinal_integer(self):
        self.assertEqual(numinwords(1, lang=b'pt_BR'), b'um')
        self.assertEqual(numinwords(2, lang=b'pt_BR'), b'dois')
        self.assertEqual(numinwords(3, lang=b'pt_BR'), b'três')
        self.assertEqual(numinwords(4, lang=b'pt_BR'), b'quatro')
        self.assertEqual(numinwords(5, lang=b'pt_BR'), b'cinco')
        self.assertEqual(numinwords(6, lang=b'pt_BR'), b'seis')
        self.assertEqual(numinwords(7, lang=b'pt_BR'), b'sete')
        self.assertEqual(numinwords(8, lang=b'pt_BR'), b'oito')
        self.assertEqual(numinwords(9, lang=b'pt_BR'), b'nove')
        self.assertEqual(numinwords(10, lang=b'pt_BR'), b'dez')
        self.assertEqual(numinwords(11, lang=b'pt_BR'), b'onze')
        self.assertEqual(numinwords(12, lang=b'pt_BR'), b'doze')
        self.assertEqual(numinwords(13, lang=b'pt_BR'), b'treze')
        self.assertEqual(numinwords(14, lang=b'pt_BR'), b'catorze')
        self.assertEqual(numinwords(15, lang=b'pt_BR'), b'quinze')
        self.assertEqual(numinwords(16, lang=b'pt_BR'), b'dezesseis')
        self.assertEqual(numinwords(17, lang=b'pt_BR'), b'dezessete')
        self.assertEqual(numinwords(18, lang=b'pt_BR'), b'dezoito')
        self.assertEqual(numinwords(19, lang=b'pt_BR'), b'dezenove')
        self.assertEqual(numinwords(20, lang=b'pt_BR'), b'vinte')
        self.assertEqual(numinwords(21, lang=b'pt_BR'), b'vinte e um')
        self.assertEqual(numinwords(22, lang=b'pt_BR'), b'vinte e dois')
        self.assertEqual(numinwords(35, lang=b'pt_BR'), b'trinta e cinco')
        self.assertEqual(numinwords(99, lang=b'pt_BR'), b'noventa e nove')
        self.assertEqual(numinwords(100, lang=b'pt_BR'), b'cem')
        self.assertEqual(numinwords(101, lang=b'pt_BR'), b'cento e um')
        self.assertEqual(numinwords(128, lang=b'pt_BR'), b'cento e vinte e oito')
        self.assertEqual(numinwords(713, lang=b'pt_BR'), b'setecentos e treze')
        self.assertEqual(numinwords(1000, lang=b'pt_BR'), b'mil')
        self.assertEqual(numinwords(1001, lang=b'pt_BR'), b'mil e um')
        self.assertEqual(numinwords(1111, lang=b'pt_BR'), b'mil, cento e onze')
        self.assertEqual(numinwords(2114, lang=b'pt_BR'), b'dois mil, cento e catorze')
        self.assertEqual(numinwords(73421, lang=b'pt_BR'), b'setenta e três mil, quatrocentos e vinte e um')
        self.assertEqual(numinwords(100000, lang=b'pt_BR'), b'cem mil')
        self.assertEqual(numinwords(250050, lang=b'pt_BR'), b'duzentos e cinquenta mil e cinquenta')
        self.assertEqual(numinwords(6000000, lang=b'pt_BR'), b'seis milhões')
        self.assertEqual(numinwords(19000000000, lang=b'pt_BR'), b'dezenove bilhões')
        self.assertEqual(numinwords(145000000002, lang=b'pt_BR'), b'cento e quarenta e cinco bilhões e dois')

    def test_cardinal_integer_negative(self):
        self.assertEqual(numinwords(-1, lang=b'pt_BR'), b'menos um')
        self.assertEqual(numinwords(-256, lang=b'pt_BR'), b'menos duzentos e cinquenta e seis')
        self.assertEqual(numinwords(-1000, lang=b'pt_BR'), b'menos mil')
        self.assertEqual(numinwords(-1000000, lang=b'pt_BR'), b'menos um milhão')
        self.assertEqual(numinwords(-1234567, lang=b'pt_BR'), b'menos um milhão, duzentos e trinta e quatro mil, quinhentos e sessenta e sete')

    def test_cardinal_float(self):
        self.assertEqual(numinwords(Decimal(b'1.00'), lang=b'pt_BR'), b'um')
        self.assertEqual(numinwords(Decimal(b'1.01'), lang=b'pt_BR'), b'um vírgula zero um')
        self.assertEqual(numinwords(Decimal(b'1.035'), lang=b'pt_BR'), b'um vírgula zero três cinco')
        self.assertEqual(numinwords(Decimal(b'1.35'), lang=b'pt_BR'), b'um vírgula três cinco')
        self.assertEqual(numinwords(Decimal(b'3.14159'), lang=b'pt_BR'), b'três vírgula um quatro um cinco nove')
        self.assertEqual(numinwords(Decimal(b'101.22'), lang=b'pt_BR'), b'cento e um vírgula dois dois')
        self.assertEqual(numinwords(Decimal(b'2345.75'), lang=b'pt_BR'), b'dois mil, trezentos e quarenta e cinco vírgula sete cinco')

    def test_cardinal_float_negative(self):
        self.assertEqual(numinwords(Decimal(b'-2.34'), lang=b'pt_BR'), b'menos dois vírgula três quatro')
        self.assertEqual(numinwords(Decimal(b'-9.99'), lang=b'pt_BR'), b'menos nove vírgula nove nove')
        self.assertEqual(numinwords(Decimal(b'-7.01'), lang=b'pt_BR'), b'menos sete vírgula zero um')
        self.assertEqual(numinwords(Decimal(b'-222.22'), lang=b'pt_BR'), b'menos duzentos e vinte e dois vírgula dois dois')

    def test_ordinal(self):
        self.assertEqual(numinwords(1, lang=b'pt_BR', ordinal=True), b'primeiro')
        self.assertEqual(numinwords(2, lang=b'pt_BR', ordinal=True), b'segundo')
        self.assertEqual(numinwords(3, lang=b'pt_BR', ordinal=True), b'terceiro')
        self.assertEqual(numinwords(4, lang=b'pt_BR', ordinal=True), b'quarto')
        self.assertEqual(numinwords(5, lang=b'pt_BR', ordinal=True), b'quinto')
        self.assertEqual(numinwords(6, lang=b'pt_BR', ordinal=True), b'sexto')
        self.assertEqual(numinwords(7, lang=b'pt_BR', ordinal=True), b'sétimo')
        self.assertEqual(numinwords(8, lang=b'pt_BR', ordinal=True), b'oitavo')
        self.assertEqual(numinwords(9, lang=b'pt_BR', ordinal=True), b'nono')
        self.assertEqual(numinwords(10, lang=b'pt_BR', ordinal=True), b'décimo')
        self.assertEqual(numinwords(11, lang=b'pt_BR', ordinal=True), b'décimo primeiro')
        self.assertEqual(numinwords(12, lang=b'pt_BR', ordinal=True), b'décimo segundo')
        self.assertEqual(numinwords(13, lang=b'pt_BR', ordinal=True), b'décimo terceiro')
        self.assertEqual(numinwords(14, lang=b'pt_BR', ordinal=True), b'décimo quarto')
        self.assertEqual(numinwords(15, lang=b'pt_BR', ordinal=True), b'décimo quinto')
        self.assertEqual(numinwords(16, lang=b'pt_BR', ordinal=True), b'décimo sexto')
        self.assertEqual(numinwords(17, lang=b'pt_BR', ordinal=True), b'décimo sétimo')
        self.assertEqual(numinwords(18, lang=b'pt_BR', ordinal=True), b'décimo oitavo')
        self.assertEqual(numinwords(19, lang=b'pt_BR', ordinal=True), b'décimo nono')
        self.assertEqual(numinwords(20, lang=b'pt_BR', ordinal=True), b'vigésimo')
        self.assertEqual(numinwords(21, lang=b'pt_BR', ordinal=True), b'vigésimo primeiro')
        self.assertEqual(numinwords(22, lang=b'pt_BR', ordinal=True), b'vigésimo segundo')
        self.assertEqual(numinwords(35, lang=b'pt_BR', ordinal=True), b'trigésimo quinto')
        self.assertEqual(numinwords(99, lang=b'pt_BR', ordinal=True), b'nonagésimo nono')
        self.assertEqual(numinwords(100, lang=b'pt_BR', ordinal=True), b'centésimo')
        self.assertEqual(numinwords(101, lang=b'pt_BR', ordinal=True), b'centésimo primeiro')
        self.assertEqual(numinwords(128, lang=b'pt_BR', ordinal=True), b'centésimo vigésimo oitavo')
        self.assertEqual(numinwords(713, lang=b'pt_BR', ordinal=True), b'septigentésimo décimo terceiro')
        self.assertEqual(numinwords(1000, lang=b'pt_BR', ordinal=True), b'milésimo')
        self.assertEqual(numinwords(1001, lang=b'pt_BR', ordinal=True), b'milésimo primeiro')
        self.assertEqual(numinwords(1111, lang=b'pt_BR', ordinal=True), b'milésimo centésimo décimo primeiro')
        self.assertEqual(numinwords(2114, lang=b'pt_BR', ordinal=True), b'segundo milésimo centésimo décimo quarto')
        self.assertEqual(numinwords(73421, lang=b'pt_BR', ordinal=True), b'septuagésimo terceiro milésimo quadrigentésimo vigésimo primeiro')
        self.assertEqual(numinwords(100000, lang=b'pt_BR', ordinal=True), b'centésimo milésimo')
        self.assertEqual(numinwords(250050, lang=b'pt_BR', ordinal=True), b'ducentésimo quinquagésimo milésimo quinquagésimo')
        self.assertEqual(numinwords(6000000, lang=b'pt_BR', ordinal=True), b'sexto milionésimo')
        self.assertEqual(numinwords(19000000000, lang=b'pt_BR', ordinal=True), b'décimo nono bilionésimo')
        self.assertEqual(numinwords(145000000002, lang=b'pt_BR', ordinal=True), b'centésimo quadragésimo quinto bilionésimo segundo')

    def test_currency_integer(self):
        self.assertEqual(self.n2w.to_currency(1), b'um real')
        self.assertEqual(self.n2w.to_currency(2), b'dois reais')
        self.assertEqual(self.n2w.to_currency(3), b'três reais')
        self.assertEqual(self.n2w.to_currency(4), b'quatro reais')
        self.assertEqual(self.n2w.to_currency(5), b'cinco reais')
        self.assertEqual(self.n2w.to_currency(6), b'seis reais')
        self.assertEqual(self.n2w.to_currency(7), b'sete reais')
        self.assertEqual(self.n2w.to_currency(8), b'oito reais')
        self.assertEqual(self.n2w.to_currency(9), b'nove reais')
        self.assertEqual(self.n2w.to_currency(10), b'dez reais')
        self.assertEqual(self.n2w.to_currency(11), b'onze reais')
        self.assertEqual(self.n2w.to_currency(12), b'doze reais')
        self.assertEqual(self.n2w.to_currency(13), b'treze reais')
        self.assertEqual(self.n2w.to_currency(14), b'catorze reais')
        self.assertEqual(self.n2w.to_currency(15), b'quinze reais')
        self.assertEqual(self.n2w.to_currency(16), b'dezesseis reais')
        self.assertEqual(self.n2w.to_currency(17), b'dezessete reais')
        self.assertEqual(self.n2w.to_currency(18), b'dezoito reais')
        self.assertEqual(self.n2w.to_currency(19), b'dezenove reais')
        self.assertEqual(self.n2w.to_currency(20), b'vinte reais')
        self.assertEqual(self.n2w.to_currency(21), b'vinte e um reais')
        self.assertEqual(self.n2w.to_currency(22), b'vinte e dois reais')
        self.assertEqual(self.n2w.to_currency(35), b'trinta e cinco reais')
        self.assertEqual(self.n2w.to_currency(99), b'noventa e nove reais')
        self.assertEqual(self.n2w.to_currency(100), b'cem reais')
        self.assertEqual(self.n2w.to_currency(101), b'cento e um reais')
        self.assertEqual(self.n2w.to_currency(128), b'cento e vinte e oito reais')
        self.assertEqual(self.n2w.to_currency(713), b'setecentos e treze reais')
        self.assertEqual(self.n2w.to_currency(1000), b'mil reais')
        self.assertEqual(self.n2w.to_currency(1001), b'mil e um reais')
        self.assertEqual(self.n2w.to_currency(1111), b'mil, cento e onze reais')
        self.assertEqual(self.n2w.to_currency(2114), b'dois mil, cento e catorze reais')
        self.assertEqual(self.n2w.to_currency(73421), b'setenta e três mil, quatrocentos e vinte e um reais')
        self.assertEqual(self.n2w.to_currency(100000), b'cem mil reais')
        self.assertEqual(self.n2w.to_currency(250050), b'duzentos e cinquenta mil e cinquenta reais')
        self.assertEqual(self.n2w.to_currency(6000000), b'seis milhões de reais')
        self.assertEqual(self.n2w.to_currency(19000000000), b'dezenove bilhões de reais')
        self.assertEqual(self.n2w.to_currency(145000000002), b'cento e quarenta e cinco bilhões e dois reais')

    def test_currency_integer_negative(self):
        self.assertEqual(self.n2w.to_currency(-1), b'menos um real')
        self.assertEqual(self.n2w.to_currency(-256), b'menos duzentos e cinquenta e seis reais')
        self.assertEqual(self.n2w.to_currency(-1000), b'menos mil reais')
        self.assertEqual(self.n2w.to_currency(-1000000), b'menos um milhão de reais')
        self.assertEqual(self.n2w.to_currency(-1234567), b'menos um milhão, duzentos e trinta e quatro mil, quinhentos e sessenta e sete reais')

    def test_currency_float(self):
        self.assertEqual(self.n2w.to_currency(Decimal(b'1.00')), b'um real')
        self.assertEqual(self.n2w.to_currency(Decimal(b'1.01')), b'um real e um centavo')
        self.assertEqual(self.n2w.to_currency(Decimal(b'1.03')), b'um real e três centavos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'1.35')), b'um real e trinta e cinco centavos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'3.14')), b'três reais e catorze centavos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'101.22')), b'cento e um reais e vinte e dois centavos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'2345.75')), b'dois mil, trezentos e quarenta e cinco reais e setenta e cinco centavos')

    def test_currency_float_negative(self):
        self.assertEqual(self.n2w.to_currency(Decimal(b'-2.34')), b'menos dois reais e trinta e quatro centavos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'-9.99')), b'menos nove reais e noventa e nove centavos')
        self.assertEqual(self.n2w.to_currency(Decimal(b'-7.01')), b'menos sete reais e um centavo')
        self.assertEqual(self.n2w.to_currency(Decimal(b'-222.22')), b'menos duzentos e vinte e dois reais e vinte e dois centavos')

    def test_year(self):
        self.assertEqual(self.n2w.to_year(1001), b'mil e um')
        self.assertEqual(self.n2w.to_year(1789), b'mil, setecentos e oitenta e nove')
        self.assertEqual(self.n2w.to_year(1942), b'mil, novecentos e quarenta e dois')
        self.assertEqual(self.n2w.to_year(1984), b'mil, novecentos e oitenta e quatro')
        self.assertEqual(self.n2w.to_year(2000), b'dois mil')
        self.assertEqual(self.n2w.to_year(2001), b'dois mil e um')
        self.assertEqual(self.n2w.to_year(2016), b'dois mil e dezesseis')

    def test_year_negative(self):
        self.assertEqual(self.n2w.to_year(-30), b'trinta antes de Cristo')
        self.assertEqual(self.n2w.to_year(-744), b'setecentos e quarenta e quatro antes de Cristo')
        self.assertEqual(self.n2w.to_year(-10000), b'dez mil antes de Cristo')