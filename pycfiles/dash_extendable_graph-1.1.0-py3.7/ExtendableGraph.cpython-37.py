# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build\bdist.win-amd64\egg\dash_extendable_graph\ExtendableGraph.py
# Compiled at: 2019-11-24 16:25:14
# Size of source mod 2**32: 11744 bytes
from dash.development.base_component import Component, _explicitize_args

class ExtendableGraph(Component):
    __doc__ = 'An ExtendableGraph component.\nExtendableGraph can be used to render any plotly.js-powered data vis.\n\nYou can define callbacks based on user interaction with ExtendableGraphs such\nas hovering, clicking or selecting\n\nKeyword arguments:\n- id (string; optional): The ID of this component, used to identify dash components\nin callbacks. The ID needs to be unique across all of the\ncomponents in an app.\n- clickData (dict; optional): Data from latest click event. Read-only.\n- clickAnnotationData (dict; optional): Data from latest click annotation event. Read-only.\n- hoverData (dict; optional): Data from latest hover event. Read-only.\n- clear_on_unhover (boolean; default False): If True, `clear_on_unhover` will clear the `hoverData` property\nwhen the user "unhovers" from a point.\nIf False, then the `hoverData` property will be equal to the\ndata from the last point that was hovered over.\n- selectedData (dict; optional): Data from latest select event. Read-only.\n- relayoutData (dict; optional): Data from latest relayout event which occurs\nwhen the user zooms or pans on the plot or other\nlayout-level edits. Has the form `{<attr string>: <value>}`\ndescribing the changes made. Read-only.\n- extendData (list | dict; optional): Data that should be appended to existing traces. Has the form\n`[updateData, traceIndices, maxPoints]`, where `updateData` is an array\ncontaining data objects to extend, `traceIndices` (optional) is an array\nof trace indices that should be extended, and `maxPoints` (optional) is\neither an integer defining the maximum number of points allowed or an\nobject with key:value pairs matching `updateData`\nReference the Plotly.extendTraces API for full usage:\nhttps://plot.ly/javascript/plotlyjs-function-reference/#plotlyextendtraces\n- restyleData (list; optional): Data from latest restyle event which occurs\nwhen the user toggles a legend item, changes\nparcoords selections, or other trace-level edits.\nHas the form `[edits, indices]`, where `edits` is an object\n`{<attr string>: <value>}` describing the changes made,\nand `indices` is an array of trace indices that were edited.\nRead-only.\n- figure (dict; default {data: [], layout: {}, frames: []}): Plotly `figure` object. See schema:\nhttps://plot.ly/javascript/reference\n\n`config` is set separately by the `config` property. figure has the following type: dict containing keys \'data\', \'layout\', \'frames\'.\nThose keys have the following types:\n  - data (list of dicts; optional)\n  - layout (dict; optional)\n  - frames (list of dicts; optional)\n- style (dict; optional): Generic style overrides on the plot div\n- className (string; optional): className of the parent div\n- animate (boolean; default False): Beta: If true, animate between updates using\nplotly.js\'s `animate` function\n- animation_options (dict; default {\n    frame: {\n        redraw: false,\n    },\n    transition: {\n        duration: 750,\n        ease: \'cubic-in-out\',\n    },\n}): Beta: Object containing animation settings.\nOnly applies if `animate` is `true`\n- config (dict; optional): Plotly.js config options.\nSee https://plot.ly/javascript/configuration-options/\nfor more info. config has the following type: dict containing keys \'staticPlot\', \'plotlyServerURL\', \'editable\', \'edits\', \'autosizable\', \'responsive\', \'queueLength\', \'fillFrame\', \'frameMargins\', \'scrollZoom\', \'doubleClick\', \'showTips\', \'showAxisDragHandles\', \'showAxisRangeEntryBoxes\', \'showLink\', \'sendData\', \'linkText\', \'displayModeBar\', \'showSendToCloud\', \'modeBarButtonsToRemove\', \'modeBarButtonsToAdd\', \'modeBarButtons\', \'toImageButtonOptions\', \'displaylogo\', \'watermark\', \'plotGlPixelRatio\', \'topojsonURL\', \'mapboxAccessToken\', \'locale\', \'locales\'.\nThose keys have the following types:\n  - staticPlot (boolean; optional): No interactivity, for export or image generation\n  - plotlyServerURL (string; optional): Base URL for a Plotly cloud instance, if `showSendToCloud` is enabled\n  - editable (boolean; optional): We can edit titles, move annotations, etc - sets all pieces of `edits`\nunless a separate `edits` config item overrides individual parts\n  - edits (dict; optional): A set of editable properties. edits has the following type: dict containing keys \'annotationPosition\', \'annotationTail\', \'annotationText\', \'axisTitleText\', \'colorbarPosition\', \'colorbarTitleText\', \'legendPosition\', \'legendText\', \'shapePosition\', \'titleText\'.\nThose keys have the following types:\n  - annotationPosition (boolean; optional): The main anchor of the annotation, which is the\ntext (if no arrow) or the arrow (which drags the whole thing leaving\nthe arrow length & direction unchanged)\n  - annotationTail (boolean; optional): Just for annotations with arrows, change the length and direction of the arrow\n  - annotationText (boolean; optional)\n  - axisTitleText (boolean; optional)\n  - colorbarPosition (boolean; optional)\n  - colorbarTitleText (boolean; optional)\n  - legendPosition (boolean; optional)\n  - legendText (boolean; optional): Edit the trace name fields from the legend\n  - shapePosition (boolean; optional)\n  - titleText (boolean; optional): The global `layout.title`\n  - autosizable (boolean; optional): DO autosize once regardless of layout.autosize\n(use default width or height values otherwise)\n  - responsive (boolean; optional): Whether to change layout size when the window size changes\n  - queueLength (number; optional): Set the length of the undo/redo queue\n  - fillFrame (boolean; optional): If we DO autosize, do we fill the container or the screen?\n  - frameMargins (number; optional): If we DO autosize, set the frame margins in percents of plot size\n  - scrollZoom (boolean; optional): Mousewheel or two-finger scroll zooms the plot\n  - doubleClick (a value equal to: false, \'reset\', \'autosize\', \'reset+autosize\'; optional): Double click interaction (false, \'reset\', \'autosize\' or \'reset+autosize\')\n  - showTips (boolean; optional): New users see some hints about interactivity\n  - showAxisDragHandles (boolean; optional): Enable axis pan/zoom drag handles\n  - showAxisRangeEntryBoxes (boolean; optional): Enable direct range entry at the pan/zoom drag points\n(drag handles must be enabled above)\n  - showLink (boolean; optional): Link to open this plot in plotly\n  - sendData (boolean; optional): If we show a link, does it contain data or just link to a plotly file?\n  - linkText (string; optional): Text appearing in the sendData link\n  - displayModeBar (a value equal to: true, false, \'hover\'; optional): Display the mode bar (true, false, or \'hover\')\n  - showSendToCloud (boolean; optional): Should we include a modebar button to send this data to a\nPlotly Cloud instance, linked by `plotlyServerURL`.\nBy default this is false.\n  - modeBarButtonsToRemove (list; optional): Remove mode bar button by name.\nAll modebar button names at https://github.com/plotly/plotly.js/blob/master/src/components/modebar/buttons.js\nCommon names include:\nsendDataToCloud;\n(2D) zoom2d, pan2d, select2d, lasso2d, zoomIn2d, zoomOut2d, autoScale2d, resetScale2d;\n(Cartesian) hoverClosestCartesian, hoverCompareCartesian;\n(3D) zoom3d, pan3d, orbitRotation, tableRotation, handleDrag3d, resetCameraDefault3d, resetCameraLastSave3d, hoverClosest3d;\n(Geo) zoomInGeo, zoomOutGeo, resetGeo, hoverClosestGeo;\nhoverClosestGl2d, hoverClosestPie, toggleHover, resetViews.\n  - modeBarButtonsToAdd (list; optional): Add mode bar button using config objects\n  - modeBarButtons (boolean | number | string | dict | list; optional): Fully custom mode bar buttons as nested array,\nwhere the outer arrays represents button groups, and\nthe inner arrays have buttons config objects or names of default buttons\n  - toImageButtonOptions (dict; optional): Modifications to how the toImage modebar button works. toImageButtonOptions has the following type: dict containing keys \'format\', \'filename\', \'width\', \'height\', \'scale\'.\nThose keys have the following types:\n  - format (a value equal to: \'jpeg\', \'png\', \'webp\', \'svg\'; optional): The file format to create\n  - filename (string; optional): The name given to the downloaded file\n  - width (number; optional): Width of the downloaded file, in px\n  - height (number; optional): Height of the downloaded file, in px\n  - scale (number; optional): Extra resolution to give the file after\nrendering it with the given width and height\n  - displaylogo (boolean; optional): Add the plotly logo on the end of the mode bar\n  - watermark (boolean; optional): Add the plotly logo even with no modebar\n  - plotGlPixelRatio (number; optional): Increase the pixel ratio for Gl plot images\n  - topojsonURL (string; optional): URL to topojson files used in geo charts\n  - mapboxAccessToken (boolean | number | string | dict | list; optional): Mapbox access token (required to plot mapbox trace types)\nIf using an Mapbox Atlas server, set this option to \'\',\nso that plotly.js won\'t attempt to authenticate to the public Mapbox server.\n  - locale (string; optional): The locale to use. Locales may be provided with the plot\n(`locales` below) or by loading them on the page, see:\nhttps://github.com/plotly/plotly.js/blob/master/dist/README.md#to-include-localization\n  - locales (dict; optional): Localization definitions, if you choose to provide them with the\nplot rather than registering them globally.\n- loading_state (dict; optional): Object that holds the loading state object coming from dash-renderer. loading_state has the following type: dict containing keys \'is_loading\', \'prop_name\', \'component_name\'.\nThose keys have the following types:\n  - is_loading (boolean; optional): Determines if the component is loading or not\n  - prop_name (string; optional): Holds which property is loading\n  - component_name (string; optional): Holds the name of the component that is loading'

    @_explicitize_args
    def __init__(self, id=Component.UNDEFINED, clickData=Component.UNDEFINED, clickAnnotationData=Component.UNDEFINED, hoverData=Component.UNDEFINED, clear_on_unhover=Component.UNDEFINED, selectedData=Component.UNDEFINED, relayoutData=Component.UNDEFINED, extendData=Component.UNDEFINED, restyleData=Component.UNDEFINED, figure=Component.UNDEFINED, style=Component.UNDEFINED, className=Component.UNDEFINED, animate=Component.UNDEFINED, animation_options=Component.UNDEFINED, config=Component.UNDEFINED, loading_state=Component.UNDEFINED, **kwargs):
        self._prop_names = ['id', 'clickData', 'clickAnnotationData', 'hoverData', 'clear_on_unhover', 'selectedData', 'relayoutData', 'extendData', 'restyleData', 'figure', 'style', 'className', 'animate', 'animation_options', 'config', 'loading_state']
        self._type = 'ExtendableGraph'
        self._namespace = 'dash_extendable_graph'
        self._valid_wildcard_attributes = []
        self.available_properties = ['id', 'clickData', 'clickAnnotationData', 'hoverData', 'clear_on_unhover', 'selectedData', 'relayoutData', 'extendData', 'restyleData', 'figure', 'style', 'className', 'animate', 'animation_options', 'config', 'loading_state']
        self.available_wildcard_properties = []
        _explicit_args = kwargs.pop('_explicit_args')
        _locals = locals()
        _locals.update(kwargs)
        args = {k:_locals[k] for k in _explicit_args if k != 'children'}
        for k in ():
            if k not in args:
                raise TypeError('Required argument `' + k + '` was not specified.')

        (super(ExtendableGraph, self).__init__)(**args)