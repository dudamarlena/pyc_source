# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3351)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/wodby/api/domain_api.py
# Compiled at: 2020-04-12 05:03:52
# Size of source mod 2**32: 8755 bytes
"""
    Wodby API Client

    Wodby Developer Documentation https://wodby.com/docs/dev  # noqa: E501

    OpenAPI spec version: 3.0.13
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import
import re, six
from wodby.api_client import ApiClient

class DomainApi(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Do not edit the class manually.\n    Ref: https://github.com/swagger-api/swagger-codegen\n    '

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_domain(self, id, **kwargs):
        """get_domain  # noqa: E501

        Retrieve domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domain(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Domain ID (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_domain_with_http_info(id, **kwargs)
        else:
            data = self.get_domain_with_http_info(id, **kwargs)
            return data

    def get_domain_with_http_info(self, id, **kwargs):
        """get_domain  # noqa: E501

        Retrieve domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domain_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Domain ID (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'id']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_domain" % key)
            params[key] = val

        del params['kwargs']
        if 'id' not in params or params['id'] is None:
            raise ValueError('Missing the required parameter `id` when calling `get_domain`')
        collection_formats = {}
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = [
         'ApiKeyAuth']
        return self.api_client.call_api('/domains/{id}', 'GET', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='Domain', auth_settings=auth_settings, async_req=params.get('async_req'), _return_http_data_only=params.get('_return_http_data_only'), _preload_content=params.get('_preload_content', True), _request_timeout=params.get('_request_timeout'), collection_formats=collection_formats)

    def get_domains(self, **kwargs):
        """get_domains  # noqa: E501

        Retrieve domains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Organization ID
        :param str instance_id: Instance ID
        :param str server_id: Server ID
        :param str status: Domain status
        :param str type: Domain type
        :param str name: Domain name
        :return: list[Domain]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_domains_with_http_info(**kwargs)
        else:
            data = self.get_domains_with_http_info(**kwargs)
            return data

    def get_domains_with_http_info(self, **kwargs):
        """get_domains  # noqa: E501

        Retrieve domains  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: Organization ID
        :param str instance_id: Instance ID
        :param str server_id: Server ID
        :param str status: Domain status
        :param str type: Domain type
        :param str name: Domain name
        :return: list[Domain]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        all_params = [
         'org_id', 'instance_id', 'server_id', 'status', 'type', 'name']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_domains" % key)
            params[key] = val

        del params['kwargs']
        collection_formats = {}
        path_params = {}
        query_params = []
        if 'org_id' in params:
            query_params.append(('org_id', params['org_id']))
        if 'instance_id' in params:
            query_params.append(('instance_id', params['instance_id']))
        if 'server_id' in params:
            query_params.append(('server_id', params['server_id']))
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'name' in params:
            query_params.append(('name', params['name']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = [
         'ApiKeyAuth']
        return self.api_client.call_api('/domains', 'GET', path_params, query_params, header_params, body=body_params, post_params=form_params, files=local_var_files, response_type='list[Domain]', auth_settings=auth_settings, async_req=params.get('async_req'), _return_http_data_only=params.get('_return_http_data_only'), _preload_content=params.get('_preload_content', True), _request_timeout=params.get('_request_timeout'), collection_formats=collection_formats)