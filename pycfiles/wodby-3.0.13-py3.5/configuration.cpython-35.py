# uncompyle6 version 3.7.4
# Python bytecode 3.5 (3351)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/wodby/configuration.py
# Compiled at: 2020-04-12 05:03:52
# Size of source mod 2**32: 7946 bytes
"""
    Wodby API Client

    Wodby Developer Documentation https://wodby.com/docs/dev  # noqa: E501

    OpenAPI spec version: 3.0.13
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import
import copy, logging, multiprocessing, sys, urllib3, six
from six.moves import http_client as httplib

class Configuration(object):
    __doc__ = 'NOTE: This class is auto generated by the swagger code generator program.\n\n    Ref: https://github.com/swagger-api/swagger-codegen\n    Do not edit the class manually.\n    '
    _default = None

    def __init__(self):
        """Constructor"""
        if self._default:
            for key in self._default.__dict__.keys():
                self.__dict__[key] = copy.copy(self._default.__dict__[key])

            return
        self.host = 'https://api.wodby.com/api/v3'
        self.temp_folder_path = None
        self.api_key = {}
        self.api_key_prefix = {}
        self.username = ''
        self.password = ''
        self.logger = {}
        self.logger['package_logger'] = logging.getLogger('wodby')
        self.logger['urllib3_logger'] = logging.getLogger('urllib3')
        self.logger_format = '%(asctime)s %(levelname)s %(message)s'
        self.logger_stream_handler = None
        self.logger_file_handler = None
        self.logger_file = None
        self.debug = False
        self.verify_ssl = True
        self.ssl_ca_cert = None
        self.cert_file = None
        self.key_file = None
        self.assert_hostname = None
        self.connection_pool_maxsize = multiprocessing.cpu_count() * 5
        self.proxy = None
        self.safe_chars_for_path_param = ''

    @classmethod
    def set_default(cls, default):
        cls._default = default

    @property
    def logger_file(self):
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        return self._Configuration__logger_file

    @logger_file.setter
    def logger_file(self, value):
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        self._Configuration__logger_file = value
        if self._Configuration__logger_file:
            self.logger_file_handler = logging.FileHandler(self._Configuration__logger_file)
            self.logger_file_handler.setFormatter(self.logger_formatter)
            for _, logger in six.iteritems(self.logger):
                logger.addHandler(self.logger_file_handler)
                if self.logger_stream_handler:
                    logger.removeHandler(self.logger_stream_handler)

        else:
            self.logger_stream_handler = logging.StreamHandler()
            self.logger_stream_handler.setFormatter(self.logger_formatter)
            for _, logger in six.iteritems(self.logger):
                logger.addHandler(self.logger_stream_handler)
                if self.logger_file_handler:
                    logger.removeHandler(self.logger_file_handler)

    @property
    def debug(self):
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        return self._Configuration__debug

    @debug.setter
    def debug(self, value):
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        self._Configuration__debug = value
        if self._Configuration__debug:
            for _, logger in six.iteritems(self.logger):
                logger.setLevel(logging.DEBUG)

            httplib.HTTPConnection.debuglevel = 1
        else:
            for _, logger in six.iteritems(self.logger):
                logger.setLevel(logging.WARNING)

            httplib.HTTPConnection.debuglevel = 0

    @property
    def logger_format(self):
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        return self._Configuration__logger_format

    @logger_format.setter
    def logger_format(self, value):
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        self._Configuration__logger_format = value
        self.logger_formatter = logging.Formatter(self._Configuration__logger_format)

    def get_api_key_with_prefix(self, identifier):
        """Gets API key (with prefix if set).

        :param identifier: The identifier of apiKey.
        :return: The token for api key authentication.
        """
        if self.api_key.get(identifier) and self.api_key_prefix.get(identifier):
            return self.api_key_prefix[identifier] + ' ' + self.api_key[identifier]
        if self.api_key.get(identifier):
            return self.api_key[identifier]

    def get_basic_auth_token(self):
        """Gets HTTP basic authentication header (string).

        :return: The token for basic HTTP authentication.
        """
        return urllib3.util.make_headers(basic_auth=self.username + ':' + self.password).get('authorization')

    def auth_settings(self):
        """Gets Auth Settings dict for api client.

        :return: The Auth Settings information dict.
        """
        return {'ApiKeyAuth': {'type': 'api_key', 
                        'in': 'header', 
                        'key': 'X-API-KEY', 
                        'value': self.get_api_key_with_prefix('X-API-KEY')}}

    def to_debug_report(self):
        """Gets the essential information for debugging.

        :return: The report for debugging.
        """
        return 'Python SDK Debug Report:\nOS: {env}\nPython Version: {pyversion}\nVersion of the API: 3.0.13\nSDK Package Version: 3.0.13'.format(env=sys.platform, pyversion=sys.version)