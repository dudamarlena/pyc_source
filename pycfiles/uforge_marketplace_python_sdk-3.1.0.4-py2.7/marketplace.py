# uncompyle6 version 3.7.4
# Python bytecode 2.7 (62211)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: build/bdist.linux-x86_64/egg/marketplace/objects/marketplace.py
# Compiled at: 2016-06-03 07:45:06
from __future__ import unicode_literals
import pyxb, pyxb.binding, pyxb.binding.saxer, io, pyxb.utils.utility, pyxb.utils.domutils, sys, pyxb.utils.six as _six
_GenerationUID = pyxb.utils.utility.UniqueIdentifier(b'urn:uuid:9d352e72-2980-11e6-ae01-5cc5d49ab5b9')
_PyXBVersion = b'1.2.4'
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)
import pyxb.binding.datatypes
Namespace = pyxb.namespace.NamespaceForURI(b'http://www.usharesoft.com/marketplace', create_if_missing=True)
Namespace.configureCategories([b'typeBinding', b'elementBinding'])

def CreateFromDocument(xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """
    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    else:
        if default_namespace is None:
            default_namespace = Namespace.fallbackNamespace()
        saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
        handler = saxer.getContentHandler()
        xmld = xml_text
        if isinstance(xmld, _six.text_type):
            xmld = xmld.encode(pyxb._InputEncoding)
        saxer.parse(io.BytesIO(xmld))
        instance = handler.rootObject()
        return instance


def CreateFromDOM(node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


class STD_ANON(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 304, 24)
    _Documentation = None


STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.APPROVED = STD_ANON._CF_enumeration.addEnumeration(unicode_value=b'APPROVED', tag=b'APPROVED')
STD_ANON.ASSIGNED = STD_ANON._CF_enumeration.addEnumeration(unicode_value=b'ASSIGNED', tag=b'ASSIGNED')
STD_ANON.NEW = STD_ANON._CF_enumeration.addEnumeration(unicode_value=b'NEW', tag=b'NEW')
STD_ANON.REJECTED = STD_ANON._CF_enumeration.addEnumeration(unicode_value=b'REJECTED', tag=b'REJECTED')
STD_ANON.SUBMITTED = STD_ANON._CF_enumeration.addEnumeration(unicode_value=b'SUBMITTED', tag=b'SUBMITTED')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)

class STD_ANON_(pyxb.binding.datatypes.int):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 447, 24)
    _Documentation = None


STD_ANON_._InitializeFacetMap()

class STD_ANON_2(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 462, 24)
    _Documentation = None


STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.APPROVAL_NOTE = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=b'APPROVAL_NOTE', tag=b'APPROVAL_NOTE')
STD_ANON_2.QUESTION = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=b'QUESTION', tag=b'QUESTION')
STD_ANON_2.REPLY = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=b'REPLY', tag=b'REPLY')
STD_ANON_2.REVIEW = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value=b'REVIEW', tag=b'REVIEW')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

class STD_ANON_3(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 564, 24)
    _Documentation = None


STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.BYOL = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'BYOL', tag=b'BYOL')
STD_ANON_3.FREE = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'FREE', tag=b'FREE')
STD_ANON_3.PERPETUAL = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'PERPETUAL', tag=b'PERPETUAL')
STD_ANON_3.SETUP = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'SETUP', tag=b'SETUP')
STD_ANON_3.SUBSCRIPTION = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'SUBSCRIPTION', tag=b'SUBSCRIPTION')
STD_ANON_3.SUPPORT = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'SUPPORT', tag=b'SUPPORT')
STD_ANON_3.TRAINING = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'TRAINING', tag=b'TRAINING')
STD_ANON_3.TRIAL = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value=b'TRIAL', tag=b'TRIAL')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)

class Currency(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Currency')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 598, 4)
    _Documentation = None


Currency._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Currency, enum_prefix=None)
Currency.ARS = Currency._CF_enumeration.addEnumeration(unicode_value=b'ARS', tag=b'ARS')
Currency.AUD = Currency._CF_enumeration.addEnumeration(unicode_value=b'AUD', tag=b'AUD')
Currency.BRL = Currency._CF_enumeration.addEnumeration(unicode_value=b'BRL', tag=b'BRL')
Currency.CAD = Currency._CF_enumeration.addEnumeration(unicode_value=b'CAD', tag=b'CAD')
Currency.CHF = Currency._CF_enumeration.addEnumeration(unicode_value=b'CHF', tag=b'CHF')
Currency.CNY = Currency._CF_enumeration.addEnumeration(unicode_value=b'CNY', tag=b'CNY')
Currency.EUR = Currency._CF_enumeration.addEnumeration(unicode_value=b'EUR', tag=b'EUR')
Currency.GBP = Currency._CF_enumeration.addEnumeration(unicode_value=b'GBP', tag=b'GBP')
Currency.HKD = Currency._CF_enumeration.addEnumeration(unicode_value=b'HKD', tag=b'HKD')
Currency.INR = Currency._CF_enumeration.addEnumeration(unicode_value=b'INR', tag=b'INR')
Currency.JPY = Currency._CF_enumeration.addEnumeration(unicode_value=b'JPY', tag=b'JPY')
Currency.NZD = Currency._CF_enumeration.addEnumeration(unicode_value=b'NZD', tag=b'NZD')
Currency.USD = Currency._CF_enumeration.addEnumeration(unicode_value=b'USD', tag=b'USD')
Currency._InitializeFacetMap(Currency._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'Currency', Currency)

class STD_ANON_4(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 666, 24)
    _Documentation = None


STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.BYOL = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=b'BYOL', tag=b'BYOL')
STD_ANON_4.FREE = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=b'FREE', tag=b'FREE')
STD_ANON_4.PERPETUAL = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=b'PERPETUAL', tag=b'PERPETUAL')
STD_ANON_4.SUBSCRIPTION = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value=b'SUBSCRIPTION', tag=b'SUBSCRIPTION')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)

class Frequency(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Frequency')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 758, 4)
    _Documentation = None


Frequency._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Frequency, enum_prefix=None)
Frequency.ANNUALLY = Frequency._CF_enumeration.addEnumeration(unicode_value=b'ANNUALLY', tag=b'ANNUALLY')
Frequency.DAILY = Frequency._CF_enumeration.addEnumeration(unicode_value=b'DAILY', tag=b'DAILY')
Frequency.MONTHLY = Frequency._CF_enumeration.addEnumeration(unicode_value=b'MONTHLY', tag=b'MONTHLY')
Frequency.WEEKLY = Frequency._CF_enumeration.addEnumeration(unicode_value=b'WEEKLY', tag=b'WEEKLY')
Frequency._InitializeFacetMap(Frequency._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'Frequency', Frequency)

class Interval(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Interval')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 835, 4)
    _Documentation = None


Interval._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Interval, enum_prefix=None)
Interval.DAYS = Interval._CF_enumeration.addEnumeration(unicode_value=b'DAYS', tag=b'DAYS')
Interval.MONTHS = Interval._CF_enumeration.addEnumeration(unicode_value=b'MONTHS', tag=b'MONTHS')
Interval.WEEKS = Interval._CF_enumeration.addEnumeration(unicode_value=b'WEEKS', tag=b'WEEKS')
Interval.YEARS = Interval._CF_enumeration.addEnumeration(unicode_value=b'YEARS', tag=b'YEARS')
Interval._InitializeFacetMap(Interval._CF_enumeration)
Namespace.addCategoryObject(b'typeBinding', b'Interval', Interval)

class STD_ANON_5(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 877, 24)
    _Documentation = None


STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.VBOX = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value=b'VBOX', tag=b'VBOX')
STD_ANON_5.VMWARE = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value=b'VMWARE', tag=b'VMWARE')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)

class STD_ANON_6(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 885, 24)
    _Documentation = None


STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.UBUNTU_14 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=b'UBUNTU 14', tag=b'UBUNTU_14')
STD_ANON_6.WINDOWS_XP = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value=b'WINDOWS XP', tag=b'WINDOWS_XP')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)

class STD_ANON_7(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 896, 24)
    _Documentation = None


STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.CLOUD = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'CLOUD', tag=b'CLOUD')
STD_ANON_7.CONTAINER = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'CONTAINER', tag=b'CONTAINER')
STD_ANON_7.PHYSICAL = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'PHYSICAL', tag=b'PHYSICAL')
STD_ANON_7.VIRTUAL = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value=b'VIRTUAL', tag=b'VIRTUAL')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

class STD_ANON_8(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1274, 24)
    _Documentation = None


STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.Approved = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=b'Approved', tag=b'Approved')
STD_ANON_8.Assigned = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=b'Assigned', tag=b'Assigned')
STD_ANON_8.New = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=b'New', tag=b'New')
STD_ANON_8.Rejected = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=b'Rejected', tag=b'Rejected')
STD_ANON_8.Submitted = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value=b'Submitted', tag=b'Submitted')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

class STD_ANON_9(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1472, 24)
    _Documentation = None


STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.URL = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value=b'URL', tag=b'URL')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

class STD_ANON_10(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1560, 24)
    _Documentation = None


STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.APPLIANCE = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=b'APPLIANCE', tag=b'APPLIANCE')
STD_ANON_10.BINARY = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=b'BINARY', tag=b'BINARY')
STD_ANON_10.SAAS = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=b'SAAS', tag=b'SAAS')
STD_ANON_10.SERVER = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value=b'SERVER', tag=b'SERVER')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)

class STD_ANON_11(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1628, 24)
    _Documentation = None


STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.monthly = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=b'monthly', tag=b'monthly')
STD_ANON_11.none = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value=b'none', tag=b'none')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)

class STD_ANON_12(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1639, 24)
    _Documentation = None


STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.appliance = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=b'appliance', tag=b'appliance')
STD_ANON_12.diskusage = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=b'diskusage', tag=b'diskusage')
STD_ANON_12.generation = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=b'generation', tag=b'generation')
STD_ANON_12.scan = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value=b'scan', tag=b'scan')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)

class STD_ANON_13(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1732, 24)
    _Documentation = None


STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.added = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'added', tag=b'added')
STD_ANON_13.cancelled = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'cancelled', tag=b'cancelled')
STD_ANON_13.created = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'created', tag=b'created')
STD_ANON_13.deleted = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'deleted', tag=b'deleted')
STD_ANON_13.downloaded = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'downloaded', tag=b'downloaded')
STD_ANON_13.failed = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'failed', tag=b'failed')
STD_ANON_13.imported = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'imported', tag=b'imported')
STD_ANON_13.purchased = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'purchased', tag=b'purchased')
STD_ANON_13.shared = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'shared', tag=b'shared')
STD_ANON_13.success = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'success', tag=b'success')
STD_ANON_13.updated = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'updated', tag=b'updated')
STD_ANON_13.uploaded = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value=b'uploaded', tag=b'uploaded')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)

class STD_ANON_14(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1969, 24)
    _Documentation = None


STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.API_CALL = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'API_CALL', tag=b'API_CALL')
STD_ANON_14.CLOUD_ENGINE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'CLOUD_ENGINE', tag=b'CLOUD_ENGINE')
STD_ANON_14.COMPUTER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'COMPUTER', tag=b'COMPUTER')
STD_ANON_14.DEVICE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'DEVICE', tag=b'DEVICE')
STD_ANON_14.GENERATION = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'GENERATION', tag=b'GENERATION')
STD_ANON_14.GIGABYTE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'GIGABYTE', tag=b'GIGABYTE')
STD_ANON_14.HOST = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'HOST', tag=b'HOST')
STD_ANON_14.HOUR = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'HOUR', tag=b'HOUR')
STD_ANON_14.JVM = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'JVM', tag=b'JVM')
STD_ANON_14.MEGABYTE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'MEGABYTE', tag=b'MEGABYTE')
STD_ANON_14.MIGRATION = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'MIGRATION', tag=b'MIGRATION')
STD_ANON_14.RAM = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'RAM', tag=b'RAM')
STD_ANON_14.REMOTE_ENGINE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'REMOTE_ENGINE', tag=b'REMOTE_ENGINE')
STD_ANON_14.SERVER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'SERVER', tag=b'SERVER')
STD_ANON_14.SOCKET = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'SOCKET', tag=b'SOCKET')
STD_ANON_14.STUDIO_USER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'STUDIO_USER', tag=b'STUDIO_USER')
STD_ANON_14.SUPPORT_CALL = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'SUPPORT_CALL', tag=b'SUPPORT_CALL')
STD_ANON_14.TERABYTE = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'TERABYTE', tag=b'TERABYTE')
STD_ANON_14.USER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'USER', tag=b'USER')
STD_ANON_14.WEB_USER = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value=b'WEB_USER', tag=b'WEB_USER')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)

class STD_ANON_15(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2171, 24)
    _Documentation = None


STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.corporate = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=b'corporate', tag=b'corporate')
STD_ANON_15.developer = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value=b'developer', tag=b'developer')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)

class STD_ANON_16(pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):
    """An atomic simple type."""
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2233, 24)
    _Documentation = None


STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.corporate = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=b'corporate', tag=b'corporate')
STD_ANON_16.developer = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value=b'developer', tag=b'developer')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)

class CTD_ANON(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 218, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __apiKeyPair = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'apiKeyPair'), b'apiKeyPair', b'__httpwww_usharesoft_commarketplace_CTD_ANON_apiKeyPair', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 220, 32))
    apiKeyPair = property(__apiKeyPair.value, __apiKeyPair.set, None, None)
    _ElementMap.update({__apiKeyPair.name(): __apiKeyPair})
    _AttributeMap.update({})


class CTD_ANON_(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 252, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __appliance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'appliance'), b'appliance', b'__httpwww_usharesoft_commarketplace_CTD_ANON__appliance', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 254, 32))
    appliance = property(__appliance.value, __appliance.set, None, None)
    _ElementMap.update({__appliance.name(): __appliance})
    _AttributeMap.update({})


class CTD_ANON_2(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 293, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'note'), b'note', b'__httpwww_usharesoft_commarketplace_CTD_ANON_2_note', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 295, 32))
    note = property(__note.value, __note.set, None, None)
    _ElementMap.update({__note.name(): __note})
    _AttributeMap.update({})


class CTD_ANON_3(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 325, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __approval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'approval'), b'approval', b'__httpwww_usharesoft_commarketplace_CTD_ANON_3_approval', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 327, 32))
    approval = property(__approval.value, __approval.set, None, None)
    _ElementMap.update({__approval.name(): __approval})
    _AttributeMap.update({})


class CTD_ANON_4(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 356, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __artifact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'artifact'), b'artifact', b'__httpwww_usharesoft_commarketplace_CTD_ANON_4_artifact', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 358, 32))
    artifact = property(__artifact.value, __artifact.set, None, None)
    _ElementMap.update({__artifact.name(): __artifact})
    _AttributeMap.update({})


class CTD_ANON_5(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 386, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badge'), b'badge', b'__httpwww_usharesoft_commarketplace_CTD_ANON_5_badge', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 388, 32))
    badge = property(__badge.value, __badge.set, None, None)
    _ElementMap.update({__badge.name(): __badge})
    _AttributeMap.update({})


class CTD_ANON_6(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 402, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'category'), b'category', b'__httpwww_usharesoft_commarketplace_CTD_ANON_6_category', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 404, 32))
    category = property(__category.value, __category.set, None, None)
    _ElementMap.update({__category.name(): __category})
    _AttributeMap.update({})


class CTD_ANON_7(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 420, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'category'), b'category', b'__httpwww_usharesoft_commarketplace_CTD_ANON_7_category', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 422, 32))
    category = property(__category.value, __category.set, None, None)
    _ElementMap.update({__category.name(): __category})
    _AttributeMap.update({})


class CTD_ANON_8(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 452, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'comment'), b'comment', b'__httpwww_usharesoft_commarketplace_CTD_ANON_8_comment', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 454, 32))
    comment = property(__comment.value, __comment.set, None, None)
    _ElementMap.update({__comment.name(): __comment})
    _AttributeMap.update({})


class CTD_ANON_9(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 483, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'comment'), b'comment', b'__httpwww_usharesoft_commarketplace_CTD_ANON_9_comment', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 485, 32))
    comment = property(__comment.value, __comment.set, None, None)
    _ElementMap.update({__comment.name(): __comment})
    _AttributeMap.update({})


class CTD_ANON_10(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 499, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __company = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'company'), b'company', b'__httpwww_usharesoft_commarketplace_CTD_ANON_10_company', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 501, 32))
    company = property(__company.value, __company.set, None, None)
    _ElementMap.update({__company.name(): __company})
    _AttributeMap.update({})


class CTD_ANON_11(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 543, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __compatibleProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'compatibleProduct'), b'compatibleProduct', b'__httpwww_usharesoft_commarketplace_CTD_ANON_11_compatibleProduct', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 545, 32))
    compatibleProduct = property(__compatibleProduct.value, __compatibleProduct.set, None, None)
    _ElementMap.update({__compatibleProduct.name(): __compatibleProduct})
    _AttributeMap.update({})


class CTD_ANON_12(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 587, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'cost'), b'cost', b'__httpwww_usharesoft_commarketplace_CTD_ANON_12_cost', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 589, 32))
    cost = property(__cost.value, __cost.set, None, None)
    _ElementMap.update({__cost.name(): __cost})
    _AttributeMap.update({})


class CTD_ANON_13(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 630, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __downloadTicket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'downloadTicket'), b'downloadTicket', b'__httpwww_usharesoft_commarketplace_CTD_ANON_13_downloadTicket', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 632, 32))
    downloadTicket = property(__downloadTicket.value, __downloadTicket.set, None, None)
    _ElementMap.update({__downloadTicket.name(): __downloadTicket})
    _AttributeMap.update({})


class CTD_ANON_14(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 647, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __cost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'cost'), b'cost', b'__httpwww_usharesoft_commarketplace_CTD_ANON_14_cost', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 649, 32))
    cost = property(__cost.value, __cost.set, None, None)
    _ElementMap.update({__cost.name(): __cost})
    _AttributeMap.update({})


class CTD_ANON_15(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 655, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __include = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'include'), b'include', b'__httpwww_usharesoft_commarketplace_CTD_ANON_15_include', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 657, 32))
    include = property(__include.value, __include.set, None, None)
    _ElementMap.update({__include.name(): __include})
    _AttributeMap.update({})


class CTD_ANON_16(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 676, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'unit'), b'unit', b'__httpwww_usharesoft_commarketplace_CTD_ANON_16_unit', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 678, 32))
    unit = property(__unit.value, __unit.set, None, None)
    _ElementMap.update({__unit.name(): __unit})
    _AttributeMap.update({})


class CTD_ANON_17(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 695, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'edition'), b'edition', b'__httpwww_usharesoft_commarketplace_CTD_ANON_17_edition', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 697, 32))
    edition = property(__edition.value, __edition.set, None, None)
    _ElementMap.update({__edition.name(): __edition})
    _AttributeMap.update({})


class Entitlement(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}Entitlement with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Entitlement')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 706, 4)
    _ElementMap = {}
    _AttributeMap = {}
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_Entitlement_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 708, 12))
    description = property(__description.value, __description.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Entitlement_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 709, 12))
    name = property(__name.value, __name.set, None, None)
    _ElementMap.update({__description.name(): __description, 
       __name.name(): __name})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Entitlement', Entitlement)

class CTD_ANON_18(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 718, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __entitlement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'entitlement'), b'entitlement', b'__httpwww_usharesoft_commarketplace_CTD_ANON_18_entitlement', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 720, 32))
    entitlement = property(__entitlement.value, __entitlement.set, None, None)
    _ElementMap.update({__entitlement.name(): __entitlement})
    _AttributeMap.update({})


class CTD_ANON_19(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 747, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __export = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'export'), b'export', b'__httpwww_usharesoft_commarketplace_CTD_ANON_19_export', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 749, 32))
    export = property(__export.value, __export.set, None, None)
    _ElementMap.update({__export.name(): __export})
    _AttributeMap.update({})


class CTD_ANON_20(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 786, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __image = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'image'), b'image', b'__httpwww_usharesoft_commarketplace_CTD_ANON_20_image', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 788, 32))
    image = property(__image.value, __image.set, None, None)
    _ElementMap.update({__image.name(): __image})
    _AttributeMap.update({})


class CTD_ANON_21(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 813, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __include = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'include'), b'include', b'__httpwww_usharesoft_commarketplace_CTD_ANON_21_include', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 815, 32))
    include = property(__include.value, __include.set, None, None)
    _ElementMap.update({__include.name(): __include})
    _AttributeMap.update({})


class LocalizedMessage(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}LocalizedMessage with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'LocalizedMessage')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 843, 4)
    _ElementMap = {}
    _AttributeMap = {}
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'message'), b'message', b'__httpwww_usharesoft_commarketplace_LocalizedMessage_message', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 845, 12))
    message = property(__message.value, __message.set, None, None)
    __messageId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'messageId'), b'messageId', b'__httpwww_usharesoft_commarketplace_LocalizedMessage_messageId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 846, 12))
    messageId = property(__messageId.value, __messageId.set, None, None)
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parameters'), b'parameters', b'__httpwww_usharesoft_commarketplace_LocalizedMessage_parameters', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 847, 12))
    parameters = property(__parameters.value, __parameters.set, None, None)
    _ElementMap.update({__message.name(): __message, 
       __messageId.name(): __messageId, 
       __parameters.name(): __parameters})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'LocalizedMessage', LocalizedMessage)

class CTD_ANON_22(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 848, 16)
    _ElementMap = {}
    _AttributeMap = {}
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parameter'), b'parameter', b'__httpwww_usharesoft_commarketplace_CTD_ANON_22_parameter', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 850, 24))
    parameter = property(__parameter.value, __parameter.set, None, None)
    _ElementMap.update({__parameter.name(): __parameter})
    _AttributeMap.update({})


class CTD_ANON_23(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 915, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'category'), b'category', b'__httpwww_usharesoft_commarketplace_CTD_ANON_23_category', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 917, 32))
    category = property(__category.value, __category.set, None, None)
    _ElementMap.update({__category.name(): __category})
    _AttributeMap.update({})


class CTD_ANON_24(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 931, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __resource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'resource'), b'resource', b'__httpwww_usharesoft_commarketplace_CTD_ANON_24_resource', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 933, 32))
    resource = property(__resource.value, __resource.set, None, None)
    _ElementMap.update({__resource.name(): __resource})
    _AttributeMap.update({})


class CTD_ANON_25(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 938, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __screenshot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'screenshot'), b'screenshot', b'__httpwww_usharesoft_commarketplace_CTD_ANON_25_screenshot', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 940, 32))
    screenshot = property(__screenshot.value, __screenshot.set, None, None)
    _ElementMap.update({__screenshot.name(): __screenshot})
    _AttributeMap.update({})


class CTD_ANON_26(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 959, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __marketingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketingPlan'), b'marketingPlan', b'__httpwww_usharesoft_commarketplace_CTD_ANON_26_marketingPlan', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 961, 32))
    marketingPlan = property(__marketingPlan.value, __marketingPlan.set, None, None)
    _ElementMap.update({__marketingPlan.name(): __marketingPlan})
    _AttributeMap.update({})


class CTD_ANON_27(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 995, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __marketplace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketplace'), b'marketplace', b'__httpwww_usharesoft_commarketplace_CTD_ANON_27_marketplace', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 997, 32))
    marketplace = property(__marketplace.value, __marketplace.set, None, None)
    _ElementMap.update({__marketplace.name(): __marketplace})
    _AttributeMap.update({})


class CTD_ANON_28(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1035, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'status'), b'status', b'__httpwww_usharesoft_commarketplace_CTD_ANON_28_status', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1037, 32))
    status = property(__status.value, __status.set, None, None)
    _ElementMap.update({__status.name(): __status})
    _AttributeMap.update({})


class CTD_ANON_29(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1062, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'order'), b'order', b'__httpwww_usharesoft_commarketplace_CTD_ANON_29_order', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1064, 32))
    order = property(__order.value, __order.set, None, None)
    _ElementMap.update({__order.name(): __order})
    _AttributeMap.update({})


class CTD_ANON_30(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1087, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __subscriptionProfile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'subscriptionProfile'), b'subscriptionProfile', b'__httpwww_usharesoft_commarketplace_CTD_ANON_30_subscriptionProfile', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1089, 32))
    subscriptionProfile = property(__subscriptionProfile.value, __subscriptionProfile.set, None, None)
    _ElementMap.update({__subscriptionProfile.name(): __subscriptionProfile})
    _AttributeMap.update({})


class CTD_ANON_31(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1107, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __org = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'org'), b'org', b'__httpwww_usharesoft_commarketplace_CTD_ANON_31_org', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1109, 32))
    org = property(__org.value, __org.set, None, None)
    _ElementMap.update({__org.name(): __org})
    _AttributeMap.update({})


class CTD_ANON_32(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1150, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'edition'), b'edition', b'__httpwww_usharesoft_commarketplace_CTD_ANON_32_edition', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1152, 32))
    edition = property(__edition.value, __edition.set, None, None)
    _ElementMap.update({__edition.name(): __edition})
    _AttributeMap.update({})


class CTD_ANON_33(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1163, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __resource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'resource'), b'resource', b'__httpwww_usharesoft_commarketplace_CTD_ANON_33_resource', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1165, 32))
    resource = property(__resource.value, __resource.set, None, None)
    _ElementMap.update({__resource.name(): __resource})
    _AttributeMap.update({})


class CTD_ANON_34(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1181, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __pricingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'pricingPlan'), b'pricingPlan', b'__httpwww_usharesoft_commarketplace_CTD_ANON_34_pricingPlan', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1183, 32))
    pricingPlan = property(__pricingPlan.value, __pricingPlan.set, None, None)
    _ElementMap.update({__pricingPlan.name(): __pricingPlan})
    _AttributeMap.update({})


class CTD_ANON_35(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1199, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'comment'), b'comment', b'__httpwww_usharesoft_commarketplace_CTD_ANON_35_comment', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1201, 32))
    comment = property(__comment.value, __comment.set, None, None)
    _ElementMap.update({__comment.name(): __comment})
    _AttributeMap.update({})


class CTD_ANON_36(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1207, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'item'), b'item', b'__httpwww_usharesoft_commarketplace_CTD_ANON_36_item', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1209, 32))
    item = property(__item.value, __item.set, None, None)
    _ElementMap.update({__item.name(): __item})
    _AttributeMap.update({})


class CTD_ANON_37(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1235, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __artifact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'artifact'), b'artifact', b'__httpwww_usharesoft_commarketplace_CTD_ANON_37_artifact', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1237, 32))
    artifact = property(__artifact.value, __artifact.set, None, None)
    _ElementMap.update({__artifact.name(): __artifact})
    _AttributeMap.update({})


class CTD_ANON_38(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1243, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badge'), b'badge', b'__httpwww_usharesoft_commarketplace_CTD_ANON_38_badge', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1245, 32))
    badge = property(__badge.value, __badge.set, None, None)
    _ElementMap.update({__badge.name(): __badge})
    _AttributeMap.update({})


class CTD_ANON_39(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1252, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __compatibleProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'compatibleProduct'), b'compatibleProduct', b'__httpwww_usharesoft_commarketplace_CTD_ANON_39_compatibleProduct', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1254, 32))
    compatibleProduct = property(__compatibleProduct.value, __compatibleProduct.set, None, None)
    _ElementMap.update({__compatibleProduct.name(): __compatibleProduct})
    _AttributeMap.update({})


class CTD_ANON_40(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1301, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badge'), b'badge', b'__httpwww_usharesoft_commarketplace_CTD_ANON_40_badge', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1303, 32))
    badge = property(__badge.value, __badge.set, None, None)
    _ElementMap.update({__badge.name(): __badge})
    _AttributeMap.update({})


class CTD_ANON_41(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1310, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __compatibleProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'compatibleProduct'), b'compatibleProduct', b'__httpwww_usharesoft_commarketplace_CTD_ANON_41_compatibleProduct', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1312, 32))
    compatibleProduct = property(__compatibleProduct.value, __compatibleProduct.set, None, None)
    _ElementMap.update({__compatibleProduct.name(): __compatibleProduct})
    _AttributeMap.update({})


class CTD_ANON_42(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1320, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'edition'), b'edition', b'__httpwww_usharesoft_commarketplace_CTD_ANON_42_edition', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1322, 32))
    edition = property(__edition.value, __edition.set, None, None)
    _ElementMap.update({__edition.name(): __edition})
    _AttributeMap.update({})


class CTD_ANON_43(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1332, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __marketingResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketingResource'), b'marketingResource', b'__httpwww_usharesoft_commarketplace_CTD_ANON_43_marketingResource', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1334, 32))
    marketingResource = property(__marketingResource.value, __marketingResource.set, None, None)
    _ElementMap.update({__marketingResource.name(): __marketingResource})
    _AttributeMap.update({})


class CTD_ANON_44(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1343, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __otherRelease = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'otherRelease'), b'otherRelease', b'__httpwww_usharesoft_commarketplace_CTD_ANON_44_otherRelease', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1345, 32))
    otherRelease = property(__otherRelease.value, __otherRelease.set, None, None)
    _ElementMap.update({__otherRelease.name(): __otherRelease})
    _AttributeMap.update({})


class CTD_ANON_45(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1353, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __pricingResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'pricingResource'), b'pricingResource', b'__httpwww_usharesoft_commarketplace_CTD_ANON_45_pricingResource', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1355, 32))
    pricingResource = property(__pricingResource.value, __pricingResource.set, None, None)
    _ElementMap.update({__pricingResource.name(): __pricingResource})
    _AttributeMap.update({})


class CTD_ANON_46(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1367, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __screenshot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'screenshot'), b'screenshot', b'__httpwww_usharesoft_commarketplace_CTD_ANON_46_screenshot', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1369, 32))
    screenshot = property(__screenshot.value, __screenshot.set, None, None)
    _ElementMap.update({__screenshot.name(): __screenshot})
    _AttributeMap.update({})


class CTD_ANON_47(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1379, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __supportResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportResource'), b'supportResource', b'__httpwww_usharesoft_commarketplace_CTD_ANON_47_supportResource', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1381, 32))
    supportResource = property(__supportResource.value, __supportResource.set, None, None)
    _ElementMap.update({__supportResource.name(): __supportResource})
    _AttributeMap.update({})


class CTD_ANON_48(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1404, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __productItemDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemDetails'), b'productItemDetails', b'__httpwww_usharesoft_commarketplace_CTD_ANON_48_productItemDetails', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1406, 32))
    productItemDetails = property(__productItemDetails.value, __productItemDetails.set, None, None)
    _ElementMap.update({__productItemDetails.name(): __productItemDetails})
    _AttributeMap.update({})


class CTD_ANON_49(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1421, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __productItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItem'), b'productItem', b'__httpwww_usharesoft_commarketplace_CTD_ANON_49_productItem', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1423, 32))
    productItem = property(__productItem.value, __productItem.set, None, None)
    _ElementMap.update({__productItem.name(): __productItem})
    _AttributeMap.update({})


class CTD_ANON_50(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1452, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __productItemSummary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemSummary'), b'productItemSummary', b'__httpwww_usharesoft_commarketplace_CTD_ANON_50_productItemSummary', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1454, 32))
    productItemSummary = property(__productItemSummary.value, __productItemSummary.set, None, None)
    _ElementMap.update({__productItemSummary.name(): __productItemSummary})
    _AttributeMap.update({})


class CTD_ANON_51(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1490, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'product'), b'product', b'__httpwww_usharesoft_commarketplace_CTD_ANON_51_product', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1492, 32))
    product = property(__product.value, __product.set, None, None)
    _ElementMap.update({__product.name(): __product})
    _AttributeMap.update({})


class CTD_ANON_52(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1506, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badge'), b'badge', b'__httpwww_usharesoft_commarketplace_CTD_ANON_52_badge', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1508, 32))
    badge = property(__badge.value, __badge.set, None, None)
    _ElementMap.update({__badge.name(): __badge})
    _AttributeMap.update({})


class CTD_ANON_53(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1543, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __productSummary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productSummary'), b'productSummary', b'__httpwww_usharesoft_commarketplace_CTD_ANON_53_productSummary', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1545, 32))
    productSummary = property(__productSummary.value, __productSummary.set, None, None)
    _ElementMap.update({__productSummary.name(): __productSummary})
    _AttributeMap.update({})


class CTD_ANON_54(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1582, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __productType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productType'), b'productType', b'__httpwww_usharesoft_commarketplace_CTD_ANON_54_productType', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1584, 32))
    productType = property(__productType.value, __productType.set, None, None)
    _ElementMap.update({__productType.name(): __productType})
    _AttributeMap.update({})


class CTD_ANON_55(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1612, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __purchase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchase'), b'purchase', b'__httpwww_usharesoft_commarketplace_CTD_ANON_55_purchase', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1614, 32))
    purchase = property(__purchase.value, __purchase.set, None, None)
    _ElementMap.update({__purchase.name(): __purchase})
    _AttributeMap.update({})


class CTD_ANON_56(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1660, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __quota = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'quota'), b'quota', b'__httpwww_usharesoft_commarketplace_CTD_ANON_56_quota', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1662, 32))
    quota = property(__quota.value, __quota.set, None, None)
    _ElementMap.update({__quota.name(): __quota})
    _AttributeMap.update({})


class CTD_ANON_57(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1677, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __entitlement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'entitlement'), b'entitlement', b'__httpwww_usharesoft_commarketplace_CTD_ANON_57_entitlement', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1679, 32))
    entitlement = property(__entitlement.value, __entitlement.set, None, None)
    _ElementMap.update({__entitlement.name(): __entitlement})
    _AttributeMap.update({})


class CTD_ANON_58(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1694, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'role'), b'role', b'__httpwww_usharesoft_commarketplace_CTD_ANON_58_role', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1696, 32))
    role = property(__role.value, __role.set, None, None)
    _ElementMap.update({__role.name(): __role})
    _AttributeMap.update({})


class CTD_ANON_59(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1779, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __statTicket = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'statTicket'), b'statTicket', b'__httpwww_usharesoft_commarketplace_CTD_ANON_59_statTicket', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1781, 32))
    statTicket = property(__statTicket.value, __statTicket.set, None, None)
    _ElementMap.update({__statTicket.name(): __statTicket})
    _AttributeMap.update({})


class CTD_ANON_60(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1796, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __admin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'admin'), b'admin', b'__httpwww_usharesoft_commarketplace_CTD_ANON_60_admin', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1798, 32))
    admin = property(__admin.value, __admin.set, None, None)
    _ElementMap.update({__admin.name(): __admin})
    _AttributeMap.update({})


class CTD_ANON_61(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1808, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __quota = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'quota'), b'quota', b'__httpwww_usharesoft_commarketplace_CTD_ANON_61_quota', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1810, 32))
    quota = property(__quota.value, __quota.set, None, None)
    _ElementMap.update({__quota.name(): __quota})
    _AttributeMap.update({})


class CTD_ANON_62(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1816, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'role'), b'role', b'__httpwww_usharesoft_commarketplace_CTD_ANON_62_role', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1818, 32))
    role = property(__role.value, __role.set, None, None)
    _ElementMap.update({__role.name(): __role})
    _AttributeMap.update({})


class CTD_ANON_63(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1834, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __subscriptionProfile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'subscriptionProfile'), b'subscriptionProfile', b'__httpwww_usharesoft_commarketplace_CTD_ANON_63_subscriptionProfile', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1836, 32))
    subscriptionProfile = property(__subscriptionProfile.value, __subscriptionProfile.set, None, None)
    _ElementMap.update({__subscriptionProfile.name(): __subscriptionProfile})
    _AttributeMap.update({})


class CTD_ANON_64(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1857, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __resource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'resource'), b'resource', b'__httpwww_usharesoft_commarketplace_CTD_ANON_64_resource', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1859, 32))
    resource = property(__resource.value, __resource.set, None, None)
    _ElementMap.update({__resource.name(): __resource})
    _AttributeMap.update({})


class CTD_ANON_65(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1877, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __supportPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportPlan'), b'supportPlan', b'__httpwww_usharesoft_commarketplace_CTD_ANON_65_supportPlan', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1879, 32))
    supportPlan = property(__supportPlan.value, __supportPlan.set, None, None)
    _ElementMap.update({__supportPlan.name(): __supportPlan})
    _AttributeMap.update({})


class CTD_ANON_66(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1910, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __uforgeCredAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uforgeCredAccount'), b'uforgeCredAccount', b'__httpwww_usharesoft_commarketplace_CTD_ANON_66_uforgeCredAccount', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1912, 32))
    uforgeCredAccount = property(__uforgeCredAccount.value, __uforgeCredAccount.set, None, None)
    _ElementMap.update({__uforgeCredAccount.name(): __uforgeCredAccount})
    _AttributeMap.update({})


class UForgeError(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}UForgeError with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'UForgeError')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1922, 4)
    _ElementMap = {}
    _AttributeMap = {}
    __localizedErrorMsg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'localizedErrorMsg'), b'localizedErrorMsg', b'__httpwww_usharesoft_commarketplace_UForgeError_localizedErrorMsg', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1924, 12))
    localizedErrorMsg = property(__localizedErrorMsg.value, __localizedErrorMsg.set, None, None)
    __requestMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'requestMethod'), b'requestMethod', b'__httpwww_usharesoft_commarketplace_UForgeError_requestMethod', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1925, 12))
    requestMethod = property(__requestMethod.value, __requestMethod.set, None, None)
    __requestUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'requestUri'), b'requestUri', b'__httpwww_usharesoft_commarketplace_UForgeError_requestUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1926, 12))
    requestUri = property(__requestUri.value, __requestUri.set, None, None)
    __statusCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'statusCode'), b'statusCode', b'__httpwww_usharesoft_commarketplace_UForgeError_statusCode', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1927, 12))
    statusCode = property(__statusCode.value, __statusCode.set, None, None)
    __timestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'timestamp'), b'timestamp', b'__httpwww_usharesoft_commarketplace_UForgeError_timestamp', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1928, 12))
    timestamp = property(__timestamp.value, __timestamp.set, None, None)
    _ElementMap.update({__localizedErrorMsg.name(): __localizedErrorMsg, 
       __requestMethod.name(): __requestMethod, 
       __requestUri.name(): __requestUri, 
       __statusCode.name(): __statusCode, 
       __timestamp.name(): __timestamp})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'UForgeError', UForgeError)

class UForgeObject(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}UForgeObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'UForgeObject')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1932, 4)
    _ElementMap = {}
    _AttributeMap = {}
    __created = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'created'), b'created', b'__httpwww_usharesoft_commarketplace_UForgeObject_created', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    created = property(__created.value, __created.set, None, None)
    __dbId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'dbId'), b'dbId', b'__httpwww_usharesoft_commarketplace_UForgeObject_dbId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    dbId = property(__dbId.value, __dbId.set, None, None)
    __digest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'digest'), b'digest', b'__httpwww_usharesoft_commarketplace_UForgeObject_digest', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    digest = property(__digest.value, __digest.set, None, None)
    __lastModified = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'lastModified'), b'lastModified', b'__httpwww_usharesoft_commarketplace_UForgeObject_lastModified', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    lastModified = property(__lastModified.value, __lastModified.set, None, None)
    _ElementMap.update({__created.name(): __created, 
       __dbId.name(): __dbId, 
       __digest.name(): __digest, 
       __lastModified.name(): __lastModified})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'UForgeObject', UForgeObject)

class UForgeObjects(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}UForgeObjects with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'UForgeObjects')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1941, 4)
    _ElementMap = {}
    _AttributeMap = {}
    __total = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'total'), b'total', b'__httpwww_usharesoft_commarketplace_UForgeObjects_total', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    total = property(__total.value, __total.set, None, None)
    _ElementMap.update({__total.name(): __total})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'UForgeObjects', UForgeObjects)

class CTD_ANON_67(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2004, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'unit'), b'unit', b'__httpwww_usharesoft_commarketplace_CTD_ANON_67_unit', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2006, 32))
    unit = property(__unit.value, __unit.set, None, None)
    _ElementMap.update({__unit.name(): __unit})
    _AttributeMap.update({})


class UriList(pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.usharesoft.com/marketplace}UriList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'UriList')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2015, 4)
    _ElementMap = {}
    _AttributeMap = {}
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_UriList_uri', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2017, 12))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'UriList', UriList)

class CTD_ANON_68(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2056, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'role'), b'role', b'__httpwww_usharesoft_commarketplace_CTD_ANON_68_role', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2058, 32))
    role = property(__role.value, __role.set, None, None)
    _ElementMap.update({__role.name(): __role})
    _AttributeMap.update({})


class CTD_ANON_69(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2064, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __uforgeCredAccount = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uforgeCredAccount'), b'uforgeCredAccount', b'__httpwww_usharesoft_commarketplace_CTD_ANON_69_uforgeCredAccount', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2066, 32))
    uforgeCredAccount = property(__uforgeCredAccount.value, __uforgeCredAccount.set, None, None)
    _ElementMap.update({__uforgeCredAccount.name(): __uforgeCredAccount})
    _AttributeMap.update({})


class CTD_ANON_70(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2071, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __exports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'exports'), b'exports', b'__httpwww_usharesoft_commarketplace_CTD_ANON_70_exports', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2073, 32))
    exports = property(__exports.value, __exports.set, None, None)
    _ElementMap.update({__exports.name(): __exports})
    _AttributeMap.update({})


class CTD_ANON_71(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2092, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __user = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'user'), b'user', b'__httpwww_usharesoft_commarketplace_CTD_ANON_71_user', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2094, 32))
    user = property(__user.value, __user.set, None, None)
    _ElementMap.update({__user.name(): __user})
    _AttributeMap.update({})


class CTD_ANON_72(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2109, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badge'), b'badge', b'__httpwww_usharesoft_commarketplace_CTD_ANON_72_badge', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2111, 32))
    badge = property(__badge.value, __badge.set, None, None)
    _ElementMap.update({__badge.name(): __badge})
    _AttributeMap.update({})


class CTD_ANON_73(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2121, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __marketingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketingPlan'), b'marketingPlan', b'__httpwww_usharesoft_commarketplace_CTD_ANON_73_marketingPlan', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2123, 32))
    marketingPlan = property(__marketingPlan.value, __marketingPlan.set, None, None)
    _ElementMap.update({__marketingPlan.name(): __marketingPlan})
    _AttributeMap.update({})


class CTD_ANON_74(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2130, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __member = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'member'), b'member', b'__httpwww_usharesoft_commarketplace_CTD_ANON_74_member', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2132, 32))
    member = property(__member.value, __member.set, None, None)
    _ElementMap.update({__member.name(): __member})
    _AttributeMap.update({})


class CTD_ANON_75(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2145, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __pricingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'pricingPlan'), b'pricingPlan', b'__httpwww_usharesoft_commarketplace_CTD_ANON_75_pricingPlan', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2147, 32))
    pricingPlan = property(__pricingPlan.value, __pricingPlan.set, None, None)
    _ElementMap.update({__pricingPlan.name(): __pricingPlan})
    _AttributeMap.update({})


class CTD_ANON_76(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2153, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __product = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'product'), b'product', b'__httpwww_usharesoft_commarketplace_CTD_ANON_76_product', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2155, 32))
    product = property(__product.value, __product.set, None, None)
    _ElementMap.update({__product.name(): __product})
    _AttributeMap.update({})


class CTD_ANON_77(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2162, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __supportPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportPlan'), b'supportPlan', b'__httpwww_usharesoft_commarketplace_CTD_ANON_77_supportPlan', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2164, 32))
    supportPlan = property(__supportPlan.value, __supportPlan.set, None, None)
    _ElementMap.update({__supportPlan.name(): __supportPlan})
    _AttributeMap.update({})


class CTD_ANON_78(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2205, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __vendorMember = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorMember'), b'vendorMember', b'__httpwww_usharesoft_commarketplace_CTD_ANON_78_vendorMember', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2207, 32))
    vendorMember = property(__vendorMember.value, __vendorMember.set, None, None)
    _ElementMap.update({__vendorMember.name(): __vendorMember})
    _AttributeMap.update({})


class CTD_ANON_79(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2241, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __badge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badge'), b'badge', b'__httpwww_usharesoft_commarketplace_CTD_ANON_79_badge', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2243, 32))
    badge = property(__badge.value, __badge.set, None, None)
    _ElementMap.update({__badge.name(): __badge})
    _AttributeMap.update({})


class CTD_ANON_80(pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2257, 24)
    _ElementMap = {}
    _AttributeMap = {}
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendor'), b'vendor', b'__httpwww_usharesoft_commarketplace_CTD_ANON_80_vendor', True, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2259, 32))
    vendor = property(__vendor.value, __vendor.set, None, None)
    _ElementMap.update({__vendor.name(): __vendor})
    _AttributeMap.update({})


class Address(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Address with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Address')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 187, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'country'), b'country', b'__httpwww_usharesoft_commarketplace_Address_country', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 191, 20))
    country = property(__country.value, __country.set, None, None)
    __region_state = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'region_state'), b'region_state', b'__httpwww_usharesoft_commarketplace_Address_region_state', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 192, 20))
    region_state = property(__region_state.value, __region_state.set, None, None)
    __street = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'street'), b'street', b'__httpwww_usharesoft_commarketplace_Address_street', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 193, 20))
    street = property(__street.value, __street.set, None, None)
    __town = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'town'), b'town', b'__httpwww_usharesoft_commarketplace_Address_town', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 194, 20))
    town = property(__town.value, __town.set, None, None)
    __zipcode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'zipcode'), b'zipcode', b'__httpwww_usharesoft_commarketplace_Address_zipcode', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 195, 20))
    zipcode = property(__zipcode.value, __zipcode.set, None, None)
    _ElementMap.update({__country.name(): __country, 
       __region_state.name(): __region_state, 
       __street.name(): __street, 
       __town.name(): __town, 
       __zipcode.name(): __zipcode})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Address', Address)

class APIKeyPair(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}APIKeyPair with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'APIKeyPair')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 201, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __publicKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'publicKey'), b'publicKey', b'__httpwww_usharesoft_commarketplace_APIKeyPair_publicKey', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 205, 20))
    publicKey = property(__publicKey.value, __publicKey.set, None, None)
    __secretKey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'secretKey'), b'secretKey', b'__httpwww_usharesoft_commarketplace_APIKeyPair_secretKey', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 206, 20))
    secretKey = property(__secretKey.value, __secretKey.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_APIKeyPair_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 207, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__publicKey.name(): __publicKey, 
       __secretKey.name(): __secretKey, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'APIKeyPair', APIKeyPair)

class APIKeyPairs(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}APIKeyPairs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'APIKeyPairs')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 213, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __apiKeyPairs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'apiKeyPairs'), b'apiKeyPairs', b'__httpwww_usharesoft_commarketplace_APIKeyPairs_apiKeyPairs', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 217, 20))
    apiKeyPairs = property(__apiKeyPairs.value, __apiKeyPairs.set, None, None)
    _ElementMap.update({__apiKeyPairs.name(): __apiKeyPairs})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'APIKeyPairs', APIKeyPairs)

class Appliance(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Appliance with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Appliance')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 229, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Appliance_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 233, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Appliance_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 234, 20))
    name = property(__name.value, __name.set, None, None)
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_Appliance_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 235, 20))
    version = property(__version.value, __version.set, None, None)
    __archName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'archName'), b'archName', b'__httpwww_usharesoft_commarketplace_Appliance_archName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 236, 20))
    archName = property(__archName.value, __archName.set, None, None)
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_Appliance_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 237, 20))
    description = property(__description.value, __description.set, None, None)
    __distributionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'distributionName'), b'distributionName', b'__httpwww_usharesoft_commarketplace_Appliance_distributionName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 238, 20))
    distributionName = property(__distributionName.value, __distributionName.set, None, None)
    __revision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'revision'), b'revision', b'__httpwww_usharesoft_commarketplace_Appliance_revision', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 239, 20))
    revision = property(__revision.value, __revision.set, None, None)
    __shared = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'shared'), b'shared', b'__httpwww_usharesoft_commarketplace_Appliance_shared', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 240, 20))
    shared = property(__shared.value, __shared.set, None, None)
    __size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'size'), b'size', b'__httpwww_usharesoft_commarketplace_Appliance_size', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 241, 20))
    size = property(__size.value, __size.set, None, None)
    _ElementMap.update({__uri.name(): __uri, 
       __name.name(): __name, 
       __version.name(): __version, 
       __archName.name(): __archName, 
       __description.name(): __description, 
       __distributionName.name(): __distributionName, 
       __revision.name(): __revision, 
       __shared.name(): __shared, 
       __size.name(): __size})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Appliance', Appliance)

class Appliances(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Appliances with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Appliances')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 247, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __appliances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'appliances'), b'appliances', b'__httpwww_usharesoft_commarketplace_Appliances_appliances', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 251, 20))
    appliances = property(__appliances.value, __appliances.set, None, None)
    _ElementMap.update({__appliances.name(): __appliances})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Appliances', Appliances)

class Approval(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Approval with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Approval')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 285, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __assignee = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'assignee'), b'assignee', b'__httpwww_usharesoft_commarketplace_Approval_assignee', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 289, 20))
    assignee = property(__assignee.value, __assignee.set, None, None)
    __endDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'endDate'), b'endDate', b'__httpwww_usharesoft_commarketplace_Approval_endDate', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 290, 20))
    endDate = property(__endDate.value, __endDate.set, None, None)
    __estimatedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'estimatedTime'), b'estimatedTime', b'__httpwww_usharesoft_commarketplace_Approval_estimatedTime', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 291, 20))
    estimatedTime = property(__estimatedTime.value, __estimatedTime.set, None, None)
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'notes'), b'notes', b'__httpwww_usharesoft_commarketplace_Approval_notes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 292, 20))
    notes = property(__notes.value, __notes.set, None, None)
    __notesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'notesUri'), b'notesUri', b'__httpwww_usharesoft_commarketplace_Approval_notesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 299, 20))
    notesUri = property(__notesUri.value, __notesUri.set, None, None)
    __percentageDone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'percentageDone'), b'percentageDone', b'__httpwww_usharesoft_commarketplace_Approval_percentageDone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 300, 20))
    percentageDone = property(__percentageDone.value, __percentageDone.set, None, None)
    __productItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItem'), b'productItem', b'__httpwww_usharesoft_commarketplace_Approval_productItem', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 301, 20))
    productItem = property(__productItem.value, __productItem.set, None, None)
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'startDate'), b'startDate', b'__httpwww_usharesoft_commarketplace_Approval_startDate', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 302, 20))
    startDate = property(__startDate.value, __startDate.set, None, None)
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'status'), b'status', b'__httpwww_usharesoft_commarketplace_Approval_status', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 303, 20))
    status = property(__status.value, __status.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Approval_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 314, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__assignee.name(): __assignee, 
       __endDate.name(): __endDate, 
       __estimatedTime.name(): __estimatedTime, 
       __notes.name(): __notes, 
       __notesUri.name(): __notesUri, 
       __percentageDone.name(): __percentageDone, 
       __productItem.name(): __productItem, 
       __startDate.name(): __startDate, 
       __status.name(): __status, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Approval', Approval)

class Approvals(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Approvals with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Approvals')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 320, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __approvals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'approvals'), b'approvals', b'__httpwww_usharesoft_commarketplace_Approvals_approvals', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 324, 20))
    approvals = property(__approvals.value, __approvals.set, None, None)
    _ElementMap.update({__approvals.name(): __approvals})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Approvals', Approvals)

class Artifacts(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Artifacts with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Artifacts')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 351, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __artifacts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'artifacts'), b'artifacts', b'__httpwww_usharesoft_commarketplace_Artifacts_artifacts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 355, 20))
    artifacts = property(__artifacts.value, __artifacts.set, None, None)
    _ElementMap.update({__artifacts.name(): __artifacts})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Artifacts', Artifacts)

class Badge(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Badge with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Badge')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 367, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __disabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'disabled'), b'disabled', b'__httpwww_usharesoft_commarketplace_Badge_disabled', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 371, 20))
    disabled = property(__disabled.value, __disabled.set, None, None)
    __icon = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'icon'), b'icon', b'__httpwww_usharesoft_commarketplace_Badge_icon', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 372, 20))
    icon = property(__icon.value, __icon.set, None, None)
    __label = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'label'), b'label', b'__httpwww_usharesoft_commarketplace_Badge_label', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 373, 20))
    label = property(__label.value, __label.set, None, None)
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'title'), b'title', b'__httpwww_usharesoft_commarketplace_Badge_title', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 374, 20))
    title = property(__title.value, __title.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Badge_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 375, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__disabled.name(): __disabled, 
       __icon.name(): __icon, 
       __label.name(): __label, 
       __title.name(): __title, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Badge', Badge)

class Badges(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Badges with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Badges')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 381, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badges'), b'badges', b'__httpwww_usharesoft_commarketplace_Badges_badges', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 385, 20))
    badges = property(__badges.value, __badges.set, None, None)
    _ElementMap.update({__badges.name(): __badges})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Badges', Badges)

class Categories(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Categories with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Categories')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 397, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __categories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'categories'), b'categories', b'__httpwww_usharesoft_commarketplace_Categories_categories', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 401, 20))
    categories = property(__categories.value, __categories.set, None, None)
    _ElementMap.update({__categories.name(): __categories})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Categories', Categories)

class Category(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Category with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Category')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 413, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Category_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 417, 20))
    name = property(__name.value, __name.set, None, None)
    __orgUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'orgUri'), b'orgUri', b'__httpwww_usharesoft_commarketplace_Category_orgUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 418, 20))
    orgUri = property(__orgUri.value, __orgUri.set, None, None)
    __subCategories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'subCategories'), b'subCategories', b'__httpwww_usharesoft_commarketplace_Category_subCategories', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 419, 20))
    subCategories = property(__subCategories.value, __subCategories.set, None, None)
    __subCategoryUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'subCategoryUri'), b'subCategoryUri', b'__httpwww_usharesoft_commarketplace_Category_subCategoryUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 426, 20))
    subCategoryUri = property(__subCategoryUri.value, __subCategoryUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Category_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 427, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__name.name(): __name, 
       __orgUri.name(): __orgUri, 
       __subCategories.name(): __subCategories, 
       __subCategoryUri.name(): __subCategoryUri, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Category', Category)

class Comment(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Comment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Comment')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 433, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __abused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'abused'), b'abused', b'__httpwww_usharesoft_commarketplace_Comment_abused', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 437, 20))
    abused = property(__abused.value, __abused.set, None, None)
    __abuseUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'abuseUri'), b'abuseUri', b'__httpwww_usharesoft_commarketplace_Comment_abuseUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 438, 20))
    abuseUri = property(__abuseUri.value, __abuseUri.set, None, None)
    __likesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'likesUri'), b'likesUri', b'__httpwww_usharesoft_commarketplace_Comment_likesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 439, 20))
    likesUri = property(__likesUri.value, __likesUri.set, None, None)
    __loginName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'loginName'), b'loginName', b'__httpwww_usharesoft_commarketplace_Comment_loginName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 440, 20))
    loginName = property(__loginName.value, __loginName.set, None, None)
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'message'), b'message', b'__httpwww_usharesoft_commarketplace_Comment_message', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 441, 20))
    message = property(__message.value, __message.set, None, None)
    __nbAbused = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbAbused'), b'nbAbused', b'__httpwww_usharesoft_commarketplace_Comment_nbAbused', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 442, 20))
    nbAbused = property(__nbAbused.value, __nbAbused.set, None, None)
    __nbDislike = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbDislike'), b'nbDislike', b'__httpwww_usharesoft_commarketplace_Comment_nbDislike', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 443, 20))
    nbDislike = property(__nbDislike.value, __nbDislike.set, None, None)
    __nbLike = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbLike'), b'nbLike', b'__httpwww_usharesoft_commarketplace_Comment_nbLike', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 444, 20))
    nbLike = property(__nbLike.value, __nbLike.set, None, None)
    __photo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'photo'), b'photo', b'__httpwww_usharesoft_commarketplace_Comment_photo', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 445, 20))
    photo = property(__photo.value, __photo.set, None, None)
    __rating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'rating'), b'rating', b'__httpwww_usharesoft_commarketplace_Comment_rating', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 446, 20))
    rating = property(__rating.value, __rating.set, None, None)
    __replies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'replies'), b'replies', b'__httpwww_usharesoft_commarketplace_Comment_replies', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 451, 20))
    replies = property(__replies.value, __replies.set, None, None)
    __replyUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'replyUri'), b'replyUri', b'__httpwww_usharesoft_commarketplace_Comment_replyUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 458, 20))
    replyUri = property(__replyUri.value, __replyUri.set, None, None)
    __tags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'tags'), b'tags', b'__httpwww_usharesoft_commarketplace_Comment_tags', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 459, 20))
    tags = property(__tags.value, __tags.set, None, None)
    __timestamp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'timestamp'), b'timestamp', b'__httpwww_usharesoft_commarketplace_Comment_timestamp', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 460, 20))
    timestamp = property(__timestamp.value, __timestamp.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_Comment_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 461, 20))
    type = property(__type.value, __type.set, None, None)
    __reference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'reference'), b'reference', b'__httpwww_usharesoft_commarketplace_Comment_reference', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 471, 20))
    reference = property(__reference.value, __reference.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Comment_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 472, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__abused.name(): __abused, 
       __abuseUri.name(): __abuseUri, 
       __likesUri.name(): __likesUri, 
       __loginName.name(): __loginName, 
       __message.name(): __message, 
       __nbAbused.name(): __nbAbused, 
       __nbDislike.name(): __nbDislike, 
       __nbLike.name(): __nbLike, 
       __photo.name(): __photo, 
       __rating.name(): __rating, 
       __replies.name(): __replies, 
       __replyUri.name(): __replyUri, 
       __tags.name(): __tags, 
       __timestamp.name(): __timestamp, 
       __type.name(): __type, 
       __reference.name(): __reference, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Comment', Comment)

class Comments(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Comments with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Comments')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 478, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'comments'), b'comments', b'__httpwww_usharesoft_commarketplace_Comments_comments', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 482, 20))
    comments = property(__comments.value, __comments.set, None, None)
    _ElementMap.update({__comments.name(): __comments})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Comments', Comments)

class Companies(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Companies with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Companies')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 494, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __companies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'companies'), b'companies', b'__httpwww_usharesoft_commarketplace_Companies_companies', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 498, 20))
    companies = property(__companies.value, __companies.set, None, None)
    _ElementMap.update({__companies.name(): __companies})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Companies', Companies)

class Company(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Company with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Company')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 510, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'address'), b'address', b'__httpwww_usharesoft_commarketplace_Company_address', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 514, 20))
    address = property(__address.value, __address.set, None, None)
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'logo'), b'logo', b'__httpwww_usharesoft_commarketplace_Company_logo', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 515, 20))
    logo = property(__logo.value, __logo.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Company_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 516, 20))
    name = property(__name.value, __name.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_Company_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 517, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Company_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 518, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __website = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'website'), b'website', b'__httpwww_usharesoft_commarketplace_Company_website', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 519, 20))
    website = property(__website.value, __website.set, None, None)
    _ElementMap.update({__address.name(): __address, 
       __logo.name(): __logo, 
       __name.name(): __name, 
       __parentUri.name(): __parentUri, 
       __uri.name(): __uri, 
       __website.name(): __website})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Company', Company)

class CompatibleProduct(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}CompatibleProduct with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'CompatibleProduct')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 525, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_CompatibleProduct_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 529, 20))
    name = property(__name.value, __name.set, None, None)
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemsUri'), b'productItemsUri', b'__httpwww_usharesoft_commarketplace_CompatibleProduct_productItemsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 530, 20))
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_CompatibleProduct_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 531, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_CompatibleProduct_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 532, 20))
    version = property(__version.value, __version.set, None, None)
    _ElementMap.update({__name.name(): __name, 
       __productItemsUri.name(): __productItemsUri, 
       __uri.name(): __uri, 
       __version.name(): __version})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'CompatibleProduct', CompatibleProduct)

class CompatibleProducts(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}CompatibleProducts with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'CompatibleProducts')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 538, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __compatibleProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'compatibleProducts'), b'compatibleProducts', b'__httpwww_usharesoft_commarketplace_CompatibleProducts_compatibleProducts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 542, 20))
    compatibleProducts = property(__compatibleProducts.value, __compatibleProducts.set, None, None)
    _ElementMap.update({__compatibleProducts.name(): __compatibleProducts})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'CompatibleProducts', CompatibleProducts)

class Cost(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Cost with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Cost')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 555, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __currency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'currency'), b'currency', b'__httpwww_usharesoft_commarketplace_Cost_currency', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 559, 20))
    currency = property(__currency.value, __currency.set, None, None)
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_Cost_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 560, 20))
    description = property(__description.value, __description.set, None, None)
    __frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'frequency'), b'frequency', b'__httpwww_usharesoft_commarketplace_Cost_frequency', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 561, 20))
    frequency = property(__frequency.value, __frequency.set, None, None)
    __price = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'price'), b'price', b'__httpwww_usharesoft_commarketplace_Cost_price', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 562, 20))
    price = property(__price.value, __price.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_Cost_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 563, 20))
    type = property(__type.value, __type.set, None, None)
    _ElementMap.update({__currency.name(): __currency, 
       __description.name(): __description, 
       __frequency.name(): __frequency, 
       __price.name(): __price, 
       __type.name(): __type})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Cost', Cost)

class Costs(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Costs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Costs')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 582, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __costs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'costs'), b'costs', b'__httpwww_usharesoft_commarketplace_Costs_costs', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 586, 20))
    costs = property(__costs.value, __costs.set, None, None)
    _ElementMap.update({__costs.name(): __costs})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Costs', Costs)

class DownloadTicket(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}DownloadTicket with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'DownloadTicket')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 615, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __downloadUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'downloadUri'), b'downloadUri', b'__httpwww_usharesoft_commarketplace_DownloadTicket_downloadUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 619, 20))
    downloadUri = property(__downloadUri.value, __downloadUri.set, None, None)
    _ElementMap.update({__downloadUri.name(): __downloadUri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'DownloadTicket', DownloadTicket)

class DownloadTickets(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}DownloadTickets with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'DownloadTickets')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 625, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __downloadTickets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'downloadTickets'), b'downloadTickets', b'__httpwww_usharesoft_commarketplace_DownloadTickets_downloadTickets', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 629, 20))
    downloadTickets = property(__downloadTickets.value, __downloadTickets.set, None, None)
    _ElementMap.update({__downloadTickets.name(): __downloadTickets})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'DownloadTickets', DownloadTickets)

class Edition(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Edition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Edition')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 642, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __costs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'costs'), b'costs', b'__httpwww_usharesoft_commarketplace_Edition_costs', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 646, 20))
    costs = property(__costs.value, __costs.set, None, None)
    __idealFor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'idealFor'), b'idealFor', b'__httpwww_usharesoft_commarketplace_Edition_idealFor', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 653, 20))
    idealFor = property(__idealFor.value, __idealFor.set, None, None)
    __includes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'includes'), b'includes', b'__httpwww_usharesoft_commarketplace_Edition_includes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 654, 20))
    includes = property(__includes.value, __includes.set, None, None)
    __minEngagement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'minEngagement'), b'minEngagement', b'__httpwww_usharesoft_commarketplace_Edition_minEngagement', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 661, 20))
    minEngagement = property(__minEngagement.value, __minEngagement.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Edition_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 662, 20))
    name = property(__name.value, __name.set, None, None)
    __sku = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'sku'), b'sku', b'__httpwww_usharesoft_commarketplace_Edition_sku', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 663, 20))
    sku = property(__sku.value, __sku.set, None, None)
    __trial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'trial'), b'trial', b'__httpwww_usharesoft_commarketplace_Edition_trial', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 664, 20))
    trial = property(__trial.value, __trial.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_Edition_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 665, 20))
    type = property(__type.value, __type.set, None, None)
    __units = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'units'), b'units', b'__httpwww_usharesoft_commarketplace_Edition_units', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 675, 20))
    units = property(__units.value, __units.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Edition_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 682, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __purchased = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchased'), b'purchased', b'__httpwww_usharesoft_commarketplace_Edition_purchased', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 683, 20))
    purchased = property(__purchased.value, __purchased.set, None, None)
    __purchasedUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchasedUri'), b'purchasedUri', b'__httpwww_usharesoft_commarketplace_Edition_purchasedUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 684, 20))
    purchasedUri = property(__purchasedUri.value, __purchasedUri.set, None, None)
    _ElementMap.update({__costs.name(): __costs, 
       __idealFor.name(): __idealFor, 
       __includes.name(): __includes, 
       __minEngagement.name(): __minEngagement, 
       __name.name(): __name, 
       __sku.name(): __sku, 
       __trial.name(): __trial, 
       __type.name(): __type, 
       __units.name(): __units, 
       __uri.name(): __uri, 
       __purchased.name(): __purchased, 
       __purchasedUri.name(): __purchasedUri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Edition', Edition)

class Editions(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Editions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Editions')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 690, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __editions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'editions'), b'editions', b'__httpwww_usharesoft_commarketplace_Editions_editions', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 694, 20))
    editions = property(__editions.value, __editions.set, None, None)
    _ElementMap.update({__editions.name(): __editions})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Editions', Editions)

class Entitlements(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Entitlements with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Entitlements')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 713, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __entitlements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'entitlements'), b'entitlements', b'__httpwww_usharesoft_commarketplace_Entitlements_entitlements', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 717, 20))
    entitlements = property(__entitlements.value, __entitlements.set, None, None)
    _ElementMap.update({__entitlements.name(): __entitlements})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Entitlements', Entitlements)

class Export(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Export with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Export')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 729, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Export_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 733, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __applianceTemplate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'applianceTemplate'), b'applianceTemplate', b'__httpwww_usharesoft_commarketplace_Export_applianceTemplate', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 734, 20))
    applianceTemplate = property(__applianceTemplate.value, __applianceTemplate.set, None, None)
    __accountUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'accountUri'), b'accountUri', b'__httpwww_usharesoft_commarketplace_Export_accountUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 735, 20))
    accountUri = property(__accountUri.value, __accountUri.set, None, None)
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'status'), b'status', b'__httpwww_usharesoft_commarketplace_Export_status', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 736, 20))
    status = property(__status.value, __status.set, None, None)
    _ElementMap.update({__uri.name(): __uri, 
       __applianceTemplate.name(): __applianceTemplate, 
       __accountUri.name(): __accountUri, 
       __status.name(): __status})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Export', Export)

class Exports_(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Exports with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Exports')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 742, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __exports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'exports'), b'exports', b'__httpwww_usharesoft_commarketplace_Exports__exports', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 746, 20))
    exports = property(__exports.value, __exports.set, None, None)
    _ElementMap.update({__exports.name(): __exports})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Exports', Exports_)

class Images(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Images with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Images')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 781, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __images = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'images'), b'images', b'__httpwww_usharesoft_commarketplace_Images_images', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 785, 20))
    images = property(__images.value, __images.set, None, None)
    _ElementMap.update({__images.name(): __images})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Images', Images)

class Include(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Include with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Include')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 797, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_Include_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 801, 20))
    description = property(__description.value, __description.set, None, None)
    __tooltip = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'tooltip'), b'tooltip', b'__httpwww_usharesoft_commarketplace_Include_tooltip', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 802, 20))
    tooltip = property(__tooltip.value, __tooltip.set, None, None)
    _ElementMap.update({__description.name(): __description, 
       __tooltip.name(): __tooltip})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Include', Include)

class Includes(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Includes with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Includes')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 808, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __includes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'includes'), b'includes', b'__httpwww_usharesoft_commarketplace_Includes_includes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 812, 20))
    includes = property(__includes.value, __includes.set, None, None)
    _ElementMap.update({__includes.name(): __includes})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Includes', Includes)

class InstallSettings(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}InstallSettings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'InstallSettings')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 824, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __adminPassword = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'adminPassword'), b'adminPassword', b'__httpwww_usharesoft_commarketplace_InstallSettings_adminPassword', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 828, 20))
    adminPassword = property(__adminPassword.value, __adminPassword.set, None, None)
    __timezone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'timezone'), b'timezone', b'__httpwww_usharesoft_commarketplace_InstallSettings_timezone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 829, 20))
    timezone = property(__timezone.value, __timezone.set, None, None)
    _ElementMap.update({__adminPassword.name(): __adminPassword, 
       __timezone.name(): __timezone})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'InstallSettings', InstallSettings)

class MarketingPlan(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}MarketingPlan with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'MarketingPlan')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 910, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __categories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'categories'), b'categories', b'__httpwww_usharesoft_commarketplace_MarketingPlan_categories', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 914, 20))
    categories = property(__categories.value, __categories.set, None, None)
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'category'), b'category', b'__httpwww_usharesoft_commarketplace_MarketingPlan_category', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 921, 20))
    category = property(__category.value, __category.set, None, None)
    __clonesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'clonesUri'), b'clonesUri', b'__httpwww_usharesoft_commarketplace_MarketingPlan_clonesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 922, 20))
    clonesUri = property(__clonesUri.value, __clonesUri.set, None, None)
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'details'), b'details', b'__httpwww_usharesoft_commarketplace_MarketingPlan_details', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 923, 20))
    details = property(__details.value, __details.set, None, None)
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'logo'), b'logo', b'__httpwww_usharesoft_commarketplace_MarketingPlan_logo', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 924, 20))
    logo = property(__logo.value, __logo.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_MarketingPlan_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 925, 20))
    name = property(__name.value, __name.set, None, None)
    __nbReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbReferences'), b'nbReferences', b'__httpwww_usharesoft_commarketplace_MarketingPlan_nbReferences', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 926, 20))
    nbReferences = property(__nbReferences.value, __nbReferences.set, None, None)
    __overview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'overview'), b'overview', b'__httpwww_usharesoft_commarketplace_MarketingPlan_overview', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 927, 20))
    overview = property(__overview.value, __overview.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_MarketingPlan_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 928, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemsUri'), b'productItemsUri', b'__httpwww_usharesoft_commarketplace_MarketingPlan_productItemsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 929, 20))
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)
    __resources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'resources'), b'resources', b'__httpwww_usharesoft_commarketplace_MarketingPlan_resources', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 930, 20))
    resources = property(__resources.value, __resources.set, None, None)
    __screenshots = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'screenshots'), b'screenshots', b'__httpwww_usharesoft_commarketplace_MarketingPlan_screenshots', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 937, 20))
    screenshots = property(__screenshots.value, __screenshots.set, None, None)
    __screenShotsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'screenShotsUri'), b'screenShotsUri', b'__httpwww_usharesoft_commarketplace_MarketingPlan_screenShotsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 944, 20))
    screenShotsUri = property(__screenShotsUri.value, __screenShotsUri.set, None, None)
    __tagLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'tagLine'), b'tagLine', b'__httpwww_usharesoft_commarketplace_MarketingPlan_tagLine', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 945, 20))
    tagLine = property(__tagLine.value, __tagLine.set, None, None)
    __tags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'tags'), b'tags', b'__httpwww_usharesoft_commarketplace_MarketingPlan_tags', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 946, 20))
    tags = property(__tags.value, __tags.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_MarketingPlan_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 947, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorUri'), b'vendorUri', b'__httpwww_usharesoft_commarketplace_MarketingPlan_vendorUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 948, 20))
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)
    _ElementMap.update({__categories.name(): __categories, 
       __category.name(): __category, 
       __clonesUri.name(): __clonesUri, 
       __details.name(): __details, 
       __logo.name(): __logo, 
       __name.name(): __name, 
       __nbReferences.name(): __nbReferences, 
       __overview.name(): __overview, 
       __parentUri.name(): __parentUri, 
       __productItemsUri.name(): __productItemsUri, 
       __resources.name(): __resources, 
       __screenshots.name(): __screenshots, 
       __screenShotsUri.name(): __screenShotsUri, 
       __tagLine.name(): __tagLine, 
       __tags.name(): __tags, 
       __uri.name(): __uri, 
       __vendorUri.name(): __vendorUri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'MarketingPlan', MarketingPlan)

class MarketingPlans(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}MarketingPlans with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'MarketingPlans')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 954, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __marketingPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketingPlans'), b'marketingPlans', b'__httpwww_usharesoft_commarketplace_MarketingPlans_marketingPlans', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 958, 20))
    marketingPlans = property(__marketingPlans.value, __marketingPlans.set, None, None)
    _ElementMap.update({__marketingPlans.name(): __marketingPlans})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'MarketingPlans', MarketingPlans)

class Marketplace(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Marketplace with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Marketplace')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 971, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __approvalsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'approvalsUri'), b'approvalsUri', b'__httpwww_usharesoft_commarketplace_Marketplace_approvalsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 975, 20))
    approvalsUri = property(__approvalsUri.value, __approvalsUri.set, None, None)
    __badgesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badgesUri'), b'badgesUri', b'__httpwww_usharesoft_commarketplace_Marketplace_badgesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 976, 20))
    badgesUri = property(__badgesUri.value, __badgesUri.set, None, None)
    __compatibleProductsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'compatibleProductsUri'), b'compatibleProductsUri', b'__httpwww_usharesoft_commarketplace_Marketplace_compatibleProductsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 977, 20))
    compatibleProductsUri = property(__compatibleProductsUri.value, __compatibleProductsUri.set, None, None)
    __managersUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'managersUri'), b'managersUri', b'__httpwww_usharesoft_commarketplace_Marketplace_managersUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 978, 20))
    managersUri = property(__managersUri.value, __managersUri.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Marketplace_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 979, 20))
    name = property(__name.value, __name.set, None, None)
    __productsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productsUri'), b'productsUri', b'__httpwww_usharesoft_commarketplace_Marketplace_productsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 980, 20))
    productsUri = property(__productsUri.value, __productsUri.set, None, None)
    __productTypesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productTypesUri'), b'productTypesUri', b'__httpwww_usharesoft_commarketplace_Marketplace_productTypesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 981, 20))
    productTypesUri = property(__productTypesUri.value, __productTypesUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Marketplace_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 982, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __vendorsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorsUri'), b'vendorsUri', b'__httpwww_usharesoft_commarketplace_Marketplace_vendorsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 983, 20))
    vendorsUri = property(__vendorsUri.value, __vendorsUri.set, None, None)
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'commentsUri'), b'commentsUri', b'__httpwww_usharesoft_commarketplace_Marketplace_commentsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 984, 20))
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)
    _ElementMap.update({__approvalsUri.name(): __approvalsUri, 
       __badgesUri.name(): __badgesUri, 
       __compatibleProductsUri.name(): __compatibleProductsUri, 
       __managersUri.name(): __managersUri, 
       __name.name(): __name, 
       __productsUri.name(): __productsUri, 
       __productTypesUri.name(): __productTypesUri, 
       __uri.name(): __uri, 
       __vendorsUri.name(): __vendorsUri, 
       __commentsUri.name(): __commentsUri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Marketplace', Marketplace)

class Marketplaces(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Marketplaces with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Marketplaces')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 990, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __marketplaces = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketplaces'), b'marketplaces', b'__httpwww_usharesoft_commarketplace_Marketplaces_marketplaces', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 994, 20))
    marketplaces = property(__marketplaces.value, __marketplaces.set, None, None)
    _ElementMap.update({__marketplaces.name(): __marketplaces})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Marketplaces', Marketplaces)

class OpStatus(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}OpStatus with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'OpStatus')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1006, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __bytesLoaded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'bytesLoaded'), b'bytesLoaded', b'__httpwww_usharesoft_commarketplace_OpStatus_bytesLoaded', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1010, 20))
    bytesLoaded = property(__bytesLoaded.value, __bytesLoaded.set, None, None)
    __bytesTotal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'bytesTotal'), b'bytesTotal', b'__httpwww_usharesoft_commarketplace_OpStatus_bytesTotal', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1011, 20))
    bytesTotal = property(__bytesTotal.value, __bytesTotal.set, None, None)
    __cancelled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'cancelled'), b'cancelled', b'__httpwww_usharesoft_commarketplace_OpStatus_cancelled', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1012, 20))
    cancelled = property(__cancelled.value, __cancelled.set, None, None)
    __complete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'complete'), b'complete', b'__httpwww_usharesoft_commarketplace_OpStatus_complete', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1013, 20))
    complete = property(__complete.value, __complete.set, None, None)
    __detailedError = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'detailedError'), b'detailedError', b'__httpwww_usharesoft_commarketplace_OpStatus_detailedError', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1014, 20))
    detailedError = property(__detailedError.value, __detailedError.set, None, None)
    __detailedErrorMsg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'detailedErrorMsg'), b'detailedErrorMsg', b'__httpwww_usharesoft_commarketplace_OpStatus_detailedErrorMsg', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1015, 20))
    detailedErrorMsg = property(__detailedErrorMsg.value, __detailedErrorMsg.set, None, None)
    __error = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'error'), b'error', b'__httpwww_usharesoft_commarketplace_OpStatus_error', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1016, 20))
    error = property(__error.value, __error.set, None, None)
    __errorMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'errorMessage'), b'errorMessage', b'__httpwww_usharesoft_commarketplace_OpStatus_errorMessage', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1017, 20))
    errorMessage = property(__errorMessage.value, __errorMessage.set, None, None)
    __eta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'eta'), b'eta', b'__httpwww_usharesoft_commarketplace_OpStatus_eta', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1018, 20))
    eta = property(__eta.value, __eta.set, None, None)
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'message'), b'message', b'__httpwww_usharesoft_commarketplace_OpStatus_message', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1019, 20))
    message = property(__message.value, __message.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_OpStatus_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1020, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __percentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'percentage'), b'percentage', b'__httpwww_usharesoft_commarketplace_OpStatus_percentage', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1021, 20))
    percentage = property(__percentage.value, __percentage.set, None, None)
    __published = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'published'), b'published', b'__httpwww_usharesoft_commarketplace_OpStatus_published', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1022, 20))
    published = property(__published.value, __published.set, None, None)
    __totalTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'totalTime'), b'totalTime', b'__httpwww_usharesoft_commarketplace_OpStatus_totalTime', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1023, 20))
    totalTime = property(__totalTime.value, __totalTime.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_OpStatus_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1024, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__bytesLoaded.name(): __bytesLoaded, 
       __bytesTotal.name(): __bytesTotal, 
       __cancelled.name(): __cancelled, 
       __complete.name(): __complete, 
       __detailedError.name(): __detailedError, 
       __detailedErrorMsg.name(): __detailedErrorMsg, 
       __error.name(): __error, 
       __errorMessage.name(): __errorMessage, 
       __eta.name(): __eta, 
       __message.name(): __message, 
       __parentUri.name(): __parentUri, 
       __percentage.name(): __percentage, 
       __published.name(): __published, 
       __totalTime.name(): __totalTime, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'OpStatus', OpStatus)

class OpStatuses(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}OpStatuses with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'OpStatuses')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1030, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __statuses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'statuses'), b'statuses', b'__httpwww_usharesoft_commarketplace_OpStatuses_statuses', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1034, 20))
    statuses = property(__statuses.value, __statuses.set, None, None)
    _ElementMap.update({__statuses.name(): __statuses})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'OpStatuses', OpStatuses)

class Order(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Order with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Order')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1046, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __edition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'edition'), b'edition', b'__httpwww_usharesoft_commarketplace_Order_edition', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1050, 20))
    edition = property(__edition.value, __edition.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Order_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1051, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__edition.name(): __edition, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Order', Order)

class Orders(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Orders with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Orders')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1057, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __orders = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'orders'), b'orders', b'__httpwww_usharesoft_commarketplace_Orders_orders', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1061, 20))
    orders = property(__orders.value, __orders.set, None, None)
    _ElementMap.update({__orders.name(): __orders})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Orders', Orders)

class Org(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Org with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Org')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1073, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __activateNewUsers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'activateNewUsers'), b'activateNewUsers', b'__httpwww_usharesoft_commarketplace_Org_activateNewUsers', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1077, 20))
    activateNewUsers = property(__activateNewUsers.value, __activateNewUsers.set, None, None)
    __admin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'admin'), b'admin', b'__httpwww_usharesoft_commarketplace_Org_admin', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1078, 20))
    admin = property(__admin.value, __admin.set, None, None)
    __categoriesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'categoriesUri'), b'categoriesUri', b'__httpwww_usharesoft_commarketplace_Org_categoriesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1079, 20))
    categoriesUri = property(__categoriesUri.value, __categoriesUri.set, None, None)
    __companiesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'companiesUri'), b'companiesUri', b'__httpwww_usharesoft_commarketplace_Org_companiesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1080, 20))
    companiesUri = property(__companiesUri.value, __companiesUri.set, None, None)
    __company = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'company'), b'company', b'__httpwww_usharesoft_commarketplace_Org_company', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1081, 20))
    company = property(__company.value, __company.set, None, None)
    __defaultOrg = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'defaultOrg'), b'defaultOrg', b'__httpwww_usharesoft_commarketplace_Org_defaultOrg', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1082, 20))
    defaultOrg = property(__defaultOrg.value, __defaultOrg.set, None, None)
    __membersUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'membersUri'), b'membersUri', b'__httpwww_usharesoft_commarketplace_Org_membersUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1083, 20))
    membersUri = property(__membersUri.value, __membersUri.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Org_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1084, 20))
    name = property(__name.value, __name.set, None, None)
    __rolesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'rolesUri'), b'rolesUri', b'__httpwww_usharesoft_commarketplace_Org_rolesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1085, 20))
    rolesUri = property(__rolesUri.value, __rolesUri.set, None, None)
    __subscriptionProfiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'subscriptionProfiles'), b'subscriptionProfiles', b'__httpwww_usharesoft_commarketplace_Org_subscriptionProfiles', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1086, 20))
    subscriptionProfiles = property(__subscriptionProfiles.value, __subscriptionProfiles.set, None, None)
    __subscriptionProfilesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'subscriptionProfilesUri'), b'subscriptionProfilesUri', b'__httpwww_usharesoft_commarketplace_Org_subscriptionProfilesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1094, 20))
    subscriptionProfilesUri = property(__subscriptionProfilesUri.value, __subscriptionProfilesUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Org_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1095, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __vendorsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorsUri'), b'vendorsUri', b'__httpwww_usharesoft_commarketplace_Org_vendorsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1096, 20))
    vendorsUri = property(__vendorsUri.value, __vendorsUri.set, None, None)
    _ElementMap.update({__activateNewUsers.name(): __activateNewUsers, 
       __admin.name(): __admin, 
       __categoriesUri.name(): __categoriesUri, 
       __companiesUri.name(): __companiesUri, 
       __company.name(): __company, 
       __defaultOrg.name(): __defaultOrg, 
       __membersUri.name(): __membersUri, 
       __name.name(): __name, 
       __rolesUri.name(): __rolesUri, 
       __subscriptionProfiles.name(): __subscriptionProfiles, 
       __subscriptionProfilesUri.name(): __subscriptionProfilesUri, 
       __uri.name(): __uri, 
       __vendorsUri.name(): __vendorsUri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Org', Org)

class Orgs(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Orgs with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Orgs')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1102, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __orgs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'orgs'), b'orgs', b'__httpwww_usharesoft_commarketplace_Orgs_orgs', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1106, 20))
    orgs = property(__orgs.value, __orgs.set, None, None)
    _ElementMap.update({__orgs.name(): __orgs})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Orgs', Orgs)

class OSSettings(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}OSSettings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'OSSettings')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1118, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_OSSettings_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1122, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __applianceUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'applianceUri'), b'applianceUri', b'__httpwww_usharesoft_commarketplace_OSSettings_applianceUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1123, 20))
    applianceUri = property(__applianceUri.value, __applianceUri.set, None, None)
    __arch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'arch'), b'arch', b'__httpwww_usharesoft_commarketplace_OSSettings_arch', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1125, 20))
    arch = property(__arch.value, __arch.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_OSSettings_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1126, 20))
    name = property(__name.value, __name.set, None, None)
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_OSSettings_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1127, 20))
    version = property(__version.value, __version.set, None, None)
    _ElementMap.update({__uri.name(): __uri, 
       __applianceUri.name(): __applianceUri, 
       __arch.name(): __arch, 
       __name.name(): __name, 
       __version.name(): __version})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'OSSettings', OSSettings)

class Period(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Period with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Period')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1133, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __interval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'interval'), b'interval', b'__httpwww_usharesoft_commarketplace_Period_interval', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1137, 20))
    interval = property(__interval.value, __interval.set, None, None)
    __nb = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nb'), b'nb', b'__httpwww_usharesoft_commarketplace_Period_nb', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1138, 20))
    nb = property(__nb.value, __nb.set, None, None)
    _ElementMap.update({__interval.name(): __interval, 
       __nb.name(): __nb})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Period', Period)

class PricingPlan(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}PricingPlan with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'PricingPlan')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1144, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __clonesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'clonesUri'), b'clonesUri', b'__httpwww_usharesoft_commarketplace_PricingPlan_clonesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1148, 20))
    clonesUri = property(__clonesUri.value, __clonesUri.set, None, None)
    __editions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'editions'), b'editions', b'__httpwww_usharesoft_commarketplace_PricingPlan_editions', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1149, 20))
    editions = property(__editions.value, __editions.set, None, None)
    __editionsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'editionsUri'), b'editionsUri', b'__httpwww_usharesoft_commarketplace_PricingPlan_editionsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1156, 20))
    editionsUri = property(__editionsUri.value, __editionsUri.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_PricingPlan_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1157, 20))
    name = property(__name.value, __name.set, None, None)
    __nbReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbReferences'), b'nbReferences', b'__httpwww_usharesoft_commarketplace_PricingPlan_nbReferences', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1158, 20))
    nbReferences = property(__nbReferences.value, __nbReferences.set, None, None)
    __notes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'notes'), b'notes', b'__httpwww_usharesoft_commarketplace_PricingPlan_notes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1159, 20))
    notes = property(__notes.value, __notes.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_PricingPlan_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1160, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemsUri'), b'productItemsUri', b'__httpwww_usharesoft_commarketplace_PricingPlan_productItemsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1161, 20))
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)
    __resources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'resources'), b'resources', b'__httpwww_usharesoft_commarketplace_PricingPlan_resources', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1162, 20))
    resources = property(__resources.value, __resources.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_PricingPlan_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1169, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorUri'), b'vendorUri', b'__httpwww_usharesoft_commarketplace_PricingPlan_vendorUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1170, 20))
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)
    _ElementMap.update({__clonesUri.name(): __clonesUri, 
       __editions.name(): __editions, 
       __editionsUri.name(): __editionsUri, 
       __name.name(): __name, 
       __nbReferences.name(): __nbReferences, 
       __notes.name(): __notes, 
       __parentUri.name(): __parentUri, 
       __productItemsUri.name(): __productItemsUri, 
       __resources.name(): __resources, 
       __uri.name(): __uri, 
       __vendorUri.name(): __vendorUri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'PricingPlan', PricingPlan)

class PricingPlans(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}PricingPlans with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'PricingPlans')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1176, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __pricingPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'pricingPlans'), b'pricingPlans', b'__httpwww_usharesoft_commarketplace_PricingPlans_pricingPlans', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1180, 20))
    pricingPlans = property(__pricingPlans.value, __pricingPlans.set, None, None)
    _ElementMap.update({__pricingPlans.name(): __pricingPlans})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'PricingPlans', PricingPlans)

class Product(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Product with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Product')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1192, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'active'), b'active', b'__httpwww_usharesoft_commarketplace_Product_active', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1196, 20))
    active = property(__active.value, __active.set, None, None)
    __allowComments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'allowComments'), b'allowComments', b'__httpwww_usharesoft_commarketplace_Product_allowComments', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1197, 20))
    allowComments = property(__allowComments.value, __allowComments.set, None, None)
    __comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'comments'), b'comments', b'__httpwww_usharesoft_commarketplace_Product_comments', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1198, 20))
    comments = property(__comments.value, __comments.set, None, None)
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'commentsUri'), b'commentsUri', b'__httpwww_usharesoft_commarketplace_Product_commentsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1205, 20))
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)
    __items = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'items'), b'items', b'__httpwww_usharesoft_commarketplace_Product_items', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1206, 20))
    items = property(__items.value, __items.set, None, None)
    __itemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'itemsUri'), b'itemsUri', b'__httpwww_usharesoft_commarketplace_Product_itemsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1213, 20))
    itemsUri = property(__itemsUri.value, __itemsUri.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Product_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1214, 20))
    name = property(__name.value, __name.set, None, None)
    __nbItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbItems'), b'nbItems', b'__httpwww_usharesoft_commarketplace_Product_nbItems', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1215, 20))
    nbItems = property(__nbItems.value, __nbItems.set, None, None)
    __nbPendingApprovals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbPendingApprovals'), b'nbPendingApprovals', b'__httpwww_usharesoft_commarketplace_Product_nbPendingApprovals', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1216, 20))
    nbPendingApprovals = property(__nbPendingApprovals.value, __nbPendingApprovals.set, None, None)
    __nbPrivateItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbPrivateItems'), b'nbPrivateItems', b'__httpwww_usharesoft_commarketplace_Product_nbPrivateItems', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1217, 20))
    nbPrivateItems = property(__nbPrivateItems.value, __nbPrivateItems.set, None, None)
    __nbPublicItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbPublicItems'), b'nbPublicItems', b'__httpwww_usharesoft_commarketplace_Product_nbPublicItems', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1218, 20))
    nbPublicItems = property(__nbPublicItems.value, __nbPublicItems.set, None, None)
    __nbPurchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbPurchases'), b'nbPurchases', b'__httpwww_usharesoft_commarketplace_Product_nbPurchases', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1219, 20))
    nbPurchases = property(__nbPurchases.value, __nbPurchases.set, None, None)
    __notificationsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'notificationsUri'), b'notificationsUri', b'__httpwww_usharesoft_commarketplace_Product_notificationsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1220, 20))
    notificationsUri = property(__notificationsUri.value, __notificationsUri.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_Product_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1221, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Product_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1222, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__active.name(): __active, 
       __allowComments.name(): __allowComments, 
       __comments.name(): __comments, 
       __commentsUri.name(): __commentsUri, 
       __items.name(): __items, 
       __itemsUri.name(): __itemsUri, 
       __name.name(): __name, 
       __nbItems.name(): __nbItems, 
       __nbPendingApprovals.name(): __nbPendingApprovals, 
       __nbPrivateItems.name(): __nbPrivateItems, 
       __nbPublicItems.name(): __nbPublicItems, 
       __nbPurchases.name(): __nbPurchases, 
       __notificationsUri.name(): __notificationsUri, 
       __parentUri.name(): __parentUri, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Product', Product)

class ProductItem(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItem with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductItem')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1228, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'active'), b'active', b'__httpwww_usharesoft_commarketplace_ProductItem_active', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1232, 20))
    active = property(__active.value, __active.set, None, None)
    __approvalUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'approvalUri'), b'approvalUri', b'__httpwww_usharesoft_commarketplace_ProductItem_approvalUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1233, 20))
    approvalUri = property(__approvalUri.value, __approvalUri.set, None, None)
    __artifacts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'artifacts'), b'artifacts', b'__httpwww_usharesoft_commarketplace_ProductItem_artifacts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1234, 20))
    artifacts = property(__artifacts.value, __artifacts.set, None, None)
    __artifactsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'artifactsUri'), b'artifactsUri', b'__httpwww_usharesoft_commarketplace_ProductItem_artifactsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1241, 20))
    artifactsUri = property(__artifactsUri.value, __artifactsUri.set, None, None)
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badges'), b'badges', b'__httpwww_usharesoft_commarketplace_ProductItem_badges', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1242, 20))
    badges = property(__badges.value, __badges.set, None, None)
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'commentsUri'), b'commentsUri', b'__httpwww_usharesoft_commarketplace_ProductItem_commentsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1249, 20))
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)
    __compatibilityList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'compatibilityList'), b'compatibilityList', b'__httpwww_usharesoft_commarketplace_ProductItem_compatibilityList', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1250, 20))
    compatibilityList = property(__compatibilityList.value, __compatibilityList.set, None, None)
    __compatibleProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'compatibleProducts'), b'compatibleProducts', b'__httpwww_usharesoft_commarketplace_ProductItem_compatibleProducts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1251, 20))
    compatibleProducts = property(__compatibleProducts.value, __compatibleProducts.set, None, None)
    __featured = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'featured'), b'featured', b'__httpwww_usharesoft_commarketplace_ProductItem_featured', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1259, 20))
    featured = property(__featured.value, __featured.set, None, None)
    __installationInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'installationInstructions'), b'installationInstructions', b'__httpwww_usharesoft_commarketplace_ProductItem_installationInstructions', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1260, 20))
    installationInstructions = property(__installationInstructions.value, __installationInstructions.set, None, None)
    __marketingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketingPlan'), b'marketingPlan', b'__httpwww_usharesoft_commarketplace_ProductItem_marketingPlan', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1261, 20))
    marketingPlan = property(__marketingPlan.value, __marketingPlan.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_ProductItem_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1262, 20))
    name = property(__name.value, __name.set, None, None)
    __nbPurchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbPurchases'), b'nbPurchases', b'__httpwww_usharesoft_commarketplace_ProductItem_nbPurchases', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1263, 20))
    nbPurchases = property(__nbPurchases.value, __nbPurchases.set, None, None)
    __nbVotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbVotes'), b'nbVotes', b'__httpwww_usharesoft_commarketplace_ProductItem_nbVotes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1264, 20))
    nbVotes = property(__nbVotes.value, __nbVotes.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_ProductItem_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1265, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __partNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'partNumber'), b'partNumber', b'__httpwww_usharesoft_commarketplace_ProductItem_partNumber', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1266, 20))
    partNumber = property(__partNumber.value, __partNumber.set, None, None)
    __pricingPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'pricingPlan'), b'pricingPlan', b'__httpwww_usharesoft_commarketplace_ProductItem_pricingPlan', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1267, 20))
    pricingPlan = property(__pricingPlan.value, __pricingPlan.set, None, None)
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchasesUri'), b'purchasesUri', b'__httpwww_usharesoft_commarketplace_ProductItem_purchasesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1268, 20))
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)
    __rating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'rating'), b'rating', b'__httpwww_usharesoft_commarketplace_ProductItem_rating', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1269, 20))
    rating = property(__rating.value, __rating.set, None, None)
    __releaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'releaseDate'), b'releaseDate', b'__httpwww_usharesoft_commarketplace_ProductItem_releaseDate', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1270, 20))
    releaseDate = property(__releaseDate.value, __releaseDate.set, None, None)
    __releaseNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'releaseNotes'), b'releaseNotes', b'__httpwww_usharesoft_commarketplace_ProductItem_releaseNotes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1271, 20))
    releaseNotes = property(__releaseNotes.value, __releaseNotes.set, None, None)
    __staffPick = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'staffPick'), b'staffPick', b'__httpwww_usharesoft_commarketplace_ProductItem_staffPick', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1272, 20))
    staffPick = property(__staffPick.value, __staffPick.set, None, None)
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'status'), b'status', b'__httpwww_usharesoft_commarketplace_ProductItem_status', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1273, 20))
    status = property(__status.value, __status.set, None, None)
    __supportPlan = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportPlan'), b'supportPlan', b'__httpwww_usharesoft_commarketplace_ProductItem_supportPlan', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1284, 20))
    supportPlan = property(__supportPlan.value, __supportPlan.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_ProductItem_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1285, 20))
    type = property(__type.value, __type.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_ProductItem_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1286, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __vendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorName'), b'vendorName', b'__httpwww_usharesoft_commarketplace_ProductItem_vendorName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1287, 20))
    vendorName = property(__vendorName.value, __vendorName.set, None, None)
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorUri'), b'vendorUri', b'__httpwww_usharesoft_commarketplace_ProductItem_vendorUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1288, 20))
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_ProductItem_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1289, 20))
    version = property(__version.value, __version.set, None, None)
    _ElementMap.update({__active.name(): __active, 
       __approvalUri.name(): __approvalUri, 
       __artifacts.name(): __artifacts, 
       __artifactsUri.name(): __artifactsUri, 
       __badges.name(): __badges, 
       __commentsUri.name(): __commentsUri, 
       __compatibilityList.name(): __compatibilityList, 
       __compatibleProducts.name(): __compatibleProducts, 
       __featured.name(): __featured, 
       __installationInstructions.name(): __installationInstructions, 
       __marketingPlan.name(): __marketingPlan, 
       __name.name(): __name, 
       __nbPurchases.name(): __nbPurchases, 
       __nbVotes.name(): __nbVotes, 
       __parentUri.name(): __parentUri, 
       __partNumber.name(): __partNumber, 
       __pricingPlan.name(): __pricingPlan, 
       __purchasesUri.name(): __purchasesUri, 
       __rating.name(): __rating, 
       __releaseDate.name(): __releaseDate, 
       __releaseNotes.name(): __releaseNotes, 
       __staffPick.name(): __staffPick, 
       __status.name(): __status, 
       __supportPlan.name(): __supportPlan, 
       __type.name(): __type, 
       __uri.name(): __uri, 
       __vendorName.name(): __vendorName, 
       __vendorUri.name(): __vendorUri, 
       __version.name(): __version})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductItem', ProductItem)

class ProductItemDetails(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItemDetails with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductItemDetails')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1295, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __artifactsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'artifactsUri'), b'artifactsUri', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_artifactsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1299, 20))
    artifactsUri = property(__artifactsUri.value, __artifactsUri.set, None, None)
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badges'), b'badges', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_badges', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1300, 20))
    badges = property(__badges.value, __badges.set, None, None)
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'category'), b'category', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_category', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1307, 20))
    category = property(__category.value, __category.set, None, None)
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'commentsUri'), b'commentsUri', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_commentsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1308, 20))
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)
    __compatibleProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'compatibleProducts'), b'compatibleProducts', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_compatibleProducts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1309, 20))
    compatibleProducts = property(__compatibleProducts.value, __compatibleProducts.set, None, None)
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'details'), b'details', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_details', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1317, 20))
    details = property(__details.value, __details.set, None, None)
    __disclaimer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'disclaimer'), b'disclaimer', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_disclaimer', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1318, 20))
    disclaimer = property(__disclaimer.value, __disclaimer.set, None, None)
    __editions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'editions'), b'editions', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_editions', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1319, 20))
    editions = property(__editions.value, __editions.set, None, None)
    __favorite = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'favorite'), b'favorite', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_favorite', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1326, 20))
    favorite = property(__favorite.value, __favorite.set, None, None)
    __favoritesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'favoritesUri'), b'favoritesUri', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_favoritesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1327, 20))
    favoritesUri = property(__favoritesUri.value, __favoritesUri.set, None, None)
    __featured = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'featured'), b'featured', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_featured', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1328, 20))
    featured = property(__featured.value, __featured.set, None, None)
    __installationInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'installationInstructions'), b'installationInstructions', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_installationInstructions', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1329, 20))
    installationInstructions = property(__installationInstructions.value, __installationInstructions.set, None, None)
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'logo'), b'logo', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_logo', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1330, 20))
    logo = property(__logo.value, __logo.set, None, None)
    __marketingResources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketingResources'), b'marketingResources', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_marketingResources', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1331, 20))
    marketingResources = property(__marketingResources.value, __marketingResources.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1339, 20))
    name = property(__name.value, __name.set, None, None)
    __nbPurchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbPurchases'), b'nbPurchases', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_nbPurchases', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1340, 20))
    nbPurchases = property(__nbPurchases.value, __nbPurchases.set, None, None)
    __nbVotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbVotes'), b'nbVotes', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_nbVotes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1341, 20))
    nbVotes = property(__nbVotes.value, __nbVotes.set, None, None)
    __otherReleases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'otherReleases'), b'otherReleases', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_otherReleases', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1342, 20))
    otherReleases = property(__otherReleases.value, __otherReleases.set, None, None)
    __overview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'overview'), b'overview', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_overview', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1350, 20))
    overview = property(__overview.value, __overview.set, None, None)
    __partNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'partNumber'), b'partNumber', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_partNumber', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1351, 20))
    partNumber = property(__partNumber.value, __partNumber.set, None, None)
    __pricingResources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'pricingResources'), b'pricingResources', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_pricingResources', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1352, 20))
    pricingResources = property(__pricingResources.value, __pricingResources.set, None, None)
    __productUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productUri'), b'productUri', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_productUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1360, 20))
    productUri = property(__productUri.value, __productUri.set, None, None)
    __purchased = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchased'), b'purchased', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_purchased', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1361, 20))
    purchased = property(__purchased.value, __purchased.set, None, None)
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchasesUri'), b'purchasesUri', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_purchasesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1362, 20))
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)
    __rating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'rating'), b'rating', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_rating', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1363, 20))
    rating = property(__rating.value, __rating.set, None, None)
    __releaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'releaseDate'), b'releaseDate', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_releaseDate', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1364, 20))
    releaseDate = property(__releaseDate.value, __releaseDate.set, None, None)
    __releaseNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'releaseNotes'), b'releaseNotes', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_releaseNotes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1365, 20))
    releaseNotes = property(__releaseNotes.value, __releaseNotes.set, None, None)
    __screenshots = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'screenshots'), b'screenshots', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_screenshots', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1366, 20))
    screenshots = property(__screenshots.value, __screenshots.set, None, None)
    __staffPick = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'staffPick'), b'staffPick', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_staffPick', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1373, 20))
    staffPick = property(__staffPick.value, __staffPick.set, None, None)
    __supportDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportDetails'), b'supportDetails', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_supportDetails', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1374, 20))
    supportDetails = property(__supportDetails.value, __supportDetails.set, None, None)
    __supportEmail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportEmail'), b'supportEmail', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_supportEmail', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1375, 20))
    supportEmail = property(__supportEmail.value, __supportEmail.set, None, None)
    __supportEula = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportEula'), b'supportEula', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_supportEula', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1376, 20))
    supportEula = property(__supportEula.value, __supportEula.set, None, None)
    __supportPhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportPhone'), b'supportPhone', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_supportPhone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1377, 20))
    supportPhone = property(__supportPhone.value, __supportPhone.set, None, None)
    __supportResources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportResources'), b'supportResources', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_supportResources', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1378, 20))
    supportResources = property(__supportResources.value, __supportResources.set, None, None)
    __supportUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportUrl'), b'supportUrl', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_supportUrl', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1386, 20))
    supportUrl = property(__supportUrl.value, __supportUrl.set, None, None)
    __tagLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'tagLine'), b'tagLine', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_tagLine', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1387, 20))
    tagLine = property(__tagLine.value, __tagLine.set, None, None)
    __tags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'tags'), b'tags', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_tags', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1388, 20))
    tags = property(__tags.value, __tags.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1389, 20))
    type = property(__type.value, __type.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1390, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __vendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorName'), b'vendorName', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_vendorName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1391, 20))
    vendorName = property(__vendorName.value, __vendorName.set, None, None)
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorUri'), b'vendorUri', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_vendorUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1392, 20))
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_ProductItemDetails_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1393, 20))
    version = property(__version.value, __version.set, None, None)
    _ElementMap.update({__artifactsUri.name(): __artifactsUri, 
       __badges.name(): __badges, 
       __category.name(): __category, 
       __commentsUri.name(): __commentsUri, 
       __compatibleProducts.name(): __compatibleProducts, 
       __details.name(): __details, 
       __disclaimer.name(): __disclaimer, 
       __editions.name(): __editions, 
       __favorite.name(): __favorite, 
       __favoritesUri.name(): __favoritesUri, 
       __featured.name(): __featured, 
       __installationInstructions.name(): __installationInstructions, 
       __logo.name(): __logo, 
       __marketingResources.name(): __marketingResources, 
       __name.name(): __name, 
       __nbPurchases.name(): __nbPurchases, 
       __nbVotes.name(): __nbVotes, 
       __otherReleases.name(): __otherReleases, 
       __overview.name(): __overview, 
       __partNumber.name(): __partNumber, 
       __pricingResources.name(): __pricingResources, 
       __productUri.name(): __productUri, 
       __purchased.name(): __purchased, 
       __purchasesUri.name(): __purchasesUri, 
       __rating.name(): __rating, 
       __releaseDate.name(): __releaseDate, 
       __releaseNotes.name(): __releaseNotes, 
       __screenshots.name(): __screenshots, 
       __staffPick.name(): __staffPick, 
       __supportDetails.name(): __supportDetails, 
       __supportEmail.name(): __supportEmail, 
       __supportEula.name(): __supportEula, 
       __supportPhone.name(): __supportPhone, 
       __supportResources.name(): __supportResources, 
       __supportUrl.name(): __supportUrl, 
       __tagLine.name(): __tagLine, 
       __tags.name(): __tags, 
       __type.name(): __type, 
       __uri.name(): __uri, 
       __vendorName.name(): __vendorName, 
       __vendorUri.name(): __vendorUri, 
       __version.name(): __version})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductItemDetails', ProductItemDetails)

class ProductItemDetailsList(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItemDetailsList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductItemDetailsList')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1399, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __productItemDetailsList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemDetailsList'), b'productItemDetailsList', b'__httpwww_usharesoft_commarketplace_ProductItemDetailsList_productItemDetailsList', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1403, 20))
    productItemDetailsList = property(__productItemDetailsList.value, __productItemDetailsList.set, None, None)
    _ElementMap.update({__productItemDetailsList.name(): __productItemDetailsList})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductItemDetailsList', ProductItemDetailsList)

class ProductItems(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItems with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductItems')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1416, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __productItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItems'), b'productItems', b'__httpwww_usharesoft_commarketplace_ProductItems_productItems', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1420, 20))
    productItems = property(__productItems.value, __productItems.set, None, None)
    _ElementMap.update({__productItems.name(): __productItems})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductItems', ProductItems)

class ProductItemSummary(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItemSummary with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductItemSummary')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1432, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __productId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productId'), b'productId', b'__httpwww_usharesoft_commarketplace_ProductItemSummary_productId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1436, 20))
    productId = property(__productId.value, __productId.set, None, None)
    __releaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'releaseDate'), b'releaseDate', b'__httpwww_usharesoft_commarketplace_ProductItemSummary_releaseDate', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1437, 20))
    releaseDate = property(__releaseDate.value, __releaseDate.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_ProductItemSummary_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1438, 20))
    type = property(__type.value, __type.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_ProductItemSummary_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1439, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_ProductItemSummary_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1440, 20))
    name = property(__name.value, __name.set, None, None)
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_ProductItemSummary_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1441, 20))
    version = property(__version.value, __version.set, None, None)
    _ElementMap.update({__productId.name(): __productId, 
       __releaseDate.name(): __releaseDate, 
       __type.name(): __type, 
       __uri.name(): __uri, 
       __name.name(): __name, 
       __version.name(): __version})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductItemSummary', ProductItemSummary)

class ProductItemSummaryList(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductItemSummaryList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductItemSummaryList')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1447, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __productItemSummaryList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemSummaryList'), b'productItemSummaryList', b'__httpwww_usharesoft_commarketplace_ProductItemSummaryList_productItemSummaryList', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1451, 20))
    productItemSummaryList = property(__productItemSummaryList.value, __productItemSummaryList.set, None, None)
    _ElementMap.update({__productItemSummaryList.name(): __productItemSummaryList})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductItemSummaryList', ProductItemSummaryList)

class ProductResource(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductResource')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1464, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_ProductResource_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1468, 20))
    description = property(__description.value, __description.set, None, None)
    __label = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'label'), b'label', b'__httpwww_usharesoft_commarketplace_ProductResource_label', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1469, 20))
    label = property(__label.value, __label.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_ProductResource_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1470, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_ProductResource_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1471, 20))
    type = property(__type.value, __type.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_ProductResource_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1478, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'url'), b'url', b'__httpwww_usharesoft_commarketplace_ProductResource_url', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1479, 20))
    url = property(__url.value, __url.set, None, None)
    _ElementMap.update({__description.name(): __description, 
       __label.name(): __label, 
       __parentUri.name(): __parentUri, 
       __type.name(): __type, 
       __uri.name(): __uri, 
       __url.name(): __url})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductResource', ProductResource)

class Products(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Products with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Products')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1485, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __products = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'products'), b'products', b'__httpwww_usharesoft_commarketplace_Products_products', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1489, 20))
    products = property(__products.value, __products.set, None, None)
    _ElementMap.update({__products.name(): __products})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Products', Products)

class ProductSummary(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductSummary with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductSummary')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1501, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badges'), b'badges', b'__httpwww_usharesoft_commarketplace_ProductSummary_badges', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1505, 20))
    badges = property(__badges.value, __badges.set, None, None)
    __category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'category'), b'category', b'__httpwww_usharesoft_commarketplace_ProductSummary_category', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1512, 20))
    category = property(__category.value, __category.set, None, None)
    __commentsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'commentsUri'), b'commentsUri', b'__httpwww_usharesoft_commarketplace_ProductSummary_commentsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1513, 20))
    commentsUri = property(__commentsUri.value, __commentsUri.set, None, None)
    __details = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'details'), b'details', b'__httpwww_usharesoft_commarketplace_ProductSummary_details', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1514, 20))
    details = property(__details.value, __details.set, None, None)
    __favoritesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'favoritesUri'), b'favoritesUri', b'__httpwww_usharesoft_commarketplace_ProductSummary_favoritesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1515, 20))
    favoritesUri = property(__favoritesUri.value, __favoritesUri.set, None, None)
    __itemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'itemsUri'), b'itemsUri', b'__httpwww_usharesoft_commarketplace_ProductSummary_itemsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1516, 20))
    itemsUri = property(__itemsUri.value, __itemsUri.set, None, None)
    __latestItemUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'latestItemUri'), b'latestItemUri', b'__httpwww_usharesoft_commarketplace_ProductSummary_latestItemUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1517, 20))
    latestItemUri = property(__latestItemUri.value, __latestItemUri.set, None, None)
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'logo'), b'logo', b'__httpwww_usharesoft_commarketplace_ProductSummary_logo', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1518, 20))
    logo = property(__logo.value, __logo.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_ProductSummary_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1519, 20))
    name = property(__name.value, __name.set, None, None)
    __nbPurchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbPurchases'), b'nbPurchases', b'__httpwww_usharesoft_commarketplace_ProductSummary_nbPurchases', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1520, 20))
    nbPurchases = property(__nbPurchases.value, __nbPurchases.set, None, None)
    __nbVotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbVotes'), b'nbVotes', b'__httpwww_usharesoft_commarketplace_ProductSummary_nbVotes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1521, 20))
    nbVotes = property(__nbVotes.value, __nbVotes.set, None, None)
    __popularity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'popularity'), b'popularity', b'__httpwww_usharesoft_commarketplace_ProductSummary_popularity', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1522, 20))
    popularity = property(__popularity.value, __popularity.set, None, None)
    __productId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productId'), b'productId', b'__httpwww_usharesoft_commarketplace_ProductSummary_productId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1523, 20))
    productId = property(__productId.value, __productId.set, None, None)
    __productUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productUri'), b'productUri', b'__httpwww_usharesoft_commarketplace_ProductSummary_productUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1524, 20))
    productUri = property(__productUri.value, __productUri.set, None, None)
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchasesUri'), b'purchasesUri', b'__httpwww_usharesoft_commarketplace_ProductSummary_purchasesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1525, 20))
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)
    __rating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'rating'), b'rating', b'__httpwww_usharesoft_commarketplace_ProductSummary_rating', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1526, 20))
    rating = property(__rating.value, __rating.set, None, None)
    __releaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'releaseDate'), b'releaseDate', b'__httpwww_usharesoft_commarketplace_ProductSummary_releaseDate', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1527, 20))
    releaseDate = property(__releaseDate.value, __releaseDate.set, None, None)
    __startingCost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'startingCost'), b'startingCost', b'__httpwww_usharesoft_commarketplace_ProductSummary_startingCost', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1528, 20))
    startingCost = property(__startingCost.value, __startingCost.set, None, None)
    __tagLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'tagLine'), b'tagLine', b'__httpwww_usharesoft_commarketplace_ProductSummary_tagLine', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1529, 20))
    tagLine = property(__tagLine.value, __tagLine.set, None, None)
    __tags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'tags'), b'tags', b'__httpwww_usharesoft_commarketplace_ProductSummary_tags', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1530, 20))
    tags = property(__tags.value, __tags.set, None, None)
    __vendorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorName'), b'vendorName', b'__httpwww_usharesoft_commarketplace_ProductSummary_vendorName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1531, 20))
    vendorName = property(__vendorName.value, __vendorName.set, None, None)
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_ProductSummary_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1532, 20))
    version = property(__version.value, __version.set, None, None)
    _ElementMap.update({__badges.name(): __badges, 
       __category.name(): __category, 
       __commentsUri.name(): __commentsUri, 
       __details.name(): __details, 
       __favoritesUri.name(): __favoritesUri, 
       __itemsUri.name(): __itemsUri, 
       __latestItemUri.name(): __latestItemUri, 
       __logo.name(): __logo, 
       __name.name(): __name, 
       __nbPurchases.name(): __nbPurchases, 
       __nbVotes.name(): __nbVotes, 
       __popularity.name(): __popularity, 
       __productId.name(): __productId, 
       __productUri.name(): __productUri, 
       __purchasesUri.name(): __purchasesUri, 
       __rating.name(): __rating, 
       __releaseDate.name(): __releaseDate, 
       __startingCost.name(): __startingCost, 
       __tagLine.name(): __tagLine, 
       __tags.name(): __tags, 
       __vendorName.name(): __vendorName, 
       __version.name(): __version})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductSummary', ProductSummary)

class ProductSummaryList(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductSummaryList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductSummaryList')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1538, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __productSummaryList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productSummaryList'), b'productSummaryList', b'__httpwww_usharesoft_commarketplace_ProductSummaryList_productSummaryList', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1542, 20))
    productSummaryList = property(__productSummaryList.value, __productSummaryList.set, None, None)
    _ElementMap.update({__productSummaryList.name(): __productSummaryList})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductSummaryList', ProductSummaryList)

class ProductType(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ProductType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductType')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1555, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __primitive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'primitive'), b'primitive', b'__httpwww_usharesoft_commarketplace_ProductType_primitive', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1559, 20))
    primitive = property(__primitive.value, __primitive.set, None, None)
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemsUri'), b'productItemsUri', b'__httpwww_usharesoft_commarketplace_ProductType_productItemsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1569, 20))
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_ProductType_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1570, 20))
    type = property(__type.value, __type.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_ProductType_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1571, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__primitive.name(): __primitive, 
       __productItemsUri.name(): __productItemsUri, 
       __type.name(): __type, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductType', ProductType)

class ProductTypes(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}ProductTypes with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ProductTypes')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1577, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __productTypes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productTypes'), b'productTypes', b'__httpwww_usharesoft_commarketplace_ProductTypes_productTypes', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1581, 20))
    productTypes = property(__productTypes.value, __productTypes.set, None, None)
    _ElementMap.update({__productTypes.name(): __productTypes})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ProductTypes', ProductTypes)

class Purchase(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Purchase with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Purchase')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1593, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'item'), b'item', b'__httpwww_usharesoft_commarketplace_Purchase_item', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1597, 20))
    item = property(__item.value, __item.set, None, None)
    __order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'order'), b'order', b'__httpwww_usharesoft_commarketplace_Purchase_order', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1598, 20))
    order = property(__order.value, __order.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Purchase_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1599, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __billingStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'billingStatus'), b'billingStatus', b'__httpwww_usharesoft_commarketplace_Purchase_billingStatus', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1600, 20))
    billingStatus = property(__billingStatus.value, __billingStatus.set, None, None)
    __billingURL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'billingURL'), b'billingURL', b'__httpwww_usharesoft_commarketplace_Purchase_billingURL', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1601, 20))
    billingURL = property(__billingURL.value, __billingURL.set, None, None)
    _ElementMap.update({__item.name(): __item, 
       __order.name(): __order, 
       __uri.name(): __uri, 
       __billingStatus.name(): __billingStatus, 
       __billingURL.name(): __billingURL})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Purchase', Purchase)

class Purchases(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Purchases with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Purchases')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1607, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __purchases = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchases'), b'purchases', b'__httpwww_usharesoft_commarketplace_Purchases_purchases', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1611, 20))
    purchases = property(__purchases.value, __purchases.set, None, None)
    _ElementMap.update({__purchases.name(): __purchases})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Purchases', Purchases)

class Quota(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Quota with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Quota')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1623, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'frequency'), b'frequency', b'__httpwww_usharesoft_commarketplace_Quota_frequency', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1627, 20))
    frequency = property(__frequency.value, __frequency.set, None, None)
    __limit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'limit'), b'limit', b'__httpwww_usharesoft_commarketplace_Quota_limit', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1635, 20))
    limit = property(__limit.value, __limit.set, None, None)
    __nb = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nb'), b'nb', b'__httpwww_usharesoft_commarketplace_Quota_nb', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1636, 20))
    nb = property(__nb.value, __nb.set, None, None)
    __renewalDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'renewalDate'), b'renewalDate', b'__httpwww_usharesoft_commarketplace_Quota_renewalDate', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1637, 20))
    renewalDate = property(__renewalDate.value, __renewalDate.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_Quota_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1638, 20))
    type = property(__type.value, __type.set, None, None)
    __typeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'typeId'), b'typeId', b'__httpwww_usharesoft_commarketplace_Quota_typeId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1648, 20))
    typeId = property(__typeId.value, __typeId.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Quota_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1649, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__frequency.name(): __frequency, 
       __limit.name(): __limit, 
       __nb.name(): __nb, 
       __renewalDate.name(): __renewalDate, 
       __type.name(): __type, 
       __typeId.name(): __typeId, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Quota', Quota)

class Quotas(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Quotas with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Quotas')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1655, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __quotas = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'quotas'), b'quotas', b'__httpwww_usharesoft_commarketplace_Quotas_quotas', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1659, 20))
    quotas = property(__quotas.value, __quotas.set, None, None)
    _ElementMap.update({__quotas.name(): __quotas})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Quotas', Quotas)

class Role(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Role with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Role')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1671, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_Role_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1675, 20))
    description = property(__description.value, __description.set, None, None)
    __entitlements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'entitlements'), b'entitlements', b'__httpwww_usharesoft_commarketplace_Role_entitlements', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1676, 20))
    entitlements = property(__entitlements.value, __entitlements.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Role_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1683, 20))
    name = property(__name.value, __name.set, None, None)
    _ElementMap.update({__description.name(): __description, 
       __entitlements.name(): __entitlements, 
       __name.name(): __name})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Role', Role)

class Roles(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Roles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Roles')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1689, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __roles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'roles'), b'roles', b'__httpwww_usharesoft_commarketplace_Roles_roles', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1693, 20))
    roles = property(__roles.value, __roles.set, None, None)
    _ElementMap.update({__roles.name(): __roles})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Roles', Roles)

class ServiceStatus(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}ServiceStatus with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ServiceStatus')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1715, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __alive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'alive'), b'alive', b'__httpwww_usharesoft_commarketplace_ServiceStatus_alive', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1719, 20))
    alive = property(__alive.value, __alive.set, None, None)
    __serviceLoad = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'serviceLoad'), b'serviceLoad', b'__httpwww_usharesoft_commarketplace_ServiceStatus_serviceLoad', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1720, 20))
    serviceLoad = property(__serviceLoad.value, __serviceLoad.set, None, None)
    _ElementMap.update({__alive.name(): __alive, 
       __serviceLoad.name(): __serviceLoad})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ServiceStatus', ServiceStatus)

class StatTicket(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}StatTicket with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'StatTicket')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1726, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __actionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'actionId'), b'actionId', b'__httpwww_usharesoft_commarketplace_StatTicket_actionId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1730, 20))
    actionId = property(__actionId.value, __actionId.set, None, None)
    __actionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'actionName'), b'actionName', b'__httpwww_usharesoft_commarketplace_StatTicket_actionName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1731, 20))
    actionName = property(__actionName.value, __actionName.set, None, None)
    __currency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'currency'), b'currency', b'__httpwww_usharesoft_commarketplace_StatTicket_currency', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1749, 20))
    currency = property(__currency.value, __currency.set, None, None)
    __date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'date'), b'date', b'__httpwww_usharesoft_commarketplace_StatTicket_date', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1750, 20))
    date = property(__date.value, __date.set, None, None)
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_StatTicket_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1751, 20))
    description = property(__description.value, __description.set, None, None)
    __diskSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'diskSize'), b'diskSize', b'__httpwww_usharesoft_commarketplace_StatTicket_diskSize', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1752, 20))
    diskSize = property(__diskSize.value, __diskSize.set, None, None)
    __distributionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'distributionId'), b'distributionId', b'__httpwww_usharesoft_commarketplace_StatTicket_distributionId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1753, 20))
    distributionId = property(__distributionId.value, __distributionId.set, None, None)
    __distributionName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'distributionName'), b'distributionName', b'__httpwww_usharesoft_commarketplace_StatTicket_distributionName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1754, 20))
    distributionName = property(__distributionName.value, __distributionName.set, None, None)
    __formatId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'formatId'), b'formatId', b'__httpwww_usharesoft_commarketplace_StatTicket_formatId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1755, 20))
    formatId = property(__formatId.value, __formatId.set, None, None)
    __formatName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'formatName'), b'formatName', b'__httpwww_usharesoft_commarketplace_StatTicket_formatName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1756, 20))
    formatName = property(__formatName.value, __formatName.set, None, None)
    __fromObjectId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'fromObjectId'), b'fromObjectId', b'__httpwww_usharesoft_commarketplace_StatTicket_fromObjectId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1757, 20))
    fromObjectId = property(__fromObjectId.value, __fromObjectId.set, None, None)
    __fromObjectName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'fromObjectName'), b'fromObjectName', b'__httpwww_usharesoft_commarketplace_StatTicket_fromObjectName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1758, 20))
    fromObjectName = property(__fromObjectName.value, __fromObjectName.set, None, None)
    __fromObjectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'fromObjectType'), b'fromObjectType', b'__httpwww_usharesoft_commarketplace_StatTicket_fromObjectType', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1759, 20))
    fromObjectType = property(__fromObjectType.value, __fromObjectType.set, None, None)
    __objectId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'objectId'), b'objectId', b'__httpwww_usharesoft_commarketplace_StatTicket_objectId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1760, 20))
    objectId = property(__objectId.value, __objectId.set, None, None)
    __objectName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'objectName'), b'objectName', b'__httpwww_usharesoft_commarketplace_StatTicket_objectName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1761, 20))
    objectName = property(__objectName.value, __objectName.set, None, None)
    __objectStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'objectStatus'), b'objectStatus', b'__httpwww_usharesoft_commarketplace_StatTicket_objectStatus', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1762, 20))
    objectStatus = property(__objectStatus.value, __objectStatus.set, None, None)
    __objectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'objectType'), b'objectType', b'__httpwww_usharesoft_commarketplace_StatTicket_objectType', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1763, 20))
    objectType = property(__objectType.value, __objectType.set, None, None)
    __orgId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'orgId'), b'orgId', b'__httpwww_usharesoft_commarketplace_StatTicket_orgId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1764, 20))
    orgId = property(__orgId.value, __orgId.set, None, None)
    __price = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'price'), b'price', b'__httpwww_usharesoft_commarketplace_StatTicket_price', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1765, 20))
    price = property(__price.value, __price.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_StatTicket_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1766, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __userId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'userId'), b'userId', b'__httpwww_usharesoft_commarketplace_StatTicket_userId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1767, 20))
    userId = property(__userId.value, __userId.set, None, None)
    __userLoginName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'userLoginName'), b'userLoginName', b'__httpwww_usharesoft_commarketplace_StatTicket_userLoginName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1768, 20))
    userLoginName = property(__userLoginName.value, __userLoginName.set, None, None)
    _ElementMap.update({__actionId.name(): __actionId, 
       __actionName.name(): __actionName, 
       __currency.name(): __currency, 
       __date.name(): __date, 
       __description.name(): __description, 
       __diskSize.name(): __diskSize, 
       __distributionId.name(): __distributionId, 
       __distributionName.name(): __distributionName, 
       __formatId.name(): __formatId, 
       __formatName.name(): __formatName, 
       __fromObjectId.name(): __fromObjectId, 
       __fromObjectName.name(): __fromObjectName, 
       __fromObjectType.name(): __fromObjectType, 
       __objectId.name(): __objectId, 
       __objectName.name(): __objectName, 
       __objectStatus.name(): __objectStatus, 
       __objectType.name(): __objectType, 
       __orgId.name(): __orgId, 
       __price.name(): __price, 
       __uri.name(): __uri, 
       __userId.name(): __userId, 
       __userLoginName.name(): __userLoginName})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'StatTicket', StatTicket)

class StatTickets(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}StatTickets with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'StatTickets')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1774, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __statTickets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'statTickets'), b'statTickets', b'__httpwww_usharesoft_commarketplace_StatTickets_statTickets', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1778, 20))
    statTickets = property(__statTickets.value, __statTickets.set, None, None)
    _ElementMap.update({__statTickets.name(): __statTickets})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'StatTickets', StatTickets)

class SubscriptionProfile(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}SubscriptionProfile with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'SubscriptionProfile')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1790, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'active'), b'active', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_active', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1794, 20))
    active = property(__active.value, __active.set, None, None)
    __admins = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'admins'), b'admins', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_admins', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1795, 20))
    admins = property(__admins.value, __admins.set, None, None)
    __adminsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'adminsUri'), b'adminsUri', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_adminsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1802, 20))
    adminsUri = property(__adminsUri.value, __adminsUri.set, None, None)
    __code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'code'), b'code', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_code', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1803, 20))
    code = property(__code.value, __code.set, None, None)
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1804, 20))
    description = property(__description.value, __description.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1805, 20))
    name = property(__name.value, __name.set, None, None)
    __orgUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'orgUri'), b'orgUri', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_orgUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1806, 20))
    orgUri = property(__orgUri.value, __orgUri.set, None, None)
    __quotas = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'quotas'), b'quotas', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_quotas', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1807, 20))
    quotas = property(__quotas.value, __quotas.set, None, None)
    __quotasUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'quotasUri'), b'quotasUri', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_quotasUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1814, 20))
    quotasUri = property(__quotasUri.value, __quotasUri.set, None, None)
    __roles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'roles'), b'roles', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_roles', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1815, 20))
    roles = property(__roles.value, __roles.set, None, None)
    __rolesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'rolesUri'), b'rolesUri', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_rolesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1822, 20))
    rolesUri = property(__rolesUri.value, __rolesUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_SubscriptionProfile_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1823, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__active.name(): __active, 
       __admins.name(): __admins, 
       __adminsUri.name(): __adminsUri, 
       __code.name(): __code, 
       __description.name(): __description, 
       __name.name(): __name, 
       __orgUri.name(): __orgUri, 
       __quotas.name(): __quotas, 
       __quotasUri.name(): __quotasUri, 
       __roles.name(): __roles, 
       __rolesUri.name(): __rolesUri, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'SubscriptionProfile', SubscriptionProfile)

class SubscriptionProfiles(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}SubscriptionProfiles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'SubscriptionProfiles')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1829, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __subscriptionProfiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'subscriptionProfiles'), b'subscriptionProfiles', b'__httpwww_usharesoft_commarketplace_SubscriptionProfiles_subscriptionProfiles', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1833, 20))
    subscriptionProfiles = property(__subscriptionProfiles.value, __subscriptionProfiles.set, None, None)
    _ElementMap.update({__subscriptionProfiles.name(): __subscriptionProfiles})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'SubscriptionProfiles', SubscriptionProfiles)

class SupportPlan(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}SupportPlan with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'SupportPlan')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1846, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'email'), b'email', b'__httpwww_usharesoft_commarketplace_SupportPlan_email', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1850, 20))
    email = property(__email.value, __email.set, None, None)
    __eula = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'eula'), b'eula', b'__httpwww_usharesoft_commarketplace_SupportPlan_eula', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1851, 20))
    eula = property(__eula.value, __eula.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_SupportPlan_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1852, 20))
    name = property(__name.value, __name.set, None, None)
    __nbReferences = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbReferences'), b'nbReferences', b'__httpwww_usharesoft_commarketplace_SupportPlan_nbReferences', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1853, 20))
    nbReferences = property(__nbReferences.value, __nbReferences.set, None, None)
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'phone'), b'phone', b'__httpwww_usharesoft_commarketplace_SupportPlan_phone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1854, 20))
    phone = property(__phone.value, __phone.set, None, None)
    __productItemsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productItemsUri'), b'productItemsUri', b'__httpwww_usharesoft_commarketplace_SupportPlan_productItemsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1855, 20))
    productItemsUri = property(__productItemsUri.value, __productItemsUri.set, None, None)
    __resources = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'resources'), b'resources', b'__httpwww_usharesoft_commarketplace_SupportPlan_resources', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1856, 20))
    resources = property(__resources.value, __resources.set, None, None)
    __supportDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportDetails'), b'supportDetails', b'__httpwww_usharesoft_commarketplace_SupportPlan_supportDetails', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1863, 20))
    supportDetails = property(__supportDetails.value, __supportDetails.set, None, None)
    __supportUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportUrl'), b'supportUrl', b'__httpwww_usharesoft_commarketplace_SupportPlan_supportUrl', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1864, 20))
    supportUrl = property(__supportUrl.value, __supportUrl.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_SupportPlan_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1865, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorUri'), b'vendorUri', b'__httpwww_usharesoft_commarketplace_SupportPlan_vendorUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1866, 20))
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)
    _ElementMap.update({__email.name(): __email, 
       __eula.name(): __eula, 
       __name.name(): __name, 
       __nbReferences.name(): __nbReferences, 
       __phone.name(): __phone, 
       __productItemsUri.name(): __productItemsUri, 
       __resources.name(): __resources, 
       __supportDetails.name(): __supportDetails, 
       __supportUrl.name(): __supportUrl, 
       __uri.name(): __uri, 
       __vendorUri.name(): __vendorUri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'SupportPlan', SupportPlan)

class SupportPlans(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}SupportPlans with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'SupportPlans')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1872, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __supportPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportPlans'), b'supportPlans', b'__httpwww_usharesoft_commarketplace_SupportPlans_supportPlans', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1876, 20))
    supportPlans = property(__supportPlans.value, __supportPlans.set, None, None)
    _ElementMap.update({__supportPlans.name(): __supportPlans})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'SupportPlans', SupportPlans)

class UforgeCredAccount(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}UforgeCredAccount with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'UforgeCredAccount')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1888, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_UforgeCredAccount_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1892, 20))
    name = property(__name.value, __name.set, None, None)
    __login = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'login'), b'login', b'__httpwww_usharesoft_commarketplace_UforgeCredAccount_login', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1893, 20))
    login = property(__login.value, __login.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_UforgeCredAccount_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1894, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'password'), b'password', b'__httpwww_usharesoft_commarketplace_UforgeCredAccount_password', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1895, 20))
    password = property(__password.value, __password.set, None, None)
    __serverUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'serverUrl'), b'serverUrl', b'__httpwww_usharesoft_commarketplace_UforgeCredAccount_serverUrl', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1896, 20))
    serverUrl = property(__serverUrl.value, __serverUrl.set, None, None)
    __appliancesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'appliancesUri'), b'appliancesUri', b'__httpwww_usharesoft_commarketplace_UforgeCredAccount_appliancesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1897, 20))
    appliancesUri = property(__appliancesUri.value, __appliancesUri.set, None, None)
    __machineImagesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'machineImagesUri'), b'machineImagesUri', b'__httpwww_usharesoft_commarketplace_UforgeCredAccount_machineImagesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1898, 20))
    machineImagesUri = property(__machineImagesUri.value, __machineImagesUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_UforgeCredAccount_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__name.name(): __name, 
       __login.name(): __login, 
       __parentUri.name(): __parentUri, 
       __password.name(): __password, 
       __serverUrl.name(): __serverUrl, 
       __appliancesUri.name(): __appliancesUri, 
       __machineImagesUri.name(): __machineImagesUri, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'UforgeCredAccount', UforgeCredAccount)

class UforgeCredAccounts(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}UforgeCredAccounts with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'UforgeCredAccounts')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1905, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __uforgeCredAccounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uforgeCredAccounts'), b'uforgeCredAccounts', b'__httpwww_usharesoft_commarketplace_UforgeCredAccounts_uforgeCredAccounts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1909, 20))
    uforgeCredAccounts = property(__uforgeCredAccounts.value, __uforgeCredAccounts.set, None, None)
    _ElementMap.update({__uforgeCredAccounts.name(): __uforgeCredAccounts})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'UforgeCredAccounts', UforgeCredAccounts)

class UForgeUploadObject(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}UForgeUploadObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'UForgeUploadObject')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1947, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __md5sum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'md5sum'), b'md5sum', b'__httpwww_usharesoft_commarketplace_UForgeUploadObject_md5sum', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    md5sum = property(__md5sum.value, __md5sum.set, None, None)
    __mimeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'mimeType'), b'mimeType', b'__httpwww_usharesoft_commarketplace_UForgeUploadObject_mimeType', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    mimeType = property(__mimeType.value, __mimeType.set, None, None)
    __sha256sum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'sha256sum'), b'sha256sum', b'__httpwww_usharesoft_commarketplace_UForgeUploadObject_sha256sum', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    sha256sum = property(__sha256sum.value, __sha256sum.set, None, None)
    __size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'size'), b'size', b'__httpwww_usharesoft_commarketplace_UForgeUploadObject_size', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    size = property(__size.value, __size.set, None, None)
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'status'), b'status', b'__httpwww_usharesoft_commarketplace_UForgeUploadObject_status', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    status = property(__status.value, __status.set, None, None)
    __uploaded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uploaded'), b'uploaded', b'__httpwww_usharesoft_commarketplace_UForgeUploadObject_uploaded', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    uploaded = property(__uploaded.value, __uploaded.set, None, None)
    __uploadedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uploadedTime'), b'uploadedTime', b'__httpwww_usharesoft_commarketplace_UForgeUploadObject_uploadedTime', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    uploadedTime = property(__uploadedTime.value, __uploadedTime.set, None, None)
    _ElementMap.update({__md5sum.name(): __md5sum, 
       __mimeType.name(): __mimeType, 
       __sha256sum.name(): __sha256sum, 
       __size.name(): __size, 
       __status.name(): __status, 
       __uploaded.name(): __uploaded, 
       __uploadedTime.name(): __uploadedTime})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'UForgeUploadObject', UForgeUploadObject)

class Unit(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Unit with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Unit')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1963, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __nb = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nb'), b'nb', b'__httpwww_usharesoft_commarketplace_Unit_nb', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1967, 20))
    nb = property(__nb.value, __nb.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_Unit_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1968, 20))
    type = property(__type.value, __type.set, None, None)
    _ElementMap.update({__nb.name(): __nb, 
       __type.name(): __type})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Unit', Unit)

class Units(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Units with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Units')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1999, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __units = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'units'), b'units', b'__httpwww_usharesoft_commarketplace_Units_units', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2003, 20))
    units = property(__units.value, __units.set, None, None)
    _ElementMap.update({__units.name(): __units})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Units', Units)

class User(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}User with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'User')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2021, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __active = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'active'), b'active', b'__httpwww_usharesoft_commarketplace_User_active', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2025, 20))
    active = property(__active.value, __active.set, None, None)
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'address'), b'address', b'__httpwww_usharesoft_commarketplace_User_address', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2026, 20))
    address = property(__address.value, __address.set, None, None)
    __admin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'admin'), b'admin', b'__httpwww_usharesoft_commarketplace_User_admin', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2027, 20))
    admin = property(__admin.value, __admin.set, None, None)
    __adminOrgsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'adminOrgsUri'), b'adminOrgsUri', b'__httpwww_usharesoft_commarketplace_User_adminOrgsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2028, 20))
    adminOrgsUri = property(__adminOrgsUri.value, __adminOrgsUri.set, None, None)
    __adminOrgUris = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'adminOrgUris'), b'adminOrgUris', b'__httpwww_usharesoft_commarketplace_User_adminOrgUris', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2029, 20))
    adminOrgUris = property(__adminOrgUris.value, __adminOrgUris.set, None, None)
    __apiKeysQuota = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'apiKeysQuota'), b'apiKeysQuota', b'__httpwww_usharesoft_commarketplace_User_apiKeysQuota', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2030, 20))
    apiKeysQuota = property(__apiKeysQuota.value, __apiKeysQuota.set, None, None)
    __baseApiKeysUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'baseApiKeysUri'), b'baseApiKeysUri', b'__httpwww_usharesoft_commarketplace_User_baseApiKeysUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2031, 20))
    baseApiKeysUri = property(__baseApiKeysUri.value, __baseApiKeysUri.set, None, None)
    __baseOrgsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'baseOrgsUri'), b'baseOrgsUri', b'__httpwww_usharesoft_commarketplace_User_baseOrgsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2032, 20))
    baseOrgsUri = property(__baseOrgsUri.value, __baseOrgsUri.set, None, None)
    __baseRolesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'baseRolesUri'), b'baseRolesUri', b'__httpwww_usharesoft_commarketplace_User_baseRolesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2033, 20))
    baseRolesUri = property(__baseRolesUri.value, __baseRolesUri.set, None, None)
    __company = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'company'), b'company', b'__httpwww_usharesoft_commarketplace_User_company', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2034, 20))
    company = property(__company.value, __company.set, None, None)
    __creationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'creationCode'), b'creationCode', b'__httpwww_usharesoft_commarketplace_User_creationCode', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2035, 20))
    creationCode = property(__creationCode.value, __creationCode.set, None, None)
    __dob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'dob'), b'dob', b'__httpwww_usharesoft_commarketplace_User_dob', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2036, 20))
    dob = property(__dob.value, __dob.set, None, None)
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'email'), b'email', b'__httpwww_usharesoft_commarketplace_User_email', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2037, 20))
    email = property(__email.value, __email.set, None, None)
    __exportsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'exportsUri'), b'exportsUri', b'__httpwww_usharesoft_commarketplace_User_exportsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2038, 20))
    exportsUri = property(__exportsUri.value, __exportsUri.set, None, None)
    __firstName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'firstName'), b'firstName', b'__httpwww_usharesoft_commarketplace_User_firstName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2039, 20))
    firstName = property(__firstName.value, __firstName.set, None, None)
    __gender = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'gender'), b'gender', b'__httpwww_usharesoft_commarketplace_User_gender', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2040, 20))
    gender = property(__gender.value, __gender.set, None, None)
    __homePhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'homePhone'), b'homePhone', b'__httpwww_usharesoft_commarketplace_User_homePhone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2041, 20))
    homePhone = property(__homePhone.value, __homePhone.set, None, None)
    __jobTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'jobTitle'), b'jobTitle', b'__httpwww_usharesoft_commarketplace_User_jobTitle', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2042, 20))
    jobTitle = property(__jobTitle.value, __jobTitle.set, None, None)
    __joined = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'joined'), b'joined', b'__httpwww_usharesoft_commarketplace_User_joined', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2043, 20))
    joined = property(__joined.value, __joined.set, None, None)
    __lang = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'lang'), b'lang', b'__httpwww_usharesoft_commarketplace_User_lang', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2044, 20))
    lang = property(__lang.value, __lang.set, None, None)
    __loginName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'loginName'), b'loginName', b'__httpwww_usharesoft_commarketplace_User_loginName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2045, 20))
    loginName = property(__loginName.value, __loginName.set, None, None)
    __mobilePhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'mobilePhone'), b'mobilePhone', b'__httpwww_usharesoft_commarketplace_User_mobilePhone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2046, 20))
    mobilePhone = property(__mobilePhone.value, __mobilePhone.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_User_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2047, 20))
    name = property(__name.value, __name.set, None, None)
    __officePhone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'officePhone'), b'officePhone', b'__httpwww_usharesoft_commarketplace_User_officePhone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2048, 20))
    officePhone = property(__officePhone.value, __officePhone.set, None, None)
    __orgUris = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'orgUris'), b'orgUris', b'__httpwww_usharesoft_commarketplace_User_orgUris', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2049, 20))
    orgUris = property(__orgUris.value, __orgUris.set, None, None)
    __password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'password'), b'password', b'__httpwww_usharesoft_commarketplace_User_password', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2050, 20))
    password = property(__password.value, __password.set, None, None)
    __photo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'photo'), b'photo', b'__httpwww_usharesoft_commarketplace_User_photo', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2051, 20))
    photo = property(__photo.value, __photo.set, None, None)
    __promoCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'promoCode'), b'promoCode', b'__httpwww_usharesoft_commarketplace_User_promoCode', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2052, 20))
    promoCode = property(__promoCode.value, __promoCode.set, None, None)
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchasesUri'), b'purchasesUri', b'__httpwww_usharesoft_commarketplace_User_purchasesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2053, 20))
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)
    __quotasUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'quotasUri'), b'quotasUri', b'__httpwww_usharesoft_commarketplace_User_quotasUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2054, 20))
    quotasUri = property(__quotasUri.value, __quotasUri.set, None, None)
    __roles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'roles'), b'roles', b'__httpwww_usharesoft_commarketplace_User_roles', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2055, 20))
    roles = property(__roles.value, __roles.set, None, None)
    __surname = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'surname'), b'surname', b'__httpwww_usharesoft_commarketplace_User_surname', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2062, 20))
    surname = property(__surname.value, __surname.set, None, None)
    __uforgeCredAccounts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uforgeCredAccounts'), b'uforgeCredAccounts', b'__httpwww_usharesoft_commarketplace_User_uforgeCredAccounts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2063, 20))
    uforgeCredAccounts = property(__uforgeCredAccounts.value, __uforgeCredAccounts.set, None, None)
    __exports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'exports'), b'exports', b'__httpwww_usharesoft_commarketplace_User_exports', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2070, 20))
    exports = property(__exports.value, __exports.set, None, None)
    __uforgeCredAccountsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uforgeCredAccountsUri'), b'uforgeCredAccountsUri', b'__httpwww_usharesoft_commarketplace_User_uforgeCredAccountsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2077, 20))
    uforgeCredAccountsUri = property(__uforgeCredAccountsUri.value, __uforgeCredAccountsUri.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_User_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2078, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __usageUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'usageUri'), b'usageUri', b'__httpwww_usharesoft_commarketplace_User_usageUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2079, 20))
    usageUri = property(__usageUri.value, __usageUri.set, None, None)
    __vendorsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorsUri'), b'vendorsUri', b'__httpwww_usharesoft_commarketplace_User_vendorsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2080, 20))
    vendorsUri = property(__vendorsUri.value, __vendorsUri.set, None, None)
    __website = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'website'), b'website', b'__httpwww_usharesoft_commarketplace_User_website', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2081, 20))
    website = property(__website.value, __website.set, None, None)
    _ElementMap.update({__active.name(): __active, 
       __address.name(): __address, 
       __admin.name(): __admin, 
       __adminOrgsUri.name(): __adminOrgsUri, 
       __adminOrgUris.name(): __adminOrgUris, 
       __apiKeysQuota.name(): __apiKeysQuota, 
       __baseApiKeysUri.name(): __baseApiKeysUri, 
       __baseOrgsUri.name(): __baseOrgsUri, 
       __baseRolesUri.name(): __baseRolesUri, 
       __company.name(): __company, 
       __creationCode.name(): __creationCode, 
       __dob.name(): __dob, 
       __email.name(): __email, 
       __exportsUri.name(): __exportsUri, 
       __firstName.name(): __firstName, 
       __gender.name(): __gender, 
       __homePhone.name(): __homePhone, 
       __jobTitle.name(): __jobTitle, 
       __joined.name(): __joined, 
       __lang.name(): __lang, 
       __loginName.name(): __loginName, 
       __mobilePhone.name(): __mobilePhone, 
       __name.name(): __name, 
       __officePhone.name(): __officePhone, 
       __orgUris.name(): __orgUris, 
       __password.name(): __password, 
       __photo.name(): __photo, 
       __promoCode.name(): __promoCode, 
       __purchasesUri.name(): __purchasesUri, 
       __quotasUri.name(): __quotasUri, 
       __roles.name(): __roles, 
       __surname.name(): __surname, 
       __uforgeCredAccounts.name(): __uforgeCredAccounts, 
       __exports.name(): __exports, 
       __uforgeCredAccountsUri.name(): __uforgeCredAccountsUri, 
       __uri.name(): __uri, 
       __usageUri.name(): __usageUri, 
       __vendorsUri.name(): __vendorsUri, 
       __website.name(): __website})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'User', User)

class Users(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Users with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Users')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2087, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __users = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'users'), b'users', b'__httpwww_usharesoft_commarketplace_Users_users', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2091, 20))
    users = property(__users.value, __users.set, None, None)
    _ElementMap.update({__users.name(): __users})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Users', Users)

class Vendor(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}Vendor with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Vendor')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2102, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'address'), b'address', b'__httpwww_usharesoft_commarketplace_Vendor_address', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2106, 20))
    address = property(__address.value, __address.set, None, None)
    __approvalsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'approvalsUri'), b'approvalsUri', b'__httpwww_usharesoft_commarketplace_Vendor_approvalsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2107, 20))
    approvalsUri = property(__approvalsUri.value, __approvalsUri.set, None, None)
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badges'), b'badges', b'__httpwww_usharesoft_commarketplace_Vendor_badges', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2108, 20))
    badges = property(__badges.value, __badges.set, None, None)
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'creator'), b'creator', b'__httpwww_usharesoft_commarketplace_Vendor_creator', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2115, 20))
    creator = property(__creator.value, __creator.set, None, None)
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_Vendor_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2116, 20))
    description = property(__description.value, __description.set, None, None)
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'email'), b'email', b'__httpwww_usharesoft_commarketplace_Vendor_email', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2117, 20))
    email = property(__email.value, __email.set, None, None)
    __inactive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'inactive'), b'inactive', b'__httpwww_usharesoft_commarketplace_Vendor_inactive', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2118, 20))
    inactive = property(__inactive.value, __inactive.set, None, None)
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'logo'), b'logo', b'__httpwww_usharesoft_commarketplace_Vendor_logo', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2119, 20))
    logo = property(__logo.value, __logo.set, None, None)
    __marketingPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketingPlans'), b'marketingPlans', b'__httpwww_usharesoft_commarketplace_Vendor_marketingPlans', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2120, 20))
    marketingPlans = property(__marketingPlans.value, __marketingPlans.set, None, None)
    __marketingPlansUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'marketingPlansUri'), b'marketingPlansUri', b'__httpwww_usharesoft_commarketplace_Vendor_marketingPlansUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2128, 20))
    marketingPlansUri = property(__marketingPlansUri.value, __marketingPlansUri.set, None, None)
    __members = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'members'), b'members', b'__httpwww_usharesoft_commarketplace_Vendor_members', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2129, 20))
    members = property(__members.value, __members.set, None, None)
    __membersUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'membersUri'), b'membersUri', b'__httpwww_usharesoft_commarketplace_Vendor_membersUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2136, 20))
    membersUri = property(__membersUri.value, __membersUri.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Vendor_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2137, 20))
    name = property(__name.value, __name.set, None, None)
    __nbMembers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbMembers'), b'nbMembers', b'__httpwww_usharesoft_commarketplace_Vendor_nbMembers', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2138, 20))
    nbMembers = property(__nbMembers.value, __nbMembers.set, None, None)
    __nbProductItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbProductItems'), b'nbProductItems', b'__httpwww_usharesoft_commarketplace_Vendor_nbProductItems', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2139, 20))
    nbProductItems = property(__nbProductItems.value, __nbProductItems.set, None, None)
    __nbProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbProducts'), b'nbProducts', b'__httpwww_usharesoft_commarketplace_Vendor_nbProducts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2140, 20))
    nbProducts = property(__nbProducts.value, __nbProducts.set, None, None)
    __notificationEmail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'notificationEmail'), b'notificationEmail', b'__httpwww_usharesoft_commarketplace_Vendor_notificationEmail', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2141, 20))
    notificationEmail = property(__notificationEmail.value, __notificationEmail.set, None, None)
    __orgUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'orgUri'), b'orgUri', b'__httpwww_usharesoft_commarketplace_Vendor_orgUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2142, 20))
    orgUri = property(__orgUri.value, __orgUri.set, None, None)
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'phone'), b'phone', b'__httpwww_usharesoft_commarketplace_Vendor_phone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2143, 20))
    phone = property(__phone.value, __phone.set, None, None)
    __pricingPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'pricingPlans'), b'pricingPlans', b'__httpwww_usharesoft_commarketplace_Vendor_pricingPlans', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2144, 20))
    pricingPlans = property(__pricingPlans.value, __pricingPlans.set, None, None)
    __pricingPlansUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'pricingPlansUri'), b'pricingPlansUri', b'__httpwww_usharesoft_commarketplace_Vendor_pricingPlansUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2151, 20))
    pricingPlansUri = property(__pricingPlansUri.value, __pricingPlansUri.set, None, None)
    __products = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'products'), b'products', b'__httpwww_usharesoft_commarketplace_Vendor_products', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2152, 20))
    products = property(__products.value, __products.set, None, None)
    __productsUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'productsUri'), b'productsUri', b'__httpwww_usharesoft_commarketplace_Vendor_productsUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2159, 20))
    productsUri = property(__productsUri.value, __productsUri.set, None, None)
    __purchasesUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'purchasesUri'), b'purchasesUri', b'__httpwww_usharesoft_commarketplace_Vendor_purchasesUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2160, 20))
    purchasesUri = property(__purchasesUri.value, __purchasesUri.set, None, None)
    __supportPlans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportPlans'), b'supportPlans', b'__httpwww_usharesoft_commarketplace_Vendor_supportPlans', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2161, 20))
    supportPlans = property(__supportPlans.value, __supportPlans.set, None, None)
    __supportPlansUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'supportPlansUri'), b'supportPlansUri', b'__httpwww_usharesoft_commarketplace_Vendor_supportPlansUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2168, 20))
    supportPlansUri = property(__supportPlansUri.value, __supportPlansUri.set, None, None)
    __twitterName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'twitterName'), b'twitterName', b'__httpwww_usharesoft_commarketplace_Vendor_twitterName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2169, 20))
    twitterName = property(__twitterName.value, __twitterName.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_Vendor_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2170, 20))
    type = property(__type.value, __type.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Vendor_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2178, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __billingMappingUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'billingMappingUri'), b'billingMappingUri', b'__httpwww_usharesoft_commarketplace_Vendor_billingMappingUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2179, 20))
    billingMappingUri = property(__billingMappingUri.value, __billingMappingUri.set, None, None)
    __billingRenewTokenUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'billingRenewTokenUri'), b'billingRenewTokenUri', b'__httpwww_usharesoft_commarketplace_Vendor_billingRenewTokenUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2180, 20))
    billingRenewTokenUri = property(__billingRenewTokenUri.value, __billingRenewTokenUri.set, None, None)
    __website = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'website'), b'website', b'__httpwww_usharesoft_commarketplace_Vendor_website', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2181, 20))
    website = property(__website.value, __website.set, None, None)
    _ElementMap.update({__address.name(): __address, 
       __approvalsUri.name(): __approvalsUri, 
       __badges.name(): __badges, 
       __creator.name(): __creator, 
       __description.name(): __description, 
       __email.name(): __email, 
       __inactive.name(): __inactive, 
       __logo.name(): __logo, 
       __marketingPlans.name(): __marketingPlans, 
       __marketingPlansUri.name(): __marketingPlansUri, 
       __members.name(): __members, 
       __membersUri.name(): __membersUri, 
       __name.name(): __name, 
       __nbMembers.name(): __nbMembers, 
       __nbProductItems.name(): __nbProductItems, 
       __nbProducts.name(): __nbProducts, 
       __notificationEmail.name(): __notificationEmail, 
       __orgUri.name(): __orgUri, 
       __phone.name(): __phone, 
       __pricingPlans.name(): __pricingPlans, 
       __pricingPlansUri.name(): __pricingPlansUri, 
       __products.name(): __products, 
       __productsUri.name(): __productsUri, 
       __purchasesUri.name(): __purchasesUri, 
       __supportPlans.name(): __supportPlans, 
       __supportPlansUri.name(): __supportPlansUri, 
       __twitterName.name(): __twitterName, 
       __type.name(): __type, 
       __uri.name(): __uri, 
       __billingMappingUri.name(): __billingMappingUri, 
       __billingRenewTokenUri.name(): __billingRenewTokenUri, 
       __website.name(): __website})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Vendor', Vendor)

class VendorMember(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}VendorMember with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'VendorMember')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2187, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'role'), b'role', b'__httpwww_usharesoft_commarketplace_VendorMember_role', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2191, 20))
    role = property(__role.value, __role.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_VendorMember_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2192, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __user = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'user'), b'user', b'__httpwww_usharesoft_commarketplace_VendorMember_user', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2193, 20))
    user = property(__user.value, __user.set, None, None)
    __vendorUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorUri'), b'vendorUri', b'__httpwww_usharesoft_commarketplace_VendorMember_vendorUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2194, 20))
    vendorUri = property(__vendorUri.value, __vendorUri.set, None, None)
    _ElementMap.update({__role.name(): __role, 
       __uri.name(): __uri, 
       __user.name(): __user, 
       __vendorUri.name(): __vendorUri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'VendorMember', VendorMember)

class VendorMembers(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}VendorMembers with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'VendorMembers')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2200, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __vendorMembers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendorMembers'), b'vendorMembers', b'__httpwww_usharesoft_commarketplace_VendorMembers_vendorMembers', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2204, 20))
    vendorMembers = property(__vendorMembers.value, __vendorMembers.set, None, None)
    _ElementMap.update({__vendorMembers.name(): __vendorMembers})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'VendorMembers', VendorMembers)

class VendorSummary(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}VendorSummary with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'VendorSummary')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2217, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_VendorSummary_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2221, 20))
    name = property(__name.value, __name.set, None, None)
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_VendorSummary_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2222, 20))
    description = property(__description.value, __description.set, None, None)
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'email'), b'email', b'__httpwww_usharesoft_commarketplace_VendorSummary_email', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2223, 20))
    email = property(__email.value, __email.set, None, None)
    __website = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'website'), b'website', b'__httpwww_usharesoft_commarketplace_VendorSummary_website', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2224, 20))
    website = property(__website.value, __website.set, None, None)
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'phone'), b'phone', b'__httpwww_usharesoft_commarketplace_VendorSummary_phone', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2225, 20))
    phone = property(__phone.value, __phone.set, None, None)
    __address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'address'), b'address', b'__httpwww_usharesoft_commarketplace_VendorSummary_address', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2226, 20))
    address = property(__address.value, __address.set, None, None)
    __logo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'logo'), b'logo', b'__httpwww_usharesoft_commarketplace_VendorSummary_logo', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2227, 20))
    logo = property(__logo.value, __logo.set, None, None)
    __nbProductItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbProductItems'), b'nbProductItems', b'__httpwww_usharesoft_commarketplace_VendorSummary_nbProductItems', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2228, 20))
    nbProductItems = property(__nbProductItems.value, __nbProductItems.set, None, None)
    __nbProducts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'nbProducts'), b'nbProducts', b'__httpwww_usharesoft_commarketplace_VendorSummary_nbProducts', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2229, 20))
    nbProducts = property(__nbProducts.value, __nbProducts.set, None, None)
    __twitterName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'twitterName'), b'twitterName', b'__httpwww_usharesoft_commarketplace_VendorSummary_twitterName', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2230, 20))
    twitterName = property(__twitterName.value, __twitterName.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_VendorSummary_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2231, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_VendorSummary_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2232, 20))
    type = property(__type.value, __type.set, None, None)
    __badges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'badges'), b'badges', b'__httpwww_usharesoft_commarketplace_VendorSummary_badges', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2240, 20))
    badges = property(__badges.value, __badges.set, None, None)
    _ElementMap.update({__name.name(): __name, 
       __description.name(): __description, 
       __email.name(): __email, 
       __website.name(): __website, 
       __phone.name(): __phone, 
       __address.name(): __address, 
       __logo.name(): __logo, 
       __nbProductItems.name(): __nbProductItems, 
       __nbProducts.name(): __nbProducts, 
       __twitterName.name(): __twitterName, 
       __uri.name(): __uri, 
       __type.name(): __type, 
       __badges.name(): __badges})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'VendorSummary', VendorSummary)

class Vendors(UForgeObjects):
    """Complex type {http://www.usharesoft.com/marketplace}Vendors with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Vendors')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2252, 4)
    _ElementMap = UForgeObjects._ElementMap.copy()
    _AttributeMap = UForgeObjects._AttributeMap.copy()
    __vendors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'vendors'), b'vendors', b'__httpwww_usharesoft_commarketplace_Vendors_vendors', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2256, 20))
    vendors = property(__vendors.value, __vendors.set, None, None)
    _ElementMap.update({__vendors.name(): __vendors})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Vendors', Vendors)

class VendorMappingItem(UForgeObject):
    """Complex type {http://www.usharesoft.com/marketplace}VendorMappingItem with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'VendorMappingItem')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2268, 4)
    _ElementMap = UForgeObject._ElementMap.copy()
    _AttributeMap = UForgeObject._AttributeMap.copy()
    __uforgeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uforgeId'), b'uforgeId', b'__httpwww_usharesoft_commarketplace_VendorMappingItem_uforgeId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2272, 20))
    uforgeId = property(__uforgeId.value, __uforgeId.set, None, None)
    __billingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'billingId'), b'billingId', b'__httpwww_usharesoft_commarketplace_VendorMappingItem_billingId', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2273, 20))
    billingId = property(__billingId.value, __billingId.set, None, None)
    __data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'data'), b'data', b'__httpwww_usharesoft_commarketplace_VendorMappingItem_data', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2274, 20))
    data = property(__data.value, __data.set, None, None)
    __latestDigest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'latestDigest'), b'latestDigest', b'__httpwww_usharesoft_commarketplace_VendorMappingItem_latestDigest', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2275, 20))
    latestDigest = property(__latestDigest.value, __latestDigest.set, None, None)
    _ElementMap.update({__uforgeId.name(): __uforgeId, 
       __billingId.name(): __billingId, 
       __data.name(): __data, 
       __latestDigest.name(): __latestDigest})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'VendorMappingItem', VendorMappingItem)

class Artifact(UForgeUploadObject):
    """Complex type {http://www.usharesoft.com/marketplace}Artifact with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Artifact')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 336, 4)
    _ElementMap = UForgeUploadObject._ElementMap.copy()
    _AttributeMap = UForgeUploadObject._AttributeMap.copy()
    __binaryUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'binaryUri'), b'binaryUri', b'__httpwww_usharesoft_commarketplace_Artifact_binaryUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    binaryUri = property(__binaryUri.value, __binaryUri.set, None, None)
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_Artifact_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    description = property(__description.value, __description.set, None, None)
    __downloadUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'downloadUri'), b'downloadUri', b'__httpwww_usharesoft_commarketplace_Artifact_downloadUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    downloadUri = property(__downloadUri.value, __downloadUri.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Artifact_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    name = property(__name.value, __name.set, None, None)
    __remoteLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'remoteLocation'), b'remoteLocation', b'__httpwww_usharesoft_commarketplace_Artifact_remoteLocation', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    remoteLocation = property(__remoteLocation.value, __remoteLocation.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Artifact_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__binaryUri.name(): __binaryUri, 
       __description.name(): __description, 
       __downloadUri.name(): __downloadUri, 
       __name.name(): __name, 
       __remoteLocation.name(): __remoteLocation, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Artifact', Artifact)

class Image(UForgeUploadObject):
    """Complex type {http://www.usharesoft.com/marketplace}Image with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Image')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 767, 4)
    _ElementMap = UForgeUploadObject._ElementMap.copy()
    _AttributeMap = UForgeUploadObject._AttributeMap.copy()
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Image_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 771, 20))
    uri = property(__uri.value, __uri.set, None, None)
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_Image_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 772, 20))
    version = property(__version.value, __version.set, None, None)
    __completeSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'completeSize'), b'completeSize', b'__httpwww_usharesoft_commarketplace_Image_completeSize', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 773, 20))
    completeSize = property(__completeSize.value, __completeSize.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Image_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 774, 20))
    name = property(__name.value, __name.set, None, None)
    __revision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'revision'), b'revision', b'__httpwww_usharesoft_commarketplace_Image_revision', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 775, 20))
    revision = property(__revision.value, __revision.set, None, None)
    _ElementMap.update({__uri.name(): __uri, 
       __version.name(): __version, 
       __completeSize.name(): __completeSize, 
       __name.name(): __name, 
       __revision.name(): __revision})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Image', Image)

class Logo(UForgeUploadObject):
    """Complex type {http://www.usharesoft.com/marketplace}Logo with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'Logo')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 857, 4)
    _ElementMap = UForgeUploadObject._ElementMap.copy()
    _AttributeMap = UForgeUploadObject._AttributeMap.copy()
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'description'), b'description', b'__httpwww_usharesoft_commarketplace_Logo_description', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 861, 20))
    description = property(__description.value, __description.set, None, None)
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'name'), b'name', b'__httpwww_usharesoft_commarketplace_Logo_name', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 862, 20))
    name = property(__name.value, __name.set, None, None)
    __parentUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'parentUri'), b'parentUri', b'__httpwww_usharesoft_commarketplace_Logo_parentUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 863, 20))
    parentUri = property(__parentUri.value, __parentUri.set, None, None)
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'title'), b'title', b'__httpwww_usharesoft_commarketplace_Logo_title', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 864, 20))
    title = property(__title.value, __title.set, None, None)
    __uri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'uri'), b'uri', b'__httpwww_usharesoft_commarketplace_Logo_uri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 865, 20))
    uri = property(__uri.value, __uri.set, None, None)
    _ElementMap.update({__description.name(): __description, 
       __name.name(): __name, 
       __parentUri.name(): __parentUri, 
       __title.name(): __title, 
       __uri.name(): __uri})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'Logo', Logo)

class ApplianceTemplate(Artifact):
    """Complex type {http://www.usharesoft.com/marketplace}ApplianceTemplate with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'ApplianceTemplate')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 263, 4)
    _ElementMap = Artifact._ElementMap.copy()
    _AttributeMap = Artifact._AttributeMap.copy()
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'version'), b'version', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_version', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 267, 20))
    version = property(__version.value, __version.set, None, None)
    __passwordSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'passwordSet'), b'passwordSet', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_passwordSet', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 269, 20))
    passwordSet = property(__passwordSet.value, __passwordSet.set, None, None)
    __bootscriptsAdded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'bootscriptsAdded'), b'bootscriptsAdded', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_bootscriptsAdded', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 270, 20))
    bootscriptsAdded = property(__bootscriptsAdded.value, __bootscriptsAdded.set, None, None)
    __softwareAdded = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'softwareAdded'), b'softwareAdded', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_softwareAdded', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 271, 20))
    softwareAdded = property(__softwareAdded.value, __softwareAdded.set, None, None)
    __exportUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'exportUri'), b'exportUri', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_exportUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 273, 20))
    exportUri = property(__exportUri.value, __exportUri.set, None, None)
    __applianceUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'applianceUri'), b'applianceUri', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_applianceUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 274, 20))
    applianceUri = property(__applianceUri.value, __applianceUri.set, None, None)
    __serverUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'serverUrl'), b'serverUrl', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_serverUrl', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 275, 20))
    serverUrl = property(__serverUrl.value, __serverUrl.set, None, None)
    __accountUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'accountUri'), b'accountUri', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_accountUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 276, 20))
    accountUri = property(__accountUri.value, __accountUri.set, None, None)
    __osSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'osSettings'), b'osSettings', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_osSettings', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 278, 20))
    osSettings = property(__osSettings.value, __osSettings.set, None, None)
    __installSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'installSettings'), b'installSettings', b'__httpwww_usharesoft_commarketplace_ApplianceTemplate_installSettings', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 279, 20))
    installSettings = property(__installSettings.value, __installSettings.set, None, None)
    _ElementMap.update({__version.name(): __version, 
       __passwordSet.name(): __passwordSet, 
       __bootscriptsAdded.name(): __bootscriptsAdded, 
       __softwareAdded.name(): __softwareAdded, 
       __exportUri.name(): __exportUri, 
       __applianceUri.name(): __applianceUri, 
       __serverUrl.name(): __serverUrl, 
       __accountUri.name(): __accountUri, 
       __osSettings.name(): __osSettings, 
       __installSettings.name(): __installSettings})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'ApplianceTemplate', ApplianceTemplate)

class MachineImage(Artifact):
    """Complex type {http://www.usharesoft.com/marketplace}MachineImage with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'MachineImage')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 871, 4)
    _ElementMap = Artifact._ElementMap.copy()
    _AttributeMap = Artifact._AttributeMap.copy()
    __machineImageUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'machineImageUri'), b'machineImageUri', b'__httpwww_usharesoft_commarketplace_MachineImage_machineImageUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 875, 20))
    machineImageUri = property(__machineImageUri.value, __machineImageUri.set, None, None)
    __format = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'format'), b'format', b'__httpwww_usharesoft_commarketplace_MachineImage_format', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 876, 20))
    format = property(__format.value, __format.set, None, None)
    __osType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'osType'), b'osType', b'__httpwww_usharesoft_commarketplace_MachineImage_osType', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 884, 20))
    osType = property(__osType.value, __osType.set, None, None)
    __recommendation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'recommendation'), b'recommendation', b'__httpwww_usharesoft_commarketplace_MachineImage_recommendation', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 892, 20))
    recommendation = property(__recommendation.value, __recommendation.set, None, None)
    __serverUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'serverUrl'), b'serverUrl', b'__httpwww_usharesoft_commarketplace_MachineImage_serverUrl', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 893, 20))
    serverUrl = property(__serverUrl.value, __serverUrl.set, None, None)
    __accountUri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'accountUri'), b'accountUri', b'__httpwww_usharesoft_commarketplace_MachineImage_accountUri', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 894, 20))
    accountUri = property(__accountUri.value, __accountUri.set, None, None)
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'type'), b'type', b'__httpwww_usharesoft_commarketplace_MachineImage_type', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 895, 20))
    type = property(__type.value, __type.set, None, None)
    _ElementMap.update({__machineImageUri.name(): __machineImageUri, 
       __format.name(): __format, 
       __osType.name(): __osType, 
       __recommendation.name(): __recommendation, 
       __serverUrl.name(): __serverUrl, 
       __accountUri.name(): __accountUri, 
       __type.name(): __type})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'MachineImage', MachineImage)

class SaaS(Artifact):
    """Complex type {http://www.usharesoft.com/marketplace}SaaS with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, b'SaaS')
    _XSDLocation = pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1705, 4)
    _ElementMap = Artifact._ElementMap.copy()
    _AttributeMap = Artifact._AttributeMap.copy()
    __serviceUrl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, b'serviceUrl'), b'serviceUrl', b'__httpwww_usharesoft_commarketplace_SaaS_serviceUrl', False, pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1709, 20))
    serviceUrl = property(__serviceUrl.value, __serviceUrl.set, None, None)
    _ElementMap.update({__serviceUrl.name(): __serviceUrl})
    _AttributeMap.update({})


Namespace.addCategoryObject(b'typeBinding', b'SaaS', SaaS)
entitlement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'entitlement'), Entitlement, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 59, 4))
Namespace.addCategoryObject(b'elementBinding', entitlement.name().localName(), entitlement)
uforgeError = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'uforgeError'), UForgeError, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 165, 4))
Namespace.addCategoryObject(b'elementBinding', uforgeError.name().localName(), uforgeError)
address = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'address'), Address, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 7, 4))
Namespace.addCategoryObject(b'elementBinding', address.name().localName(), address)
apiKeyPair = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'apiKeyPair'), APIKeyPair, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 9, 4))
Namespace.addCategoryObject(b'elementBinding', apiKeyPair.name().localName(), apiKeyPair)
apiKeyPairs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'apiKeyPairs'), APIKeyPairs, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 11, 4))
Namespace.addCategoryObject(b'elementBinding', apiKeyPairs.name().localName(), apiKeyPairs)
appliance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'appliance'), Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 13, 4))
Namespace.addCategoryObject(b'elementBinding', appliance.name().localName(), appliance)
appliances = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'appliances'), Appliances, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 15, 4))
Namespace.addCategoryObject(b'elementBinding', appliances.name().localName(), appliances)
approval = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'approval'), Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 19, 4))
Namespace.addCategoryObject(b'elementBinding', approval.name().localName(), approval)
approvals = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'approvals'), Approvals, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 21, 4))
Namespace.addCategoryObject(b'elementBinding', approvals.name().localName(), approvals)
artifacts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'artifacts'), Artifacts, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 25, 4))
Namespace.addCategoryObject(b'elementBinding', artifacts.name().localName(), artifacts)
badge = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'badge'), Badge, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 27, 4))
Namespace.addCategoryObject(b'elementBinding', badge.name().localName(), badge)
badges = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'badges'), Badges, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 29, 4))
Namespace.addCategoryObject(b'elementBinding', badges.name().localName(), badges)
categories = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'categories'), Categories, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 31, 4))
Namespace.addCategoryObject(b'elementBinding', categories.name().localName(), categories)
category = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'category'), Category, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 33, 4))
Namespace.addCategoryObject(b'elementBinding', category.name().localName(), category)
comment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'comment'), Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 35, 4))
Namespace.addCategoryObject(b'elementBinding', comment.name().localName(), comment)
comments = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'comments'), Comments, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 37, 4))
Namespace.addCategoryObject(b'elementBinding', comments.name().localName(), comments)
companies = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'companies'), Companies, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 39, 4))
Namespace.addCategoryObject(b'elementBinding', companies.name().localName(), companies)
company = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'company'), Company, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 41, 4))
Namespace.addCategoryObject(b'elementBinding', company.name().localName(), company)
compatibleProduct = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'compatibleProduct'), CompatibleProduct, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 43, 4))
Namespace.addCategoryObject(b'elementBinding', compatibleProduct.name().localName(), compatibleProduct)
compatibleProducts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'compatibleProducts'), CompatibleProducts, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 45, 4))
Namespace.addCategoryObject(b'elementBinding', compatibleProducts.name().localName(), compatibleProducts)
cost = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'cost'), Cost, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 47, 4))
Namespace.addCategoryObject(b'elementBinding', cost.name().localName(), cost)
costs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'costs'), Costs, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 49, 4))
Namespace.addCategoryObject(b'elementBinding', costs.name().localName(), costs)
downloadTicket = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'downloadTicket'), DownloadTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 51, 4))
Namespace.addCategoryObject(b'elementBinding', downloadTicket.name().localName(), downloadTicket)
downloadTickets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'downloadTickets'), DownloadTickets, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 53, 4))
Namespace.addCategoryObject(b'elementBinding', downloadTickets.name().localName(), downloadTickets)
edition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'edition'), Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 55, 4))
Namespace.addCategoryObject(b'elementBinding', edition.name().localName(), edition)
editions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'editions'), Editions, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 57, 4))
Namespace.addCategoryObject(b'elementBinding', editions.name().localName(), editions)
entitlements = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'entitlements'), Entitlements, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 61, 4))
Namespace.addCategoryObject(b'elementBinding', entitlements.name().localName(), entitlements)
export = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'export'), Export, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 63, 4))
Namespace.addCategoryObject(b'elementBinding', export.name().localName(), export)
Exports = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'Exports'), Exports_, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 65, 4))
Namespace.addCategoryObject(b'elementBinding', Exports.name().localName(), Exports)
include = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'include'), Include, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 67, 4))
Namespace.addCategoryObject(b'elementBinding', include.name().localName(), include)
includes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'includes'), Includes, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 69, 4))
Namespace.addCategoryObject(b'elementBinding', includes.name().localName(), includes)
installSettings = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'installSettings'), InstallSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 71, 4))
Namespace.addCategoryObject(b'elementBinding', installSettings.name().localName(), installSettings)
images = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'images'), Images, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 75, 4))
Namespace.addCategoryObject(b'elementBinding', images.name().localName(), images)
marketingPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'marketingPlan'), MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 81, 4))
Namespace.addCategoryObject(b'elementBinding', marketingPlan.name().localName(), marketingPlan)
marketingPlans = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'marketingPlans'), MarketingPlans, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 83, 4))
Namespace.addCategoryObject(b'elementBinding', marketingPlans.name().localName(), marketingPlans)
marketplace = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'marketplace'), Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 85, 4))
Namespace.addCategoryObject(b'elementBinding', marketplace.name().localName(), marketplace)
marketplaces = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'marketplaces'), Marketplaces, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 87, 4))
Namespace.addCategoryObject(b'elementBinding', marketplaces.name().localName(), marketplaces)
order = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'order'), Order, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 89, 4))
Namespace.addCategoryObject(b'elementBinding', order.name().localName(), order)
orders = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'orders'), Orders, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 91, 4))
Namespace.addCategoryObject(b'elementBinding', orders.name().localName(), orders)
org = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'org'), Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 93, 4))
Namespace.addCategoryObject(b'elementBinding', org.name().localName(), org)
orgs = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'orgs'), Orgs, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 95, 4))
Namespace.addCategoryObject(b'elementBinding', orgs.name().localName(), orgs)
osSettings = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'osSettings'), OSSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 97, 4))
Namespace.addCategoryObject(b'elementBinding', osSettings.name().localName(), osSettings)
period = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'period'), Period, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 99, 4))
Namespace.addCategoryObject(b'elementBinding', period.name().localName(), period)
pricingPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'pricingPlan'), PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 101, 4))
Namespace.addCategoryObject(b'elementBinding', pricingPlan.name().localName(), pricingPlan)
pricingPlans = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'pricingPlans'), PricingPlans, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 103, 4))
Namespace.addCategoryObject(b'elementBinding', pricingPlans.name().localName(), pricingPlans)
product = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'product'), Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 105, 4))
Namespace.addCategoryObject(b'elementBinding', product.name().localName(), product)
productItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productItem'), ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 107, 4))
Namespace.addCategoryObject(b'elementBinding', productItem.name().localName(), productItem)
productItemDetails = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productItemDetails'), ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 109, 4))
Namespace.addCategoryObject(b'elementBinding', productItemDetails.name().localName(), productItemDetails)
productItemDetailsList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productItemDetailsList'), ProductItemDetailsList, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 111, 4))
Namespace.addCategoryObject(b'elementBinding', productItemDetailsList.name().localName(), productItemDetailsList)
productItems = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productItems'), ProductItems, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 113, 4))
Namespace.addCategoryObject(b'elementBinding', productItems.name().localName(), productItems)
productItemSummary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productItemSummary'), ProductItemSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 115, 4))
Namespace.addCategoryObject(b'elementBinding', productItemSummary.name().localName(), productItemSummary)
productItemSummaryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productItemSummaryList'), ProductItemSummaryList, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 117, 4))
Namespace.addCategoryObject(b'elementBinding', productItemSummaryList.name().localName(), productItemSummaryList)
productResource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productResource'), ProductResource, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 119, 4))
Namespace.addCategoryObject(b'elementBinding', productResource.name().localName(), productResource)
products = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'products'), Products, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 121, 4))
Namespace.addCategoryObject(b'elementBinding', products.name().localName(), products)
productSummary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productSummary'), ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 123, 4))
Namespace.addCategoryObject(b'elementBinding', productSummary.name().localName(), productSummary)
productSummaryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productSummaryList'), ProductSummaryList, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 125, 4))
Namespace.addCategoryObject(b'elementBinding', productSummaryList.name().localName(), productSummaryList)
productType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productType'), ProductType, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 127, 4))
Namespace.addCategoryObject(b'elementBinding', productType.name().localName(), productType)
productTypes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'productTypes'), ProductTypes, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 129, 4))
Namespace.addCategoryObject(b'elementBinding', productTypes.name().localName(), productTypes)
purchase = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'purchase'), Purchase, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 131, 4))
Namespace.addCategoryObject(b'elementBinding', purchase.name().localName(), purchase)
purchases = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'purchases'), Purchases, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 133, 4))
Namespace.addCategoryObject(b'elementBinding', purchases.name().localName(), purchases)
quota = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'quota'), Quota, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 135, 4))
Namespace.addCategoryObject(b'elementBinding', quota.name().localName(), quota)
quotas = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'quotas'), Quotas, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 137, 4))
Namespace.addCategoryObject(b'elementBinding', quotas.name().localName(), quotas)
role = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'role'), Role, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 139, 4))
Namespace.addCategoryObject(b'elementBinding', role.name().localName(), role)
roles = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'roles'), Roles, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 141, 4))
Namespace.addCategoryObject(b'elementBinding', roles.name().localName(), roles)
serviceStatus = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'serviceStatus'), ServiceStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 143, 4))
Namespace.addCategoryObject(b'elementBinding', serviceStatus.name().localName(), serviceStatus)
statTicket = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'statTicket'), StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 145, 4))
Namespace.addCategoryObject(b'elementBinding', statTicket.name().localName(), statTicket)
statTickets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'statTickets'), StatTickets, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 147, 4))
Namespace.addCategoryObject(b'elementBinding', statTickets.name().localName(), statTickets)
status = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'status'), OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 149, 4))
Namespace.addCategoryObject(b'elementBinding', status.name().localName(), status)
statuses = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'statuses'), OpStatuses, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 151, 4))
Namespace.addCategoryObject(b'elementBinding', statuses.name().localName(), statuses)
subscriptionProfile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'subscriptionProfile'), SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 153, 4))
Namespace.addCategoryObject(b'elementBinding', subscriptionProfile.name().localName(), subscriptionProfile)
subscriptionProfiles = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'subscriptionProfiles'), SubscriptionProfiles, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 155, 4))
Namespace.addCategoryObject(b'elementBinding', subscriptionProfiles.name().localName(), subscriptionProfiles)
supportPlan = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'supportPlan'), SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 157, 4))
Namespace.addCategoryObject(b'elementBinding', supportPlan.name().localName(), supportPlan)
supportPlans = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'supportPlans'), SupportPlans, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 159, 4))
Namespace.addCategoryObject(b'elementBinding', supportPlans.name().localName(), supportPlans)
uforgeCredAccount = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'uforgeCredAccount'), UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 161, 4))
Namespace.addCategoryObject(b'elementBinding', uforgeCredAccount.name().localName(), uforgeCredAccount)
uforgeCredAccounts = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'uforgeCredAccounts'), UforgeCredAccounts, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 163, 4))
Namespace.addCategoryObject(b'elementBinding', uforgeCredAccounts.name().localName(), uforgeCredAccounts)
unit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'unit'), Unit, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 167, 4))
Namespace.addCategoryObject(b'elementBinding', unit.name().localName(), unit)
units = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'units'), Units, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 169, 4))
Namespace.addCategoryObject(b'elementBinding', units.name().localName(), units)
user = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'user'), User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 171, 4))
Namespace.addCategoryObject(b'elementBinding', user.name().localName(), user)
users = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'users'), Users, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 173, 4))
Namespace.addCategoryObject(b'elementBinding', users.name().localName(), users)
vendor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'vendor'), Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 175, 4))
Namespace.addCategoryObject(b'elementBinding', vendor.name().localName(), vendor)
vendorMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'vendorMember'), VendorMember, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 177, 4))
Namespace.addCategoryObject(b'elementBinding', vendorMember.name().localName(), vendorMember)
vendorMembers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'vendorMembers'), VendorMembers, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 179, 4))
Namespace.addCategoryObject(b'elementBinding', vendorMembers.name().localName(), vendorMembers)
vendorSummary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'vendorSummary'), VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 181, 4))
Namespace.addCategoryObject(b'elementBinding', vendorSummary.name().localName(), vendorSummary)
vendors = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'vendors'), Vendors, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 183, 4))
Namespace.addCategoryObject(b'elementBinding', vendors.name().localName(), vendors)
vendorMappingItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'vendorMappingItem'), VendorMappingItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 185, 4))
Namespace.addCategoryObject(b'elementBinding', vendorMappingItem.name().localName(), vendorMappingItem)
artifact = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'artifact'), Artifact, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 23, 4))
Namespace.addCategoryObject(b'elementBinding', artifact.name().localName(), artifact)
image = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'image'), Image, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 73, 4))
Namespace.addCategoryObject(b'elementBinding', image.name().localName(), image)
logo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'logo'), Logo, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 77, 4))
Namespace.addCategoryObject(b'elementBinding', logo.name().localName(), logo)
applianceTemplate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'applianceTemplate'), ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 17, 4))
Namespace.addCategoryObject(b'elementBinding', applianceTemplate.name().localName(), applianceTemplate)
machineImage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, b'machineImage'), MachineImage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 79, 4))
Namespace.addCategoryObject(b'elementBinding', machineImage.name().localName(), machineImage)
CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'apiKeyPair'), APIKeyPair, scope=CTD_ANON, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 220, 32)))

def _BuildAutomaton():
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 220, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, b'apiKeyPair')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 220, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON._Automaton = _BuildAutomaton()
CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'appliance'), Appliance, scope=CTD_ANON_, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 254, 32)))

def _BuildAutomaton_():
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 254, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, b'appliance')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 254, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_._Automaton = _BuildAutomaton_()
CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'note'), Comment, scope=CTD_ANON_2, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 295, 32)))

def _BuildAutomaton_2():
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 295, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, b'note')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 295, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_2._Automaton = _BuildAutomaton_2()
CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'approval'), Approval, scope=CTD_ANON_3, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 327, 32)))

def _BuildAutomaton_3():
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 327, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, b'approval')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 327, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_3._Automaton = _BuildAutomaton_3()
CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'artifact'), Artifact, scope=CTD_ANON_4, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 358, 32)))

def _BuildAutomaton_4():
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 358, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, b'artifact')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 358, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_4._Automaton = _BuildAutomaton_4()
CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badge'), Badge, scope=CTD_ANON_5, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 388, 32)))

def _BuildAutomaton_5():
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 388, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, b'badge')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 388, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_5._Automaton = _BuildAutomaton_5()
CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'category'), Category, scope=CTD_ANON_6, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 404, 32)))

def _BuildAutomaton_6():
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 404, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, b'category')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 404, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_6._Automaton = _BuildAutomaton_6()
CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'category'), Category, scope=CTD_ANON_7, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 422, 32)))

def _BuildAutomaton_7():
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 422, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, b'category')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 422, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_7._Automaton = _BuildAutomaton_7()
CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'comment'), Comment, scope=CTD_ANON_8, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 454, 32)))

def _BuildAutomaton_8():
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 454, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, b'comment')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 454, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_8._Automaton = _BuildAutomaton_8()
CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'comment'), Comment, scope=CTD_ANON_9, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 485, 32)))

def _BuildAutomaton_9():
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 485, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, b'comment')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 485, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_9._Automaton = _BuildAutomaton_9()
CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'company'), Company, scope=CTD_ANON_10, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 501, 32)))

def _BuildAutomaton_10():
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 501, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, b'company')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 501, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_10._Automaton = _BuildAutomaton_10()
CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'compatibleProduct'), CompatibleProduct, scope=CTD_ANON_11, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 545, 32)))

def _BuildAutomaton_11():
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 545, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, b'compatibleProduct')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 545, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_11._Automaton = _BuildAutomaton_11()
CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'cost'), Cost, scope=CTD_ANON_12, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 589, 32)))

def _BuildAutomaton_12():
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 589, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, b'cost')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 589, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_12._Automaton = _BuildAutomaton_12()
CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'downloadTicket'), DownloadTicket, scope=CTD_ANON_13, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 632, 32)))

def _BuildAutomaton_13():
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 632, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, b'downloadTicket')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 632, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_13._Automaton = _BuildAutomaton_13()
CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'cost'), Cost, scope=CTD_ANON_14, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 649, 32)))

def _BuildAutomaton_14():
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 649, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, b'cost')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 649, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_14._Automaton = _BuildAutomaton_14()
CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'include'), Include, scope=CTD_ANON_15, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 657, 32)))

def _BuildAutomaton_15():
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 657, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, b'include')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 657, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_15._Automaton = _BuildAutomaton_15()
CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'unit'), Unit, scope=CTD_ANON_16, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 678, 32)))

def _BuildAutomaton_16():
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 678, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, b'unit')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 678, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_16._Automaton = _BuildAutomaton_16()
CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'edition'), Edition, scope=CTD_ANON_17, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 697, 32)))

def _BuildAutomaton_17():
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 697, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, b'edition')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 697, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_17._Automaton = _BuildAutomaton_17()
Entitlement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=Entitlement, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 708, 12)))
Entitlement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Entitlement, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 709, 12)))

def _BuildAutomaton_18():
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 708, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 709, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Entitlement._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 708, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Entitlement._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 709, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Entitlement._Automaton = _BuildAutomaton_18()
CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'entitlement'), Entitlement, scope=CTD_ANON_18, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 720, 32)))

def _BuildAutomaton_19():
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 720, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, b'entitlement')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 720, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_18._Automaton = _BuildAutomaton_19()
CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'export'), Export, scope=CTD_ANON_19, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 749, 32)))

def _BuildAutomaton_20():
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 749, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, b'export')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 749, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_19._Automaton = _BuildAutomaton_20()
CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'image'), Image, scope=CTD_ANON_20, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 788, 32)))

def _BuildAutomaton_21():
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 788, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, b'image')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 788, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_20._Automaton = _BuildAutomaton_21()
CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'include'), Include, scope=CTD_ANON_21, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 815, 32)))

def _BuildAutomaton_22():
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 815, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, b'include')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 815, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_21._Automaton = _BuildAutomaton_22()
LocalizedMessage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'message'), pyxb.binding.datatypes.string, scope=LocalizedMessage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 845, 12)))
LocalizedMessage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'messageId'), pyxb.binding.datatypes.string, scope=LocalizedMessage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 846, 12)))
LocalizedMessage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parameters'), CTD_ANON_22, scope=LocalizedMessage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 847, 12)))

def _BuildAutomaton_23():
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 845, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 846, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 847, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LocalizedMessage._UseForTag(pyxb.namespace.ExpandedName(None, b'message')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 845, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LocalizedMessage._UseForTag(pyxb.namespace.ExpandedName(None, b'messageId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 846, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LocalizedMessage._UseForTag(pyxb.namespace.ExpandedName(None, b'parameters')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 847, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


LocalizedMessage._Automaton = _BuildAutomaton_23()
CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parameter'), pyxb.binding.datatypes.string, scope=CTD_ANON_22, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 850, 24)))

def _BuildAutomaton_24():
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 850, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, b'parameter')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 850, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_22._Automaton = _BuildAutomaton_24()
CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'category'), Category, scope=CTD_ANON_23, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 917, 32)))

def _BuildAutomaton_25():
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 917, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, b'category')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 917, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_23._Automaton = _BuildAutomaton_25()
CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'resource'), ProductResource, scope=CTD_ANON_24, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 933, 32)))

def _BuildAutomaton_26():
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 933, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, b'resource')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 933, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_24._Automaton = _BuildAutomaton_26()
CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'screenshot'), Logo, scope=CTD_ANON_25, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 940, 32)))

def _BuildAutomaton_27():
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 940, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, b'screenshot')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 940, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_25._Automaton = _BuildAutomaton_27()
CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketingPlan'), MarketingPlan, scope=CTD_ANON_26, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 961, 32)))

def _BuildAutomaton_28():
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 961, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, b'marketingPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 961, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_26._Automaton = _BuildAutomaton_28()
CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketplace'), Marketplace, scope=CTD_ANON_27, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 997, 32)))

def _BuildAutomaton_29():
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 997, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, b'marketplace')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 997, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_27._Automaton = _BuildAutomaton_29()
CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'status'), OpStatus, scope=CTD_ANON_28, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1037, 32)))

def _BuildAutomaton_30():
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1037, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1037, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_28._Automaton = _BuildAutomaton_30()
CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'order'), Order, scope=CTD_ANON_29, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1064, 32)))

def _BuildAutomaton_31():
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1064, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(None, b'order')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1064, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_29._Automaton = _BuildAutomaton_31()
CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'subscriptionProfile'), SubscriptionProfile, scope=CTD_ANON_30, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1089, 32)))

def _BuildAutomaton_32():
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1089, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(None, b'subscriptionProfile')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1089, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_30._Automaton = _BuildAutomaton_32()
CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'org'), Org, scope=CTD_ANON_31, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1109, 32)))

def _BuildAutomaton_33():
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1109, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(None, b'org')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1109, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_31._Automaton = _BuildAutomaton_33()
CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'edition'), Edition, scope=CTD_ANON_32, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1152, 32)))

def _BuildAutomaton_34():
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1152, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(None, b'edition')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1152, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_32._Automaton = _BuildAutomaton_34()
CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'resource'), ProductResource, scope=CTD_ANON_33, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1165, 32)))

def _BuildAutomaton_35():
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1165, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(None, b'resource')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1165, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_33._Automaton = _BuildAutomaton_35()
CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'pricingPlan'), PricingPlan, scope=CTD_ANON_34, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1183, 32)))

def _BuildAutomaton_36():
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1183, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(None, b'pricingPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1183, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_34._Automaton = _BuildAutomaton_36()
CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'comment'), Comment, scope=CTD_ANON_35, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1201, 32)))

def _BuildAutomaton_37():
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1201, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(None, b'comment')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1201, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_35._Automaton = _BuildAutomaton_37()
CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'item'), ProductItem, scope=CTD_ANON_36, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1209, 32)))

def _BuildAutomaton_38():
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1209, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(None, b'item')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1209, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_36._Automaton = _BuildAutomaton_38()
CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'artifact'), Artifact, scope=CTD_ANON_37, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1237, 32)))

def _BuildAutomaton_39():
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1237, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(None, b'artifact')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1237, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_37._Automaton = _BuildAutomaton_39()
CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badge'), Badge, scope=CTD_ANON_38, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1245, 32)))

def _BuildAutomaton_40():
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1245, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(None, b'badge')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1245, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_38._Automaton = _BuildAutomaton_40()
CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'compatibleProduct'), CompatibleProduct, scope=CTD_ANON_39, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1254, 32)))

def _BuildAutomaton_41():
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1254, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(None, b'compatibleProduct')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1254, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_39._Automaton = _BuildAutomaton_41()
CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badge'), Badge, scope=CTD_ANON_40, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1303, 32)))

def _BuildAutomaton_42():
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1303, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(None, b'badge')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1303, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_40._Automaton = _BuildAutomaton_42()
CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'compatibleProduct'), CompatibleProduct, scope=CTD_ANON_41, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1312, 32)))

def _BuildAutomaton_43():
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1312, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(None, b'compatibleProduct')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1312, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_41._Automaton = _BuildAutomaton_43()
CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'edition'), Edition, scope=CTD_ANON_42, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1322, 32)))

def _BuildAutomaton_44():
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1322, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(None, b'edition')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1322, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_42._Automaton = _BuildAutomaton_44()
CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketingResource'), ProductResource, scope=CTD_ANON_43, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1334, 32)))

def _BuildAutomaton_45():
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1334, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(None, b'marketingResource')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1334, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_43._Automaton = _BuildAutomaton_45()
CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'otherRelease'), ProductItemSummary, scope=CTD_ANON_44, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1345, 32)))

def _BuildAutomaton_46():
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1345, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(None, b'otherRelease')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1345, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_44._Automaton = _BuildAutomaton_46()
CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'pricingResource'), ProductResource, scope=CTD_ANON_45, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1355, 32)))

def _BuildAutomaton_47():
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1355, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(None, b'pricingResource')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1355, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_45._Automaton = _BuildAutomaton_47()
CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'screenshot'), Logo, scope=CTD_ANON_46, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1369, 32)))

def _BuildAutomaton_48():
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1369, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(None, b'screenshot')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1369, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_46._Automaton = _BuildAutomaton_48()
CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportResource'), ProductResource, scope=CTD_ANON_47, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1381, 32)))

def _BuildAutomaton_49():
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1381, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(None, b'supportResource')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1381, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_47._Automaton = _BuildAutomaton_49()
CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemDetails'), ProductItemDetails, scope=CTD_ANON_48, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1406, 32)))

def _BuildAutomaton_50():
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1406, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemDetails')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1406, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_48._Automaton = _BuildAutomaton_50()
CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItem'), ProductItem, scope=CTD_ANON_49, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1423, 32)))

def _BuildAutomaton_51():
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1423, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(None, b'productItem')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1423, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_49._Automaton = _BuildAutomaton_51()
CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemSummary'), ProductItemSummary, scope=CTD_ANON_50, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1454, 32)))

def _BuildAutomaton_52():
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1454, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemSummary')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1454, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_50._Automaton = _BuildAutomaton_52()
CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'product'), Product, scope=CTD_ANON_51, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1492, 32)))

def _BuildAutomaton_53():
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1492, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(None, b'product')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1492, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_51._Automaton = _BuildAutomaton_53()
CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badge'), Badge, scope=CTD_ANON_52, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1508, 32)))

def _BuildAutomaton_54():
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1508, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(None, b'badge')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1508, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_52._Automaton = _BuildAutomaton_54()
CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productSummary'), ProductSummary, scope=CTD_ANON_53, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1545, 32)))

def _BuildAutomaton_55():
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1545, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(None, b'productSummary')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1545, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_53._Automaton = _BuildAutomaton_55()
CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productType'), ProductType, scope=CTD_ANON_54, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1584, 32)))

def _BuildAutomaton_56():
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1584, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(None, b'productType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1584, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_54._Automaton = _BuildAutomaton_56()
CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchase'), Purchase, scope=CTD_ANON_55, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1614, 32)))

def _BuildAutomaton_57():
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1614, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(None, b'purchase')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1614, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_55._Automaton = _BuildAutomaton_57()
CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'quota'), Quota, scope=CTD_ANON_56, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1662, 32)))

def _BuildAutomaton_58():
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1662, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(None, b'quota')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1662, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_56._Automaton = _BuildAutomaton_58()
CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'entitlement'), Entitlement, scope=CTD_ANON_57, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1679, 32)))

def _BuildAutomaton_59():
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1679, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(None, b'entitlement')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1679, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_57._Automaton = _BuildAutomaton_59()
CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'role'), Role, scope=CTD_ANON_58, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1696, 32)))

def _BuildAutomaton_60():
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1696, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(None, b'role')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1696, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_58._Automaton = _BuildAutomaton_60()
CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'statTicket'), StatTicket, scope=CTD_ANON_59, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1781, 32)))

def _BuildAutomaton_61():
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1781, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(None, b'statTicket')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1781, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_59._Automaton = _BuildAutomaton_61()
CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'admin'), User, scope=CTD_ANON_60, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1798, 32)))

def _BuildAutomaton_62():
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1798, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(None, b'admin')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1798, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_60._Automaton = _BuildAutomaton_62()
CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'quota'), Quota, scope=CTD_ANON_61, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1810, 32)))

def _BuildAutomaton_63():
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1810, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(None, b'quota')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1810, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_61._Automaton = _BuildAutomaton_63()
CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'role'), Role, scope=CTD_ANON_62, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1818, 32)))

def _BuildAutomaton_64():
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1818, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(None, b'role')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1818, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_62._Automaton = _BuildAutomaton_64()
CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'subscriptionProfile'), SubscriptionProfile, scope=CTD_ANON_63, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1836, 32)))

def _BuildAutomaton_65():
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1836, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(None, b'subscriptionProfile')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1836, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_63._Automaton = _BuildAutomaton_65()
CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'resource'), ProductResource, scope=CTD_ANON_64, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1859, 32)))

def _BuildAutomaton_66():
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1859, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(None, b'resource')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1859, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_64._Automaton = _BuildAutomaton_66()
CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportPlan'), SupportPlan, scope=CTD_ANON_65, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1879, 32)))

def _BuildAutomaton_67():
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1879, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(None, b'supportPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1879, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_65._Automaton = _BuildAutomaton_67()
CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uforgeCredAccount'), UforgeCredAccount, scope=CTD_ANON_66, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1912, 32)))

def _BuildAutomaton_68():
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1912, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(None, b'uforgeCredAccount')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1912, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_66._Automaton = _BuildAutomaton_68()
UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'localizedErrorMsg'), LocalizedMessage, scope=UForgeError, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1924, 12)))
UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'requestMethod'), pyxb.binding.datatypes.string, scope=UForgeError, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1925, 12)))
UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'requestUri'), pyxb.binding.datatypes.string, scope=UForgeError, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1926, 12)))
UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'statusCode'), pyxb.binding.datatypes.int, scope=UForgeError, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1927, 12)))
UForgeError._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'timestamp'), pyxb.binding.datatypes.dateTime, scope=UForgeError, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1928, 12)))

def _BuildAutomaton_69():
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1924, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1925, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1926, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1927, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1928, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, b'localizedErrorMsg')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1924, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, b'requestMethod')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1925, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, b'requestUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1926, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, b'statusCode')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1927, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UForgeError._UseForTag(pyxb.namespace.ExpandedName(None, b'timestamp')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1928, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


UForgeError._Automaton = _BuildAutomaton_69()
UForgeObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'created'), pyxb.binding.datatypes.dateTime, scope=UForgeObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12)))
UForgeObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'dbId'), pyxb.binding.datatypes.long, scope=UForgeObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12)))
UForgeObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'digest'), pyxb.binding.datatypes.string, scope=UForgeObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12)))
UForgeObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'lastModified'), pyxb.binding.datatypes.dateTime, scope=UForgeObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12)))

def _BuildAutomaton_70():
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObject._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObject._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObject._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObject._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


UForgeObject._Automaton = _BuildAutomaton_70()
UForgeObjects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'total'), pyxb.binding.datatypes.long, scope=UForgeObjects, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12)))

def _BuildAutomaton_71():
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UForgeObjects._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


UForgeObjects._Automaton = _BuildAutomaton_71()
CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'unit'), Unit, scope=CTD_ANON_67, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2006, 32)))

def _BuildAutomaton_72():
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2006, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(None, b'unit')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2006, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_67._Automaton = _BuildAutomaton_72()
UriList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=UriList, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2017, 12)))

def _BuildAutomaton_73():
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2017, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UriList._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2017, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


UriList._Automaton = _BuildAutomaton_73()
CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'role'), Role, scope=CTD_ANON_68, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2058, 32)))

def _BuildAutomaton_74():
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2058, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(None, b'role')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2058, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_68._Automaton = _BuildAutomaton_74()
CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uforgeCredAccount'), UforgeCredAccount, scope=CTD_ANON_69, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2066, 32)))

def _BuildAutomaton_75():
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2066, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(None, b'uforgeCredAccount')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2066, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_69._Automaton = _BuildAutomaton_75()
CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'exports'), Export, scope=CTD_ANON_70, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2073, 32)))

def _BuildAutomaton_76():
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2073, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(None, b'exports')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2073, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_70._Automaton = _BuildAutomaton_76()
CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'user'), User, scope=CTD_ANON_71, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2094, 32)))

def _BuildAutomaton_77():
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2094, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(None, b'user')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2094, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_71._Automaton = _BuildAutomaton_77()
CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badge'), Badge, scope=CTD_ANON_72, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2111, 32)))

def _BuildAutomaton_78():
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2111, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(None, b'badge')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2111, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_72._Automaton = _BuildAutomaton_78()
CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketingPlan'), MarketingPlan, scope=CTD_ANON_73, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2123, 32)))

def _BuildAutomaton_79():
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2123, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(None, b'marketingPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2123, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_73._Automaton = _BuildAutomaton_79()
CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'member'), VendorMember, scope=CTD_ANON_74, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2132, 32)))

def _BuildAutomaton_80():
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2132, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(None, b'member')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2132, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_74._Automaton = _BuildAutomaton_80()
CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'pricingPlan'), PricingPlan, scope=CTD_ANON_75, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2147, 32)))

def _BuildAutomaton_81():
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2147, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(None, b'pricingPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2147, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_75._Automaton = _BuildAutomaton_81()
CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'product'), Product, scope=CTD_ANON_76, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2155, 32)))

def _BuildAutomaton_82():
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2155, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(None, b'product')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2155, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_76._Automaton = _BuildAutomaton_82()
CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportPlan'), SupportPlan, scope=CTD_ANON_77, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2164, 32)))

def _BuildAutomaton_83():
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2164, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(None, b'supportPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2164, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_77._Automaton = _BuildAutomaton_83()
CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorMember'), VendorMember, scope=CTD_ANON_78, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2207, 32)))

def _BuildAutomaton_84():
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2207, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorMember')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2207, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_78._Automaton = _BuildAutomaton_84()
CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badge'), Badge, scope=CTD_ANON_79, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2243, 32)))

def _BuildAutomaton_85():
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2243, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(None, b'badge')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2243, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_79._Automaton = _BuildAutomaton_85()
CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendor'), Vendor, scope=CTD_ANON_80, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2259, 32)))

def _BuildAutomaton_86():
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2259, 32))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(None, b'vendor')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2259, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CTD_ANON_80._Automaton = _BuildAutomaton_86()
Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'country'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 191, 20)))
Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'region_state'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 192, 20)))
Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'street'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 193, 20)))
Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'town'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 194, 20)))
Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'zipcode'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 195, 20)))

def _BuildAutomaton_87():
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 191, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 192, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 193, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 194, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 195, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'country')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 191, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'region_state')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 192, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'street')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 193, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'town')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 194, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, b'zipcode')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 195, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Address._Automaton = _BuildAutomaton_87()
APIKeyPair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'publicKey'), pyxb.binding.datatypes.string, scope=APIKeyPair, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 205, 20)))
APIKeyPair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'secretKey'), pyxb.binding.datatypes.string, scope=APIKeyPair, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 206, 20)))
APIKeyPair._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=APIKeyPair, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 207, 20)))

def _BuildAutomaton_88():
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 205, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 206, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 207, 20))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, b'publicKey')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 205, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, b'secretKey')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 206, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPair._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 207, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


APIKeyPair._Automaton = _BuildAutomaton_88()
APIKeyPairs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'apiKeyPairs'), CTD_ANON, scope=APIKeyPairs, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 217, 20)))

def _BuildAutomaton_89():
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 217, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPairs._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(APIKeyPairs._UseForTag(pyxb.namespace.ExpandedName(None, b'apiKeyPairs')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 217, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


APIKeyPairs._Automaton = _BuildAutomaton_89()
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 233, 20)))
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 234, 20)))
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 235, 20)))
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'archName'), pyxb.binding.datatypes.string, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 236, 20)))
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 237, 20)))
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'distributionName'), pyxb.binding.datatypes.string, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 238, 20)))
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'revision'), pyxb.binding.datatypes.int, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 239, 20)))
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'shared'), pyxb.binding.datatypes.boolean, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 240, 20)))
Appliance._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'size'), pyxb.binding.datatypes.long, scope=Appliance, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 241, 20)))

def _BuildAutomaton_90():
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 233, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 234, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 235, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 236, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 237, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 238, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 239, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 240, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 241, 20))
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 233, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 234, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 235, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'archName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 236, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 237, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'distributionName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 238, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'revision')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 239, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'shared')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 240, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Appliance._UseForTag(pyxb.namespace.ExpandedName(None, b'size')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 241, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Appliance._Automaton = _BuildAutomaton_90()
Appliances._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'appliances'), CTD_ANON_, scope=Appliances, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 251, 20)))

def _BuildAutomaton_91():
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 251, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Appliances._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Appliances._UseForTag(pyxb.namespace.ExpandedName(None, b'appliances')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 251, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Appliances._Automaton = _BuildAutomaton_91()
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'assignee'), pyxb.binding.datatypes.string, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 289, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'endDate'), pyxb.binding.datatypes.dateTime, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 290, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'estimatedTime'), pyxb.binding.datatypes.int, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 291, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'notes'), CTD_ANON_2, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 292, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'notesUri'), pyxb.binding.datatypes.anyURI, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 299, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'percentageDone'), pyxb.binding.datatypes.int, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 300, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItem'), ProductItem, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 301, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'startDate'), pyxb.binding.datatypes.dateTime, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 302, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'status'), STD_ANON, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 303, 20)))
Approval._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Approval, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 314, 20)))

def _BuildAutomaton_92():
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 289, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 290, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 291, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 292, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 299, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 300, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 301, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 302, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 303, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 314, 20))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'assignee')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 289, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'endDate')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 290, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'estimatedTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 291, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'notes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 292, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'notesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 299, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'percentageDone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 300, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'productItem')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 301, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'startDate')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 302, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 303, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Approval._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 314, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Approval._Automaton = _BuildAutomaton_92()
Approvals._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'approvals'), CTD_ANON_3, scope=Approvals, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 324, 20)))

def _BuildAutomaton_93():
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 324, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Approvals._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Approvals._UseForTag(pyxb.namespace.ExpandedName(None, b'approvals')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 324, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Approvals._Automaton = _BuildAutomaton_93()
Artifacts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'artifacts'), CTD_ANON_4, scope=Artifacts, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 355, 20)))

def _BuildAutomaton_94():
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 355, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Artifacts._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Artifacts._UseForTag(pyxb.namespace.ExpandedName(None, b'artifacts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 355, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Artifacts._Automaton = _BuildAutomaton_94()
Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'disabled'), pyxb.binding.datatypes.boolean, scope=Badge, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 371, 20)))
Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'icon'), Logo, scope=Badge, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 372, 20)))
Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'label'), pyxb.binding.datatypes.string, scope=Badge, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 373, 20)))
Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'title'), pyxb.binding.datatypes.string, scope=Badge, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 374, 20)))
Badge._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Badge, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 375, 20)))

def _BuildAutomaton_95():
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 371, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 372, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 373, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 374, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 375, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'disabled')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 371, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'icon')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 372, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'label')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 373, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'title')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 374, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Badge._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 375, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Badge._Automaton = _BuildAutomaton_95()
Badges._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badges'), CTD_ANON_5, scope=Badges, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 385, 20)))

def _BuildAutomaton_96():
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 385, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Badges._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Badges._UseForTag(pyxb.namespace.ExpandedName(None, b'badges')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 385, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Badges._Automaton = _BuildAutomaton_96()
Categories._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'categories'), CTD_ANON_6, scope=Categories, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 401, 20)))

def _BuildAutomaton_97():
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 401, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Categories._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Categories._UseForTag(pyxb.namespace.ExpandedName(None, b'categories')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 401, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Categories._Automaton = _BuildAutomaton_97()
Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Category, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 417, 20)))
Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'orgUri'), pyxb.binding.datatypes.anyURI, scope=Category, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 418, 20)))
Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'subCategories'), CTD_ANON_7, scope=Category, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 419, 20)))
Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'subCategoryUri'), pyxb.binding.datatypes.anyURI, scope=Category, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 426, 20)))
Category._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Category, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 427, 20)))

def _BuildAutomaton_98():
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 417, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 418, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 419, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 426, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 427, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 417, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'orgUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 418, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'subCategories')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 419, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'subCategoryUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 426, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Category._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 427, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Category._Automaton = _BuildAutomaton_98()
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'abused'), pyxb.binding.datatypes.boolean, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 437, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'abuseUri'), pyxb.binding.datatypes.anyURI, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 438, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'likesUri'), pyxb.binding.datatypes.anyURI, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 439, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'loginName'), pyxb.binding.datatypes.string, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 440, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'message'), pyxb.binding.datatypes.string, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 441, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbAbused'), pyxb.binding.datatypes.int, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 442, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbDislike'), pyxb.binding.datatypes.int, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 443, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbLike'), pyxb.binding.datatypes.int, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 444, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'photo'), Logo, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 445, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'rating'), STD_ANON_, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 446, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'replies'), CTD_ANON_8, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 451, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'replyUri'), pyxb.binding.datatypes.anyURI, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 458, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'tags'), pyxb.binding.datatypes.string, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 459, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'timestamp'), pyxb.binding.datatypes.string, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 460, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_2, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 461, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'reference'), ProductItemSummary, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 471, 20)))
Comment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Comment, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 472, 20)))

def _BuildAutomaton_99():
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 437, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 438, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 439, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 440, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 441, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 442, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 443, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 444, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 445, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 446, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 451, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 458, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 459, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 460, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 461, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 471, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 472, 20))
    counters.add(cc_20)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'abused')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 437, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'abuseUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 438, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'likesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 439, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'loginName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 440, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'message')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 441, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'nbAbused')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 442, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'nbDislike')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 443, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'nbLike')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 444, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'photo')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 445, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'rating')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 446, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'replies')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 451, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'replyUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 458, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'tags')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 459, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'timestamp')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 460, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 461, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'reference')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 471, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 472, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Comment._Automaton = _BuildAutomaton_99()
Comments._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'comments'), CTD_ANON_9, scope=Comments, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 482, 20)))

def _BuildAutomaton_100():
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 482, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Comments._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Comments._UseForTag(pyxb.namespace.ExpandedName(None, b'comments')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 482, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Comments._Automaton = _BuildAutomaton_100()
Companies._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'companies'), CTD_ANON_10, scope=Companies, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 498, 20)))

def _BuildAutomaton_101():
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 498, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Companies._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Companies._UseForTag(pyxb.namespace.ExpandedName(None, b'companies')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 498, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Companies._Automaton = _BuildAutomaton_101()
Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'address'), Address, scope=Company, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 514, 20)))
Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'logo'), Logo, scope=Company, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 515, 20)))
Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Company, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 516, 20)))
Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=Company, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 517, 20)))
Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Company, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 518, 20)))
Company._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'website'), pyxb.binding.datatypes.anyURI, scope=Company, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 519, 20)))

def _BuildAutomaton_102():
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 514, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 515, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 516, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 517, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 518, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 519, 20))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'address')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 514, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'logo')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 515, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 516, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 517, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 518, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Company._UseForTag(pyxb.namespace.ExpandedName(None, b'website')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 519, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Company._Automaton = _BuildAutomaton_102()
CompatibleProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=CompatibleProduct, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 529, 20)))
CompatibleProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=CompatibleProduct, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 530, 20)))
CompatibleProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=CompatibleProduct, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 531, 20)))
CompatibleProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=CompatibleProduct, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 532, 20)))

def _BuildAutomaton_103():
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 529, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 530, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 531, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 532, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 529, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 530, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 531, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProduct._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 532, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CompatibleProduct._Automaton = _BuildAutomaton_103()
CompatibleProducts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'compatibleProducts'), CTD_ANON_11, scope=CompatibleProducts, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 542, 20)))

def _BuildAutomaton_104():
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 542, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProducts._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CompatibleProducts._UseForTag(pyxb.namespace.ExpandedName(None, b'compatibleProducts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 542, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


CompatibleProducts._Automaton = _BuildAutomaton_104()
Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'currency'), Currency, scope=Cost, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 559, 20)))
Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=Cost, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 560, 20)))
Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'frequency'), Frequency, scope=Cost, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 561, 20)))
Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'price'), pyxb.binding.datatypes.float, scope=Cost, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 562, 20)))
Cost._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_3, scope=Cost, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 563, 20)))

def _BuildAutomaton_105():
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 559, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 560, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 561, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 562, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 563, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'currency')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 559, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 560, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'frequency')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 561, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'price')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 562, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Cost._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 563, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Cost._Automaton = _BuildAutomaton_105()
Costs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'costs'), CTD_ANON_12, scope=Costs, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 586, 20)))

def _BuildAutomaton_106():
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 586, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Costs._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Costs._UseForTag(pyxb.namespace.ExpandedName(None, b'costs')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 586, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Costs._Automaton = _BuildAutomaton_106()
DownloadTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'downloadUri'), pyxb.binding.datatypes.anyURI, scope=DownloadTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 619, 20)))

def _BuildAutomaton_107():
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 619, 20))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'downloadUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 619, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


DownloadTicket._Automaton = _BuildAutomaton_107()
DownloadTickets._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'downloadTickets'), CTD_ANON_13, scope=DownloadTickets, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 629, 20)))

def _BuildAutomaton_108():
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 629, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTickets._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DownloadTickets._UseForTag(pyxb.namespace.ExpandedName(None, b'downloadTickets')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 629, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


DownloadTickets._Automaton = _BuildAutomaton_108()
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'costs'), CTD_ANON_14, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 646, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'idealFor'), pyxb.binding.datatypes.string, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 653, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'includes'), CTD_ANON_15, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 654, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'minEngagement'), pyxb.binding.datatypes.long, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 661, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 662, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'sku'), pyxb.binding.datatypes.string, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 663, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'trial'), pyxb.binding.datatypes.long, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 664, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_4, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 665, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'units'), CTD_ANON_16, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 675, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 682, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchased'), pyxb.binding.datatypes.boolean, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 683, 20)))
Edition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchasedUri'), pyxb.binding.datatypes.anyURI, scope=Edition, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 684, 20)))

def _BuildAutomaton_109():
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 646, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 653, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 654, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 661, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 662, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 663, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 664, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 665, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 675, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 682, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 683, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 684, 20))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'costs')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 646, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'idealFor')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 653, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'includes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 654, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'minEngagement')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 661, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 662, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'sku')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 663, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'trial')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 664, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 665, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'units')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 675, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 682, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'purchased')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 683, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Edition._UseForTag(pyxb.namespace.ExpandedName(None, b'purchasedUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 684, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Edition._Automaton = _BuildAutomaton_109()
Editions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'editions'), CTD_ANON_17, scope=Editions, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 694, 20)))

def _BuildAutomaton_110():
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 694, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Editions._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Editions._UseForTag(pyxb.namespace.ExpandedName(None, b'editions')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 694, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Editions._Automaton = _BuildAutomaton_110()
Entitlements._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'entitlements'), CTD_ANON_18, scope=Entitlements, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 717, 20)))

def _BuildAutomaton_111():
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 717, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Entitlements._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Entitlements._UseForTag(pyxb.namespace.ExpandedName(None, b'entitlements')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 717, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Entitlements._Automaton = _BuildAutomaton_111()
Export._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Export, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 733, 20)))
Export._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'applianceTemplate'), ApplianceTemplate, scope=Export, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 734, 20)))
Export._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'accountUri'), pyxb.binding.datatypes.anyURI, scope=Export, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 735, 20)))
Export._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'status'), OpStatus, scope=Export, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 736, 20)))

def _BuildAutomaton_112():
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 733, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 734, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 735, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 736, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 733, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, b'applianceTemplate')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 734, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, b'accountUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 735, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Export._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 736, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Export._Automaton = _BuildAutomaton_112()
Exports_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'exports'), CTD_ANON_19, scope=Exports_, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 746, 20)))

def _BuildAutomaton_113():
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 746, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Exports_._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Exports_._UseForTag(pyxb.namespace.ExpandedName(None, b'exports')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 746, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Exports_._Automaton = _BuildAutomaton_113()
Images._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'images'), CTD_ANON_20, scope=Images, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 785, 20)))

def _BuildAutomaton_114():
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 785, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Images._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Images._UseForTag(pyxb.namespace.ExpandedName(None, b'images')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 785, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Images._Automaton = _BuildAutomaton_114()
Include._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=Include, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 801, 20)))
Include._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'tooltip'), pyxb.binding.datatypes.string, scope=Include, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 802, 20)))

def _BuildAutomaton_115():
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 801, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 802, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 801, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Include._UseForTag(pyxb.namespace.ExpandedName(None, b'tooltip')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 802, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Include._Automaton = _BuildAutomaton_115()
Includes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'includes'), CTD_ANON_21, scope=Includes, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 812, 20)))

def _BuildAutomaton_116():
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 812, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Includes._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Includes._UseForTag(pyxb.namespace.ExpandedName(None, b'includes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 812, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Includes._Automaton = _BuildAutomaton_116()
InstallSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'adminPassword'), pyxb.binding.datatypes.string, scope=InstallSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 828, 20)))
InstallSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'timezone'), pyxb.binding.datatypes.string, scope=InstallSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 829, 20)))

def _BuildAutomaton_117():
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 828, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 829, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'adminPassword')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 828, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(InstallSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'timezone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 829, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


InstallSettings._Automaton = _BuildAutomaton_117()
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'categories'), CTD_ANON_23, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 914, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'category'), Category, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 921, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'clonesUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 922, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'details'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 923, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'logo'), Logo, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 924, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 925, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbReferences'), pyxb.binding.datatypes.long, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 926, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'overview'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 927, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 928, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 929, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'resources'), CTD_ANON_24, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 930, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'screenshots'), CTD_ANON_25, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 937, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'screenShotsUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 944, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'tagLine'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 945, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'tags'), pyxb.binding.datatypes.string, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 946, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 947, 20)))
MarketingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorUri'), pyxb.binding.datatypes.anyURI, scope=MarketingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 948, 20)))

def _BuildAutomaton_118():
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 914, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 921, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 922, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 923, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 924, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 925, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 926, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 927, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 928, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 929, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 930, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 937, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 944, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 945, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 946, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 947, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 948, 20))
    counters.add(cc_20)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'categories')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 914, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'category')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 921, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'clonesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 922, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'details')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 923, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'logo')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 924, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 925, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'nbReferences')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 926, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'overview')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 927, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 928, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 929, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'resources')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 930, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'screenshots')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 937, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'screenShotsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 944, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'tagLine')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 945, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'tags')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 946, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 947, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 948, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


MarketingPlan._Automaton = _BuildAutomaton_118()
MarketingPlans._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketingPlans'), CTD_ANON_26, scope=MarketingPlans, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 958, 20)))

def _BuildAutomaton_119():
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 958, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlans._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MarketingPlans._UseForTag(pyxb.namespace.ExpandedName(None, b'marketingPlans')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 958, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


MarketingPlans._Automaton = _BuildAutomaton_119()
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'approvalsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 975, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badgesUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 976, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'compatibleProductsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 977, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'managersUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 978, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 979, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 980, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productTypesUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 981, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 982, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 983, 20)))
Marketplace._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'commentsUri'), pyxb.binding.datatypes.anyURI, scope=Marketplace, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 984, 20)))

def _BuildAutomaton_120():
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 975, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 976, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 977, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 978, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 979, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 980, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 981, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 982, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 983, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 984, 20))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'approvalsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 975, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'badgesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 976, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'compatibleProductsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 977, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'managersUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 978, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 979, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'productsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 980, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'productTypesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 981, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 982, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 983, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Marketplace._UseForTag(pyxb.namespace.ExpandedName(None, b'commentsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 984, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Marketplace._Automaton = _BuildAutomaton_120()
Marketplaces._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketplaces'), CTD_ANON_27, scope=Marketplaces, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 994, 20)))

def _BuildAutomaton_121():
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 994, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Marketplaces._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Marketplaces._UseForTag(pyxb.namespace.ExpandedName(None, b'marketplaces')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 994, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Marketplaces._Automaton = _BuildAutomaton_121()
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'bytesLoaded'), pyxb.binding.datatypes.long, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1010, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'bytesTotal'), pyxb.binding.datatypes.long, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1011, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'cancelled'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1012, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'complete'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1013, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'detailedError'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1014, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'detailedErrorMsg'), pyxb.binding.datatypes.string, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1015, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'error'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1016, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'errorMessage'), pyxb.binding.datatypes.string, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1017, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'eta'), pyxb.binding.datatypes.dateTime, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1018, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'message'), pyxb.binding.datatypes.string, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1019, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1020, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'percentage'), pyxb.binding.datatypes.int, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1021, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'published'), pyxb.binding.datatypes.boolean, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1022, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'totalTime'), pyxb.binding.datatypes.dateTime, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1023, 20)))
OpStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=OpStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1024, 20)))

def _BuildAutomaton_122():
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1010, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1011, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1012, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1013, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1014, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1015, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1016, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1017, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1018, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1019, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1020, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1021, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1022, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1023, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1024, 20))
    counters.add(cc_18)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'bytesLoaded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1010, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'bytesTotal')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1011, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'cancelled')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1012, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'complete')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1013, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'detailedError')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1014, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'detailedErrorMsg')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1015, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'error')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1016, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'errorMessage')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1017, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'eta')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1018, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'message')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1019, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1020, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'percentage')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1021, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'published')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1022, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'totalTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1023, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(OpStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1024, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


OpStatus._Automaton = _BuildAutomaton_122()
OpStatuses._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'statuses'), CTD_ANON_28, scope=OpStatuses, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1034, 20)))

def _BuildAutomaton_123():
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1034, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OpStatuses._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OpStatuses._UseForTag(pyxb.namespace.ExpandedName(None, b'statuses')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1034, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


OpStatuses._Automaton = _BuildAutomaton_123()
Order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'edition'), Edition, scope=Order, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1050, 20)))
Order._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Order, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1051, 20)))

def _BuildAutomaton_124():
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1050, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1051, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, b'edition')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1050, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Order._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1051, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Order._Automaton = _BuildAutomaton_124()
Orders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'orders'), CTD_ANON_29, scope=Orders, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1061, 20)))

def _BuildAutomaton_125():
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1061, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Orders._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Orders._UseForTag(pyxb.namespace.ExpandedName(None, b'orders')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1061, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Orders._Automaton = _BuildAutomaton_125()
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'activateNewUsers'), pyxb.binding.datatypes.boolean, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1077, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'admin'), pyxb.binding.datatypes.boolean, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1078, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'categoriesUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1079, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'companiesUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1080, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'company'), Company, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1081, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'defaultOrg'), pyxb.binding.datatypes.boolean, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1082, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'membersUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1083, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1084, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'rolesUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1085, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'subscriptionProfiles'), CTD_ANON_30, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1086, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'subscriptionProfilesUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1094, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1095, 20)))
Org._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorsUri'), pyxb.binding.datatypes.anyURI, scope=Org, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1096, 20)))

def _BuildAutomaton_126():
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1077, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1078, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1079, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1080, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1081, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1082, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1083, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1084, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1085, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1086, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1094, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1095, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1096, 20))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'activateNewUsers')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1077, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'admin')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1078, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'categoriesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1079, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'companiesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1080, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'company')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1081, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'defaultOrg')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1082, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'membersUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1083, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1084, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'rolesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1085, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'subscriptionProfiles')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1086, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'subscriptionProfilesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1094, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1095, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Org._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1096, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Org._Automaton = _BuildAutomaton_126()
Orgs._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'orgs'), CTD_ANON_31, scope=Orgs, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1106, 20)))

def _BuildAutomaton_127():
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1106, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Orgs._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Orgs._UseForTag(pyxb.namespace.ExpandedName(None, b'orgs')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1106, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Orgs._Automaton = _BuildAutomaton_127()
OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=OSSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1122, 20)))
OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'applianceUri'), pyxb.binding.datatypes.anyURI, scope=OSSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1123, 20)))
OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'arch'), pyxb.binding.datatypes.string, scope=OSSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1125, 20)))
OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=OSSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1126, 20)))
OSSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=OSSettings, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1127, 20)))

def _BuildAutomaton_128():
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1122, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1123, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1125, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1126, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1127, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1122, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'applianceUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1123, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'arch')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1125, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1126, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(OSSettings._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1127, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


OSSettings._Automaton = _BuildAutomaton_128()
Period._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'interval'), Interval, scope=Period, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1137, 20)))
Period._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nb'), pyxb.binding.datatypes.integer, scope=Period, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1138, 20)))

def _BuildAutomaton_129():
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1137, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1138, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, b'interval')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1137, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, b'nb')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1138, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Period._Automaton = _BuildAutomaton_129()
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'clonesUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1148, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'editions'), CTD_ANON_32, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1149, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'editionsUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1156, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1157, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbReferences'), pyxb.binding.datatypes.long, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1158, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'notes'), pyxb.binding.datatypes.string, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1159, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1160, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1161, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'resources'), CTD_ANON_33, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1162, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1169, 20)))
PricingPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorUri'), pyxb.binding.datatypes.anyURI, scope=PricingPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1170, 20)))

def _BuildAutomaton_130():
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1148, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1149, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1156, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1157, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1158, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1159, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1160, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1161, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1162, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1169, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1170, 20))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'clonesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1148, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'editions')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1149, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'editionsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1156, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1157, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'nbReferences')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1158, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'notes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1159, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1160, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1161, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'resources')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1162, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1169, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1170, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


PricingPlan._Automaton = _BuildAutomaton_130()
PricingPlans._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'pricingPlans'), CTD_ANON_34, scope=PricingPlans, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1180, 20)))

def _BuildAutomaton_131():
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1180, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlans._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PricingPlans._UseForTag(pyxb.namespace.ExpandedName(None, b'pricingPlans')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1180, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


PricingPlans._Automaton = _BuildAutomaton_131()
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'active'), pyxb.binding.datatypes.boolean, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1196, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'allowComments'), pyxb.binding.datatypes.boolean, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1197, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'comments'), CTD_ANON_35, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1198, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'commentsUri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1205, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'items'), CTD_ANON_36, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1206, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'itemsUri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1213, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1214, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbItems'), pyxb.binding.datatypes.int, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1215, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbPendingApprovals'), pyxb.binding.datatypes.long, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1216, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbPrivateItems'), pyxb.binding.datatypes.long, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1217, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbPublicItems'), pyxb.binding.datatypes.long, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1218, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbPurchases'), pyxb.binding.datatypes.long, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1219, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'notificationsUri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1220, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1221, 20)))
Product._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Product, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1222, 20)))

def _BuildAutomaton_132():
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1196, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1197, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1198, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1205, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1206, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1213, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1214, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1215, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1216, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1217, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1218, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1219, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1220, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1221, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1222, 20))
    counters.add(cc_18)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'active')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1196, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'allowComments')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1197, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'comments')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1198, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'commentsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1205, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'items')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1206, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'itemsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1213, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1214, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'nbItems')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1215, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'nbPendingApprovals')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1216, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'nbPrivateItems')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1217, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'nbPublicItems')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1218, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'nbPurchases')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1219, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'notificationsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1220, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1221, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(Product._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1222, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Product._Automaton = _BuildAutomaton_132()
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'active'), pyxb.binding.datatypes.boolean, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1232, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'approvalUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1233, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'artifacts'), CTD_ANON_37, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1234, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'artifactsUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1241, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badges'), CTD_ANON_38, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1242, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'commentsUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1249, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'compatibilityList'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1250, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'compatibleProducts'), CTD_ANON_39, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1251, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'featured'), pyxb.binding.datatypes.boolean, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1259, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'installationInstructions'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1260, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketingPlan'), MarketingPlan, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1261, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1262, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbPurchases'), pyxb.binding.datatypes.long, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1263, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbVotes'), pyxb.binding.datatypes.long, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1264, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1265, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'partNumber'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1266, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'pricingPlan'), PricingPlan, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1267, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1268, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'rating'), pyxb.binding.datatypes.float, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1269, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'releaseDate'), pyxb.binding.datatypes.dateTime, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1270, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'releaseNotes'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1271, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'staffPick'), pyxb.binding.datatypes.boolean, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1272, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'status'), STD_ANON_8, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1273, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportPlan'), SupportPlan, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1284, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), ProductType, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1285, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1286, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorName'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1287, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorUri'), pyxb.binding.datatypes.anyURI, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1288, 20)))
ProductItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=ProductItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1289, 20)))

def _BuildAutomaton_133():
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1232, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1233, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1234, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1241, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1242, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1249, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1250, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1251, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1259, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1260, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1261, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1262, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1263, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1264, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1265, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1266, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1267, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1268, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1269, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1270, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1271, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1272, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1273, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1284, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1285, 20))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1286, 20))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1287, 20))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1288, 20))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1289, 20))
    counters.add(cc_32)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'active')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1232, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'approvalUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1233, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'artifacts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1234, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'artifactsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1241, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'badges')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1242, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'commentsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1249, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'compatibilityList')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1250, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'compatibleProducts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1251, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'featured')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1259, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'installationInstructions')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1260, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'marketingPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1261, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1262, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'nbPurchases')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1263, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'nbVotes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1264, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1265, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'partNumber')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1266, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'pricingPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1267, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'purchasesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1268, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'rating')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1269, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'releaseDate')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1270, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'releaseNotes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1271, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'staffPick')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1272, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1273, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'supportPlan')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1284, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1285, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1286, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1287, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1288, 20))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(ProductItem._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1289, 20))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_26, True)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_26, False)]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_27, True)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_27, False)]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_28, True)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_28, False)]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_29, True)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_29, False)]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_30, True)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_30, False)]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_31, True)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_31, False)]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_32, True)]))
    st_32._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductItem._Automaton = _BuildAutomaton_133()
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'artifactsUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1299, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badges'), CTD_ANON_40, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1300, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'category'), Category, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1307, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'commentsUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1308, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'compatibleProducts'), CTD_ANON_41, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1309, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'details'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1317, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'disclaimer'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1318, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'editions'), CTD_ANON_42, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1319, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'favorite'), pyxb.binding.datatypes.boolean, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1326, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'favoritesUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1327, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'featured'), pyxb.binding.datatypes.boolean, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1328, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'installationInstructions'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1329, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'logo'), Logo, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1330, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketingResources'), CTD_ANON_43, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1331, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1339, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbPurchases'), pyxb.binding.datatypes.long, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1340, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbVotes'), pyxb.binding.datatypes.long, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1341, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'otherReleases'), CTD_ANON_44, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1342, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'overview'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1350, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'partNumber'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1351, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'pricingResources'), CTD_ANON_45, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1352, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1360, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchased'), pyxb.binding.datatypes.boolean, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1361, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1362, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'rating'), pyxb.binding.datatypes.float, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1363, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'releaseDate'), pyxb.binding.datatypes.dateTime, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1364, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'releaseNotes'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1365, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'screenshots'), CTD_ANON_46, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1366, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'staffPick'), pyxb.binding.datatypes.boolean, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1373, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportDetails'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1374, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportEmail'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1375, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportEula'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1376, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportPhone'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1377, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportResources'), CTD_ANON_47, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1378, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportUrl'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1386, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'tagLine'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1387, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'tags'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1388, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), ProductType, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1389, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1390, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorName'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1391, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorUri'), pyxb.binding.datatypes.anyURI, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1392, 20)))
ProductItemDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=ProductItemDetails, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1393, 20)))

def _BuildAutomaton_134():
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1299, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1300, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1307, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1308, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1309, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1317, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1318, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1319, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1326, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1327, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1328, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1329, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1330, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1331, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1339, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1340, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1341, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1342, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1350, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1351, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1352, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1360, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1361, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1362, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1363, 20))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1364, 20))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1365, 20))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1366, 20))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1373, 20))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1374, 20))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1375, 20))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1376, 20))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1377, 20))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1378, 20))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1386, 20))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1387, 20))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1388, 20))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1389, 20))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1390, 20))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1391, 20))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1392, 20))
    counters.add(cc_44)
    cc_45 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1393, 20))
    counters.add(cc_45)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'artifactsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1299, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'badges')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1300, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'category')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1307, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'commentsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1308, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'compatibleProducts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1309, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'details')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1317, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'disclaimer')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1318, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'editions')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1319, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'favorite')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1326, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'favoritesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1327, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'featured')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1328, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'installationInstructions')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1329, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'logo')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1330, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'marketingResources')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1331, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1339, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'nbPurchases')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1340, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'nbVotes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1341, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'otherReleases')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1342, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'overview')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1350, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'partNumber')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1351, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'pricingResources')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1352, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'productUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1360, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'purchased')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1361, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'purchasesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1362, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'rating')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1363, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'releaseDate')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1364, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'releaseNotes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1365, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'screenshots')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1366, 20))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'staffPick')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1373, 20))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'supportDetails')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1374, 20))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'supportEmail')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1375, 20))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'supportEula')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1376, 20))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_36, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'supportPhone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1377, 20))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_37, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'supportResources')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1378, 20))
    st_37 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_38, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'supportUrl')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1386, 20))
    st_38 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_39, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'tagLine')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1387, 20))
    st_39 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_40, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'tags')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1388, 20))
    st_40 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_40)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_41, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1389, 20))
    st_41 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_41)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_42, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1390, 20))
    st_42 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_42)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_43, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1391, 20))
    st_43 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_43)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_44, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1392, 20))
    st_44 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_44)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_45, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetails._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1393, 20))
    st_45 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_45)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_26, True)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_26, False)]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_27, True)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_27, False)]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_28, True)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_28, False)]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_29, True)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_29, False)]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_30, True)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_30, False)]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_31, True)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_31, False)]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_32, True)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_32, False)]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_33, True)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_33, False)]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_34, True)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_34, False)]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_35, True)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_35, False)]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_36, True)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_36, False)]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_37, True)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_37, False)]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_38, True)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_38, False)]))
    st_38._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_39, True)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_39, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_39, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_39, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_39, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_39, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_39, False)]))
    st_39._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_40, True)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_40, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_40, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_40, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_40, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_40, False)]))
    st_40._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_41, True)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_41, False)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_41, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_41, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_41, False)]))
    st_41._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_42, True)]))
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_42, False)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_42, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_42, False)]))
    st_42._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_43, [
     fac.UpdateInstruction(cc_43, True)]))
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_43, False)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_43, False)]))
    st_43._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_44, [
     fac.UpdateInstruction(cc_44, True)]))
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_44, False)]))
    st_44._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_45, [
     fac.UpdateInstruction(cc_45, True)]))
    st_45._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductItemDetails._Automaton = _BuildAutomaton_134()
ProductItemDetailsList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemDetailsList'), CTD_ANON_48, scope=ProductItemDetailsList, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1403, 20)))

def _BuildAutomaton_135():
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1403, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetailsList._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemDetailsList._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemDetailsList')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1403, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductItemDetailsList._Automaton = _BuildAutomaton_135()
ProductItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItems'), CTD_ANON_49, scope=ProductItems, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1420, 20)))

def _BuildAutomaton_136():
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1420, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItems._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItems._UseForTag(pyxb.namespace.ExpandedName(None, b'productItems')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1420, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductItems._Automaton = _BuildAutomaton_136()
ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productId'), pyxb.binding.datatypes.long, scope=ProductItemSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1436, 20)))
ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'releaseDate'), pyxb.binding.datatypes.dateTime, scope=ProductItemSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1437, 20)))
ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), ProductType, scope=ProductItemSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1438, 20)))
ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=ProductItemSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1439, 20)))
ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=ProductItemSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1440, 20)))
ProductItemSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=ProductItemSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1441, 20)))

def _BuildAutomaton_137():
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1436, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1437, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1438, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1439, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1440, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1441, 20))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'productId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1436, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'releaseDate')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1437, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1438, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1439, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1440, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1441, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductItemSummary._Automaton = _BuildAutomaton_137()
ProductItemSummaryList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemSummaryList'), CTD_ANON_50, scope=ProductItemSummaryList, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1451, 20)))

def _BuildAutomaton_138():
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1451, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummaryList._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductItemSummaryList._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemSummaryList')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1451, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductItemSummaryList._Automaton = _BuildAutomaton_138()
ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=ProductResource, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1468, 20)))
ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'label'), pyxb.binding.datatypes.string, scope=ProductResource, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1469, 20)))
ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=ProductResource, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1470, 20)))
ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_9, scope=ProductResource, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1471, 20)))
ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=ProductResource, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1478, 20)))
ProductResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'url'), pyxb.binding.datatypes.string, scope=ProductResource, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1479, 20)))

def _BuildAutomaton_139():
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1468, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1469, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1470, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1471, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1478, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1479, 20))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1468, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'label')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1469, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1470, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1471, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1478, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductResource._UseForTag(pyxb.namespace.ExpandedName(None, b'url')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1479, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductResource._Automaton = _BuildAutomaton_139()
Products._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'products'), CTD_ANON_51, scope=Products, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1489, 20)))

def _BuildAutomaton_140():
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1489, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Products._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Products._UseForTag(pyxb.namespace.ExpandedName(None, b'products')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1489, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Products._Automaton = _BuildAutomaton_140()
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badges'), CTD_ANON_52, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1505, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'category'), Category, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1512, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'commentsUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1513, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'details'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1514, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'favoritesUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1515, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'itemsUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1516, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'latestItemUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1517, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'logo'), Logo, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1518, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1519, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbPurchases'), pyxb.binding.datatypes.long, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1520, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbVotes'), pyxb.binding.datatypes.long, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1521, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'popularity'), pyxb.binding.datatypes.double, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1522, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productId'), pyxb.binding.datatypes.long, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1523, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1524, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1525, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'rating'), pyxb.binding.datatypes.float, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1526, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'releaseDate'), pyxb.binding.datatypes.dateTime, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1527, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'startingCost'), Cost, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1528, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'tagLine'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1529, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'tags'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1530, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorName'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1531, 20)))
ProductSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=ProductSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1532, 20)))

def _BuildAutomaton_141():
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1505, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1512, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1513, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1514, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1515, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1516, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1517, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1518, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1519, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1520, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1521, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1522, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1523, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1524, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1525, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1526, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1527, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1528, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1529, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1530, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1531, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1532, 20))
    counters.add(cc_25)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'badges')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1505, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'category')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1512, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'commentsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1513, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'details')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1514, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'favoritesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1515, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'itemsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1516, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'latestItemUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1517, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'logo')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1518, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1519, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'nbPurchases')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1520, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'nbVotes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1521, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'popularity')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1522, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'productId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1523, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'productUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1524, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'purchasesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1525, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'rating')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1526, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'releaseDate')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1527, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'startingCost')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1528, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'tagLine')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1529, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'tags')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1530, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1531, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1532, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_25, True)]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductSummary._Automaton = _BuildAutomaton_141()
ProductSummaryList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productSummaryList'), CTD_ANON_53, scope=ProductSummaryList, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1542, 20)))

def _BuildAutomaton_142():
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1542, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummaryList._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductSummaryList._UseForTag(pyxb.namespace.ExpandedName(None, b'productSummaryList')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1542, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductSummaryList._Automaton = _BuildAutomaton_142()
ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'primitive'), STD_ANON_10, scope=ProductType, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1559, 20)))
ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=ProductType, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1569, 20)))
ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), pyxb.binding.datatypes.string, scope=ProductType, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1570, 20)))
ProductType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=ProductType, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1571, 20)))

def _BuildAutomaton_143():
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1559, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1569, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1570, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1571, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, b'primitive')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1559, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1569, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1570, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ProductType._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1571, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductType._Automaton = _BuildAutomaton_143()
ProductTypes._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productTypes'), CTD_ANON_54, scope=ProductTypes, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1581, 20)))

def _BuildAutomaton_144():
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1581, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProductTypes._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProductTypes._UseForTag(pyxb.namespace.ExpandedName(None, b'productTypes')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1581, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ProductTypes._Automaton = _BuildAutomaton_144()
Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'item'), ProductItemDetails, scope=Purchase, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1597, 20)))
Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'order'), Order, scope=Purchase, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1598, 20)))
Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Purchase, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1599, 20)))
Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'billingStatus'), pyxb.binding.datatypes.string, scope=Purchase, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1600, 20)))
Purchase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'billingURL'), pyxb.binding.datatypes.string, scope=Purchase, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1601, 20)))

def _BuildAutomaton_145():
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1597, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1598, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1599, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1600, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1601, 20))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'item')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1597, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'order')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1598, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1599, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'billingStatus')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1600, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Purchase._UseForTag(pyxb.namespace.ExpandedName(None, b'billingURL')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1601, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Purchase._Automaton = _BuildAutomaton_145()
Purchases._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchases'), CTD_ANON_55, scope=Purchases, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1611, 20)))

def _BuildAutomaton_146():
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1611, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Purchases._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Purchases._UseForTag(pyxb.namespace.ExpandedName(None, b'purchases')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1611, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Purchases._Automaton = _BuildAutomaton_146()
Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'frequency'), STD_ANON_11, scope=Quota, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1627, 20)))
Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'limit'), pyxb.binding.datatypes.long, scope=Quota, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1635, 20)))
Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nb'), pyxb.binding.datatypes.long, scope=Quota, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1636, 20)))
Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'renewalDate'), pyxb.binding.datatypes.dateTime, scope=Quota, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1637, 20)))
Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_12, scope=Quota, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1638, 20)))
Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'typeId'), pyxb.binding.datatypes.int, scope=Quota, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1648, 20)))
Quota._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Quota, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1649, 20)))

def _BuildAutomaton_147():
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1627, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1635, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1636, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1637, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1638, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1648, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1649, 20))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'frequency')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1627, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'limit')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1635, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'nb')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1636, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'renewalDate')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1637, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1638, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'typeId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1648, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Quota._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1649, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Quota._Automaton = _BuildAutomaton_147()
Quotas._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'quotas'), CTD_ANON_56, scope=Quotas, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1659, 20)))

def _BuildAutomaton_148():
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1659, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Quotas._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Quotas._UseForTag(pyxb.namespace.ExpandedName(None, b'quotas')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1659, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Quotas._Automaton = _BuildAutomaton_148()
Role._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=Role, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1675, 20)))
Role._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'entitlements'), CTD_ANON_57, scope=Role, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1676, 20)))
Role._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Role, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1683, 20)))

def _BuildAutomaton_149():
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1675, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1676, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1683, 20))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1675, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, b'entitlements')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1676, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Role._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1683, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Role._Automaton = _BuildAutomaton_149()
Roles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'roles'), CTD_ANON_58, scope=Roles, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1693, 20)))

def _BuildAutomaton_150():
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1693, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Roles._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Roles._UseForTag(pyxb.namespace.ExpandedName(None, b'roles')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1693, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Roles._Automaton = _BuildAutomaton_150()
ServiceStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'alive'), pyxb.binding.datatypes.boolean, scope=ServiceStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1719, 20)))
ServiceStatus._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'serviceLoad'), pyxb.binding.datatypes.int, scope=ServiceStatus, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1720, 20)))

def _BuildAutomaton_151():
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1719, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1720, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'alive')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1719, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ServiceStatus._UseForTag(pyxb.namespace.ExpandedName(None, b'serviceLoad')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1720, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ServiceStatus._Automaton = _BuildAutomaton_151()
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'actionId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1730, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'actionName'), STD_ANON_13, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1731, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'currency'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1749, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'date'), pyxb.binding.datatypes.dateTime, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1750, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1751, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'diskSize'), pyxb.binding.datatypes.float, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1752, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'distributionId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1753, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'distributionName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1754, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'formatId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1755, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'formatName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1756, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'fromObjectId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1757, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'fromObjectName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1758, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'fromObjectType'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1759, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'objectId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1760, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'objectName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1761, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'objectStatus'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1762, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'objectType'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1763, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'orgId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1764, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'price'), pyxb.binding.datatypes.float, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1765, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1766, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'userId'), pyxb.binding.datatypes.long, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1767, 20)))
StatTicket._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'userLoginName'), pyxb.binding.datatypes.string, scope=StatTicket, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1768, 20)))

def _BuildAutomaton_152():
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1730, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1731, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1749, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1750, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1751, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1752, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1753, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1754, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1755, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1756, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1757, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1758, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1759, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1760, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1761, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1762, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1763, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1764, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1765, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1766, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1767, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1768, 20))
    counters.add(cc_25)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'actionId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1730, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'actionName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1731, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'currency')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1749, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'date')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1750, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1751, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'diskSize')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1752, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'distributionId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1753, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'distributionName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1754, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'formatId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1755, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'formatName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1756, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'fromObjectId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1757, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'fromObjectName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1758, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'fromObjectType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1759, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'objectId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1760, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'objectName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1761, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'objectStatus')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1762, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'objectType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1763, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'orgId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1764, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'price')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1765, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1766, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'userId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1767, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(StatTicket._UseForTag(pyxb.namespace.ExpandedName(None, b'userLoginName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1768, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_25, True)]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


StatTicket._Automaton = _BuildAutomaton_152()
StatTickets._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'statTickets'), CTD_ANON_59, scope=StatTickets, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1778, 20)))

def _BuildAutomaton_153():
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1778, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatTickets._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StatTickets._UseForTag(pyxb.namespace.ExpandedName(None, b'statTickets')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1778, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


StatTickets._Automaton = _BuildAutomaton_153()
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'active'), pyxb.binding.datatypes.boolean, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1794, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'admins'), CTD_ANON_60, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1795, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'adminsUri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1802, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'code'), pyxb.binding.datatypes.string, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1803, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1804, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1805, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'orgUri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1806, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'quotas'), CTD_ANON_61, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1807, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'quotasUri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1814, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'roles'), CTD_ANON_62, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1815, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'rolesUri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1822, 20)))
SubscriptionProfile._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=SubscriptionProfile, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1823, 20)))

def _BuildAutomaton_154():
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1794, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1795, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1802, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1803, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1804, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1805, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1806, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1807, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1814, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1815, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1822, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1823, 20))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'active')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1794, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'admins')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1795, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'adminsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1802, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'code')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1803, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1804, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1805, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'orgUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1806, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'quotas')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1807, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'quotasUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1814, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'roles')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1815, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'rolesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1822, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfile._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1823, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


SubscriptionProfile._Automaton = _BuildAutomaton_154()
SubscriptionProfiles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'subscriptionProfiles'), CTD_ANON_63, scope=SubscriptionProfiles, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1833, 20)))

def _BuildAutomaton_155():
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1833, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfiles._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SubscriptionProfiles._UseForTag(pyxb.namespace.ExpandedName(None, b'subscriptionProfiles')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1833, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


SubscriptionProfiles._Automaton = _BuildAutomaton_155()
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'email'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1850, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'eula'), pyxb.binding.datatypes.anyURI, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1851, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1852, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbReferences'), pyxb.binding.datatypes.long, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1853, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'phone'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1854, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productItemsUri'), pyxb.binding.datatypes.anyURI, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1855, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'resources'), CTD_ANON_64, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1856, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportDetails'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1863, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportUrl'), pyxb.binding.datatypes.string, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1864, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1865, 20)))
SupportPlan._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorUri'), pyxb.binding.datatypes.anyURI, scope=SupportPlan, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1866, 20)))

def _BuildAutomaton_156():
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1850, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1851, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1852, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1853, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1854, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1855, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1856, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1863, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1864, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1865, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1866, 20))
    counters.add(cc_14)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'email')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1850, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'eula')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1851, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1852, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'nbReferences')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1853, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'phone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1854, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'productItemsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1855, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'resources')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1856, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'supportDetails')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1863, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'supportUrl')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1864, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1865, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlan._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1866, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


SupportPlan._Automaton = _BuildAutomaton_156()
SupportPlans._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportPlans'), CTD_ANON_65, scope=SupportPlans, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1876, 20)))

def _BuildAutomaton_157():
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1876, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlans._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SupportPlans._UseForTag(pyxb.namespace.ExpandedName(None, b'supportPlans')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1876, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


SupportPlans._Automaton = _BuildAutomaton_157()
UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1892, 20)))
UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'login'), pyxb.binding.datatypes.string, scope=UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1893, 20)))
UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1894, 20)))
UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'password'), pyxb.binding.datatypes.string, scope=UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1895, 20)))
UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'serverUrl'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1896, 20)))
UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'appliancesUri'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1897, 20)))
UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'machineImagesUri'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1898, 20)))
UforgeCredAccount._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=UforgeCredAccount, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 20)))

def _BuildAutomaton_158():
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1892, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1893, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1894, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1895, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1896, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1897, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1898, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 20))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1892, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'login')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1893, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1894, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'password')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1895, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'serverUrl')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1896, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'appliancesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1897, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'machineImagesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1898, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccount._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1899, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


UforgeCredAccount._Automaton = _BuildAutomaton_158()
UforgeCredAccounts._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uforgeCredAccounts'), CTD_ANON_66, scope=UforgeCredAccounts, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1909, 20)))

def _BuildAutomaton_159():
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1909, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccounts._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UforgeCredAccounts._UseForTag(pyxb.namespace.ExpandedName(None, b'uforgeCredAccounts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1909, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


UforgeCredAccounts._Automaton = _BuildAutomaton_159()
UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'md5sum'), pyxb.binding.datatypes.string, scope=UForgeUploadObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20)))
UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'mimeType'), pyxb.binding.datatypes.string, scope=UForgeUploadObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20)))
UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'sha256sum'), pyxb.binding.datatypes.string, scope=UForgeUploadObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20)))
UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'size'), pyxb.binding.datatypes.long, scope=UForgeUploadObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20)))
UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'status'), OpStatus, scope=UForgeUploadObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20)))
UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uploaded'), pyxb.binding.datatypes.boolean, scope=UForgeUploadObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20)))
UForgeUploadObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uploadedTime'), pyxb.binding.datatypes.dateTime, scope=UForgeUploadObject, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20)))

def _BuildAutomaton_160():
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'md5sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'mimeType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'sha256sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'size')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'uploaded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(UForgeUploadObject._UseForTag(pyxb.namespace.ExpandedName(None, b'uploadedTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


UForgeUploadObject._Automaton = _BuildAutomaton_160()
Unit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nb'), pyxb.binding.datatypes.long, scope=Unit, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1967, 20)))
Unit._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_14, scope=Unit, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1968, 20)))

def _BuildAutomaton_161():
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1967, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1968, 20))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, b'nb')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1967, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Unit._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1968, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Unit._Automaton = _BuildAutomaton_161()
Units._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'units'), CTD_ANON_67, scope=Units, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2003, 20)))

def _BuildAutomaton_162():
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2003, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Units._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Units._UseForTag(pyxb.namespace.ExpandedName(None, b'units')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2003, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Units._Automaton = _BuildAutomaton_162()
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'active'), pyxb.binding.datatypes.boolean, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2025, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'address'), Address, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2026, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'admin'), pyxb.binding.datatypes.boolean, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2027, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'adminOrgsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2028, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'adminOrgUris'), UriList, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2029, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'apiKeysQuota'), pyxb.binding.datatypes.int, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2030, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'baseApiKeysUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2031, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'baseOrgsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2032, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'baseRolesUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2033, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'company'), Company, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2034, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'creationCode'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2035, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'dob'), pyxb.binding.datatypes.dateTime, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2036, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'email'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2037, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'exportsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2038, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'firstName'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2039, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'gender'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2040, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'homePhone'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2041, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'jobTitle'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2042, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'joined'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2043, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'lang'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2044, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'loginName'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2045, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'mobilePhone'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2046, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2047, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'officePhone'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2048, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'orgUris'), UriList, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2049, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'password'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2050, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'photo'), Logo, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2051, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'promoCode'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2052, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2053, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'quotasUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2054, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'roles'), CTD_ANON_68, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2055, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'surname'), pyxb.binding.datatypes.string, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2062, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uforgeCredAccounts'), CTD_ANON_69, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2063, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'exports'), CTD_ANON_70, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2070, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uforgeCredAccountsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2077, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2078, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'usageUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2079, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorsUri'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2080, 20)))
User._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'website'), pyxb.binding.datatypes.anyURI, scope=User, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2081, 20)))

def _BuildAutomaton_163():
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2025, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2026, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2027, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2028, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2029, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2030, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2031, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2032, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2033, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2034, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2035, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2036, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2037, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2038, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2039, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2040, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2041, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2042, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2043, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2044, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2045, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2046, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2047, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2048, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2049, 20))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2050, 20))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2051, 20))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2052, 20))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2053, 20))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2054, 20))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2055, 20))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2062, 20))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2063, 20))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2070, 20))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2077, 20))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2078, 20))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2079, 20))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2080, 20))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2081, 20))
    counters.add(cc_42)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'active')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2025, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'address')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2026, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'admin')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2027, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'adminOrgsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2028, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'adminOrgUris')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2029, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'apiKeysQuota')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2030, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'baseApiKeysUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2031, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'baseOrgsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2032, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'baseRolesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2033, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'company')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2034, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'creationCode')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2035, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'dob')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2036, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'email')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2037, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'exportsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2038, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'firstName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2039, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'gender')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2040, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'homePhone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2041, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'jobTitle')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2042, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'joined')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2043, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'lang')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2044, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'loginName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2045, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'mobilePhone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2046, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2047, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'officePhone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2048, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'orgUris')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2049, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'password')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2050, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'photo')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2051, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'promoCode')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2052, 20))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'purchasesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2053, 20))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'quotasUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2054, 20))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'roles')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2055, 20))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'surname')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2062, 20))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_36, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'uforgeCredAccounts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2063, 20))
    st_36 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_37, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'exports')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2070, 20))
    st_37 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_37)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_38, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'uforgeCredAccountsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2077, 20))
    st_38 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_38)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_39, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2078, 20))
    st_39 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_39)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_40, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'usageUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2079, 20))
    st_40 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_40)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_41, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2080, 20))
    st_41 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_41)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_42, False))
    symbol = pyxb.binding.content.ElementUse(User._UseForTag(pyxb.namespace.ExpandedName(None, b'website')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2081, 20))
    st_42 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_42)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_26, True)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_26, False)]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_27, True)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_27, False)]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_28, True)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_28, False)]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_29, True)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_29, False)]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_30, True)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_30, False)]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_31, True)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_31, False)]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_32, True)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_32, False)]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_33, True)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_33, False)]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_34, True)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_34, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_34, False)]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_35, True)]))
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_35, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_35, False)]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
     fac.UpdateInstruction(cc_36, True)]))
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_36, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_36, False)]))
    st_36._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_37, [
     fac.UpdateInstruction(cc_37, True)]))
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_37, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_37, False)]))
    st_37._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_38, [
     fac.UpdateInstruction(cc_38, True)]))
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_38, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_38, False)]))
    st_38._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_39, [
     fac.UpdateInstruction(cc_39, True)]))
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_39, False)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_39, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_39, False)]))
    st_39._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_40, [
     fac.UpdateInstruction(cc_40, True)]))
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_40, False)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_40, False)]))
    st_40._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_41, [
     fac.UpdateInstruction(cc_41, True)]))
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_41, False)]))
    st_41._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_42, [
     fac.UpdateInstruction(cc_42, True)]))
    st_42._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


User._Automaton = _BuildAutomaton_163()
Users._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'users'), CTD_ANON_71, scope=Users, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2091, 20)))

def _BuildAutomaton_164():
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2091, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Users._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Users._UseForTag(pyxb.namespace.ExpandedName(None, b'users')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2091, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Users._Automaton = _BuildAutomaton_164()
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'address'), Address, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2106, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'approvalsUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2107, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badges'), CTD_ANON_72, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2108, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'creator'), User, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2115, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2116, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'email'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2117, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'inactive'), pyxb.binding.datatypes.boolean, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2118, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'logo'), Logo, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2119, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketingPlans'), CTD_ANON_73, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2120, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'marketingPlansUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2128, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'members'), CTD_ANON_74, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2129, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'membersUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2136, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2137, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbMembers'), pyxb.binding.datatypes.int, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2138, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbProductItems'), pyxb.binding.datatypes.int, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2139, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbProducts'), pyxb.binding.datatypes.int, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2140, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'notificationEmail'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2141, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'orgUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2142, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'phone'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2143, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'pricingPlans'), CTD_ANON_75, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2144, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'pricingPlansUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2151, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'products'), CTD_ANON_76, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2152, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'productsUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2159, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'purchasesUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2160, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportPlans'), CTD_ANON_77, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2161, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'supportPlansUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2168, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'twitterName'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2169, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_15, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2170, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2178, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'billingMappingUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2179, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'billingRenewTokenUri'), pyxb.binding.datatypes.anyURI, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2180, 20)))
Vendor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'website'), pyxb.binding.datatypes.string, scope=Vendor, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2181, 20)))

def _BuildAutomaton_165():
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2106, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2107, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2108, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2115, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2116, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2117, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2118, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2119, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2120, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2128, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2129, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2136, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2137, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2138, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2139, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2140, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2141, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2142, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2143, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2144, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2151, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2152, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2159, 20))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2160, 20))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2161, 20))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2168, 20))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2169, 20))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2170, 20))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2178, 20))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2179, 20))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2180, 20))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2181, 20))
    counters.add(cc_35)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'address')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2106, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'approvalsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2107, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'badges')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2108, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'creator')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2115, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2116, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'email')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2117, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'inactive')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2118, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'logo')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2119, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'marketingPlans')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2120, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'marketingPlansUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2128, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'members')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2129, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'membersUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2136, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2137, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'nbMembers')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2138, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'nbProductItems')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2139, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'nbProducts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2140, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'notificationEmail')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2141, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'orgUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2142, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'phone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2143, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'pricingPlans')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2144, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'pricingPlansUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2151, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'products')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2152, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'productsUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2159, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'purchasesUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2160, 20))
    st_27 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'supportPlans')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2161, 20))
    st_28 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'supportPlansUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2168, 20))
    st_29 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'twitterName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2169, 20))
    st_30 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2170, 20))
    st_31 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2178, 20))
    st_32 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_33, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'billingMappingUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2179, 20))
    st_33 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_34, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'billingRenewTokenUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2180, 20))
    st_34 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_35, False))
    symbol = pyxb.binding.content.ElementUse(Vendor._UseForTag(pyxb.namespace.ExpandedName(None, b'website')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2181, 20))
    st_35 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_25, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_26, True)]))
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_26, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_26, False)]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
     fac.UpdateInstruction(cc_27, True)]))
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_27, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_27, False)]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
     fac.UpdateInstruction(cc_28, True)]))
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_28, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_28, False)]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
     fac.UpdateInstruction(cc_29, True)]))
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_29, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_29, False)]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
     fac.UpdateInstruction(cc_30, True)]))
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_30, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_30, False)]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
     fac.UpdateInstruction(cc_31, True)]))
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_31, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_31, False)]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
     fac.UpdateInstruction(cc_32, True)]))
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_32, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_32, False)]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
     fac.UpdateInstruction(cc_33, True)]))
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_33, False)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_33, False)]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
     fac.UpdateInstruction(cc_34, True)]))
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_34, False)]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
     fac.UpdateInstruction(cc_35, True)]))
    st_35._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Vendor._Automaton = _BuildAutomaton_165()
VendorMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'role'), pyxb.binding.datatypes.string, scope=VendorMember, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2191, 20)))
VendorMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=VendorMember, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2192, 20)))
VendorMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'user'), User, scope=VendorMember, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2193, 20)))
VendorMember._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorUri'), pyxb.binding.datatypes.anyURI, scope=VendorMember, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2194, 20)))

def _BuildAutomaton_166():
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2191, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2192, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2193, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2194, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, b'role')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2191, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2192, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, b'user')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2193, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(VendorMember._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2194, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


VendorMember._Automaton = _BuildAutomaton_166()
VendorMembers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendorMembers'), CTD_ANON_78, scope=VendorMembers, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2204, 20)))

def _BuildAutomaton_167():
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2204, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VendorMembers._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VendorMembers._UseForTag(pyxb.namespace.ExpandedName(None, b'vendorMembers')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2204, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


VendorMembers._Automaton = _BuildAutomaton_167()
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2221, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2222, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'email'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2223, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'website'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2224, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'phone'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2225, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'address'), Address, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2226, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'logo'), Logo, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2227, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbProductItems'), pyxb.binding.datatypes.int, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2228, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'nbProducts'), pyxb.binding.datatypes.int, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2229, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'twitterName'), pyxb.binding.datatypes.string, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2230, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2231, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_16, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2232, 20)))
VendorSummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'badges'), CTD_ANON_79, scope=VendorSummary, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2240, 20)))

def _BuildAutomaton_168():
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2221, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2222, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2223, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2224, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2225, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2226, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2227, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2228, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2229, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2230, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2231, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2232, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2240, 20))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2221, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2222, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'email')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2223, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'website')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2224, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'phone')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2225, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'address')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2226, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'logo')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2227, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'nbProductItems')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2228, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'nbProducts')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2229, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'twitterName')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2230, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2231, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2232, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(VendorSummary._UseForTag(pyxb.namespace.ExpandedName(None, b'badges')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2240, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


VendorSummary._Automaton = _BuildAutomaton_168()
Vendors._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'vendors'), CTD_ANON_80, scope=Vendors, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2256, 20)))

def _BuildAutomaton_169():
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2256, 20))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Vendors._UseForTag(pyxb.namespace.ExpandedName(None, b'total')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1943, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Vendors._UseForTag(pyxb.namespace.ExpandedName(None, b'vendors')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2256, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Vendors._Automaton = _BuildAutomaton_169()
VendorMappingItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uforgeId'), pyxb.binding.datatypes.long, scope=VendorMappingItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2272, 20)))
VendorMappingItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'billingId'), pyxb.binding.datatypes.long, scope=VendorMappingItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2273, 20)))
VendorMappingItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'data'), pyxb.binding.datatypes.string, scope=VendorMappingItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2274, 20)))
VendorMappingItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'latestDigest'), pyxb.binding.datatypes.string, scope=VendorMappingItem, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2275, 20)))

def _BuildAutomaton_170():
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2272, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2273, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2274, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2275, 20))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, b'uforgeId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2272, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, b'billingId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2273, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, b'data')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2274, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(VendorMappingItem._UseForTag(pyxb.namespace.ExpandedName(None, b'latestDigest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 2275, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


VendorMappingItem._Automaton = _BuildAutomaton_170()
Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'binaryUri'), pyxb.binding.datatypes.anyURI, scope=Artifact, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20)))
Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=Artifact, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20)))
Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'downloadUri'), pyxb.binding.datatypes.anyURI, scope=Artifact, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20)))
Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Artifact, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20)))
Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'remoteLocation'), pyxb.binding.datatypes.anyURI, scope=Artifact, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20)))
Artifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Artifact, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20)))

def _BuildAutomaton_171():
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'md5sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'mimeType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'sha256sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'size')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'uploaded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'uploadedTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'binaryUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'downloadUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'remoteLocation')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Artifact._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Artifact._Automaton = _BuildAutomaton_171()
Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Image, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 771, 20)))
Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=Image, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 772, 20)))
Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'completeSize'), pyxb.binding.datatypes.long, scope=Image, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 773, 20)))
Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Image, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 774, 20)))
Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'revision'), pyxb.binding.datatypes.int, scope=Image, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 775, 20)))

def _BuildAutomaton_172():
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 771, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 772, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 773, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 774, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 775, 20))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'md5sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'mimeType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'sha256sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'size')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'uploaded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'uploadedTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 771, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 772, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'completeSize')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 773, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 774, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, b'revision')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 775, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Image._Automaton = _BuildAutomaton_172()
Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'description'), pyxb.binding.datatypes.string, scope=Logo, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 861, 20)))
Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'name'), pyxb.binding.datatypes.string, scope=Logo, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 862, 20)))
Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'parentUri'), pyxb.binding.datatypes.anyURI, scope=Logo, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 863, 20)))
Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'title'), pyxb.binding.datatypes.string, scope=Logo, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 864, 20)))
Logo._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'uri'), pyxb.binding.datatypes.anyURI, scope=Logo, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 865, 20)))

def _BuildAutomaton_173():
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 861, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 862, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 863, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 864, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 865, 20))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'md5sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'mimeType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'sha256sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'size')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'uploaded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'uploadedTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 861, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 862, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'parentUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 863, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'title')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 864, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Logo._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 865, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


Logo._Automaton = _BuildAutomaton_173()
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'version'), pyxb.binding.datatypes.string, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 267, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'passwordSet'), pyxb.binding.datatypes.boolean, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 269, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'bootscriptsAdded'), pyxb.binding.datatypes.boolean, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 270, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'softwareAdded'), pyxb.binding.datatypes.boolean, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 271, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'exportUri'), pyxb.binding.datatypes.anyURI, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 273, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'applianceUri'), pyxb.binding.datatypes.anyURI, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 274, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'serverUrl'), pyxb.binding.datatypes.anyURI, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 275, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'accountUri'), pyxb.binding.datatypes.anyURI, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 276, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'osSettings'), OSSettings, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 278, 20)))
ApplianceTemplate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'installSettings'), InstallSettings, scope=ApplianceTemplate, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 279, 20)))

def _BuildAutomaton_174():
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 267, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 269, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 270, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 271, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 273, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 274, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 275, 20))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 276, 20))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 278, 20))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 279, 20))
    counters.add(cc_26)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'md5sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'mimeType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'sha256sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'size')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'uploaded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'uploadedTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'binaryUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'downloadUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'remoteLocation')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'version')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 267, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'passwordSet')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 269, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'bootscriptsAdded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 270, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'softwareAdded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 271, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'exportUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 273, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'applianceUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 274, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'serverUrl')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 275, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'accountUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 276, 20))
    st_24 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'osSettings')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 278, 20))
    st_25 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(ApplianceTemplate._UseForTag(pyxb.namespace.ExpandedName(None, b'installSettings')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 279, 20))
    st_26 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_22, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_23, True)]))
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_23, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_23, False)]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
     fac.UpdateInstruction(cc_24, True)]))
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_24, False)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_24, False)]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
     fac.UpdateInstruction(cc_25, True)]))
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_25, False)]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
     fac.UpdateInstruction(cc_26, True)]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


ApplianceTemplate._Automaton = _BuildAutomaton_174()
MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'machineImageUri'), pyxb.binding.datatypes.anyURI, scope=MachineImage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 875, 20)))
MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'format'), STD_ANON_5, scope=MachineImage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 876, 20)))
MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'osType'), STD_ANON_6, scope=MachineImage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 884, 20)))
MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'recommendation'), pyxb.binding.datatypes.string, scope=MachineImage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 892, 20)))
MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'serverUrl'), pyxb.binding.datatypes.anyURI, scope=MachineImage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 893, 20)))
MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'accountUri'), pyxb.binding.datatypes.anyURI, scope=MachineImage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 894, 20)))
MachineImage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'type'), STD_ANON_7, scope=MachineImage, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 895, 20)))

def _BuildAutomaton_175():
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 875, 20))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 876, 20))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 884, 20))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 892, 20))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 893, 20))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 894, 20))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 895, 20))
    counters.add(cc_23)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'md5sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'mimeType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'sha256sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'size')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'uploaded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'uploadedTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'binaryUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'downloadUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'remoteLocation')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'machineImageUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 875, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'format')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 876, 20))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'osType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 884, 20))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'recommendation')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 892, 20))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'serverUrl')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 893, 20))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'accountUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 894, 20))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(MachineImage._UseForTag(pyxb.namespace.ExpandedName(None, b'type')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 895, 20))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_16, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_17, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_17, False)]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
     fac.UpdateInstruction(cc_18, True)]))
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_18, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_18, False)]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
     fac.UpdateInstruction(cc_19, True)]))
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_19, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_19, False)]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
     fac.UpdateInstruction(cc_20, True)]))
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_20, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_20, False)]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
     fac.UpdateInstruction(cc_21, True)]))
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_21, False)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_21, False)]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
     fac.UpdateInstruction(cc_22, True)]))
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_22, False)]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
     fac.UpdateInstruction(cc_23, True)]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


MachineImage._Automaton = _BuildAutomaton_175()
SaaS._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, b'serviceUrl'), pyxb.binding.datatypes.string, scope=SaaS, location=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1709, 20)))

def _BuildAutomaton_176():
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac
    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1709, 20))
    counters.add(cc_17)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'created')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1934, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'dbId')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1935, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'digest')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1936, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'lastModified')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1937, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'md5sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1951, 20))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'mimeType')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1952, 20))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'sha256sum')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1953, 20))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'size')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1954, 20))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'status')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1955, 20))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'uploaded')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1956, 20))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'uploadedTime')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1957, 20))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'binaryUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 340, 20))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'description')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 341, 20))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'downloadUri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 342, 20))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'name')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 343, 20))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'remoteLocation')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 344, 20))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'uri')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 345, 20))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(SaaS._UseForTag(pyxb.namespace.ExpandedName(None, b'serviceUrl')), pyxb.utils.utility.Location(b'/home/joris/UShareSoft/WKS/uforge/apitools/python/ApiAndCli_gen/build/lib/phamr/tools/marketplace.xsd', 1709, 20))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
     fac.UpdateInstruction(cc_0, True)]))
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_0, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_0, False)]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
     fac.UpdateInstruction(cc_1, True)]))
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_1, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_1, False)]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
     fac.UpdateInstruction(cc_2, True)]))
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_2, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_2, False)]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
     fac.UpdateInstruction(cc_3, True)]))
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_3, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_3, False)]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
     fac.UpdateInstruction(cc_4, True)]))
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_4, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_4, False)]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
     fac.UpdateInstruction(cc_5, True)]))
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_5, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_5, False)]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
     fac.UpdateInstruction(cc_6, True)]))
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_6, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_6, False)]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
     fac.UpdateInstruction(cc_7, True)]))
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_7, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_7, False)]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
     fac.UpdateInstruction(cc_8, True)]))
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_8, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_8, False)]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
     fac.UpdateInstruction(cc_9, True)]))
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_9, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_9, False)]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
     fac.UpdateInstruction(cc_10, True)]))
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_10, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_10, False)]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
     fac.UpdateInstruction(cc_11, True)]))
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_11, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_11, False)]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
     fac.UpdateInstruction(cc_12, True)]))
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_12, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_12, False)]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
     fac.UpdateInstruction(cc_13, True)]))
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_13, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_13, False)]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
     fac.UpdateInstruction(cc_14, True)]))
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_14, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_14, False)]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
     fac.UpdateInstruction(cc_15, True)]))
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_15, False)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_15, False)]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
     fac.UpdateInstruction(cc_16, True)]))
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_16, False)]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
     fac.UpdateInstruction(cc_17, True)]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)


SaaS._Automaton = _BuildAutomaton_176()