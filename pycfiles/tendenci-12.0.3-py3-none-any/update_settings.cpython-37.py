# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /Users/jennyq/.pyenv/versions/venv_t12/lib/python3.7/site-packages/tendenci/apps/site_settings/management/commands/update_settings.py
# Compiled at: 2020-03-30 17:48:04
# Size of source mod 2**32: 6377 bytes
import os, simplejson as json
import django.conf as django_settings
from django.core.management.base import BaseCommand
from tendenci.apps.site_settings.models import Setting
from tendenci.apps.theme.utils import get_theme_root

class Command(BaseCommand):
    __doc__ = '\n    Update site settings in the database. It reads the settings.json\n    under each installed app or apps specified in the arguments,\n    and add or update the settings accordingly.\n\n    Usage:\n        python manage.py update_settings <appname appname ...>\n\n    Example:\n        python manage.py update_settings articles plugins.donations\n\n    If no appname specified, it updates for ALL installed apps.\n\n    Json required fields (for lookups):\n        `scope`\n        `scope_category`\n        `name`\n\n    Json columns that cannot be updated:\n        `value`: It would just be mean to override a\n                 clients setting value\n\n    Json format:\n        [\n          {\n            "name": "",\n            "label": "",\n            "description": "",\n            "data_type": "",\n            "default_value": "",\n            "input_type": "",\n            "input_value": "",\n            "client_editable": "",\n            "store": "",\n            "scope": "",\n            "scope_category": "",\n          }\n        ]\n\n    Json example:\n        [\n          {\n            "name": "enabled",\n            "label": "enabled",\n            "description": "Module is enabled or not.",\n            "data_type": "boolean",\n            "default_value": true,\n            "input_type": "select",\n            "input_value": "true, false",\n            "client_editable": "1",\n            "store": "1",\n            "scope": "module",\n            "scope_category": "memberships",\n          }\n        ]\n\n    Json field definitions:\n        `name`: The machine name. No spaces or special characters.\n              Remember that this is what the python code uses to\n              find the setting\n\n        `label`: The human readable version of \'name\'\n\n        `description`: A non-html or html description of the setting.\n                       Refer to the \'site_settings_setting\' table for examples\n\n        `data_type`: boolean or string\n\n        `default_value`: the original value\n\n        `input_type`: select or text (used by the autogenerated interface)\n\n        `input_value`: comma delimited list or just a string\n\n        `store`: boolean value. Tell the system whether or not to\n               cache the setting\n\n        `scope`: site or module\n\n        `scope_category`: this is the module name the settings belongs too.\n                        refer to django contenttypes app_label. If this\n                        is a settings that doesn\'t apply to a django\n                        application use \'global\'\n    '
    help = 'Update settings in the site_settings_setting table'

    def update_settings(self, settings, verbosity=1):
        """
        Loop through the settings and add or update them
        """
        required_keys = [
         'scope',
         'scope_category',
         'name']
        for setting in settings:
            req_list = [k for k in setting if k in required_keys]
            if len(req_list) != len(required_keys):
                print('Setting does not have the required fields ... skipping.')
                continue
            try:
                current_setting = (Setting.objects.filter)(name=setting['name'], 
                 scope=setting['scope'], 
                 scope_category=setting['scope_category'])[0]
            except:
                current_setting = None

            if current_setting:
                if 'value' in setting:
                    del setting['value']
                current_setting.__dict__.update(setting)
                current_setting.save()
                print('%s (%s)  - updated.' % (
                 setting['name'],
                 setting['scope_category']))
            else:
                new_setting = Setting(**setting)
                new_setting.save()
                print('%s (%s)  - added.' % (
                 setting['name'],
                 setting['scope_category']))

    def add_arguments(self, parser):
        parser.add_argument('appnames', nargs='*',
          help='app names to update')

    def handle(self, appnames, **options):
        try:
            verbosity = int(options['verbosity'])
        except:
            verbosity = 1

        if not appnames:
            appnames = django_settings.INSTALLED_APPS
            appnames = [app for app in appnames if not app.startswith('django.')]
        for appname in appnames:
            print()
            print('Processing for %s ...' % appname)
            if appname.startswith('addons.'):
                json_file = os.path.abspath(os.path.join(django_settings.PROJECT_ROOT, (os.path.join)(*appname.split('.')), 'settings.json'))
            else:
                if appname.startswith('themes.'):
                    theme_root = get_theme_root(appname[len('themes.'):])
                    json_file = os.path.join(theme_root, 'settings.json')
                else:
                    json_file = os.path.abspath(os.path.join(django_settings.TENDENCI_ROOT, '..', (os.path.join)(*appname.split('.')), 'settings.json'))
            if os.path.isfile(json_file):
                with open(json_file, 'r') as (f):
                    try:
                        settings = json.loads(f.read())
                    except ValueError as e:
                        try:
                            print('Error updating setting for %s/settings.json' % appname)
                            print(e)
                            continue
                        finally:
                            e = None
                            del e

                if settings:
                    self.update_settings(settings, verbosity=verbosity)