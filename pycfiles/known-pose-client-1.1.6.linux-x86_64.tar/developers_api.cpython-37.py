# uncompyle6 version 3.7.4
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.6.9 (default, Apr 18 2020, 01:56:04) 
# [GCC 8.4.0]
# Embedded file name: /usr/lib/python3.7/site-packages/known_pose_client/api/developers_api.py
# Compiled at: 2019-10-26 08:01:19
# Size of source mod 2**32: 23170 bytes
"""
    Known Pose API

    Define and retrieve (accurate) semantic poses in a 2D environment. This version is a workaround for some not yet available features of the OpenAPI Specification v3.0 (e.g. `anyOf` as a response type and adding a  `discriminator` for supporting polymorphism/composition). Therefore, ATM the sub-components BasicPose and InaccuratePose are reference objects inside their respective parent model.    # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: Kai.Waelti@dfki.de
    Generated by: https://openapi-generator.tech
"""
from __future__ import absolute_import
import re, six
from known_pose_client.api_client import ApiClient
from known_pose_client.exceptions import ApiTypeError, ApiValueError

class DevelopersApi(object):
    __doc__ = 'NOTE: This class is auto generated by OpenAPI Generator\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n    '

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_pose(self, **kwargs):
        """adds a pose item  # noqa: E501

        Adds an accurate or inaccurate pose to the system. Add current pose (without pose request body) to add an accurate pose.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pose(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param BasicPose basic_pose: Optional pose item to add
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.add_pose_with_http_info)(**kwargs)

    def add_pose_with_http_info(self, **kwargs):
        """adds a pose item  # noqa: E501

        Adds an accurate or inaccurate pose to the system. Add current pose (without pose request body) to add an accurate pose.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pose_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param BasicPose basic_pose: Optional pose item to add
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'basic_pose']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method add_pose" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        collection_formats = {}
        path_params = {}
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        if 'basic_pose' in local_var_params:
            body_params = local_var_params['basic_pose']
        header_params['Content-Type'] = self.api_client.select_header_content_type([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/poses',
          'POST', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type=None,
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)

    def poses_id_delete(self, id, **kwargs):
        """deletes a pose item  # noqa: E501

        Deletes an accurate or inaccurate pose from the system using the `uuid`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.poses_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: uuid (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.poses_id_delete_with_http_info)(id, **kwargs)

    def poses_id_delete_with_http_info(self, id, **kwargs):
        """deletes a pose item  # noqa: E501

        Deletes an accurate or inaccurate pose from the system using the `uuid`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.poses_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: uuid (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse200, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'id']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method poses_id_delete" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        if 'id' not in local_var_params or local_var_params['id'] is None:
            raise ApiValueError('Missing the required parameter `id` when calling `poses_id_delete`')
        collection_formats = {}
        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']
        query_params = []
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/poses/{id}',
          'DELETE', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='InlineResponse200',
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)

    def search_accurate_pose(self, **kwargs):
        """searches accurate pose  # noqa: E501

        By passing in the appropriate options, you can search for defined accurate semantic poses in the environment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_accurate_pose(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: optional uuid of a single accurate pose to be returned
        :param str search_string: pass an optional search string for looking up a pose
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AccuratePose
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.search_accurate_pose_with_http_info)(**kwargs)

    def search_accurate_pose_with_http_info(self, **kwargs):
        """searches accurate pose  # noqa: E501

        By passing in the appropriate options, you can search for defined accurate semantic poses in the environment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_accurate_pose_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: optional uuid of a single accurate pose to be returned
        :param str search_string: pass an optional search string for looking up a pose
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AccuratePose, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'id', 'search_string', 'skip', 'limit']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method search_accurate_pose" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        if 'skip' in local_var_params:
            if local_var_params['skip'] < 0:
                raise ApiValueError('Invalid value for parameter `skip` when calling `search_accurate_pose`, must be a value greater than or equal to `0`')
        if 'limit' in local_var_params:
            if local_var_params['limit'] > 50:
                raise ApiValueError('Invalid value for parameter `limit` when calling `search_accurate_pose`, must be a value less than or equal to `50`')
        if 'limit' in local_var_params:
            if local_var_params['limit'] < 0:
                raise ApiValueError('Invalid value for parameter `limit` when calling `search_accurate_pose`, must be a value greater than or equal to `0`')
        collection_formats = {}
        path_params = {}
        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))
        if 'search_string' in local_var_params:
            query_params.append(('searchString', local_var_params['search_string']))
        if 'skip' in local_var_params:
            query_params.append(('skip', local_var_params['skip']))
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/poses/accurate',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='AccuratePose',
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)

    def search_pose(self, **kwargs):
        """searches pose  # noqa: E501

        By passing in the appropriate options, you can search for defined semantic poses in the environment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_pose(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: optional uuid of a single pose to be returned
        :param str search_string: pass an optional search string for looking up a pose
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[InaccuratePose]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return (self.search_pose_with_http_info)(**kwargs)

    def search_pose_with_http_info(self, **kwargs):
        """searches pose  # noqa: E501

        By passing in the appropriate options, you can search for defined semantic poses in the environment   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_pose_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: optional uuid of a single pose to be returned
        :param str search_string: pass an optional search string for looking up a pose
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[InaccuratePose], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """
        local_var_params = locals()
        all_params = [
         'id', 'search_string', 'skip', 'limit']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method search_pose" % key)
            local_var_params[key] = val

        del local_var_params['kwargs']
        if 'skip' in local_var_params:
            if local_var_params['skip'] < 0:
                raise ApiValueError('Invalid value for parameter `skip` when calling `search_pose`, must be a value greater than or equal to `0`')
        if 'limit' in local_var_params:
            if local_var_params['limit'] > 50:
                raise ApiValueError('Invalid value for parameter `limit` when calling `search_pose`, must be a value less than or equal to `50`')
        if 'limit' in local_var_params:
            if local_var_params['limit'] < 0:
                raise ApiValueError('Invalid value for parameter `limit` when calling `search_pose`, must be a value greater than or equal to `0`')
        collection_formats = {}
        path_params = {}
        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))
        if 'search_string' in local_var_params:
            query_params.append(('searchString', local_var_params['search_string']))
        if 'skip' in local_var_params:
            query_params.append(('skip', local_var_params['skip']))
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))
        header_params = {}
        form_params = []
        local_var_files = {}
        body_params = None
        header_params['Accept'] = self.api_client.select_header_accept([
         'application/json'])
        auth_settings = []
        return self.api_client.call_api('/poses',
          'GET', path_params,
          query_params,
          header_params,
          body=body_params,
          post_params=form_params,
          files=local_var_files,
          response_type='list[InaccuratePose]',
          auth_settings=auth_settings,
          async_req=(local_var_params.get('async_req')),
          _return_http_data_only=(local_var_params.get('_return_http_data_only')),
          _preload_content=(local_var_params.get('_preload_content', True)),
          _request_timeout=(local_var_params.get('_request_timeout')),
          collection_formats=collection_formats)