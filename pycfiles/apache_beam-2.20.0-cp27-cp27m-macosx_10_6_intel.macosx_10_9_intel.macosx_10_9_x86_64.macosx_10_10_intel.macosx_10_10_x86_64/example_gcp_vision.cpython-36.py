# uncompyle6 version 3.6.7
# Python bytecode 3.6 (3379)
# Decompiled from: Python 3.8.2 (tags/v3.8.2:7b3ab59, Feb 25 2020, 23:03:10) [MSC v.1916 64 bit (AMD64)]
# Embedded file name: build/bdist.macosx-10.7-x86_64/egg/airflow/contrib/example_dags/example_gcp_vision.py
# Compiled at: 2019-09-11 03:47:34
# Size of source mod 2**32: 19791 bytes
__doc__ = '\nExample Airflow DAG that creates, gets, updates and deletes Products and Product Sets in the Google Cloud\nVision service in the Google Cloud Platform.\n\nThis DAG relies on the following OS environment variables\n\n* GCP_VISION_LOCATION - Zone where the instance exists.\n* GCP_VISION_PRODUCT_SET_ID - Product Set ID.\n* GCP_VISION_PRODUCT_ID - Product  ID.\n* GCP_VISION_REFERENCE_IMAGE_ID - Reference Image ID.\n* GCP_VISION_REFERENCE_IMAGE_URL - A link to the bucket that contains the reference image.\n* GCP_VISION_ANNOTATE_IMAGE_URL - A link to the bucket that contains the file to be annotated.\n\n'
import os
from google.api_core.retry import Retry
from google.cloud.vision_v1.types import ProductSet
from google.cloud.vision_v1.types import Product
from google.cloud.vision_v1.types import ReferenceImage
from google.cloud.vision import enums
import airflow
from airflow import models
from airflow.operators.bash_operator import BashOperator
from airflow.contrib.operators.gcp_vision_operator import CloudVisionProductSetCreateOperator, CloudVisionProductSetGetOperator, CloudVisionProductSetUpdateOperator, CloudVisionProductSetDeleteOperator, CloudVisionProductCreateOperator, CloudVisionProductGetOperator, CloudVisionProductUpdateOperator, CloudVisionProductDeleteOperator, CloudVisionReferenceImageCreateOperator, CloudVisionAddProductToProductSetOperator, CloudVisionRemoveProductFromProductSetOperator, CloudVisionAnnotateImageOperator, CloudVisionDetectTextOperator, CloudVisionDetectDocumentTextOperator, CloudVisionDetectImageLabelsOperator, CloudVisionDetectImageSafeSearchOperator
default_args = {'start_date': airflow.utils.dates.days_ago(1)}
GCP_VISION_LOCATION = os.environ.get('GCP_VISION_LOCATION', 'europe-west1')
GCP_VISION_PRODUCT_SET_ID = os.environ.get('GCP_VISION_PRODUCT_SET_ID', 'product_set_explicit_id')
GCP_VISION_PRODUCT_ID = os.environ.get('GCP_VISION_PRODUCT_ID', 'product_explicit_id')
GCP_VISION_REFERENCE_IMAGE_ID = os.environ.get('GCP_VISION_REFERENCE_IMAGE_ID', 'reference_image_explicit_id')
GCP_VISION_REFERENCE_IMAGE_URL = os.environ.get('GCP_VISION_REFERENCE_IMAGE_URL', 'gs://bucket/image1.jpg')
GCP_VISION_ANNOTATE_IMAGE_URL = os.environ.get('GCP_VISION_ANNOTATE_IMAGE_URL', 'gs://bucket/image2.jpg')
product_set = ProductSet(display_name='My Product Set')
product = Product(display_name='My Product 1', product_category='toys')
reference_image = ReferenceImage(uri=GCP_VISION_REFERENCE_IMAGE_URL)
annotate_image_request = {'image':{'source': {'image_uri': GCP_VISION_ANNOTATE_IMAGE_URL}}, 
 'features':[
  {'type': enums.Feature.Type.LOGO_DETECTION}]}
DETECT_IMAGE = {'source': {'image_uri': GCP_VISION_ANNOTATE_IMAGE_URL}}
with models.DAG('example_gcp_vision_autogenerated_id',
  default_args=default_args, schedule_interval=None) as (dag_autogenerated_id):
    product_set_create = CloudVisionProductSetCreateOperator(location=GCP_VISION_LOCATION,
      product_set=product_set,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='product_set_create')
    product_set_get = CloudVisionProductSetGetOperator(location=GCP_VISION_LOCATION,
      product_set_id="{{ task_instance.xcom_pull('product_set_create') }}",
      task_id='product_set_get')
    product_set_update = CloudVisionProductSetUpdateOperator(location=GCP_VISION_LOCATION,
      product_set_id="{{ task_instance.xcom_pull('product_set_create') }}",
      product_set=ProductSet(display_name='My Product Set 2'),
      task_id='product_set_update')
    product_set_delete = CloudVisionProductSetDeleteOperator(location=GCP_VISION_LOCATION,
      product_set_id="{{ task_instance.xcom_pull('product_set_create') }}",
      task_id='product_set_delete')
    product_create = CloudVisionProductCreateOperator(location=GCP_VISION_LOCATION,
      product=product,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='product_create')
    product_get = CloudVisionProductGetOperator(location=GCP_VISION_LOCATION,
      product_id="{{ task_instance.xcom_pull('product_create') }}",
      task_id='product_get')
    product_update = CloudVisionProductUpdateOperator(location=GCP_VISION_LOCATION,
      product_id="{{ task_instance.xcom_pull('product_create') }}",
      product=Product(display_name='My Product 2', description='My updated description'),
      task_id='product_update')
    product_delete = CloudVisionProductDeleteOperator(location=GCP_VISION_LOCATION,
      product_id="{{ task_instance.xcom_pull('product_create') }}",
      task_id='product_delete')
    reference_image_create = CloudVisionReferenceImageCreateOperator(location=GCP_VISION_LOCATION,
      reference_image=reference_image,
      product_id="{{ task_instance.xcom_pull('product_create') }}",
      reference_image_id=GCP_VISION_REFERENCE_IMAGE_ID,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='reference_image_create')
    add_product_to_product_set = CloudVisionAddProductToProductSetOperator(location=GCP_VISION_LOCATION,
      product_set_id="{{ task_instance.xcom_pull('product_set_create') }}",
      product_id="{{ task_instance.xcom_pull('product_create') }}",
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='add_product_to_product_set')
    remove_product_from_product_set = CloudVisionRemoveProductFromProductSetOperator(location=GCP_VISION_LOCATION,
      product_set_id="{{ task_instance.xcom_pull('product_set_create') }}",
      product_id="{{ task_instance.xcom_pull('product_create') }}",
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='remove_product_from_product_set')
    product_create >> product_get >> product_update >> product_delete
    product_set_create >> product_set_get >> product_set_update >> product_set_delete
    product_create >> reference_image_create >> product_delete
    product_create >> add_product_to_product_set
    product_set_create >> add_product_to_product_set
    add_product_to_product_set >> remove_product_from_product_set
    remove_product_from_product_set >> product_delete
    remove_product_from_product_set >> product_set_delete
with models.DAG('example_gcp_vision_explicit_id',
  default_args=default_args, schedule_interval=None) as (dag_explicit_id):
    product_set_create_2 = CloudVisionProductSetCreateOperator(product_set_id=GCP_VISION_PRODUCT_SET_ID,
      location=GCP_VISION_LOCATION,
      product_set=product_set,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='product_set_create_2')
    product_set_create_2_idempotence = CloudVisionProductSetCreateOperator(product_set_id=GCP_VISION_PRODUCT_SET_ID,
      location=GCP_VISION_LOCATION,
      product_set=product_set,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='product_set_create_2_idempotence')
    product_set_get_2 = CloudVisionProductSetGetOperator(location=GCP_VISION_LOCATION,
      product_set_id=GCP_VISION_PRODUCT_SET_ID,
      task_id='product_set_get_2')
    product_set_update_2 = CloudVisionProductSetUpdateOperator(location=GCP_VISION_LOCATION,
      product_set_id=GCP_VISION_PRODUCT_SET_ID,
      product_set=ProductSet(display_name='My Product Set 2'),
      task_id='product_set_update_2')
    product_set_delete_2 = CloudVisionProductSetDeleteOperator(location=GCP_VISION_LOCATION,
      product_set_id=GCP_VISION_PRODUCT_SET_ID,
      task_id='product_set_delete_2')
    product_create_2 = CloudVisionProductCreateOperator(product_id=GCP_VISION_PRODUCT_ID,
      location=GCP_VISION_LOCATION,
      product=product,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='product_create_2')
    product_create_2_idempotence = CloudVisionProductCreateOperator(product_id=GCP_VISION_PRODUCT_ID,
      location=GCP_VISION_LOCATION,
      product=product,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='product_create_2_idempotence')
    product_get_2 = CloudVisionProductGetOperator(location=GCP_VISION_LOCATION,
      product_id=GCP_VISION_PRODUCT_ID,
      task_id='product_get_2')
    product_update_2 = CloudVisionProductUpdateOperator(location=GCP_VISION_LOCATION,
      product_id=GCP_VISION_PRODUCT_ID,
      product=Product(display_name='My Product 2', description='My updated description'),
      task_id='product_update_2')
    product_delete_2 = CloudVisionProductDeleteOperator(location=GCP_VISION_LOCATION,
      product_id=GCP_VISION_PRODUCT_ID,
      task_id='product_delete_2')
    reference_image_create_2 = CloudVisionReferenceImageCreateOperator(location=GCP_VISION_LOCATION,
      reference_image=reference_image,
      product_id=GCP_VISION_PRODUCT_ID,
      reference_image_id=GCP_VISION_REFERENCE_IMAGE_ID,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='reference_image_create_2')
    reference_image_create_2_idempotence = CloudVisionReferenceImageCreateOperator(location=GCP_VISION_LOCATION,
      reference_image=reference_image,
      product_id=GCP_VISION_PRODUCT_ID,
      reference_image_id=GCP_VISION_REFERENCE_IMAGE_ID,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='reference_image_create_2_idempotence')
    add_product_to_product_set_2 = CloudVisionAddProductToProductSetOperator(location=GCP_VISION_LOCATION,
      product_set_id=GCP_VISION_PRODUCT_SET_ID,
      product_id=GCP_VISION_PRODUCT_ID,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='add_product_to_product_set_2')
    remove_product_from_product_set_2 = CloudVisionRemoveProductFromProductSetOperator(location=GCP_VISION_LOCATION,
      product_set_id=GCP_VISION_PRODUCT_SET_ID,
      product_id=GCP_VISION_PRODUCT_ID,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='remove_product_from_product_set_2')
    product_create_2 >> product_create_2_idempotence >> product_get_2 >> product_update_2 >> product_delete_2
    product_set_create_2 >> product_set_get_2 >> product_set_update_2 >> product_set_delete_2
    product_set_create_2 >> product_set_create_2_idempotence >> product_set_delete_2
    product_create_2 >> reference_image_create_2 >> reference_image_create_2_idempotence >> product_delete_2
    add_product_to_product_set_2 >> remove_product_from_product_set_2
    product_set_create_2 >> add_product_to_product_set_2
    product_create_2 >> add_product_to_product_set_2
    remove_product_from_product_set_2 >> product_set_delete_2
    remove_product_from_product_set_2 >> product_delete_2
with models.DAG('example_gcp_vision_annotate_image',
  default_args=default_args, schedule_interval=None) as (dag_annotate_image):
    annotate_image = CloudVisionAnnotateImageOperator(request=annotate_image_request,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='annotate_image')
    annotate_image_result = BashOperator(bash_command="echo {{ task_instance.xcom_pull('annotate_image')['logoAnnotations'][0]['description'] }}",
      task_id='annotate_image_result')
    detect_text = CloudVisionDetectTextOperator(image=DETECT_IMAGE,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='detect_text',
      language_hints='en',
      web_detection_params={'include_geo_results': True})
    detect_text_result = BashOperator(bash_command="echo {{ task_instance.xcom_pull('detect_text')['textAnnotations'][0] }}",
      task_id='detect_text_result')
    document_detect_text = CloudVisionDetectDocumentTextOperator(image=DETECT_IMAGE,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='document_detect_text')
    document_detect_text_result = BashOperator(bash_command="echo {{ task_instance.xcom_pull('document_detect_text')['textAnnotations'][0] }}",
      task_id='document_detect_text_result')
    detect_labels = CloudVisionDetectImageLabelsOperator(image=DETECT_IMAGE,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='detect_labels')
    detect_labels_result = BashOperator(bash_command="echo {{ task_instance.xcom_pull('detect_labels')['labelAnnotations'][0] }}",
      task_id='detect_labels_result')
    detect_safe_search = CloudVisionDetectImageSafeSearchOperator(image=DETECT_IMAGE,
      retry=Retry(maximum=10.0),
      timeout=5,
      task_id='detect_safe_search')
    detect_safe_search_result = BashOperator(bash_command="echo {{ task_instance.xcom_pull('detect_safe_search') }}",
      task_id='detect_safe_search_result')
    annotate_image >> annotate_image_result
    detect_text >> detect_text_result
    document_detect_text >> document_detect_text_result
    detect_labels >> detect_labels_result
    detect_safe_search >> detect_safe_search_result